
H750_Signalanalyzer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f410  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  0800f6b0  0800f6b0  0001f6b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800fad4  0800fad4  0001fad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800fad8  0800fad8  0001fad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000030c  24000000  0800fadc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00010c40  24000310  0800fde8  00020310  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  24010f50  0800fde8  00020f50  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002030c  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002033a  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001b052  00000000  00000000  0002037d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000042b5  00000000  00000000  0003b3cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001558  00000000  00000000  0003f688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000fef  00000000  00000000  00040be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003c0ca  00000000  00000000  00041bcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001c83d  00000000  00000000  0007dc99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016bb20  00000000  00000000  0009a4d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000067c0  00000000  00000000  00205ff8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000051  00000000  00000000  0020c7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000310 	.word	0x24000310
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f698 	.word	0x0800f698

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000314 	.word	0x24000314
 80002dc:	0800f698 	.word	0x0800f698

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <adc_runDebugTests>:
	adc.active = 1;
	return 0;
}

#if ADCDEBUG==1
uint8_t adc_runDebugTests() {
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0



	return 0;
 8000394:	2300      	movs	r3, #0
}
 8000396:	4618      	mov	r0, r3
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr

080003a0 <CubeM_DefChInit>:
uint8_t EOL[CUBEMONSMALLBUFSIZE] = "\n";
uint8_t EOLlen = 0;

cubeMchannel_t cubemChannels[CUBEMONMAXSIGNALS];

void CubeM_DefChInit() {
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
	for(uint8_t i=0; i<CUBEMONMAXSIGNALS; i++) {
 80003a6:	2300      	movs	r3, #0
 80003a8:	71fb      	strb	r3, [r7, #7]
 80003aa:	e03b      	b.n	8000424 <CubeM_DefChInit+0x84>
		cubemChannels[i].newvalue = 0;
 80003ac:	79fa      	ldrb	r2, [r7, #7]
 80003ae:	4921      	ldr	r1, [pc, #132]	; (8000434 <CubeM_DefChInit+0x94>)
 80003b0:	4613      	mov	r3, r2
 80003b2:	009b      	lsls	r3, r3, #2
 80003b4:	4413      	add	r3, r2
 80003b6:	00db      	lsls	r3, r3, #3
 80003b8:	440b      	add	r3, r1
 80003ba:	2200      	movs	r2, #0
 80003bc:	701a      	strb	r2, [r3, #0]
		cubemChannels[i].reuseoldvalue = 0;
 80003be:	79fa      	ldrb	r2, [r7, #7]
 80003c0:	491c      	ldr	r1, [pc, #112]	; (8000434 <CubeM_DefChInit+0x94>)
 80003c2:	4613      	mov	r3, r2
 80003c4:	009b      	lsls	r3, r3, #2
 80003c6:	4413      	add	r3, r2
 80003c8:	00db      	lsls	r3, r3, #3
 80003ca:	440b      	add	r3, r1
 80003cc:	3301      	adds	r3, #1
 80003ce:	2200      	movs	r2, #0
 80003d0:	701a      	strb	r2, [r3, #0]
		cubemChannels[i].datatype = 2;
 80003d2:	79fa      	ldrb	r2, [r7, #7]
 80003d4:	4917      	ldr	r1, [pc, #92]	; (8000434 <CubeM_DefChInit+0x94>)
 80003d6:	4613      	mov	r3, r2
 80003d8:	009b      	lsls	r3, r3, #2
 80003da:	4413      	add	r3, r2
 80003dc:	00db      	lsls	r3, r3, #3
 80003de:	440b      	add	r3, r1
 80003e0:	3316      	adds	r3, #22
 80003e2:	2202      	movs	r2, #2
 80003e4:	701a      	strb	r2, [r3, #0]
		sprintf((char*)(cubemChannels[i].name), "Ch%d", i);
 80003e6:	79fa      	ldrb	r2, [r7, #7]
 80003e8:	4613      	mov	r3, r2
 80003ea:	009b      	lsls	r3, r3, #2
 80003ec:	4413      	add	r3, r2
 80003ee:	00db      	lsls	r3, r3, #3
 80003f0:	4a10      	ldr	r2, [pc, #64]	; (8000434 <CubeM_DefChInit+0x94>)
 80003f2:	4413      	add	r3, r2
 80003f4:	3302      	adds	r3, #2
 80003f6:	79fa      	ldrb	r2, [r7, #7]
 80003f8:	490f      	ldr	r1, [pc, #60]	; (8000438 <CubeM_DefChInit+0x98>)
 80003fa:	4618      	mov	r0, r3
 80003fc:	f00d f920 	bl	800d640 <siprintf>
		cubemChannels[i].value = 0.f;
 8000400:	79fa      	ldrb	r2, [r7, #7]
 8000402:	490c      	ldr	r1, [pc, #48]	; (8000434 <CubeM_DefChInit+0x94>)
 8000404:	4613      	mov	r3, r2
 8000406:	009b      	lsls	r3, r3, #2
 8000408:	4413      	add	r3, r2
 800040a:	00db      	lsls	r3, r3, #3
 800040c:	440b      	add	r3, r1
 800040e:	f103 0118 	add.w	r1, r3, #24
 8000412:	f04f 0200 	mov.w	r2, #0
 8000416:	f04f 0300 	mov.w	r3, #0
 800041a:	e9c1 2300 	strd	r2, r3, [r1]
	for(uint8_t i=0; i<CUBEMONMAXSIGNALS; i++) {
 800041e:	79fb      	ldrb	r3, [r7, #7]
 8000420:	3301      	adds	r3, #1
 8000422:	71fb      	strb	r3, [r7, #7]
 8000424:	79fb      	ldrb	r3, [r7, #7]
 8000426:	2b07      	cmp	r3, #7
 8000428:	d9c0      	bls.n	80003ac <CubeM_DefChInit+0xc>
	}
}
 800042a:	bf00      	nop
 800042c:	bf00      	nop
 800042e:	3708      	adds	r7, #8
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	24000340 	.word	0x24000340
 8000438:	0800f6b0 	.word	0x0800f6b0

0800043c <CubeM_getStrLengths>:

void CubeM_getStrLengths() {
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
	dellen = strlen((char*)delimiter);
 8000440:	480b      	ldr	r0, [pc, #44]	; (8000470 <CubeM_getStrLengths+0x34>)
 8000442:	f7ff ff9d 	bl	8000380 <strlen>
 8000446:	4603      	mov	r3, r0
 8000448:	b2da      	uxtb	r2, r3
 800044a:	4b0a      	ldr	r3, [pc, #40]	; (8000474 <CubeM_getStrLengths+0x38>)
 800044c:	701a      	strb	r2, [r3, #0]
	conlen = strlen((char*)connector);
 800044e:	480a      	ldr	r0, [pc, #40]	; (8000478 <CubeM_getStrLengths+0x3c>)
 8000450:	f7ff ff96 	bl	8000380 <strlen>
 8000454:	4603      	mov	r3, r0
 8000456:	b2da      	uxtb	r2, r3
 8000458:	4b08      	ldr	r3, [pc, #32]	; (800047c <CubeM_getStrLengths+0x40>)
 800045a:	701a      	strb	r2, [r3, #0]
	EOLlen = strlen((char*)EOL);
 800045c:	4808      	ldr	r0, [pc, #32]	; (8000480 <CubeM_getStrLengths+0x44>)
 800045e:	f7ff ff8f 	bl	8000380 <strlen>
 8000462:	4603      	mov	r3, r0
 8000464:	b2da      	uxtb	r2, r3
 8000466:	4b07      	ldr	r3, [pc, #28]	; (8000484 <CubeM_getStrLengths+0x48>)
 8000468:	701a      	strb	r2, [r3, #0]
}
 800046a:	bf00      	nop
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	24000004 	.word	0x24000004
 8000474:	2400033c 	.word	0x2400033c
 8000478:	24000018 	.word	0x24000018
 800047c:	2400033d 	.word	0x2400033d
 8000480:	2400002c 	.word	0x2400002c
 8000484:	2400033e 	.word	0x2400033e

08000488 <CubeM_Init>:

uint32_t CubeM_defInit() {
	return CubeM_Init(50);
}

uint32_t CubeM_Init(uint32_t bufsize) {
 8000488:	b580      	push	{r7, lr}
 800048a:	b084      	sub	sp, #16
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
	CubeM_DefChInit();
 8000490:	f7ff ff86 	bl	80003a0 <CubeM_DefChInit>

	uint32_t tempsize = CubeM_setBufferSize(bufsize);
 8000494:	6878      	ldr	r0, [r7, #4]
 8000496:	f000 f819 	bl	80004cc <CubeM_setBufferSize>
 800049a:	60f8      	str	r0, [r7, #12]

	if(tempsize == 0 || tempsize!=bufsize) {
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d003      	beq.n	80004aa <CubeM_Init+0x22>
 80004a2:	68fa      	ldr	r2, [r7, #12]
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	429a      	cmp	r2, r3
 80004a8:	d003      	beq.n	80004b2 <CubeM_Init+0x2a>
		tempsize = CubeM_setBufferSize(50);
 80004aa:	2032      	movs	r0, #50	; 0x32
 80004ac:	f000 f80e 	bl	80004cc <CubeM_setBufferSize>
 80004b0:	60f8      	str	r0, [r7, #12]
	}

	CubeM_getStrLengths();
 80004b2:	f7ff ffc3 	bl	800043c <CubeM_getStrLengths>
	isInit = 1;
 80004b6:	4b04      	ldr	r3, [pc, #16]	; (80004c8 <CubeM_Init+0x40>)
 80004b8:	2201      	movs	r2, #1
 80004ba:	701a      	strb	r2, [r3, #0]

	return tempsize;
 80004bc:	68fb      	ldr	r3, [r7, #12]
}
 80004be:	4618      	mov	r0, r3
 80004c0:	3710      	adds	r7, #16
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	2400032c 	.word	0x2400032c

080004cc <CubeM_setBufferSize>:
//Currently not used
void CubeM_setUART() {

}

uint32_t CubeM_setBufferSize(uint32_t sizeb) {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	if(sizeb != buffersize) {
 80004d4:	4b13      	ldr	r3, [pc, #76]	; (8000524 <CubeM_setBufferSize+0x58>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	687a      	ldr	r2, [r7, #4]
 80004da:	429a      	cmp	r2, r3
 80004dc:	d01c      	beq.n	8000518 <CubeM_setBufferSize+0x4c>
		uint8_t *temppointer = malloc(sizeb);
 80004de:	6878      	ldr	r0, [r7, #4]
 80004e0:	f00c faf4 	bl	800cacc <malloc>
 80004e4:	4603      	mov	r3, r0
 80004e6:	60fb      	str	r3, [r7, #12]
		if(temppointer != NULL) {
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d014      	beq.n	8000518 <CubeM_setBufferSize+0x4c>
			free(buffer);
 80004ee:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <CubeM_setBufferSize+0x5c>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4618      	mov	r0, r3
 80004f4:	f00c faf2 	bl	800cadc <free>
			buffer = temppointer;
 80004f8:	4a0b      	ldr	r2, [pc, #44]	; (8000528 <CubeM_setBufferSize+0x5c>)
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	6013      	str	r3, [r2, #0]
			buffer[0] = '\0';
 80004fe:	4b0a      	ldr	r3, [pc, #40]	; (8000528 <CubeM_setBufferSize+0x5c>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	2200      	movs	r2, #0
 8000504:	701a      	strb	r2, [r3, #0]

			buffersize = sizeb;
 8000506:	4a07      	ldr	r2, [pc, #28]	; (8000524 <CubeM_setBufferSize+0x58>)
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	6013      	str	r3, [r2, #0]
			emptybuffer = 1;
 800050c:	4b07      	ldr	r3, [pc, #28]	; (800052c <CubeM_setBufferSize+0x60>)
 800050e:	2201      	movs	r2, #1
 8000510:	701a      	strb	r2, [r3, #0]
			usedbuffer = 0;
 8000512:	4b07      	ldr	r3, [pc, #28]	; (8000530 <CubeM_setBufferSize+0x64>)
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
		}
	}
	return buffersize;
 8000518:	4b02      	ldr	r3, [pc, #8]	; (8000524 <CubeM_setBufferSize+0x58>)
 800051a:	681b      	ldr	r3, [r3, #0]
}
 800051c:	4618      	mov	r0, r3
 800051e:	3710      	adds	r7, #16
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	24000330 	.word	0x24000330
 8000528:	24000338 	.word	0x24000338
 800052c:	24000000 	.word	0x24000000
 8000530:	24000334 	.word	0x24000334

08000534 <CubeM_clearBuffer>:

uint8_t CubeM_clearBuffer() {
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
	if(emptybuffer == 1 && usedbuffer == 0) return 1;
 8000538:	4b0c      	ldr	r3, [pc, #48]	; (800056c <CubeM_clearBuffer+0x38>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	2b01      	cmp	r3, #1
 800053e:	d105      	bne.n	800054c <CubeM_clearBuffer+0x18>
 8000540:	4b0b      	ldr	r3, [pc, #44]	; (8000570 <CubeM_clearBuffer+0x3c>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d101      	bne.n	800054c <CubeM_clearBuffer+0x18>
 8000548:	2301      	movs	r3, #1
 800054a:	e00a      	b.n	8000562 <CubeM_clearBuffer+0x2e>

	buffer[0] = '\0';
 800054c:	4b09      	ldr	r3, [pc, #36]	; (8000574 <CubeM_clearBuffer+0x40>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	2200      	movs	r2, #0
 8000552:	701a      	strb	r2, [r3, #0]
	emptybuffer = 1;
 8000554:	4b05      	ldr	r3, [pc, #20]	; (800056c <CubeM_clearBuffer+0x38>)
 8000556:	2201      	movs	r2, #1
 8000558:	701a      	strb	r2, [r3, #0]
	usedbuffer = 0;
 800055a:	4b05      	ldr	r3, [pc, #20]	; (8000570 <CubeM_clearBuffer+0x3c>)
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
	return 0;
 8000560:	2300      	movs	r3, #0
}
 8000562:	4618      	mov	r0, r3
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr
 800056c:	24000000 	.word	0x24000000
 8000570:	24000334 	.word	0x24000334
 8000574:	24000338 	.word	0x24000338

08000578 <CubeM_setChannelname>:

uint8_t CubeM_setChannelname(uint8_t channel, uint8_t *newname) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	6039      	str	r1, [r7, #0]
 8000582:	71fb      	strb	r3, [r7, #7]
	uint32_t templen = strlen((char*)newname);
 8000584:	6838      	ldr	r0, [r7, #0]
 8000586:	f7ff fefb 	bl	8000380 <strlen>
 800058a:	60f8      	str	r0, [r7, #12]
	if((templen < CUBEMONSMALLBUFSIZE && templen > 0) && (channel >= 0 && channel < CUBEMONMAXSIGNALS)) {
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	2b13      	cmp	r3, #19
 8000590:	d813      	bhi.n	80005ba <CubeM_setChannelname+0x42>
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d010      	beq.n	80005ba <CubeM_setChannelname+0x42>
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	2b07      	cmp	r3, #7
 800059c:	d80d      	bhi.n	80005ba <CubeM_setChannelname+0x42>
		strcpy((char*)(cubemChannels[channel].name), (char*)newname);
 800059e:	79fa      	ldrb	r2, [r7, #7]
 80005a0:	4613      	mov	r3, r2
 80005a2:	009b      	lsls	r3, r3, #2
 80005a4:	4413      	add	r3, r2
 80005a6:	00db      	lsls	r3, r3, #3
 80005a8:	4a06      	ldr	r2, [pc, #24]	; (80005c4 <CubeM_setChannelname+0x4c>)
 80005aa:	4413      	add	r3, r2
 80005ac:	3302      	adds	r3, #2
 80005ae:	6839      	ldr	r1, [r7, #0]
 80005b0:	4618      	mov	r0, r3
 80005b2:	f00d f938 	bl	800d826 <strcpy>

		return 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	e000      	b.n	80005bc <CubeM_setChannelname+0x44>
	}
	return 1;
 80005ba:	2301      	movs	r3, #1
}
 80005bc:	4618      	mov	r0, r3
 80005be:	3710      	adds	r7, #16
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	24000340 	.word	0x24000340

080005c8 <CubeM_attendUIntValue>:
	}

	return 1;
}

uint8_t CubeM_attendUIntValue(uint8_t channel, uint32_t value) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b09a      	sub	sp, #104	; 0x68
 80005cc:	af02      	add	r7, sp, #8
 80005ce:	4603      	mov	r3, r0
 80005d0:	6039      	str	r1, [r7, #0]
 80005d2:	71fb      	strb	r3, [r7, #7]
	if(channel >= 0 && channel < CUBEMONMAXSIGNALS) {
 80005d4:	79fb      	ldrb	r3, [r7, #7]
 80005d6:	2b07      	cmp	r3, #7
 80005d8:	d845      	bhi.n	8000666 <CubeM_attendUIntValue+0x9e>
		char tempstring[CUBEMONSMALLBUFSIZE*4];

		uint32_t tempsize;
		sprintf(tempstring, "%s%s%s%ld", delimiter, cubemChannels[channel].name, connector, value);
 80005da:	79fa      	ldrb	r2, [r7, #7]
 80005dc:	4613      	mov	r3, r2
 80005de:	009b      	lsls	r3, r3, #2
 80005e0:	4413      	add	r3, r2
 80005e2:	00db      	lsls	r3, r3, #3
 80005e4:	4a22      	ldr	r2, [pc, #136]	; (8000670 <CubeM_attendUIntValue+0xa8>)
 80005e6:	4413      	add	r3, r2
 80005e8:	1c9a      	adds	r2, r3, #2
 80005ea:	f107 000c 	add.w	r0, r7, #12
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	9301      	str	r3, [sp, #4]
 80005f2:	4b20      	ldr	r3, [pc, #128]	; (8000674 <CubeM_attendUIntValue+0xac>)
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	4613      	mov	r3, r2
 80005f8:	4a1f      	ldr	r2, [pc, #124]	; (8000678 <CubeM_attendUIntValue+0xb0>)
 80005fa:	4920      	ldr	r1, [pc, #128]	; (800067c <CubeM_attendUIntValue+0xb4>)
 80005fc:	f00d f820 	bl	800d640 <siprintf>
		tempsize = usedbuffer + strlen((char*)tempstring) - (emptybuffer * dellen);
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	4618      	mov	r0, r3
 8000606:	f7ff febb 	bl	8000380 <strlen>
 800060a:	4602      	mov	r2, r0
 800060c:	4b1c      	ldr	r3, [pc, #112]	; (8000680 <CubeM_attendUIntValue+0xb8>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4413      	add	r3, r2
 8000612:	4a1c      	ldr	r2, [pc, #112]	; (8000684 <CubeM_attendUIntValue+0xbc>)
 8000614:	7812      	ldrb	r2, [r2, #0]
 8000616:	4611      	mov	r1, r2
 8000618:	4a1b      	ldr	r2, [pc, #108]	; (8000688 <CubeM_attendUIntValue+0xc0>)
 800061a:	7812      	ldrb	r2, [r2, #0]
 800061c:	fb01 f202 	mul.w	r2, r1, r2
 8000620:	1a9b      	subs	r3, r3, r2
 8000622:	65fb      	str	r3, [r7, #92]	; 0x5c

		if(tempsize < buffersize) {
 8000624:	4b19      	ldr	r3, [pc, #100]	; (800068c <CubeM_attendUIntValue+0xc4>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800062a:	429a      	cmp	r2, r3
 800062c:	d21b      	bcs.n	8000666 <CubeM_attendUIntValue+0x9e>
			strcpy((char*)(buffer + (usedbuffer)), (char*)(tempstring + (emptybuffer * dellen)));
 800062e:	4b18      	ldr	r3, [pc, #96]	; (8000690 <CubeM_attendUIntValue+0xc8>)
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	4b13      	ldr	r3, [pc, #76]	; (8000680 <CubeM_attendUIntValue+0xb8>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	441a      	add	r2, r3
 8000638:	4b12      	ldr	r3, [pc, #72]	; (8000684 <CubeM_attendUIntValue+0xbc>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	4619      	mov	r1, r3
 800063e:	4b12      	ldr	r3, [pc, #72]	; (8000688 <CubeM_attendUIntValue+0xc0>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	fb01 f303 	mul.w	r3, r1, r3
 8000646:	4619      	mov	r1, r3
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	440b      	add	r3, r1
 800064e:	4619      	mov	r1, r3
 8000650:	4610      	mov	r0, r2
 8000652:	f00d f8e8 	bl	800d826 <strcpy>
			usedbuffer = tempsize;
 8000656:	4a0a      	ldr	r2, [pc, #40]	; (8000680 <CubeM_attendUIntValue+0xb8>)
 8000658:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800065a:	6013      	str	r3, [r2, #0]
			emptybuffer = 0;
 800065c:	4b09      	ldr	r3, [pc, #36]	; (8000684 <CubeM_attendUIntValue+0xbc>)
 800065e:	2200      	movs	r2, #0
 8000660:	701a      	strb	r2, [r3, #0]
			return 0;
 8000662:	2300      	movs	r3, #0
 8000664:	e000      	b.n	8000668 <CubeM_attendUIntValue+0xa0>
		}
	}
	return 1;
 8000666:	2301      	movs	r3, #1
}
 8000668:	4618      	mov	r0, r3
 800066a:	3760      	adds	r7, #96	; 0x60
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	24000340 	.word	0x24000340
 8000674:	24000018 	.word	0x24000018
 8000678:	24000004 	.word	0x24000004
 800067c:	0800f6b8 	.word	0x0800f6b8
 8000680:	24000334 	.word	0x24000334
 8000684:	24000000 	.word	0x24000000
 8000688:	2400033c 	.word	0x2400033c
 800068c:	24000330 	.word	0x24000330
 8000690:	24000338 	.word	0x24000338

08000694 <CubeM_attendIntValue>:

uint8_t CubeM_attendIntValue(uint8_t channel, int32_t value) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b09a      	sub	sp, #104	; 0x68
 8000698:	af02      	add	r7, sp, #8
 800069a:	4603      	mov	r3, r0
 800069c:	6039      	str	r1, [r7, #0]
 800069e:	71fb      	strb	r3, [r7, #7]
	if(channel > 0 && channel < CUBEMONMAXSIGNALS) {
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d048      	beq.n	8000738 <CubeM_attendIntValue+0xa4>
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	2b07      	cmp	r3, #7
 80006aa:	d845      	bhi.n	8000738 <CubeM_attendIntValue+0xa4>
		char tempstring[CUBEMONSMALLBUFSIZE*4];

		uint32_t tempsize;
		sprintf(tempstring, "%s%s%s%ld", delimiter, cubemChannels[channel].name, connector, value);
 80006ac:	79fa      	ldrb	r2, [r7, #7]
 80006ae:	4613      	mov	r3, r2
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	4413      	add	r3, r2
 80006b4:	00db      	lsls	r3, r3, #3
 80006b6:	4a23      	ldr	r2, [pc, #140]	; (8000744 <CubeM_attendIntValue+0xb0>)
 80006b8:	4413      	add	r3, r2
 80006ba:	1c9a      	adds	r2, r3, #2
 80006bc:	f107 000c 	add.w	r0, r7, #12
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	9301      	str	r3, [sp, #4]
 80006c4:	4b20      	ldr	r3, [pc, #128]	; (8000748 <CubeM_attendIntValue+0xb4>)
 80006c6:	9300      	str	r3, [sp, #0]
 80006c8:	4613      	mov	r3, r2
 80006ca:	4a20      	ldr	r2, [pc, #128]	; (800074c <CubeM_attendIntValue+0xb8>)
 80006cc:	4920      	ldr	r1, [pc, #128]	; (8000750 <CubeM_attendIntValue+0xbc>)
 80006ce:	f00c ffb7 	bl	800d640 <siprintf>
		tempsize = usedbuffer + strlen((char*)tempstring) - (emptybuffer * dellen);
 80006d2:	f107 030c 	add.w	r3, r7, #12
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff fe52 	bl	8000380 <strlen>
 80006dc:	4602      	mov	r2, r0
 80006de:	4b1d      	ldr	r3, [pc, #116]	; (8000754 <CubeM_attendIntValue+0xc0>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4413      	add	r3, r2
 80006e4:	4a1c      	ldr	r2, [pc, #112]	; (8000758 <CubeM_attendIntValue+0xc4>)
 80006e6:	7812      	ldrb	r2, [r2, #0]
 80006e8:	4611      	mov	r1, r2
 80006ea:	4a1c      	ldr	r2, [pc, #112]	; (800075c <CubeM_attendIntValue+0xc8>)
 80006ec:	7812      	ldrb	r2, [r2, #0]
 80006ee:	fb01 f202 	mul.w	r2, r1, r2
 80006f2:	1a9b      	subs	r3, r3, r2
 80006f4:	65fb      	str	r3, [r7, #92]	; 0x5c

		if(tempsize < buffersize) {
 80006f6:	4b1a      	ldr	r3, [pc, #104]	; (8000760 <CubeM_attendIntValue+0xcc>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80006fc:	429a      	cmp	r2, r3
 80006fe:	d21b      	bcs.n	8000738 <CubeM_attendIntValue+0xa4>
			strcpy((char*)(buffer + (usedbuffer)), (char*)(tempstring + (emptybuffer * dellen)));
 8000700:	4b18      	ldr	r3, [pc, #96]	; (8000764 <CubeM_attendIntValue+0xd0>)
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	4b13      	ldr	r3, [pc, #76]	; (8000754 <CubeM_attendIntValue+0xc0>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	441a      	add	r2, r3
 800070a:	4b13      	ldr	r3, [pc, #76]	; (8000758 <CubeM_attendIntValue+0xc4>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	4619      	mov	r1, r3
 8000710:	4b12      	ldr	r3, [pc, #72]	; (800075c <CubeM_attendIntValue+0xc8>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	fb01 f303 	mul.w	r3, r1, r3
 8000718:	4619      	mov	r1, r3
 800071a:	f107 030c 	add.w	r3, r7, #12
 800071e:	440b      	add	r3, r1
 8000720:	4619      	mov	r1, r3
 8000722:	4610      	mov	r0, r2
 8000724:	f00d f87f 	bl	800d826 <strcpy>
			usedbuffer = tempsize;
 8000728:	4a0a      	ldr	r2, [pc, #40]	; (8000754 <CubeM_attendIntValue+0xc0>)
 800072a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800072c:	6013      	str	r3, [r2, #0]
			emptybuffer = 0;
 800072e:	4b0a      	ldr	r3, [pc, #40]	; (8000758 <CubeM_attendIntValue+0xc4>)
 8000730:	2200      	movs	r2, #0
 8000732:	701a      	strb	r2, [r3, #0]
			return 0;
 8000734:	2300      	movs	r3, #0
 8000736:	e000      	b.n	800073a <CubeM_attendIntValue+0xa6>
		}
	}
	return 1;
 8000738:	2301      	movs	r3, #1
}
 800073a:	4618      	mov	r0, r3
 800073c:	3760      	adds	r7, #96	; 0x60
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	24000340 	.word	0x24000340
 8000748:	24000018 	.word	0x24000018
 800074c:	24000004 	.word	0x24000004
 8000750:	0800f6b8 	.word	0x0800f6b8
 8000754:	24000334 	.word	0x24000334
 8000758:	24000000 	.word	0x24000000
 800075c:	2400033c 	.word	0x2400033c
 8000760:	24000330 	.word	0x24000330
 8000764:	24000338 	.word	0x24000338

08000768 <CubeM_attendFloatValue>:

uint8_t CubeM_attendFloatValue(uint8_t channel, float value, uint8_t precision) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b09c      	sub	sp, #112	; 0x70
 800076c:	af04      	add	r7, sp, #16
 800076e:	4603      	mov	r3, r0
 8000770:	ed87 0a00 	vstr	s0, [r7]
 8000774:	460a      	mov	r2, r1
 8000776:	71fb      	strb	r3, [r7, #7]
 8000778:	4613      	mov	r3, r2
 800077a:	71bb      	strb	r3, [r7, #6]
	if(channel > 0 && channel < CUBEMONMAXSIGNALS) {
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d04e      	beq.n	8000820 <CubeM_attendFloatValue+0xb8>
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	2b07      	cmp	r3, #7
 8000786:	d84b      	bhi.n	8000820 <CubeM_attendFloatValue+0xb8>
		char tempstring[CUBEMONSMALLBUFSIZE*4];

		uint32_t tempsize;
		sprintf(tempstring, "%s%s%s%.*f", delimiter, cubemChannels[channel].name, connector, precision, value);
 8000788:	79fa      	ldrb	r2, [r7, #7]
 800078a:	4613      	mov	r3, r2
 800078c:	009b      	lsls	r3, r3, #2
 800078e:	4413      	add	r3, r2
 8000790:	00db      	lsls	r3, r3, #3
 8000792:	4a26      	ldr	r2, [pc, #152]	; (800082c <CubeM_attendFloatValue+0xc4>)
 8000794:	4413      	add	r3, r2
 8000796:	1c9a      	adds	r2, r3, #2
 8000798:	79bb      	ldrb	r3, [r7, #6]
 800079a:	edd7 7a00 	vldr	s15, [r7]
 800079e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007a2:	f107 000c 	add.w	r0, r7, #12
 80007a6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	4b20      	ldr	r3, [pc, #128]	; (8000830 <CubeM_attendFloatValue+0xc8>)
 80007ae:	9300      	str	r3, [sp, #0]
 80007b0:	4613      	mov	r3, r2
 80007b2:	4a20      	ldr	r2, [pc, #128]	; (8000834 <CubeM_attendFloatValue+0xcc>)
 80007b4:	4920      	ldr	r1, [pc, #128]	; (8000838 <CubeM_attendFloatValue+0xd0>)
 80007b6:	f00c ff43 	bl	800d640 <siprintf>
		tempsize = usedbuffer + strlen((char*)tempstring) - (emptybuffer * dellen);
 80007ba:	f107 030c 	add.w	r3, r7, #12
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff fdde 	bl	8000380 <strlen>
 80007c4:	4602      	mov	r2, r0
 80007c6:	4b1d      	ldr	r3, [pc, #116]	; (800083c <CubeM_attendFloatValue+0xd4>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4413      	add	r3, r2
 80007cc:	4a1c      	ldr	r2, [pc, #112]	; (8000840 <CubeM_attendFloatValue+0xd8>)
 80007ce:	7812      	ldrb	r2, [r2, #0]
 80007d0:	4611      	mov	r1, r2
 80007d2:	4a1c      	ldr	r2, [pc, #112]	; (8000844 <CubeM_attendFloatValue+0xdc>)
 80007d4:	7812      	ldrb	r2, [r2, #0]
 80007d6:	fb01 f202 	mul.w	r2, r1, r2
 80007da:	1a9b      	subs	r3, r3, r2
 80007dc:	65fb      	str	r3, [r7, #92]	; 0x5c

		if(tempsize < buffersize) {
 80007de:	4b1a      	ldr	r3, [pc, #104]	; (8000848 <CubeM_attendFloatValue+0xe0>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d21b      	bcs.n	8000820 <CubeM_attendFloatValue+0xb8>
			strcpy((char*)(buffer + (usedbuffer)), (char*)(tempstring + (emptybuffer * dellen)));
 80007e8:	4b18      	ldr	r3, [pc, #96]	; (800084c <CubeM_attendFloatValue+0xe4>)
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	4b13      	ldr	r3, [pc, #76]	; (800083c <CubeM_attendFloatValue+0xd4>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	441a      	add	r2, r3
 80007f2:	4b13      	ldr	r3, [pc, #76]	; (8000840 <CubeM_attendFloatValue+0xd8>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	4619      	mov	r1, r3
 80007f8:	4b12      	ldr	r3, [pc, #72]	; (8000844 <CubeM_attendFloatValue+0xdc>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	fb01 f303 	mul.w	r3, r1, r3
 8000800:	4619      	mov	r1, r3
 8000802:	f107 030c 	add.w	r3, r7, #12
 8000806:	440b      	add	r3, r1
 8000808:	4619      	mov	r1, r3
 800080a:	4610      	mov	r0, r2
 800080c:	f00d f80b 	bl	800d826 <strcpy>
			usedbuffer = tempsize;
 8000810:	4a0a      	ldr	r2, [pc, #40]	; (800083c <CubeM_attendFloatValue+0xd4>)
 8000812:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000814:	6013      	str	r3, [r2, #0]
			emptybuffer = 0;
 8000816:	4b0a      	ldr	r3, [pc, #40]	; (8000840 <CubeM_attendFloatValue+0xd8>)
 8000818:	2200      	movs	r2, #0
 800081a:	701a      	strb	r2, [r3, #0]
			return 0;
 800081c:	2300      	movs	r3, #0
 800081e:	e000      	b.n	8000822 <CubeM_attendFloatValue+0xba>
		}
	}
	return 1;
 8000820:	2301      	movs	r3, #1
}
 8000822:	4618      	mov	r0, r3
 8000824:	3760      	adds	r7, #96	; 0x60
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	24000340 	.word	0x24000340
 8000830:	24000018 	.word	0x24000018
 8000834:	24000004 	.word	0x24000004
 8000838:	0800f6c4 	.word	0x0800f6c4
 800083c:	24000334 	.word	0x24000334
 8000840:	24000000 	.word	0x24000000
 8000844:	2400033c 	.word	0x2400033c
 8000848:	24000330 	.word	0x24000330
 800084c:	24000338 	.word	0x24000338

08000850 <CubeM_sendBuffer>:
	strcpy((char*)EOL, (char*)string);

	return 0;
}

uint8_t CubeM_sendBuffer() {
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0

	if(emptybuffer == 1) return 1;
 8000854:	4b0d      	ldr	r3, [pc, #52]	; (800088c <CubeM_sendBuffer+0x3c>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	2b01      	cmp	r3, #1
 800085a:	d101      	bne.n	8000860 <CubeM_sendBuffer+0x10>
 800085c:	2301      	movs	r3, #1
 800085e:	e012      	b.n	8000886 <CubeM_sendBuffer+0x36>

	strcpy((char*)&buffer[usedbuffer], (char*)EOL);
 8000860:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <CubeM_sendBuffer+0x40>)
 8000862:	681a      	ldr	r2, [r3, #0]
 8000864:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <CubeM_sendBuffer+0x44>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4413      	add	r3, r2
 800086a:	490b      	ldr	r1, [pc, #44]	; (8000898 <CubeM_sendBuffer+0x48>)
 800086c:	4618      	mov	r0, r3
 800086e:	f00c ffda 	bl	800d826 <strcpy>
	CDC_Transmit_FS(buffer, usedbuffer);
 8000872:	4b07      	ldr	r3, [pc, #28]	; (8000890 <CubeM_sendBuffer+0x40>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4a07      	ldr	r2, [pc, #28]	; (8000894 <CubeM_sendBuffer+0x44>)
 8000878:	6812      	ldr	r2, [r2, #0]
 800087a:	b292      	uxth	r2, r2
 800087c:	4611      	mov	r1, r2
 800087e:	4618      	mov	r0, r3
 8000880:	f00b fca4 	bl	800c1cc <CDC_Transmit_FS>

	return 0;
 8000884:	2300      	movs	r3, #0
}
 8000886:	4618      	mov	r0, r3
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	24000000 	.word	0x24000000
 8000890:	24000338 	.word	0x24000338
 8000894:	24000334 	.word	0x24000334
 8000898:	2400002c 	.word	0x2400002c

0800089c <CubeM_setDataType>:

uint8_t CubeM_setDataType(uint8_t channel, cubeMDataType newtype) {
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	460a      	mov	r2, r1
 80008a6:	71fb      	strb	r3, [r7, #7]
 80008a8:	4613      	mov	r3, r2
 80008aa:	71bb      	strb	r3, [r7, #6]
	if(channel >= CUBEMONMAXSIGNALS || newtype >= CUBEMNROFDATATYPES) return 1;
 80008ac:	79fb      	ldrb	r3, [r7, #7]
 80008ae:	2b07      	cmp	r3, #7
 80008b0:	d802      	bhi.n	80008b8 <CubeM_setDataType+0x1c>
 80008b2:	79bb      	ldrb	r3, [r7, #6]
 80008b4:	2b04      	cmp	r3, #4
 80008b6:	d901      	bls.n	80008bc <CubeM_setDataType+0x20>
 80008b8:	2301      	movs	r3, #1
 80008ba:	e00a      	b.n	80008d2 <CubeM_setDataType+0x36>

	cubemChannels[channel].datatype = newtype;
 80008bc:	79fa      	ldrb	r2, [r7, #7]
 80008be:	4908      	ldr	r1, [pc, #32]	; (80008e0 <CubeM_setDataType+0x44>)
 80008c0:	4613      	mov	r3, r2
 80008c2:	009b      	lsls	r3, r3, #2
 80008c4:	4413      	add	r3, r2
 80008c6:	00db      	lsls	r3, r3, #3
 80008c8:	440b      	add	r3, r1
 80008ca:	3316      	adds	r3, #22
 80008cc:	79ba      	ldrb	r2, [r7, #6]
 80008ce:	701a      	strb	r2, [r3, #0]
	return 0;
 80008d0:	2300      	movs	r3, #0
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	24000340 	.word	0x24000340

080008e4 <CubeM_setPrecision>:

uint8_t CubeM_setPrecision(uint8_t channel, int8_t precision) {
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	460a      	mov	r2, r1
 80008ee:	71fb      	strb	r3, [r7, #7]
 80008f0:	4613      	mov	r3, r2
 80008f2:	71bb      	strb	r3, [r7, #6]
	if(channel >= CUBEMONMAXSIGNALS) return 1;
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	2b07      	cmp	r3, #7
 80008f8:	d901      	bls.n	80008fe <CubeM_setPrecision+0x1a>
 80008fa:	2301      	movs	r3, #1
 80008fc:	e00b      	b.n	8000916 <CubeM_setPrecision+0x32>

	cubemChannels[channel].precision = precision;
 80008fe:	79fa      	ldrb	r2, [r7, #7]
 8000900:	f997 1006 	ldrsb.w	r1, [r7, #6]
 8000904:	4807      	ldr	r0, [pc, #28]	; (8000924 <CubeM_setPrecision+0x40>)
 8000906:	4613      	mov	r3, r2
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	4413      	add	r3, r2
 800090c:	00db      	lsls	r3, r3, #3
 800090e:	4403      	add	r3, r0
 8000910:	3320      	adds	r3, #32
 8000912:	6019      	str	r1, [r3, #0]
	return 0;
 8000914:	2300      	movs	r3, #0
}
 8000916:	4618      	mov	r0, r3
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	24000340 	.word	0x24000340

08000928 <CubeM_setUINTValue>:

uint8_t CubeM_setUINTValue(uint8_t channel, float value) {
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	ed87 0a00 	vstr	s0, [r7]
 8000934:	71fb      	strb	r3, [r7, #7]

	if(channel >= CUBEMONMAXSIGNALS || cubemChannels[channel].datatype != CUBEMUINT) return 1;
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	2b07      	cmp	r3, #7
 800093a:	d80a      	bhi.n	8000952 <CubeM_setUINTValue+0x2a>
 800093c:	79fa      	ldrb	r2, [r7, #7]
 800093e:	4915      	ldr	r1, [pc, #84]	; (8000994 <CubeM_setUINTValue+0x6c>)
 8000940:	4613      	mov	r3, r2
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	4413      	add	r3, r2
 8000946:	00db      	lsls	r3, r3, #3
 8000948:	440b      	add	r3, r1
 800094a:	3316      	adds	r3, #22
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <CubeM_setUINTValue+0x2e>
 8000952:	2301      	movs	r3, #1
 8000954:	e017      	b.n	8000986 <CubeM_setUINTValue+0x5e>
	cubemChannels[channel].value = value;
 8000956:	79fa      	ldrb	r2, [r7, #7]
 8000958:	edd7 7a00 	vldr	s15, [r7]
 800095c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000960:	490c      	ldr	r1, [pc, #48]	; (8000994 <CubeM_setUINTValue+0x6c>)
 8000962:	4613      	mov	r3, r2
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	4413      	add	r3, r2
 8000968:	00db      	lsls	r3, r3, #3
 800096a:	440b      	add	r3, r1
 800096c:	3318      	adds	r3, #24
 800096e:	ed83 7b00 	vstr	d7, [r3]
	cubemChannels[channel].newvalue = 1;
 8000972:	79fa      	ldrb	r2, [r7, #7]
 8000974:	4907      	ldr	r1, [pc, #28]	; (8000994 <CubeM_setUINTValue+0x6c>)
 8000976:	4613      	mov	r3, r2
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	4413      	add	r3, r2
 800097c:	00db      	lsls	r3, r3, #3
 800097e:	440b      	add	r3, r1
 8000980:	2201      	movs	r2, #1
 8000982:	701a      	strb	r2, [r3, #0]
	return 0;
 8000984:	2300      	movs	r3, #0
}
 8000986:	4618      	mov	r0, r3
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	24000340 	.word	0x24000340

08000998 <CubeM_setINTValue>:

uint8_t CubeM_setINTValue(uint8_t channel, float value) {
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	ed87 0a00 	vstr	s0, [r7]
 80009a4:	71fb      	strb	r3, [r7, #7]

	if(channel >= CUBEMONMAXSIGNALS || cubemChannels[channel].datatype != CUBEMINT) return 1;
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	2b07      	cmp	r3, #7
 80009aa:	d80a      	bhi.n	80009c2 <CubeM_setINTValue+0x2a>
 80009ac:	79fa      	ldrb	r2, [r7, #7]
 80009ae:	4915      	ldr	r1, [pc, #84]	; (8000a04 <CubeM_setINTValue+0x6c>)
 80009b0:	4613      	mov	r3, r2
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	4413      	add	r3, r2
 80009b6:	00db      	lsls	r3, r3, #3
 80009b8:	440b      	add	r3, r1
 80009ba:	3316      	adds	r3, #22
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d001      	beq.n	80009c6 <CubeM_setINTValue+0x2e>
 80009c2:	2301      	movs	r3, #1
 80009c4:	e017      	b.n	80009f6 <CubeM_setINTValue+0x5e>
	cubemChannels[channel].value = value;
 80009c6:	79fa      	ldrb	r2, [r7, #7]
 80009c8:	edd7 7a00 	vldr	s15, [r7]
 80009cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009d0:	490c      	ldr	r1, [pc, #48]	; (8000a04 <CubeM_setINTValue+0x6c>)
 80009d2:	4613      	mov	r3, r2
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	4413      	add	r3, r2
 80009d8:	00db      	lsls	r3, r3, #3
 80009da:	440b      	add	r3, r1
 80009dc:	3318      	adds	r3, #24
 80009de:	ed83 7b00 	vstr	d7, [r3]
	cubemChannels[channel].newvalue = 1;
 80009e2:	79fa      	ldrb	r2, [r7, #7]
 80009e4:	4907      	ldr	r1, [pc, #28]	; (8000a04 <CubeM_setINTValue+0x6c>)
 80009e6:	4613      	mov	r3, r2
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	4413      	add	r3, r2
 80009ec:	00db      	lsls	r3, r3, #3
 80009ee:	440b      	add	r3, r1
 80009f0:	2201      	movs	r2, #1
 80009f2:	701a      	strb	r2, [r3, #0]
	return 0;
 80009f4:	2300      	movs	r3, #0
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	24000340 	.word	0x24000340

08000a08 <CubeM_setFLOATValue>:

uint8_t CubeM_setFLOATValue(uint8_t channel, float value) {
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	ed87 0a00 	vstr	s0, [r7]
 8000a14:	71fb      	strb	r3, [r7, #7]

	if(channel >= CUBEMONMAXSIGNALS || cubemChannels[channel].datatype != CUBEMFLOAT) return 1;
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	2b07      	cmp	r3, #7
 8000a1a:	d80a      	bhi.n	8000a32 <CubeM_setFLOATValue+0x2a>
 8000a1c:	79fa      	ldrb	r2, [r7, #7]
 8000a1e:	4915      	ldr	r1, [pc, #84]	; (8000a74 <CubeM_setFLOATValue+0x6c>)
 8000a20:	4613      	mov	r3, r2
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	4413      	add	r3, r2
 8000a26:	00db      	lsls	r3, r3, #3
 8000a28:	440b      	add	r3, r1
 8000a2a:	3316      	adds	r3, #22
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	2b02      	cmp	r3, #2
 8000a30:	d001      	beq.n	8000a36 <CubeM_setFLOATValue+0x2e>
 8000a32:	2301      	movs	r3, #1
 8000a34:	e017      	b.n	8000a66 <CubeM_setFLOATValue+0x5e>
	cubemChannels[channel].value = value;
 8000a36:	79fa      	ldrb	r2, [r7, #7]
 8000a38:	edd7 7a00 	vldr	s15, [r7]
 8000a3c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a40:	490c      	ldr	r1, [pc, #48]	; (8000a74 <CubeM_setFLOATValue+0x6c>)
 8000a42:	4613      	mov	r3, r2
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	4413      	add	r3, r2
 8000a48:	00db      	lsls	r3, r3, #3
 8000a4a:	440b      	add	r3, r1
 8000a4c:	3318      	adds	r3, #24
 8000a4e:	ed83 7b00 	vstr	d7, [r3]
	cubemChannels[channel].newvalue = 1;
 8000a52:	79fa      	ldrb	r2, [r7, #7]
 8000a54:	4907      	ldr	r1, [pc, #28]	; (8000a74 <CubeM_setFLOATValue+0x6c>)
 8000a56:	4613      	mov	r3, r2
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	4413      	add	r3, r2
 8000a5c:	00db      	lsls	r3, r3, #3
 8000a5e:	440b      	add	r3, r1
 8000a60:	2201      	movs	r2, #1
 8000a62:	701a      	strb	r2, [r3, #0]
	return 0;
 8000a64:	2300      	movs	r3, #0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	24000340 	.word	0x24000340

08000a78 <CubeM_setDOUBLEValue>:

uint8_t CubeM_setDOUBLEValue(uint8_t channel, double value) {
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	ed87 0b00 	vstr	d0, [r7]
 8000a84:	73fb      	strb	r3, [r7, #15]

	if(channel >= CUBEMONMAXSIGNALS || cubemChannels[channel].datatype != CUBEMDOUBLE) return 1;
 8000a86:	7bfb      	ldrb	r3, [r7, #15]
 8000a88:	2b07      	cmp	r3, #7
 8000a8a:	d80a      	bhi.n	8000aa2 <CubeM_setDOUBLEValue+0x2a>
 8000a8c:	7bfa      	ldrb	r2, [r7, #15]
 8000a8e:	4914      	ldr	r1, [pc, #80]	; (8000ae0 <CubeM_setDOUBLEValue+0x68>)
 8000a90:	4613      	mov	r3, r2
 8000a92:	009b      	lsls	r3, r3, #2
 8000a94:	4413      	add	r3, r2
 8000a96:	00db      	lsls	r3, r3, #3
 8000a98:	440b      	add	r3, r1
 8000a9a:	3316      	adds	r3, #22
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	2b03      	cmp	r3, #3
 8000aa0:	d001      	beq.n	8000aa6 <CubeM_setDOUBLEValue+0x2e>
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e016      	b.n	8000ad4 <CubeM_setDOUBLEValue+0x5c>
	cubemChannels[channel].value = value;
 8000aa6:	7bfa      	ldrb	r2, [r7, #15]
 8000aa8:	490d      	ldr	r1, [pc, #52]	; (8000ae0 <CubeM_setDOUBLEValue+0x68>)
 8000aaa:	4613      	mov	r3, r2
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	4413      	add	r3, r2
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	440b      	add	r3, r1
 8000ab4:	f103 0118 	add.w	r1, r3, #24
 8000ab8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000abc:	e9c1 2300 	strd	r2, r3, [r1]
	cubemChannels[channel].newvalue = 1;
 8000ac0:	7bfa      	ldrb	r2, [r7, #15]
 8000ac2:	4907      	ldr	r1, [pc, #28]	; (8000ae0 <CubeM_setDOUBLEValue+0x68>)
 8000ac4:	4613      	mov	r3, r2
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	4413      	add	r3, r2
 8000aca:	00db      	lsls	r3, r3, #3
 8000acc:	440b      	add	r3, r1
 8000ace:	2201      	movs	r2, #1
 8000ad0:	701a      	strb	r2, [r3, #0]
	return 0;
 8000ad2:	2300      	movs	r3, #0
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3714      	adds	r7, #20
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	24000340 	.word	0x24000340

08000ae4 <CubeM_setLDOUBLEValue>:

uint8_t CubeM_setLDOUBLEValue(uint8_t channel, long double value) {
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	ed87 0b00 	vstr	d0, [r7]
 8000af0:	73fb      	strb	r3, [r7, #15]

	if(channel >= CUBEMONMAXSIGNALS || cubemChannels[channel].datatype != CUBEMLDOUBLE) return 1;
 8000af2:	7bfb      	ldrb	r3, [r7, #15]
 8000af4:	2b07      	cmp	r3, #7
 8000af6:	d80a      	bhi.n	8000b0e <CubeM_setLDOUBLEValue+0x2a>
 8000af8:	7bfa      	ldrb	r2, [r7, #15]
 8000afa:	4914      	ldr	r1, [pc, #80]	; (8000b4c <CubeM_setLDOUBLEValue+0x68>)
 8000afc:	4613      	mov	r3, r2
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	4413      	add	r3, r2
 8000b02:	00db      	lsls	r3, r3, #3
 8000b04:	440b      	add	r3, r1
 8000b06:	3316      	adds	r3, #22
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	2b04      	cmp	r3, #4
 8000b0c:	d001      	beq.n	8000b12 <CubeM_setLDOUBLEValue+0x2e>
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e016      	b.n	8000b40 <CubeM_setLDOUBLEValue+0x5c>
	cubemChannels[channel].value = value;
 8000b12:	7bfa      	ldrb	r2, [r7, #15]
 8000b14:	490d      	ldr	r1, [pc, #52]	; (8000b4c <CubeM_setLDOUBLEValue+0x68>)
 8000b16:	4613      	mov	r3, r2
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	4413      	add	r3, r2
 8000b1c:	00db      	lsls	r3, r3, #3
 8000b1e:	440b      	add	r3, r1
 8000b20:	f103 0118 	add.w	r1, r3, #24
 8000b24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000b28:	e9c1 2300 	strd	r2, r3, [r1]
	cubemChannels[channel].newvalue = 1;
 8000b2c:	7bfa      	ldrb	r2, [r7, #15]
 8000b2e:	4907      	ldr	r1, [pc, #28]	; (8000b4c <CubeM_setLDOUBLEValue+0x68>)
 8000b30:	4613      	mov	r3, r2
 8000b32:	009b      	lsls	r3, r3, #2
 8000b34:	4413      	add	r3, r2
 8000b36:	00db      	lsls	r3, r3, #3
 8000b38:	440b      	add	r3, r1
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	701a      	strb	r2, [r3, #0]
	return 0;
 8000b3e:	2300      	movs	r3, #0
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3714      	adds	r7, #20
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	24000340 	.word	0x24000340

08000b50 <CubeM_sendCurValues>:

uint8_t CubeM_sendCurValues() {
 8000b50:	b590      	push	{r4, r7, lr}
 8000b52:	b09b      	sub	sp, #108	; 0x6c
 8000b54:	af04      	add	r7, sp, #16
	CubeM_clearBuffer();
 8000b56:	f7ff fced 	bl	8000534 <CubeM_clearBuffer>

	uint8_t tempbuffer[CUBEMONSMALLBUFSIZE*4];
	uint8_t datatowrite = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint32_t tempsize = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	653b      	str	r3, [r7, #80]	; 0x50

	for(uint8_t i=0; i<CUBEMONMAXSIGNALS; i++) {
 8000b64:	2300      	movs	r3, #0
 8000b66:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8000b6a:	e13a      	b.n	8000de2 <CubeM_sendCurValues+0x292>
		if(cubemChannels[i].newvalue == 0) continue;
 8000b6c:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000b70:	49a4      	ldr	r1, [pc, #656]	; (8000e04 <CubeM_sendCurValues+0x2b4>)
 8000b72:	4613      	mov	r3, r2
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	4413      	add	r3, r2
 8000b78:	00db      	lsls	r3, r3, #3
 8000b7a:	440b      	add	r3, r1
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	f000 8127 	beq.w	8000dd2 <CubeM_sendCurValues+0x282>

		switch(cubemChannels[i].datatype) {
 8000b84:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000b88:	499e      	ldr	r1, [pc, #632]	; (8000e04 <CubeM_sendCurValues+0x2b4>)
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	4413      	add	r3, r2
 8000b90:	00db      	lsls	r3, r3, #3
 8000b92:	440b      	add	r3, r1
 8000b94:	3316      	adds	r3, #22
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b04      	cmp	r3, #4
 8000b9a:	f200 811c 	bhi.w	8000dd6 <CubeM_sendCurValues+0x286>
 8000b9e:	a201      	add	r2, pc, #4	; (adr r2, 8000ba4 <CubeM_sendCurValues+0x54>)
 8000ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ba4:	08000bb9 	.word	0x08000bb9
 8000ba8:	08000bfd 	.word	0x08000bfd
 8000bac:	08000c41 	.word	0x08000c41
 8000bb0:	08000c9d 	.word	0x08000c9d
 8000bb4:	08000cf1 	.word	0x08000cf1
		case CUBEMUINT:
			sprintf((char*)tempbuffer, "%s%s%s%ld", delimiter, cubemChannels[i].name, connector, (uint32_t)cubemChannels[i].value);
 8000bb8:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	4413      	add	r3, r2
 8000bc2:	00db      	lsls	r3, r3, #3
 8000bc4:	4a8f      	ldr	r2, [pc, #572]	; (8000e04 <CubeM_sendCurValues+0x2b4>)
 8000bc6:	4413      	add	r3, r2
 8000bc8:	1c99      	adds	r1, r3, #2
 8000bca:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000bce:	488d      	ldr	r0, [pc, #564]	; (8000e04 <CubeM_sendCurValues+0x2b4>)
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	4413      	add	r3, r2
 8000bd6:	00db      	lsls	r3, r3, #3
 8000bd8:	4403      	add	r3, r0
 8000bda:	3318      	adds	r3, #24
 8000bdc:	ed93 7b00 	vldr	d7, [r3]
 8000be0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000be4:	ee17 3a90 	vmov	r3, s15
 8000be8:	4638      	mov	r0, r7
 8000bea:	9301      	str	r3, [sp, #4]
 8000bec:	4b86      	ldr	r3, [pc, #536]	; (8000e08 <CubeM_sendCurValues+0x2b8>)
 8000bee:	9300      	str	r3, [sp, #0]
 8000bf0:	460b      	mov	r3, r1
 8000bf2:	4a86      	ldr	r2, [pc, #536]	; (8000e0c <CubeM_sendCurValues+0x2bc>)
 8000bf4:	4986      	ldr	r1, [pc, #536]	; (8000e10 <CubeM_sendCurValues+0x2c0>)
 8000bf6:	f00c fd23 	bl	800d640 <siprintf>
			break;
 8000bfa:	e0a3      	b.n	8000d44 <CubeM_sendCurValues+0x1f4>
		case CUBEMINT:
			sprintf((char*)tempbuffer, "%s%s%s%ld", delimiter, cubemChannels[i].name, connector, (int32_t)cubemChannels[i].value);
 8000bfc:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000c00:	4613      	mov	r3, r2
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	4413      	add	r3, r2
 8000c06:	00db      	lsls	r3, r3, #3
 8000c08:	4a7e      	ldr	r2, [pc, #504]	; (8000e04 <CubeM_sendCurValues+0x2b4>)
 8000c0a:	4413      	add	r3, r2
 8000c0c:	1c99      	adds	r1, r3, #2
 8000c0e:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000c12:	487c      	ldr	r0, [pc, #496]	; (8000e04 <CubeM_sendCurValues+0x2b4>)
 8000c14:	4613      	mov	r3, r2
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	4413      	add	r3, r2
 8000c1a:	00db      	lsls	r3, r3, #3
 8000c1c:	4403      	add	r3, r0
 8000c1e:	3318      	adds	r3, #24
 8000c20:	ed93 7b00 	vldr	d7, [r3]
 8000c24:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000c28:	ee17 3a90 	vmov	r3, s15
 8000c2c:	4638      	mov	r0, r7
 8000c2e:	9301      	str	r3, [sp, #4]
 8000c30:	4b75      	ldr	r3, [pc, #468]	; (8000e08 <CubeM_sendCurValues+0x2b8>)
 8000c32:	9300      	str	r3, [sp, #0]
 8000c34:	460b      	mov	r3, r1
 8000c36:	4a75      	ldr	r2, [pc, #468]	; (8000e0c <CubeM_sendCurValues+0x2bc>)
 8000c38:	4975      	ldr	r1, [pc, #468]	; (8000e10 <CubeM_sendCurValues+0x2c0>)
 8000c3a:	f00c fd01 	bl	800d640 <siprintf>
			break;
 8000c3e:	e081      	b.n	8000d44 <CubeM_sendCurValues+0x1f4>
		case CUBEMFLOAT:
			sprintf((char*)tempbuffer, "%s%s%s%.*f", delimiter, cubemChannels[i].name, connector, (int)cubemChannels[i].precision, (float)cubemChannels[i].value);
 8000c40:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000c44:	4613      	mov	r3, r2
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	4413      	add	r3, r2
 8000c4a:	00db      	lsls	r3, r3, #3
 8000c4c:	4a6d      	ldr	r2, [pc, #436]	; (8000e04 <CubeM_sendCurValues+0x2b4>)
 8000c4e:	4413      	add	r3, r2
 8000c50:	1c9c      	adds	r4, r3, #2
 8000c52:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000c56:	496b      	ldr	r1, [pc, #428]	; (8000e04 <CubeM_sendCurValues+0x2b4>)
 8000c58:	4613      	mov	r3, r2
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	4413      	add	r3, r2
 8000c5e:	00db      	lsls	r3, r3, #3
 8000c60:	440b      	add	r3, r1
 8000c62:	3320      	adds	r3, #32
 8000c64:	6819      	ldr	r1, [r3, #0]
 8000c66:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000c6a:	4866      	ldr	r0, [pc, #408]	; (8000e04 <CubeM_sendCurValues+0x2b4>)
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	4413      	add	r3, r2
 8000c72:	00db      	lsls	r3, r3, #3
 8000c74:	4403      	add	r3, r0
 8000c76:	3318      	adds	r3, #24
 8000c78:	ed93 7b00 	vldr	d7, [r3]
 8000c7c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c80:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c84:	4638      	mov	r0, r7
 8000c86:	ed8d 7b02 	vstr	d7, [sp, #8]
 8000c8a:	9101      	str	r1, [sp, #4]
 8000c8c:	4b5e      	ldr	r3, [pc, #376]	; (8000e08 <CubeM_sendCurValues+0x2b8>)
 8000c8e:	9300      	str	r3, [sp, #0]
 8000c90:	4623      	mov	r3, r4
 8000c92:	4a5e      	ldr	r2, [pc, #376]	; (8000e0c <CubeM_sendCurValues+0x2bc>)
 8000c94:	495f      	ldr	r1, [pc, #380]	; (8000e14 <CubeM_sendCurValues+0x2c4>)
 8000c96:	f00c fcd3 	bl	800d640 <siprintf>
			break;
 8000c9a:	e053      	b.n	8000d44 <CubeM_sendCurValues+0x1f4>
		case CUBEMDOUBLE:
			sprintf((char*)tempbuffer, "%s%s%s%.*lf", delimiter, cubemChannels[i].name, connector, (int)cubemChannels[i].precision, (double)cubemChannels[i].value);
 8000c9c:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	4413      	add	r3, r2
 8000ca6:	00db      	lsls	r3, r3, #3
 8000ca8:	4a56      	ldr	r2, [pc, #344]	; (8000e04 <CubeM_sendCurValues+0x2b4>)
 8000caa:	4413      	add	r3, r2
 8000cac:	1c9c      	adds	r4, r3, #2
 8000cae:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000cb2:	4954      	ldr	r1, [pc, #336]	; (8000e04 <CubeM_sendCurValues+0x2b4>)
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	4413      	add	r3, r2
 8000cba:	00db      	lsls	r3, r3, #3
 8000cbc:	440b      	add	r3, r1
 8000cbe:	3320      	adds	r3, #32
 8000cc0:	6819      	ldr	r1, [r3, #0]
 8000cc2:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000cc6:	484f      	ldr	r0, [pc, #316]	; (8000e04 <CubeM_sendCurValues+0x2b4>)
 8000cc8:	4613      	mov	r3, r2
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	4413      	add	r3, r2
 8000cce:	00db      	lsls	r3, r3, #3
 8000cd0:	4403      	add	r3, r0
 8000cd2:	3318      	adds	r3, #24
 8000cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cd8:	4638      	mov	r0, r7
 8000cda:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000cde:	9101      	str	r1, [sp, #4]
 8000ce0:	4b49      	ldr	r3, [pc, #292]	; (8000e08 <CubeM_sendCurValues+0x2b8>)
 8000ce2:	9300      	str	r3, [sp, #0]
 8000ce4:	4623      	mov	r3, r4
 8000ce6:	4a49      	ldr	r2, [pc, #292]	; (8000e0c <CubeM_sendCurValues+0x2bc>)
 8000ce8:	494b      	ldr	r1, [pc, #300]	; (8000e18 <CubeM_sendCurValues+0x2c8>)
 8000cea:	f00c fca9 	bl	800d640 <siprintf>
			break;
 8000cee:	e029      	b.n	8000d44 <CubeM_sendCurValues+0x1f4>
		case CUBEMLDOUBLE:
			sprintf((char*)tempbuffer, "%s%s%s%.*Lf", delimiter, cubemChannels[i].name, connector, (int)cubemChannels[i].precision, (long double)cubemChannels[i].value);
 8000cf0:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	4413      	add	r3, r2
 8000cfa:	00db      	lsls	r3, r3, #3
 8000cfc:	4a41      	ldr	r2, [pc, #260]	; (8000e04 <CubeM_sendCurValues+0x2b4>)
 8000cfe:	4413      	add	r3, r2
 8000d00:	1c9c      	adds	r4, r3, #2
 8000d02:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000d06:	493f      	ldr	r1, [pc, #252]	; (8000e04 <CubeM_sendCurValues+0x2b4>)
 8000d08:	4613      	mov	r3, r2
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	4413      	add	r3, r2
 8000d0e:	00db      	lsls	r3, r3, #3
 8000d10:	440b      	add	r3, r1
 8000d12:	3320      	adds	r3, #32
 8000d14:	6819      	ldr	r1, [r3, #0]
 8000d16:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000d1a:	483a      	ldr	r0, [pc, #232]	; (8000e04 <CubeM_sendCurValues+0x2b4>)
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	4413      	add	r3, r2
 8000d22:	00db      	lsls	r3, r3, #3
 8000d24:	4403      	add	r3, r0
 8000d26:	3318      	adds	r3, #24
 8000d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d2c:	4638      	mov	r0, r7
 8000d2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000d32:	9101      	str	r1, [sp, #4]
 8000d34:	4b34      	ldr	r3, [pc, #208]	; (8000e08 <CubeM_sendCurValues+0x2b8>)
 8000d36:	9300      	str	r3, [sp, #0]
 8000d38:	4623      	mov	r3, r4
 8000d3a:	4a34      	ldr	r2, [pc, #208]	; (8000e0c <CubeM_sendCurValues+0x2bc>)
 8000d3c:	4937      	ldr	r1, [pc, #220]	; (8000e1c <CubeM_sendCurValues+0x2cc>)
 8000d3e:	f00c fc7f 	bl	800d640 <siprintf>
			break;
 8000d42:	bf00      	nop
		default:
			continue;
		}

		tempsize = usedbuffer + strlen((char*)tempbuffer) - (emptybuffer * dellen);
 8000d44:	463b      	mov	r3, r7
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff fb1a 	bl	8000380 <strlen>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	4b34      	ldr	r3, [pc, #208]	; (8000e20 <CubeM_sendCurValues+0x2d0>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4413      	add	r3, r2
 8000d54:	4a33      	ldr	r2, [pc, #204]	; (8000e24 <CubeM_sendCurValues+0x2d4>)
 8000d56:	7812      	ldrb	r2, [r2, #0]
 8000d58:	4611      	mov	r1, r2
 8000d5a:	4a33      	ldr	r2, [pc, #204]	; (8000e28 <CubeM_sendCurValues+0x2d8>)
 8000d5c:	7812      	ldrb	r2, [r2, #0]
 8000d5e:	fb01 f202 	mul.w	r2, r1, r2
 8000d62:	1a9b      	subs	r3, r3, r2
 8000d64:	653b      	str	r3, [r7, #80]	; 0x50

		if(tempsize < buffersize) {
 8000d66:	4b31      	ldr	r3, [pc, #196]	; (8000e2c <CubeM_sendCurValues+0x2dc>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d21b      	bcs.n	8000da8 <CubeM_sendCurValues+0x258>
			strcpy((char*)(buffer + (usedbuffer)), (char*)(tempbuffer + (emptybuffer * dellen)));
 8000d70:	4b2f      	ldr	r3, [pc, #188]	; (8000e30 <CubeM_sendCurValues+0x2e0>)
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	4b2a      	ldr	r3, [pc, #168]	; (8000e20 <CubeM_sendCurValues+0x2d0>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	441a      	add	r2, r3
 8000d7a:	4b2a      	ldr	r3, [pc, #168]	; (8000e24 <CubeM_sendCurValues+0x2d4>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4b29      	ldr	r3, [pc, #164]	; (8000e28 <CubeM_sendCurValues+0x2d8>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	fb01 f303 	mul.w	r3, r1, r3
 8000d88:	4619      	mov	r1, r3
 8000d8a:	463b      	mov	r3, r7
 8000d8c:	440b      	add	r3, r1
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4610      	mov	r0, r2
 8000d92:	f00c fd48 	bl	800d826 <strcpy>
			datatowrite = 1;
 8000d96:	2301      	movs	r3, #1
 8000d98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			usedbuffer = tempsize;
 8000d9c:	4a20      	ldr	r2, [pc, #128]	; (8000e20 <CubeM_sendCurValues+0x2d0>)
 8000d9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000da0:	6013      	str	r3, [r2, #0]
			emptybuffer = 0;
 8000da2:	4b20      	ldr	r3, [pc, #128]	; (8000e24 <CubeM_sendCurValues+0x2d4>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	701a      	strb	r2, [r3, #0]
		}
		cubemChannels[i].newvalue = cubemChannels[i].reuseoldvalue;
 8000da8:	f897 1056 	ldrb.w	r1, [r7, #86]	; 0x56
 8000dac:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000db0:	4814      	ldr	r0, [pc, #80]	; (8000e04 <CubeM_sendCurValues+0x2b4>)
 8000db2:	460b      	mov	r3, r1
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	440b      	add	r3, r1
 8000db8:	00db      	lsls	r3, r3, #3
 8000dba:	4403      	add	r3, r0
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	7818      	ldrb	r0, [r3, #0]
 8000dc0:	4910      	ldr	r1, [pc, #64]	; (8000e04 <CubeM_sendCurValues+0x2b4>)
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	4413      	add	r3, r2
 8000dc8:	00db      	lsls	r3, r3, #3
 8000dca:	440b      	add	r3, r1
 8000dcc:	4602      	mov	r2, r0
 8000dce:	701a      	strb	r2, [r3, #0]
 8000dd0:	e002      	b.n	8000dd8 <CubeM_sendCurValues+0x288>
		if(cubemChannels[i].newvalue == 0) continue;
 8000dd2:	bf00      	nop
 8000dd4:	e000      	b.n	8000dd8 <CubeM_sendCurValues+0x288>
			continue;
 8000dd6:	bf00      	nop
	for(uint8_t i=0; i<CUBEMONMAXSIGNALS; i++) {
 8000dd8:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000ddc:	3301      	adds	r3, #1
 8000dde:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8000de2:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000de6:	2b07      	cmp	r3, #7
 8000de8:	f67f aec0 	bls.w	8000b6c <CubeM_sendCurValues+0x1c>
	}

	if(datatowrite == 1) {
 8000dec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d101      	bne.n	8000df8 <CubeM_sendCurValues+0x2a8>
		CubeM_sendBuffer();
 8000df4:	f7ff fd2c 	bl	8000850 <CubeM_sendBuffer>
	}

	return 0;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	375c      	adds	r7, #92	; 0x5c
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd90      	pop	{r4, r7, pc}
 8000e02:	bf00      	nop
 8000e04:	24000340 	.word	0x24000340
 8000e08:	24000018 	.word	0x24000018
 8000e0c:	24000004 	.word	0x24000004
 8000e10:	0800f6b8 	.word	0x0800f6b8
 8000e14:	0800f6c4 	.word	0x0800f6c4
 8000e18:	0800f6d0 	.word	0x0800f6d0
 8000e1c:	0800f6dc 	.word	0x0800f6dc
 8000e20:	24000334 	.word	0x24000334
 8000e24:	24000000 	.word	0x24000000
 8000e28:	2400033c 	.word	0x2400033c
 8000e2c:	24000330 	.word	0x24000330
 8000e30:	24000338 	.word	0x24000338

08000e34 <CubeM_DEBUGERRORHANDLER>:

#if CUBEMDEBUG

void CubeM_DEBUGERRORHANDLER(uint32_t errorcode) {
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
	asm("NOP");
 8000e3c:	bf00      	nop
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	0000      	movs	r0, r0
 8000e4c:	0000      	movs	r0, r0
	...

08000e50 <CubeM_runDebugTests>:

uint8_t CubeM_runDebugTests() {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08a      	sub	sp, #40	; 0x28
 8000e54:	af00      	add	r7, sp, #0

	uint32_t errornumber = 0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t tempbuffersize = 100;
 8000e5a:	2364      	movs	r3, #100	; 0x64
 8000e5c:	61bb      	str	r3, [r7, #24]
	if(CubeM_Init(tempbuffersize) != tempbuffersize) CubeM_DEBUGERRORHANDLER(errornumber);
 8000e5e:	69b8      	ldr	r0, [r7, #24]
 8000e60:	f7ff fb12 	bl	8000488 <CubeM_Init>
 8000e64:	4602      	mov	r2, r0
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d002      	beq.n	8000e72 <CubeM_runDebugTests+0x22>
 8000e6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000e6e:	f7ff ffe1 	bl	8000e34 <CubeM_DEBUGERRORHANDLER>

	errornumber++;
 8000e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e74:	3301      	adds	r3, #1
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
	if(CubeM_setChannelname(0, (uint8_t*)"Test0") != 0) CubeM_DEBUGERRORHANDLER(errornumber);
 8000e78:	49a7      	ldr	r1, [pc, #668]	; (8001118 <CubeM_runDebugTests+0x2c8>)
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	f7ff fb7c 	bl	8000578 <CubeM_setChannelname>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d002      	beq.n	8000e8c <CubeM_runDebugTests+0x3c>
 8000e86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000e88:	f7ff ffd4 	bl	8000e34 <CubeM_DEBUGERRORHANDLER>

	errornumber++;
 8000e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8e:	3301      	adds	r3, #1
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24
	if(CubeM_attendUIntValue(0, 123) != 0) CubeM_DEBUGERRORHANDLER(errornumber);
 8000e92:	217b      	movs	r1, #123	; 0x7b
 8000e94:	2000      	movs	r0, #0
 8000e96:	f7ff fb97 	bl	80005c8 <CubeM_attendUIntValue>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d002      	beq.n	8000ea6 <CubeM_runDebugTests+0x56>
 8000ea0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000ea2:	f7ff ffc7 	bl	8000e34 <CubeM_DEBUGERRORHANDLER>

	errornumber++;
 8000ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	627b      	str	r3, [r7, #36]	; 0x24
	if(CubeM_attendUIntValue(0, 234) != 0) CubeM_DEBUGERRORHANDLER(errornumber);
 8000eac:	21ea      	movs	r1, #234	; 0xea
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f7ff fb8a 	bl	80005c8 <CubeM_attendUIntValue>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d002      	beq.n	8000ec0 <CubeM_runDebugTests+0x70>
 8000eba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000ebc:	f7ff ffba 	bl	8000e34 <CubeM_DEBUGERRORHANDLER>

	errornumber++;
 8000ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
	if(CubeM_attendUIntValue(1, 123) != 0) CubeM_DEBUGERRORHANDLER(errornumber);
 8000ec6:	217b      	movs	r1, #123	; 0x7b
 8000ec8:	2001      	movs	r0, #1
 8000eca:	f7ff fb7d 	bl	80005c8 <CubeM_attendUIntValue>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d002      	beq.n	8000eda <CubeM_runDebugTests+0x8a>
 8000ed4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000ed6:	f7ff ffad 	bl	8000e34 <CubeM_DEBUGERRORHANDLER>

	errornumber++;
 8000eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000edc:	3301      	adds	r3, #1
 8000ede:	627b      	str	r3, [r7, #36]	; 0x24
	if(CubeM_attendUIntValue(1, 234) != 0) CubeM_DEBUGERRORHANDLER(errornumber);
 8000ee0:	21ea      	movs	r1, #234	; 0xea
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	f7ff fb70 	bl	80005c8 <CubeM_attendUIntValue>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d002      	beq.n	8000ef4 <CubeM_runDebugTests+0xa4>
 8000eee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000ef0:	f7ff ffa0 	bl	8000e34 <CubeM_DEBUGERRORHANDLER>

	errornumber++;
 8000ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	627b      	str	r3, [r7, #36]	; 0x24
	if(CubeM_attendIntValue(1, -123) != 0) CubeM_DEBUGERRORHANDLER(errornumber);
 8000efa:	f06f 017a 	mvn.w	r1, #122	; 0x7a
 8000efe:	2001      	movs	r0, #1
 8000f00:	f7ff fbc8 	bl	8000694 <CubeM_attendIntValue>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d002      	beq.n	8000f10 <CubeM_runDebugTests+0xc0>
 8000f0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f0c:	f7ff ff92 	bl	8000e34 <CubeM_DEBUGERRORHANDLER>

	errornumber++;
 8000f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f12:	3301      	adds	r3, #1
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
	if(CubeM_attendFloatValue(2, 0.123, 3) != 0) CubeM_DEBUGERRORHANDLER(errornumber);
 8000f16:	2103      	movs	r1, #3
 8000f18:	ed9f 0a80 	vldr	s0, [pc, #512]	; 800111c <CubeM_runDebugTests+0x2cc>
 8000f1c:	2002      	movs	r0, #2
 8000f1e:	f7ff fc23 	bl	8000768 <CubeM_attendFloatValue>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d002      	beq.n	8000f2e <CubeM_runDebugTests+0xde>
 8000f28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f2a:	f7ff ff83 	bl	8000e34 <CubeM_DEBUGERRORHANDLER>

	errornumber++;
 8000f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f30:	3301      	adds	r3, #1
 8000f32:	627b      	str	r3, [r7, #36]	; 0x24
	if(CubeM_attendFloatValue(2, 0.123, 2) != 0) CubeM_DEBUGERRORHANDLER(errornumber);
 8000f34:	2102      	movs	r1, #2
 8000f36:	ed9f 0a79 	vldr	s0, [pc, #484]	; 800111c <CubeM_runDebugTests+0x2cc>
 8000f3a:	2002      	movs	r0, #2
 8000f3c:	f7ff fc14 	bl	8000768 <CubeM_attendFloatValue>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d002      	beq.n	8000f4c <CubeM_runDebugTests+0xfc>
 8000f46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f48:	f7ff ff74 	bl	8000e34 <CubeM_DEBUGERRORHANDLER>

	uint8_t debugchnumbers[] = {0, 1, 2, 3, 4};
 8000f4c:	4a74      	ldr	r2, [pc, #464]	; (8001120 <CubeM_runDebugTests+0x2d0>)
 8000f4e:	f107 0310 	add.w	r3, r7, #16
 8000f52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f56:	6018      	str	r0, [r3, #0]
 8000f58:	3304      	adds	r3, #4
 8000f5a:	7019      	strb	r1, [r3, #0]
	cubeMDataType debugdatatypes[] = {CUBEMUINT, CUBEMINT, CUBEMFLOAT, CUBEMDOUBLE, CUBEMLDOUBLE};
 8000f5c:	4a71      	ldr	r2, [pc, #452]	; (8001124 <CubeM_runDebugTests+0x2d4>)
 8000f5e:	f107 0308 	add.w	r3, r7, #8
 8000f62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f66:	6018      	str	r0, [r3, #0]
 8000f68:	3304      	adds	r3, #4
 8000f6a:	7019      	strb	r1, [r3, #0]
	uint8_t debugprecisionvalues[] = {2, 3, 4, 5, 6};
 8000f6c:	4a6e      	ldr	r2, [pc, #440]	; (8001128 <CubeM_runDebugTests+0x2d8>)
 8000f6e:	463b      	mov	r3, r7
 8000f70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f74:	6018      	str	r0, [r3, #0]
 8000f76:	3304      	adds	r3, #4
 8000f78:	7019      	strb	r1, [r3, #0]

	for(uint8_t i=0; i<CUBEMNROFDATATYPES; i++) {
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000f80:	e054      	b.n	800102c <CubeM_runDebugTests+0x1dc>
		errornumber++;
 8000f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f84:	3301      	adds	r3, #1
 8000f86:	627b      	str	r3, [r7, #36]	; 0x24
		if(CubeM_setDataType(debugchnumbers[i], debugdatatypes[i])!= 0) CubeM_DEBUGERRORHANDLER(errornumber);
 8000f88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f8c:	3328      	adds	r3, #40	; 0x28
 8000f8e:	443b      	add	r3, r7
 8000f90:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8000f94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f98:	3328      	adds	r3, #40	; 0x28
 8000f9a:	443b      	add	r3, r7
 8000f9c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4610      	mov	r0, r2
 8000fa4:	f7ff fc7a 	bl	800089c <CubeM_setDataType>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d002      	beq.n	8000fb4 <CubeM_runDebugTests+0x164>
 8000fae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000fb0:	f7ff ff40 	bl	8000e34 <CubeM_DEBUGERRORHANDLER>

		errornumber++;
 8000fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	627b      	str	r3, [r7, #36]	; 0x24
		if(cubemChannels[debugchnumbers[i]].datatype != debugdatatypes[i]) CubeM_DEBUGERRORHANDLER(errornumber);
 8000fba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000fbe:	3328      	adds	r3, #40	; 0x28
 8000fc0:	443b      	add	r3, r7
 8000fc2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4a58      	ldr	r2, [pc, #352]	; (800112c <CubeM_runDebugTests+0x2dc>)
 8000fca:	460b      	mov	r3, r1
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	440b      	add	r3, r1
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	4413      	add	r3, r2
 8000fd4:	3316      	adds	r3, #22
 8000fd6:	781a      	ldrb	r2, [r3, #0]
 8000fd8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000fdc:	3328      	adds	r3, #40	; 0x28
 8000fde:	443b      	add	r3, r7
 8000fe0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d002      	beq.n	8000fee <CubeM_runDebugTests+0x19e>
 8000fe8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000fea:	f7ff ff23 	bl	8000e34 <CubeM_DEBUGERRORHANDLER>

		errornumber++;
 8000fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	627b      	str	r3, [r7, #36]	; 0x24
		if(CubeM_setPrecision(debugchnumbers[i], debugprecisionvalues[i])!= 0) CubeM_DEBUGERRORHANDLER(errornumber);
 8000ff4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ff8:	3328      	adds	r3, #40	; 0x28
 8000ffa:	443b      	add	r3, r7
 8000ffc:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001000:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001004:	3328      	adds	r3, #40	; 0x28
 8001006:	443b      	add	r3, r7
 8001008:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800100c:	b25b      	sxtb	r3, r3
 800100e:	4619      	mov	r1, r3
 8001010:	4610      	mov	r0, r2
 8001012:	f7ff fc67 	bl	80008e4 <CubeM_setPrecision>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d002      	beq.n	8001022 <CubeM_runDebugTests+0x1d2>
 800101c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800101e:	f7ff ff09 	bl	8000e34 <CubeM_DEBUGERRORHANDLER>
	for(uint8_t i=0; i<CUBEMNROFDATATYPES; i++) {
 8001022:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001026:	3301      	adds	r3, #1
 8001028:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800102c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001030:	2b04      	cmp	r3, #4
 8001032:	d9a6      	bls.n	8000f82 <CubeM_runDebugTests+0x132>
	}

	errornumber++;
 8001034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001036:	3301      	adds	r3, #1
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
	if(CubeM_setValue(debugchnumbers[0], (uint32_t)123) != 0) CubeM_DEBUGERRORHANDLER(errornumber);
 800103a:	7c3b      	ldrb	r3, [r7, #16]
 800103c:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 8001130 <CubeM_runDebugTests+0x2e0>
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff fc71 	bl	8000928 <CubeM_setUINTValue>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d002      	beq.n	8001052 <CubeM_runDebugTests+0x202>
 800104c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800104e:	f7ff fef1 	bl	8000e34 <CubeM_DEBUGERRORHANDLER>

	errornumber++;
 8001052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001054:	3301      	adds	r3, #1
 8001056:	627b      	str	r3, [r7, #36]	; 0x24
	if(CubeM_setValue(debugchnumbers[1], (int32_t)-123) != 0) CubeM_DEBUGERRORHANDLER(errornumber);
 8001058:	7c7b      	ldrb	r3, [r7, #17]
 800105a:	ed9f 0a36 	vldr	s0, [pc, #216]	; 8001134 <CubeM_runDebugTests+0x2e4>
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff fc9a 	bl	8000998 <CubeM_setINTValue>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d002      	beq.n	8001070 <CubeM_runDebugTests+0x220>
 800106a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800106c:	f7ff fee2 	bl	8000e34 <CubeM_DEBUGERRORHANDLER>

	errornumber++;
 8001070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001072:	3301      	adds	r3, #1
 8001074:	627b      	str	r3, [r7, #36]	; 0x24
	if(CubeM_setValue(debugchnumbers[2], (float)0.123456789) != 0) CubeM_DEBUGERRORHANDLER(errornumber);
 8001076:	7cbb      	ldrb	r3, [r7, #18]
 8001078:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8001138 <CubeM_runDebugTests+0x2e8>
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fcc3 	bl	8000a08 <CubeM_setFLOATValue>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d002      	beq.n	800108e <CubeM_runDebugTests+0x23e>
 8001088:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800108a:	f7ff fed3 	bl	8000e34 <CubeM_DEBUGERRORHANDLER>

	errornumber++;
 800108e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001090:	3301      	adds	r3, #1
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
	if(CubeM_setValue(debugchnumbers[3], (double)0.123456789) != 0) CubeM_DEBUGERRORHANDLER(errornumber);
 8001094:	7cfb      	ldrb	r3, [r7, #19]
 8001096:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8001110 <CubeM_runDebugTests+0x2c0>
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fcec 	bl	8000a78 <CubeM_setDOUBLEValue>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d002      	beq.n	80010ac <CubeM_runDebugTests+0x25c>
 80010a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010a8:	f7ff fec4 	bl	8000e34 <CubeM_DEBUGERRORHANDLER>

	errornumber++;
 80010ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ae:	3301      	adds	r3, #1
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
	if(CubeM_setValue(debugchnumbers[4], (long double)0.123456789) != 0) CubeM_DEBUGERRORHANDLER(errornumber);
 80010b2:	7d3b      	ldrb	r3, [r7, #20]
 80010b4:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8001110 <CubeM_runDebugTests+0x2c0>
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fd13 	bl	8000ae4 <CubeM_setLDOUBLEValue>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d002      	beq.n	80010ca <CubeM_runDebugTests+0x27a>
 80010c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010c6:	f7ff feb5 	bl	8000e34 <CubeM_DEBUGERRORHANDLER>

	errornumber++;
 80010ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010cc:	3301      	adds	r3, #1
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
	if(CubeM_setValue(debugchnumbers[0], (float)0.123456789) != 1) CubeM_DEBUGERRORHANDLER(errornumber);
 80010d0:	7c3b      	ldrb	r3, [r7, #16]
 80010d2:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8001138 <CubeM_runDebugTests+0x2e8>
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fc96 	bl	8000a08 <CubeM_setFLOATValue>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d002      	beq.n	80010e8 <CubeM_runDebugTests+0x298>
 80010e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010e4:	f7ff fea6 	bl	8000e34 <CubeM_DEBUGERRORHANDLER>

	errornumber++;
 80010e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ea:	3301      	adds	r3, #1
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
	if(CubeM_sendCurValues() != 0) CubeM_DEBUGERRORHANDLER(errornumber);
 80010ee:	f7ff fd2f 	bl	8000b50 <CubeM_sendCurValues>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d002      	beq.n	80010fe <CubeM_runDebugTests+0x2ae>
 80010f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010fa:	f7ff fe9b 	bl	8000e34 <CubeM_DEBUGERRORHANDLER>

	uint8_t tempstatus = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	uint32_t tempcounter = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	61fb      	str	r3, [r7, #28]
	while(tempstatus == 0) {
 8001108:	e02f      	b.n	800116a <CubeM_runDebugTests+0x31a>
 800110a:	bf00      	nop
 800110c:	f3af 8000 	nop.w
 8001110:	3739635f 	.word	0x3739635f
 8001114:	3fbf9add 	.word	0x3fbf9add
 8001118:	0800f6e8 	.word	0x0800f6e8
 800111c:	3dfbe76d 	.word	0x3dfbe76d
 8001120:	0800f6f0 	.word	0x0800f6f0
 8001124:	0800f6f8 	.word	0x0800f6f8
 8001128:	0800f700 	.word	0x0800f700
 800112c:	24000340 	.word	0x24000340
 8001130:	42f60000 	.word	0x42f60000
 8001134:	c2f60000 	.word	0xc2f60000
 8001138:	3dfcd6ea 	.word	0x3dfcd6ea
		tempstatus = CubeM_attendFloatValue(2, 0.123+tempcounter, 2);
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	ee07 3a90 	vmov	s15, r3
 8001142:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001146:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 80011f0 <CubeM_runDebugTests+0x3a0>
 800114a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800114e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001152:	2102      	movs	r1, #2
 8001154:	eeb0 0a67 	vmov.f32	s0, s15
 8001158:	2002      	movs	r0, #2
 800115a:	f7ff fb05 	bl	8000768 <CubeM_attendFloatValue>
 800115e:	4603      	mov	r3, r0
 8001160:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		tempcounter++;
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	3301      	adds	r3, #1
 8001168:	61fb      	str	r3, [r7, #28]
	while(tempstatus == 0) {
 800116a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800116e:	2b00      	cmp	r3, #0
 8001170:	d0e4      	beq.n	800113c <CubeM_runDebugTests+0x2ec>
	}

	errornumber++;
 8001172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001174:	3301      	adds	r3, #1
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
	if(usedbuffer == 0 || emptybuffer == 1 || buffer[0] == '\0') CubeM_DEBUGERRORHANDLER(errornumber);
 8001178:	4b1f      	ldr	r3, [pc, #124]	; (80011f8 <CubeM_runDebugTests+0x3a8>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d008      	beq.n	8001192 <CubeM_runDebugTests+0x342>
 8001180:	4b1e      	ldr	r3, [pc, #120]	; (80011fc <CubeM_runDebugTests+0x3ac>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d004      	beq.n	8001192 <CubeM_runDebugTests+0x342>
 8001188:	4b1d      	ldr	r3, [pc, #116]	; (8001200 <CubeM_runDebugTests+0x3b0>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d102      	bne.n	8001198 <CubeM_runDebugTests+0x348>
 8001192:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001194:	f7ff fe4e 	bl	8000e34 <CubeM_DEBUGERRORHANDLER>

	HAL_Delay(3000);
 8001198:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800119c:	f001 f8a8 	bl	80022f0 <HAL_Delay>
	CubeM_sendBuffer();
 80011a0:	f7ff fb56 	bl	8000850 <CubeM_sendBuffer>

	errornumber++;
 80011a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a6:	3301      	adds	r3, #1
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
	if(CubeM_clearBuffer() != 0) CubeM_DEBUGERRORHANDLER(errornumber);
 80011aa:	f7ff f9c3 	bl	8000534 <CubeM_clearBuffer>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d002      	beq.n	80011ba <CubeM_runDebugTests+0x36a>
 80011b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011b6:	f7ff fe3d 	bl	8000e34 <CubeM_DEBUGERRORHANDLER>

	errornumber++;
 80011ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011bc:	3301      	adds	r3, #1
 80011be:	627b      	str	r3, [r7, #36]	; 0x24
	if(usedbuffer != 0 || emptybuffer != 1 || buffer[0] != '\0') CubeM_DEBUGERRORHANDLER(errornumber);
 80011c0:	4b0d      	ldr	r3, [pc, #52]	; (80011f8 <CubeM_runDebugTests+0x3a8>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d108      	bne.n	80011da <CubeM_runDebugTests+0x38a>
 80011c8:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <CubeM_runDebugTests+0x3ac>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d104      	bne.n	80011da <CubeM_runDebugTests+0x38a>
 80011d0:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <CubeM_runDebugTests+0x3b0>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d002      	beq.n	80011e0 <CubeM_runDebugTests+0x390>
 80011da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011dc:	f7ff fe2a 	bl	8000e34 <CubeM_DEBUGERRORHANDLER>

	return 0;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3728      	adds	r7, #40	; 0x28
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	f3af 8000 	nop.w
 80011f0:	916872b0 	.word	0x916872b0
 80011f4:	3fbf7ced 	.word	0x3fbf7ced
 80011f8:	24000334 	.word	0x24000334
 80011fc:	24000000 	.word	0x24000000
 8001200:	24000338 	.word	0x24000338

08001204 <initAvgFilter>:
#include <stdlib.h>

filter_t *filter;
uint8_t nrfilter = 0;

uint8_t initAvgFilter(filter_t *filter, uint32_t nrAvg) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
	filter->type = AVERAGE;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2200      	movs	r2, #0
 8001212:	701a      	strb	r2, [r3, #0]
	filter->averages = nrAvg;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	683a      	ldr	r2, [r7, #0]
 8001218:	605a      	str	r2, [r3, #4]
	filter->medians = 0;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
	filter->order = 0;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	731a      	strb	r2, [r3, #12]
	filter->coef = 0;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	611a      	str	r2, [r3, #16]
	initFilterBuffer(filter, (uint16_t)0, (uint32_t)0);
 800122c:	2200      	movs	r2, #0
 800122e:	2100      	movs	r1, #0
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f000 f805 	bl	8001240 <initFilterBuffer>

	return 1;
 8001236:	2301      	movs	r3, #1
}
 8001238:	4618      	mov	r0, r3
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <initFilterBuffer>:
	filter.type = IIR;

	return 1;
}

uint8_t initFilterBuffer(filter_t *filter, uint16_t *buffer, uint32_t bufsize) {
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
	if(bufsize > 0) {
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d00a      	beq.n	8001268 <initFilterBuffer+0x28>
		filter->inPlace = 1;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	2201      	movs	r2, #1
 8001256:	751a      	strb	r2, [r3, #20]
		filter->buffer = buffer;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	68ba      	ldr	r2, [r7, #8]
 800125c:	619a      	str	r2, [r3, #24]
		filter->bufsize = bufsize;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	61da      	str	r2, [r3, #28]
		return 0;
 8001264:	2300      	movs	r3, #0
 8001266:	e009      	b.n	800127c <initFilterBuffer+0x3c>
	}
	filter->inPlace = 0;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	2200      	movs	r2, #0
 800126c:	751a      	strb	r2, [r3, #20]
	filter->buffer = 0;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	2200      	movs	r2, #0
 8001272:	619a      	str	r2, [r3, #24]
	filter->bufsize = 0;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2200      	movs	r2, #0
 8001278:	61da      	str	r2, [r3, #28]
	return 0;
 800127a:	2300      	movs	r3, #0
}
 800127c:	4618      	mov	r0, r3
 800127e:	3714      	adds	r7, #20
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <applyFilter>:
int32_t addInternalFilter(filter_t filter) {

	return -1;
}

uint8_t applyFilter(filter_t filter, uint16_t *values, uint32_t nrvalues) {
 8001288:	b084      	sub	sp, #16
 800128a:	b580      	push	{r7, lr}
 800128c:	b086      	sub	sp, #24
 800128e:	af00      	add	r7, sp, #0
 8001290:	f107 0c20 	add.w	ip, r7, #32
 8001294:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if(!filter.inPlace) {
 8001298:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800129c:	2b00      	cmp	r3, #0
 800129e:	d101      	bne.n	80012a4 <applyFilter+0x1c>
		filter.buffer = values;
 80012a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012a2:	63bb      	str	r3, [r7, #56]	; 0x38
	}
	uint16_t *tempvalues;

	switch(filter.type) {
 80012a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012a8:	2b04      	cmp	r3, #4
 80012aa:	f200 80c2 	bhi.w	8001432 <applyFilter+0x1aa>
 80012ae:	a201      	add	r2, pc, #4	; (adr r2, 80012b4 <applyFilter+0x2c>)
 80012b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b4:	080012c9 	.word	0x080012c9
 80012b8:	08001437 	.word	0x08001437
 80012bc:	08001437 	.word	0x08001437
 80012c0:	08001437 	.word	0x08001437
 80012c4:	08001437 	.word	0x08001437
	case(AVERAGE):
		tempvalues = malloc(filter.averages * sizeof(uint16_t));
 80012c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	4618      	mov	r0, r3
 80012ce:	f00b fbfd 	bl	800cacc <malloc>
 80012d2:	4603      	mov	r3, r0
 80012d4:	617b      	str	r3, [r7, #20]
		uint32_t curBuf = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
		uint32_t newestValue = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
		uint32_t avgValue = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	60bb      	str	r3, [r7, #8]

		for(uint32_t i=0; i < filter.averages; i++) {
 80012e2:	2300      	movs	r3, #0
 80012e4:	607b      	str	r3, [r7, #4]
 80012e6:	e015      	b.n	8001314 <applyFilter+0x8c>
			tempvalues[i] = values[i];
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80012ee:	441a      	add	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	6979      	ldr	r1, [r7, #20]
 80012f6:	440b      	add	r3, r1
 80012f8:	8812      	ldrh	r2, [r2, #0]
 80012fa:	801a      	strh	r2, [r3, #0]
			avgValue += tempvalues[i];
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	697a      	ldr	r2, [r7, #20]
 8001302:	4413      	add	r3, r2
 8001304:	881b      	ldrh	r3, [r3, #0]
 8001306:	461a      	mov	r2, r3
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	4413      	add	r3, r2
 800130c:	60bb      	str	r3, [r7, #8]
		for(uint32_t i=0; i < filter.averages; i++) {
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	3301      	adds	r3, #1
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	429a      	cmp	r2, r3
 800131a:	d3e5      	bcc.n	80012e8 <applyFilter+0x60>
		}
		avgValue = ((float)avgValue) / filter.averages + 0.5;
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	ee07 3a90 	vmov	s15, r3
 8001322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001328:	ee07 3a90 	vmov	s15, r3
 800132c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001330:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001334:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001338:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800133c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001340:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001344:	ee17 3a90 	vmov	r3, s15
 8001348:	60bb      	str	r3, [r7, #8]

		for(; newestValue < (filter.averages/2); newestValue++) {
 800134a:	e009      	b.n	8001360 <applyFilter+0xd8>
			filter.buffer[newestValue] = avgValue;
 800134c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	4413      	add	r3, r2
 8001354:	68ba      	ldr	r2, [r7, #8]
 8001356:	b292      	uxth	r2, r2
 8001358:	801a      	strh	r2, [r3, #0]
		for(; newestValue < (filter.averages/2); newestValue++) {
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	3301      	adds	r3, #1
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001362:	085b      	lsrs	r3, r3, #1
 8001364:	68fa      	ldr	r2, [r7, #12]
 8001366:	429a      	cmp	r2, r3
 8001368:	d3f0      	bcc.n	800134c <applyFilter+0xc4>
		}

		for(; newestValue < nrvalues-(filter.averages/2); newestValue++) {
 800136a:	e034      	b.n	80013d6 <applyFilter+0x14e>
			tempvalues[curBuf] = values[newestValue];
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001372:	441a      	add	r2, r3
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	6979      	ldr	r1, [r7, #20]
 800137a:	440b      	add	r3, r1
 800137c:	8812      	ldrh	r2, [r2, #0]
 800137e:	801a      	strh	r2, [r3, #0]
			avgValue = 0;
 8001380:	2300      	movs	r3, #0
 8001382:	60bb      	str	r3, [r7, #8]
			for(uint32_t i=0; i<filter.averages; i++) {
 8001384:	2300      	movs	r3, #0
 8001386:	603b      	str	r3, [r7, #0]
 8001388:	e00b      	b.n	80013a2 <applyFilter+0x11a>
				avgValue += tempvalues[i];
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	697a      	ldr	r2, [r7, #20]
 8001390:	4413      	add	r3, r2
 8001392:	881b      	ldrh	r3, [r3, #0]
 8001394:	461a      	mov	r2, r3
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	4413      	add	r3, r2
 800139a:	60bb      	str	r3, [r7, #8]
			for(uint32_t i=0; i<filter.averages; i++) {
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	3301      	adds	r3, #1
 80013a0:	603b      	str	r3, [r7, #0]
 80013a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d3ef      	bcc.n	800138a <applyFilter+0x102>
			}
			filter.buffer[newestValue] = avgValue / filter.averages;
 80013aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ac:	68ba      	ldr	r2, [r7, #8]
 80013ae:	fbb2 f1f3 	udiv	r1, r2, r3
 80013b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	4413      	add	r3, r2
 80013ba:	b28a      	uxth	r2, r1
 80013bc:	801a      	strh	r2, [r3, #0]
			if(++curBuf >= filter.averages) curBuf = 0;
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	3301      	adds	r3, #1
 80013c2:	613b      	str	r3, [r7, #16]
 80013c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d301      	bcc.n	80013d0 <applyFilter+0x148>
 80013cc:	2300      	movs	r3, #0
 80013ce:	613b      	str	r3, [r7, #16]
		for(; newestValue < nrvalues-(filter.averages/2); newestValue++) {
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	3301      	adds	r3, #1
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d8:	085b      	lsrs	r3, r3, #1
 80013da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d3c3      	bcc.n	800136c <applyFilter+0xe4>
		}

		avgValue = ((float)avgValue) / filter.averages + 0.5;
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	ee07 3a90 	vmov	s15, r3
 80013ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80013ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f0:	ee07 3a90 	vmov	s15, r3
 80013f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013fc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001400:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8001404:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001408:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800140c:	ee17 3a90 	vmov	r3, s15
 8001410:	60bb      	str	r3, [r7, #8]
		for(; newestValue < nrvalues; newestValue++) {
 8001412:	e009      	b.n	8001428 <applyFilter+0x1a0>
			filter.buffer[newestValue] = avgValue;
 8001414:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	4413      	add	r3, r2
 800141c:	68ba      	ldr	r2, [r7, #8]
 800141e:	b292      	uxth	r2, r2
 8001420:	801a      	strh	r2, [r3, #0]
		for(; newestValue < nrvalues; newestValue++) {
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	3301      	adds	r3, #1
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fa      	ldr	r2, [r7, #12]
 800142a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800142c:	429a      	cmp	r2, r3
 800142e:	d3f1      	bcc.n	8001414 <applyFilter+0x18c>
		}

		break;
 8001430:	e002      	b.n	8001438 <applyFilter+0x1b0>
		break;
	case(IIR):

		break;
	default:
		return 1;
 8001432:	2301      	movs	r3, #1
 8001434:	e004      	b.n	8001440 <applyFilter+0x1b8>
		break;
 8001436:	bf00      	nop
	}
	free(tempvalues);
 8001438:	6978      	ldr	r0, [r7, #20]
 800143a:	f00b fb4f 	bl	800cadc <free>
	return 0;
 800143e:	2300      	movs	r3, #0
}
 8001440:	4618      	mov	r0, r3
 8001442:	3718      	adds	r7, #24
 8001444:	46bd      	mov	sp, r7
 8001446:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800144a:	b004      	add	sp, #16
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop

08001450 <filterdebug_checkWithTolerance>:
#define max(a,b) \
   ({ __typeof__ (a) _a = (a); \
       __typeof__ (b) _b = (b); \
     _a > _b ? _a : _b; })

uint8_t filterdebug_checkWithTolerance(uint32_t a, uint32_t b, uint32_t tolerance) {
 8001450:	b480      	push	{r7}
 8001452:	b089      	sub	sp, #36	; 0x24
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
	if(max(a, b) - min(a, b) > tolerance) return 1;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	61fb      	str	r3, [r7, #28]
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	61bb      	str	r3, [r7, #24]
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	429a      	cmp	r2, r3
 800146a:	bf38      	it	cc
 800146c:	461a      	movcc	r2, r3
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	617b      	str	r3, [r7, #20]
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	6939      	ldr	r1, [r7, #16]
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	428b      	cmp	r3, r1
 800147c:	bf28      	it	cs
 800147e:	460b      	movcs	r3, r1
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	429a      	cmp	r2, r3
 8001486:	d201      	bcs.n	800148c <filterdebug_checkWithTolerance+0x3c>
 8001488:	2301      	movs	r3, #1
 800148a:	e000      	b.n	800148e <filterdebug_checkWithTolerance+0x3e>
	return 0;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3724      	adds	r7, #36	; 0x24
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <filterdebug_fillDebugBuffer>:

void filterdebug_fillDebugBuffer(uint16_t *buffer, uint32_t size, uint32_t start, uint32_t stop, uint32_t step) {
 800149a:	b480      	push	{r7}
 800149c:	b087      	sub	sp, #28
 800149e:	af00      	add	r7, sp, #0
 80014a0:	60f8      	str	r0, [r7, #12]
 80014a2:	60b9      	str	r1, [r7, #8]
 80014a4:	607a      	str	r2, [r7, #4]
 80014a6:	603b      	str	r3, [r7, #0]
	uint32_t tempnum = start;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	617b      	str	r3, [r7, #20]
	for(uint32_t i=0; i<size; i = i+step) {
 80014ac:	2300      	movs	r3, #0
 80014ae:	613b      	str	r3, [r7, #16]
 80014b0:	e012      	b.n	80014d8 <filterdebug_fillDebugBuffer+0x3e>
		buffer[i] = tempnum++;
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	1c5a      	adds	r2, r3, #1
 80014b6:	617a      	str	r2, [r7, #20]
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	0052      	lsls	r2, r2, #1
 80014bc:	68f9      	ldr	r1, [r7, #12]
 80014be:	440a      	add	r2, r1
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	8013      	strh	r3, [r2, #0]
		if(tempnum > stop) tempnum=start;
 80014c4:	697a      	ldr	r2, [r7, #20]
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d901      	bls.n	80014d0 <filterdebug_fillDebugBuffer+0x36>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	617b      	str	r3, [r7, #20]
	for(uint32_t i=0; i<size; i = i+step) {
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	6a3b      	ldr	r3, [r7, #32]
 80014d4:	4413      	add	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d3e8      	bcc.n	80014b2 <filterdebug_fillDebugBuffer+0x18>
	}
}
 80014e0:	bf00      	nop
 80014e2:	bf00      	nop
 80014e4:	371c      	adds	r7, #28
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <testFilters>:

uint8_t testFilters(uint32_t filtersize) {
 80014ee:	b590      	push	{r4, r7, lr}
 80014f0:	b09f      	sub	sp, #124	; 0x7c
 80014f2:	af06      	add	r7, sp, #24
 80014f4:	6078      	str	r0, [r7, #4]
	uint16_t *testbuffer = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	647b      	str	r3, [r7, #68]	; 0x44
	if((testbuffer = malloc(filtersize*sizeof(uint16_t))) == 0) return 1;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	4618      	mov	r0, r3
 8001500:	f00b fae4 	bl	800cacc <malloc>
 8001504:	4603      	mov	r3, r0
 8001506:	647b      	str	r3, [r7, #68]	; 0x44
 8001508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <testFilters+0x24>
 800150e:	2301      	movs	r3, #1
 8001510:	e114      	b.n	800173c <testFilters+0x24e>

	uint32_t errorcode = 2;
 8001512:	2302      	movs	r3, #2
 8001514:	643b      	str	r3, [r7, #64]	; 0x40

	uint32_t highestdivider = 1;
 8001516:	2301      	movs	r3, #1
 8001518:	65fb      	str	r3, [r7, #92]	; 0x5c
	for(uint32_t i=filtersize-1; i>1; i--) {
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	3b01      	subs	r3, #1
 800151e:	65bb      	str	r3, [r7, #88]	; 0x58
 8001520:	e00f      	b.n	8001542 <testFilters+0x54>
		if(filtersize%i == 0) {
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001526:	fbb3 f2f2 	udiv	r2, r3, r2
 800152a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800152c:	fb01 f202 	mul.w	r2, r1, r2
 8001530:	1a9b      	subs	r3, r3, r2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d102      	bne.n	800153c <testFilters+0x4e>
			highestdivider = i;
 8001536:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001538:	65fb      	str	r3, [r7, #92]	; 0x5c
			break;
 800153a:	e005      	b.n	8001548 <testFilters+0x5a>
	for(uint32_t i=filtersize-1; i>1; i--) {
 800153c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800153e:	3b01      	subs	r3, #1
 8001540:	65bb      	str	r3, [r7, #88]	; 0x58
 8001542:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001544:	2b01      	cmp	r3, #1
 8001546:	d8ec      	bhi.n	8001522 <testFilters+0x34>
		}
	}

	filter_t avgfilter;
	initAvgFilter(&avgfilter, highestdivider);
 8001548:	f107 030c 	add.w	r3, r7, #12
 800154c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff fe58 	bl	8001204 <initAvgFilter>
	initFilterBuffer(&avgfilter, testbuffer, 0);
 8001554:	f107 030c 	add.w	r3, r7, #12
 8001558:	2200      	movs	r2, #0
 800155a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff fe6f 	bl	8001240 <initFilterBuffer>

	uint32_t tempstart = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t tempstop = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t tempstep = 1;
 800156a:	2301      	movs	r3, #1
 800156c:	637b      	str	r3, [r7, #52]	; 0x34
	filterdebug_fillDebugBuffer(testbuffer, filtersize, tempstart, tempstop, tempstep);
 800156e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001574:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001576:	6879      	ldr	r1, [r7, #4]
 8001578:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800157a:	f7ff ff8e 	bl	800149a <filterdebug_fillDebugBuffer>

	applyFilter(avgfilter, testbuffer, filtersize);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	9305      	str	r3, [sp, #20]
 8001582:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001584:	9304      	str	r3, [sp, #16]
 8001586:	466c      	mov	r4, sp
 8001588:	f107 031c 	add.w	r3, r7, #28
 800158c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800158e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001592:	f107 030c 	add.w	r3, r7, #12
 8001596:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001598:	f7ff fe76 	bl	8001288 <applyFilter>

	for(uint32_t i=0; i<filtersize; i++) {
 800159c:	2300      	movs	r3, #0
 800159e:	657b      	str	r3, [r7, #84]	; 0x54
 80015a0:	e00c      	b.n	80015bc <testFilters+0xce>
		if(testbuffer[i] != 0) {
 80015a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80015a8:	4413      	add	r3, r2
 80015aa:	881b      	ldrh	r3, [r3, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d002      	beq.n	80015b6 <testFilters+0xc8>
			return errorcode;
 80015b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	e0c2      	b.n	800173c <testFilters+0x24e>
	for(uint32_t i=0; i<filtersize; i++) {
 80015b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015b8:	3301      	adds	r3, #1
 80015ba:	657b      	str	r3, [r7, #84]	; 0x54
 80015bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d3ee      	bcc.n	80015a2 <testFilters+0xb4>
		}
	}
	errorcode++;
 80015c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015c6:	3301      	adds	r3, #1
 80015c8:	643b      	str	r3, [r7, #64]	; 0x40

	tempstart = 1;
 80015ca:	2301      	movs	r3, #1
 80015cc:	63fb      	str	r3, [r7, #60]	; 0x3c
	tempstop = 5;
 80015ce:	2305      	movs	r3, #5
 80015d0:	63bb      	str	r3, [r7, #56]	; 0x38
	tempstep = 1;
 80015d2:	2301      	movs	r3, #1
 80015d4:	637b      	str	r3, [r7, #52]	; 0x34
	filterdebug_fillDebugBuffer(testbuffer, filtersize, tempstart, tempstop, tempstep);
 80015d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015d8:	9300      	str	r3, [sp, #0]
 80015da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80015e2:	f7ff ff5a 	bl	800149a <filterdebug_fillDebugBuffer>

	applyFilter(avgfilter, testbuffer, filtersize);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	9305      	str	r3, [sp, #20]
 80015ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015ec:	9304      	str	r3, [sp, #16]
 80015ee:	466c      	mov	r4, sp
 80015f0:	f107 031c 	add.w	r3, r7, #28
 80015f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80015fa:	f107 030c 	add.w	r3, r7, #12
 80015fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001600:	f7ff fe42 	bl	8001288 <applyFilter>

	for(uint32_t i=0; i<filtersize; i++) {
 8001604:	2300      	movs	r3, #0
 8001606:	653b      	str	r3, [r7, #80]	; 0x50
 8001608:	e012      	b.n	8001630 <testFilters+0x142>
		if(filterdebug_checkWithTolerance(testbuffer[i], 3, 2)) {
 800160a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001610:	4413      	add	r3, r2
 8001612:	881b      	ldrh	r3, [r3, #0]
 8001614:	2202      	movs	r2, #2
 8001616:	2103      	movs	r1, #3
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ff19 	bl	8001450 <filterdebug_checkWithTolerance>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d002      	beq.n	800162a <testFilters+0x13c>
			return errorcode;
 8001624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001626:	b2db      	uxtb	r3, r3
 8001628:	e088      	b.n	800173c <testFilters+0x24e>
	for(uint32_t i=0; i<filtersize; i++) {
 800162a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800162c:	3301      	adds	r3, #1
 800162e:	653b      	str	r3, [r7, #80]	; 0x50
 8001630:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	429a      	cmp	r2, r3
 8001636:	d3e8      	bcc.n	800160a <testFilters+0x11c>
		}
	}
	errorcode++;
 8001638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800163a:	3301      	adds	r3, #1
 800163c:	643b      	str	r3, [r7, #64]	; 0x40

	tempstart = 1;
 800163e:	2301      	movs	r3, #1
 8001640:	63fb      	str	r3, [r7, #60]	; 0x3c
	tempstop = highestdivider;
 8001642:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001644:	63bb      	str	r3, [r7, #56]	; 0x38
	tempstep = 1;
 8001646:	2301      	movs	r3, #1
 8001648:	637b      	str	r3, [r7, #52]	; 0x34
	filterdebug_fillDebugBuffer(testbuffer, filtersize, tempstart, tempstop, tempstep);
 800164a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800164c:	9300      	str	r3, [sp, #0]
 800164e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001650:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001656:	f7ff ff20 	bl	800149a <filterdebug_fillDebugBuffer>

	applyFilter(avgfilter, testbuffer, filtersize);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	9305      	str	r3, [sp, #20]
 800165e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001660:	9304      	str	r3, [sp, #16]
 8001662:	466c      	mov	r4, sp
 8001664:	f107 031c 	add.w	r3, r7, #28
 8001668:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800166a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800166e:	f107 030c 	add.w	r3, r7, #12
 8001672:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001674:	f7ff fe08 	bl	8001288 <applyFilter>

	uint32_t comparevalue = highestdivider / 2;
 8001678:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800167a:	085b      	lsrs	r3, r3, #1
 800167c:	633b      	str	r3, [r7, #48]	; 0x30
	for(uint32_t i=0; i<filtersize; i++) {
 800167e:	2300      	movs	r3, #0
 8001680:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001682:	e018      	b.n	80016b6 <testFilters+0x1c8>
		if(filterdebug_checkWithTolerance(testbuffer[i], comparevalue, 1)) {
 8001684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800168a:	4413      	add	r3, r2
 800168c:	881b      	ldrh	r3, [r3, #0]
 800168e:	2201      	movs	r2, #1
 8001690:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff fedc 	bl	8001450 <filterdebug_checkWithTolerance>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d008      	beq.n	80016b0 <testFilters+0x1c2>
			__attribute__((unused)) uint32_t tempvalue = testbuffer[i];
 800169e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80016a4:	4413      	add	r3, r2
 80016a6:	881b      	ldrh	r3, [r3, #0]
 80016a8:	62fb      	str	r3, [r7, #44]	; 0x2c
			return errorcode;
 80016aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	e045      	b.n	800173c <testFilters+0x24e>
	for(uint32_t i=0; i<filtersize; i++) {
 80016b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016b2:	3301      	adds	r3, #1
 80016b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d3e2      	bcc.n	8001684 <testFilters+0x196>
		}
	}
	errorcode++;
 80016be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016c0:	3301      	adds	r3, #1
 80016c2:	643b      	str	r3, [r7, #64]	; 0x40

	tempstart = UINT16_MAX;
 80016c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016c8:	63fb      	str	r3, [r7, #60]	; 0x3c
	tempstop = UINT16_MAX;
 80016ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016ce:	63bb      	str	r3, [r7, #56]	; 0x38
	tempstep = 1;
 80016d0:	2301      	movs	r3, #1
 80016d2:	637b      	str	r3, [r7, #52]	; 0x34
	filterdebug_fillDebugBuffer(testbuffer, filtersize, tempstart, tempstop, tempstep);
 80016d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80016dc:	6879      	ldr	r1, [r7, #4]
 80016de:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80016e0:	f7ff fedb 	bl	800149a <filterdebug_fillDebugBuffer>

	applyFilter(avgfilter, testbuffer, filtersize);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	9305      	str	r3, [sp, #20]
 80016e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016ea:	9304      	str	r3, [sp, #16]
 80016ec:	466c      	mov	r4, sp
 80016ee:	f107 031c 	add.w	r3, r7, #28
 80016f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80016f8:	f107 030c 	add.w	r3, r7, #12
 80016fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016fe:	f7ff fdc3 	bl	8001288 <applyFilter>

	comparevalue = UINT16_MAX;
 8001702:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001706:	633b      	str	r3, [r7, #48]	; 0x30
	for(uint32_t i=0; i<filtersize; i++) {
 8001708:	2300      	movs	r3, #0
 800170a:	64bb      	str	r3, [r7, #72]	; 0x48
 800170c:	e00e      	b.n	800172c <testFilters+0x23e>
		if(testbuffer[i] != comparevalue) {
 800170e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001714:	4413      	add	r3, r2
 8001716:	881b      	ldrh	r3, [r3, #0]
 8001718:	461a      	mov	r2, r3
 800171a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800171c:	4293      	cmp	r3, r2
 800171e:	d002      	beq.n	8001726 <testFilters+0x238>
			return errorcode;
 8001720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001722:	b2db      	uxtb	r3, r3
 8001724:	e00a      	b.n	800173c <testFilters+0x24e>
	for(uint32_t i=0; i<filtersize; i++) {
 8001726:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001728:	3301      	adds	r3, #1
 800172a:	64bb      	str	r3, [r7, #72]	; 0x48
 800172c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	429a      	cmp	r2, r3
 8001732:	d3ec      	bcc.n	800170e <testFilters+0x220>
		}
	}
	errorcode++;
 8001734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001736:	3301      	adds	r3, #1
 8001738:	643b      	str	r3, [r7, #64]	; 0x40

	return 0;
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	3764      	adds	r7, #100	; 0x64
 8001740:	46bd      	mov	sp, r7
 8001742:	bd90      	pop	{r4, r7, pc}

08001744 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001748:	f000 fd40 	bl	80021cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800174c:	f000 f816 	bl	800177c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001750:	f000 f8c2 	bl	80018d8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001754:	f000 fa3a 	bl	8001bcc <MX_GPIO_Init>
  MX_ADC1_Init();
 8001758:	f000 f8ee 	bl	8001938 <MX_ADC1_Init>
  MX_ADC2_Init();
 800175c:	f000 f966 	bl	8001a2c <MX_ADC2_Init>
  MX_ADC3_Init();
 8001760:	f000 f9cc 	bl	8001afc <MX_ADC3_Init>
  MX_USB_DEVICE_Init();
 8001764:	f00a fc72 	bl	800c04c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

#if DEBUGTESTS==1
#if ADCDEBUG==1
  adc_runDebugTests();
 8001768:	f7fe fe12 	bl	8000390 <adc_runDebugTests>
#endif

#if SIGANDEBUG==1
	sigAn_Debug();
 800176c:	f000 faa0 	bl	8001cb0 <sigAn_Debug>
#endif

#if CUBEMDEBUG==1
  CubeM_runDebugTests();
 8001770:	f7ff fb6e 	bl	8000e50 <CubeM_runDebugTests>
#endif

#if FILTERDEBUGTESTS==1
  testFilters(100);
 8001774:	2064      	movs	r0, #100	; 0x64
 8001776:	f7ff feba 	bl	80014ee <testFilters>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800177a:	e7fe      	b.n	800177a <main+0x36>

0800177c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b09e      	sub	sp, #120	; 0x78
 8001780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001782:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001786:	224c      	movs	r2, #76	; 0x4c
 8001788:	2100      	movs	r1, #0
 800178a:	4618      	mov	r0, r3
 800178c:	f00b ffbb 	bl	800d706 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001790:	f107 030c 	add.w	r3, r7, #12
 8001794:	2220      	movs	r2, #32
 8001796:	2100      	movs	r1, #0
 8001798:	4618      	mov	r0, r3
 800179a:	f00b ffb4 	bl	800d706 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800179e:	2002      	movs	r0, #2
 80017a0:	f003 fbf4 	bl	8004f8c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017a4:	2300      	movs	r3, #0
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	4b48      	ldr	r3, [pc, #288]	; (80018cc <SystemClock_Config+0x150>)
 80017aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ac:	4a47      	ldr	r2, [pc, #284]	; (80018cc <SystemClock_Config+0x150>)
 80017ae:	f023 0301 	bic.w	r3, r3, #1
 80017b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80017b4:	4b45      	ldr	r3, [pc, #276]	; (80018cc <SystemClock_Config+0x150>)
 80017b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b8:	f003 0301 	and.w	r3, r3, #1
 80017bc:	60bb      	str	r3, [r7, #8]
 80017be:	4b44      	ldr	r3, [pc, #272]	; (80018d0 <SystemClock_Config+0x154>)
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	4a43      	ldr	r2, [pc, #268]	; (80018d0 <SystemClock_Config+0x154>)
 80017c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017c8:	6193      	str	r3, [r2, #24]
 80017ca:	4b41      	ldr	r3, [pc, #260]	; (80018d0 <SystemClock_Config+0x154>)
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017d2:	60bb      	str	r3, [r7, #8]
 80017d4:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80017d6:	bf00      	nop
 80017d8:	4b3d      	ldr	r3, [pc, #244]	; (80018d0 <SystemClock_Config+0x154>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017e4:	d1f8      	bne.n	80017d8 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e6:	4b3b      	ldr	r3, [pc, #236]	; (80018d4 <SystemClock_Config+0x158>)
 80017e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017ec:	4a39      	ldr	r2, [pc, #228]	; (80018d4 <SystemClock_Config+0x158>)
 80017ee:	f043 0302 	orr.w	r3, r3, #2
 80017f2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80017f6:	4b37      	ldr	r3, [pc, #220]	; (80018d4 <SystemClock_Config+0x158>)
 80017f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001804:	2300      	movs	r3, #0
 8001806:	603b      	str	r3, [r7, #0]
 8001808:	4b31      	ldr	r3, [pc, #196]	; (80018d0 <SystemClock_Config+0x154>)
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	4a30      	ldr	r2, [pc, #192]	; (80018d0 <SystemClock_Config+0x154>)
 800180e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001812:	6193      	str	r3, [r2, #24]
 8001814:	4b2e      	ldr	r3, [pc, #184]	; (80018d0 <SystemClock_Config+0x154>)
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800181c:	603b      	str	r3, [r7, #0]
 800181e:	4b2b      	ldr	r3, [pc, #172]	; (80018cc <SystemClock_Config+0x150>)
 8001820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001822:	4a2a      	ldr	r2, [pc, #168]	; (80018cc <SystemClock_Config+0x150>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	62d3      	str	r3, [r2, #44]	; 0x2c
 800182a:	4b28      	ldr	r3, [pc, #160]	; (80018cc <SystemClock_Config+0x150>)
 800182c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	603b      	str	r3, [r7, #0]
 8001834:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001836:	bf00      	nop
 8001838:	4b25      	ldr	r3, [pc, #148]	; (80018d0 <SystemClock_Config+0x154>)
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001840:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001844:	d1f8      	bne.n	8001838 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001846:	2301      	movs	r3, #1
 8001848:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800184a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800184e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001850:	2302      	movs	r3, #2
 8001852:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001854:	2302      	movs	r3, #2
 8001856:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8001858:	2305      	movs	r3, #5
 800185a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 800185c:	23c0      	movs	r3, #192	; 0xc0
 800185e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001860:	2302      	movs	r3, #2
 8001862:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8001864:	230f      	movs	r3, #15
 8001866:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001868:	2302      	movs	r3, #2
 800186a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800186c:	2308      	movs	r3, #8
 800186e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001870:	2300      	movs	r3, #0
 8001872:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001878:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800187c:	4618      	mov	r0, r3
 800187e:	f003 fbcf 	bl	8005020 <HAL_RCC_OscConfig>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <SystemClock_Config+0x110>
  {
    Error_Handler();
 8001888:	f000 f9d8 	bl	8001c3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800188c:	233f      	movs	r3, #63	; 0x3f
 800188e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001890:	2303      	movs	r3, #3
 8001892:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001898:	2308      	movs	r3, #8
 800189a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800189c:	2340      	movs	r3, #64	; 0x40
 800189e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80018a0:	2340      	movs	r3, #64	; 0x40
 80018a2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80018a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80018aa:	2340      	movs	r3, #64	; 0x40
 80018ac:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80018ae:	f107 030c 	add.w	r3, r7, #12
 80018b2:	2104      	movs	r1, #4
 80018b4:	4618      	mov	r0, r3
 80018b6:	f004 f80d 	bl	80058d4 <HAL_RCC_ClockConfig>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <SystemClock_Config+0x148>
  {
    Error_Handler();
 80018c0:	f000 f9bc 	bl	8001c3c <Error_Handler>
  }
}
 80018c4:	bf00      	nop
 80018c6:	3778      	adds	r7, #120	; 0x78
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	58000400 	.word	0x58000400
 80018d0:	58024800 	.word	0x58024800
 80018d4:	58024400 	.word	0x58024400

080018d8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b0b0      	sub	sp, #192	; 0xc0
 80018dc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018de:	463b      	mov	r3, r7
 80018e0:	22c0      	movs	r2, #192	; 0xc0
 80018e2:	2100      	movs	r1, #0
 80018e4:	4618      	mov	r0, r3
 80018e6:	f00b ff0e 	bl	800d706 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80018ea:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80018ee:	f04f 0300 	mov.w	r3, #0
 80018f2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80018f6:	2302      	movs	r3, #2
 80018f8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80018fa:	230c      	movs	r3, #12
 80018fc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80018fe:	2302      	movs	r3, #2
 8001900:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001902:	2302      	movs	r3, #2
 8001904:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001906:	2302      	movs	r3, #2
 8001908:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800190a:	23c0      	movs	r3, #192	; 0xc0
 800190c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800190e:	2320      	movs	r3, #32
 8001910:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001916:	2300      	movs	r3, #0
 8001918:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800191c:	463b      	mov	r3, r7
 800191e:	4618      	mov	r0, r3
 8001920:	f004 fb4e 	bl	8005fc0 <HAL_RCCEx_PeriphCLKConfig>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800192a:	f000 f987 	bl	8001c3c <Error_Handler>
  }
}
 800192e:	bf00      	nop
 8001930:	37c0      	adds	r7, #192	; 0xc0
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
	...

08001938 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b08a      	sub	sp, #40	; 0x28
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800193e:	f107 031c 	add.w	r3, r7, #28
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	605a      	str	r2, [r3, #4]
 8001948:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800194a:	463b      	mov	r3, r7
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]
 8001956:	611a      	str	r2, [r3, #16]
 8001958:	615a      	str	r2, [r3, #20]
 800195a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800195c:	4b2f      	ldr	r3, [pc, #188]	; (8001a1c <MX_ADC1_Init+0xe4>)
 800195e:	4a30      	ldr	r2, [pc, #192]	; (8001a20 <MX_ADC1_Init+0xe8>)
 8001960:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001962:	4b2e      	ldr	r3, [pc, #184]	; (8001a1c <MX_ADC1_Init+0xe4>)
 8001964:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001968:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800196a:	4b2c      	ldr	r3, [pc, #176]	; (8001a1c <MX_ADC1_Init+0xe4>)
 800196c:	2200      	movs	r2, #0
 800196e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001970:	4b2a      	ldr	r3, [pc, #168]	; (8001a1c <MX_ADC1_Init+0xe4>)
 8001972:	2200      	movs	r2, #0
 8001974:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001976:	4b29      	ldr	r3, [pc, #164]	; (8001a1c <MX_ADC1_Init+0xe4>)
 8001978:	2204      	movs	r2, #4
 800197a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800197c:	4b27      	ldr	r3, [pc, #156]	; (8001a1c <MX_ADC1_Init+0xe4>)
 800197e:	2200      	movs	r2, #0
 8001980:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001982:	4b26      	ldr	r3, [pc, #152]	; (8001a1c <MX_ADC1_Init+0xe4>)
 8001984:	2200      	movs	r2, #0
 8001986:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8001988:	4b24      	ldr	r3, [pc, #144]	; (8001a1c <MX_ADC1_Init+0xe4>)
 800198a:	2201      	movs	r2, #1
 800198c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800198e:	4b23      	ldr	r3, [pc, #140]	; (8001a1c <MX_ADC1_Init+0xe4>)
 8001990:	2200      	movs	r2, #0
 8001992:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001994:	4b21      	ldr	r3, [pc, #132]	; (8001a1c <MX_ADC1_Init+0xe4>)
 8001996:	2200      	movs	r2, #0
 8001998:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800199a:	4b20      	ldr	r3, [pc, #128]	; (8001a1c <MX_ADC1_Init+0xe4>)
 800199c:	2200      	movs	r2, #0
 800199e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80019a0:	4b1e      	ldr	r3, [pc, #120]	; (8001a1c <MX_ADC1_Init+0xe4>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80019a6:	4b1d      	ldr	r3, [pc, #116]	; (8001a1c <MX_ADC1_Init+0xe4>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80019ac:	4b1b      	ldr	r3, [pc, #108]	; (8001a1c <MX_ADC1_Init+0xe4>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80019b2:	4b1a      	ldr	r3, [pc, #104]	; (8001a1c <MX_ADC1_Init+0xe4>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019ba:	4818      	ldr	r0, [pc, #96]	; (8001a1c <MX_ADC1_Init+0xe4>)
 80019bc:	f000 fe6a 	bl	8002694 <HAL_ADC_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80019c6:	f000 f939 	bl	8001c3c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80019ca:	2300      	movs	r3, #0
 80019cc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80019ce:	f107 031c 	add.w	r3, r7, #28
 80019d2:	4619      	mov	r1, r3
 80019d4:	4811      	ldr	r0, [pc, #68]	; (8001a1c <MX_ADC1_Init+0xe4>)
 80019d6:	f001 fc81 	bl	80032dc <HAL_ADCEx_MultiModeConfigChannel>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80019e0:	f000 f92c 	bl	8001c3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80019e4:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <MX_ADC1_Init+0xec>)
 80019e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019e8:	2306      	movs	r3, #6
 80019ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80019ec:	2300      	movs	r3, #0
 80019ee:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80019f0:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <MX_ADC1_Init+0xf0>)
 80019f2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80019f4:	2304      	movs	r3, #4
 80019f6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80019fc:	2300      	movs	r3, #0
 80019fe:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a00:	463b      	mov	r3, r7
 8001a02:	4619      	mov	r1, r3
 8001a04:	4805      	ldr	r0, [pc, #20]	; (8001a1c <MX_ADC1_Init+0xe4>)
 8001a06:	f000 ffe7 	bl	80029d8 <HAL_ADC_ConfigChannel>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001a10:	f000 f914 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a14:	bf00      	nop
 8001a16:	3728      	adds	r7, #40	; 0x28
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	24000480 	.word	0x24000480
 8001a20:	40022000 	.word	0x40022000
 8001a24:	0c900008 	.word	0x0c900008
 8001a28:	47ff0000 	.word	0x47ff0000

08001a2c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b088      	sub	sp, #32
 8001a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a32:	1d3b      	adds	r3, r7, #4
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
 8001a3e:	611a      	str	r2, [r3, #16]
 8001a40:	615a      	str	r2, [r3, #20]
 8001a42:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001a44:	4b29      	ldr	r3, [pc, #164]	; (8001aec <MX_ADC2_Init+0xc0>)
 8001a46:	4a2a      	ldr	r2, [pc, #168]	; (8001af0 <MX_ADC2_Init+0xc4>)
 8001a48:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001a4a:	4b28      	ldr	r3, [pc, #160]	; (8001aec <MX_ADC2_Init+0xc0>)
 8001a4c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001a50:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8001a52:	4b26      	ldr	r3, [pc, #152]	; (8001aec <MX_ADC2_Init+0xc0>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a58:	4b24      	ldr	r3, [pc, #144]	; (8001aec <MX_ADC2_Init+0xc0>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a5e:	4b23      	ldr	r3, [pc, #140]	; (8001aec <MX_ADC2_Init+0xc0>)
 8001a60:	2204      	movs	r2, #4
 8001a62:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001a64:	4b21      	ldr	r3, [pc, #132]	; (8001aec <MX_ADC2_Init+0xc0>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001a6a:	4b20      	ldr	r3, [pc, #128]	; (8001aec <MX_ADC2_Init+0xc0>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8001a70:	4b1e      	ldr	r3, [pc, #120]	; (8001aec <MX_ADC2_Init+0xc0>)
 8001a72:	2201      	movs	r2, #1
 8001a74:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001a76:	4b1d      	ldr	r3, [pc, #116]	; (8001aec <MX_ADC2_Init+0xc0>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a7c:	4b1b      	ldr	r3, [pc, #108]	; (8001aec <MX_ADC2_Init+0xc0>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a82:	4b1a      	ldr	r3, [pc, #104]	; (8001aec <MX_ADC2_Init+0xc0>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001a88:	4b18      	ldr	r3, [pc, #96]	; (8001aec <MX_ADC2_Init+0xc0>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001a8e:	4b17      	ldr	r3, [pc, #92]	; (8001aec <MX_ADC2_Init+0xc0>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001a94:	4b15      	ldr	r3, [pc, #84]	; (8001aec <MX_ADC2_Init+0xc0>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8001a9a:	4b14      	ldr	r3, [pc, #80]	; (8001aec <MX_ADC2_Init+0xc0>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001aa2:	4812      	ldr	r0, [pc, #72]	; (8001aec <MX_ADC2_Init+0xc0>)
 8001aa4:	f000 fdf6 	bl	8002694 <HAL_ADC_Init>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8001aae:	f000 f8c5 	bl	8001c3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001ab2:	4b10      	ldr	r3, [pc, #64]	; (8001af4 <MX_ADC2_Init+0xc8>)
 8001ab4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ab6:	2306      	movs	r3, #6
 8001ab8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001aba:	2300      	movs	r3, #0
 8001abc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8001abe:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <MX_ADC2_Init+0xcc>)
 8001ac0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001ac2:	2304      	movs	r3, #4
 8001ac4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001aca:	2300      	movs	r3, #0
 8001acc:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001ace:	1d3b      	adds	r3, r7, #4
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4806      	ldr	r0, [pc, #24]	; (8001aec <MX_ADC2_Init+0xc0>)
 8001ad4:	f000 ff80 	bl	80029d8 <HAL_ADC_ConfigChannel>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8001ade:	f000 f8ad 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001ae2:	bf00      	nop
 8001ae4:	3720      	adds	r7, #32
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	240004e4 	.word	0x240004e4
 8001af0:	40022100 	.word	0x40022100
 8001af4:	10c00010 	.word	0x10c00010
 8001af8:	47ff0000 	.word	0x47ff0000

08001afc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b088      	sub	sp, #32
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b02:	1d3b      	adds	r3, r7, #4
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
 8001b0e:	611a      	str	r2, [r3, #16]
 8001b10:	615a      	str	r2, [r3, #20]
 8001b12:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001b14:	4b29      	ldr	r3, [pc, #164]	; (8001bbc <MX_ADC3_Init+0xc0>)
 8001b16:	4a2a      	ldr	r2, [pc, #168]	; (8001bc0 <MX_ADC3_Init+0xc4>)
 8001b18:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001b1a:	4b28      	ldr	r3, [pc, #160]	; (8001bbc <MX_ADC3_Init+0xc0>)
 8001b1c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001b20:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8001b22:	4b26      	ldr	r3, [pc, #152]	; (8001bbc <MX_ADC3_Init+0xc0>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b28:	4b24      	ldr	r3, [pc, #144]	; (8001bbc <MX_ADC3_Init+0xc0>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b2e:	4b23      	ldr	r3, [pc, #140]	; (8001bbc <MX_ADC3_Init+0xc0>)
 8001b30:	2204      	movs	r2, #4
 8001b32:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001b34:	4b21      	ldr	r3, [pc, #132]	; (8001bbc <MX_ADC3_Init+0xc0>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001b3a:	4b20      	ldr	r3, [pc, #128]	; (8001bbc <MX_ADC3_Init+0xc0>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8001b40:	4b1e      	ldr	r3, [pc, #120]	; (8001bbc <MX_ADC3_Init+0xc0>)
 8001b42:	2201      	movs	r2, #1
 8001b44:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001b46:	4b1d      	ldr	r3, [pc, #116]	; (8001bbc <MX_ADC3_Init+0xc0>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b4c:	4b1b      	ldr	r3, [pc, #108]	; (8001bbc <MX_ADC3_Init+0xc0>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b52:	4b1a      	ldr	r3, [pc, #104]	; (8001bbc <MX_ADC3_Init+0xc0>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001b58:	4b18      	ldr	r3, [pc, #96]	; (8001bbc <MX_ADC3_Init+0xc0>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001b5e:	4b17      	ldr	r3, [pc, #92]	; (8001bbc <MX_ADC3_Init+0xc0>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001b64:	4b15      	ldr	r3, [pc, #84]	; (8001bbc <MX_ADC3_Init+0xc0>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001b6a:	4b14      	ldr	r3, [pc, #80]	; (8001bbc <MX_ADC3_Init+0xc0>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001b72:	4812      	ldr	r0, [pc, #72]	; (8001bbc <MX_ADC3_Init+0xc0>)
 8001b74:	f000 fd8e 	bl	8002694 <HAL_ADC_Init>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8001b7e:	f000 f85d 	bl	8001c3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001b82:	4b10      	ldr	r3, [pc, #64]	; (8001bc4 <MX_ADC3_Init+0xc8>)
 8001b84:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b86:	2306      	movs	r3, #6
 8001b88:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8001b8e:	4b0e      	ldr	r3, [pc, #56]	; (8001bc8 <MX_ADC3_Init+0xcc>)
 8001b90:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001b92:	2304      	movs	r3, #4
 8001b94:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001b96:	2300      	movs	r3, #0
 8001b98:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001b9e:	1d3b      	adds	r3, r7, #4
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4806      	ldr	r0, [pc, #24]	; (8001bbc <MX_ADC3_Init+0xc0>)
 8001ba4:	f000 ff18 	bl	80029d8 <HAL_ADC_ConfigChannel>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_ADC3_Init+0xb6>
  {
    Error_Handler();
 8001bae:	f000 f845 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001bb2:	bf00      	nop
 8001bb4:	3720      	adds	r7, #32
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	24000548 	.word	0x24000548
 8001bc0:	58026000 	.word	0x58026000
 8001bc4:	04300002 	.word	0x04300002
 8001bc8:	47ff0000 	.word	0x47ff0000

08001bcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bd2:	4b19      	ldr	r3, [pc, #100]	; (8001c38 <MX_GPIO_Init+0x6c>)
 8001bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bd8:	4a17      	ldr	r2, [pc, #92]	; (8001c38 <MX_GPIO_Init+0x6c>)
 8001bda:	f043 0304 	orr.w	r3, r3, #4
 8001bde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001be2:	4b15      	ldr	r3, [pc, #84]	; (8001c38 <MX_GPIO_Init+0x6c>)
 8001be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001be8:	f003 0304 	and.w	r3, r3, #4
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bf0:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <MX_GPIO_Init+0x6c>)
 8001bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bf6:	4a10      	ldr	r2, [pc, #64]	; (8001c38 <MX_GPIO_Init+0x6c>)
 8001bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c00:	4b0d      	ldr	r3, [pc, #52]	; (8001c38 <MX_GPIO_Init+0x6c>)
 8001c02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c0a:	60bb      	str	r3, [r7, #8]
 8001c0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0e:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <MX_GPIO_Init+0x6c>)
 8001c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c14:	4a08      	ldr	r2, [pc, #32]	; (8001c38 <MX_GPIO_Init+0x6c>)
 8001c16:	f043 0301 	orr.w	r3, r3, #1
 8001c1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c1e:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <MX_GPIO_Init+0x6c>)
 8001c20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	607b      	str	r3, [r7, #4]
 8001c2a:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c2c:	bf00      	nop
 8001c2e:	3714      	adds	r7, #20
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	58024400 	.word	0x58024400

08001c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c40:	b672      	cpsid	i
}
 8001c42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c44:	e7fe      	b.n	8001c44 <Error_Handler+0x8>
	...

08001c48 <sigAn_Init>:

#include "signalanalyzer.h"

siganalyzerch_t sigAnChannels[SIGANMAXCH];

uint8_t sigAn_Init() {
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
	for(uint8_t i=0; i<SIGANMAXCH; i++) {
 8001c4e:	2300      	movs	r3, #0
 8001c50:	71fb      	strb	r3, [r7, #7]
 8001c52:	e021      	b.n	8001c98 <sigAn_Init+0x50>
		sigAnChannels[i].active = 0;
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	4a15      	ldr	r2, [pc, #84]	; (8001cac <sigAn_Init+0x64>)
 8001c58:	f644 61c0 	movw	r1, #20160	; 0x4ec0
 8001c5c:	fb01 f303 	mul.w	r3, r1, r3
 8001c60:	4413      	add	r3, r2
 8001c62:	2200      	movs	r2, #0
 8001c64:	701a      	strb	r2, [r3, #0]
		sigAnChannels[i].buffer[0] = 0;
 8001c66:	79fb      	ldrb	r3, [r7, #7]
 8001c68:	4a10      	ldr	r2, [pc, #64]	; (8001cac <sigAn_Init+0x64>)
 8001c6a:	f644 61c0 	movw	r1, #20160	; 0x4ec0
 8001c6e:	fb01 f303 	mul.w	r3, r1, r3
 8001c72:	4413      	add	r3, r2
 8001c74:	339c      	adds	r3, #156	; 0x9c
 8001c76:	2200      	movs	r2, #0
 8001c78:	801a      	strh	r2, [r3, #0]
		sigAnChannels[i].bufsize = 10;
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	4a0b      	ldr	r2, [pc, #44]	; (8001cac <sigAn_Init+0x64>)
 8001c7e:	f644 61c0 	movw	r1, #20160	; 0x4ec0
 8001c82:	fb01 f303 	mul.w	r3, r1, r3
 8001c86:	441a      	add	r2, r3
 8001c88:	f644 63bc 	movw	r3, #20156	; 0x4ebc
 8001c8c:	4413      	add	r3, r2
 8001c8e:	220a      	movs	r2, #10
 8001c90:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i<SIGANMAXCH; i++) {
 8001c92:	79fb      	ldrb	r3, [r7, #7]
 8001c94:	3301      	adds	r3, #1
 8001c96:	71fb      	strb	r3, [r7, #7]
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d9da      	bls.n	8001c54 <sigAn_Init+0xc>
	}

	return 0;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	240005ac 	.word	0x240005ac

08001cb0 <sigAn_Debug>:

uint16_t *sigAn_getBuffer(uint8_t chnumber) {
	return sigAnChannels[chnumber].buffer;
}

uint8_t sigAn_Debug() {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
	sigAn_Init();
 8001cb4:	f7ff ffc8 	bl	8001c48 <sigAn_Init>

	return 0;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <HAL_MspInit+0x30>)
 8001cc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ccc:	4a08      	ldr	r2, [pc, #32]	; (8001cf0 <HAL_MspInit+0x30>)
 8001cce:	f043 0302 	orr.w	r3, r3, #2
 8001cd2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001cd6:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <HAL_MspInit+0x30>)
 8001cd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	607b      	str	r3, [r7, #4]
 8001ce2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	58024400 	.word	0x58024400

08001cf4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08e      	sub	sp, #56	; 0x38
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	60da      	str	r2, [r3, #12]
 8001d0a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a51      	ldr	r2, [pc, #324]	; (8001e58 <HAL_ADC_MspInit+0x164>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d133      	bne.n	8001d7e <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001d16:	4b51      	ldr	r3, [pc, #324]	; (8001e5c <HAL_ADC_MspInit+0x168>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	4a4f      	ldr	r2, [pc, #316]	; (8001e5c <HAL_ADC_MspInit+0x168>)
 8001d1e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001d20:	4b4e      	ldr	r3, [pc, #312]	; (8001e5c <HAL_ADC_MspInit+0x168>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d10e      	bne.n	8001d46 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001d28:	4b4d      	ldr	r3, [pc, #308]	; (8001e60 <HAL_ADC_MspInit+0x16c>)
 8001d2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d2e:	4a4c      	ldr	r2, [pc, #304]	; (8001e60 <HAL_ADC_MspInit+0x16c>)
 8001d30:	f043 0320 	orr.w	r3, r3, #32
 8001d34:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001d38:	4b49      	ldr	r3, [pc, #292]	; (8001e60 <HAL_ADC_MspInit+0x16c>)
 8001d3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d3e:	f003 0320 	and.w	r3, r3, #32
 8001d42:	623b      	str	r3, [r7, #32]
 8001d44:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d46:	4b46      	ldr	r3, [pc, #280]	; (8001e60 <HAL_ADC_MspInit+0x16c>)
 8001d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d4c:	4a44      	ldr	r2, [pc, #272]	; (8001e60 <HAL_ADC_MspInit+0x16c>)
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d56:	4b42      	ldr	r3, [pc, #264]	; (8001e60 <HAL_ADC_MspInit+0x16c>)
 8001d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	61fb      	str	r3, [r7, #28]
 8001d62:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PA7     ------> ADC1_INN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d64:	23c0      	movs	r3, #192	; 0xc0
 8001d66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d74:	4619      	mov	r1, r3
 8001d76:	483b      	ldr	r0, [pc, #236]	; (8001e64 <HAL_ADC_MspInit+0x170>)
 8001d78:	f001 fc9e 	bl	80036b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001d7c:	e067      	b.n	8001e4e <HAL_ADC_MspInit+0x15a>
  else if(hadc->Instance==ADC2)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a39      	ldr	r2, [pc, #228]	; (8001e68 <HAL_ADC_MspInit+0x174>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d133      	bne.n	8001df0 <HAL_ADC_MspInit+0xfc>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001d88:	4b34      	ldr	r3, [pc, #208]	; (8001e5c <HAL_ADC_MspInit+0x168>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	4a33      	ldr	r2, [pc, #204]	; (8001e5c <HAL_ADC_MspInit+0x168>)
 8001d90:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001d92:	4b32      	ldr	r3, [pc, #200]	; (8001e5c <HAL_ADC_MspInit+0x168>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d10e      	bne.n	8001db8 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001d9a:	4b31      	ldr	r3, [pc, #196]	; (8001e60 <HAL_ADC_MspInit+0x16c>)
 8001d9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001da0:	4a2f      	ldr	r2, [pc, #188]	; (8001e60 <HAL_ADC_MspInit+0x16c>)
 8001da2:	f043 0320 	orr.w	r3, r3, #32
 8001da6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001daa:	4b2d      	ldr	r3, [pc, #180]	; (8001e60 <HAL_ADC_MspInit+0x16c>)
 8001dac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001db0:	f003 0320 	and.w	r3, r3, #32
 8001db4:	61bb      	str	r3, [r7, #24]
 8001db6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001db8:	4b29      	ldr	r3, [pc, #164]	; (8001e60 <HAL_ADC_MspInit+0x16c>)
 8001dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dbe:	4a28      	ldr	r2, [pc, #160]	; (8001e60 <HAL_ADC_MspInit+0x16c>)
 8001dc0:	f043 0304 	orr.w	r3, r3, #4
 8001dc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dc8:	4b25      	ldr	r3, [pc, #148]	; (8001e60 <HAL_ADC_MspInit+0x16c>)
 8001dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dce:	f003 0304 	and.w	r3, r3, #4
 8001dd2:	617b      	str	r3, [r7, #20]
 8001dd4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001dd6:	2330      	movs	r3, #48	; 0x30
 8001dd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001de2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001de6:	4619      	mov	r1, r3
 8001de8:	4820      	ldr	r0, [pc, #128]	; (8001e6c <HAL_ADC_MspInit+0x178>)
 8001dea:	f001 fc65 	bl	80036b8 <HAL_GPIO_Init>
}
 8001dee:	e02e      	b.n	8001e4e <HAL_ADC_MspInit+0x15a>
  else if(hadc->Instance==ADC3)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a1e      	ldr	r2, [pc, #120]	; (8001e70 <HAL_ADC_MspInit+0x17c>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d129      	bne.n	8001e4e <HAL_ADC_MspInit+0x15a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001dfa:	4b19      	ldr	r3, [pc, #100]	; (8001e60 <HAL_ADC_MspInit+0x16c>)
 8001dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e00:	4a17      	ldr	r2, [pc, #92]	; (8001e60 <HAL_ADC_MspInit+0x16c>)
 8001e02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e0a:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <HAL_ADC_MspInit+0x16c>)
 8001e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e14:	613b      	str	r3, [r7, #16]
 8001e16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e18:	4b11      	ldr	r3, [pc, #68]	; (8001e60 <HAL_ADC_MspInit+0x16c>)
 8001e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e1e:	4a10      	ldr	r2, [pc, #64]	; (8001e60 <HAL_ADC_MspInit+0x16c>)
 8001e20:	f043 0304 	orr.w	r3, r3, #4
 8001e24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e28:	4b0d      	ldr	r3, [pc, #52]	; (8001e60 <HAL_ADC_MspInit+0x16c>)
 8001e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e2e:	f003 0304 	and.w	r3, r3, #4
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001e36:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001e3a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001e3e:	f000 fa87 	bl	8002350 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001e42:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001e46:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001e4a:	f000 fa81 	bl	8002350 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001e4e:	bf00      	nop
 8001e50:	3738      	adds	r7, #56	; 0x38
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40022000 	.word	0x40022000
 8001e5c:	2400f1ec 	.word	0x2400f1ec
 8001e60:	58024400 	.word	0x58024400
 8001e64:	58020000 	.word	0x58020000
 8001e68:	40022100 	.word	0x40022100
 8001e6c:	58020800 	.word	0x58020800
 8001e70:	58026000 	.word	0x58026000

08001e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e78:	e7fe      	b.n	8001e78 <NMI_Handler+0x4>

08001e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e7e:	e7fe      	b.n	8001e7e <HardFault_Handler+0x4>

08001e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e84:	e7fe      	b.n	8001e84 <MemManage_Handler+0x4>

08001e86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e86:	b480      	push	{r7}
 8001e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e8a:	e7fe      	b.n	8001e8a <BusFault_Handler+0x4>

08001e8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e90:	e7fe      	b.n	8001e90 <UsageFault_Handler+0x4>

08001e92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e92:	b480      	push	{r7}
 8001e94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ec0:	f000 f9f6 	bl	80022b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ec4:	bf00      	nop
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001ecc:	4802      	ldr	r0, [pc, #8]	; (8001ed8 <OTG_FS_IRQHandler+0x10>)
 8001ece:	f001 fefc 	bl	8003cca <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	240106d8 	.word	0x240106d8

08001edc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  return 1;
 8001ee0:	2301      	movs	r3, #1
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <_kill>:

int _kill(int pid, int sig)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ef6:	f00b fc69 	bl	800d7cc <__errno>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2216      	movs	r2, #22
 8001efe:	601a      	str	r2, [r3, #0]
  return -1;
 8001f00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <_exit>:

void _exit (int status)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f14:	f04f 31ff 	mov.w	r1, #4294967295
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7ff ffe7 	bl	8001eec <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f1e:	e7fe      	b.n	8001f1e <_exit+0x12>

08001f20 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]
 8001f30:	e00a      	b.n	8001f48 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f32:	f3af 8000 	nop.w
 8001f36:	4601      	mov	r1, r0
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	1c5a      	adds	r2, r3, #1
 8001f3c:	60ba      	str	r2, [r7, #8]
 8001f3e:	b2ca      	uxtb	r2, r1
 8001f40:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	3301      	adds	r3, #1
 8001f46:	617b      	str	r3, [r7, #20]
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	dbf0      	blt.n	8001f32 <_read+0x12>
  }

  return len;
 8001f50:	687b      	ldr	r3, [r7, #4]
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3718      	adds	r7, #24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b086      	sub	sp, #24
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	60f8      	str	r0, [r7, #12]
 8001f62:	60b9      	str	r1, [r7, #8]
 8001f64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f66:	2300      	movs	r3, #0
 8001f68:	617b      	str	r3, [r7, #20]
 8001f6a:	e009      	b.n	8001f80 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	1c5a      	adds	r2, r3, #1
 8001f70:	60ba      	str	r2, [r7, #8]
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	617b      	str	r3, [r7, #20]
 8001f80:	697a      	ldr	r2, [r7, #20]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	dbf1      	blt.n	8001f6c <_write+0x12>
  }
  return len;
 8001f88:	687b      	ldr	r3, [r7, #4]
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3718      	adds	r7, #24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <_close>:

int _close(int file)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b083      	sub	sp, #12
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
 8001fb2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fba:	605a      	str	r2, [r3, #4]
  return 0;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <_isatty>:

int _isatty(int file)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b083      	sub	sp, #12
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fd2:	2301      	movs	r3, #1
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3714      	adds	r7, #20
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
	...

08001ffc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002004:	4a14      	ldr	r2, [pc, #80]	; (8002058 <_sbrk+0x5c>)
 8002006:	4b15      	ldr	r3, [pc, #84]	; (800205c <_sbrk+0x60>)
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002010:	4b13      	ldr	r3, [pc, #76]	; (8002060 <_sbrk+0x64>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d102      	bne.n	800201e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002018:	4b11      	ldr	r3, [pc, #68]	; (8002060 <_sbrk+0x64>)
 800201a:	4a12      	ldr	r2, [pc, #72]	; (8002064 <_sbrk+0x68>)
 800201c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800201e:	4b10      	ldr	r3, [pc, #64]	; (8002060 <_sbrk+0x64>)
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4413      	add	r3, r2
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	429a      	cmp	r2, r3
 800202a:	d207      	bcs.n	800203c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800202c:	f00b fbce 	bl	800d7cc <__errno>
 8002030:	4603      	mov	r3, r0
 8002032:	220c      	movs	r2, #12
 8002034:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002036:	f04f 33ff 	mov.w	r3, #4294967295
 800203a:	e009      	b.n	8002050 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800203c:	4b08      	ldr	r3, [pc, #32]	; (8002060 <_sbrk+0x64>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002042:	4b07      	ldr	r3, [pc, #28]	; (8002060 <_sbrk+0x64>)
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4413      	add	r3, r2
 800204a:	4a05      	ldr	r2, [pc, #20]	; (8002060 <_sbrk+0x64>)
 800204c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800204e:	68fb      	ldr	r3, [r7, #12]
}
 8002050:	4618      	mov	r0, r3
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	24080000 	.word	0x24080000
 800205c:	00000400 	.word	0x00000400
 8002060:	2400f1f0 	.word	0x2400f1f0
 8002064:	24010f50 	.word	0x24010f50

08002068 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800206c:	4b37      	ldr	r3, [pc, #220]	; (800214c <SystemInit+0xe4>)
 800206e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002072:	4a36      	ldr	r2, [pc, #216]	; (800214c <SystemInit+0xe4>)
 8002074:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002078:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800207c:	4b34      	ldr	r3, [pc, #208]	; (8002150 <SystemInit+0xe8>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 030f 	and.w	r3, r3, #15
 8002084:	2b06      	cmp	r3, #6
 8002086:	d807      	bhi.n	8002098 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002088:	4b31      	ldr	r3, [pc, #196]	; (8002150 <SystemInit+0xe8>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f023 030f 	bic.w	r3, r3, #15
 8002090:	4a2f      	ldr	r2, [pc, #188]	; (8002150 <SystemInit+0xe8>)
 8002092:	f043 0307 	orr.w	r3, r3, #7
 8002096:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002098:	4b2e      	ldr	r3, [pc, #184]	; (8002154 <SystemInit+0xec>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a2d      	ldr	r2, [pc, #180]	; (8002154 <SystemInit+0xec>)
 800209e:	f043 0301 	orr.w	r3, r3, #1
 80020a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80020a4:	4b2b      	ldr	r3, [pc, #172]	; (8002154 <SystemInit+0xec>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80020aa:	4b2a      	ldr	r3, [pc, #168]	; (8002154 <SystemInit+0xec>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	4929      	ldr	r1, [pc, #164]	; (8002154 <SystemInit+0xec>)
 80020b0:	4b29      	ldr	r3, [pc, #164]	; (8002158 <SystemInit+0xf0>)
 80020b2:	4013      	ands	r3, r2
 80020b4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80020b6:	4b26      	ldr	r3, [pc, #152]	; (8002150 <SystemInit+0xe8>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0308 	and.w	r3, r3, #8
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d007      	beq.n	80020d2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80020c2:	4b23      	ldr	r3, [pc, #140]	; (8002150 <SystemInit+0xe8>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f023 030f 	bic.w	r3, r3, #15
 80020ca:	4a21      	ldr	r2, [pc, #132]	; (8002150 <SystemInit+0xe8>)
 80020cc:	f043 0307 	orr.w	r3, r3, #7
 80020d0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80020d2:	4b20      	ldr	r3, [pc, #128]	; (8002154 <SystemInit+0xec>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80020d8:	4b1e      	ldr	r3, [pc, #120]	; (8002154 <SystemInit+0xec>)
 80020da:	2200      	movs	r2, #0
 80020dc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80020de:	4b1d      	ldr	r3, [pc, #116]	; (8002154 <SystemInit+0xec>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80020e4:	4b1b      	ldr	r3, [pc, #108]	; (8002154 <SystemInit+0xec>)
 80020e6:	4a1d      	ldr	r2, [pc, #116]	; (800215c <SystemInit+0xf4>)
 80020e8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80020ea:	4b1a      	ldr	r3, [pc, #104]	; (8002154 <SystemInit+0xec>)
 80020ec:	4a1c      	ldr	r2, [pc, #112]	; (8002160 <SystemInit+0xf8>)
 80020ee:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80020f0:	4b18      	ldr	r3, [pc, #96]	; (8002154 <SystemInit+0xec>)
 80020f2:	4a1c      	ldr	r2, [pc, #112]	; (8002164 <SystemInit+0xfc>)
 80020f4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80020f6:	4b17      	ldr	r3, [pc, #92]	; (8002154 <SystemInit+0xec>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80020fc:	4b15      	ldr	r3, [pc, #84]	; (8002154 <SystemInit+0xec>)
 80020fe:	4a19      	ldr	r2, [pc, #100]	; (8002164 <SystemInit+0xfc>)
 8002100:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002102:	4b14      	ldr	r3, [pc, #80]	; (8002154 <SystemInit+0xec>)
 8002104:	2200      	movs	r2, #0
 8002106:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002108:	4b12      	ldr	r3, [pc, #72]	; (8002154 <SystemInit+0xec>)
 800210a:	4a16      	ldr	r2, [pc, #88]	; (8002164 <SystemInit+0xfc>)
 800210c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800210e:	4b11      	ldr	r3, [pc, #68]	; (8002154 <SystemInit+0xec>)
 8002110:	2200      	movs	r2, #0
 8002112:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002114:	4b0f      	ldr	r3, [pc, #60]	; (8002154 <SystemInit+0xec>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a0e      	ldr	r2, [pc, #56]	; (8002154 <SystemInit+0xec>)
 800211a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800211e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002120:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <SystemInit+0xec>)
 8002122:	2200      	movs	r2, #0
 8002124:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002126:	4b10      	ldr	r3, [pc, #64]	; (8002168 <SystemInit+0x100>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	4b10      	ldr	r3, [pc, #64]	; (800216c <SystemInit+0x104>)
 800212c:	4013      	ands	r3, r2
 800212e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002132:	d202      	bcs.n	800213a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002134:	4b0e      	ldr	r3, [pc, #56]	; (8002170 <SystemInit+0x108>)
 8002136:	2201      	movs	r2, #1
 8002138:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800213a:	4b0e      	ldr	r3, [pc, #56]	; (8002174 <SystemInit+0x10c>)
 800213c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002140:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002142:	bf00      	nop
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	e000ed00 	.word	0xe000ed00
 8002150:	52002000 	.word	0x52002000
 8002154:	58024400 	.word	0x58024400
 8002158:	eaf6ed7f 	.word	0xeaf6ed7f
 800215c:	02020200 	.word	0x02020200
 8002160:	01ff0000 	.word	0x01ff0000
 8002164:	01010280 	.word	0x01010280
 8002168:	5c001000 	.word	0x5c001000
 800216c:	ffff0000 	.word	0xffff0000
 8002170:	51008108 	.word	0x51008108
 8002174:	52004000 	.word	0x52004000

08002178 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002178:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800217c:	f7ff ff74 	bl	8002068 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002180:	480c      	ldr	r0, [pc, #48]	; (80021b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002182:	490d      	ldr	r1, [pc, #52]	; (80021b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002184:	4a0d      	ldr	r2, [pc, #52]	; (80021bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002186:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002188:	e002      	b.n	8002190 <LoopCopyDataInit>

0800218a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800218a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800218c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800218e:	3304      	adds	r3, #4

08002190 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002190:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002192:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002194:	d3f9      	bcc.n	800218a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002196:	4a0a      	ldr	r2, [pc, #40]	; (80021c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002198:	4c0a      	ldr	r4, [pc, #40]	; (80021c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800219a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800219c:	e001      	b.n	80021a2 <LoopFillZerobss>

0800219e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800219e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021a0:	3204      	adds	r2, #4

080021a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021a4:	d3fb      	bcc.n	800219e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021a6:	f00b fb17 	bl	800d7d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021aa:	f7ff facb 	bl	8001744 <main>
  bx  lr
 80021ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021b0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80021b4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80021b8:	2400030c 	.word	0x2400030c
  ldr r2, =_sidata
 80021bc:	0800fadc 	.word	0x0800fadc
  ldr r2, =_sbss
 80021c0:	24000310 	.word	0x24000310
  ldr r4, =_ebss
 80021c4:	24010f50 	.word	0x24010f50

080021c8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021c8:	e7fe      	b.n	80021c8 <ADC3_IRQHandler>
	...

080021cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021d2:	2003      	movs	r0, #3
 80021d4:	f001 fa30 	bl	8003638 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80021d8:	f003 fd32 	bl	8005c40 <HAL_RCC_GetSysClockFreq>
 80021dc:	4602      	mov	r2, r0
 80021de:	4b15      	ldr	r3, [pc, #84]	; (8002234 <HAL_Init+0x68>)
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	0a1b      	lsrs	r3, r3, #8
 80021e4:	f003 030f 	and.w	r3, r3, #15
 80021e8:	4913      	ldr	r1, [pc, #76]	; (8002238 <HAL_Init+0x6c>)
 80021ea:	5ccb      	ldrb	r3, [r1, r3]
 80021ec:	f003 031f 	and.w	r3, r3, #31
 80021f0:	fa22 f303 	lsr.w	r3, r2, r3
 80021f4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80021f6:	4b0f      	ldr	r3, [pc, #60]	; (8002234 <HAL_Init+0x68>)
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	f003 030f 	and.w	r3, r3, #15
 80021fe:	4a0e      	ldr	r2, [pc, #56]	; (8002238 <HAL_Init+0x6c>)
 8002200:	5cd3      	ldrb	r3, [r2, r3]
 8002202:	f003 031f 	and.w	r3, r3, #31
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	fa22 f303 	lsr.w	r3, r2, r3
 800220c:	4a0b      	ldr	r2, [pc, #44]	; (800223c <HAL_Init+0x70>)
 800220e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002210:	4a0b      	ldr	r2, [pc, #44]	; (8002240 <HAL_Init+0x74>)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002216:	200f      	movs	r0, #15
 8002218:	f000 f814 	bl	8002244 <HAL_InitTick>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e002      	b.n	800222c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002226:	f7ff fd4b 	bl	8001cc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	58024400 	.word	0x58024400
 8002238:	0800f750 	.word	0x0800f750
 800223c:	24000044 	.word	0x24000044
 8002240:	24000040 	.word	0x24000040

08002244 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800224c:	4b15      	ldr	r3, [pc, #84]	; (80022a4 <HAL_InitTick+0x60>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d101      	bne.n	8002258 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e021      	b.n	800229c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002258:	4b13      	ldr	r3, [pc, #76]	; (80022a8 <HAL_InitTick+0x64>)
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	4b11      	ldr	r3, [pc, #68]	; (80022a4 <HAL_InitTick+0x60>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	4619      	mov	r1, r3
 8002262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002266:	fbb3 f3f1 	udiv	r3, r3, r1
 800226a:	fbb2 f3f3 	udiv	r3, r2, r3
 800226e:	4618      	mov	r0, r3
 8002270:	f001 fa15 	bl	800369e <HAL_SYSTICK_Config>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e00e      	b.n	800229c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b0f      	cmp	r3, #15
 8002282:	d80a      	bhi.n	800229a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002284:	2200      	movs	r2, #0
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	f04f 30ff 	mov.w	r0, #4294967295
 800228c:	f001 f9df 	bl	800364e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002290:	4a06      	ldr	r2, [pc, #24]	; (80022ac <HAL_InitTick+0x68>)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002296:	2300      	movs	r3, #0
 8002298:	e000      	b.n	800229c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
}
 800229c:	4618      	mov	r0, r3
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	2400004c 	.word	0x2400004c
 80022a8:	24000040 	.word	0x24000040
 80022ac:	24000048 	.word	0x24000048

080022b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022b4:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <HAL_IncTick+0x20>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	461a      	mov	r2, r3
 80022ba:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <HAL_IncTick+0x24>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4413      	add	r3, r2
 80022c0:	4a04      	ldr	r2, [pc, #16]	; (80022d4 <HAL_IncTick+0x24>)
 80022c2:	6013      	str	r3, [r2, #0]
}
 80022c4:	bf00      	nop
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	2400004c 	.word	0x2400004c
 80022d4:	2400f1f4 	.word	0x2400f1f4

080022d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  return uwTick;
 80022dc:	4b03      	ldr	r3, [pc, #12]	; (80022ec <HAL_GetTick+0x14>)
 80022de:	681b      	ldr	r3, [r3, #0]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	2400f1f4 	.word	0x2400f1f4

080022f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022f8:	f7ff ffee 	bl	80022d8 <HAL_GetTick>
 80022fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002308:	d005      	beq.n	8002316 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800230a:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <HAL_Delay+0x44>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	461a      	mov	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	4413      	add	r3, r2
 8002314:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002316:	bf00      	nop
 8002318:	f7ff ffde 	bl	80022d8 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	429a      	cmp	r2, r3
 8002326:	d8f7      	bhi.n	8002318 <HAL_Delay+0x28>
  {
  }
}
 8002328:	bf00      	nop
 800232a:	bf00      	nop
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	2400004c 	.word	0x2400004c

08002338 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800233c:	4b03      	ldr	r3, [pc, #12]	; (800234c <HAL_GetREVID+0x14>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	0c1b      	lsrs	r3, r3, #16
}
 8002342:	4618      	mov	r0, r3
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	5c001000 	.word	0x5c001000

08002350 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800235a:	4b07      	ldr	r3, [pc, #28]	; (8002378 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800235c:	685a      	ldr	r2, [r3, #4]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	43db      	mvns	r3, r3
 8002362:	401a      	ands	r2, r3
 8002364:	4904      	ldr	r1, [pc, #16]	; (8002378 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	4313      	orrs	r3, r2
 800236a:	604b      	str	r3, [r1, #4]
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	58000400 	.word	0x58000400

0800237c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	431a      	orrs	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	609a      	str	r2, [r3, #8]
}
 8002396:	bf00      	nop
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr

080023a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80023a2:	b480      	push	{r7}
 80023a4:	b083      	sub	sp, #12
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
 80023aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	431a      	orrs	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	609a      	str	r2, [r3, #8]
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80023d8:	4618      	mov	r0, r3
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b087      	sub	sp, #28
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
 80023f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	3360      	adds	r3, #96	; 0x60
 80023f6:	461a      	mov	r2, r3
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	4413      	add	r3, r2
 80023fe:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	430b      	orrs	r3, r1
 8002412:	431a      	orrs	r2, r3
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002418:	bf00      	nop
 800241a:	371c      	adds	r7, #28
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	f003 031f 	and.w	r3, r3, #31
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	fa01 f303 	lsl.w	r3, r1, r3
 8002444:	431a      	orrs	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	611a      	str	r2, [r3, #16]
}
 800244a:	bf00      	nop
 800244c:	3714      	adds	r7, #20
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002456:	b480      	push	{r7}
 8002458:	b087      	sub	sp, #28
 800245a:	af00      	add	r7, sp, #0
 800245c:	60f8      	str	r0, [r7, #12]
 800245e:	60b9      	str	r1, [r7, #8]
 8002460:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	3360      	adds	r3, #96	; 0x60
 8002466:	461a      	mov	r2, r3
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	431a      	orrs	r2, r3
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	601a      	str	r2, [r3, #0]
  }
}
 8002480:	bf00      	nop
 8002482:	371c      	adds	r7, #28
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800248c:	b480      	push	{r7}
 800248e:	b087      	sub	sp, #28
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	3330      	adds	r3, #48	; 0x30
 800249c:	461a      	mov	r2, r3
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	0a1b      	lsrs	r3, r3, #8
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	f003 030c 	and.w	r3, r3, #12
 80024a8:	4413      	add	r3, r2
 80024aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	f003 031f 	and.w	r3, r3, #31
 80024b6:	211f      	movs	r1, #31
 80024b8:	fa01 f303 	lsl.w	r3, r1, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	401a      	ands	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	0e9b      	lsrs	r3, r3, #26
 80024c4:	f003 011f 	and.w	r1, r3, #31
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	f003 031f 	and.w	r3, r3, #31
 80024ce:	fa01 f303 	lsl.w	r3, r1, r3
 80024d2:	431a      	orrs	r2, r3
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80024d8:	bf00      	nop
 80024da:	371c      	adds	r7, #28
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b087      	sub	sp, #28
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	3314      	adds	r3, #20
 80024f4:	461a      	mov	r2, r3
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	0e5b      	lsrs	r3, r3, #25
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	4413      	add	r3, r2
 8002502:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	0d1b      	lsrs	r3, r3, #20
 800250c:	f003 031f 	and.w	r3, r3, #31
 8002510:	2107      	movs	r1, #7
 8002512:	fa01 f303 	lsl.w	r3, r1, r3
 8002516:	43db      	mvns	r3, r3
 8002518:	401a      	ands	r2, r3
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	0d1b      	lsrs	r3, r3, #20
 800251e:	f003 031f 	and.w	r3, r3, #31
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	fa01 f303 	lsl.w	r3, r1, r3
 8002528:	431a      	orrs	r2, r3
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800252e:	bf00      	nop
 8002530:	371c      	adds	r7, #28
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
	...

0800253c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002554:	43db      	mvns	r3, r3
 8002556:	401a      	ands	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f003 0318 	and.w	r3, r3, #24
 800255e:	4908      	ldr	r1, [pc, #32]	; (8002580 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002560:	40d9      	lsrs	r1, r3
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	400b      	ands	r3, r1
 8002566:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800256a:	431a      	orrs	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002572:	bf00      	nop
 8002574:	3714      	adds	r7, #20
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	000fffff 	.word	0x000fffff

08002584 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	4b04      	ldr	r3, [pc, #16]	; (80025a4 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002592:	4013      	ands	r3, r2
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	6093      	str	r3, [r2, #8]
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	5fffffc0 	.word	0x5fffffc0

080025a8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025bc:	d101      	bne.n	80025c2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80025be:	2301      	movs	r3, #1
 80025c0:	e000      	b.n	80025c4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <LL_ADC_EnableInternalRegulator+0x24>)
 80025de:	4013      	ands	r3, r2
 80025e0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	6fffffc0 	.word	0x6fffffc0

080025f8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002608:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800260c:	d101      	bne.n	8002612 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800260e:	2301      	movs	r3, #1
 8002610:	e000      	b.n	8002614 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	2b01      	cmp	r3, #1
 8002632:	d101      	bne.n	8002638 <LL_ADC_IsEnabled+0x18>
 8002634:	2301      	movs	r3, #1
 8002636:	e000      	b.n	800263a <LL_ADC_IsEnabled+0x1a>
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002646:	b480      	push	{r7}
 8002648:	b083      	sub	sp, #12
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 0304 	and.w	r3, r3, #4
 8002656:	2b04      	cmp	r3, #4
 8002658:	d101      	bne.n	800265e <LL_ADC_REG_IsConversionOngoing+0x18>
 800265a:	2301      	movs	r3, #1
 800265c:	e000      	b.n	8002660 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f003 0308 	and.w	r3, r3, #8
 800267c:	2b08      	cmp	r3, #8
 800267e:	d101      	bne.n	8002684 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002680:	2301      	movs	r3, #1
 8002682:	e000      	b.n	8002686 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
	...

08002694 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002694:	b590      	push	{r4, r7, lr}
 8002696:	b089      	sub	sp, #36	; 0x24
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800269c:	2300      	movs	r3, #0
 800269e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80026a0:	2300      	movs	r3, #0
 80026a2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e18f      	b.n	80029ce <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d109      	bne.n	80026d0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f7ff fb19 	bl	8001cf4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff ff67 	bl	80025a8 <LL_ADC_IsDeepPowerDownEnabled>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d004      	beq.n	80026ea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff ff4d 	bl	8002584 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff ff82 	bl	80025f8 <LL_ADC_IsInternalRegulatorEnabled>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d114      	bne.n	8002724 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff ff66 	bl	80025d0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002704:	4b87      	ldr	r3, [pc, #540]	; (8002924 <HAL_ADC_Init+0x290>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	099b      	lsrs	r3, r3, #6
 800270a:	4a87      	ldr	r2, [pc, #540]	; (8002928 <HAL_ADC_Init+0x294>)
 800270c:	fba2 2303 	umull	r2, r3, r2, r3
 8002710:	099b      	lsrs	r3, r3, #6
 8002712:	3301      	adds	r3, #1
 8002714:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002716:	e002      	b.n	800271e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	3b01      	subs	r3, #1
 800271c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1f9      	bne.n	8002718 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff ff65 	bl	80025f8 <LL_ADC_IsInternalRegulatorEnabled>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d10d      	bne.n	8002750 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002738:	f043 0210 	orr.w	r2, r3, #16
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002744:	f043 0201 	orr.w	r2, r3, #1
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff ff76 	bl	8002646 <LL_ADC_REG_IsConversionOngoing>
 800275a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002760:	f003 0310 	and.w	r3, r3, #16
 8002764:	2b00      	cmp	r3, #0
 8002766:	f040 8129 	bne.w	80029bc <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	2b00      	cmp	r3, #0
 800276e:	f040 8125 	bne.w	80029bc <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002776:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800277a:	f043 0202 	orr.w	r2, r3, #2
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4618      	mov	r0, r3
 8002788:	f7ff ff4a 	bl	8002620 <LL_ADC_IsEnabled>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d136      	bne.n	8002800 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a65      	ldr	r2, [pc, #404]	; (800292c <HAL_ADC_Init+0x298>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d004      	beq.n	80027a6 <HAL_ADC_Init+0x112>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a63      	ldr	r2, [pc, #396]	; (8002930 <HAL_ADC_Init+0x29c>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d10e      	bne.n	80027c4 <HAL_ADC_Init+0x130>
 80027a6:	4861      	ldr	r0, [pc, #388]	; (800292c <HAL_ADC_Init+0x298>)
 80027a8:	f7ff ff3a 	bl	8002620 <LL_ADC_IsEnabled>
 80027ac:	4604      	mov	r4, r0
 80027ae:	4860      	ldr	r0, [pc, #384]	; (8002930 <HAL_ADC_Init+0x29c>)
 80027b0:	f7ff ff36 	bl	8002620 <LL_ADC_IsEnabled>
 80027b4:	4603      	mov	r3, r0
 80027b6:	4323      	orrs	r3, r4
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	bf0c      	ite	eq
 80027bc:	2301      	moveq	r3, #1
 80027be:	2300      	movne	r3, #0
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	e008      	b.n	80027d6 <HAL_ADC_Init+0x142>
 80027c4:	485b      	ldr	r0, [pc, #364]	; (8002934 <HAL_ADC_Init+0x2a0>)
 80027c6:	f7ff ff2b 	bl	8002620 <LL_ADC_IsEnabled>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	bf0c      	ite	eq
 80027d0:	2301      	moveq	r3, #1
 80027d2:	2300      	movne	r3, #0
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d012      	beq.n	8002800 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a53      	ldr	r2, [pc, #332]	; (800292c <HAL_ADC_Init+0x298>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d004      	beq.n	80027ee <HAL_ADC_Init+0x15a>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a51      	ldr	r2, [pc, #324]	; (8002930 <HAL_ADC_Init+0x29c>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d101      	bne.n	80027f2 <HAL_ADC_Init+0x15e>
 80027ee:	4a52      	ldr	r2, [pc, #328]	; (8002938 <HAL_ADC_Init+0x2a4>)
 80027f0:	e000      	b.n	80027f4 <HAL_ADC_Init+0x160>
 80027f2:	4a52      	ldr	r2, [pc, #328]	; (800293c <HAL_ADC_Init+0x2a8>)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	4619      	mov	r1, r3
 80027fa:	4610      	mov	r0, r2
 80027fc:	f7ff fdbe 	bl	800237c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002800:	f7ff fd9a 	bl	8002338 <HAL_GetREVID>
 8002804:	4603      	mov	r3, r0
 8002806:	f241 0203 	movw	r2, #4099	; 0x1003
 800280a:	4293      	cmp	r3, r2
 800280c:	d914      	bls.n	8002838 <HAL_ADC_Init+0x1a4>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	2b10      	cmp	r3, #16
 8002814:	d110      	bne.n	8002838 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	7d5b      	ldrb	r3, [r3, #21]
 800281a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002820:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002826:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	7f1b      	ldrb	r3, [r3, #28]
 800282c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800282e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002830:	f043 030c 	orr.w	r3, r3, #12
 8002834:	61bb      	str	r3, [r7, #24]
 8002836:	e00d      	b.n	8002854 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	7d5b      	ldrb	r3, [r3, #21]
 800283c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002842:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002848:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	7f1b      	ldrb	r3, [r3, #28]
 800284e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002850:	4313      	orrs	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	7f1b      	ldrb	r3, [r3, #28]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d106      	bne.n	800286a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	3b01      	subs	r3, #1
 8002862:	045b      	lsls	r3, r3, #17
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	4313      	orrs	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	2b00      	cmp	r3, #0
 8002870:	d009      	beq.n	8002886 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002876:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4313      	orrs	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68da      	ldr	r2, [r3, #12]
 800288c:	4b2c      	ldr	r3, [pc, #176]	; (8002940 <HAL_ADC_Init+0x2ac>)
 800288e:	4013      	ands	r3, r2
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	6812      	ldr	r2, [r2, #0]
 8002894:	69b9      	ldr	r1, [r7, #24]
 8002896:	430b      	orrs	r3, r1
 8002898:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff fed1 	bl	8002646 <LL_ADC_REG_IsConversionOngoing>
 80028a4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff fede 	bl	800266c <LL_ADC_INJ_IsConversionOngoing>
 80028b0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d15f      	bne.n	8002978 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d15c      	bne.n	8002978 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	7d1b      	ldrb	r3, [r3, #20]
 80028c2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80028c8:	4313      	orrs	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68da      	ldr	r2, [r3, #12]
 80028d2:	4b1c      	ldr	r3, [pc, #112]	; (8002944 <HAL_ADC_Init+0x2b0>)
 80028d4:	4013      	ands	r3, r2
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	6812      	ldr	r2, [r2, #0]
 80028da:	69b9      	ldr	r1, [r7, #24]
 80028dc:	430b      	orrs	r3, r1
 80028de:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d130      	bne.n	800294c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ee:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	691a      	ldr	r2, [r3, #16]
 80028f6:	4b14      	ldr	r3, [pc, #80]	; (8002948 <HAL_ADC_Init+0x2b4>)
 80028f8:	4013      	ands	r3, r2
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028fe:	3a01      	subs	r2, #1
 8002900:	0411      	lsls	r1, r2, #16
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002906:	4311      	orrs	r1, r2
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800290c:	4311      	orrs	r1, r2
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002912:	430a      	orrs	r2, r1
 8002914:	431a      	orrs	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f042 0201 	orr.w	r2, r2, #1
 800291e:	611a      	str	r2, [r3, #16]
 8002920:	e01c      	b.n	800295c <HAL_ADC_Init+0x2c8>
 8002922:	bf00      	nop
 8002924:	24000040 	.word	0x24000040
 8002928:	053e2d63 	.word	0x053e2d63
 800292c:	40022000 	.word	0x40022000
 8002930:	40022100 	.word	0x40022100
 8002934:	58026000 	.word	0x58026000
 8002938:	40022300 	.word	0x40022300
 800293c:	58026300 	.word	0x58026300
 8002940:	fff0c003 	.word	0xfff0c003
 8002944:	ffffbffc 	.word	0xffffbffc
 8002948:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	691a      	ldr	r2, [r3, #16]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 0201 	bic.w	r2, r2, #1
 800295a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	430a      	orrs	r2, r1
 8002970:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 fb80 	bl	8003078 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d10c      	bne.n	800299a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	f023 010f 	bic.w	r1, r3, #15
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	1e5a      	subs	r2, r3, #1
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	430a      	orrs	r2, r1
 8002996:	631a      	str	r2, [r3, #48]	; 0x30
 8002998:	e007      	b.n	80029aa <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 020f 	bic.w	r2, r2, #15
 80029a8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ae:	f023 0303 	bic.w	r3, r3, #3
 80029b2:	f043 0201 	orr.w	r2, r3, #1
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	655a      	str	r2, [r3, #84]	; 0x54
 80029ba:	e007      	b.n	80029cc <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c0:	f043 0210 	orr.w	r2, r3, #16
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80029cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3724      	adds	r7, #36	; 0x24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd90      	pop	{r4, r7, pc}
 80029d6:	bf00      	nop

080029d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80029d8:	b590      	push	{r4, r7, lr}
 80029da:	b0a1      	sub	sp, #132	; 0x84
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029e2:	2300      	movs	r3, #0
 80029e4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80029e8:	2300      	movs	r3, #0
 80029ea:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	4a9d      	ldr	r2, [pc, #628]	; (8002c68 <HAL_ADC_ConfigChannel+0x290>)
 80029f2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d101      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0x2a>
 80029fe:	2302      	movs	r3, #2
 8002a00:	e321      	b.n	8003046 <HAL_ADC_ConfigChannel+0x66e>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff fe19 	bl	8002646 <LL_ADC_REG_IsConversionOngoing>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f040 8306 	bne.w	8003028 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d108      	bne.n	8002a3a <HAL_ADC_ConfigChannel+0x62>
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	0e9b      	lsrs	r3, r3, #26
 8002a2e:	f003 031f 	and.w	r3, r3, #31
 8002a32:	2201      	movs	r2, #1
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	e016      	b.n	8002a68 <HAL_ADC_ConfigChannel+0x90>
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a42:	fa93 f3a3 	rbit	r3, r3
 8002a46:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a4a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002a4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002a52:	2320      	movs	r3, #32
 8002a54:	e003      	b.n	8002a5e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002a56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a58:	fab3 f383 	clz	r3, r3
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	f003 031f 	and.w	r3, r3, #31
 8002a62:	2201      	movs	r2, #1
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6812      	ldr	r2, [r2, #0]
 8002a6c:	69d1      	ldr	r1, [r2, #28]
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	6812      	ldr	r2, [r2, #0]
 8002a72:	430b      	orrs	r3, r1
 8002a74:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6818      	ldr	r0, [r3, #0]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	6859      	ldr	r1, [r3, #4]
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	461a      	mov	r2, r3
 8002a84:	f7ff fd02 	bl	800248c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff fdda 	bl	8002646 <LL_ADC_REG_IsConversionOngoing>
 8002a92:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff fde7 	bl	800266c <LL_ADC_INJ_IsConversionOngoing>
 8002a9e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002aa0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f040 80b3 	bne.w	8002c0e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002aa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f040 80af 	bne.w	8002c0e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6818      	ldr	r0, [r3, #0]
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	6819      	ldr	r1, [r3, #0]
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	461a      	mov	r2, r3
 8002abe:	f7ff fd11 	bl	80024e4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002ac2:	4b6a      	ldr	r3, [pc, #424]	; (8002c6c <HAL_ADC_ConfigChannel+0x294>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002aca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ace:	d10b      	bne.n	8002ae8 <HAL_ADC_ConfigChannel+0x110>
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	695a      	ldr	r2, [r3, #20]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	089b      	lsrs	r3, r3, #2
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	e01d      	b.n	8002b24 <HAL_ADC_ConfigChannel+0x14c>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	f003 0310 	and.w	r3, r3, #16
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10b      	bne.n	8002b0e <HAL_ADC_ConfigChannel+0x136>
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	695a      	ldr	r2, [r3, #20]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	089b      	lsrs	r3, r3, #2
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	e00a      	b.n	8002b24 <HAL_ADC_ConfigChannel+0x14c>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	695a      	ldr	r2, [r3, #20]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	089b      	lsrs	r3, r3, #2
 8002b1a:	f003 0304 	and.w	r3, r3, #4
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d027      	beq.n	8002b7e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6818      	ldr	r0, [r3, #0]
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	6919      	ldr	r1, [r3, #16]
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b3c:	f7ff fc52 	bl	80023e4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6818      	ldr	r0, [r3, #0]
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	6919      	ldr	r1, [r3, #16]
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	7e5b      	ldrb	r3, [r3, #25]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d102      	bne.n	8002b56 <HAL_ADC_ConfigChannel+0x17e>
 8002b50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002b54:	e000      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x180>
 8002b56:	2300      	movs	r3, #0
 8002b58:	461a      	mov	r2, r3
 8002b5a:	f7ff fc7c 	bl	8002456 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6818      	ldr	r0, [r3, #0]
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	6919      	ldr	r1, [r3, #16]
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	7e1b      	ldrb	r3, [r3, #24]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d102      	bne.n	8002b74 <HAL_ADC_ConfigChannel+0x19c>
 8002b6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b72:	e000      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x19e>
 8002b74:	2300      	movs	r3, #0
 8002b76:	461a      	mov	r2, r3
 8002b78:	f7ff fc54 	bl	8002424 <LL_ADC_SetDataRightShift>
 8002b7c:	e047      	b.n	8002c0e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b84:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	069b      	lsls	r3, r3, #26
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d107      	bne.n	8002ba2 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ba0:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ba8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	069b      	lsls	r3, r3, #26
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d107      	bne.n	8002bc6 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002bc4:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bcc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	069b      	lsls	r3, r3, #26
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d107      	bne.n	8002bea <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002be8:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bf0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	069b      	lsls	r3, r3, #26
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d107      	bne.n	8002c0e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c0c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff fd04 	bl	8002620 <LL_ADC_IsEnabled>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f040 820d 	bne.w	800303a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6818      	ldr	r0, [r3, #0]
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	6819      	ldr	r1, [r3, #0]
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	f7ff fc85 	bl	800253c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	4a0c      	ldr	r2, [pc, #48]	; (8002c68 <HAL_ADC_ConfigChannel+0x290>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	f040 8133 	bne.w	8002ea4 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d110      	bne.n	8002c70 <HAL_ADC_ConfigChannel+0x298>
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	0e9b      	lsrs	r3, r3, #26
 8002c54:	3301      	adds	r3, #1
 8002c56:	f003 031f 	and.w	r3, r3, #31
 8002c5a:	2b09      	cmp	r3, #9
 8002c5c:	bf94      	ite	ls
 8002c5e:	2301      	movls	r3, #1
 8002c60:	2300      	movhi	r3, #0
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	e01e      	b.n	8002ca4 <HAL_ADC_ConfigChannel+0x2cc>
 8002c66:	bf00      	nop
 8002c68:	47ff0000 	.word	0x47ff0000
 8002c6c:	5c001000 	.word	0x5c001000
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c78:	fa93 f3a3 	rbit	r3, r3
 8002c7c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002c7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c80:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002c82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d101      	bne.n	8002c8c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002c88:	2320      	movs	r3, #32
 8002c8a:	e003      	b.n	8002c94 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002c8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c8e:	fab3 f383 	clz	r3, r3
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	3301      	adds	r3, #1
 8002c96:	f003 031f 	and.w	r3, r3, #31
 8002c9a:	2b09      	cmp	r3, #9
 8002c9c:	bf94      	ite	ls
 8002c9e:	2301      	movls	r3, #1
 8002ca0:	2300      	movhi	r3, #0
 8002ca2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d079      	beq.n	8002d9c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d107      	bne.n	8002cc4 <HAL_ADC_ConfigChannel+0x2ec>
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	0e9b      	lsrs	r3, r3, #26
 8002cba:	3301      	adds	r3, #1
 8002cbc:	069b      	lsls	r3, r3, #26
 8002cbe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cc2:	e015      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0x318>
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ccc:	fa93 f3a3 	rbit	r3, r3
 8002cd0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002cd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cd4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002cd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002cdc:	2320      	movs	r3, #32
 8002cde:	e003      	b.n	8002ce8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002ce0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ce2:	fab3 f383 	clz	r3, r3
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	3301      	adds	r3, #1
 8002cea:	069b      	lsls	r3, r3, #26
 8002cec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d109      	bne.n	8002d10 <HAL_ADC_ConfigChannel+0x338>
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	0e9b      	lsrs	r3, r3, #26
 8002d02:	3301      	adds	r3, #1
 8002d04:	f003 031f 	and.w	r3, r3, #31
 8002d08:	2101      	movs	r1, #1
 8002d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0e:	e017      	b.n	8002d40 <HAL_ADC_ConfigChannel+0x368>
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d18:	fa93 f3a3 	rbit	r3, r3
 8002d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d20:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002d22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d101      	bne.n	8002d2c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002d28:	2320      	movs	r3, #32
 8002d2a:	e003      	b.n	8002d34 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002d2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d2e:	fab3 f383 	clz	r3, r3
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	3301      	adds	r3, #1
 8002d36:	f003 031f 	and.w	r3, r3, #31
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d40:	ea42 0103 	orr.w	r1, r2, r3
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d10a      	bne.n	8002d66 <HAL_ADC_ConfigChannel+0x38e>
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	0e9b      	lsrs	r3, r3, #26
 8002d56:	3301      	adds	r3, #1
 8002d58:	f003 021f 	and.w	r2, r3, #31
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	4413      	add	r3, r2
 8002d62:	051b      	lsls	r3, r3, #20
 8002d64:	e018      	b.n	8002d98 <HAL_ADC_ConfigChannel+0x3c0>
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d6e:	fa93 f3a3 	rbit	r3, r3
 8002d72:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d76:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002d7e:	2320      	movs	r3, #32
 8002d80:	e003      	b.n	8002d8a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8002d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d84:	fab3 f383 	clz	r3, r3
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	f003 021f 	and.w	r2, r3, #31
 8002d90:	4613      	mov	r3, r2
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	4413      	add	r3, r2
 8002d96:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d98:	430b      	orrs	r3, r1
 8002d9a:	e07e      	b.n	8002e9a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d107      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x3e0>
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	0e9b      	lsrs	r3, r3, #26
 8002dae:	3301      	adds	r3, #1
 8002db0:	069b      	lsls	r3, r3, #26
 8002db2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002db6:	e015      	b.n	8002de4 <HAL_ADC_ConfigChannel+0x40c>
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc0:	fa93 f3a3 	rbit	r3, r3
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d101      	bne.n	8002dd4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002dd0:	2320      	movs	r3, #32
 8002dd2:	e003      	b.n	8002ddc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd6:	fab3 f383 	clz	r3, r3
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	3301      	adds	r3, #1
 8002dde:	069b      	lsls	r3, r3, #26
 8002de0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d109      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x42c>
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	0e9b      	lsrs	r3, r3, #26
 8002df6:	3301      	adds	r3, #1
 8002df8:	f003 031f 	and.w	r3, r3, #31
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002e02:	e017      	b.n	8002e34 <HAL_ADC_ConfigChannel+0x45c>
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	fa93 f3a3 	rbit	r3, r3
 8002e10:	61bb      	str	r3, [r7, #24]
  return result;
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002e16:	6a3b      	ldr	r3, [r7, #32]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d101      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002e1c:	2320      	movs	r3, #32
 8002e1e:	e003      	b.n	8002e28 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8002e20:	6a3b      	ldr	r3, [r7, #32]
 8002e22:	fab3 f383 	clz	r3, r3
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	3301      	adds	r3, #1
 8002e2a:	f003 031f 	and.w	r3, r3, #31
 8002e2e:	2101      	movs	r1, #1
 8002e30:	fa01 f303 	lsl.w	r3, r1, r3
 8002e34:	ea42 0103 	orr.w	r1, r2, r3
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d10d      	bne.n	8002e60 <HAL_ADC_ConfigChannel+0x488>
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	0e9b      	lsrs	r3, r3, #26
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	f003 021f 	and.w	r2, r3, #31
 8002e50:	4613      	mov	r3, r2
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	4413      	add	r3, r2
 8002e56:	3b1e      	subs	r3, #30
 8002e58:	051b      	lsls	r3, r3, #20
 8002e5a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e5e:	e01b      	b.n	8002e98 <HAL_ADC_ConfigChannel+0x4c0>
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	fa93 f3a3 	rbit	r3, r3
 8002e6c:	60fb      	str	r3, [r7, #12]
  return result;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002e78:	2320      	movs	r3, #32
 8002e7a:	e003      	b.n	8002e84 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	fab3 f383 	clz	r3, r3
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	3301      	adds	r3, #1
 8002e86:	f003 021f 	and.w	r2, r3, #31
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	4413      	add	r3, r2
 8002e90:	3b1e      	subs	r3, #30
 8002e92:	051b      	lsls	r3, r3, #20
 8002e94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e98:	430b      	orrs	r3, r1
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	6892      	ldr	r2, [r2, #8]
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	f7ff fb20 	bl	80024e4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f280 80c6 	bge.w	800303a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a67      	ldr	r2, [pc, #412]	; (8003050 <HAL_ADC_ConfigChannel+0x678>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d004      	beq.n	8002ec2 <HAL_ADC_ConfigChannel+0x4ea>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a65      	ldr	r2, [pc, #404]	; (8003054 <HAL_ADC_ConfigChannel+0x67c>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d101      	bne.n	8002ec6 <HAL_ADC_ConfigChannel+0x4ee>
 8002ec2:	4b65      	ldr	r3, [pc, #404]	; (8003058 <HAL_ADC_ConfigChannel+0x680>)
 8002ec4:	e000      	b.n	8002ec8 <HAL_ADC_ConfigChannel+0x4f0>
 8002ec6:	4b65      	ldr	r3, [pc, #404]	; (800305c <HAL_ADC_ConfigChannel+0x684>)
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff fa7d 	bl	80023c8 <LL_ADC_GetCommonPathInternalCh>
 8002ece:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a5e      	ldr	r2, [pc, #376]	; (8003050 <HAL_ADC_ConfigChannel+0x678>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d004      	beq.n	8002ee4 <HAL_ADC_ConfigChannel+0x50c>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a5d      	ldr	r2, [pc, #372]	; (8003054 <HAL_ADC_ConfigChannel+0x67c>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d10e      	bne.n	8002f02 <HAL_ADC_ConfigChannel+0x52a>
 8002ee4:	485a      	ldr	r0, [pc, #360]	; (8003050 <HAL_ADC_ConfigChannel+0x678>)
 8002ee6:	f7ff fb9b 	bl	8002620 <LL_ADC_IsEnabled>
 8002eea:	4604      	mov	r4, r0
 8002eec:	4859      	ldr	r0, [pc, #356]	; (8003054 <HAL_ADC_ConfigChannel+0x67c>)
 8002eee:	f7ff fb97 	bl	8002620 <LL_ADC_IsEnabled>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	4323      	orrs	r3, r4
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	bf0c      	ite	eq
 8002efa:	2301      	moveq	r3, #1
 8002efc:	2300      	movne	r3, #0
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	e008      	b.n	8002f14 <HAL_ADC_ConfigChannel+0x53c>
 8002f02:	4857      	ldr	r0, [pc, #348]	; (8003060 <HAL_ADC_ConfigChannel+0x688>)
 8002f04:	f7ff fb8c 	bl	8002620 <LL_ADC_IsEnabled>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	bf0c      	ite	eq
 8002f0e:	2301      	moveq	r3, #1
 8002f10:	2300      	movne	r3, #0
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d07d      	beq.n	8003014 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a51      	ldr	r2, [pc, #324]	; (8003064 <HAL_ADC_ConfigChannel+0x68c>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d130      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x5ac>
 8002f22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d12b      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a4b      	ldr	r2, [pc, #300]	; (8003060 <HAL_ADC_ConfigChannel+0x688>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	f040 8081 	bne.w	800303a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a44      	ldr	r2, [pc, #272]	; (8003050 <HAL_ADC_ConfigChannel+0x678>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d004      	beq.n	8002f4c <HAL_ADC_ConfigChannel+0x574>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a43      	ldr	r2, [pc, #268]	; (8003054 <HAL_ADC_ConfigChannel+0x67c>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d101      	bne.n	8002f50 <HAL_ADC_ConfigChannel+0x578>
 8002f4c:	4a42      	ldr	r2, [pc, #264]	; (8003058 <HAL_ADC_ConfigChannel+0x680>)
 8002f4e:	e000      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x57a>
 8002f50:	4a42      	ldr	r2, [pc, #264]	; (800305c <HAL_ADC_ConfigChannel+0x684>)
 8002f52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4610      	mov	r0, r2
 8002f5c:	f7ff fa21 	bl	80023a2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f60:	4b41      	ldr	r3, [pc, #260]	; (8003068 <HAL_ADC_ConfigChannel+0x690>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	099b      	lsrs	r3, r3, #6
 8002f66:	4a41      	ldr	r2, [pc, #260]	; (800306c <HAL_ADC_ConfigChannel+0x694>)
 8002f68:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6c:	099b      	lsrs	r3, r3, #6
 8002f6e:	3301      	adds	r3, #1
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002f74:	e002      	b.n	8002f7c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1f9      	bne.n	8002f76 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f82:	e05a      	b.n	800303a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a39      	ldr	r2, [pc, #228]	; (8003070 <HAL_ADC_ConfigChannel+0x698>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d11e      	bne.n	8002fcc <HAL_ADC_ConfigChannel+0x5f4>
 8002f8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d119      	bne.n	8002fcc <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a30      	ldr	r2, [pc, #192]	; (8003060 <HAL_ADC_ConfigChannel+0x688>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d14b      	bne.n	800303a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a2a      	ldr	r2, [pc, #168]	; (8003050 <HAL_ADC_ConfigChannel+0x678>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d004      	beq.n	8002fb6 <HAL_ADC_ConfigChannel+0x5de>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a28      	ldr	r2, [pc, #160]	; (8003054 <HAL_ADC_ConfigChannel+0x67c>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d101      	bne.n	8002fba <HAL_ADC_ConfigChannel+0x5e2>
 8002fb6:	4a28      	ldr	r2, [pc, #160]	; (8003058 <HAL_ADC_ConfigChannel+0x680>)
 8002fb8:	e000      	b.n	8002fbc <HAL_ADC_ConfigChannel+0x5e4>
 8002fba:	4a28      	ldr	r2, [pc, #160]	; (800305c <HAL_ADC_ConfigChannel+0x684>)
 8002fbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	4610      	mov	r0, r2
 8002fc6:	f7ff f9ec 	bl	80023a2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002fca:	e036      	b.n	800303a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a28      	ldr	r2, [pc, #160]	; (8003074 <HAL_ADC_ConfigChannel+0x69c>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d131      	bne.n	800303a <HAL_ADC_ConfigChannel+0x662>
 8002fd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d12c      	bne.n	800303a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a1e      	ldr	r2, [pc, #120]	; (8003060 <HAL_ADC_ConfigChannel+0x688>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d127      	bne.n	800303a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a18      	ldr	r2, [pc, #96]	; (8003050 <HAL_ADC_ConfigChannel+0x678>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d004      	beq.n	8002ffe <HAL_ADC_ConfigChannel+0x626>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a16      	ldr	r2, [pc, #88]	; (8003054 <HAL_ADC_ConfigChannel+0x67c>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d101      	bne.n	8003002 <HAL_ADC_ConfigChannel+0x62a>
 8002ffe:	4a16      	ldr	r2, [pc, #88]	; (8003058 <HAL_ADC_ConfigChannel+0x680>)
 8003000:	e000      	b.n	8003004 <HAL_ADC_ConfigChannel+0x62c>
 8003002:	4a16      	ldr	r2, [pc, #88]	; (800305c <HAL_ADC_ConfigChannel+0x684>)
 8003004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003006:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800300a:	4619      	mov	r1, r3
 800300c:	4610      	mov	r0, r2
 800300e:	f7ff f9c8 	bl	80023a2 <LL_ADC_SetCommonPathInternalCh>
 8003012:	e012      	b.n	800303a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003018:	f043 0220 	orr.w	r2, r3, #32
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003026:	e008      	b.n	800303a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800302c:	f043 0220 	orr.w	r2, r3, #32
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003042:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003046:	4618      	mov	r0, r3
 8003048:	3784      	adds	r7, #132	; 0x84
 800304a:	46bd      	mov	sp, r7
 800304c:	bd90      	pop	{r4, r7, pc}
 800304e:	bf00      	nop
 8003050:	40022000 	.word	0x40022000
 8003054:	40022100 	.word	0x40022100
 8003058:	40022300 	.word	0x40022300
 800305c:	58026300 	.word	0x58026300
 8003060:	58026000 	.word	0x58026000
 8003064:	cb840000 	.word	0xcb840000
 8003068:	24000040 	.word	0x24000040
 800306c:	053e2d63 	.word	0x053e2d63
 8003070:	c7520000 	.word	0xc7520000
 8003074:	cfb80000 	.word	0xcfb80000

08003078 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a7a      	ldr	r2, [pc, #488]	; (8003270 <ADC_ConfigureBoostMode+0x1f8>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d004      	beq.n	8003094 <ADC_ConfigureBoostMode+0x1c>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a79      	ldr	r2, [pc, #484]	; (8003274 <ADC_ConfigureBoostMode+0x1fc>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d109      	bne.n	80030a8 <ADC_ConfigureBoostMode+0x30>
 8003094:	4b78      	ldr	r3, [pc, #480]	; (8003278 <ADC_ConfigureBoostMode+0x200>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800309c:	2b00      	cmp	r3, #0
 800309e:	bf14      	ite	ne
 80030a0:	2301      	movne	r3, #1
 80030a2:	2300      	moveq	r3, #0
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	e008      	b.n	80030ba <ADC_ConfigureBoostMode+0x42>
 80030a8:	4b74      	ldr	r3, [pc, #464]	; (800327c <ADC_ConfigureBoostMode+0x204>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	bf14      	ite	ne
 80030b4:	2301      	movne	r3, #1
 80030b6:	2300      	moveq	r3, #0
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d01c      	beq.n	80030f8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80030be:	f002 ff39 	bl	8005f34 <HAL_RCC_GetHCLKFreq>
 80030c2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80030cc:	d010      	beq.n	80030f0 <ADC_ConfigureBoostMode+0x78>
 80030ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80030d2:	d873      	bhi.n	80031bc <ADC_ConfigureBoostMode+0x144>
 80030d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030d8:	d002      	beq.n	80030e0 <ADC_ConfigureBoostMode+0x68>
 80030da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030de:	d16d      	bne.n	80031bc <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	0c1b      	lsrs	r3, r3, #16
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ec:	60fb      	str	r3, [r7, #12]
        break;
 80030ee:	e068      	b.n	80031c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	089b      	lsrs	r3, r3, #2
 80030f4:	60fb      	str	r3, [r7, #12]
        break;
 80030f6:	e064      	b.n	80031c2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80030f8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80030fc:	f04f 0100 	mov.w	r1, #0
 8003100:	f004 f968 	bl	80073d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003104:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800310e:	d051      	beq.n	80031b4 <ADC_ConfigureBoostMode+0x13c>
 8003110:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003114:	d854      	bhi.n	80031c0 <ADC_ConfigureBoostMode+0x148>
 8003116:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800311a:	d047      	beq.n	80031ac <ADC_ConfigureBoostMode+0x134>
 800311c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003120:	d84e      	bhi.n	80031c0 <ADC_ConfigureBoostMode+0x148>
 8003122:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003126:	d03d      	beq.n	80031a4 <ADC_ConfigureBoostMode+0x12c>
 8003128:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800312c:	d848      	bhi.n	80031c0 <ADC_ConfigureBoostMode+0x148>
 800312e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003132:	d033      	beq.n	800319c <ADC_ConfigureBoostMode+0x124>
 8003134:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003138:	d842      	bhi.n	80031c0 <ADC_ConfigureBoostMode+0x148>
 800313a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800313e:	d029      	beq.n	8003194 <ADC_ConfigureBoostMode+0x11c>
 8003140:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003144:	d83c      	bhi.n	80031c0 <ADC_ConfigureBoostMode+0x148>
 8003146:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800314a:	d01a      	beq.n	8003182 <ADC_ConfigureBoostMode+0x10a>
 800314c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003150:	d836      	bhi.n	80031c0 <ADC_ConfigureBoostMode+0x148>
 8003152:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003156:	d014      	beq.n	8003182 <ADC_ConfigureBoostMode+0x10a>
 8003158:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800315c:	d830      	bhi.n	80031c0 <ADC_ConfigureBoostMode+0x148>
 800315e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003162:	d00e      	beq.n	8003182 <ADC_ConfigureBoostMode+0x10a>
 8003164:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003168:	d82a      	bhi.n	80031c0 <ADC_ConfigureBoostMode+0x148>
 800316a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800316e:	d008      	beq.n	8003182 <ADC_ConfigureBoostMode+0x10a>
 8003170:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003174:	d824      	bhi.n	80031c0 <ADC_ConfigureBoostMode+0x148>
 8003176:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800317a:	d002      	beq.n	8003182 <ADC_ConfigureBoostMode+0x10a>
 800317c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003180:	d11e      	bne.n	80031c0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	0c9b      	lsrs	r3, r3, #18
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003190:	60fb      	str	r3, [r7, #12]
        break;
 8003192:	e016      	b.n	80031c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	091b      	lsrs	r3, r3, #4
 8003198:	60fb      	str	r3, [r7, #12]
        break;
 800319a:	e012      	b.n	80031c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	095b      	lsrs	r3, r3, #5
 80031a0:	60fb      	str	r3, [r7, #12]
        break;
 80031a2:	e00e      	b.n	80031c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	099b      	lsrs	r3, r3, #6
 80031a8:	60fb      	str	r3, [r7, #12]
        break;
 80031aa:	e00a      	b.n	80031c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	09db      	lsrs	r3, r3, #7
 80031b0:	60fb      	str	r3, [r7, #12]
        break;
 80031b2:	e006      	b.n	80031c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	0a1b      	lsrs	r3, r3, #8
 80031b8:	60fb      	str	r3, [r7, #12]
        break;
 80031ba:	e002      	b.n	80031c2 <ADC_ConfigureBoostMode+0x14a>
        break;
 80031bc:	bf00      	nop
 80031be:	e000      	b.n	80031c2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80031c0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80031c2:	f7ff f8b9 	bl	8002338 <HAL_GetREVID>
 80031c6:	4603      	mov	r3, r0
 80031c8:	f241 0203 	movw	r2, #4099	; 0x1003
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d815      	bhi.n	80031fc <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	4a2b      	ldr	r2, [pc, #172]	; (8003280 <ADC_ConfigureBoostMode+0x208>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d908      	bls.n	80031ea <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689a      	ldr	r2, [r3, #8]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031e6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80031e8:	e03e      	b.n	8003268 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031f8:	609a      	str	r2, [r3, #8]
}
 80031fa:	e035      	b.n	8003268 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	085b      	lsrs	r3, r3, #1
 8003200:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	4a1f      	ldr	r2, [pc, #124]	; (8003284 <ADC_ConfigureBoostMode+0x20c>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d808      	bhi.n	800321c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003218:	609a      	str	r2, [r3, #8]
}
 800321a:	e025      	b.n	8003268 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	4a1a      	ldr	r2, [pc, #104]	; (8003288 <ADC_ConfigureBoostMode+0x210>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d80a      	bhi.n	800323a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003236:	609a      	str	r2, [r3, #8]
}
 8003238:	e016      	b.n	8003268 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	4a13      	ldr	r2, [pc, #76]	; (800328c <ADC_ConfigureBoostMode+0x214>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d80a      	bhi.n	8003258 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003254:	609a      	str	r2, [r3, #8]
}
 8003256:	e007      	b.n	8003268 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	689a      	ldr	r2, [r3, #8]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003266:	609a      	str	r2, [r3, #8]
}
 8003268:	bf00      	nop
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40022000 	.word	0x40022000
 8003274:	40022100 	.word	0x40022100
 8003278:	40022300 	.word	0x40022300
 800327c:	58026300 	.word	0x58026300
 8003280:	01312d00 	.word	0x01312d00
 8003284:	005f5e10 	.word	0x005f5e10
 8003288:	00bebc20 	.word	0x00bebc20
 800328c:	017d7840 	.word	0x017d7840

08003290 <LL_ADC_IsEnabled>:
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d101      	bne.n	80032a8 <LL_ADC_IsEnabled+0x18>
 80032a4:	2301      	movs	r3, #1
 80032a6:	e000      	b.n	80032aa <LL_ADC_IsEnabled+0x1a>
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr

080032b6 <LL_ADC_REG_IsConversionOngoing>:
{
 80032b6:	b480      	push	{r7}
 80032b8:	b083      	sub	sp, #12
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f003 0304 	and.w	r3, r3, #4
 80032c6:	2b04      	cmp	r3, #4
 80032c8:	d101      	bne.n	80032ce <LL_ADC_REG_IsConversionOngoing+0x18>
 80032ca:	2301      	movs	r3, #1
 80032cc:	e000      	b.n	80032d0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80032dc:	b590      	push	{r4, r7, lr}
 80032de:	b09f      	sub	sp, #124	; 0x7c
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032e6:	2300      	movs	r3, #0
 80032e8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d101      	bne.n	80032fa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80032f6:	2302      	movs	r3, #2
 80032f8:	e0be      	b.n	8003478 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003302:	2300      	movs	r3, #0
 8003304:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003306:	2300      	movs	r3, #0
 8003308:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a5c      	ldr	r2, [pc, #368]	; (8003480 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d102      	bne.n	800331a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003314:	4b5b      	ldr	r3, [pc, #364]	; (8003484 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003316:	60bb      	str	r3, [r7, #8]
 8003318:	e001      	b.n	800331e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800331a:	2300      	movs	r3, #0
 800331c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d10b      	bne.n	800333c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003328:	f043 0220 	orr.w	r2, r3, #32
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e09d      	b.n	8003478 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	4618      	mov	r0, r3
 8003340:	f7ff ffb9 	bl	80032b6 <LL_ADC_REG_IsConversionOngoing>
 8003344:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f7ff ffb3 	bl	80032b6 <LL_ADC_REG_IsConversionOngoing>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d17f      	bne.n	8003456 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003356:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003358:	2b00      	cmp	r3, #0
 800335a:	d17c      	bne.n	8003456 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a47      	ldr	r2, [pc, #284]	; (8003480 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d004      	beq.n	8003370 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a46      	ldr	r2, [pc, #280]	; (8003484 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d101      	bne.n	8003374 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003370:	4b45      	ldr	r3, [pc, #276]	; (8003488 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003372:	e000      	b.n	8003376 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003374:	4b45      	ldr	r3, [pc, #276]	; (800348c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003376:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d039      	beq.n	80033f4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	431a      	orrs	r2, r3
 800338e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003390:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a3a      	ldr	r2, [pc, #232]	; (8003480 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d004      	beq.n	80033a6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a38      	ldr	r2, [pc, #224]	; (8003484 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d10e      	bne.n	80033c4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80033a6:	4836      	ldr	r0, [pc, #216]	; (8003480 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80033a8:	f7ff ff72 	bl	8003290 <LL_ADC_IsEnabled>
 80033ac:	4604      	mov	r4, r0
 80033ae:	4835      	ldr	r0, [pc, #212]	; (8003484 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80033b0:	f7ff ff6e 	bl	8003290 <LL_ADC_IsEnabled>
 80033b4:	4603      	mov	r3, r0
 80033b6:	4323      	orrs	r3, r4
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	bf0c      	ite	eq
 80033bc:	2301      	moveq	r3, #1
 80033be:	2300      	movne	r3, #0
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	e008      	b.n	80033d6 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80033c4:	4832      	ldr	r0, [pc, #200]	; (8003490 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80033c6:	f7ff ff63 	bl	8003290 <LL_ADC_IsEnabled>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	bf0c      	ite	eq
 80033d0:	2301      	moveq	r3, #1
 80033d2:	2300      	movne	r3, #0
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d047      	beq.n	800346a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80033da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033dc:	689a      	ldr	r2, [r3, #8]
 80033de:	4b2d      	ldr	r3, [pc, #180]	; (8003494 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80033e0:	4013      	ands	r3, r2
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	6811      	ldr	r1, [r2, #0]
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	6892      	ldr	r2, [r2, #8]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	431a      	orrs	r2, r3
 80033ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033f0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033f2:	e03a      	b.n	800346a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80033f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033fe:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a1e      	ldr	r2, [pc, #120]	; (8003480 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d004      	beq.n	8003414 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a1d      	ldr	r2, [pc, #116]	; (8003484 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d10e      	bne.n	8003432 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003414:	481a      	ldr	r0, [pc, #104]	; (8003480 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003416:	f7ff ff3b 	bl	8003290 <LL_ADC_IsEnabled>
 800341a:	4604      	mov	r4, r0
 800341c:	4819      	ldr	r0, [pc, #100]	; (8003484 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800341e:	f7ff ff37 	bl	8003290 <LL_ADC_IsEnabled>
 8003422:	4603      	mov	r3, r0
 8003424:	4323      	orrs	r3, r4
 8003426:	2b00      	cmp	r3, #0
 8003428:	bf0c      	ite	eq
 800342a:	2301      	moveq	r3, #1
 800342c:	2300      	movne	r3, #0
 800342e:	b2db      	uxtb	r3, r3
 8003430:	e008      	b.n	8003444 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003432:	4817      	ldr	r0, [pc, #92]	; (8003490 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003434:	f7ff ff2c 	bl	8003290 <LL_ADC_IsEnabled>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	bf0c      	ite	eq
 800343e:	2301      	moveq	r3, #1
 8003440:	2300      	movne	r3, #0
 8003442:	b2db      	uxtb	r3, r3
 8003444:	2b00      	cmp	r3, #0
 8003446:	d010      	beq.n	800346a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003448:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	4b11      	ldr	r3, [pc, #68]	; (8003494 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800344e:	4013      	ands	r3, r2
 8003450:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003452:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003454:	e009      	b.n	800346a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800345a:	f043 0220 	orr.w	r2, r3, #32
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003468:	e000      	b.n	800346c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800346a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003474:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003478:	4618      	mov	r0, r3
 800347a:	377c      	adds	r7, #124	; 0x7c
 800347c:	46bd      	mov	sp, r7
 800347e:	bd90      	pop	{r4, r7, pc}
 8003480:	40022000 	.word	0x40022000
 8003484:	40022100 	.word	0x40022100
 8003488:	40022300 	.word	0x40022300
 800348c:	58026300 	.word	0x58026300
 8003490:	58026000 	.word	0x58026000
 8003494:	fffff0e0 	.word	0xfffff0e0

08003498 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034a8:	4b0b      	ldr	r3, [pc, #44]	; (80034d8 <__NVIC_SetPriorityGrouping+0x40>)
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034b4:	4013      	ands	r3, r2
 80034b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80034c0:	4b06      	ldr	r3, [pc, #24]	; (80034dc <__NVIC_SetPriorityGrouping+0x44>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034c6:	4a04      	ldr	r2, [pc, #16]	; (80034d8 <__NVIC_SetPriorityGrouping+0x40>)
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	60d3      	str	r3, [r2, #12]
}
 80034cc:	bf00      	nop
 80034ce:	3714      	adds	r7, #20
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr
 80034d8:	e000ed00 	.word	0xe000ed00
 80034dc:	05fa0000 	.word	0x05fa0000

080034e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034e4:	4b04      	ldr	r3, [pc, #16]	; (80034f8 <__NVIC_GetPriorityGrouping+0x18>)
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	0a1b      	lsrs	r3, r3, #8
 80034ea:	f003 0307 	and.w	r3, r3, #7
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr
 80034f8:	e000ed00 	.word	0xe000ed00

080034fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	4603      	mov	r3, r0
 8003504:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003506:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800350a:	2b00      	cmp	r3, #0
 800350c:	db0b      	blt.n	8003526 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800350e:	88fb      	ldrh	r3, [r7, #6]
 8003510:	f003 021f 	and.w	r2, r3, #31
 8003514:	4907      	ldr	r1, [pc, #28]	; (8003534 <__NVIC_EnableIRQ+0x38>)
 8003516:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800351a:	095b      	lsrs	r3, r3, #5
 800351c:	2001      	movs	r0, #1
 800351e:	fa00 f202 	lsl.w	r2, r0, r2
 8003522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003526:	bf00      	nop
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	e000e100 	.word	0xe000e100

08003538 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	4603      	mov	r3, r0
 8003540:	6039      	str	r1, [r7, #0]
 8003542:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003544:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003548:	2b00      	cmp	r3, #0
 800354a:	db0a      	blt.n	8003562 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	b2da      	uxtb	r2, r3
 8003550:	490c      	ldr	r1, [pc, #48]	; (8003584 <__NVIC_SetPriority+0x4c>)
 8003552:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003556:	0112      	lsls	r2, r2, #4
 8003558:	b2d2      	uxtb	r2, r2
 800355a:	440b      	add	r3, r1
 800355c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003560:	e00a      	b.n	8003578 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	b2da      	uxtb	r2, r3
 8003566:	4908      	ldr	r1, [pc, #32]	; (8003588 <__NVIC_SetPriority+0x50>)
 8003568:	88fb      	ldrh	r3, [r7, #6]
 800356a:	f003 030f 	and.w	r3, r3, #15
 800356e:	3b04      	subs	r3, #4
 8003570:	0112      	lsls	r2, r2, #4
 8003572:	b2d2      	uxtb	r2, r2
 8003574:	440b      	add	r3, r1
 8003576:	761a      	strb	r2, [r3, #24]
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	e000e100 	.word	0xe000e100
 8003588:	e000ed00 	.word	0xe000ed00

0800358c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800358c:	b480      	push	{r7}
 800358e:	b089      	sub	sp, #36	; 0x24
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f003 0307 	and.w	r3, r3, #7
 800359e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	f1c3 0307 	rsb	r3, r3, #7
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	bf28      	it	cs
 80035aa:	2304      	movcs	r3, #4
 80035ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	3304      	adds	r3, #4
 80035b2:	2b06      	cmp	r3, #6
 80035b4:	d902      	bls.n	80035bc <NVIC_EncodePriority+0x30>
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	3b03      	subs	r3, #3
 80035ba:	e000      	b.n	80035be <NVIC_EncodePriority+0x32>
 80035bc:	2300      	movs	r3, #0
 80035be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035c0:	f04f 32ff 	mov.w	r2, #4294967295
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ca:	43da      	mvns	r2, r3
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	401a      	ands	r2, r3
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035d4:	f04f 31ff 	mov.w	r1, #4294967295
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	fa01 f303 	lsl.w	r3, r1, r3
 80035de:	43d9      	mvns	r1, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035e4:	4313      	orrs	r3, r2
         );
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3724      	adds	r7, #36	; 0x24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
	...

080035f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	3b01      	subs	r3, #1
 8003600:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003604:	d301      	bcc.n	800360a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003606:	2301      	movs	r3, #1
 8003608:	e00f      	b.n	800362a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800360a:	4a0a      	ldr	r2, [pc, #40]	; (8003634 <SysTick_Config+0x40>)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3b01      	subs	r3, #1
 8003610:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003612:	210f      	movs	r1, #15
 8003614:	f04f 30ff 	mov.w	r0, #4294967295
 8003618:	f7ff ff8e 	bl	8003538 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800361c:	4b05      	ldr	r3, [pc, #20]	; (8003634 <SysTick_Config+0x40>)
 800361e:	2200      	movs	r2, #0
 8003620:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003622:	4b04      	ldr	r3, [pc, #16]	; (8003634 <SysTick_Config+0x40>)
 8003624:	2207      	movs	r2, #7
 8003626:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	e000e010 	.word	0xe000e010

08003638 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f7ff ff29 	bl	8003498 <__NVIC_SetPriorityGrouping>
}
 8003646:	bf00      	nop
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b086      	sub	sp, #24
 8003652:	af00      	add	r7, sp, #0
 8003654:	4603      	mov	r3, r0
 8003656:	60b9      	str	r1, [r7, #8]
 8003658:	607a      	str	r2, [r7, #4]
 800365a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800365c:	f7ff ff40 	bl	80034e0 <__NVIC_GetPriorityGrouping>
 8003660:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	68b9      	ldr	r1, [r7, #8]
 8003666:	6978      	ldr	r0, [r7, #20]
 8003668:	f7ff ff90 	bl	800358c <NVIC_EncodePriority>
 800366c:	4602      	mov	r2, r0
 800366e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003672:	4611      	mov	r1, r2
 8003674:	4618      	mov	r0, r3
 8003676:	f7ff ff5f 	bl	8003538 <__NVIC_SetPriority>
}
 800367a:	bf00      	nop
 800367c:	3718      	adds	r7, #24
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b082      	sub	sp, #8
 8003686:	af00      	add	r7, sp, #0
 8003688:	4603      	mov	r3, r0
 800368a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800368c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003690:	4618      	mov	r0, r3
 8003692:	f7ff ff33 	bl	80034fc <__NVIC_EnableIRQ>
}
 8003696:	bf00      	nop
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b082      	sub	sp, #8
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7ff ffa4 	bl	80035f4 <SysTick_Config>
 80036ac:	4603      	mov	r3, r0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
	...

080036b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b089      	sub	sp, #36	; 0x24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80036c2:	2300      	movs	r3, #0
 80036c4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80036c6:	4b89      	ldr	r3, [pc, #548]	; (80038ec <HAL_GPIO_Init+0x234>)
 80036c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80036ca:	e194      	b.n	80039f6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	2101      	movs	r1, #1
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	fa01 f303 	lsl.w	r3, r1, r3
 80036d8:	4013      	ands	r3, r2
 80036da:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f000 8186 	beq.w	80039f0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f003 0303 	and.w	r3, r3, #3
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d005      	beq.n	80036fc <HAL_GPIO_Init+0x44>
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f003 0303 	and.w	r3, r3, #3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d130      	bne.n	800375e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	2203      	movs	r2, #3
 8003708:	fa02 f303 	lsl.w	r3, r2, r3
 800370c:	43db      	mvns	r3, r3
 800370e:	69ba      	ldr	r2, [r7, #24]
 8003710:	4013      	ands	r3, r2
 8003712:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	68da      	ldr	r2, [r3, #12]
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	fa02 f303 	lsl.w	r3, r2, r3
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	4313      	orrs	r3, r2
 8003724:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003732:	2201      	movs	r2, #1
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	fa02 f303 	lsl.w	r3, r2, r3
 800373a:	43db      	mvns	r3, r3
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	4013      	ands	r3, r2
 8003740:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	091b      	lsrs	r3, r3, #4
 8003748:	f003 0201 	and.w	r2, r3, #1
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	fa02 f303 	lsl.w	r3, r2, r3
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	4313      	orrs	r3, r2
 8003756:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f003 0303 	and.w	r3, r3, #3
 8003766:	2b03      	cmp	r3, #3
 8003768:	d017      	beq.n	800379a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	2203      	movs	r2, #3
 8003776:	fa02 f303 	lsl.w	r3, r2, r3
 800377a:	43db      	mvns	r3, r3
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	4013      	ands	r3, r2
 8003780:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	689a      	ldr	r2, [r3, #8]
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	005b      	lsls	r3, r3, #1
 800378a:	fa02 f303 	lsl.w	r3, r2, r3
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	4313      	orrs	r3, r2
 8003792:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f003 0303 	and.w	r3, r3, #3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d123      	bne.n	80037ee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	08da      	lsrs	r2, r3, #3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	3208      	adds	r2, #8
 80037ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	f003 0307 	and.w	r3, r3, #7
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	220f      	movs	r2, #15
 80037be:	fa02 f303 	lsl.w	r3, r2, r3
 80037c2:	43db      	mvns	r3, r3
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	4013      	ands	r3, r2
 80037c8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	691a      	ldr	r2, [r3, #16]
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	fa02 f303 	lsl.w	r3, r2, r3
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	4313      	orrs	r3, r2
 80037de:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	08da      	lsrs	r2, r3, #3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3208      	adds	r2, #8
 80037e8:	69b9      	ldr	r1, [r7, #24]
 80037ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	005b      	lsls	r3, r3, #1
 80037f8:	2203      	movs	r2, #3
 80037fa:	fa02 f303 	lsl.w	r3, r2, r3
 80037fe:	43db      	mvns	r3, r3
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	4013      	ands	r3, r2
 8003804:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f003 0203 	and.w	r2, r3, #3
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	fa02 f303 	lsl.w	r3, r2, r3
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	4313      	orrs	r3, r2
 800381a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	69ba      	ldr	r2, [r7, #24]
 8003820:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800382a:	2b00      	cmp	r3, #0
 800382c:	f000 80e0 	beq.w	80039f0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003830:	4b2f      	ldr	r3, [pc, #188]	; (80038f0 <HAL_GPIO_Init+0x238>)
 8003832:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003836:	4a2e      	ldr	r2, [pc, #184]	; (80038f0 <HAL_GPIO_Init+0x238>)
 8003838:	f043 0302 	orr.w	r3, r3, #2
 800383c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003840:	4b2b      	ldr	r3, [pc, #172]	; (80038f0 <HAL_GPIO_Init+0x238>)
 8003842:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	60fb      	str	r3, [r7, #12]
 800384c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800384e:	4a29      	ldr	r2, [pc, #164]	; (80038f4 <HAL_GPIO_Init+0x23c>)
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	089b      	lsrs	r3, r3, #2
 8003854:	3302      	adds	r3, #2
 8003856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800385a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	f003 0303 	and.w	r3, r3, #3
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	220f      	movs	r2, #15
 8003866:	fa02 f303 	lsl.w	r3, r2, r3
 800386a:	43db      	mvns	r3, r3
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	4013      	ands	r3, r2
 8003870:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a20      	ldr	r2, [pc, #128]	; (80038f8 <HAL_GPIO_Init+0x240>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d052      	beq.n	8003920 <HAL_GPIO_Init+0x268>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a1f      	ldr	r2, [pc, #124]	; (80038fc <HAL_GPIO_Init+0x244>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d031      	beq.n	80038e6 <HAL_GPIO_Init+0x22e>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a1e      	ldr	r2, [pc, #120]	; (8003900 <HAL_GPIO_Init+0x248>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d02b      	beq.n	80038e2 <HAL_GPIO_Init+0x22a>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a1d      	ldr	r2, [pc, #116]	; (8003904 <HAL_GPIO_Init+0x24c>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d025      	beq.n	80038de <HAL_GPIO_Init+0x226>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a1c      	ldr	r2, [pc, #112]	; (8003908 <HAL_GPIO_Init+0x250>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d01f      	beq.n	80038da <HAL_GPIO_Init+0x222>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a1b      	ldr	r2, [pc, #108]	; (800390c <HAL_GPIO_Init+0x254>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d019      	beq.n	80038d6 <HAL_GPIO_Init+0x21e>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a1a      	ldr	r2, [pc, #104]	; (8003910 <HAL_GPIO_Init+0x258>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d013      	beq.n	80038d2 <HAL_GPIO_Init+0x21a>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a19      	ldr	r2, [pc, #100]	; (8003914 <HAL_GPIO_Init+0x25c>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d00d      	beq.n	80038ce <HAL_GPIO_Init+0x216>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a18      	ldr	r2, [pc, #96]	; (8003918 <HAL_GPIO_Init+0x260>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d007      	beq.n	80038ca <HAL_GPIO_Init+0x212>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a17      	ldr	r2, [pc, #92]	; (800391c <HAL_GPIO_Init+0x264>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d101      	bne.n	80038c6 <HAL_GPIO_Init+0x20e>
 80038c2:	2309      	movs	r3, #9
 80038c4:	e02d      	b.n	8003922 <HAL_GPIO_Init+0x26a>
 80038c6:	230a      	movs	r3, #10
 80038c8:	e02b      	b.n	8003922 <HAL_GPIO_Init+0x26a>
 80038ca:	2308      	movs	r3, #8
 80038cc:	e029      	b.n	8003922 <HAL_GPIO_Init+0x26a>
 80038ce:	2307      	movs	r3, #7
 80038d0:	e027      	b.n	8003922 <HAL_GPIO_Init+0x26a>
 80038d2:	2306      	movs	r3, #6
 80038d4:	e025      	b.n	8003922 <HAL_GPIO_Init+0x26a>
 80038d6:	2305      	movs	r3, #5
 80038d8:	e023      	b.n	8003922 <HAL_GPIO_Init+0x26a>
 80038da:	2304      	movs	r3, #4
 80038dc:	e021      	b.n	8003922 <HAL_GPIO_Init+0x26a>
 80038de:	2303      	movs	r3, #3
 80038e0:	e01f      	b.n	8003922 <HAL_GPIO_Init+0x26a>
 80038e2:	2302      	movs	r3, #2
 80038e4:	e01d      	b.n	8003922 <HAL_GPIO_Init+0x26a>
 80038e6:	2301      	movs	r3, #1
 80038e8:	e01b      	b.n	8003922 <HAL_GPIO_Init+0x26a>
 80038ea:	bf00      	nop
 80038ec:	58000080 	.word	0x58000080
 80038f0:	58024400 	.word	0x58024400
 80038f4:	58000400 	.word	0x58000400
 80038f8:	58020000 	.word	0x58020000
 80038fc:	58020400 	.word	0x58020400
 8003900:	58020800 	.word	0x58020800
 8003904:	58020c00 	.word	0x58020c00
 8003908:	58021000 	.word	0x58021000
 800390c:	58021400 	.word	0x58021400
 8003910:	58021800 	.word	0x58021800
 8003914:	58021c00 	.word	0x58021c00
 8003918:	58022000 	.word	0x58022000
 800391c:	58022400 	.word	0x58022400
 8003920:	2300      	movs	r3, #0
 8003922:	69fa      	ldr	r2, [r7, #28]
 8003924:	f002 0203 	and.w	r2, r2, #3
 8003928:	0092      	lsls	r2, r2, #2
 800392a:	4093      	lsls	r3, r2
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	4313      	orrs	r3, r2
 8003930:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003932:	4938      	ldr	r1, [pc, #224]	; (8003a14 <HAL_GPIO_Init+0x35c>)
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	089b      	lsrs	r3, r3, #2
 8003938:	3302      	adds	r3, #2
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003940:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	43db      	mvns	r3, r3
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	4013      	ands	r3, r2
 8003950:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d003      	beq.n	8003966 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	4313      	orrs	r3, r2
 8003964:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003966:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800396e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	43db      	mvns	r3, r3
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	4013      	ands	r3, r2
 800397e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d003      	beq.n	8003994 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	4313      	orrs	r3, r2
 8003992:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003994:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	43db      	mvns	r3, r3
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	4013      	ands	r3, r2
 80039aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d003      	beq.n	80039c0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	4313      	orrs	r3, r2
 80039be:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	69ba      	ldr	r2, [r7, #24]
 80039c4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	43db      	mvns	r3, r3
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	4013      	ands	r3, r2
 80039d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d003      	beq.n	80039ea <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	3301      	adds	r3, #1
 80039f4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f47f ae63 	bne.w	80036cc <HAL_GPIO_Init+0x14>
  }
}
 8003a06:	bf00      	nop
 8003a08:	bf00      	nop
 8003a0a:	3724      	adds	r7, #36	; 0x24
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr
 8003a14:	58000400 	.word	0x58000400

08003a18 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a1a:	b08f      	sub	sp, #60	; 0x3c
 8003a1c:	af0a      	add	r7, sp, #40	; 0x28
 8003a1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e116      	b.n	8003c58 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d106      	bne.n	8003a4a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f008 fd09 	bl	800c45c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2203      	movs	r2, #3
 8003a4e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d102      	bne.n	8003a64 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f005 f8c8 	bl	8008bfe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	603b      	str	r3, [r7, #0]
 8003a74:	687e      	ldr	r6, [r7, #4]
 8003a76:	466d      	mov	r5, sp
 8003a78:	f106 0410 	add.w	r4, r6, #16
 8003a7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a84:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a88:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a8c:	1d33      	adds	r3, r6, #4
 8003a8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a90:	6838      	ldr	r0, [r7, #0]
 8003a92:	f004 ff93 	bl	80089bc <USB_CoreInit>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d005      	beq.n	8003aa8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e0d7      	b.n	8003c58 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2100      	movs	r1, #0
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f005 f8b6 	bl	8008c20 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	73fb      	strb	r3, [r7, #15]
 8003ab8:	e04a      	b.n	8003b50 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003aba:	7bfa      	ldrb	r2, [r7, #15]
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	00db      	lsls	r3, r3, #3
 8003ac2:	4413      	add	r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	440b      	add	r3, r1
 8003ac8:	333d      	adds	r3, #61	; 0x3d
 8003aca:	2201      	movs	r2, #1
 8003acc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003ace:	7bfa      	ldrb	r2, [r7, #15]
 8003ad0:	6879      	ldr	r1, [r7, #4]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	00db      	lsls	r3, r3, #3
 8003ad6:	4413      	add	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	440b      	add	r3, r1
 8003adc:	333c      	adds	r3, #60	; 0x3c
 8003ade:	7bfa      	ldrb	r2, [r7, #15]
 8003ae0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003ae2:	7bfa      	ldrb	r2, [r7, #15]
 8003ae4:	7bfb      	ldrb	r3, [r7, #15]
 8003ae6:	b298      	uxth	r0, r3
 8003ae8:	6879      	ldr	r1, [r7, #4]
 8003aea:	4613      	mov	r3, r2
 8003aec:	00db      	lsls	r3, r3, #3
 8003aee:	4413      	add	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	440b      	add	r3, r1
 8003af4:	3356      	adds	r3, #86	; 0x56
 8003af6:	4602      	mov	r2, r0
 8003af8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003afa:	7bfa      	ldrb	r2, [r7, #15]
 8003afc:	6879      	ldr	r1, [r7, #4]
 8003afe:	4613      	mov	r3, r2
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	4413      	add	r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	440b      	add	r3, r1
 8003b08:	3340      	adds	r3, #64	; 0x40
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003b0e:	7bfa      	ldrb	r2, [r7, #15]
 8003b10:	6879      	ldr	r1, [r7, #4]
 8003b12:	4613      	mov	r3, r2
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	4413      	add	r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	440b      	add	r3, r1
 8003b1c:	3344      	adds	r3, #68	; 0x44
 8003b1e:	2200      	movs	r2, #0
 8003b20:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b22:	7bfa      	ldrb	r2, [r7, #15]
 8003b24:	6879      	ldr	r1, [r7, #4]
 8003b26:	4613      	mov	r3, r2
 8003b28:	00db      	lsls	r3, r3, #3
 8003b2a:	4413      	add	r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	440b      	add	r3, r1
 8003b30:	3348      	adds	r3, #72	; 0x48
 8003b32:	2200      	movs	r2, #0
 8003b34:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b36:	7bfa      	ldrb	r2, [r7, #15]
 8003b38:	6879      	ldr	r1, [r7, #4]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	4413      	add	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	440b      	add	r3, r1
 8003b44:	334c      	adds	r3, #76	; 0x4c
 8003b46:	2200      	movs	r2, #0
 8003b48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b4a:	7bfb      	ldrb	r3, [r7, #15]
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	73fb      	strb	r3, [r7, #15]
 8003b50:	7bfa      	ldrb	r2, [r7, #15]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d3af      	bcc.n	8003aba <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	73fb      	strb	r3, [r7, #15]
 8003b5e:	e044      	b.n	8003bea <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b60:	7bfa      	ldrb	r2, [r7, #15]
 8003b62:	6879      	ldr	r1, [r7, #4]
 8003b64:	4613      	mov	r3, r2
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	4413      	add	r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	440b      	add	r3, r1
 8003b6e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003b72:	2200      	movs	r2, #0
 8003b74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b76:	7bfa      	ldrb	r2, [r7, #15]
 8003b78:	6879      	ldr	r1, [r7, #4]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	00db      	lsls	r3, r3, #3
 8003b7e:	4413      	add	r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	440b      	add	r3, r1
 8003b84:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003b88:	7bfa      	ldrb	r2, [r7, #15]
 8003b8a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b8c:	7bfa      	ldrb	r2, [r7, #15]
 8003b8e:	6879      	ldr	r1, [r7, #4]
 8003b90:	4613      	mov	r3, r2
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	4413      	add	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	440b      	add	r3, r1
 8003b9a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003ba2:	7bfa      	ldrb	r2, [r7, #15]
 8003ba4:	6879      	ldr	r1, [r7, #4]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	00db      	lsls	r3, r3, #3
 8003baa:	4413      	add	r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	440b      	add	r3, r1
 8003bb0:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003bb8:	7bfa      	ldrb	r2, [r7, #15]
 8003bba:	6879      	ldr	r1, [r7, #4]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	4413      	add	r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	440b      	add	r3, r1
 8003bc6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003bca:	2200      	movs	r2, #0
 8003bcc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003bce:	7bfa      	ldrb	r2, [r7, #15]
 8003bd0:	6879      	ldr	r1, [r7, #4]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	00db      	lsls	r3, r3, #3
 8003bd6:	4413      	add	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	440b      	add	r3, r1
 8003bdc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003be0:	2200      	movs	r2, #0
 8003be2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003be4:	7bfb      	ldrb	r3, [r7, #15]
 8003be6:	3301      	adds	r3, #1
 8003be8:	73fb      	strb	r3, [r7, #15]
 8003bea:	7bfa      	ldrb	r2, [r7, #15]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d3b5      	bcc.n	8003b60 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	603b      	str	r3, [r7, #0]
 8003bfa:	687e      	ldr	r6, [r7, #4]
 8003bfc:	466d      	mov	r5, sp
 8003bfe:	f106 0410 	add.w	r4, r6, #16
 8003c02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c0a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c0e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c12:	1d33      	adds	r3, r6, #4
 8003c14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c16:	6838      	ldr	r0, [r7, #0]
 8003c18:	f005 f84e 	bl	8008cb8 <USB_DevInit>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d005      	beq.n	8003c2e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2202      	movs	r2, #2
 8003c26:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e014      	b.n	8003c58 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d102      	bne.n	8003c4c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f001 f970 	bl	8004f2c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4618      	mov	r0, r3
 8003c52:	f006 f890 	bl	8009d76 <USB_DevDisconnect>

  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3714      	adds	r7, #20
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c60 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d101      	bne.n	8003c7c <HAL_PCD_Start+0x1c>
 8003c78:	2302      	movs	r3, #2
 8003c7a:	e022      	b.n	8003cc2 <HAL_PCD_Start+0x62>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d109      	bne.n	8003ca4 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d105      	bne.n	8003ca4 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f004 ff97 	bl	8008bdc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f006 f83e 	bl	8009d34 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003cca:	b590      	push	{r4, r7, lr}
 8003ccc:	b08d      	sub	sp, #52	; 0x34
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cd8:	6a3b      	ldr	r3, [r7, #32]
 8003cda:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f006 f8fc 	bl	8009ede <USB_GetMode>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f040 84b7 	bne.w	800465c <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f006 f860 	bl	8009db8 <USB_ReadInterrupts>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f000 84ad 	beq.w	800465a <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	0a1b      	lsrs	r3, r3, #8
 8003d0a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f006 f84d 	bl	8009db8 <USB_ReadInterrupts>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d107      	bne.n	8003d38 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	695a      	ldr	r2, [r3, #20]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f002 0202 	and.w	r2, r2, #2
 8003d36:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f006 f83b 	bl	8009db8 <USB_ReadInterrupts>
 8003d42:	4603      	mov	r3, r0
 8003d44:	f003 0310 	and.w	r3, r3, #16
 8003d48:	2b10      	cmp	r3, #16
 8003d4a:	d161      	bne.n	8003e10 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699a      	ldr	r2, [r3, #24]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f022 0210 	bic.w	r2, r2, #16
 8003d5a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003d5c:	6a3b      	ldr	r3, [r7, #32]
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	f003 020f 	and.w	r2, r3, #15
 8003d68:	4613      	mov	r3, r2
 8003d6a:	00db      	lsls	r3, r3, #3
 8003d6c:	4413      	add	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	4413      	add	r3, r2
 8003d78:	3304      	adds	r3, #4
 8003d7a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	0c5b      	lsrs	r3, r3, #17
 8003d80:	f003 030f 	and.w	r3, r3, #15
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d124      	bne.n	8003dd2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003d8e:	4013      	ands	r3, r2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d035      	beq.n	8003e00 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	091b      	lsrs	r3, r3, #4
 8003d9c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003d9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	461a      	mov	r2, r3
 8003da6:	6a38      	ldr	r0, [r7, #32]
 8003da8:	f005 fe72 	bl	8009a90 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	68da      	ldr	r2, [r3, #12]
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	091b      	lsrs	r3, r3, #4
 8003db4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003db8:	441a      	add	r2, r3
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	695a      	ldr	r2, [r3, #20]
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	091b      	lsrs	r3, r3, #4
 8003dc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003dca:	441a      	add	r2, r3
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	615a      	str	r2, [r3, #20]
 8003dd0:	e016      	b.n	8003e00 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	0c5b      	lsrs	r3, r3, #17
 8003dd6:	f003 030f 	and.w	r3, r3, #15
 8003dda:	2b06      	cmp	r3, #6
 8003ddc:	d110      	bne.n	8003e00 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003de4:	2208      	movs	r2, #8
 8003de6:	4619      	mov	r1, r3
 8003de8:	6a38      	ldr	r0, [r7, #32]
 8003dea:	f005 fe51 	bl	8009a90 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	695a      	ldr	r2, [r3, #20]
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	091b      	lsrs	r3, r3, #4
 8003df6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003dfa:	441a      	add	r2, r3
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	699a      	ldr	r2, [r3, #24]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f042 0210 	orr.w	r2, r2, #16
 8003e0e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4618      	mov	r0, r3
 8003e16:	f005 ffcf 	bl	8009db8 <USB_ReadInterrupts>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e20:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003e24:	f040 80a7 	bne.w	8003f76 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f005 ffd4 	bl	8009dde <USB_ReadDevAllOutEpInterrupt>
 8003e36:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003e38:	e099      	b.n	8003f6e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3c:	f003 0301 	and.w	r3, r3, #1
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f000 808e 	beq.w	8003f62 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e4c:	b2d2      	uxtb	r2, r2
 8003e4e:	4611      	mov	r1, r2
 8003e50:	4618      	mov	r0, r3
 8003e52:	f005 fff8 	bl	8009e46 <USB_ReadDevOutEPInterrupt>
 8003e56:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00c      	beq.n	8003e7c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e64:	015a      	lsls	r2, r3, #5
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	4413      	add	r3, r2
 8003e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e6e:	461a      	mov	r2, r3
 8003e70:	2301      	movs	r3, #1
 8003e72:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003e74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 fed2 	bl	8004c20 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	f003 0308 	and.w	r3, r3, #8
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00c      	beq.n	8003ea0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e88:	015a      	lsls	r2, r3, #5
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e92:	461a      	mov	r2, r3
 8003e94:	2308      	movs	r3, #8
 8003e96:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003e98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 ffa8 	bl	8004df0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	f003 0310 	and.w	r3, r3, #16
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d008      	beq.n	8003ebc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	015a      	lsls	r2, r3, #5
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	2310      	movs	r3, #16
 8003eba:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d030      	beq.n	8003f28 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003ec6:	6a3b      	ldr	r3, [r7, #32]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ece:	2b80      	cmp	r3, #128	; 0x80
 8003ed0:	d109      	bne.n	8003ee6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	69fa      	ldr	r2, [r7, #28]
 8003edc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ee0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ee4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ee8:	4613      	mov	r3, r2
 8003eea:	00db      	lsls	r3, r3, #3
 8003eec:	4413      	add	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	3304      	adds	r3, #4
 8003efa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	78db      	ldrb	r3, [r3, #3]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d108      	bne.n	8003f16 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	2200      	movs	r2, #0
 8003f08:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	4619      	mov	r1, r3
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f008 fbc9 	bl	800c6a8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f18:	015a      	lsls	r2, r3, #5
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f22:	461a      	mov	r2, r3
 8003f24:	2302      	movs	r3, #2
 8003f26:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	f003 0320 	and.w	r3, r3, #32
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d008      	beq.n	8003f44 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f34:	015a      	lsls	r2, r3, #5
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	4413      	add	r3, r2
 8003f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f3e:	461a      	mov	r2, r3
 8003f40:	2320      	movs	r3, #32
 8003f42:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d009      	beq.n	8003f62 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f50:	015a      	lsls	r2, r3, #5
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	4413      	add	r3, r2
 8003f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f60:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f64:	3301      	adds	r3, #1
 8003f66:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f6a:	085b      	lsrs	r3, r3, #1
 8003f6c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f47f af62 	bne.w	8003e3a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f005 ff1c 	bl	8009db8 <USB_ReadInterrupts>
 8003f80:	4603      	mov	r3, r0
 8003f82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f86:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f8a:	f040 80db 	bne.w	8004144 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f005 ff3d 	bl	8009e12 <USB_ReadDevAllInEpInterrupt>
 8003f98:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003f9e:	e0cd      	b.n	800413c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 80c2 	beq.w	8004130 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb2:	b2d2      	uxtb	r2, r2
 8003fb4:	4611      	mov	r1, r2
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f005 ff63 	bl	8009e82 <USB_ReadDevInEPInterrupt>
 8003fbc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d057      	beq.n	8004078 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fca:	f003 030f 	and.w	r3, r3, #15
 8003fce:	2201      	movs	r2, #1
 8003fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	43db      	mvns	r3, r3
 8003fe2:	69f9      	ldr	r1, [r7, #28]
 8003fe4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fe8:	4013      	ands	r3, r2
 8003fea:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fee:	015a      	lsls	r2, r3, #5
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d132      	bne.n	800406c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004006:	6879      	ldr	r1, [r7, #4]
 8004008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800400a:	4613      	mov	r3, r2
 800400c:	00db      	lsls	r3, r3, #3
 800400e:	4413      	add	r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	440b      	add	r3, r1
 8004014:	3348      	adds	r3, #72	; 0x48
 8004016:	6819      	ldr	r1, [r3, #0]
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800401c:	4613      	mov	r3, r2
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	4413      	add	r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	4403      	add	r3, r0
 8004026:	3344      	adds	r3, #68	; 0x44
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4419      	add	r1, r3
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004030:	4613      	mov	r3, r2
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	4413      	add	r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	4403      	add	r3, r0
 800403a:	3348      	adds	r3, #72	; 0x48
 800403c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004040:	2b00      	cmp	r3, #0
 8004042:	d113      	bne.n	800406c <HAL_PCD_IRQHandler+0x3a2>
 8004044:	6879      	ldr	r1, [r7, #4]
 8004046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004048:	4613      	mov	r3, r2
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	4413      	add	r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	440b      	add	r3, r1
 8004052:	334c      	adds	r3, #76	; 0x4c
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d108      	bne.n	800406c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6818      	ldr	r0, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004064:	461a      	mov	r2, r3
 8004066:	2101      	movs	r1, #1
 8004068:	f005 ff6c 	bl	8009f44 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800406c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406e:	b2db      	uxtb	r3, r3
 8004070:	4619      	mov	r1, r3
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f008 fa93 	bl	800c59e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	f003 0308 	and.w	r3, r3, #8
 800407e:	2b00      	cmp	r3, #0
 8004080:	d008      	beq.n	8004094 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004084:	015a      	lsls	r2, r3, #5
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	4413      	add	r3, r2
 800408a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800408e:	461a      	mov	r2, r3
 8004090:	2308      	movs	r3, #8
 8004092:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	f003 0310 	and.w	r3, r3, #16
 800409a:	2b00      	cmp	r3, #0
 800409c:	d008      	beq.n	80040b0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a0:	015a      	lsls	r2, r3, #5
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	4413      	add	r3, r2
 80040a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040aa:	461a      	mov	r2, r3
 80040ac:	2310      	movs	r3, #16
 80040ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d008      	beq.n	80040cc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80040ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040bc:	015a      	lsls	r2, r3, #5
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	4413      	add	r3, r2
 80040c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040c6:	461a      	mov	r2, r3
 80040c8:	2340      	movs	r3, #64	; 0x40
 80040ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d023      	beq.n	800411e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80040d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040d8:	6a38      	ldr	r0, [r7, #32]
 80040da:	f004 ff4b 	bl	8008f74 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80040de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040e0:	4613      	mov	r3, r2
 80040e2:	00db      	lsls	r3, r3, #3
 80040e4:	4413      	add	r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	3338      	adds	r3, #56	; 0x38
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	4413      	add	r3, r2
 80040ee:	3304      	adds	r3, #4
 80040f0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	78db      	ldrb	r3, [r3, #3]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d108      	bne.n	800410c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	2200      	movs	r2, #0
 80040fe:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004102:	b2db      	uxtb	r3, r3
 8004104:	4619      	mov	r1, r3
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f008 fae0 	bl	800c6cc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800410c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410e:	015a      	lsls	r2, r3, #5
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	4413      	add	r3, r2
 8004114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004118:	461a      	mov	r2, r3
 800411a:	2302      	movs	r3, #2
 800411c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004124:	2b00      	cmp	r3, #0
 8004126:	d003      	beq.n	8004130 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004128:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 fcea 	bl	8004b04 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004132:	3301      	adds	r3, #1
 8004134:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004138:	085b      	lsrs	r3, r3, #1
 800413a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800413c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800413e:	2b00      	cmp	r3, #0
 8004140:	f47f af2e 	bne.w	8003fa0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4618      	mov	r0, r3
 800414a:	f005 fe35 	bl	8009db8 <USB_ReadInterrupts>
 800414e:	4603      	mov	r3, r0
 8004150:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004154:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004158:	d122      	bne.n	80041a0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	69fa      	ldr	r2, [r7, #28]
 8004164:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004168:	f023 0301 	bic.w	r3, r3, #1
 800416c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004174:	2b01      	cmp	r3, #1
 8004176:	d108      	bne.n	800418a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004180:	2100      	movs	r1, #0
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 fef6 	bl	8004f74 <HAL_PCDEx_LPM_Callback>
 8004188:	e002      	b.n	8004190 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f008 fa7e 	bl	800c68c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	695a      	ldr	r2, [r3, #20]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800419e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4618      	mov	r0, r3
 80041a6:	f005 fe07 	bl	8009db8 <USB_ReadInterrupts>
 80041aa:	4603      	mov	r3, r0
 80041ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041b4:	d112      	bne.n	80041dc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d102      	bne.n	80041cc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f008 fa3a 	bl	800c640 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	695a      	ldr	r2, [r3, #20]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80041da:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4618      	mov	r0, r3
 80041e2:	f005 fde9 	bl	8009db8 <USB_ReadInterrupts>
 80041e6:	4603      	mov	r3, r0
 80041e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041f0:	d121      	bne.n	8004236 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	695a      	ldr	r2, [r3, #20]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004200:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004208:	2b00      	cmp	r3, #0
 800420a:	d111      	bne.n	8004230 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421a:	089b      	lsrs	r3, r3, #2
 800421c:	f003 020f 	and.w	r2, r3, #15
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004226:	2101      	movs	r1, #1
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 fea3 	bl	8004f74 <HAL_PCDEx_LPM_Callback>
 800422e:	e002      	b.n	8004236 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f008 fa05 	bl	800c640 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4618      	mov	r0, r3
 800423c:	f005 fdbc 	bl	8009db8 <USB_ReadInterrupts>
 8004240:	4603      	mov	r3, r0
 8004242:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800424a:	f040 80b7 	bne.w	80043bc <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	69fa      	ldr	r2, [r7, #28]
 8004258:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800425c:	f023 0301 	bic.w	r3, r3, #1
 8004260:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2110      	movs	r1, #16
 8004268:	4618      	mov	r0, r3
 800426a:	f004 fe83 	bl	8008f74 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800426e:	2300      	movs	r3, #0
 8004270:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004272:	e046      	b.n	8004302 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004276:	015a      	lsls	r2, r3, #5
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	4413      	add	r3, r2
 800427c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004280:	461a      	mov	r2, r3
 8004282:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004286:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800428a:	015a      	lsls	r2, r3, #5
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	4413      	add	r3, r2
 8004290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004298:	0151      	lsls	r1, r2, #5
 800429a:	69fa      	ldr	r2, [r7, #28]
 800429c:	440a      	add	r2, r1
 800429e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80042a6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80042a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042aa:	015a      	lsls	r2, r3, #5
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	4413      	add	r3, r2
 80042b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042b4:	461a      	mov	r2, r3
 80042b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80042ba:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80042bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042be:	015a      	lsls	r2, r3, #5
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	4413      	add	r3, r2
 80042c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042cc:	0151      	lsls	r1, r2, #5
 80042ce:	69fa      	ldr	r2, [r7, #28]
 80042d0:	440a      	add	r2, r1
 80042d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80042da:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80042dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042de:	015a      	lsls	r2, r3, #5
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	4413      	add	r3, r2
 80042e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042ec:	0151      	lsls	r1, r2, #5
 80042ee:	69fa      	ldr	r2, [r7, #28]
 80042f0:	440a      	add	r2, r1
 80042f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80042fa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042fe:	3301      	adds	r3, #1
 8004300:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004308:	429a      	cmp	r2, r3
 800430a:	d3b3      	bcc.n	8004274 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004312:	69db      	ldr	r3, [r3, #28]
 8004314:	69fa      	ldr	r2, [r7, #28]
 8004316:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800431a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800431e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004324:	2b00      	cmp	r3, #0
 8004326:	d016      	beq.n	8004356 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800432e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004332:	69fa      	ldr	r2, [r7, #28]
 8004334:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004338:	f043 030b 	orr.w	r3, r3, #11
 800433c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004348:	69fa      	ldr	r2, [r7, #28]
 800434a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800434e:	f043 030b 	orr.w	r3, r3, #11
 8004352:	6453      	str	r3, [r2, #68]	; 0x44
 8004354:	e015      	b.n	8004382 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800435c:	695a      	ldr	r2, [r3, #20]
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004364:	4619      	mov	r1, r3
 8004366:	f242 032b 	movw	r3, #8235	; 0x202b
 800436a:	4313      	orrs	r3, r2
 800436c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	69fa      	ldr	r2, [r7, #28]
 8004378:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800437c:	f043 030b 	orr.w	r3, r3, #11
 8004380:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	69fa      	ldr	r2, [r7, #28]
 800438c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004390:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004394:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6818      	ldr	r0, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80043a6:	461a      	mov	r2, r3
 80043a8:	f005 fdcc 	bl	8009f44 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	695a      	ldr	r2, [r3, #20]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80043ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f005 fcf9 	bl	8009db8 <USB_ReadInterrupts>
 80043c6:	4603      	mov	r3, r0
 80043c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043d0:	d124      	bne.n	800441c <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f005 fd90 	bl	8009efc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4618      	mov	r0, r3
 80043e2:	f004 fe44 	bl	800906e <USB_GetDevSpeed>
 80043e6:	4603      	mov	r3, r0
 80043e8:	461a      	mov	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681c      	ldr	r4, [r3, #0]
 80043f2:	f001 fd9f 	bl	8005f34 <HAL_RCC_GetHCLKFreq>
 80043f6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	461a      	mov	r2, r3
 8004400:	4620      	mov	r0, r4
 8004402:	f004 fb49 	bl	8008a98 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f008 f8f1 	bl	800c5ee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	695a      	ldr	r2, [r3, #20]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800441a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4618      	mov	r0, r3
 8004422:	f005 fcc9 	bl	8009db8 <USB_ReadInterrupts>
 8004426:	4603      	mov	r3, r0
 8004428:	f003 0308 	and.w	r3, r3, #8
 800442c:	2b08      	cmp	r3, #8
 800442e:	d10a      	bne.n	8004446 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f008 f8ce 	bl	800c5d2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	695a      	ldr	r2, [r3, #20]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f002 0208 	and.w	r2, r2, #8
 8004444:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4618      	mov	r0, r3
 800444c:	f005 fcb4 	bl	8009db8 <USB_ReadInterrupts>
 8004450:	4603      	mov	r3, r0
 8004452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004456:	2b80      	cmp	r3, #128	; 0x80
 8004458:	d122      	bne.n	80044a0 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800445a:	6a3b      	ldr	r3, [r7, #32]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004462:	6a3b      	ldr	r3, [r7, #32]
 8004464:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004466:	2301      	movs	r3, #1
 8004468:	627b      	str	r3, [r7, #36]	; 0x24
 800446a:	e014      	b.n	8004496 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800446c:	6879      	ldr	r1, [r7, #4]
 800446e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004470:	4613      	mov	r3, r2
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	4413      	add	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	440b      	add	r3, r1
 800447a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d105      	bne.n	8004490 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004486:	b2db      	uxtb	r3, r3
 8004488:	4619      	mov	r1, r3
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 fb09 	bl	8004aa2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004492:	3301      	adds	r3, #1
 8004494:	627b      	str	r3, [r7, #36]	; 0x24
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800449c:	429a      	cmp	r2, r3
 800449e:	d3e5      	bcc.n	800446c <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4618      	mov	r0, r3
 80044a6:	f005 fc87 	bl	8009db8 <USB_ReadInterrupts>
 80044aa:	4603      	mov	r3, r0
 80044ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044b4:	d13b      	bne.n	800452e <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044b6:	2301      	movs	r3, #1
 80044b8:	627b      	str	r3, [r7, #36]	; 0x24
 80044ba:	e02b      	b.n	8004514 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80044bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044be:	015a      	lsls	r2, r3, #5
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	4413      	add	r3, r2
 80044c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80044cc:	6879      	ldr	r1, [r7, #4]
 80044ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044d0:	4613      	mov	r3, r2
 80044d2:	00db      	lsls	r3, r3, #3
 80044d4:	4413      	add	r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	440b      	add	r3, r1
 80044da:	3340      	adds	r3, #64	; 0x40
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d115      	bne.n	800450e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80044e2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	da12      	bge.n	800450e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80044e8:	6879      	ldr	r1, [r7, #4]
 80044ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ec:	4613      	mov	r3, r2
 80044ee:	00db      	lsls	r3, r3, #3
 80044f0:	4413      	add	r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	440b      	add	r3, r1
 80044f6:	333f      	adds	r3, #63	; 0x3f
 80044f8:	2201      	movs	r2, #1
 80044fa:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80044fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004504:	b2db      	uxtb	r3, r3
 8004506:	4619      	mov	r1, r3
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 faca 	bl	8004aa2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004510:	3301      	adds	r3, #1
 8004512:	627b      	str	r3, [r7, #36]	; 0x24
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800451a:	429a      	cmp	r2, r3
 800451c:	d3ce      	bcc.n	80044bc <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	695a      	ldr	r2, [r3, #20]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800452c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4618      	mov	r0, r3
 8004534:	f005 fc40 	bl	8009db8 <USB_ReadInterrupts>
 8004538:	4603      	mov	r3, r0
 800453a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800453e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004542:	d155      	bne.n	80045f0 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004544:	2301      	movs	r3, #1
 8004546:	627b      	str	r3, [r7, #36]	; 0x24
 8004548:	e045      	b.n	80045d6 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800454a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454c:	015a      	lsls	r2, r3, #5
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	4413      	add	r3, r2
 8004552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800455a:	6879      	ldr	r1, [r7, #4]
 800455c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800455e:	4613      	mov	r3, r2
 8004560:	00db      	lsls	r3, r3, #3
 8004562:	4413      	add	r3, r2
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	440b      	add	r3, r1
 8004568:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d12e      	bne.n	80045d0 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004572:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004574:	2b00      	cmp	r3, #0
 8004576:	da2b      	bge.n	80045d0 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004584:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004588:	429a      	cmp	r2, r3
 800458a:	d121      	bne.n	80045d0 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800458c:	6879      	ldr	r1, [r7, #4]
 800458e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004590:	4613      	mov	r3, r2
 8004592:	00db      	lsls	r3, r3, #3
 8004594:	4413      	add	r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	440b      	add	r3, r1
 800459a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800459e:	2201      	movs	r2, #1
 80045a0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80045a2:	6a3b      	ldr	r3, [r7, #32]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80045aa:	6a3b      	ldr	r3, [r7, #32]
 80045ac:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80045ae:	6a3b      	ldr	r3, [r7, #32]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10a      	bne.n	80045d0 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	69fa      	ldr	r2, [r7, #28]
 80045c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045cc:	6053      	str	r3, [r2, #4]
            break;
 80045ce:	e007      	b.n	80045e0 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80045d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d2:	3301      	adds	r3, #1
 80045d4:	627b      	str	r3, [r7, #36]	; 0x24
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045dc:	429a      	cmp	r2, r3
 80045de:	d3b4      	bcc.n	800454a <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	695a      	ldr	r2, [r3, #20]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80045ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f005 fbdf 	bl	8009db8 <USB_ReadInterrupts>
 80045fa:	4603      	mov	r3, r0
 80045fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004604:	d10a      	bne.n	800461c <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f008 f872 	bl	800c6f0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	695a      	ldr	r2, [r3, #20]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800461a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4618      	mov	r0, r3
 8004622:	f005 fbc9 	bl	8009db8 <USB_ReadInterrupts>
 8004626:	4603      	mov	r3, r0
 8004628:	f003 0304 	and.w	r3, r3, #4
 800462c:	2b04      	cmp	r3, #4
 800462e:	d115      	bne.n	800465c <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	f003 0304 	and.w	r3, r3, #4
 800463e:	2b00      	cmp	r3, #0
 8004640:	d002      	beq.n	8004648 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f008 f862 	bl	800c70c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	6859      	ldr	r1, [r3, #4]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	430a      	orrs	r2, r1
 8004656:	605a      	str	r2, [r3, #4]
 8004658:	e000      	b.n	800465c <HAL_PCD_IRQHandler+0x992>
      return;
 800465a:	bf00      	nop
    }
  }
}
 800465c:	3734      	adds	r7, #52	; 0x34
 800465e:	46bd      	mov	sp, r7
 8004660:	bd90      	pop	{r4, r7, pc}

08004662 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004662:	b580      	push	{r7, lr}
 8004664:	b082      	sub	sp, #8
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
 800466a:	460b      	mov	r3, r1
 800466c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004674:	2b01      	cmp	r3, #1
 8004676:	d101      	bne.n	800467c <HAL_PCD_SetAddress+0x1a>
 8004678:	2302      	movs	r3, #2
 800467a:	e013      	b.n	80046a4 <HAL_PCD_SetAddress+0x42>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	78fa      	ldrb	r2, [r7, #3]
 8004688:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	78fa      	ldrb	r2, [r7, #3]
 8004692:	4611      	mov	r1, r2
 8004694:	4618      	mov	r0, r3
 8004696:	f005 fb27 	bl	8009ce8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3708      	adds	r7, #8
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	4608      	mov	r0, r1
 80046b6:	4611      	mov	r1, r2
 80046b8:	461a      	mov	r2, r3
 80046ba:	4603      	mov	r3, r0
 80046bc:	70fb      	strb	r3, [r7, #3]
 80046be:	460b      	mov	r3, r1
 80046c0:	803b      	strh	r3, [r7, #0]
 80046c2:	4613      	mov	r3, r2
 80046c4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80046c6:	2300      	movs	r3, #0
 80046c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80046ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	da0f      	bge.n	80046f2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046d2:	78fb      	ldrb	r3, [r7, #3]
 80046d4:	f003 020f 	and.w	r2, r3, #15
 80046d8:	4613      	mov	r3, r2
 80046da:	00db      	lsls	r3, r3, #3
 80046dc:	4413      	add	r3, r2
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	3338      	adds	r3, #56	; 0x38
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	4413      	add	r3, r2
 80046e6:	3304      	adds	r3, #4
 80046e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2201      	movs	r2, #1
 80046ee:	705a      	strb	r2, [r3, #1]
 80046f0:	e00f      	b.n	8004712 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046f2:	78fb      	ldrb	r3, [r7, #3]
 80046f4:	f003 020f 	and.w	r2, r3, #15
 80046f8:	4613      	mov	r3, r2
 80046fa:	00db      	lsls	r3, r3, #3
 80046fc:	4413      	add	r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	4413      	add	r3, r2
 8004708:	3304      	adds	r3, #4
 800470a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004712:	78fb      	ldrb	r3, [r7, #3]
 8004714:	f003 030f 	and.w	r3, r3, #15
 8004718:	b2da      	uxtb	r2, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800471e:	883a      	ldrh	r2, [r7, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	78ba      	ldrb	r2, [r7, #2]
 8004728:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	785b      	ldrb	r3, [r3, #1]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d004      	beq.n	800473c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	b29a      	uxth	r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800473c:	78bb      	ldrb	r3, [r7, #2]
 800473e:	2b02      	cmp	r3, #2
 8004740:	d102      	bne.n	8004748 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800474e:	2b01      	cmp	r3, #1
 8004750:	d101      	bne.n	8004756 <HAL_PCD_EP_Open+0xaa>
 8004752:	2302      	movs	r3, #2
 8004754:	e00e      	b.n	8004774 <HAL_PCD_EP_Open+0xc8>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68f9      	ldr	r1, [r7, #12]
 8004764:	4618      	mov	r0, r3
 8004766:	f004 fca7 	bl	80090b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004772:	7afb      	ldrb	r3, [r7, #11]
}
 8004774:	4618      	mov	r0, r3
 8004776:	3710      	adds	r7, #16
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	460b      	mov	r3, r1
 8004786:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004788:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800478c:	2b00      	cmp	r3, #0
 800478e:	da0f      	bge.n	80047b0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004790:	78fb      	ldrb	r3, [r7, #3]
 8004792:	f003 020f 	and.w	r2, r3, #15
 8004796:	4613      	mov	r3, r2
 8004798:	00db      	lsls	r3, r3, #3
 800479a:	4413      	add	r3, r2
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	3338      	adds	r3, #56	; 0x38
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	4413      	add	r3, r2
 80047a4:	3304      	adds	r3, #4
 80047a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2201      	movs	r2, #1
 80047ac:	705a      	strb	r2, [r3, #1]
 80047ae:	e00f      	b.n	80047d0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047b0:	78fb      	ldrb	r3, [r7, #3]
 80047b2:	f003 020f 	and.w	r2, r3, #15
 80047b6:	4613      	mov	r3, r2
 80047b8:	00db      	lsls	r3, r3, #3
 80047ba:	4413      	add	r3, r2
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	4413      	add	r3, r2
 80047c6:	3304      	adds	r3, #4
 80047c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80047d0:	78fb      	ldrb	r3, [r7, #3]
 80047d2:	f003 030f 	and.w	r3, r3, #15
 80047d6:	b2da      	uxtb	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d101      	bne.n	80047ea <HAL_PCD_EP_Close+0x6e>
 80047e6:	2302      	movs	r3, #2
 80047e8:	e00e      	b.n	8004808 <HAL_PCD_EP_Close+0x8c>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68f9      	ldr	r1, [r7, #12]
 80047f8:	4618      	mov	r0, r3
 80047fa:	f004 fce5 	bl	80091c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	3710      	adds	r7, #16
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b086      	sub	sp, #24
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	607a      	str	r2, [r7, #4]
 800481a:	603b      	str	r3, [r7, #0]
 800481c:	460b      	mov	r3, r1
 800481e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004820:	7afb      	ldrb	r3, [r7, #11]
 8004822:	f003 020f 	and.w	r2, r3, #15
 8004826:	4613      	mov	r3, r2
 8004828:	00db      	lsls	r3, r3, #3
 800482a:	4413      	add	r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	4413      	add	r3, r2
 8004836:	3304      	adds	r3, #4
 8004838:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	2200      	movs	r2, #0
 800484a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	2200      	movs	r2, #0
 8004850:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004852:	7afb      	ldrb	r3, [r7, #11]
 8004854:	f003 030f 	and.w	r3, r3, #15
 8004858:	b2da      	uxtb	r2, r3
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d102      	bne.n	800486c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6818      	ldr	r0, [r3, #0]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	b2db      	uxtb	r3, r3
 8004876:	461a      	mov	r2, r3
 8004878:	6979      	ldr	r1, [r7, #20]
 800487a:	f004 fd81 	bl	8009380 <USB_EPStartXfer>

  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3718      	adds	r7, #24
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	460b      	mov	r3, r1
 8004892:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004894:	78fb      	ldrb	r3, [r7, #3]
 8004896:	f003 020f 	and.w	r2, r3, #15
 800489a:	6879      	ldr	r1, [r7, #4]
 800489c:	4613      	mov	r3, r2
 800489e:	00db      	lsls	r3, r3, #3
 80048a0:	4413      	add	r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	440b      	add	r3, r1
 80048a6:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80048aa:	681b      	ldr	r3, [r3, #0]
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b086      	sub	sp, #24
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	607a      	str	r2, [r7, #4]
 80048c2:	603b      	str	r3, [r7, #0]
 80048c4:	460b      	mov	r3, r1
 80048c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048c8:	7afb      	ldrb	r3, [r7, #11]
 80048ca:	f003 020f 	and.w	r2, r3, #15
 80048ce:	4613      	mov	r3, r2
 80048d0:	00db      	lsls	r3, r3, #3
 80048d2:	4413      	add	r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	3338      	adds	r3, #56	; 0x38
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	4413      	add	r3, r2
 80048dc:	3304      	adds	r3, #4
 80048de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	683a      	ldr	r2, [r7, #0]
 80048ea:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	2200      	movs	r2, #0
 80048f0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	2201      	movs	r2, #1
 80048f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048f8:	7afb      	ldrb	r3, [r7, #11]
 80048fa:	f003 030f 	and.w	r3, r3, #15
 80048fe:	b2da      	uxtb	r2, r3
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d102      	bne.n	8004912 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6818      	ldr	r0, [r3, #0]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	b2db      	uxtb	r3, r3
 800491c:	461a      	mov	r2, r3
 800491e:	6979      	ldr	r1, [r7, #20]
 8004920:	f004 fd2e 	bl	8009380 <USB_EPStartXfer>

  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3718      	adds	r7, #24
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800492e:	b580      	push	{r7, lr}
 8004930:	b084      	sub	sp, #16
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
 8004936:	460b      	mov	r3, r1
 8004938:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800493a:	78fb      	ldrb	r3, [r7, #3]
 800493c:	f003 020f 	and.w	r2, r3, #15
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	429a      	cmp	r2, r3
 8004946:	d901      	bls.n	800494c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e050      	b.n	80049ee <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800494c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004950:	2b00      	cmp	r3, #0
 8004952:	da0f      	bge.n	8004974 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004954:	78fb      	ldrb	r3, [r7, #3]
 8004956:	f003 020f 	and.w	r2, r3, #15
 800495a:	4613      	mov	r3, r2
 800495c:	00db      	lsls	r3, r3, #3
 800495e:	4413      	add	r3, r2
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	3338      	adds	r3, #56	; 0x38
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	4413      	add	r3, r2
 8004968:	3304      	adds	r3, #4
 800496a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2201      	movs	r2, #1
 8004970:	705a      	strb	r2, [r3, #1]
 8004972:	e00d      	b.n	8004990 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004974:	78fa      	ldrb	r2, [r7, #3]
 8004976:	4613      	mov	r3, r2
 8004978:	00db      	lsls	r3, r3, #3
 800497a:	4413      	add	r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	4413      	add	r3, r2
 8004986:	3304      	adds	r3, #4
 8004988:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2200      	movs	r2, #0
 800498e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2201      	movs	r2, #1
 8004994:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004996:	78fb      	ldrb	r3, [r7, #3]
 8004998:	f003 030f 	and.w	r3, r3, #15
 800499c:	b2da      	uxtb	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d101      	bne.n	80049b0 <HAL_PCD_EP_SetStall+0x82>
 80049ac:	2302      	movs	r3, #2
 80049ae:	e01e      	b.n	80049ee <HAL_PCD_EP_SetStall+0xc0>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68f9      	ldr	r1, [r7, #12]
 80049be:	4618      	mov	r0, r3
 80049c0:	f005 f8be 	bl	8009b40 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80049c4:	78fb      	ldrb	r3, [r7, #3]
 80049c6:	f003 030f 	and.w	r3, r3, #15
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10a      	bne.n	80049e4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6818      	ldr	r0, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	b2d9      	uxtb	r1, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80049de:	461a      	mov	r2, r3
 80049e0:	f005 fab0 	bl	8009f44 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3710      	adds	r7, #16
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b084      	sub	sp, #16
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
 80049fe:	460b      	mov	r3, r1
 8004a00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004a02:	78fb      	ldrb	r3, [r7, #3]
 8004a04:	f003 020f 	and.w	r2, r3, #15
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d901      	bls.n	8004a14 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e042      	b.n	8004a9a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004a14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	da0f      	bge.n	8004a3c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a1c:	78fb      	ldrb	r3, [r7, #3]
 8004a1e:	f003 020f 	and.w	r2, r3, #15
 8004a22:	4613      	mov	r3, r2
 8004a24:	00db      	lsls	r3, r3, #3
 8004a26:	4413      	add	r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	3338      	adds	r3, #56	; 0x38
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	4413      	add	r3, r2
 8004a30:	3304      	adds	r3, #4
 8004a32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2201      	movs	r2, #1
 8004a38:	705a      	strb	r2, [r3, #1]
 8004a3a:	e00f      	b.n	8004a5c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a3c:	78fb      	ldrb	r3, [r7, #3]
 8004a3e:	f003 020f 	and.w	r2, r3, #15
 8004a42:	4613      	mov	r3, r2
 8004a44:	00db      	lsls	r3, r3, #3
 8004a46:	4413      	add	r3, r2
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	4413      	add	r3, r2
 8004a52:	3304      	adds	r3, #4
 8004a54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a62:	78fb      	ldrb	r3, [r7, #3]
 8004a64:	f003 030f 	and.w	r3, r3, #15
 8004a68:	b2da      	uxtb	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d101      	bne.n	8004a7c <HAL_PCD_EP_ClrStall+0x86>
 8004a78:	2302      	movs	r3, #2
 8004a7a:	e00e      	b.n	8004a9a <HAL_PCD_EP_ClrStall+0xa4>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68f9      	ldr	r1, [r7, #12]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f005 f8c6 	bl	8009c1c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}

08004aa2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b084      	sub	sp, #16
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
 8004aaa:	460b      	mov	r3, r1
 8004aac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004aae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	da0c      	bge.n	8004ad0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ab6:	78fb      	ldrb	r3, [r7, #3]
 8004ab8:	f003 020f 	and.w	r2, r3, #15
 8004abc:	4613      	mov	r3, r2
 8004abe:	00db      	lsls	r3, r3, #3
 8004ac0:	4413      	add	r3, r2
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	3338      	adds	r3, #56	; 0x38
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	4413      	add	r3, r2
 8004aca:	3304      	adds	r3, #4
 8004acc:	60fb      	str	r3, [r7, #12]
 8004ace:	e00c      	b.n	8004aea <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ad0:	78fb      	ldrb	r3, [r7, #3]
 8004ad2:	f003 020f 	and.w	r2, r3, #15
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	00db      	lsls	r3, r3, #3
 8004ada:	4413      	add	r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	3304      	adds	r3, #4
 8004ae8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68f9      	ldr	r1, [r7, #12]
 8004af0:	4618      	mov	r0, r3
 8004af2:	f004 fee5 	bl	80098c0 <USB_EPStopXfer>
 8004af6:	4603      	mov	r3, r0
 8004af8:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004afa:	7afb      	ldrb	r3, [r7, #11]
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3710      	adds	r7, #16
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b08a      	sub	sp, #40	; 0x28
 8004b08:	af02      	add	r7, sp, #8
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004b18:	683a      	ldr	r2, [r7, #0]
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	00db      	lsls	r3, r3, #3
 8004b1e:	4413      	add	r3, r2
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	3338      	adds	r3, #56	; 0x38
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	4413      	add	r3, r2
 8004b28:	3304      	adds	r3, #4
 8004b2a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	695a      	ldr	r2, [r3, #20]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d901      	bls.n	8004b3c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e06c      	b.n	8004c16 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	691a      	ldr	r2, [r3, #16]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	695b      	ldr	r3, [r3, #20]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	69fa      	ldr	r2, [r7, #28]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d902      	bls.n	8004b58 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	3303      	adds	r3, #3
 8004b5c:	089b      	lsrs	r3, r3, #2
 8004b5e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b60:	e02b      	b.n	8004bba <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	691a      	ldr	r2, [r3, #16]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	69fa      	ldr	r2, [r7, #28]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d902      	bls.n	8004b7e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	3303      	adds	r3, #3
 8004b82:	089b      	lsrs	r3, r3, #2
 8004b84:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	68d9      	ldr	r1, [r3, #12]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	b2da      	uxtb	r2, r3
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	9300      	str	r3, [sp, #0]
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	6978      	ldr	r0, [r7, #20]
 8004b9e:	f004 ff39 	bl	8009a14 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	68da      	ldr	r2, [r3, #12]
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	441a      	add	r2, r3
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	695a      	ldr	r2, [r3, #20]
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	441a      	add	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	015a      	lsls	r2, r3, #5
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004bca:	69ba      	ldr	r2, [r7, #24]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d809      	bhi.n	8004be4 <PCD_WriteEmptyTxFifo+0xe0>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	695a      	ldr	r2, [r3, #20]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d203      	bcs.n	8004be4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1be      	bne.n	8004b62 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	691a      	ldr	r2, [r3, #16]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	695b      	ldr	r3, [r3, #20]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d811      	bhi.n	8004c14 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	f003 030f 	and.w	r3, r3, #15
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	43db      	mvns	r3, r3
 8004c0a:	6939      	ldr	r1, [r7, #16]
 8004c0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c10:	4013      	ands	r3, r2
 8004c12:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3720      	adds	r7, #32
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
	...

08004c20 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b088      	sub	sp, #32
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	333c      	adds	r3, #60	; 0x3c
 8004c38:	3304      	adds	r3, #4
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	015a      	lsls	r2, r3, #5
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	4413      	add	r3, r2
 8004c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d17b      	bne.n	8004d4e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	f003 0308 	and.w	r3, r3, #8
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d015      	beq.n	8004c8c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	4a61      	ldr	r2, [pc, #388]	; (8004de8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	f240 80b9 	bls.w	8004ddc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f000 80b3 	beq.w	8004ddc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	015a      	lsls	r2, r3, #5
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c82:	461a      	mov	r2, r3
 8004c84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c88:	6093      	str	r3, [r2, #8]
 8004c8a:	e0a7      	b.n	8004ddc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	f003 0320 	and.w	r3, r3, #32
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d009      	beq.n	8004caa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	015a      	lsls	r2, r3, #5
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	2320      	movs	r3, #32
 8004ca6:	6093      	str	r3, [r2, #8]
 8004ca8:	e098      	b.n	8004ddc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f040 8093 	bne.w	8004ddc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	4a4b      	ldr	r2, [pc, #300]	; (8004de8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d90f      	bls.n	8004cde <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00a      	beq.n	8004cde <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	015a      	lsls	r2, r3, #5
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	4413      	add	r3, r2
 8004cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cda:	6093      	str	r3, [r2, #8]
 8004cdc:	e07e      	b.n	8004ddc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004cde:	683a      	ldr	r2, [r7, #0]
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	00db      	lsls	r3, r3, #3
 8004ce4:	4413      	add	r3, r2
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	4413      	add	r3, r2
 8004cf0:	3304      	adds	r3, #4
 8004cf2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6a1a      	ldr	r2, [r3, #32]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	0159      	lsls	r1, r3, #5
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	440b      	add	r3, r1
 8004d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d0a:	1ad2      	subs	r2, r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d114      	bne.n	8004d40 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d109      	bne.n	8004d32 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6818      	ldr	r0, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004d28:	461a      	mov	r2, r3
 8004d2a:	2101      	movs	r1, #1
 8004d2c:	f005 f90a 	bl	8009f44 <USB_EP0_OutStart>
 8004d30:	e006      	b.n	8004d40 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	68da      	ldr	r2, [r3, #12]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	441a      	add	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	4619      	mov	r1, r3
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f007 fc0e 	bl	800c568 <HAL_PCD_DataOutStageCallback>
 8004d4c:	e046      	b.n	8004ddc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	4a26      	ldr	r2, [pc, #152]	; (8004dec <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d124      	bne.n	8004da0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00a      	beq.n	8004d76 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	015a      	lsls	r2, r3, #5
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	4413      	add	r3, r2
 8004d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d72:	6093      	str	r3, [r2, #8]
 8004d74:	e032      	b.n	8004ddc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	f003 0320 	and.w	r3, r3, #32
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d008      	beq.n	8004d92 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	015a      	lsls	r2, r3, #5
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	4413      	add	r3, r2
 8004d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	2320      	movs	r3, #32
 8004d90:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	4619      	mov	r1, r3
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f007 fbe5 	bl	800c568 <HAL_PCD_DataOutStageCallback>
 8004d9e:	e01d      	b.n	8004ddc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d114      	bne.n	8004dd0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004da6:	6879      	ldr	r1, [r7, #4]
 8004da8:	683a      	ldr	r2, [r7, #0]
 8004daa:	4613      	mov	r3, r2
 8004dac:	00db      	lsls	r3, r3, #3
 8004dae:	4413      	add	r3, r2
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	440b      	add	r3, r1
 8004db4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d108      	bne.n	8004dd0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6818      	ldr	r0, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004dc8:	461a      	mov	r2, r3
 8004dca:	2100      	movs	r1, #0
 8004dcc:	f005 f8ba 	bl	8009f44 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f007 fbc6 	bl	800c568 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3720      	adds	r7, #32
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	4f54300a 	.word	0x4f54300a
 8004dec:	4f54310a 	.word	0x4f54310a

08004df0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b086      	sub	sp, #24
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	333c      	adds	r3, #60	; 0x3c
 8004e08:	3304      	adds	r3, #4
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	015a      	lsls	r2, r3, #5
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	4413      	add	r3, r2
 8004e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	4a15      	ldr	r2, [pc, #84]	; (8004e78 <PCD_EP_OutSetupPacket_int+0x88>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d90e      	bls.n	8004e44 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d009      	beq.n	8004e44 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	015a      	lsls	r2, r3, #5
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	4413      	add	r3, r2
 8004e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e42:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f007 fb7d 	bl	800c544 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	4a0a      	ldr	r2, [pc, #40]	; (8004e78 <PCD_EP_OutSetupPacket_int+0x88>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d90c      	bls.n	8004e6c <PCD_EP_OutSetupPacket_int+0x7c>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d108      	bne.n	8004e6c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6818      	ldr	r0, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004e64:	461a      	mov	r2, r3
 8004e66:	2101      	movs	r1, #1
 8004e68:	f005 f86c 	bl	8009f44 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3718      	adds	r7, #24
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	4f54300a 	.word	0x4f54300a

08004e7c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b085      	sub	sp, #20
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	460b      	mov	r3, r1
 8004e86:	70fb      	strb	r3, [r7, #3]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e92:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004e94:	78fb      	ldrb	r3, [r7, #3]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d107      	bne.n	8004eaa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004e9a:	883b      	ldrh	r3, [r7, #0]
 8004e9c:	0419      	lsls	r1, r3, #16
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68ba      	ldr	r2, [r7, #8]
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	629a      	str	r2, [r3, #40]	; 0x28
 8004ea8:	e028      	b.n	8004efc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb0:	0c1b      	lsrs	r3, r3, #16
 8004eb2:	68ba      	ldr	r2, [r7, #8]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004eb8:	2300      	movs	r3, #0
 8004eba:	73fb      	strb	r3, [r7, #15]
 8004ebc:	e00d      	b.n	8004eda <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	7bfb      	ldrb	r3, [r7, #15]
 8004ec4:	3340      	adds	r3, #64	; 0x40
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4413      	add	r3, r2
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	0c1b      	lsrs	r3, r3, #16
 8004ece:	68ba      	ldr	r2, [r7, #8]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004ed4:	7bfb      	ldrb	r3, [r7, #15]
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	73fb      	strb	r3, [r7, #15]
 8004eda:	7bfa      	ldrb	r2, [r7, #15]
 8004edc:	78fb      	ldrb	r3, [r7, #3]
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d3ec      	bcc.n	8004ebe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004ee4:	883b      	ldrh	r3, [r7, #0]
 8004ee6:	0418      	lsls	r0, r3, #16
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6819      	ldr	r1, [r3, #0]
 8004eec:	78fb      	ldrb	r3, [r7, #3]
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	68ba      	ldr	r2, [r7, #8]
 8004ef2:	4302      	orrs	r2, r0
 8004ef4:	3340      	adds	r3, #64	; 0x40
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	440b      	add	r3, r1
 8004efa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3714      	adds	r7, #20
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b083      	sub	sp, #12
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
 8004f12:	460b      	mov	r3, r1
 8004f14:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	887a      	ldrh	r2, [r7, #2]
 8004f1c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f5a:	4b05      	ldr	r3, [pc, #20]	; (8004f70 <HAL_PCDEx_ActivateLPM+0x44>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3714      	adds	r7, #20
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr
 8004f70:	10000003 	.word	0x10000003

08004f74 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004f94:	4b19      	ldr	r3, [pc, #100]	; (8004ffc <HAL_PWREx_ConfigSupply+0x70>)
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	f003 0304 	and.w	r3, r3, #4
 8004f9c:	2b04      	cmp	r3, #4
 8004f9e:	d00a      	beq.n	8004fb6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004fa0:	4b16      	ldr	r3, [pc, #88]	; (8004ffc <HAL_PWREx_ConfigSupply+0x70>)
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	f003 0307 	and.w	r3, r3, #7
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d001      	beq.n	8004fb2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e01f      	b.n	8004ff2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	e01d      	b.n	8004ff2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004fb6:	4b11      	ldr	r3, [pc, #68]	; (8004ffc <HAL_PWREx_ConfigSupply+0x70>)
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	f023 0207 	bic.w	r2, r3, #7
 8004fbe:	490f      	ldr	r1, [pc, #60]	; (8004ffc <HAL_PWREx_ConfigSupply+0x70>)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004fc6:	f7fd f987 	bl	80022d8 <HAL_GetTick>
 8004fca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004fcc:	e009      	b.n	8004fe2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004fce:	f7fd f983 	bl	80022d8 <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fdc:	d901      	bls.n	8004fe2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e007      	b.n	8004ff2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004fe2:	4b06      	ldr	r3, [pc, #24]	; (8004ffc <HAL_PWREx_ConfigSupply+0x70>)
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fee:	d1ee      	bne.n	8004fce <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3710      	adds	r7, #16
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	58024800 	.word	0x58024800

08005000 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005000:	b480      	push	{r7}
 8005002:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005004:	4b05      	ldr	r3, [pc, #20]	; (800501c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	4a04      	ldr	r2, [pc, #16]	; (800501c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800500a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800500e:	60d3      	str	r3, [r2, #12]
}
 8005010:	bf00      	nop
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	58024800 	.word	0x58024800

08005020 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b08c      	sub	sp, #48	; 0x30
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d102      	bne.n	8005034 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	f000 bc48 	b.w	80058c4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	2b00      	cmp	r3, #0
 800503e:	f000 8088 	beq.w	8005152 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005042:	4b99      	ldr	r3, [pc, #612]	; (80052a8 <HAL_RCC_OscConfig+0x288>)
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800504a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800504c:	4b96      	ldr	r3, [pc, #600]	; (80052a8 <HAL_RCC_OscConfig+0x288>)
 800504e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005050:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005054:	2b10      	cmp	r3, #16
 8005056:	d007      	beq.n	8005068 <HAL_RCC_OscConfig+0x48>
 8005058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800505a:	2b18      	cmp	r3, #24
 800505c:	d111      	bne.n	8005082 <HAL_RCC_OscConfig+0x62>
 800505e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005060:	f003 0303 	and.w	r3, r3, #3
 8005064:	2b02      	cmp	r3, #2
 8005066:	d10c      	bne.n	8005082 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005068:	4b8f      	ldr	r3, [pc, #572]	; (80052a8 <HAL_RCC_OscConfig+0x288>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d06d      	beq.n	8005150 <HAL_RCC_OscConfig+0x130>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d169      	bne.n	8005150 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	f000 bc21 	b.w	80058c4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800508a:	d106      	bne.n	800509a <HAL_RCC_OscConfig+0x7a>
 800508c:	4b86      	ldr	r3, [pc, #536]	; (80052a8 <HAL_RCC_OscConfig+0x288>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a85      	ldr	r2, [pc, #532]	; (80052a8 <HAL_RCC_OscConfig+0x288>)
 8005092:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005096:	6013      	str	r3, [r2, #0]
 8005098:	e02e      	b.n	80050f8 <HAL_RCC_OscConfig+0xd8>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10c      	bne.n	80050bc <HAL_RCC_OscConfig+0x9c>
 80050a2:	4b81      	ldr	r3, [pc, #516]	; (80052a8 <HAL_RCC_OscConfig+0x288>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a80      	ldr	r2, [pc, #512]	; (80052a8 <HAL_RCC_OscConfig+0x288>)
 80050a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050ac:	6013      	str	r3, [r2, #0]
 80050ae:	4b7e      	ldr	r3, [pc, #504]	; (80052a8 <HAL_RCC_OscConfig+0x288>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a7d      	ldr	r2, [pc, #500]	; (80052a8 <HAL_RCC_OscConfig+0x288>)
 80050b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050b8:	6013      	str	r3, [r2, #0]
 80050ba:	e01d      	b.n	80050f8 <HAL_RCC_OscConfig+0xd8>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050c4:	d10c      	bne.n	80050e0 <HAL_RCC_OscConfig+0xc0>
 80050c6:	4b78      	ldr	r3, [pc, #480]	; (80052a8 <HAL_RCC_OscConfig+0x288>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a77      	ldr	r2, [pc, #476]	; (80052a8 <HAL_RCC_OscConfig+0x288>)
 80050cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050d0:	6013      	str	r3, [r2, #0]
 80050d2:	4b75      	ldr	r3, [pc, #468]	; (80052a8 <HAL_RCC_OscConfig+0x288>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a74      	ldr	r2, [pc, #464]	; (80052a8 <HAL_RCC_OscConfig+0x288>)
 80050d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050dc:	6013      	str	r3, [r2, #0]
 80050de:	e00b      	b.n	80050f8 <HAL_RCC_OscConfig+0xd8>
 80050e0:	4b71      	ldr	r3, [pc, #452]	; (80052a8 <HAL_RCC_OscConfig+0x288>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a70      	ldr	r2, [pc, #448]	; (80052a8 <HAL_RCC_OscConfig+0x288>)
 80050e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050ea:	6013      	str	r3, [r2, #0]
 80050ec:	4b6e      	ldr	r3, [pc, #440]	; (80052a8 <HAL_RCC_OscConfig+0x288>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a6d      	ldr	r2, [pc, #436]	; (80052a8 <HAL_RCC_OscConfig+0x288>)
 80050f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d013      	beq.n	8005128 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005100:	f7fd f8ea 	bl	80022d8 <HAL_GetTick>
 8005104:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005106:	e008      	b.n	800511a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005108:	f7fd f8e6 	bl	80022d8 <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	2b64      	cmp	r3, #100	; 0x64
 8005114:	d901      	bls.n	800511a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e3d4      	b.n	80058c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800511a:	4b63      	ldr	r3, [pc, #396]	; (80052a8 <HAL_RCC_OscConfig+0x288>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d0f0      	beq.n	8005108 <HAL_RCC_OscConfig+0xe8>
 8005126:	e014      	b.n	8005152 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005128:	f7fd f8d6 	bl	80022d8 <HAL_GetTick>
 800512c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800512e:	e008      	b.n	8005142 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005130:	f7fd f8d2 	bl	80022d8 <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	2b64      	cmp	r3, #100	; 0x64
 800513c:	d901      	bls.n	8005142 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e3c0      	b.n	80058c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005142:	4b59      	ldr	r3, [pc, #356]	; (80052a8 <HAL_RCC_OscConfig+0x288>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1f0      	bne.n	8005130 <HAL_RCC_OscConfig+0x110>
 800514e:	e000      	b.n	8005152 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005150:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	2b00      	cmp	r3, #0
 800515c:	f000 80ca 	beq.w	80052f4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005160:	4b51      	ldr	r3, [pc, #324]	; (80052a8 <HAL_RCC_OscConfig+0x288>)
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005168:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800516a:	4b4f      	ldr	r3, [pc, #316]	; (80052a8 <HAL_RCC_OscConfig+0x288>)
 800516c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800516e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005170:	6a3b      	ldr	r3, [r7, #32]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d007      	beq.n	8005186 <HAL_RCC_OscConfig+0x166>
 8005176:	6a3b      	ldr	r3, [r7, #32]
 8005178:	2b18      	cmp	r3, #24
 800517a:	d156      	bne.n	800522a <HAL_RCC_OscConfig+0x20a>
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	f003 0303 	and.w	r3, r3, #3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d151      	bne.n	800522a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005186:	4b48      	ldr	r3, [pc, #288]	; (80052a8 <HAL_RCC_OscConfig+0x288>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0304 	and.w	r3, r3, #4
 800518e:	2b00      	cmp	r3, #0
 8005190:	d005      	beq.n	800519e <HAL_RCC_OscConfig+0x17e>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d101      	bne.n	800519e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e392      	b.n	80058c4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800519e:	4b42      	ldr	r3, [pc, #264]	; (80052a8 <HAL_RCC_OscConfig+0x288>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f023 0219 	bic.w	r2, r3, #25
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	493f      	ldr	r1, [pc, #252]	; (80052a8 <HAL_RCC_OscConfig+0x288>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b0:	f7fd f892 	bl	80022d8 <HAL_GetTick>
 80051b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051b6:	e008      	b.n	80051ca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051b8:	f7fd f88e 	bl	80022d8 <HAL_GetTick>
 80051bc:	4602      	mov	r2, r0
 80051be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d901      	bls.n	80051ca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e37c      	b.n	80058c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051ca:	4b37      	ldr	r3, [pc, #220]	; (80052a8 <HAL_RCC_OscConfig+0x288>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0304 	and.w	r3, r3, #4
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d0f0      	beq.n	80051b8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051d6:	f7fd f8af 	bl	8002338 <HAL_GetREVID>
 80051da:	4603      	mov	r3, r0
 80051dc:	f241 0203 	movw	r2, #4099	; 0x1003
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d817      	bhi.n	8005214 <HAL_RCC_OscConfig+0x1f4>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	2b40      	cmp	r3, #64	; 0x40
 80051ea:	d108      	bne.n	80051fe <HAL_RCC_OscConfig+0x1de>
 80051ec:	4b2e      	ldr	r3, [pc, #184]	; (80052a8 <HAL_RCC_OscConfig+0x288>)
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80051f4:	4a2c      	ldr	r2, [pc, #176]	; (80052a8 <HAL_RCC_OscConfig+0x288>)
 80051f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051fa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051fc:	e07a      	b.n	80052f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051fe:	4b2a      	ldr	r3, [pc, #168]	; (80052a8 <HAL_RCC_OscConfig+0x288>)
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	031b      	lsls	r3, r3, #12
 800520c:	4926      	ldr	r1, [pc, #152]	; (80052a8 <HAL_RCC_OscConfig+0x288>)
 800520e:	4313      	orrs	r3, r2
 8005210:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005212:	e06f      	b.n	80052f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005214:	4b24      	ldr	r3, [pc, #144]	; (80052a8 <HAL_RCC_OscConfig+0x288>)
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	061b      	lsls	r3, r3, #24
 8005222:	4921      	ldr	r1, [pc, #132]	; (80052a8 <HAL_RCC_OscConfig+0x288>)
 8005224:	4313      	orrs	r3, r2
 8005226:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005228:	e064      	b.n	80052f4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d047      	beq.n	80052c2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005232:	4b1d      	ldr	r3, [pc, #116]	; (80052a8 <HAL_RCC_OscConfig+0x288>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f023 0219 	bic.w	r2, r3, #25
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	491a      	ldr	r1, [pc, #104]	; (80052a8 <HAL_RCC_OscConfig+0x288>)
 8005240:	4313      	orrs	r3, r2
 8005242:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005244:	f7fd f848 	bl	80022d8 <HAL_GetTick>
 8005248:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800524a:	e008      	b.n	800525e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800524c:	f7fd f844 	bl	80022d8 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	2b02      	cmp	r3, #2
 8005258:	d901      	bls.n	800525e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e332      	b.n	80058c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800525e:	4b12      	ldr	r3, [pc, #72]	; (80052a8 <HAL_RCC_OscConfig+0x288>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0304 	and.w	r3, r3, #4
 8005266:	2b00      	cmp	r3, #0
 8005268:	d0f0      	beq.n	800524c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800526a:	f7fd f865 	bl	8002338 <HAL_GetREVID>
 800526e:	4603      	mov	r3, r0
 8005270:	f241 0203 	movw	r2, #4099	; 0x1003
 8005274:	4293      	cmp	r3, r2
 8005276:	d819      	bhi.n	80052ac <HAL_RCC_OscConfig+0x28c>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	2b40      	cmp	r3, #64	; 0x40
 800527e:	d108      	bne.n	8005292 <HAL_RCC_OscConfig+0x272>
 8005280:	4b09      	ldr	r3, [pc, #36]	; (80052a8 <HAL_RCC_OscConfig+0x288>)
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005288:	4a07      	ldr	r2, [pc, #28]	; (80052a8 <HAL_RCC_OscConfig+0x288>)
 800528a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800528e:	6053      	str	r3, [r2, #4]
 8005290:	e030      	b.n	80052f4 <HAL_RCC_OscConfig+0x2d4>
 8005292:	4b05      	ldr	r3, [pc, #20]	; (80052a8 <HAL_RCC_OscConfig+0x288>)
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	031b      	lsls	r3, r3, #12
 80052a0:	4901      	ldr	r1, [pc, #4]	; (80052a8 <HAL_RCC_OscConfig+0x288>)
 80052a2:	4313      	orrs	r3, r2
 80052a4:	604b      	str	r3, [r1, #4]
 80052a6:	e025      	b.n	80052f4 <HAL_RCC_OscConfig+0x2d4>
 80052a8:	58024400 	.word	0x58024400
 80052ac:	4b9a      	ldr	r3, [pc, #616]	; (8005518 <HAL_RCC_OscConfig+0x4f8>)
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	061b      	lsls	r3, r3, #24
 80052ba:	4997      	ldr	r1, [pc, #604]	; (8005518 <HAL_RCC_OscConfig+0x4f8>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	604b      	str	r3, [r1, #4]
 80052c0:	e018      	b.n	80052f4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052c2:	4b95      	ldr	r3, [pc, #596]	; (8005518 <HAL_RCC_OscConfig+0x4f8>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a94      	ldr	r2, [pc, #592]	; (8005518 <HAL_RCC_OscConfig+0x4f8>)
 80052c8:	f023 0301 	bic.w	r3, r3, #1
 80052cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ce:	f7fd f803 	bl	80022d8 <HAL_GetTick>
 80052d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80052d4:	e008      	b.n	80052e8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052d6:	f7fc ffff 	bl	80022d8 <HAL_GetTick>
 80052da:	4602      	mov	r2, r0
 80052dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052de:	1ad3      	subs	r3, r2, r3
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d901      	bls.n	80052e8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	e2ed      	b.n	80058c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80052e8:	4b8b      	ldr	r3, [pc, #556]	; (8005518 <HAL_RCC_OscConfig+0x4f8>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0304 	and.w	r3, r3, #4
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d1f0      	bne.n	80052d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0310 	and.w	r3, r3, #16
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	f000 80a9 	beq.w	8005454 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005302:	4b85      	ldr	r3, [pc, #532]	; (8005518 <HAL_RCC_OscConfig+0x4f8>)
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800530a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800530c:	4b82      	ldr	r3, [pc, #520]	; (8005518 <HAL_RCC_OscConfig+0x4f8>)
 800530e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005310:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	2b08      	cmp	r3, #8
 8005316:	d007      	beq.n	8005328 <HAL_RCC_OscConfig+0x308>
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	2b18      	cmp	r3, #24
 800531c:	d13a      	bne.n	8005394 <HAL_RCC_OscConfig+0x374>
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	f003 0303 	and.w	r3, r3, #3
 8005324:	2b01      	cmp	r3, #1
 8005326:	d135      	bne.n	8005394 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005328:	4b7b      	ldr	r3, [pc, #492]	; (8005518 <HAL_RCC_OscConfig+0x4f8>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005330:	2b00      	cmp	r3, #0
 8005332:	d005      	beq.n	8005340 <HAL_RCC_OscConfig+0x320>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	69db      	ldr	r3, [r3, #28]
 8005338:	2b80      	cmp	r3, #128	; 0x80
 800533a:	d001      	beq.n	8005340 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e2c1      	b.n	80058c4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005340:	f7fc fffa 	bl	8002338 <HAL_GetREVID>
 8005344:	4603      	mov	r3, r0
 8005346:	f241 0203 	movw	r2, #4099	; 0x1003
 800534a:	4293      	cmp	r3, r2
 800534c:	d817      	bhi.n	800537e <HAL_RCC_OscConfig+0x35e>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	2b20      	cmp	r3, #32
 8005354:	d108      	bne.n	8005368 <HAL_RCC_OscConfig+0x348>
 8005356:	4b70      	ldr	r3, [pc, #448]	; (8005518 <HAL_RCC_OscConfig+0x4f8>)
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800535e:	4a6e      	ldr	r2, [pc, #440]	; (8005518 <HAL_RCC_OscConfig+0x4f8>)
 8005360:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005364:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005366:	e075      	b.n	8005454 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005368:	4b6b      	ldr	r3, [pc, #428]	; (8005518 <HAL_RCC_OscConfig+0x4f8>)
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6a1b      	ldr	r3, [r3, #32]
 8005374:	069b      	lsls	r3, r3, #26
 8005376:	4968      	ldr	r1, [pc, #416]	; (8005518 <HAL_RCC_OscConfig+0x4f8>)
 8005378:	4313      	orrs	r3, r2
 800537a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800537c:	e06a      	b.n	8005454 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800537e:	4b66      	ldr	r3, [pc, #408]	; (8005518 <HAL_RCC_OscConfig+0x4f8>)
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	061b      	lsls	r3, r3, #24
 800538c:	4962      	ldr	r1, [pc, #392]	; (8005518 <HAL_RCC_OscConfig+0x4f8>)
 800538e:	4313      	orrs	r3, r2
 8005390:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005392:	e05f      	b.n	8005454 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	69db      	ldr	r3, [r3, #28]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d042      	beq.n	8005422 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800539c:	4b5e      	ldr	r3, [pc, #376]	; (8005518 <HAL_RCC_OscConfig+0x4f8>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a5d      	ldr	r2, [pc, #372]	; (8005518 <HAL_RCC_OscConfig+0x4f8>)
 80053a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a8:	f7fc ff96 	bl	80022d8 <HAL_GetTick>
 80053ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80053ae:	e008      	b.n	80053c2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80053b0:	f7fc ff92 	bl	80022d8 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d901      	bls.n	80053c2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e280      	b.n	80058c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80053c2:	4b55      	ldr	r3, [pc, #340]	; (8005518 <HAL_RCC_OscConfig+0x4f8>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d0f0      	beq.n	80053b0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80053ce:	f7fc ffb3 	bl	8002338 <HAL_GetREVID>
 80053d2:	4603      	mov	r3, r0
 80053d4:	f241 0203 	movw	r2, #4099	; 0x1003
 80053d8:	4293      	cmp	r3, r2
 80053da:	d817      	bhi.n	800540c <HAL_RCC_OscConfig+0x3ec>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a1b      	ldr	r3, [r3, #32]
 80053e0:	2b20      	cmp	r3, #32
 80053e2:	d108      	bne.n	80053f6 <HAL_RCC_OscConfig+0x3d6>
 80053e4:	4b4c      	ldr	r3, [pc, #304]	; (8005518 <HAL_RCC_OscConfig+0x4f8>)
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80053ec:	4a4a      	ldr	r2, [pc, #296]	; (8005518 <HAL_RCC_OscConfig+0x4f8>)
 80053ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053f2:	6053      	str	r3, [r2, #4]
 80053f4:	e02e      	b.n	8005454 <HAL_RCC_OscConfig+0x434>
 80053f6:	4b48      	ldr	r3, [pc, #288]	; (8005518 <HAL_RCC_OscConfig+0x4f8>)
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	069b      	lsls	r3, r3, #26
 8005404:	4944      	ldr	r1, [pc, #272]	; (8005518 <HAL_RCC_OscConfig+0x4f8>)
 8005406:	4313      	orrs	r3, r2
 8005408:	604b      	str	r3, [r1, #4]
 800540a:	e023      	b.n	8005454 <HAL_RCC_OscConfig+0x434>
 800540c:	4b42      	ldr	r3, [pc, #264]	; (8005518 <HAL_RCC_OscConfig+0x4f8>)
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a1b      	ldr	r3, [r3, #32]
 8005418:	061b      	lsls	r3, r3, #24
 800541a:	493f      	ldr	r1, [pc, #252]	; (8005518 <HAL_RCC_OscConfig+0x4f8>)
 800541c:	4313      	orrs	r3, r2
 800541e:	60cb      	str	r3, [r1, #12]
 8005420:	e018      	b.n	8005454 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005422:	4b3d      	ldr	r3, [pc, #244]	; (8005518 <HAL_RCC_OscConfig+0x4f8>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a3c      	ldr	r2, [pc, #240]	; (8005518 <HAL_RCC_OscConfig+0x4f8>)
 8005428:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800542c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800542e:	f7fc ff53 	bl	80022d8 <HAL_GetTick>
 8005432:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005434:	e008      	b.n	8005448 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005436:	f7fc ff4f 	bl	80022d8 <HAL_GetTick>
 800543a:	4602      	mov	r2, r0
 800543c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	2b02      	cmp	r3, #2
 8005442:	d901      	bls.n	8005448 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e23d      	b.n	80058c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005448:	4b33      	ldr	r3, [pc, #204]	; (8005518 <HAL_RCC_OscConfig+0x4f8>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1f0      	bne.n	8005436 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0308 	and.w	r3, r3, #8
 800545c:	2b00      	cmp	r3, #0
 800545e:	d036      	beq.n	80054ce <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	695b      	ldr	r3, [r3, #20]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d019      	beq.n	800549c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005468:	4b2b      	ldr	r3, [pc, #172]	; (8005518 <HAL_RCC_OscConfig+0x4f8>)
 800546a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800546c:	4a2a      	ldr	r2, [pc, #168]	; (8005518 <HAL_RCC_OscConfig+0x4f8>)
 800546e:	f043 0301 	orr.w	r3, r3, #1
 8005472:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005474:	f7fc ff30 	bl	80022d8 <HAL_GetTick>
 8005478:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800547a:	e008      	b.n	800548e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800547c:	f7fc ff2c 	bl	80022d8 <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	2b02      	cmp	r3, #2
 8005488:	d901      	bls.n	800548e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e21a      	b.n	80058c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800548e:	4b22      	ldr	r3, [pc, #136]	; (8005518 <HAL_RCC_OscConfig+0x4f8>)
 8005490:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005492:	f003 0302 	and.w	r3, r3, #2
 8005496:	2b00      	cmp	r3, #0
 8005498:	d0f0      	beq.n	800547c <HAL_RCC_OscConfig+0x45c>
 800549a:	e018      	b.n	80054ce <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800549c:	4b1e      	ldr	r3, [pc, #120]	; (8005518 <HAL_RCC_OscConfig+0x4f8>)
 800549e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054a0:	4a1d      	ldr	r2, [pc, #116]	; (8005518 <HAL_RCC_OscConfig+0x4f8>)
 80054a2:	f023 0301 	bic.w	r3, r3, #1
 80054a6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054a8:	f7fc ff16 	bl	80022d8 <HAL_GetTick>
 80054ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80054ae:	e008      	b.n	80054c2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054b0:	f7fc ff12 	bl	80022d8 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e200      	b.n	80058c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80054c2:	4b15      	ldr	r3, [pc, #84]	; (8005518 <HAL_RCC_OscConfig+0x4f8>)
 80054c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054c6:	f003 0302 	and.w	r3, r3, #2
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1f0      	bne.n	80054b0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0320 	and.w	r3, r3, #32
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d039      	beq.n	800554e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	699b      	ldr	r3, [r3, #24]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d01c      	beq.n	800551c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80054e2:	4b0d      	ldr	r3, [pc, #52]	; (8005518 <HAL_RCC_OscConfig+0x4f8>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a0c      	ldr	r2, [pc, #48]	; (8005518 <HAL_RCC_OscConfig+0x4f8>)
 80054e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80054ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80054ee:	f7fc fef3 	bl	80022d8 <HAL_GetTick>
 80054f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80054f4:	e008      	b.n	8005508 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054f6:	f7fc feef 	bl	80022d8 <HAL_GetTick>
 80054fa:	4602      	mov	r2, r0
 80054fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	2b02      	cmp	r3, #2
 8005502:	d901      	bls.n	8005508 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e1dd      	b.n	80058c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005508:	4b03      	ldr	r3, [pc, #12]	; (8005518 <HAL_RCC_OscConfig+0x4f8>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d0f0      	beq.n	80054f6 <HAL_RCC_OscConfig+0x4d6>
 8005514:	e01b      	b.n	800554e <HAL_RCC_OscConfig+0x52e>
 8005516:	bf00      	nop
 8005518:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800551c:	4b9b      	ldr	r3, [pc, #620]	; (800578c <HAL_RCC_OscConfig+0x76c>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a9a      	ldr	r2, [pc, #616]	; (800578c <HAL_RCC_OscConfig+0x76c>)
 8005522:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005526:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005528:	f7fc fed6 	bl	80022d8 <HAL_GetTick>
 800552c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800552e:	e008      	b.n	8005542 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005530:	f7fc fed2 	bl	80022d8 <HAL_GetTick>
 8005534:	4602      	mov	r2, r0
 8005536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	2b02      	cmp	r3, #2
 800553c:	d901      	bls.n	8005542 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e1c0      	b.n	80058c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005542:	4b92      	ldr	r3, [pc, #584]	; (800578c <HAL_RCC_OscConfig+0x76c>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1f0      	bne.n	8005530 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0304 	and.w	r3, r3, #4
 8005556:	2b00      	cmp	r3, #0
 8005558:	f000 8081 	beq.w	800565e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800555c:	4b8c      	ldr	r3, [pc, #560]	; (8005790 <HAL_RCC_OscConfig+0x770>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a8b      	ldr	r2, [pc, #556]	; (8005790 <HAL_RCC_OscConfig+0x770>)
 8005562:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005566:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005568:	f7fc feb6 	bl	80022d8 <HAL_GetTick>
 800556c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800556e:	e008      	b.n	8005582 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005570:	f7fc feb2 	bl	80022d8 <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	2b64      	cmp	r3, #100	; 0x64
 800557c:	d901      	bls.n	8005582 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e1a0      	b.n	80058c4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005582:	4b83      	ldr	r3, [pc, #524]	; (8005790 <HAL_RCC_OscConfig+0x770>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800558a:	2b00      	cmp	r3, #0
 800558c:	d0f0      	beq.n	8005570 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	2b01      	cmp	r3, #1
 8005594:	d106      	bne.n	80055a4 <HAL_RCC_OscConfig+0x584>
 8005596:	4b7d      	ldr	r3, [pc, #500]	; (800578c <HAL_RCC_OscConfig+0x76c>)
 8005598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800559a:	4a7c      	ldr	r2, [pc, #496]	; (800578c <HAL_RCC_OscConfig+0x76c>)
 800559c:	f043 0301 	orr.w	r3, r3, #1
 80055a0:	6713      	str	r3, [r2, #112]	; 0x70
 80055a2:	e02d      	b.n	8005600 <HAL_RCC_OscConfig+0x5e0>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d10c      	bne.n	80055c6 <HAL_RCC_OscConfig+0x5a6>
 80055ac:	4b77      	ldr	r3, [pc, #476]	; (800578c <HAL_RCC_OscConfig+0x76c>)
 80055ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055b0:	4a76      	ldr	r2, [pc, #472]	; (800578c <HAL_RCC_OscConfig+0x76c>)
 80055b2:	f023 0301 	bic.w	r3, r3, #1
 80055b6:	6713      	str	r3, [r2, #112]	; 0x70
 80055b8:	4b74      	ldr	r3, [pc, #464]	; (800578c <HAL_RCC_OscConfig+0x76c>)
 80055ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055bc:	4a73      	ldr	r2, [pc, #460]	; (800578c <HAL_RCC_OscConfig+0x76c>)
 80055be:	f023 0304 	bic.w	r3, r3, #4
 80055c2:	6713      	str	r3, [r2, #112]	; 0x70
 80055c4:	e01c      	b.n	8005600 <HAL_RCC_OscConfig+0x5e0>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	2b05      	cmp	r3, #5
 80055cc:	d10c      	bne.n	80055e8 <HAL_RCC_OscConfig+0x5c8>
 80055ce:	4b6f      	ldr	r3, [pc, #444]	; (800578c <HAL_RCC_OscConfig+0x76c>)
 80055d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d2:	4a6e      	ldr	r2, [pc, #440]	; (800578c <HAL_RCC_OscConfig+0x76c>)
 80055d4:	f043 0304 	orr.w	r3, r3, #4
 80055d8:	6713      	str	r3, [r2, #112]	; 0x70
 80055da:	4b6c      	ldr	r3, [pc, #432]	; (800578c <HAL_RCC_OscConfig+0x76c>)
 80055dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055de:	4a6b      	ldr	r2, [pc, #428]	; (800578c <HAL_RCC_OscConfig+0x76c>)
 80055e0:	f043 0301 	orr.w	r3, r3, #1
 80055e4:	6713      	str	r3, [r2, #112]	; 0x70
 80055e6:	e00b      	b.n	8005600 <HAL_RCC_OscConfig+0x5e0>
 80055e8:	4b68      	ldr	r3, [pc, #416]	; (800578c <HAL_RCC_OscConfig+0x76c>)
 80055ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ec:	4a67      	ldr	r2, [pc, #412]	; (800578c <HAL_RCC_OscConfig+0x76c>)
 80055ee:	f023 0301 	bic.w	r3, r3, #1
 80055f2:	6713      	str	r3, [r2, #112]	; 0x70
 80055f4:	4b65      	ldr	r3, [pc, #404]	; (800578c <HAL_RCC_OscConfig+0x76c>)
 80055f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055f8:	4a64      	ldr	r2, [pc, #400]	; (800578c <HAL_RCC_OscConfig+0x76c>)
 80055fa:	f023 0304 	bic.w	r3, r3, #4
 80055fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d015      	beq.n	8005634 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005608:	f7fc fe66 	bl	80022d8 <HAL_GetTick>
 800560c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800560e:	e00a      	b.n	8005626 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005610:	f7fc fe62 	bl	80022d8 <HAL_GetTick>
 8005614:	4602      	mov	r2, r0
 8005616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	f241 3288 	movw	r2, #5000	; 0x1388
 800561e:	4293      	cmp	r3, r2
 8005620:	d901      	bls.n	8005626 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e14e      	b.n	80058c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005626:	4b59      	ldr	r3, [pc, #356]	; (800578c <HAL_RCC_OscConfig+0x76c>)
 8005628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800562a:	f003 0302 	and.w	r3, r3, #2
 800562e:	2b00      	cmp	r3, #0
 8005630:	d0ee      	beq.n	8005610 <HAL_RCC_OscConfig+0x5f0>
 8005632:	e014      	b.n	800565e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005634:	f7fc fe50 	bl	80022d8 <HAL_GetTick>
 8005638:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800563a:	e00a      	b.n	8005652 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800563c:	f7fc fe4c 	bl	80022d8 <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	f241 3288 	movw	r2, #5000	; 0x1388
 800564a:	4293      	cmp	r3, r2
 800564c:	d901      	bls.n	8005652 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	e138      	b.n	80058c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005652:	4b4e      	ldr	r3, [pc, #312]	; (800578c <HAL_RCC_OscConfig+0x76c>)
 8005654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005656:	f003 0302 	and.w	r3, r3, #2
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1ee      	bne.n	800563c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005662:	2b00      	cmp	r3, #0
 8005664:	f000 812d 	beq.w	80058c2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005668:	4b48      	ldr	r3, [pc, #288]	; (800578c <HAL_RCC_OscConfig+0x76c>)
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005670:	2b18      	cmp	r3, #24
 8005672:	f000 80bd 	beq.w	80057f0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567a:	2b02      	cmp	r3, #2
 800567c:	f040 809e 	bne.w	80057bc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005680:	4b42      	ldr	r3, [pc, #264]	; (800578c <HAL_RCC_OscConfig+0x76c>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a41      	ldr	r2, [pc, #260]	; (800578c <HAL_RCC_OscConfig+0x76c>)
 8005686:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800568a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800568c:	f7fc fe24 	bl	80022d8 <HAL_GetTick>
 8005690:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005692:	e008      	b.n	80056a6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005694:	f7fc fe20 	bl	80022d8 <HAL_GetTick>
 8005698:	4602      	mov	r2, r0
 800569a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d901      	bls.n	80056a6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e10e      	b.n	80058c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80056a6:	4b39      	ldr	r3, [pc, #228]	; (800578c <HAL_RCC_OscConfig+0x76c>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1f0      	bne.n	8005694 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056b2:	4b36      	ldr	r3, [pc, #216]	; (800578c <HAL_RCC_OscConfig+0x76c>)
 80056b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056b6:	4b37      	ldr	r3, [pc, #220]	; (8005794 <HAL_RCC_OscConfig+0x774>)
 80056b8:	4013      	ands	r3, r2
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80056c2:	0112      	lsls	r2, r2, #4
 80056c4:	430a      	orrs	r2, r1
 80056c6:	4931      	ldr	r1, [pc, #196]	; (800578c <HAL_RCC_OscConfig+0x76c>)
 80056c8:	4313      	orrs	r3, r2
 80056ca:	628b      	str	r3, [r1, #40]	; 0x28
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d0:	3b01      	subs	r3, #1
 80056d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056da:	3b01      	subs	r3, #1
 80056dc:	025b      	lsls	r3, r3, #9
 80056de:	b29b      	uxth	r3, r3
 80056e0:	431a      	orrs	r2, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e6:	3b01      	subs	r3, #1
 80056e8:	041b      	lsls	r3, r3, #16
 80056ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80056ee:	431a      	orrs	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056f4:	3b01      	subs	r3, #1
 80056f6:	061b      	lsls	r3, r3, #24
 80056f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80056fc:	4923      	ldr	r1, [pc, #140]	; (800578c <HAL_RCC_OscConfig+0x76c>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005702:	4b22      	ldr	r3, [pc, #136]	; (800578c <HAL_RCC_OscConfig+0x76c>)
 8005704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005706:	4a21      	ldr	r2, [pc, #132]	; (800578c <HAL_RCC_OscConfig+0x76c>)
 8005708:	f023 0301 	bic.w	r3, r3, #1
 800570c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800570e:	4b1f      	ldr	r3, [pc, #124]	; (800578c <HAL_RCC_OscConfig+0x76c>)
 8005710:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005712:	4b21      	ldr	r3, [pc, #132]	; (8005798 <HAL_RCC_OscConfig+0x778>)
 8005714:	4013      	ands	r3, r2
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800571a:	00d2      	lsls	r2, r2, #3
 800571c:	491b      	ldr	r1, [pc, #108]	; (800578c <HAL_RCC_OscConfig+0x76c>)
 800571e:	4313      	orrs	r3, r2
 8005720:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005722:	4b1a      	ldr	r3, [pc, #104]	; (800578c <HAL_RCC_OscConfig+0x76c>)
 8005724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005726:	f023 020c 	bic.w	r2, r3, #12
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572e:	4917      	ldr	r1, [pc, #92]	; (800578c <HAL_RCC_OscConfig+0x76c>)
 8005730:	4313      	orrs	r3, r2
 8005732:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005734:	4b15      	ldr	r3, [pc, #84]	; (800578c <HAL_RCC_OscConfig+0x76c>)
 8005736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005738:	f023 0202 	bic.w	r2, r3, #2
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005740:	4912      	ldr	r1, [pc, #72]	; (800578c <HAL_RCC_OscConfig+0x76c>)
 8005742:	4313      	orrs	r3, r2
 8005744:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005746:	4b11      	ldr	r3, [pc, #68]	; (800578c <HAL_RCC_OscConfig+0x76c>)
 8005748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574a:	4a10      	ldr	r2, [pc, #64]	; (800578c <HAL_RCC_OscConfig+0x76c>)
 800574c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005750:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005752:	4b0e      	ldr	r3, [pc, #56]	; (800578c <HAL_RCC_OscConfig+0x76c>)
 8005754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005756:	4a0d      	ldr	r2, [pc, #52]	; (800578c <HAL_RCC_OscConfig+0x76c>)
 8005758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800575c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800575e:	4b0b      	ldr	r3, [pc, #44]	; (800578c <HAL_RCC_OscConfig+0x76c>)
 8005760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005762:	4a0a      	ldr	r2, [pc, #40]	; (800578c <HAL_RCC_OscConfig+0x76c>)
 8005764:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005768:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800576a:	4b08      	ldr	r3, [pc, #32]	; (800578c <HAL_RCC_OscConfig+0x76c>)
 800576c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576e:	4a07      	ldr	r2, [pc, #28]	; (800578c <HAL_RCC_OscConfig+0x76c>)
 8005770:	f043 0301 	orr.w	r3, r3, #1
 8005774:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005776:	4b05      	ldr	r3, [pc, #20]	; (800578c <HAL_RCC_OscConfig+0x76c>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a04      	ldr	r2, [pc, #16]	; (800578c <HAL_RCC_OscConfig+0x76c>)
 800577c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005780:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005782:	f7fc fda9 	bl	80022d8 <HAL_GetTick>
 8005786:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005788:	e011      	b.n	80057ae <HAL_RCC_OscConfig+0x78e>
 800578a:	bf00      	nop
 800578c:	58024400 	.word	0x58024400
 8005790:	58024800 	.word	0x58024800
 8005794:	fffffc0c 	.word	0xfffffc0c
 8005798:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800579c:	f7fc fd9c 	bl	80022d8 <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d901      	bls.n	80057ae <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e08a      	b.n	80058c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80057ae:	4b47      	ldr	r3, [pc, #284]	; (80058cc <HAL_RCC_OscConfig+0x8ac>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d0f0      	beq.n	800579c <HAL_RCC_OscConfig+0x77c>
 80057ba:	e082      	b.n	80058c2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057bc:	4b43      	ldr	r3, [pc, #268]	; (80058cc <HAL_RCC_OscConfig+0x8ac>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a42      	ldr	r2, [pc, #264]	; (80058cc <HAL_RCC_OscConfig+0x8ac>)
 80057c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057c8:	f7fc fd86 	bl	80022d8 <HAL_GetTick>
 80057cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80057ce:	e008      	b.n	80057e2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057d0:	f7fc fd82 	bl	80022d8 <HAL_GetTick>
 80057d4:	4602      	mov	r2, r0
 80057d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d901      	bls.n	80057e2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e070      	b.n	80058c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80057e2:	4b3a      	ldr	r3, [pc, #232]	; (80058cc <HAL_RCC_OscConfig+0x8ac>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1f0      	bne.n	80057d0 <HAL_RCC_OscConfig+0x7b0>
 80057ee:	e068      	b.n	80058c2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80057f0:	4b36      	ldr	r3, [pc, #216]	; (80058cc <HAL_RCC_OscConfig+0x8ac>)
 80057f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80057f6:	4b35      	ldr	r3, [pc, #212]	; (80058cc <HAL_RCC_OscConfig+0x8ac>)
 80057f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005800:	2b01      	cmp	r3, #1
 8005802:	d031      	beq.n	8005868 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	f003 0203 	and.w	r2, r3, #3
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800580e:	429a      	cmp	r2, r3
 8005810:	d12a      	bne.n	8005868 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	091b      	lsrs	r3, r3, #4
 8005816:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800581e:	429a      	cmp	r2, r3
 8005820:	d122      	bne.n	8005868 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800582c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800582e:	429a      	cmp	r2, r3
 8005830:	d11a      	bne.n	8005868 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	0a5b      	lsrs	r3, r3, #9
 8005836:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800583e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005840:	429a      	cmp	r2, r3
 8005842:	d111      	bne.n	8005868 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	0c1b      	lsrs	r3, r3, #16
 8005848:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005850:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005852:	429a      	cmp	r2, r3
 8005854:	d108      	bne.n	8005868 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	0e1b      	lsrs	r3, r3, #24
 800585a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005862:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005864:	429a      	cmp	r2, r3
 8005866:	d001      	beq.n	800586c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e02b      	b.n	80058c4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800586c:	4b17      	ldr	r3, [pc, #92]	; (80058cc <HAL_RCC_OscConfig+0x8ac>)
 800586e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005870:	08db      	lsrs	r3, r3, #3
 8005872:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005876:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	429a      	cmp	r2, r3
 8005880:	d01f      	beq.n	80058c2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005882:	4b12      	ldr	r3, [pc, #72]	; (80058cc <HAL_RCC_OscConfig+0x8ac>)
 8005884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005886:	4a11      	ldr	r2, [pc, #68]	; (80058cc <HAL_RCC_OscConfig+0x8ac>)
 8005888:	f023 0301 	bic.w	r3, r3, #1
 800588c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800588e:	f7fc fd23 	bl	80022d8 <HAL_GetTick>
 8005892:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005894:	bf00      	nop
 8005896:	f7fc fd1f 	bl	80022d8 <HAL_GetTick>
 800589a:	4602      	mov	r2, r0
 800589c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589e:	4293      	cmp	r3, r2
 80058a0:	d0f9      	beq.n	8005896 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80058a2:	4b0a      	ldr	r3, [pc, #40]	; (80058cc <HAL_RCC_OscConfig+0x8ac>)
 80058a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058a6:	4b0a      	ldr	r3, [pc, #40]	; (80058d0 <HAL_RCC_OscConfig+0x8b0>)
 80058a8:	4013      	ands	r3, r2
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80058ae:	00d2      	lsls	r2, r2, #3
 80058b0:	4906      	ldr	r1, [pc, #24]	; (80058cc <HAL_RCC_OscConfig+0x8ac>)
 80058b2:	4313      	orrs	r3, r2
 80058b4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80058b6:	4b05      	ldr	r3, [pc, #20]	; (80058cc <HAL_RCC_OscConfig+0x8ac>)
 80058b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ba:	4a04      	ldr	r2, [pc, #16]	; (80058cc <HAL_RCC_OscConfig+0x8ac>)
 80058bc:	f043 0301 	orr.w	r3, r3, #1
 80058c0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3730      	adds	r7, #48	; 0x30
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	58024400 	.word	0x58024400
 80058d0:	ffff0007 	.word	0xffff0007

080058d4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b086      	sub	sp, #24
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d101      	bne.n	80058e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e19c      	b.n	8005c22 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058e8:	4b8a      	ldr	r3, [pc, #552]	; (8005b14 <HAL_RCC_ClockConfig+0x240>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 030f 	and.w	r3, r3, #15
 80058f0:	683a      	ldr	r2, [r7, #0]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d910      	bls.n	8005918 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058f6:	4b87      	ldr	r3, [pc, #540]	; (8005b14 <HAL_RCC_ClockConfig+0x240>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f023 020f 	bic.w	r2, r3, #15
 80058fe:	4985      	ldr	r1, [pc, #532]	; (8005b14 <HAL_RCC_ClockConfig+0x240>)
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	4313      	orrs	r3, r2
 8005904:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005906:	4b83      	ldr	r3, [pc, #524]	; (8005b14 <HAL_RCC_ClockConfig+0x240>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 030f 	and.w	r3, r3, #15
 800590e:	683a      	ldr	r2, [r7, #0]
 8005910:	429a      	cmp	r2, r3
 8005912:	d001      	beq.n	8005918 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e184      	b.n	8005c22 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0304 	and.w	r3, r3, #4
 8005920:	2b00      	cmp	r3, #0
 8005922:	d010      	beq.n	8005946 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	691a      	ldr	r2, [r3, #16]
 8005928:	4b7b      	ldr	r3, [pc, #492]	; (8005b18 <HAL_RCC_ClockConfig+0x244>)
 800592a:	699b      	ldr	r3, [r3, #24]
 800592c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005930:	429a      	cmp	r2, r3
 8005932:	d908      	bls.n	8005946 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005934:	4b78      	ldr	r3, [pc, #480]	; (8005b18 <HAL_RCC_ClockConfig+0x244>)
 8005936:	699b      	ldr	r3, [r3, #24]
 8005938:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	4975      	ldr	r1, [pc, #468]	; (8005b18 <HAL_RCC_ClockConfig+0x244>)
 8005942:	4313      	orrs	r3, r2
 8005944:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0308 	and.w	r3, r3, #8
 800594e:	2b00      	cmp	r3, #0
 8005950:	d010      	beq.n	8005974 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	695a      	ldr	r2, [r3, #20]
 8005956:	4b70      	ldr	r3, [pc, #448]	; (8005b18 <HAL_RCC_ClockConfig+0x244>)
 8005958:	69db      	ldr	r3, [r3, #28]
 800595a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800595e:	429a      	cmp	r2, r3
 8005960:	d908      	bls.n	8005974 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005962:	4b6d      	ldr	r3, [pc, #436]	; (8005b18 <HAL_RCC_ClockConfig+0x244>)
 8005964:	69db      	ldr	r3, [r3, #28]
 8005966:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	496a      	ldr	r1, [pc, #424]	; (8005b18 <HAL_RCC_ClockConfig+0x244>)
 8005970:	4313      	orrs	r3, r2
 8005972:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0310 	and.w	r3, r3, #16
 800597c:	2b00      	cmp	r3, #0
 800597e:	d010      	beq.n	80059a2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	699a      	ldr	r2, [r3, #24]
 8005984:	4b64      	ldr	r3, [pc, #400]	; (8005b18 <HAL_RCC_ClockConfig+0x244>)
 8005986:	69db      	ldr	r3, [r3, #28]
 8005988:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800598c:	429a      	cmp	r2, r3
 800598e:	d908      	bls.n	80059a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005990:	4b61      	ldr	r3, [pc, #388]	; (8005b18 <HAL_RCC_ClockConfig+0x244>)
 8005992:	69db      	ldr	r3, [r3, #28]
 8005994:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	699b      	ldr	r3, [r3, #24]
 800599c:	495e      	ldr	r1, [pc, #376]	; (8005b18 <HAL_RCC_ClockConfig+0x244>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 0320 	and.w	r3, r3, #32
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d010      	beq.n	80059d0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	69da      	ldr	r2, [r3, #28]
 80059b2:	4b59      	ldr	r3, [pc, #356]	; (8005b18 <HAL_RCC_ClockConfig+0x244>)
 80059b4:	6a1b      	ldr	r3, [r3, #32]
 80059b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d908      	bls.n	80059d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80059be:	4b56      	ldr	r3, [pc, #344]	; (8005b18 <HAL_RCC_ClockConfig+0x244>)
 80059c0:	6a1b      	ldr	r3, [r3, #32]
 80059c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	69db      	ldr	r3, [r3, #28]
 80059ca:	4953      	ldr	r1, [pc, #332]	; (8005b18 <HAL_RCC_ClockConfig+0x244>)
 80059cc:	4313      	orrs	r3, r2
 80059ce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0302 	and.w	r3, r3, #2
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d010      	beq.n	80059fe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	68da      	ldr	r2, [r3, #12]
 80059e0:	4b4d      	ldr	r3, [pc, #308]	; (8005b18 <HAL_RCC_ClockConfig+0x244>)
 80059e2:	699b      	ldr	r3, [r3, #24]
 80059e4:	f003 030f 	and.w	r3, r3, #15
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d908      	bls.n	80059fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059ec:	4b4a      	ldr	r3, [pc, #296]	; (8005b18 <HAL_RCC_ClockConfig+0x244>)
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	f023 020f 	bic.w	r2, r3, #15
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	4947      	ldr	r1, [pc, #284]	; (8005b18 <HAL_RCC_ClockConfig+0x244>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0301 	and.w	r3, r3, #1
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d055      	beq.n	8005ab6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005a0a:	4b43      	ldr	r3, [pc, #268]	; (8005b18 <HAL_RCC_ClockConfig+0x244>)
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	4940      	ldr	r1, [pc, #256]	; (8005b18 <HAL_RCC_ClockConfig+0x244>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d107      	bne.n	8005a34 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a24:	4b3c      	ldr	r3, [pc, #240]	; (8005b18 <HAL_RCC_ClockConfig+0x244>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d121      	bne.n	8005a74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e0f6      	b.n	8005c22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	2b03      	cmp	r3, #3
 8005a3a:	d107      	bne.n	8005a4c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a3c:	4b36      	ldr	r3, [pc, #216]	; (8005b18 <HAL_RCC_ClockConfig+0x244>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d115      	bne.n	8005a74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e0ea      	b.n	8005c22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d107      	bne.n	8005a64 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005a54:	4b30      	ldr	r3, [pc, #192]	; (8005b18 <HAL_RCC_ClockConfig+0x244>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d109      	bne.n	8005a74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e0de      	b.n	8005c22 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a64:	4b2c      	ldr	r3, [pc, #176]	; (8005b18 <HAL_RCC_ClockConfig+0x244>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0304 	and.w	r3, r3, #4
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d101      	bne.n	8005a74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e0d6      	b.n	8005c22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a74:	4b28      	ldr	r3, [pc, #160]	; (8005b18 <HAL_RCC_ClockConfig+0x244>)
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	f023 0207 	bic.w	r2, r3, #7
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	4925      	ldr	r1, [pc, #148]	; (8005b18 <HAL_RCC_ClockConfig+0x244>)
 8005a82:	4313      	orrs	r3, r2
 8005a84:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a86:	f7fc fc27 	bl	80022d8 <HAL_GetTick>
 8005a8a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a8c:	e00a      	b.n	8005aa4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a8e:	f7fc fc23 	bl	80022d8 <HAL_GetTick>
 8005a92:	4602      	mov	r2, r0
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d901      	bls.n	8005aa4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	e0be      	b.n	8005c22 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aa4:	4b1c      	ldr	r3, [pc, #112]	; (8005b18 <HAL_RCC_ClockConfig+0x244>)
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	00db      	lsls	r3, r3, #3
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d1eb      	bne.n	8005a8e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 0302 	and.w	r3, r3, #2
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d010      	beq.n	8005ae4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	68da      	ldr	r2, [r3, #12]
 8005ac6:	4b14      	ldr	r3, [pc, #80]	; (8005b18 <HAL_RCC_ClockConfig+0x244>)
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	f003 030f 	and.w	r3, r3, #15
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d208      	bcs.n	8005ae4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ad2:	4b11      	ldr	r3, [pc, #68]	; (8005b18 <HAL_RCC_ClockConfig+0x244>)
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	f023 020f 	bic.w	r2, r3, #15
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	490e      	ldr	r1, [pc, #56]	; (8005b18 <HAL_RCC_ClockConfig+0x244>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ae4:	4b0b      	ldr	r3, [pc, #44]	; (8005b14 <HAL_RCC_ClockConfig+0x240>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 030f 	and.w	r3, r3, #15
 8005aec:	683a      	ldr	r2, [r7, #0]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d214      	bcs.n	8005b1c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005af2:	4b08      	ldr	r3, [pc, #32]	; (8005b14 <HAL_RCC_ClockConfig+0x240>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f023 020f 	bic.w	r2, r3, #15
 8005afa:	4906      	ldr	r1, [pc, #24]	; (8005b14 <HAL_RCC_ClockConfig+0x240>)
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b02:	4b04      	ldr	r3, [pc, #16]	; (8005b14 <HAL_RCC_ClockConfig+0x240>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 030f 	and.w	r3, r3, #15
 8005b0a:	683a      	ldr	r2, [r7, #0]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d005      	beq.n	8005b1c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e086      	b.n	8005c22 <HAL_RCC_ClockConfig+0x34e>
 8005b14:	52002000 	.word	0x52002000
 8005b18:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0304 	and.w	r3, r3, #4
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d010      	beq.n	8005b4a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	691a      	ldr	r2, [r3, #16]
 8005b2c:	4b3f      	ldr	r3, [pc, #252]	; (8005c2c <HAL_RCC_ClockConfig+0x358>)
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d208      	bcs.n	8005b4a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005b38:	4b3c      	ldr	r3, [pc, #240]	; (8005c2c <HAL_RCC_ClockConfig+0x358>)
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	4939      	ldr	r1, [pc, #228]	; (8005c2c <HAL_RCC_ClockConfig+0x358>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0308 	and.w	r3, r3, #8
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d010      	beq.n	8005b78 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	695a      	ldr	r2, [r3, #20]
 8005b5a:	4b34      	ldr	r3, [pc, #208]	; (8005c2c <HAL_RCC_ClockConfig+0x358>)
 8005b5c:	69db      	ldr	r3, [r3, #28]
 8005b5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d208      	bcs.n	8005b78 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005b66:	4b31      	ldr	r3, [pc, #196]	; (8005c2c <HAL_RCC_ClockConfig+0x358>)
 8005b68:	69db      	ldr	r3, [r3, #28]
 8005b6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	695b      	ldr	r3, [r3, #20]
 8005b72:	492e      	ldr	r1, [pc, #184]	; (8005c2c <HAL_RCC_ClockConfig+0x358>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0310 	and.w	r3, r3, #16
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d010      	beq.n	8005ba6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	699a      	ldr	r2, [r3, #24]
 8005b88:	4b28      	ldr	r3, [pc, #160]	; (8005c2c <HAL_RCC_ClockConfig+0x358>)
 8005b8a:	69db      	ldr	r3, [r3, #28]
 8005b8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d208      	bcs.n	8005ba6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005b94:	4b25      	ldr	r3, [pc, #148]	; (8005c2c <HAL_RCC_ClockConfig+0x358>)
 8005b96:	69db      	ldr	r3, [r3, #28]
 8005b98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	4922      	ldr	r1, [pc, #136]	; (8005c2c <HAL_RCC_ClockConfig+0x358>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0320 	and.w	r3, r3, #32
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d010      	beq.n	8005bd4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	69da      	ldr	r2, [r3, #28]
 8005bb6:	4b1d      	ldr	r3, [pc, #116]	; (8005c2c <HAL_RCC_ClockConfig+0x358>)
 8005bb8:	6a1b      	ldr	r3, [r3, #32]
 8005bba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d208      	bcs.n	8005bd4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005bc2:	4b1a      	ldr	r3, [pc, #104]	; (8005c2c <HAL_RCC_ClockConfig+0x358>)
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	69db      	ldr	r3, [r3, #28]
 8005bce:	4917      	ldr	r1, [pc, #92]	; (8005c2c <HAL_RCC_ClockConfig+0x358>)
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005bd4:	f000 f834 	bl	8005c40 <HAL_RCC_GetSysClockFreq>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	4b14      	ldr	r3, [pc, #80]	; (8005c2c <HAL_RCC_ClockConfig+0x358>)
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	0a1b      	lsrs	r3, r3, #8
 8005be0:	f003 030f 	and.w	r3, r3, #15
 8005be4:	4912      	ldr	r1, [pc, #72]	; (8005c30 <HAL_RCC_ClockConfig+0x35c>)
 8005be6:	5ccb      	ldrb	r3, [r1, r3]
 8005be8:	f003 031f 	and.w	r3, r3, #31
 8005bec:	fa22 f303 	lsr.w	r3, r2, r3
 8005bf0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005bf2:	4b0e      	ldr	r3, [pc, #56]	; (8005c2c <HAL_RCC_ClockConfig+0x358>)
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	f003 030f 	and.w	r3, r3, #15
 8005bfa:	4a0d      	ldr	r2, [pc, #52]	; (8005c30 <HAL_RCC_ClockConfig+0x35c>)
 8005bfc:	5cd3      	ldrb	r3, [r2, r3]
 8005bfe:	f003 031f 	and.w	r3, r3, #31
 8005c02:	693a      	ldr	r2, [r7, #16]
 8005c04:	fa22 f303 	lsr.w	r3, r2, r3
 8005c08:	4a0a      	ldr	r2, [pc, #40]	; (8005c34 <HAL_RCC_ClockConfig+0x360>)
 8005c0a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005c0c:	4a0a      	ldr	r2, [pc, #40]	; (8005c38 <HAL_RCC_ClockConfig+0x364>)
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005c12:	4b0a      	ldr	r3, [pc, #40]	; (8005c3c <HAL_RCC_ClockConfig+0x368>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7fc fb14 	bl	8002244 <HAL_InitTick>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3718      	adds	r7, #24
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	58024400 	.word	0x58024400
 8005c30:	0800f750 	.word	0x0800f750
 8005c34:	24000044 	.word	0x24000044
 8005c38:	24000040 	.word	0x24000040
 8005c3c:	24000048 	.word	0x24000048

08005c40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b089      	sub	sp, #36	; 0x24
 8005c44:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c46:	4bb3      	ldr	r3, [pc, #716]	; (8005f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c4e:	2b18      	cmp	r3, #24
 8005c50:	f200 8155 	bhi.w	8005efe <HAL_RCC_GetSysClockFreq+0x2be>
 8005c54:	a201      	add	r2, pc, #4	; (adr r2, 8005c5c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c5a:	bf00      	nop
 8005c5c:	08005cc1 	.word	0x08005cc1
 8005c60:	08005eff 	.word	0x08005eff
 8005c64:	08005eff 	.word	0x08005eff
 8005c68:	08005eff 	.word	0x08005eff
 8005c6c:	08005eff 	.word	0x08005eff
 8005c70:	08005eff 	.word	0x08005eff
 8005c74:	08005eff 	.word	0x08005eff
 8005c78:	08005eff 	.word	0x08005eff
 8005c7c:	08005ce7 	.word	0x08005ce7
 8005c80:	08005eff 	.word	0x08005eff
 8005c84:	08005eff 	.word	0x08005eff
 8005c88:	08005eff 	.word	0x08005eff
 8005c8c:	08005eff 	.word	0x08005eff
 8005c90:	08005eff 	.word	0x08005eff
 8005c94:	08005eff 	.word	0x08005eff
 8005c98:	08005eff 	.word	0x08005eff
 8005c9c:	08005ced 	.word	0x08005ced
 8005ca0:	08005eff 	.word	0x08005eff
 8005ca4:	08005eff 	.word	0x08005eff
 8005ca8:	08005eff 	.word	0x08005eff
 8005cac:	08005eff 	.word	0x08005eff
 8005cb0:	08005eff 	.word	0x08005eff
 8005cb4:	08005eff 	.word	0x08005eff
 8005cb8:	08005eff 	.word	0x08005eff
 8005cbc:	08005cf3 	.word	0x08005cf3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cc0:	4b94      	ldr	r3, [pc, #592]	; (8005f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0320 	and.w	r3, r3, #32
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d009      	beq.n	8005ce0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ccc:	4b91      	ldr	r3, [pc, #580]	; (8005f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	08db      	lsrs	r3, r3, #3
 8005cd2:	f003 0303 	and.w	r3, r3, #3
 8005cd6:	4a90      	ldr	r2, [pc, #576]	; (8005f18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8005cdc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005cde:	e111      	b.n	8005f04 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005ce0:	4b8d      	ldr	r3, [pc, #564]	; (8005f18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ce2:	61bb      	str	r3, [r7, #24]
      break;
 8005ce4:	e10e      	b.n	8005f04 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005ce6:	4b8d      	ldr	r3, [pc, #564]	; (8005f1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005ce8:	61bb      	str	r3, [r7, #24]
      break;
 8005cea:	e10b      	b.n	8005f04 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005cec:	4b8c      	ldr	r3, [pc, #560]	; (8005f20 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005cee:	61bb      	str	r3, [r7, #24]
      break;
 8005cf0:	e108      	b.n	8005f04 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005cf2:	4b88      	ldr	r3, [pc, #544]	; (8005f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf6:	f003 0303 	and.w	r3, r3, #3
 8005cfa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005cfc:	4b85      	ldr	r3, [pc, #532]	; (8005f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d00:	091b      	lsrs	r3, r3, #4
 8005d02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d06:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005d08:	4b82      	ldr	r3, [pc, #520]	; (8005f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d0c:	f003 0301 	and.w	r3, r3, #1
 8005d10:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005d12:	4b80      	ldr	r3, [pc, #512]	; (8005f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d16:	08db      	lsrs	r3, r3, #3
 8005d18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	fb02 f303 	mul.w	r3, r2, r3
 8005d22:	ee07 3a90 	vmov	s15, r3
 8005d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d2a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f000 80e1 	beq.w	8005ef8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	f000 8083 	beq.w	8005e44 <HAL_RCC_GetSysClockFreq+0x204>
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	f200 80a1 	bhi.w	8005e88 <HAL_RCC_GetSysClockFreq+0x248>
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d003      	beq.n	8005d54 <HAL_RCC_GetSysClockFreq+0x114>
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d056      	beq.n	8005e00 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005d52:	e099      	b.n	8005e88 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d54:	4b6f      	ldr	r3, [pc, #444]	; (8005f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0320 	and.w	r3, r3, #32
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d02d      	beq.n	8005dbc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d60:	4b6c      	ldr	r3, [pc, #432]	; (8005f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	08db      	lsrs	r3, r3, #3
 8005d66:	f003 0303 	and.w	r3, r3, #3
 8005d6a:	4a6b      	ldr	r2, [pc, #428]	; (8005f18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8005d70:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	ee07 3a90 	vmov	s15, r3
 8005d78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	ee07 3a90 	vmov	s15, r3
 8005d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d8a:	4b62      	ldr	r3, [pc, #392]	; (8005f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d92:	ee07 3a90 	vmov	s15, r3
 8005d96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d9e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005f24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005da2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005da6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005daa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005db6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005dba:	e087      	b.n	8005ecc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	ee07 3a90 	vmov	s15, r3
 8005dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dc6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005f28 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005dca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dce:	4b51      	ldr	r3, [pc, #324]	; (8005f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dd6:	ee07 3a90 	vmov	s15, r3
 8005dda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dde:	ed97 6a02 	vldr	s12, [r7, #8]
 8005de2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005f24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005de6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005df2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dfa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005dfe:	e065      	b.n	8005ecc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	ee07 3a90 	vmov	s15, r3
 8005e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e0a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005f2c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005e0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e12:	4b40      	ldr	r3, [pc, #256]	; (8005f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e1a:	ee07 3a90 	vmov	s15, r3
 8005e1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e22:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e26:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005f24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005e42:	e043      	b.n	8005ecc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	ee07 3a90 	vmov	s15, r3
 8005e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e4e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005f30 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005e52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e56:	4b2f      	ldr	r3, [pc, #188]	; (8005f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e5e:	ee07 3a90 	vmov	s15, r3
 8005e62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e66:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e6a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005f24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005e86:	e021      	b.n	8005ecc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	ee07 3a90 	vmov	s15, r3
 8005e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e92:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005f2c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005e96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e9a:	4b1e      	ldr	r3, [pc, #120]	; (8005f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ea2:	ee07 3a90 	vmov	s15, r3
 8005ea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eaa:	ed97 6a02 	vldr	s12, [r7, #8]
 8005eae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005f24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005eb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ec6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005eca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005ecc:	4b11      	ldr	r3, [pc, #68]	; (8005f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed0:	0a5b      	lsrs	r3, r3, #9
 8005ed2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	ee07 3a90 	vmov	s15, r3
 8005ee0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005ee4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ee8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005eec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ef0:	ee17 3a90 	vmov	r3, s15
 8005ef4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005ef6:	e005      	b.n	8005f04 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	61bb      	str	r3, [r7, #24]
      break;
 8005efc:	e002      	b.n	8005f04 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005efe:	4b07      	ldr	r3, [pc, #28]	; (8005f1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005f00:	61bb      	str	r3, [r7, #24]
      break;
 8005f02:	bf00      	nop
  }

  return sysclockfreq;
 8005f04:	69bb      	ldr	r3, [r7, #24]
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3724      	adds	r7, #36	; 0x24
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	58024400 	.word	0x58024400
 8005f18:	03d09000 	.word	0x03d09000
 8005f1c:	003d0900 	.word	0x003d0900
 8005f20:	017d7840 	.word	0x017d7840
 8005f24:	46000000 	.word	0x46000000
 8005f28:	4c742400 	.word	0x4c742400
 8005f2c:	4a742400 	.word	0x4a742400
 8005f30:	4bbebc20 	.word	0x4bbebc20

08005f34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005f3a:	f7ff fe81 	bl	8005c40 <HAL_RCC_GetSysClockFreq>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	4b10      	ldr	r3, [pc, #64]	; (8005f84 <HAL_RCC_GetHCLKFreq+0x50>)
 8005f42:	699b      	ldr	r3, [r3, #24]
 8005f44:	0a1b      	lsrs	r3, r3, #8
 8005f46:	f003 030f 	and.w	r3, r3, #15
 8005f4a:	490f      	ldr	r1, [pc, #60]	; (8005f88 <HAL_RCC_GetHCLKFreq+0x54>)
 8005f4c:	5ccb      	ldrb	r3, [r1, r3]
 8005f4e:	f003 031f 	and.w	r3, r3, #31
 8005f52:	fa22 f303 	lsr.w	r3, r2, r3
 8005f56:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005f58:	4b0a      	ldr	r3, [pc, #40]	; (8005f84 <HAL_RCC_GetHCLKFreq+0x50>)
 8005f5a:	699b      	ldr	r3, [r3, #24]
 8005f5c:	f003 030f 	and.w	r3, r3, #15
 8005f60:	4a09      	ldr	r2, [pc, #36]	; (8005f88 <HAL_RCC_GetHCLKFreq+0x54>)
 8005f62:	5cd3      	ldrb	r3, [r2, r3]
 8005f64:	f003 031f 	and.w	r3, r3, #31
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f6e:	4a07      	ldr	r2, [pc, #28]	; (8005f8c <HAL_RCC_GetHCLKFreq+0x58>)
 8005f70:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005f72:	4a07      	ldr	r2, [pc, #28]	; (8005f90 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005f78:	4b04      	ldr	r3, [pc, #16]	; (8005f8c <HAL_RCC_GetHCLKFreq+0x58>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3708      	adds	r7, #8
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	58024400 	.word	0x58024400
 8005f88:	0800f750 	.word	0x0800f750
 8005f8c:	24000044 	.word	0x24000044
 8005f90:	24000040 	.word	0x24000040

08005f94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005f98:	f7ff ffcc 	bl	8005f34 <HAL_RCC_GetHCLKFreq>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	4b06      	ldr	r3, [pc, #24]	; (8005fb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fa0:	69db      	ldr	r3, [r3, #28]
 8005fa2:	091b      	lsrs	r3, r3, #4
 8005fa4:	f003 0307 	and.w	r3, r3, #7
 8005fa8:	4904      	ldr	r1, [pc, #16]	; (8005fbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8005faa:	5ccb      	ldrb	r3, [r1, r3]
 8005fac:	f003 031f 	and.w	r3, r3, #31
 8005fb0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	58024400 	.word	0x58024400
 8005fbc:	0800f750 	.word	0x0800f750

08005fc0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fc4:	b0ca      	sub	sp, #296	; 0x128
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005fcc:	2300      	movs	r3, #0
 8005fce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005fe4:	2500      	movs	r5, #0
 8005fe6:	ea54 0305 	orrs.w	r3, r4, r5
 8005fea:	d049      	beq.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ff0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ff2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ff6:	d02f      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005ff8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ffc:	d828      	bhi.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005ffe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006002:	d01a      	beq.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006004:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006008:	d822      	bhi.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800600a:	2b00      	cmp	r3, #0
 800600c:	d003      	beq.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800600e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006012:	d007      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006014:	e01c      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006016:	4bb8      	ldr	r3, [pc, #736]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601a:	4ab7      	ldr	r2, [pc, #732]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800601c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006020:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006022:	e01a      	b.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006024:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006028:	3308      	adds	r3, #8
 800602a:	2102      	movs	r1, #2
 800602c:	4618      	mov	r0, r3
 800602e:	f002 fb61 	bl	80086f4 <RCCEx_PLL2_Config>
 8006032:	4603      	mov	r3, r0
 8006034:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006038:	e00f      	b.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800603a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800603e:	3328      	adds	r3, #40	; 0x28
 8006040:	2102      	movs	r1, #2
 8006042:	4618      	mov	r0, r3
 8006044:	f002 fc08 	bl	8008858 <RCCEx_PLL3_Config>
 8006048:	4603      	mov	r3, r0
 800604a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800604e:	e004      	b.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006056:	e000      	b.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006058:	bf00      	nop
    }

    if (ret == HAL_OK)
 800605a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800605e:	2b00      	cmp	r3, #0
 8006060:	d10a      	bne.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006062:	4ba5      	ldr	r3, [pc, #660]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006066:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800606a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800606e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006070:	4aa1      	ldr	r2, [pc, #644]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006072:	430b      	orrs	r3, r1
 8006074:	6513      	str	r3, [r2, #80]	; 0x50
 8006076:	e003      	b.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006078:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800607c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006080:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006088:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800608c:	f04f 0900 	mov.w	r9, #0
 8006090:	ea58 0309 	orrs.w	r3, r8, r9
 8006094:	d047      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006096:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800609a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800609c:	2b04      	cmp	r3, #4
 800609e:	d82a      	bhi.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80060a0:	a201      	add	r2, pc, #4	; (adr r2, 80060a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80060a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a6:	bf00      	nop
 80060a8:	080060bd 	.word	0x080060bd
 80060ac:	080060cb 	.word	0x080060cb
 80060b0:	080060e1 	.word	0x080060e1
 80060b4:	080060ff 	.word	0x080060ff
 80060b8:	080060ff 	.word	0x080060ff
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060bc:	4b8e      	ldr	r3, [pc, #568]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c0:	4a8d      	ldr	r2, [pc, #564]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80060c8:	e01a      	b.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060ce:	3308      	adds	r3, #8
 80060d0:	2100      	movs	r1, #0
 80060d2:	4618      	mov	r0, r3
 80060d4:	f002 fb0e 	bl	80086f4 <RCCEx_PLL2_Config>
 80060d8:	4603      	mov	r3, r0
 80060da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80060de:	e00f      	b.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80060e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060e4:	3328      	adds	r3, #40	; 0x28
 80060e6:	2100      	movs	r1, #0
 80060e8:	4618      	mov	r0, r3
 80060ea:	f002 fbb5 	bl	8008858 <RCCEx_PLL3_Config>
 80060ee:	4603      	mov	r3, r0
 80060f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80060f4:	e004      	b.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80060fc:	e000      	b.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80060fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006100:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006104:	2b00      	cmp	r3, #0
 8006106:	d10a      	bne.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006108:	4b7b      	ldr	r3, [pc, #492]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800610a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800610c:	f023 0107 	bic.w	r1, r3, #7
 8006110:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006116:	4a78      	ldr	r2, [pc, #480]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006118:	430b      	orrs	r3, r1
 800611a:	6513      	str	r3, [r2, #80]	; 0x50
 800611c:	e003      	b.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800611e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006122:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006126:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800612a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8006132:	f04f 0b00 	mov.w	fp, #0
 8006136:	ea5a 030b 	orrs.w	r3, sl, fp
 800613a:	d04c      	beq.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800613c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006142:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006146:	d030      	beq.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006148:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800614c:	d829      	bhi.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800614e:	2bc0      	cmp	r3, #192	; 0xc0
 8006150:	d02d      	beq.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006152:	2bc0      	cmp	r3, #192	; 0xc0
 8006154:	d825      	bhi.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006156:	2b80      	cmp	r3, #128	; 0x80
 8006158:	d018      	beq.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800615a:	2b80      	cmp	r3, #128	; 0x80
 800615c:	d821      	bhi.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800615e:	2b00      	cmp	r3, #0
 8006160:	d002      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006162:	2b40      	cmp	r3, #64	; 0x40
 8006164:	d007      	beq.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006166:	e01c      	b.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006168:	4b63      	ldr	r3, [pc, #396]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800616a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616c:	4a62      	ldr	r2, [pc, #392]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800616e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006172:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006174:	e01c      	b.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006176:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800617a:	3308      	adds	r3, #8
 800617c:	2100      	movs	r1, #0
 800617e:	4618      	mov	r0, r3
 8006180:	f002 fab8 	bl	80086f4 <RCCEx_PLL2_Config>
 8006184:	4603      	mov	r3, r0
 8006186:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800618a:	e011      	b.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800618c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006190:	3328      	adds	r3, #40	; 0x28
 8006192:	2100      	movs	r1, #0
 8006194:	4618      	mov	r0, r3
 8006196:	f002 fb5f 	bl	8008858 <RCCEx_PLL3_Config>
 800619a:	4603      	mov	r3, r0
 800619c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80061a0:	e006      	b.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80061a8:	e002      	b.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80061aa:	bf00      	nop
 80061ac:	e000      	b.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80061ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d10a      	bne.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80061b8:	4b4f      	ldr	r3, [pc, #316]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061bc:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80061c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061c6:	4a4c      	ldr	r2, [pc, #304]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061c8:	430b      	orrs	r3, r1
 80061ca:	6513      	str	r3, [r2, #80]	; 0x50
 80061cc:	e003      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80061d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061de:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80061e2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80061e6:	2300      	movs	r3, #0
 80061e8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80061ec:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80061f0:	460b      	mov	r3, r1
 80061f2:	4313      	orrs	r3, r2
 80061f4:	d053      	beq.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80061f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80061fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006202:	d035      	beq.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006204:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006208:	d82e      	bhi.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800620a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800620e:	d031      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006210:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006214:	d828      	bhi.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006216:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800621a:	d01a      	beq.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800621c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006220:	d822      	bhi.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006222:	2b00      	cmp	r3, #0
 8006224:	d003      	beq.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006226:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800622a:	d007      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800622c:	e01c      	b.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800622e:	4b32      	ldr	r3, [pc, #200]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006232:	4a31      	ldr	r2, [pc, #196]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006238:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800623a:	e01c      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800623c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006240:	3308      	adds	r3, #8
 8006242:	2100      	movs	r1, #0
 8006244:	4618      	mov	r0, r3
 8006246:	f002 fa55 	bl	80086f4 <RCCEx_PLL2_Config>
 800624a:	4603      	mov	r3, r0
 800624c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006250:	e011      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006252:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006256:	3328      	adds	r3, #40	; 0x28
 8006258:	2100      	movs	r1, #0
 800625a:	4618      	mov	r0, r3
 800625c:	f002 fafc 	bl	8008858 <RCCEx_PLL3_Config>
 8006260:	4603      	mov	r3, r0
 8006262:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006266:	e006      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800626e:	e002      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006270:	bf00      	nop
 8006272:	e000      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006274:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006276:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800627a:	2b00      	cmp	r3, #0
 800627c:	d10b      	bne.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800627e:	4b1e      	ldr	r3, [pc, #120]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006282:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8006286:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800628a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800628e:	4a1a      	ldr	r2, [pc, #104]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006290:	430b      	orrs	r3, r1
 8006292:	6593      	str	r3, [r2, #88]	; 0x58
 8006294:	e003      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006296:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800629a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800629e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80062aa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80062ae:	2300      	movs	r3, #0
 80062b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80062b4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80062b8:	460b      	mov	r3, r1
 80062ba:	4313      	orrs	r3, r2
 80062bc:	d056      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80062be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80062c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80062ca:	d038      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80062cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80062d0:	d831      	bhi.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80062d2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80062d6:	d034      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80062d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80062dc:	d82b      	bhi.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80062de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062e2:	d01d      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80062e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062e8:	d825      	bhi.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d006      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80062ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80062f2:	d00a      	beq.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80062f4:	e01f      	b.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80062f6:	bf00      	nop
 80062f8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062fc:	4ba2      	ldr	r3, [pc, #648]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80062fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006300:	4aa1      	ldr	r2, [pc, #644]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006302:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006306:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006308:	e01c      	b.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800630a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800630e:	3308      	adds	r3, #8
 8006310:	2100      	movs	r1, #0
 8006312:	4618      	mov	r0, r3
 8006314:	f002 f9ee 	bl	80086f4 <RCCEx_PLL2_Config>
 8006318:	4603      	mov	r3, r0
 800631a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800631e:	e011      	b.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006320:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006324:	3328      	adds	r3, #40	; 0x28
 8006326:	2100      	movs	r1, #0
 8006328:	4618      	mov	r0, r3
 800632a:	f002 fa95 	bl	8008858 <RCCEx_PLL3_Config>
 800632e:	4603      	mov	r3, r0
 8006330:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006334:	e006      	b.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800633c:	e002      	b.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800633e:	bf00      	nop
 8006340:	e000      	b.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006342:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006344:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006348:	2b00      	cmp	r3, #0
 800634a:	d10b      	bne.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800634c:	4b8e      	ldr	r3, [pc, #568]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800634e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006350:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006354:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006358:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800635c:	4a8a      	ldr	r2, [pc, #552]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800635e:	430b      	orrs	r3, r1
 8006360:	6593      	str	r3, [r2, #88]	; 0x58
 8006362:	e003      	b.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006364:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006368:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800636c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006374:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006378:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800637c:	2300      	movs	r3, #0
 800637e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006382:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8006386:	460b      	mov	r3, r1
 8006388:	4313      	orrs	r3, r2
 800638a:	d03a      	beq.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800638c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006392:	2b30      	cmp	r3, #48	; 0x30
 8006394:	d01f      	beq.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006396:	2b30      	cmp	r3, #48	; 0x30
 8006398:	d819      	bhi.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800639a:	2b20      	cmp	r3, #32
 800639c:	d00c      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800639e:	2b20      	cmp	r3, #32
 80063a0:	d815      	bhi.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d019      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80063a6:	2b10      	cmp	r3, #16
 80063a8:	d111      	bne.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063aa:	4b77      	ldr	r3, [pc, #476]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ae:	4a76      	ldr	r2, [pc, #472]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80063b6:	e011      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80063b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063bc:	3308      	adds	r3, #8
 80063be:	2102      	movs	r1, #2
 80063c0:	4618      	mov	r0, r3
 80063c2:	f002 f997 	bl	80086f4 <RCCEx_PLL2_Config>
 80063c6:	4603      	mov	r3, r0
 80063c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80063cc:	e006      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80063d4:	e002      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80063d6:	bf00      	nop
 80063d8:	e000      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80063da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d10a      	bne.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80063e4:	4b68      	ldr	r3, [pc, #416]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063e8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80063ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063f2:	4a65      	ldr	r2, [pc, #404]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063f4:	430b      	orrs	r3, r1
 80063f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80063f8:	e003      	b.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006402:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800640e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006412:	2300      	movs	r3, #0
 8006414:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006418:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800641c:	460b      	mov	r3, r1
 800641e:	4313      	orrs	r3, r2
 8006420:	d051      	beq.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006422:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006428:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800642c:	d035      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800642e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006432:	d82e      	bhi.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006434:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006438:	d031      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800643a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800643e:	d828      	bhi.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006440:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006444:	d01a      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006446:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800644a:	d822      	bhi.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800644c:	2b00      	cmp	r3, #0
 800644e:	d003      	beq.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006450:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006454:	d007      	beq.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006456:	e01c      	b.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006458:	4b4b      	ldr	r3, [pc, #300]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800645a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800645c:	4a4a      	ldr	r2, [pc, #296]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800645e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006462:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006464:	e01c      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006466:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800646a:	3308      	adds	r3, #8
 800646c:	2100      	movs	r1, #0
 800646e:	4618      	mov	r0, r3
 8006470:	f002 f940 	bl	80086f4 <RCCEx_PLL2_Config>
 8006474:	4603      	mov	r3, r0
 8006476:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800647a:	e011      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800647c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006480:	3328      	adds	r3, #40	; 0x28
 8006482:	2100      	movs	r1, #0
 8006484:	4618      	mov	r0, r3
 8006486:	f002 f9e7 	bl	8008858 <RCCEx_PLL3_Config>
 800648a:	4603      	mov	r3, r0
 800648c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006490:	e006      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006498:	e002      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800649a:	bf00      	nop
 800649c:	e000      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800649e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d10a      	bne.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80064a8:	4b37      	ldr	r3, [pc, #220]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064ac:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80064b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064b6:	4a34      	ldr	r2, [pc, #208]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064b8:	430b      	orrs	r3, r1
 80064ba:	6513      	str	r3, [r2, #80]	; 0x50
 80064bc:	e003      	b.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80064c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ce:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80064d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80064d6:	2300      	movs	r3, #0
 80064d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80064dc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80064e0:	460b      	mov	r3, r1
 80064e2:	4313      	orrs	r3, r2
 80064e4:	d056      	beq.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80064e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064f0:	d033      	beq.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80064f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064f6:	d82c      	bhi.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80064f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80064fc:	d02f      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80064fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006502:	d826      	bhi.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006504:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006508:	d02b      	beq.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800650a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800650e:	d820      	bhi.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006510:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006514:	d012      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006516:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800651a:	d81a      	bhi.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800651c:	2b00      	cmp	r3, #0
 800651e:	d022      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006524:	d115      	bne.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006526:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800652a:	3308      	adds	r3, #8
 800652c:	2101      	movs	r1, #1
 800652e:	4618      	mov	r0, r3
 8006530:	f002 f8e0 	bl	80086f4 <RCCEx_PLL2_Config>
 8006534:	4603      	mov	r3, r0
 8006536:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800653a:	e015      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800653c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006540:	3328      	adds	r3, #40	; 0x28
 8006542:	2101      	movs	r1, #1
 8006544:	4618      	mov	r0, r3
 8006546:	f002 f987 	bl	8008858 <RCCEx_PLL3_Config>
 800654a:	4603      	mov	r3, r0
 800654c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006550:	e00a      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006558:	e006      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800655a:	bf00      	nop
 800655c:	e004      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800655e:	bf00      	nop
 8006560:	e002      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006562:	bf00      	nop
 8006564:	e000      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006566:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006568:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800656c:	2b00      	cmp	r3, #0
 800656e:	d10d      	bne.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006570:	4b05      	ldr	r3, [pc, #20]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006574:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006578:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800657c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800657e:	4a02      	ldr	r2, [pc, #8]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006580:	430b      	orrs	r3, r1
 8006582:	6513      	str	r3, [r2, #80]	; 0x50
 8006584:	e006      	b.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006586:	bf00      	nop
 8006588:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800658c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006590:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006594:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80065a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80065a4:	2300      	movs	r3, #0
 80065a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80065aa:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80065ae:	460b      	mov	r3, r1
 80065b0:	4313      	orrs	r3, r2
 80065b2:	d055      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80065b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80065bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065c0:	d033      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80065c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065c6:	d82c      	bhi.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80065c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065cc:	d02f      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80065ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065d2:	d826      	bhi.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80065d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80065d8:	d02b      	beq.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80065da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80065de:	d820      	bhi.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80065e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065e4:	d012      	beq.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80065e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065ea:	d81a      	bhi.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d022      	beq.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80065f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065f4:	d115      	bne.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80065f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065fa:	3308      	adds	r3, #8
 80065fc:	2101      	movs	r1, #1
 80065fe:	4618      	mov	r0, r3
 8006600:	f002 f878 	bl	80086f4 <RCCEx_PLL2_Config>
 8006604:	4603      	mov	r3, r0
 8006606:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800660a:	e015      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800660c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006610:	3328      	adds	r3, #40	; 0x28
 8006612:	2101      	movs	r1, #1
 8006614:	4618      	mov	r0, r3
 8006616:	f002 f91f 	bl	8008858 <RCCEx_PLL3_Config>
 800661a:	4603      	mov	r3, r0
 800661c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006620:	e00a      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006628:	e006      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800662a:	bf00      	nop
 800662c:	e004      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800662e:	bf00      	nop
 8006630:	e002      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006632:	bf00      	nop
 8006634:	e000      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006636:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006638:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800663c:	2b00      	cmp	r3, #0
 800663e:	d10b      	bne.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006640:	4ba3      	ldr	r3, [pc, #652]	; (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006644:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006648:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800664c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006650:	4a9f      	ldr	r2, [pc, #636]	; (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006652:	430b      	orrs	r3, r1
 8006654:	6593      	str	r3, [r2, #88]	; 0x58
 8006656:	e003      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006658:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800665c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006660:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006668:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800666c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006670:	2300      	movs	r3, #0
 8006672:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006676:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800667a:	460b      	mov	r3, r1
 800667c:	4313      	orrs	r3, r2
 800667e:	d037      	beq.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006680:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006686:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800668a:	d00e      	beq.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800668c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006690:	d816      	bhi.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006692:	2b00      	cmp	r3, #0
 8006694:	d018      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006696:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800669a:	d111      	bne.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800669c:	4b8c      	ldr	r3, [pc, #560]	; (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800669e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a0:	4a8b      	ldr	r2, [pc, #556]	; (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80066a8:	e00f      	b.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066ae:	3308      	adds	r3, #8
 80066b0:	2101      	movs	r1, #1
 80066b2:	4618      	mov	r0, r3
 80066b4:	f002 f81e 	bl	80086f4 <RCCEx_PLL2_Config>
 80066b8:	4603      	mov	r3, r0
 80066ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80066be:	e004      	b.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80066c6:	e000      	b.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80066c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d10a      	bne.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80066d2:	4b7f      	ldr	r3, [pc, #508]	; (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066d6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80066da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066e0:	4a7b      	ldr	r2, [pc, #492]	; (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066e2:	430b      	orrs	r3, r1
 80066e4:	6513      	str	r3, [r2, #80]	; 0x50
 80066e6:	e003      	b.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80066f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80066fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006700:	2300      	movs	r3, #0
 8006702:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006706:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800670a:	460b      	mov	r3, r1
 800670c:	4313      	orrs	r3, r2
 800670e:	d039      	beq.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006710:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006714:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006716:	2b03      	cmp	r3, #3
 8006718:	d81c      	bhi.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800671a:	a201      	add	r2, pc, #4	; (adr r2, 8006720 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800671c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006720:	0800675d 	.word	0x0800675d
 8006724:	08006731 	.word	0x08006731
 8006728:	0800673f 	.word	0x0800673f
 800672c:	0800675d 	.word	0x0800675d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006730:	4b67      	ldr	r3, [pc, #412]	; (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006734:	4a66      	ldr	r2, [pc, #408]	; (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006736:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800673a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800673c:	e00f      	b.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800673e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006742:	3308      	adds	r3, #8
 8006744:	2102      	movs	r1, #2
 8006746:	4618      	mov	r0, r3
 8006748:	f001 ffd4 	bl	80086f4 <RCCEx_PLL2_Config>
 800674c:	4603      	mov	r3, r0
 800674e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006752:	e004      	b.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800675a:	e000      	b.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800675c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800675e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006762:	2b00      	cmp	r3, #0
 8006764:	d10a      	bne.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006766:	4b5a      	ldr	r3, [pc, #360]	; (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800676a:	f023 0103 	bic.w	r1, r3, #3
 800676e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006774:	4a56      	ldr	r2, [pc, #344]	; (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006776:	430b      	orrs	r3, r1
 8006778:	64d3      	str	r3, [r2, #76]	; 0x4c
 800677a:	e003      	b.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800677c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006780:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006784:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006790:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006794:	2300      	movs	r3, #0
 8006796:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800679a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800679e:	460b      	mov	r3, r1
 80067a0:	4313      	orrs	r3, r2
 80067a2:	f000 809f 	beq.w	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067a6:	4b4b      	ldr	r3, [pc, #300]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a4a      	ldr	r2, [pc, #296]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80067ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80067b2:	f7fb fd91 	bl	80022d8 <HAL_GetTick>
 80067b6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067ba:	e00b      	b.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067bc:	f7fb fd8c 	bl	80022d8 <HAL_GetTick>
 80067c0:	4602      	mov	r2, r0
 80067c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	2b64      	cmp	r3, #100	; 0x64
 80067ca:	d903      	bls.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80067cc:	2303      	movs	r3, #3
 80067ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80067d2:	e005      	b.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067d4:	4b3f      	ldr	r3, [pc, #252]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d0ed      	beq.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80067e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d179      	bne.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80067e8:	4b39      	ldr	r3, [pc, #228]	; (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80067ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80067ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80067f4:	4053      	eors	r3, r2
 80067f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d015      	beq.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80067fe:	4b34      	ldr	r3, [pc, #208]	; (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006802:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006806:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800680a:	4b31      	ldr	r3, [pc, #196]	; (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800680c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800680e:	4a30      	ldr	r2, [pc, #192]	; (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006814:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006816:	4b2e      	ldr	r3, [pc, #184]	; (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800681a:	4a2d      	ldr	r2, [pc, #180]	; (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800681c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006820:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006822:	4a2b      	ldr	r2, [pc, #172]	; (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006824:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006828:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800682a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800682e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006832:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006836:	d118      	bne.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006838:	f7fb fd4e 	bl	80022d8 <HAL_GetTick>
 800683c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006840:	e00d      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006842:	f7fb fd49 	bl	80022d8 <HAL_GetTick>
 8006846:	4602      	mov	r2, r0
 8006848:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800684c:	1ad2      	subs	r2, r2, r3
 800684e:	f241 3388 	movw	r3, #5000	; 0x1388
 8006852:	429a      	cmp	r2, r3
 8006854:	d903      	bls.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800685c:	e005      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800685e:	4b1c      	ldr	r3, [pc, #112]	; (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006862:	f003 0302 	and.w	r3, r3, #2
 8006866:	2b00      	cmp	r3, #0
 8006868:	d0eb      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800686a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800686e:	2b00      	cmp	r3, #0
 8006870:	d129      	bne.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006872:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006876:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800687a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800687e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006882:	d10e      	bne.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006884:	4b12      	ldr	r3, [pc, #72]	; (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006886:	691b      	ldr	r3, [r3, #16]
 8006888:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800688c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006890:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006894:	091a      	lsrs	r2, r3, #4
 8006896:	4b10      	ldr	r3, [pc, #64]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006898:	4013      	ands	r3, r2
 800689a:	4a0d      	ldr	r2, [pc, #52]	; (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800689c:	430b      	orrs	r3, r1
 800689e:	6113      	str	r3, [r2, #16]
 80068a0:	e005      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80068a2:	4b0b      	ldr	r3, [pc, #44]	; (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	4a0a      	ldr	r2, [pc, #40]	; (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068a8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80068ac:	6113      	str	r3, [r2, #16]
 80068ae:	4b08      	ldr	r3, [pc, #32]	; (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068b0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80068b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80068ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068be:	4a04      	ldr	r2, [pc, #16]	; (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068c0:	430b      	orrs	r3, r1
 80068c2:	6713      	str	r3, [r2, #112]	; 0x70
 80068c4:	e00e      	b.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80068c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80068ce:	e009      	b.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80068d0:	58024400 	.word	0x58024400
 80068d4:	58024800 	.word	0x58024800
 80068d8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80068e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ec:	f002 0301 	and.w	r3, r2, #1
 80068f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80068f4:	2300      	movs	r3, #0
 80068f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80068fa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80068fe:	460b      	mov	r3, r1
 8006900:	4313      	orrs	r3, r2
 8006902:	f000 8089 	beq.w	8006a18 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006906:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800690a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800690c:	2b28      	cmp	r3, #40	; 0x28
 800690e:	d86b      	bhi.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006910:	a201      	add	r2, pc, #4	; (adr r2, 8006918 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006916:	bf00      	nop
 8006918:	080069f1 	.word	0x080069f1
 800691c:	080069e9 	.word	0x080069e9
 8006920:	080069e9 	.word	0x080069e9
 8006924:	080069e9 	.word	0x080069e9
 8006928:	080069e9 	.word	0x080069e9
 800692c:	080069e9 	.word	0x080069e9
 8006930:	080069e9 	.word	0x080069e9
 8006934:	080069e9 	.word	0x080069e9
 8006938:	080069bd 	.word	0x080069bd
 800693c:	080069e9 	.word	0x080069e9
 8006940:	080069e9 	.word	0x080069e9
 8006944:	080069e9 	.word	0x080069e9
 8006948:	080069e9 	.word	0x080069e9
 800694c:	080069e9 	.word	0x080069e9
 8006950:	080069e9 	.word	0x080069e9
 8006954:	080069e9 	.word	0x080069e9
 8006958:	080069d3 	.word	0x080069d3
 800695c:	080069e9 	.word	0x080069e9
 8006960:	080069e9 	.word	0x080069e9
 8006964:	080069e9 	.word	0x080069e9
 8006968:	080069e9 	.word	0x080069e9
 800696c:	080069e9 	.word	0x080069e9
 8006970:	080069e9 	.word	0x080069e9
 8006974:	080069e9 	.word	0x080069e9
 8006978:	080069f1 	.word	0x080069f1
 800697c:	080069e9 	.word	0x080069e9
 8006980:	080069e9 	.word	0x080069e9
 8006984:	080069e9 	.word	0x080069e9
 8006988:	080069e9 	.word	0x080069e9
 800698c:	080069e9 	.word	0x080069e9
 8006990:	080069e9 	.word	0x080069e9
 8006994:	080069e9 	.word	0x080069e9
 8006998:	080069f1 	.word	0x080069f1
 800699c:	080069e9 	.word	0x080069e9
 80069a0:	080069e9 	.word	0x080069e9
 80069a4:	080069e9 	.word	0x080069e9
 80069a8:	080069e9 	.word	0x080069e9
 80069ac:	080069e9 	.word	0x080069e9
 80069b0:	080069e9 	.word	0x080069e9
 80069b4:	080069e9 	.word	0x080069e9
 80069b8:	080069f1 	.word	0x080069f1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80069bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069c0:	3308      	adds	r3, #8
 80069c2:	2101      	movs	r1, #1
 80069c4:	4618      	mov	r0, r3
 80069c6:	f001 fe95 	bl	80086f4 <RCCEx_PLL2_Config>
 80069ca:	4603      	mov	r3, r0
 80069cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80069d0:	e00f      	b.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069d6:	3328      	adds	r3, #40	; 0x28
 80069d8:	2101      	movs	r1, #1
 80069da:	4618      	mov	r0, r3
 80069dc:	f001 ff3c 	bl	8008858 <RCCEx_PLL3_Config>
 80069e0:	4603      	mov	r3, r0
 80069e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80069e6:	e004      	b.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80069ee:	e000      	b.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80069f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d10a      	bne.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80069fa:	4bbf      	ldr	r3, [pc, #764]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80069fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069fe:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8006a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a08:	4abb      	ldr	r2, [pc, #748]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006a0a:	430b      	orrs	r3, r1
 8006a0c:	6553      	str	r3, [r2, #84]	; 0x54
 8006a0e:	e003      	b.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a20:	f002 0302 	and.w	r3, r2, #2
 8006a24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a28:	2300      	movs	r3, #0
 8006a2a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006a2e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006a32:	460b      	mov	r3, r1
 8006a34:	4313      	orrs	r3, r2
 8006a36:	d041      	beq.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a3e:	2b05      	cmp	r3, #5
 8006a40:	d824      	bhi.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006a42:	a201      	add	r2, pc, #4	; (adr r2, 8006a48 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a48:	08006a95 	.word	0x08006a95
 8006a4c:	08006a61 	.word	0x08006a61
 8006a50:	08006a77 	.word	0x08006a77
 8006a54:	08006a95 	.word	0x08006a95
 8006a58:	08006a95 	.word	0x08006a95
 8006a5c:	08006a95 	.word	0x08006a95
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a64:	3308      	adds	r3, #8
 8006a66:	2101      	movs	r1, #1
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f001 fe43 	bl	80086f4 <RCCEx_PLL2_Config>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006a74:	e00f      	b.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a7a:	3328      	adds	r3, #40	; 0x28
 8006a7c:	2101      	movs	r1, #1
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f001 feea 	bl	8008858 <RCCEx_PLL3_Config>
 8006a84:	4603      	mov	r3, r0
 8006a86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006a8a:	e004      	b.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006a92:	e000      	b.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006a94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d10a      	bne.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006a9e:	4b96      	ldr	r3, [pc, #600]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aa2:	f023 0107 	bic.w	r1, r3, #7
 8006aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006aaa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006aac:	4a92      	ldr	r2, [pc, #584]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006aae:	430b      	orrs	r3, r1
 8006ab0:	6553      	str	r3, [r2, #84]	; 0x54
 8006ab2:	e003      	b.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ab4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ab8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac4:	f002 0304 	and.w	r3, r2, #4
 8006ac8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006acc:	2300      	movs	r3, #0
 8006ace:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ad2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006ad6:	460b      	mov	r3, r1
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	d044      	beq.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ae0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ae4:	2b05      	cmp	r3, #5
 8006ae6:	d825      	bhi.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006ae8:	a201      	add	r2, pc, #4	; (adr r2, 8006af0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aee:	bf00      	nop
 8006af0:	08006b3d 	.word	0x08006b3d
 8006af4:	08006b09 	.word	0x08006b09
 8006af8:	08006b1f 	.word	0x08006b1f
 8006afc:	08006b3d 	.word	0x08006b3d
 8006b00:	08006b3d 	.word	0x08006b3d
 8006b04:	08006b3d 	.word	0x08006b3d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b0c:	3308      	adds	r3, #8
 8006b0e:	2101      	movs	r1, #1
 8006b10:	4618      	mov	r0, r3
 8006b12:	f001 fdef 	bl	80086f4 <RCCEx_PLL2_Config>
 8006b16:	4603      	mov	r3, r0
 8006b18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006b1c:	e00f      	b.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b22:	3328      	adds	r3, #40	; 0x28
 8006b24:	2101      	movs	r1, #1
 8006b26:	4618      	mov	r0, r3
 8006b28:	f001 fe96 	bl	8008858 <RCCEx_PLL3_Config>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006b32:	e004      	b.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006b3a:	e000      	b.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006b3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d10b      	bne.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006b46:	4b6c      	ldr	r3, [pc, #432]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b4a:	f023 0107 	bic.w	r1, r3, #7
 8006b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b56:	4a68      	ldr	r2, [pc, #416]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006b58:	430b      	orrs	r3, r1
 8006b5a:	6593      	str	r3, [r2, #88]	; 0x58
 8006b5c:	e003      	b.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6e:	f002 0320 	and.w	r3, r2, #32
 8006b72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006b76:	2300      	movs	r3, #0
 8006b78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006b80:	460b      	mov	r3, r1
 8006b82:	4313      	orrs	r3, r2
 8006b84:	d055      	beq.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b92:	d033      	beq.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006b94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b98:	d82c      	bhi.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b9e:	d02f      	beq.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ba4:	d826      	bhi.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006ba6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006baa:	d02b      	beq.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006bac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006bb0:	d820      	bhi.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006bb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bb6:	d012      	beq.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006bb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bbc:	d81a      	bhi.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d022      	beq.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006bc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bc6:	d115      	bne.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bcc:	3308      	adds	r3, #8
 8006bce:	2100      	movs	r1, #0
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f001 fd8f 	bl	80086f4 <RCCEx_PLL2_Config>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006bdc:	e015      	b.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006be2:	3328      	adds	r3, #40	; 0x28
 8006be4:	2102      	movs	r1, #2
 8006be6:	4618      	mov	r0, r3
 8006be8:	f001 fe36 	bl	8008858 <RCCEx_PLL3_Config>
 8006bec:	4603      	mov	r3, r0
 8006bee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006bf2:	e00a      	b.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006bfa:	e006      	b.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006bfc:	bf00      	nop
 8006bfe:	e004      	b.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006c00:	bf00      	nop
 8006c02:	e002      	b.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006c04:	bf00      	nop
 8006c06:	e000      	b.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006c08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d10b      	bne.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c12:	4b39      	ldr	r3, [pc, #228]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c16:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c22:	4a35      	ldr	r2, [pc, #212]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006c24:	430b      	orrs	r3, r1
 8006c26:	6553      	str	r3, [r2, #84]	; 0x54
 8006c28:	e003      	b.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006c3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006c42:	2300      	movs	r3, #0
 8006c44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006c48:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	d058      	beq.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c5a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006c5e:	d033      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006c60:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006c64:	d82c      	bhi.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c6a:	d02f      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006c6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c70:	d826      	bhi.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006c72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c76:	d02b      	beq.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006c78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c7c:	d820      	bhi.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006c7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c82:	d012      	beq.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006c84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c88:	d81a      	bhi.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d022      	beq.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006c8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c92:	d115      	bne.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c98:	3308      	adds	r3, #8
 8006c9a:	2100      	movs	r1, #0
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f001 fd29 	bl	80086f4 <RCCEx_PLL2_Config>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006ca8:	e015      	b.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cae:	3328      	adds	r3, #40	; 0x28
 8006cb0:	2102      	movs	r1, #2
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f001 fdd0 	bl	8008858 <RCCEx_PLL3_Config>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006cbe:	e00a      	b.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006cc6:	e006      	b.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006cc8:	bf00      	nop
 8006cca:	e004      	b.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006ccc:	bf00      	nop
 8006cce:	e002      	b.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006cd0:	bf00      	nop
 8006cd2:	e000      	b.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006cd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d10e      	bne.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006cde:	4b06      	ldr	r3, [pc, #24]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ce2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006cee:	4a02      	ldr	r2, [pc, #8]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006cf0:	430b      	orrs	r3, r1
 8006cf2:	6593      	str	r3, [r2, #88]	; 0x58
 8006cf4:	e006      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006cf6:	bf00      	nop
 8006cf8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cfc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006d10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006d14:	2300      	movs	r3, #0
 8006d16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006d1a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006d1e:	460b      	mov	r3, r1
 8006d20:	4313      	orrs	r3, r2
 8006d22:	d055      	beq.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d28:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006d2c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006d30:	d033      	beq.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006d32:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006d36:	d82c      	bhi.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006d38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d3c:	d02f      	beq.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006d3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d42:	d826      	bhi.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006d44:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006d48:	d02b      	beq.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006d4a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006d4e:	d820      	bhi.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006d50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d54:	d012      	beq.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006d56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d5a:	d81a      	bhi.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d022      	beq.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006d60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d64:	d115      	bne.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d6a:	3308      	adds	r3, #8
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f001 fcc0 	bl	80086f4 <RCCEx_PLL2_Config>
 8006d74:	4603      	mov	r3, r0
 8006d76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006d7a:	e015      	b.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d80:	3328      	adds	r3, #40	; 0x28
 8006d82:	2102      	movs	r1, #2
 8006d84:	4618      	mov	r0, r3
 8006d86:	f001 fd67 	bl	8008858 <RCCEx_PLL3_Config>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006d90:	e00a      	b.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006d98:	e006      	b.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006d9a:	bf00      	nop
 8006d9c:	e004      	b.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006d9e:	bf00      	nop
 8006da0:	e002      	b.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006da2:	bf00      	nop
 8006da4:	e000      	b.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006da6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006da8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d10b      	bne.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006db0:	4ba1      	ldr	r3, [pc, #644]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006db4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dbc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006dc0:	4a9d      	ldr	r2, [pc, #628]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006dc2:	430b      	orrs	r3, r1
 8006dc4:	6593      	str	r3, [r2, #88]	; 0x58
 8006dc6:	e003      	b.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dc8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006dcc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd8:	f002 0308 	and.w	r3, r2, #8
 8006ddc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006de0:	2300      	movs	r3, #0
 8006de2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006de6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006dea:	460b      	mov	r3, r1
 8006dec:	4313      	orrs	r3, r2
 8006dee:	d01e      	beq.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006df4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006df8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dfc:	d10c      	bne.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e02:	3328      	adds	r3, #40	; 0x28
 8006e04:	2102      	movs	r1, #2
 8006e06:	4618      	mov	r0, r3
 8006e08:	f001 fd26 	bl	8008858 <RCCEx_PLL3_Config>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d002      	beq.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006e18:	4b87      	ldr	r3, [pc, #540]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e1c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e28:	4a83      	ldr	r2, [pc, #524]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e2a:	430b      	orrs	r3, r1
 8006e2c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e36:	f002 0310 	and.w	r3, r2, #16
 8006e3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006e3e:	2300      	movs	r3, #0
 8006e40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006e44:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006e48:	460b      	mov	r3, r1
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	d01e      	beq.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e5a:	d10c      	bne.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e60:	3328      	adds	r3, #40	; 0x28
 8006e62:	2102      	movs	r1, #2
 8006e64:	4618      	mov	r0, r3
 8006e66:	f001 fcf7 	bl	8008858 <RCCEx_PLL3_Config>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d002      	beq.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006e76:	4b70      	ldr	r3, [pc, #448]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e7a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e86:	4a6c      	ldr	r2, [pc, #432]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e88:	430b      	orrs	r3, r1
 8006e8a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e94:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006e98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006ea2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006ea6:	460b      	mov	r3, r1
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	d03e      	beq.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006eb0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006eb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006eb8:	d022      	beq.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006eba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ebe:	d81b      	bhi.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d003      	beq.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ec8:	d00b      	beq.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006eca:	e015      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ed0:	3308      	adds	r3, #8
 8006ed2:	2100      	movs	r1, #0
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f001 fc0d 	bl	80086f4 <RCCEx_PLL2_Config>
 8006eda:	4603      	mov	r3, r0
 8006edc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006ee0:	e00f      	b.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ee6:	3328      	adds	r3, #40	; 0x28
 8006ee8:	2102      	movs	r1, #2
 8006eea:	4618      	mov	r0, r3
 8006eec:	f001 fcb4 	bl	8008858 <RCCEx_PLL3_Config>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006ef6:	e004      	b.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006efe:	e000      	b.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006f00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d10b      	bne.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006f0a:	4b4b      	ldr	r3, [pc, #300]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f0e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006f1a:	4a47      	ldr	r2, [pc, #284]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f1c:	430b      	orrs	r3, r1
 8006f1e:	6593      	str	r3, [r2, #88]	; 0x58
 8006f20:	e003      	b.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f32:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006f36:	67bb      	str	r3, [r7, #120]	; 0x78
 8006f38:	2300      	movs	r3, #0
 8006f3a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006f3c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006f40:	460b      	mov	r3, r1
 8006f42:	4313      	orrs	r3, r2
 8006f44:	d03b      	beq.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f4e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f52:	d01f      	beq.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006f54:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f58:	d818      	bhi.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006f5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f5e:	d003      	beq.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006f60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f64:	d007      	beq.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006f66:	e011      	b.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f68:	4b33      	ldr	r3, [pc, #204]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f6c:	4a32      	ldr	r2, [pc, #200]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006f74:	e00f      	b.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f7a:	3328      	adds	r3, #40	; 0x28
 8006f7c:	2101      	movs	r1, #1
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f001 fc6a 	bl	8008858 <RCCEx_PLL3_Config>
 8006f84:	4603      	mov	r3, r0
 8006f86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006f8a:	e004      	b.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006f92:	e000      	b.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006f94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d10b      	bne.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f9e:	4b26      	ldr	r3, [pc, #152]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fa2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fae:	4a22      	ldr	r2, [pc, #136]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006fb0:	430b      	orrs	r3, r1
 8006fb2:	6553      	str	r3, [r2, #84]	; 0x54
 8006fb4:	e003      	b.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006fba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006fca:	673b      	str	r3, [r7, #112]	; 0x70
 8006fcc:	2300      	movs	r3, #0
 8006fce:	677b      	str	r3, [r7, #116]	; 0x74
 8006fd0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	d034      	beq.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d003      	beq.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fe8:	d007      	beq.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006fea:	e011      	b.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fec:	4b12      	ldr	r3, [pc, #72]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff0:	4a11      	ldr	r2, [pc, #68]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ff2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ff6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006ff8:	e00e      	b.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ffe:	3308      	adds	r3, #8
 8007000:	2102      	movs	r1, #2
 8007002:	4618      	mov	r0, r3
 8007004:	f001 fb76 	bl	80086f4 <RCCEx_PLL2_Config>
 8007008:	4603      	mov	r3, r0
 800700a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800700e:	e003      	b.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007016:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007018:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800701c:	2b00      	cmp	r3, #0
 800701e:	d10d      	bne.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007020:	4b05      	ldr	r3, [pc, #20]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007024:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007028:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800702c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800702e:	4a02      	ldr	r2, [pc, #8]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007030:	430b      	orrs	r3, r1
 8007032:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007034:	e006      	b.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007036:	bf00      	nop
 8007038:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800703c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007040:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007044:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800704c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007050:	66bb      	str	r3, [r7, #104]	; 0x68
 8007052:	2300      	movs	r3, #0
 8007054:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007056:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800705a:	460b      	mov	r3, r1
 800705c:	4313      	orrs	r3, r2
 800705e:	d00c      	beq.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007060:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007064:	3328      	adds	r3, #40	; 0x28
 8007066:	2102      	movs	r1, #2
 8007068:	4618      	mov	r0, r3
 800706a:	f001 fbf5 	bl	8008858 <RCCEx_PLL3_Config>
 800706e:	4603      	mov	r3, r0
 8007070:	2b00      	cmp	r3, #0
 8007072:	d002      	beq.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800707a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800707e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007082:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8007086:	663b      	str	r3, [r7, #96]	; 0x60
 8007088:	2300      	movs	r3, #0
 800708a:	667b      	str	r3, [r7, #100]	; 0x64
 800708c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007090:	460b      	mov	r3, r1
 8007092:	4313      	orrs	r3, r2
 8007094:	d038      	beq.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007096:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800709a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800709e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070a2:	d018      	beq.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80070a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070a8:	d811      	bhi.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80070aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070ae:	d014      	beq.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80070b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070b4:	d80b      	bhi.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d011      	beq.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80070ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070be:	d106      	bne.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070c0:	4bc3      	ldr	r3, [pc, #780]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80070c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c4:	4ac2      	ldr	r2, [pc, #776]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80070c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80070cc:	e008      	b.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80070d4:	e004      	b.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80070d6:	bf00      	nop
 80070d8:	e002      	b.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80070da:	bf00      	nop
 80070dc:	e000      	b.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80070de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d10b      	bne.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80070e8:	4bb9      	ldr	r3, [pc, #740]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80070ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ec:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80070f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070f8:	4ab5      	ldr	r2, [pc, #724]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80070fa:	430b      	orrs	r3, r1
 80070fc:	6553      	str	r3, [r2, #84]	; 0x54
 80070fe:	e003      	b.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007100:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007104:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007108:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800710c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007110:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007114:	65bb      	str	r3, [r7, #88]	; 0x58
 8007116:	2300      	movs	r3, #0
 8007118:	65fb      	str	r3, [r7, #92]	; 0x5c
 800711a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800711e:	460b      	mov	r3, r1
 8007120:	4313      	orrs	r3, r2
 8007122:	d009      	beq.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007124:	4baa      	ldr	r3, [pc, #680]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007128:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800712c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007132:	4aa7      	ldr	r2, [pc, #668]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007134:	430b      	orrs	r3, r1
 8007136:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007138:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800713c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007140:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8007144:	653b      	str	r3, [r7, #80]	; 0x50
 8007146:	2300      	movs	r3, #0
 8007148:	657b      	str	r3, [r7, #84]	; 0x54
 800714a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800714e:	460b      	mov	r3, r1
 8007150:	4313      	orrs	r3, r2
 8007152:	d00a      	beq.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007154:	4b9e      	ldr	r3, [pc, #632]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007156:	691b      	ldr	r3, [r3, #16]
 8007158:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800715c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007160:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007164:	4a9a      	ldr	r2, [pc, #616]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007166:	430b      	orrs	r3, r1
 8007168:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800716a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800716e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007172:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007176:	64bb      	str	r3, [r7, #72]	; 0x48
 8007178:	2300      	movs	r3, #0
 800717a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800717c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007180:	460b      	mov	r3, r1
 8007182:	4313      	orrs	r3, r2
 8007184:	d009      	beq.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007186:	4b92      	ldr	r3, [pc, #584]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800718a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800718e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007192:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007194:	4a8e      	ldr	r2, [pc, #568]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007196:	430b      	orrs	r3, r1
 8007198:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800719a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800719e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a2:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80071a6:	643b      	str	r3, [r7, #64]	; 0x40
 80071a8:	2300      	movs	r3, #0
 80071aa:	647b      	str	r3, [r7, #68]	; 0x44
 80071ac:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80071b0:	460b      	mov	r3, r1
 80071b2:	4313      	orrs	r3, r2
 80071b4:	d00e      	beq.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80071b6:	4b86      	ldr	r3, [pc, #536]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	4a85      	ldr	r2, [pc, #532]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80071c0:	6113      	str	r3, [r2, #16]
 80071c2:	4b83      	ldr	r3, [pc, #524]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071c4:	6919      	ldr	r1, [r3, #16]
 80071c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071ca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80071ce:	4a80      	ldr	r2, [pc, #512]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071d0:	430b      	orrs	r3, r1
 80071d2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80071d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071dc:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80071e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80071e2:	2300      	movs	r3, #0
 80071e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071e6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80071ea:	460b      	mov	r3, r1
 80071ec:	4313      	orrs	r3, r2
 80071ee:	d009      	beq.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80071f0:	4b77      	ldr	r3, [pc, #476]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071f4:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80071f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071fe:	4a74      	ldr	r2, [pc, #464]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007200:	430b      	orrs	r3, r1
 8007202:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007204:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007210:	633b      	str	r3, [r7, #48]	; 0x30
 8007212:	2300      	movs	r3, #0
 8007214:	637b      	str	r3, [r7, #52]	; 0x34
 8007216:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800721a:	460b      	mov	r3, r1
 800721c:	4313      	orrs	r3, r2
 800721e:	d00a      	beq.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007220:	4b6b      	ldr	r3, [pc, #428]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007224:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007228:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800722c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007230:	4a67      	ldr	r2, [pc, #412]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007232:	430b      	orrs	r3, r1
 8007234:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007236:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800723a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723e:	2100      	movs	r1, #0
 8007240:	62b9      	str	r1, [r7, #40]	; 0x28
 8007242:	f003 0301 	and.w	r3, r3, #1
 8007246:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007248:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800724c:	460b      	mov	r3, r1
 800724e:	4313      	orrs	r3, r2
 8007250:	d011      	beq.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007252:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007256:	3308      	adds	r3, #8
 8007258:	2100      	movs	r1, #0
 800725a:	4618      	mov	r0, r3
 800725c:	f001 fa4a 	bl	80086f4 <RCCEx_PLL2_Config>
 8007260:	4603      	mov	r3, r0
 8007262:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007266:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800726a:	2b00      	cmp	r3, #0
 800726c:	d003      	beq.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800726e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007272:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007276:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800727a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800727e:	2100      	movs	r1, #0
 8007280:	6239      	str	r1, [r7, #32]
 8007282:	f003 0302 	and.w	r3, r3, #2
 8007286:	627b      	str	r3, [r7, #36]	; 0x24
 8007288:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800728c:	460b      	mov	r3, r1
 800728e:	4313      	orrs	r3, r2
 8007290:	d011      	beq.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007292:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007296:	3308      	adds	r3, #8
 8007298:	2101      	movs	r1, #1
 800729a:	4618      	mov	r0, r3
 800729c:	f001 fa2a 	bl	80086f4 <RCCEx_PLL2_Config>
 80072a0:	4603      	mov	r3, r0
 80072a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80072a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d003      	beq.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80072b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072be:	2100      	movs	r1, #0
 80072c0:	61b9      	str	r1, [r7, #24]
 80072c2:	f003 0304 	and.w	r3, r3, #4
 80072c6:	61fb      	str	r3, [r7, #28]
 80072c8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80072cc:	460b      	mov	r3, r1
 80072ce:	4313      	orrs	r3, r2
 80072d0:	d011      	beq.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80072d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072d6:	3308      	adds	r3, #8
 80072d8:	2102      	movs	r1, #2
 80072da:	4618      	mov	r0, r3
 80072dc:	f001 fa0a 	bl	80086f4 <RCCEx_PLL2_Config>
 80072e0:	4603      	mov	r3, r0
 80072e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80072e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d003      	beq.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80072f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072fe:	2100      	movs	r1, #0
 8007300:	6139      	str	r1, [r7, #16]
 8007302:	f003 0308 	and.w	r3, r3, #8
 8007306:	617b      	str	r3, [r7, #20]
 8007308:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800730c:	460b      	mov	r3, r1
 800730e:	4313      	orrs	r3, r2
 8007310:	d011      	beq.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007312:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007316:	3328      	adds	r3, #40	; 0x28
 8007318:	2100      	movs	r1, #0
 800731a:	4618      	mov	r0, r3
 800731c:	f001 fa9c 	bl	8008858 <RCCEx_PLL3_Config>
 8007320:	4603      	mov	r3, r0
 8007322:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8007326:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800732a:	2b00      	cmp	r3, #0
 800732c:	d003      	beq.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800732e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007332:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800733a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800733e:	2100      	movs	r1, #0
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	f003 0310 	and.w	r3, r3, #16
 8007346:	60fb      	str	r3, [r7, #12]
 8007348:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800734c:	460b      	mov	r3, r1
 800734e:	4313      	orrs	r3, r2
 8007350:	d011      	beq.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007352:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007356:	3328      	adds	r3, #40	; 0x28
 8007358:	2101      	movs	r1, #1
 800735a:	4618      	mov	r0, r3
 800735c:	f001 fa7c 	bl	8008858 <RCCEx_PLL3_Config>
 8007360:	4603      	mov	r3, r0
 8007362:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007366:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800736a:	2b00      	cmp	r3, #0
 800736c:	d003      	beq.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800736e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007372:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007376:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800737a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737e:	2100      	movs	r1, #0
 8007380:	6039      	str	r1, [r7, #0]
 8007382:	f003 0320 	and.w	r3, r3, #32
 8007386:	607b      	str	r3, [r7, #4]
 8007388:	e9d7 1200 	ldrd	r1, r2, [r7]
 800738c:	460b      	mov	r3, r1
 800738e:	4313      	orrs	r3, r2
 8007390:	d011      	beq.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007392:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007396:	3328      	adds	r3, #40	; 0x28
 8007398:	2102      	movs	r1, #2
 800739a:	4618      	mov	r0, r3
 800739c:	f001 fa5c 	bl	8008858 <RCCEx_PLL3_Config>
 80073a0:	4603      	mov	r3, r0
 80073a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80073a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d003      	beq.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80073b6:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d101      	bne.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80073be:	2300      	movs	r3, #0
 80073c0:	e000      	b.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80073ca:	46bd      	mov	sp, r7
 80073cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073d0:	58024400 	.word	0x58024400

080073d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b090      	sub	sp, #64	; 0x40
 80073d8:	af00      	add	r7, sp, #0
 80073da:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80073de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073e2:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80073e6:	430b      	orrs	r3, r1
 80073e8:	f040 8094 	bne.w	8007514 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80073ec:	4b9e      	ldr	r3, [pc, #632]	; (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80073ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073f0:	f003 0307 	and.w	r3, r3, #7
 80073f4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80073f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f8:	2b04      	cmp	r3, #4
 80073fa:	f200 8087 	bhi.w	800750c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80073fe:	a201      	add	r2, pc, #4	; (adr r2, 8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007404:	08007419 	.word	0x08007419
 8007408:	08007441 	.word	0x08007441
 800740c:	08007469 	.word	0x08007469
 8007410:	08007505 	.word	0x08007505
 8007414:	08007491 	.word	0x08007491
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007418:	4b93      	ldr	r3, [pc, #588]	; (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007420:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007424:	d108      	bne.n	8007438 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007426:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800742a:	4618      	mov	r0, r3
 800742c:	f001 f810 	bl	8008450 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007432:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007434:	f000 bd45 	b.w	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007438:	2300      	movs	r3, #0
 800743a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800743c:	f000 bd41 	b.w	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007440:	4b89      	ldr	r3, [pc, #548]	; (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007448:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800744c:	d108      	bne.n	8007460 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800744e:	f107 0318 	add.w	r3, r7, #24
 8007452:	4618      	mov	r0, r3
 8007454:	f000 fd54 	bl	8007f00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800745c:	f000 bd31 	b.w	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007460:	2300      	movs	r3, #0
 8007462:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007464:	f000 bd2d 	b.w	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007468:	4b7f      	ldr	r3, [pc, #508]	; (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007470:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007474:	d108      	bne.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007476:	f107 030c 	add.w	r3, r7, #12
 800747a:	4618      	mov	r0, r3
 800747c:	f000 fe94 	bl	80081a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007484:	f000 bd1d 	b.w	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007488:	2300      	movs	r3, #0
 800748a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800748c:	f000 bd19 	b.w	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007490:	4b75      	ldr	r3, [pc, #468]	; (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007494:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007498:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800749a:	4b73      	ldr	r3, [pc, #460]	; (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 0304 	and.w	r3, r3, #4
 80074a2:	2b04      	cmp	r3, #4
 80074a4:	d10c      	bne.n	80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80074a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d109      	bne.n	80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074ac:	4b6e      	ldr	r3, [pc, #440]	; (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	08db      	lsrs	r3, r3, #3
 80074b2:	f003 0303 	and.w	r3, r3, #3
 80074b6:	4a6d      	ldr	r2, [pc, #436]	; (800766c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80074b8:	fa22 f303 	lsr.w	r3, r2, r3
 80074bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074be:	e01f      	b.n	8007500 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80074c0:	4b69      	ldr	r3, [pc, #420]	; (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074cc:	d106      	bne.n	80074dc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80074ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074d4:	d102      	bne.n	80074dc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80074d6:	4b66      	ldr	r3, [pc, #408]	; (8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80074d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074da:	e011      	b.n	8007500 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80074dc:	4b62      	ldr	r3, [pc, #392]	; (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074e8:	d106      	bne.n	80074f8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80074ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074f0:	d102      	bne.n	80074f8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80074f2:	4b60      	ldr	r3, [pc, #384]	; (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80074f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074f6:	e003      	b.n	8007500 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80074f8:	2300      	movs	r3, #0
 80074fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80074fc:	f000 bce1 	b.w	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007500:	f000 bcdf 	b.w	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007504:	4b5c      	ldr	r3, [pc, #368]	; (8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007506:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007508:	f000 bcdb 	b.w	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800750c:	2300      	movs	r3, #0
 800750e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007510:	f000 bcd7 	b.w	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007514:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007518:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800751c:	430b      	orrs	r3, r1
 800751e:	f040 80ad 	bne.w	800767c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8007522:	4b51      	ldr	r3, [pc, #324]	; (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007526:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800752a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800752c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007532:	d056      	beq.n	80075e2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800753a:	f200 8090 	bhi.w	800765e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800753e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007540:	2bc0      	cmp	r3, #192	; 0xc0
 8007542:	f000 8088 	beq.w	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8007546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007548:	2bc0      	cmp	r3, #192	; 0xc0
 800754a:	f200 8088 	bhi.w	800765e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800754e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007550:	2b80      	cmp	r3, #128	; 0x80
 8007552:	d032      	beq.n	80075ba <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007556:	2b80      	cmp	r3, #128	; 0x80
 8007558:	f200 8081 	bhi.w	800765e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800755c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800755e:	2b00      	cmp	r3, #0
 8007560:	d003      	beq.n	800756a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8007562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007564:	2b40      	cmp	r3, #64	; 0x40
 8007566:	d014      	beq.n	8007592 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007568:	e079      	b.n	800765e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800756a:	4b3f      	ldr	r3, [pc, #252]	; (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007572:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007576:	d108      	bne.n	800758a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007578:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800757c:	4618      	mov	r0, r3
 800757e:	f000 ff67 	bl	8008450 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007584:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007586:	f000 bc9c 	b.w	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800758a:	2300      	movs	r3, #0
 800758c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800758e:	f000 bc98 	b.w	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007592:	4b35      	ldr	r3, [pc, #212]	; (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800759a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800759e:	d108      	bne.n	80075b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075a0:	f107 0318 	add.w	r3, r7, #24
 80075a4:	4618      	mov	r0, r3
 80075a6:	f000 fcab 	bl	8007f00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075ae:	f000 bc88 	b.w	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075b2:	2300      	movs	r3, #0
 80075b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075b6:	f000 bc84 	b.w	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80075ba:	4b2b      	ldr	r3, [pc, #172]	; (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075c6:	d108      	bne.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075c8:	f107 030c 	add.w	r3, r7, #12
 80075cc:	4618      	mov	r0, r3
 80075ce:	f000 fdeb 	bl	80081a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075d6:	f000 bc74 	b.w	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075da:	2300      	movs	r3, #0
 80075dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075de:	f000 bc70 	b.w	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80075e2:	4b21      	ldr	r3, [pc, #132]	; (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80075ea:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80075ec:	4b1e      	ldr	r3, [pc, #120]	; (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f003 0304 	and.w	r3, r3, #4
 80075f4:	2b04      	cmp	r3, #4
 80075f6:	d10c      	bne.n	8007612 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80075f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d109      	bne.n	8007612 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80075fe:	4b1a      	ldr	r3, [pc, #104]	; (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	08db      	lsrs	r3, r3, #3
 8007604:	f003 0303 	and.w	r3, r3, #3
 8007608:	4a18      	ldr	r2, [pc, #96]	; (800766c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800760a:	fa22 f303 	lsr.w	r3, r2, r3
 800760e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007610:	e01f      	b.n	8007652 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007612:	4b15      	ldr	r3, [pc, #84]	; (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800761a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800761e:	d106      	bne.n	800762e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007622:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007626:	d102      	bne.n	800762e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007628:	4b11      	ldr	r3, [pc, #68]	; (8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800762a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800762c:	e011      	b.n	8007652 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800762e:	4b0e      	ldr	r3, [pc, #56]	; (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007636:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800763a:	d106      	bne.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800763c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800763e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007642:	d102      	bne.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007644:	4b0b      	ldr	r3, [pc, #44]	; (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007646:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007648:	e003      	b.n	8007652 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800764a:	2300      	movs	r3, #0
 800764c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800764e:	f000 bc38 	b.w	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007652:	f000 bc36 	b.w	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007656:	4b08      	ldr	r3, [pc, #32]	; (8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007658:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800765a:	f000 bc32 	b.w	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800765e:	2300      	movs	r3, #0
 8007660:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007662:	f000 bc2e 	b.w	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007666:	bf00      	nop
 8007668:	58024400 	.word	0x58024400
 800766c:	03d09000 	.word	0x03d09000
 8007670:	003d0900 	.word	0x003d0900
 8007674:	017d7840 	.word	0x017d7840
 8007678:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800767c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007680:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8007684:	430b      	orrs	r3, r1
 8007686:	f040 809c 	bne.w	80077c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800768a:	4b9e      	ldr	r3, [pc, #632]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800768c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800768e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007692:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007696:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800769a:	d054      	beq.n	8007746 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800769c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80076a2:	f200 808b 	bhi.w	80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80076a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80076ac:	f000 8083 	beq.w	80077b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80076b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80076b6:	f200 8081 	bhi.w	80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80076ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076c0:	d02f      	beq.n	8007722 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80076c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076c8:	d878      	bhi.n	80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80076ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d004      	beq.n	80076da <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80076d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80076d6:	d012      	beq.n	80076fe <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80076d8:	e070      	b.n	80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80076da:	4b8a      	ldr	r3, [pc, #552]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80076e6:	d107      	bne.n	80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076ec:	4618      	mov	r0, r3
 80076ee:	f000 feaf 	bl	8008450 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80076f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076f6:	e3e4      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80076f8:	2300      	movs	r3, #0
 80076fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076fc:	e3e1      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80076fe:	4b81      	ldr	r3, [pc, #516]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007706:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800770a:	d107      	bne.n	800771c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800770c:	f107 0318 	add.w	r3, r7, #24
 8007710:	4618      	mov	r0, r3
 8007712:	f000 fbf5 	bl	8007f00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800771a:	e3d2      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800771c:	2300      	movs	r3, #0
 800771e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007720:	e3cf      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007722:	4b78      	ldr	r3, [pc, #480]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800772a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800772e:	d107      	bne.n	8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007730:	f107 030c 	add.w	r3, r7, #12
 8007734:	4618      	mov	r0, r3
 8007736:	f000 fd37 	bl	80081a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800773e:	e3c0      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007740:	2300      	movs	r3, #0
 8007742:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007744:	e3bd      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007746:	4b6f      	ldr	r3, [pc, #444]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800774a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800774e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007750:	4b6c      	ldr	r3, [pc, #432]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f003 0304 	and.w	r3, r3, #4
 8007758:	2b04      	cmp	r3, #4
 800775a:	d10c      	bne.n	8007776 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800775c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800775e:	2b00      	cmp	r3, #0
 8007760:	d109      	bne.n	8007776 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007762:	4b68      	ldr	r3, [pc, #416]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	08db      	lsrs	r3, r3, #3
 8007768:	f003 0303 	and.w	r3, r3, #3
 800776c:	4a66      	ldr	r2, [pc, #408]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800776e:	fa22 f303 	lsr.w	r3, r2, r3
 8007772:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007774:	e01e      	b.n	80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007776:	4b63      	ldr	r3, [pc, #396]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800777e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007782:	d106      	bne.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007786:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800778a:	d102      	bne.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800778c:	4b5f      	ldr	r3, [pc, #380]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800778e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007790:	e010      	b.n	80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007792:	4b5c      	ldr	r3, [pc, #368]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800779a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800779e:	d106      	bne.n	80077ae <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80077a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077a6:	d102      	bne.n	80077ae <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80077a8:	4b59      	ldr	r3, [pc, #356]	; (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80077aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077ac:	e002      	b.n	80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80077ae:	2300      	movs	r3, #0
 80077b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80077b2:	e386      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80077b4:	e385      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80077b6:	4b57      	ldr	r3, [pc, #348]	; (8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80077b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077ba:	e382      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80077bc:	2300      	movs	r3, #0
 80077be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077c0:	e37f      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80077c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077c6:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80077ca:	430b      	orrs	r3, r1
 80077cc:	f040 80a7 	bne.w	800791e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80077d0:	4b4c      	ldr	r3, [pc, #304]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80077d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077d4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80077d8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80077da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80077e0:	d055      	beq.n	800788e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80077e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80077e8:	f200 8096 	bhi.w	8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80077ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80077f2:	f000 8084 	beq.w	80078fe <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80077f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80077fc:	f200 808c 	bhi.w	8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007802:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007806:	d030      	beq.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8007808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800780e:	f200 8083 	bhi.w	8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007814:	2b00      	cmp	r3, #0
 8007816:	d004      	beq.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800781e:	d012      	beq.n	8007846 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8007820:	e07a      	b.n	8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007822:	4b38      	ldr	r3, [pc, #224]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800782a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800782e:	d107      	bne.n	8007840 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007830:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007834:	4618      	mov	r0, r3
 8007836:	f000 fe0b 	bl	8008450 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800783a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800783c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800783e:	e340      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007840:	2300      	movs	r3, #0
 8007842:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007844:	e33d      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007846:	4b2f      	ldr	r3, [pc, #188]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800784e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007852:	d107      	bne.n	8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007854:	f107 0318 	add.w	r3, r7, #24
 8007858:	4618      	mov	r0, r3
 800785a:	f000 fb51 	bl	8007f00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007862:	e32e      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007864:	2300      	movs	r3, #0
 8007866:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007868:	e32b      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800786a:	4b26      	ldr	r3, [pc, #152]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007872:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007876:	d107      	bne.n	8007888 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007878:	f107 030c 	add.w	r3, r7, #12
 800787c:	4618      	mov	r0, r3
 800787e:	f000 fc93 	bl	80081a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007886:	e31c      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007888:	2300      	movs	r3, #0
 800788a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800788c:	e319      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800788e:	4b1d      	ldr	r3, [pc, #116]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007892:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007896:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007898:	4b1a      	ldr	r3, [pc, #104]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f003 0304 	and.w	r3, r3, #4
 80078a0:	2b04      	cmp	r3, #4
 80078a2:	d10c      	bne.n	80078be <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80078a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d109      	bne.n	80078be <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80078aa:	4b16      	ldr	r3, [pc, #88]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	08db      	lsrs	r3, r3, #3
 80078b0:	f003 0303 	and.w	r3, r3, #3
 80078b4:	4a14      	ldr	r2, [pc, #80]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80078b6:	fa22 f303 	lsr.w	r3, r2, r3
 80078ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078bc:	e01e      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80078be:	4b11      	ldr	r3, [pc, #68]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078ca:	d106      	bne.n	80078da <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80078cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078d2:	d102      	bne.n	80078da <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80078d4:	4b0d      	ldr	r3, [pc, #52]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80078d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078d8:	e010      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80078da:	4b0a      	ldr	r3, [pc, #40]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078e6:	d106      	bne.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80078e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078ee:	d102      	bne.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80078f0:	4b07      	ldr	r3, [pc, #28]	; (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80078f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078f4:	e002      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80078f6:	2300      	movs	r3, #0
 80078f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80078fa:	e2e2      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80078fc:	e2e1      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80078fe:	4b05      	ldr	r3, [pc, #20]	; (8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007900:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007902:	e2de      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007904:	58024400 	.word	0x58024400
 8007908:	03d09000 	.word	0x03d09000
 800790c:	003d0900 	.word	0x003d0900
 8007910:	017d7840 	.word	0x017d7840
 8007914:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8007918:	2300      	movs	r3, #0
 800791a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800791c:	e2d1      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800791e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007922:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8007926:	430b      	orrs	r3, r1
 8007928:	f040 809c 	bne.w	8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800792c:	4b93      	ldr	r3, [pc, #588]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800792e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007930:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007934:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007938:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800793c:	d054      	beq.n	80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800793e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007940:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007944:	f200 808b 	bhi.w	8007a5e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800794a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800794e:	f000 8083 	beq.w	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8007952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007954:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007958:	f200 8081 	bhi.w	8007a5e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800795c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800795e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007962:	d02f      	beq.n	80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8007964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007966:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800796a:	d878      	bhi.n	8007a5e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800796c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800796e:	2b00      	cmp	r3, #0
 8007970:	d004      	beq.n	800797c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007978:	d012      	beq.n	80079a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800797a:	e070      	b.n	8007a5e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800797c:	4b7f      	ldr	r3, [pc, #508]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007984:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007988:	d107      	bne.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800798a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800798e:	4618      	mov	r0, r3
 8007990:	f000 fd5e 	bl	8008450 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007996:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007998:	e293      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800799a:	2300      	movs	r3, #0
 800799c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800799e:	e290      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80079a0:	4b76      	ldr	r3, [pc, #472]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80079ac:	d107      	bne.n	80079be <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079ae:	f107 0318 	add.w	r3, r7, #24
 80079b2:	4618      	mov	r0, r3
 80079b4:	f000 faa4 	bl	8007f00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80079b8:	69bb      	ldr	r3, [r7, #24]
 80079ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079bc:	e281      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079be:	2300      	movs	r3, #0
 80079c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079c2:	e27e      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80079c4:	4b6d      	ldr	r3, [pc, #436]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079d0:	d107      	bne.n	80079e2 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079d2:	f107 030c 	add.w	r3, r7, #12
 80079d6:	4618      	mov	r0, r3
 80079d8:	f000 fbe6 	bl	80081a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079e0:	e26f      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079e2:	2300      	movs	r3, #0
 80079e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079e6:	e26c      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80079e8:	4b64      	ldr	r3, [pc, #400]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80079ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80079f0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80079f2:	4b62      	ldr	r3, [pc, #392]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f003 0304 	and.w	r3, r3, #4
 80079fa:	2b04      	cmp	r3, #4
 80079fc:	d10c      	bne.n	8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80079fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d109      	bne.n	8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a04:	4b5d      	ldr	r3, [pc, #372]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	08db      	lsrs	r3, r3, #3
 8007a0a:	f003 0303 	and.w	r3, r3, #3
 8007a0e:	4a5c      	ldr	r2, [pc, #368]	; (8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007a10:	fa22 f303 	lsr.w	r3, r2, r3
 8007a14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a16:	e01e      	b.n	8007a56 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007a18:	4b58      	ldr	r3, [pc, #352]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a24:	d106      	bne.n	8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8007a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a2c:	d102      	bne.n	8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007a2e:	4b55      	ldr	r3, [pc, #340]	; (8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007a30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a32:	e010      	b.n	8007a56 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007a34:	4b51      	ldr	r3, [pc, #324]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a40:	d106      	bne.n	8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8007a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a48:	d102      	bne.n	8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007a4a:	4b4f      	ldr	r3, [pc, #316]	; (8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a4e:	e002      	b.n	8007a56 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007a50:	2300      	movs	r3, #0
 8007a52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007a54:	e235      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007a56:	e234      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007a58:	4b4c      	ldr	r3, [pc, #304]	; (8007b8c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a5c:	e231      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a62:	e22e      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007a64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a68:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8007a6c:	430b      	orrs	r3, r1
 8007a6e:	f040 808f 	bne.w	8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007a72:	4b42      	ldr	r3, [pc, #264]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a76:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007a7a:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8007a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007a82:	d06b      	beq.n	8007b5c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a86:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007a8a:	d874      	bhi.n	8007b76 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a8e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007a92:	d056      	beq.n	8007b42 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a96:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007a9a:	d86c      	bhi.n	8007b76 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a9e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007aa2:	d03b      	beq.n	8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007aaa:	d864      	bhi.n	8007b76 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ab2:	d021      	beq.n	8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007aba:	d85c      	bhi.n	8007b76 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d004      	beq.n	8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8007ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ac8:	d004      	beq.n	8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8007aca:	e054      	b.n	8007b76 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007acc:	f7fe fa62 	bl	8005f94 <HAL_RCC_GetPCLK1Freq>
 8007ad0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007ad2:	e1f6      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ad4:	4b29      	ldr	r3, [pc, #164]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007adc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ae0:	d107      	bne.n	8007af2 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ae2:	f107 0318 	add.w	r3, r7, #24
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f000 fa0a 	bl	8007f00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007aec:	69fb      	ldr	r3, [r7, #28]
 8007aee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007af0:	e1e7      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007af2:	2300      	movs	r3, #0
 8007af4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007af6:	e1e4      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007af8:	4b20      	ldr	r3, [pc, #128]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b04:	d107      	bne.n	8007b16 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b06:	f107 030c 	add.w	r3, r7, #12
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f000 fb4c 	bl	80081a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b14:	e1d5      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b16:	2300      	movs	r3, #0
 8007b18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b1a:	e1d2      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007b1c:	4b17      	ldr	r3, [pc, #92]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f003 0304 	and.w	r3, r3, #4
 8007b24:	2b04      	cmp	r3, #4
 8007b26:	d109      	bne.n	8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b28:	4b14      	ldr	r3, [pc, #80]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	08db      	lsrs	r3, r3, #3
 8007b2e:	f003 0303 	and.w	r3, r3, #3
 8007b32:	4a13      	ldr	r2, [pc, #76]	; (8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007b34:	fa22 f303 	lsr.w	r3, r2, r3
 8007b38:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b3a:	e1c2      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b40:	e1bf      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007b42:	4b0e      	ldr	r3, [pc, #56]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b4e:	d102      	bne.n	8007b56 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007b50:	4b0c      	ldr	r3, [pc, #48]	; (8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007b52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b54:	e1b5      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b56:	2300      	movs	r3, #0
 8007b58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b5a:	e1b2      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007b5c:	4b07      	ldr	r3, [pc, #28]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b68:	d102      	bne.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8007b6a:	4b07      	ldr	r3, [pc, #28]	; (8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b6e:	e1a8      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b70:	2300      	movs	r3, #0
 8007b72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b74:	e1a5      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007b76:	2300      	movs	r3, #0
 8007b78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b7a:	e1a2      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007b7c:	58024400 	.word	0x58024400
 8007b80:	03d09000 	.word	0x03d09000
 8007b84:	003d0900 	.word	0x003d0900
 8007b88:	017d7840 	.word	0x017d7840
 8007b8c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007b90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b94:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8007b98:	430b      	orrs	r3, r1
 8007b9a:	d173      	bne.n	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007b9c:	4b9c      	ldr	r3, [pc, #624]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ba0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007ba4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007bac:	d02f      	beq.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007bb4:	d863      	bhi.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d004      	beq.n	8007bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8007bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bc2:	d012      	beq.n	8007bea <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007bc4:	e05b      	b.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007bc6:	4b92      	ldr	r3, [pc, #584]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007bd2:	d107      	bne.n	8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bd4:	f107 0318 	add.w	r3, r7, #24
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f000 f991 	bl	8007f00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007bde:	69bb      	ldr	r3, [r7, #24]
 8007be0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007be2:	e16e      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007be4:	2300      	movs	r3, #0
 8007be6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007be8:	e16b      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007bea:	4b89      	ldr	r3, [pc, #548]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007bf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bf6:	d107      	bne.n	8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bf8:	f107 030c 	add.w	r3, r7, #12
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f000 fad3 	bl	80081a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c06:	e15c      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c0c:	e159      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007c0e:	4b80      	ldr	r3, [pc, #512]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007c16:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c18:	4b7d      	ldr	r3, [pc, #500]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f003 0304 	and.w	r3, r3, #4
 8007c20:	2b04      	cmp	r3, #4
 8007c22:	d10c      	bne.n	8007c3e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d109      	bne.n	8007c3e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c2a:	4b79      	ldr	r3, [pc, #484]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	08db      	lsrs	r3, r3, #3
 8007c30:	f003 0303 	and.w	r3, r3, #3
 8007c34:	4a77      	ldr	r2, [pc, #476]	; (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007c36:	fa22 f303 	lsr.w	r3, r2, r3
 8007c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c3c:	e01e      	b.n	8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007c3e:	4b74      	ldr	r3, [pc, #464]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c4a:	d106      	bne.n	8007c5a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c52:	d102      	bne.n	8007c5a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007c54:	4b70      	ldr	r3, [pc, #448]	; (8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007c56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c58:	e010      	b.n	8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007c5a:	4b6d      	ldr	r3, [pc, #436]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c66:	d106      	bne.n	8007c76 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c6e:	d102      	bne.n	8007c76 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007c70:	4b6a      	ldr	r3, [pc, #424]	; (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007c72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c74:	e002      	b.n	8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007c76:	2300      	movs	r3, #0
 8007c78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007c7a:	e122      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007c7c:	e121      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c82:	e11e      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007c84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c88:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8007c8c:	430b      	orrs	r3, r1
 8007c8e:	d133      	bne.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007c90:	4b5f      	ldr	r3, [pc, #380]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c98:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d004      	beq.n	8007caa <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ca6:	d012      	beq.n	8007cce <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007ca8:	e023      	b.n	8007cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007caa:	4b59      	ldr	r3, [pc, #356]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cb2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007cb6:	d107      	bne.n	8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007cb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f000 fbc7 	bl	8008450 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cc6:	e0fc      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ccc:	e0f9      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007cce:	4b50      	ldr	r3, [pc, #320]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cda:	d107      	bne.n	8007cec <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cdc:	f107 0318 	add.w	r3, r7, #24
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f000 f90d 	bl	8007f00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007ce6:	6a3b      	ldr	r3, [r7, #32]
 8007ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cea:	e0ea      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007cec:	2300      	movs	r3, #0
 8007cee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cf0:	e0e7      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cf6:	e0e4      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007cf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cfc:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8007d00:	430b      	orrs	r3, r1
 8007d02:	f040 808d 	bne.w	8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007d06:	4b42      	ldr	r3, [pc, #264]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d0a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007d0e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d16:	d06b      	beq.n	8007df0 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d1e:	d874      	bhi.n	8007e0a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d26:	d056      	beq.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d2e:	d86c      	bhi.n	8007e0a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007d36:	d03b      	beq.n	8007db0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d3a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007d3e:	d864      	bhi.n	8007e0a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d46:	d021      	beq.n	8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d4e:	d85c      	bhi.n	8007e0a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d004      	beq.n	8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8007d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d5c:	d004      	beq.n	8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8007d5e:	e054      	b.n	8007e0a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007d60:	f000 f8b8 	bl	8007ed4 <HAL_RCCEx_GetD3PCLK1Freq>
 8007d64:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007d66:	e0ac      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d68:	4b29      	ldr	r3, [pc, #164]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d74:	d107      	bne.n	8007d86 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d76:	f107 0318 	add.w	r3, r7, #24
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f000 f8c0 	bl	8007f00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007d80:	69fb      	ldr	r3, [r7, #28]
 8007d82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d84:	e09d      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d86:	2300      	movs	r3, #0
 8007d88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d8a:	e09a      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d8c:	4b20      	ldr	r3, [pc, #128]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d98:	d107      	bne.n	8007daa <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d9a:	f107 030c 	add.w	r3, r7, #12
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f000 fa02 	bl	80081a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007da8:	e08b      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007daa:	2300      	movs	r3, #0
 8007dac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007dae:	e088      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007db0:	4b17      	ldr	r3, [pc, #92]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f003 0304 	and.w	r3, r3, #4
 8007db8:	2b04      	cmp	r3, #4
 8007dba:	d109      	bne.n	8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007dbc:	4b14      	ldr	r3, [pc, #80]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	08db      	lsrs	r3, r3, #3
 8007dc2:	f003 0303 	and.w	r3, r3, #3
 8007dc6:	4a13      	ldr	r2, [pc, #76]	; (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8007dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007dce:	e078      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007dd4:	e075      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007dd6:	4b0e      	ldr	r3, [pc, #56]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007de2:	d102      	bne.n	8007dea <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007de4:	4b0c      	ldr	r3, [pc, #48]	; (8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007de6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007de8:	e06b      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007dea:	2300      	movs	r3, #0
 8007dec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007dee:	e068      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007df0:	4b07      	ldr	r3, [pc, #28]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007df8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007dfc:	d102      	bne.n	8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8007dfe:	4b07      	ldr	r3, [pc, #28]	; (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007e00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e02:	e05e      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e04:	2300      	movs	r3, #0
 8007e06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e08:	e05b      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e0e:	e058      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007e10:	58024400 	.word	0x58024400
 8007e14:	03d09000 	.word	0x03d09000
 8007e18:	003d0900 	.word	0x003d0900
 8007e1c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007e20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e24:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8007e28:	430b      	orrs	r3, r1
 8007e2a:	d148      	bne.n	8007ebe <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007e2c:	4b27      	ldr	r3, [pc, #156]	; (8007ecc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007e34:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e3c:	d02a      	beq.n	8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8007e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e44:	d838      	bhi.n	8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8007e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d004      	beq.n	8007e56 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e52:	d00d      	beq.n	8007e70 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007e54:	e030      	b.n	8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007e56:	4b1d      	ldr	r3, [pc, #116]	; (8007ecc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e62:	d102      	bne.n	8007e6a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007e64:	4b1a      	ldr	r3, [pc, #104]	; (8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007e66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e68:	e02b      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e6e:	e028      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007e70:	4b16      	ldr	r3, [pc, #88]	; (8007ecc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e7c:	d107      	bne.n	8007e8e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e82:	4618      	mov	r0, r3
 8007e84:	f000 fae4 	bl	8008450 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e8c:	e019      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e92:	e016      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e94:	4b0d      	ldr	r3, [pc, #52]	; (8007ecc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ea0:	d107      	bne.n	8007eb2 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ea2:	f107 0318 	add.w	r3, r7, #24
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f000 f82a 	bl	8007f00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007eac:	69fb      	ldr	r3, [r7, #28]
 8007eae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007eb0:	e007      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007eb6:	e004      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ebc:	e001      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8007ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3740      	adds	r7, #64	; 0x40
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}
 8007ecc:	58024400 	.word	0x58024400
 8007ed0:	017d7840 	.word	0x017d7840

08007ed4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007ed8:	f7fe f82c 	bl	8005f34 <HAL_RCC_GetHCLKFreq>
 8007edc:	4602      	mov	r2, r0
 8007ede:	4b06      	ldr	r3, [pc, #24]	; (8007ef8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007ee0:	6a1b      	ldr	r3, [r3, #32]
 8007ee2:	091b      	lsrs	r3, r3, #4
 8007ee4:	f003 0307 	and.w	r3, r3, #7
 8007ee8:	4904      	ldr	r1, [pc, #16]	; (8007efc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007eea:	5ccb      	ldrb	r3, [r1, r3]
 8007eec:	f003 031f 	and.w	r3, r3, #31
 8007ef0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	bd80      	pop	{r7, pc}
 8007ef8:	58024400 	.word	0x58024400
 8007efc:	0800f750 	.word	0x0800f750

08007f00 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b089      	sub	sp, #36	; 0x24
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f08:	4ba1      	ldr	r3, [pc, #644]	; (8008190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f0c:	f003 0303 	and.w	r3, r3, #3
 8007f10:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007f12:	4b9f      	ldr	r3, [pc, #636]	; (8008190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f16:	0b1b      	lsrs	r3, r3, #12
 8007f18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f1c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007f1e:	4b9c      	ldr	r3, [pc, #624]	; (8008190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f22:	091b      	lsrs	r3, r3, #4
 8007f24:	f003 0301 	and.w	r3, r3, #1
 8007f28:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007f2a:	4b99      	ldr	r3, [pc, #612]	; (8008190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f2e:	08db      	lsrs	r3, r3, #3
 8007f30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f34:	693a      	ldr	r2, [r7, #16]
 8007f36:	fb02 f303 	mul.w	r3, r2, r3
 8007f3a:	ee07 3a90 	vmov	s15, r3
 8007f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f42:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	f000 8111 	beq.w	8008170 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	2b02      	cmp	r3, #2
 8007f52:	f000 8083 	beq.w	800805c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	2b02      	cmp	r3, #2
 8007f5a:	f200 80a1 	bhi.w	80080a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d003      	beq.n	8007f6c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007f64:	69bb      	ldr	r3, [r7, #24]
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d056      	beq.n	8008018 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007f6a:	e099      	b.n	80080a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f6c:	4b88      	ldr	r3, [pc, #544]	; (8008190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f003 0320 	and.w	r3, r3, #32
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d02d      	beq.n	8007fd4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f78:	4b85      	ldr	r3, [pc, #532]	; (8008190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	08db      	lsrs	r3, r3, #3
 8007f7e:	f003 0303 	and.w	r3, r3, #3
 8007f82:	4a84      	ldr	r2, [pc, #528]	; (8008194 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007f84:	fa22 f303 	lsr.w	r3, r2, r3
 8007f88:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	ee07 3a90 	vmov	s15, r3
 8007f90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	ee07 3a90 	vmov	s15, r3
 8007f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fa2:	4b7b      	ldr	r3, [pc, #492]	; (8008190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007faa:	ee07 3a90 	vmov	s15, r3
 8007fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fb6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008198 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007fba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007fd2:	e087      	b.n	80080e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	ee07 3a90 	vmov	s15, r3
 8007fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fde:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800819c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fe6:	4b6a      	ldr	r3, [pc, #424]	; (8008190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fee:	ee07 3a90 	vmov	s15, r3
 8007ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ff6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ffa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008198 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007ffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008006:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800800a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800800e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008012:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008016:	e065      	b.n	80080e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	ee07 3a90 	vmov	s15, r3
 800801e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008022:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80081a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800802a:	4b59      	ldr	r3, [pc, #356]	; (8008190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800802c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800802e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008032:	ee07 3a90 	vmov	s15, r3
 8008036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800803a:	ed97 6a03 	vldr	s12, [r7, #12]
 800803e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008198 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800804a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800804e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008056:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800805a:	e043      	b.n	80080e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	ee07 3a90 	vmov	s15, r3
 8008062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008066:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80081a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800806a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800806e:	4b48      	ldr	r3, [pc, #288]	; (8008190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008076:	ee07 3a90 	vmov	s15, r3
 800807a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800807e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008082:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008198 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800808a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800808e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800809a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800809e:	e021      	b.n	80080e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	ee07 3a90 	vmov	s15, r3
 80080a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080aa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80081a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80080ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080b2:	4b37      	ldr	r3, [pc, #220]	; (8008190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080ba:	ee07 3a90 	vmov	s15, r3
 80080be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80080c6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008198 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80080ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80080e2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80080e4:	4b2a      	ldr	r3, [pc, #168]	; (8008190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e8:	0a5b      	lsrs	r3, r3, #9
 80080ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080ee:	ee07 3a90 	vmov	s15, r3
 80080f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80080fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8008102:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008106:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800810a:	ee17 2a90 	vmov	r2, s15
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008112:	4b1f      	ldr	r3, [pc, #124]	; (8008190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008116:	0c1b      	lsrs	r3, r3, #16
 8008118:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800811c:	ee07 3a90 	vmov	s15, r3
 8008120:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008124:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008128:	ee37 7a87 	vadd.f32	s14, s15, s14
 800812c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008130:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008134:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008138:	ee17 2a90 	vmov	r2, s15
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008140:	4b13      	ldr	r3, [pc, #76]	; (8008190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008144:	0e1b      	lsrs	r3, r3, #24
 8008146:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800814a:	ee07 3a90 	vmov	s15, r3
 800814e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008152:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008156:	ee37 7a87 	vadd.f32	s14, s15, s14
 800815a:	edd7 6a07 	vldr	s13, [r7, #28]
 800815e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008162:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008166:	ee17 2a90 	vmov	r2, s15
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800816e:	e008      	b.n	8008182 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2200      	movs	r2, #0
 8008180:	609a      	str	r2, [r3, #8]
}
 8008182:	bf00      	nop
 8008184:	3724      	adds	r7, #36	; 0x24
 8008186:	46bd      	mov	sp, r7
 8008188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818c:	4770      	bx	lr
 800818e:	bf00      	nop
 8008190:	58024400 	.word	0x58024400
 8008194:	03d09000 	.word	0x03d09000
 8008198:	46000000 	.word	0x46000000
 800819c:	4c742400 	.word	0x4c742400
 80081a0:	4a742400 	.word	0x4a742400
 80081a4:	4bbebc20 	.word	0x4bbebc20

080081a8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b089      	sub	sp, #36	; 0x24
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80081b0:	4ba1      	ldr	r3, [pc, #644]	; (8008438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b4:	f003 0303 	and.w	r3, r3, #3
 80081b8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80081ba:	4b9f      	ldr	r3, [pc, #636]	; (8008438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081be:	0d1b      	lsrs	r3, r3, #20
 80081c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081c4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80081c6:	4b9c      	ldr	r3, [pc, #624]	; (8008438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ca:	0a1b      	lsrs	r3, r3, #8
 80081cc:	f003 0301 	and.w	r3, r3, #1
 80081d0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80081d2:	4b99      	ldr	r3, [pc, #612]	; (8008438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081d6:	08db      	lsrs	r3, r3, #3
 80081d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80081dc:	693a      	ldr	r2, [r7, #16]
 80081de:	fb02 f303 	mul.w	r3, r2, r3
 80081e2:	ee07 3a90 	vmov	s15, r3
 80081e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	f000 8111 	beq.w	8008418 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80081f6:	69bb      	ldr	r3, [r7, #24]
 80081f8:	2b02      	cmp	r3, #2
 80081fa:	f000 8083 	beq.w	8008304 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80081fe:	69bb      	ldr	r3, [r7, #24]
 8008200:	2b02      	cmp	r3, #2
 8008202:	f200 80a1 	bhi.w	8008348 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008206:	69bb      	ldr	r3, [r7, #24]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d003      	beq.n	8008214 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800820c:	69bb      	ldr	r3, [r7, #24]
 800820e:	2b01      	cmp	r3, #1
 8008210:	d056      	beq.n	80082c0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008212:	e099      	b.n	8008348 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008214:	4b88      	ldr	r3, [pc, #544]	; (8008438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f003 0320 	and.w	r3, r3, #32
 800821c:	2b00      	cmp	r3, #0
 800821e:	d02d      	beq.n	800827c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008220:	4b85      	ldr	r3, [pc, #532]	; (8008438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	08db      	lsrs	r3, r3, #3
 8008226:	f003 0303 	and.w	r3, r3, #3
 800822a:	4a84      	ldr	r2, [pc, #528]	; (800843c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800822c:	fa22 f303 	lsr.w	r3, r2, r3
 8008230:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	ee07 3a90 	vmov	s15, r3
 8008238:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	ee07 3a90 	vmov	s15, r3
 8008242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008246:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800824a:	4b7b      	ldr	r3, [pc, #492]	; (8008438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800824c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800824e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008252:	ee07 3a90 	vmov	s15, r3
 8008256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800825a:	ed97 6a03 	vldr	s12, [r7, #12]
 800825e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008440 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008262:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800826a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800826e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008276:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800827a:	e087      	b.n	800838c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	ee07 3a90 	vmov	s15, r3
 8008282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008286:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008444 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800828a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800828e:	4b6a      	ldr	r3, [pc, #424]	; (8008438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008292:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008296:	ee07 3a90 	vmov	s15, r3
 800829a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800829e:	ed97 6a03 	vldr	s12, [r7, #12]
 80082a2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008440 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80082a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082be:	e065      	b.n	800838c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	ee07 3a90 	vmov	s15, r3
 80082c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082ca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008448 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80082ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082d2:	4b59      	ldr	r3, [pc, #356]	; (8008438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082da:	ee07 3a90 	vmov	s15, r3
 80082de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80082e6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008440 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80082ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008302:	e043      	b.n	800838c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	ee07 3a90 	vmov	s15, r3
 800830a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800830e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800844c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008316:	4b48      	ldr	r3, [pc, #288]	; (8008438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800831a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800831e:	ee07 3a90 	vmov	s15, r3
 8008322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008326:	ed97 6a03 	vldr	s12, [r7, #12]
 800832a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008440 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800832e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008332:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008336:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800833a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800833e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008342:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008346:	e021      	b.n	800838c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	ee07 3a90 	vmov	s15, r3
 800834e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008352:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008448 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008356:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800835a:	4b37      	ldr	r3, [pc, #220]	; (8008438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800835c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800835e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008362:	ee07 3a90 	vmov	s15, r3
 8008366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800836a:	ed97 6a03 	vldr	s12, [r7, #12]
 800836e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008440 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008372:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008376:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800837a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800837e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008386:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800838a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800838c:	4b2a      	ldr	r3, [pc, #168]	; (8008438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800838e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008390:	0a5b      	lsrs	r3, r3, #9
 8008392:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008396:	ee07 3a90 	vmov	s15, r3
 800839a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800839e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80083aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083b2:	ee17 2a90 	vmov	r2, s15
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80083ba:	4b1f      	ldr	r3, [pc, #124]	; (8008438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083be:	0c1b      	lsrs	r3, r3, #16
 80083c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083c4:	ee07 3a90 	vmov	s15, r3
 80083c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80083d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083e0:	ee17 2a90 	vmov	r2, s15
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80083e8:	4b13      	ldr	r3, [pc, #76]	; (8008438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ec:	0e1b      	lsrs	r3, r3, #24
 80083ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083f2:	ee07 3a90 	vmov	s15, r3
 80083f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008402:	edd7 6a07 	vldr	s13, [r7, #28]
 8008406:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800840a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800840e:	ee17 2a90 	vmov	r2, s15
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008416:	e008      	b.n	800842a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2200      	movs	r2, #0
 800841c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2200      	movs	r2, #0
 8008422:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2200      	movs	r2, #0
 8008428:	609a      	str	r2, [r3, #8]
}
 800842a:	bf00      	nop
 800842c:	3724      	adds	r7, #36	; 0x24
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr
 8008436:	bf00      	nop
 8008438:	58024400 	.word	0x58024400
 800843c:	03d09000 	.word	0x03d09000
 8008440:	46000000 	.word	0x46000000
 8008444:	4c742400 	.word	0x4c742400
 8008448:	4a742400 	.word	0x4a742400
 800844c:	4bbebc20 	.word	0x4bbebc20

08008450 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008450:	b480      	push	{r7}
 8008452:	b089      	sub	sp, #36	; 0x24
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008458:	4ba0      	ldr	r3, [pc, #640]	; (80086dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800845a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800845c:	f003 0303 	and.w	r3, r3, #3
 8008460:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008462:	4b9e      	ldr	r3, [pc, #632]	; (80086dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008466:	091b      	lsrs	r3, r3, #4
 8008468:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800846c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800846e:	4b9b      	ldr	r3, [pc, #620]	; (80086dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008472:	f003 0301 	and.w	r3, r3, #1
 8008476:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008478:	4b98      	ldr	r3, [pc, #608]	; (80086dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800847a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800847c:	08db      	lsrs	r3, r3, #3
 800847e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008482:	693a      	ldr	r2, [r7, #16]
 8008484:	fb02 f303 	mul.w	r3, r2, r3
 8008488:	ee07 3a90 	vmov	s15, r3
 800848c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008490:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	2b00      	cmp	r3, #0
 8008498:	f000 8111 	beq.w	80086be <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800849c:	69bb      	ldr	r3, [r7, #24]
 800849e:	2b02      	cmp	r3, #2
 80084a0:	f000 8083 	beq.w	80085aa <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80084a4:	69bb      	ldr	r3, [r7, #24]
 80084a6:	2b02      	cmp	r3, #2
 80084a8:	f200 80a1 	bhi.w	80085ee <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80084ac:	69bb      	ldr	r3, [r7, #24]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d003      	beq.n	80084ba <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80084b2:	69bb      	ldr	r3, [r7, #24]
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d056      	beq.n	8008566 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80084b8:	e099      	b.n	80085ee <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084ba:	4b88      	ldr	r3, [pc, #544]	; (80086dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f003 0320 	and.w	r3, r3, #32
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d02d      	beq.n	8008522 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084c6:	4b85      	ldr	r3, [pc, #532]	; (80086dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	08db      	lsrs	r3, r3, #3
 80084cc:	f003 0303 	and.w	r3, r3, #3
 80084d0:	4a83      	ldr	r2, [pc, #524]	; (80086e0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80084d2:	fa22 f303 	lsr.w	r3, r2, r3
 80084d6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	ee07 3a90 	vmov	s15, r3
 80084de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	ee07 3a90 	vmov	s15, r3
 80084e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084f0:	4b7a      	ldr	r3, [pc, #488]	; (80086dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084f8:	ee07 3a90 	vmov	s15, r3
 80084fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008500:	ed97 6a03 	vldr	s12, [r7, #12]
 8008504:	eddf 5a77 	vldr	s11, [pc, #476]	; 80086e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008508:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800850c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008510:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008514:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800851c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008520:	e087      	b.n	8008632 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	ee07 3a90 	vmov	s15, r3
 8008528:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800852c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80086e8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008530:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008534:	4b69      	ldr	r3, [pc, #420]	; (80086dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008538:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800853c:	ee07 3a90 	vmov	s15, r3
 8008540:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008544:	ed97 6a03 	vldr	s12, [r7, #12]
 8008548:	eddf 5a66 	vldr	s11, [pc, #408]	; 80086e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800854c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008550:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008554:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008558:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800855c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008560:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008564:	e065      	b.n	8008632 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	ee07 3a90 	vmov	s15, r3
 800856c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008570:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80086ec <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008574:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008578:	4b58      	ldr	r3, [pc, #352]	; (80086dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800857a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800857c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008580:	ee07 3a90 	vmov	s15, r3
 8008584:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008588:	ed97 6a03 	vldr	s12, [r7, #12]
 800858c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80086e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008590:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008594:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008598:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800859c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085a8:	e043      	b.n	8008632 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	ee07 3a90 	vmov	s15, r3
 80085b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085b4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80086f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80085b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085bc:	4b47      	ldr	r3, [pc, #284]	; (80086dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085c4:	ee07 3a90 	vmov	s15, r3
 80085c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80085d0:	eddf 5a44 	vldr	s11, [pc, #272]	; 80086e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80085d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085ec:	e021      	b.n	8008632 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	ee07 3a90 	vmov	s15, r3
 80085f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085f8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80086e8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80085fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008600:	4b36      	ldr	r3, [pc, #216]	; (80086dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008608:	ee07 3a90 	vmov	s15, r3
 800860c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008610:	ed97 6a03 	vldr	s12, [r7, #12]
 8008614:	eddf 5a33 	vldr	s11, [pc, #204]	; 80086e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008618:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800861c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008620:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008624:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008628:	ee67 7a27 	vmul.f32	s15, s14, s15
 800862c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008630:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008632:	4b2a      	ldr	r3, [pc, #168]	; (80086dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008636:	0a5b      	lsrs	r3, r3, #9
 8008638:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800863c:	ee07 3a90 	vmov	s15, r3
 8008640:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008644:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008648:	ee37 7a87 	vadd.f32	s14, s15, s14
 800864c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008650:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008654:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008658:	ee17 2a90 	vmov	r2, s15
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008660:	4b1e      	ldr	r3, [pc, #120]	; (80086dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008664:	0c1b      	lsrs	r3, r3, #16
 8008666:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800866a:	ee07 3a90 	vmov	s15, r3
 800866e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008672:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008676:	ee37 7a87 	vadd.f32	s14, s15, s14
 800867a:	edd7 6a07 	vldr	s13, [r7, #28]
 800867e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008682:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008686:	ee17 2a90 	vmov	r2, s15
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800868e:	4b13      	ldr	r3, [pc, #76]	; (80086dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008692:	0e1b      	lsrs	r3, r3, #24
 8008694:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008698:	ee07 3a90 	vmov	s15, r3
 800869c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80086a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80086ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086b4:	ee17 2a90 	vmov	r2, s15
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80086bc:	e008      	b.n	80086d0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2200      	movs	r2, #0
 80086c2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2200      	movs	r2, #0
 80086ce:	609a      	str	r2, [r3, #8]
}
 80086d0:	bf00      	nop
 80086d2:	3724      	adds	r7, #36	; 0x24
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr
 80086dc:	58024400 	.word	0x58024400
 80086e0:	03d09000 	.word	0x03d09000
 80086e4:	46000000 	.word	0x46000000
 80086e8:	4c742400 	.word	0x4c742400
 80086ec:	4a742400 	.word	0x4a742400
 80086f0:	4bbebc20 	.word	0x4bbebc20

080086f4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b084      	sub	sp, #16
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80086fe:	2300      	movs	r3, #0
 8008700:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008702:	4b53      	ldr	r3, [pc, #332]	; (8008850 <RCCEx_PLL2_Config+0x15c>)
 8008704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008706:	f003 0303 	and.w	r3, r3, #3
 800870a:	2b03      	cmp	r3, #3
 800870c:	d101      	bne.n	8008712 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800870e:	2301      	movs	r3, #1
 8008710:	e099      	b.n	8008846 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008712:	4b4f      	ldr	r3, [pc, #316]	; (8008850 <RCCEx_PLL2_Config+0x15c>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a4e      	ldr	r2, [pc, #312]	; (8008850 <RCCEx_PLL2_Config+0x15c>)
 8008718:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800871c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800871e:	f7f9 fddb 	bl	80022d8 <HAL_GetTick>
 8008722:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008724:	e008      	b.n	8008738 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008726:	f7f9 fdd7 	bl	80022d8 <HAL_GetTick>
 800872a:	4602      	mov	r2, r0
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	1ad3      	subs	r3, r2, r3
 8008730:	2b02      	cmp	r3, #2
 8008732:	d901      	bls.n	8008738 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008734:	2303      	movs	r3, #3
 8008736:	e086      	b.n	8008846 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008738:	4b45      	ldr	r3, [pc, #276]	; (8008850 <RCCEx_PLL2_Config+0x15c>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008740:	2b00      	cmp	r3, #0
 8008742:	d1f0      	bne.n	8008726 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008744:	4b42      	ldr	r3, [pc, #264]	; (8008850 <RCCEx_PLL2_Config+0x15c>)
 8008746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008748:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	031b      	lsls	r3, r3, #12
 8008752:	493f      	ldr	r1, [pc, #252]	; (8008850 <RCCEx_PLL2_Config+0x15c>)
 8008754:	4313      	orrs	r3, r2
 8008756:	628b      	str	r3, [r1, #40]	; 0x28
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	3b01      	subs	r3, #1
 800875e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	3b01      	subs	r3, #1
 8008768:	025b      	lsls	r3, r3, #9
 800876a:	b29b      	uxth	r3, r3
 800876c:	431a      	orrs	r2, r3
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	68db      	ldr	r3, [r3, #12]
 8008772:	3b01      	subs	r3, #1
 8008774:	041b      	lsls	r3, r3, #16
 8008776:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800877a:	431a      	orrs	r2, r3
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	691b      	ldr	r3, [r3, #16]
 8008780:	3b01      	subs	r3, #1
 8008782:	061b      	lsls	r3, r3, #24
 8008784:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008788:	4931      	ldr	r1, [pc, #196]	; (8008850 <RCCEx_PLL2_Config+0x15c>)
 800878a:	4313      	orrs	r3, r2
 800878c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800878e:	4b30      	ldr	r3, [pc, #192]	; (8008850 <RCCEx_PLL2_Config+0x15c>)
 8008790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008792:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	695b      	ldr	r3, [r3, #20]
 800879a:	492d      	ldr	r1, [pc, #180]	; (8008850 <RCCEx_PLL2_Config+0x15c>)
 800879c:	4313      	orrs	r3, r2
 800879e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80087a0:	4b2b      	ldr	r3, [pc, #172]	; (8008850 <RCCEx_PLL2_Config+0x15c>)
 80087a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a4:	f023 0220 	bic.w	r2, r3, #32
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	699b      	ldr	r3, [r3, #24]
 80087ac:	4928      	ldr	r1, [pc, #160]	; (8008850 <RCCEx_PLL2_Config+0x15c>)
 80087ae:	4313      	orrs	r3, r2
 80087b0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80087b2:	4b27      	ldr	r3, [pc, #156]	; (8008850 <RCCEx_PLL2_Config+0x15c>)
 80087b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b6:	4a26      	ldr	r2, [pc, #152]	; (8008850 <RCCEx_PLL2_Config+0x15c>)
 80087b8:	f023 0310 	bic.w	r3, r3, #16
 80087bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80087be:	4b24      	ldr	r3, [pc, #144]	; (8008850 <RCCEx_PLL2_Config+0x15c>)
 80087c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087c2:	4b24      	ldr	r3, [pc, #144]	; (8008854 <RCCEx_PLL2_Config+0x160>)
 80087c4:	4013      	ands	r3, r2
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	69d2      	ldr	r2, [r2, #28]
 80087ca:	00d2      	lsls	r2, r2, #3
 80087cc:	4920      	ldr	r1, [pc, #128]	; (8008850 <RCCEx_PLL2_Config+0x15c>)
 80087ce:	4313      	orrs	r3, r2
 80087d0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80087d2:	4b1f      	ldr	r3, [pc, #124]	; (8008850 <RCCEx_PLL2_Config+0x15c>)
 80087d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d6:	4a1e      	ldr	r2, [pc, #120]	; (8008850 <RCCEx_PLL2_Config+0x15c>)
 80087d8:	f043 0310 	orr.w	r3, r3, #16
 80087dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d106      	bne.n	80087f2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80087e4:	4b1a      	ldr	r3, [pc, #104]	; (8008850 <RCCEx_PLL2_Config+0x15c>)
 80087e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e8:	4a19      	ldr	r2, [pc, #100]	; (8008850 <RCCEx_PLL2_Config+0x15c>)
 80087ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80087ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80087f0:	e00f      	b.n	8008812 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d106      	bne.n	8008806 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80087f8:	4b15      	ldr	r3, [pc, #84]	; (8008850 <RCCEx_PLL2_Config+0x15c>)
 80087fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087fc:	4a14      	ldr	r2, [pc, #80]	; (8008850 <RCCEx_PLL2_Config+0x15c>)
 80087fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008802:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008804:	e005      	b.n	8008812 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008806:	4b12      	ldr	r3, [pc, #72]	; (8008850 <RCCEx_PLL2_Config+0x15c>)
 8008808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800880a:	4a11      	ldr	r2, [pc, #68]	; (8008850 <RCCEx_PLL2_Config+0x15c>)
 800880c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008810:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008812:	4b0f      	ldr	r3, [pc, #60]	; (8008850 <RCCEx_PLL2_Config+0x15c>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a0e      	ldr	r2, [pc, #56]	; (8008850 <RCCEx_PLL2_Config+0x15c>)
 8008818:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800881c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800881e:	f7f9 fd5b 	bl	80022d8 <HAL_GetTick>
 8008822:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008824:	e008      	b.n	8008838 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008826:	f7f9 fd57 	bl	80022d8 <HAL_GetTick>
 800882a:	4602      	mov	r2, r0
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	1ad3      	subs	r3, r2, r3
 8008830:	2b02      	cmp	r3, #2
 8008832:	d901      	bls.n	8008838 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008834:	2303      	movs	r3, #3
 8008836:	e006      	b.n	8008846 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008838:	4b05      	ldr	r3, [pc, #20]	; (8008850 <RCCEx_PLL2_Config+0x15c>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008840:	2b00      	cmp	r3, #0
 8008842:	d0f0      	beq.n	8008826 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008844:	7bfb      	ldrb	r3, [r7, #15]
}
 8008846:	4618      	mov	r0, r3
 8008848:	3710      	adds	r7, #16
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop
 8008850:	58024400 	.word	0x58024400
 8008854:	ffff0007 	.word	0xffff0007

08008858 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008862:	2300      	movs	r3, #0
 8008864:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008866:	4b53      	ldr	r3, [pc, #332]	; (80089b4 <RCCEx_PLL3_Config+0x15c>)
 8008868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800886a:	f003 0303 	and.w	r3, r3, #3
 800886e:	2b03      	cmp	r3, #3
 8008870:	d101      	bne.n	8008876 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008872:	2301      	movs	r3, #1
 8008874:	e099      	b.n	80089aa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008876:	4b4f      	ldr	r3, [pc, #316]	; (80089b4 <RCCEx_PLL3_Config+0x15c>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a4e      	ldr	r2, [pc, #312]	; (80089b4 <RCCEx_PLL3_Config+0x15c>)
 800887c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008880:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008882:	f7f9 fd29 	bl	80022d8 <HAL_GetTick>
 8008886:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008888:	e008      	b.n	800889c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800888a:	f7f9 fd25 	bl	80022d8 <HAL_GetTick>
 800888e:	4602      	mov	r2, r0
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	1ad3      	subs	r3, r2, r3
 8008894:	2b02      	cmp	r3, #2
 8008896:	d901      	bls.n	800889c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008898:	2303      	movs	r3, #3
 800889a:	e086      	b.n	80089aa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800889c:	4b45      	ldr	r3, [pc, #276]	; (80089b4 <RCCEx_PLL3_Config+0x15c>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d1f0      	bne.n	800888a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80088a8:	4b42      	ldr	r3, [pc, #264]	; (80089b4 <RCCEx_PLL3_Config+0x15c>)
 80088aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ac:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	051b      	lsls	r3, r3, #20
 80088b6:	493f      	ldr	r1, [pc, #252]	; (80089b4 <RCCEx_PLL3_Config+0x15c>)
 80088b8:	4313      	orrs	r3, r2
 80088ba:	628b      	str	r3, [r1, #40]	; 0x28
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	3b01      	subs	r3, #1
 80088c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	689b      	ldr	r3, [r3, #8]
 80088ca:	3b01      	subs	r3, #1
 80088cc:	025b      	lsls	r3, r3, #9
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	431a      	orrs	r2, r3
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	68db      	ldr	r3, [r3, #12]
 80088d6:	3b01      	subs	r3, #1
 80088d8:	041b      	lsls	r3, r3, #16
 80088da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80088de:	431a      	orrs	r2, r3
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	691b      	ldr	r3, [r3, #16]
 80088e4:	3b01      	subs	r3, #1
 80088e6:	061b      	lsls	r3, r3, #24
 80088e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80088ec:	4931      	ldr	r1, [pc, #196]	; (80089b4 <RCCEx_PLL3_Config+0x15c>)
 80088ee:	4313      	orrs	r3, r2
 80088f0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80088f2:	4b30      	ldr	r3, [pc, #192]	; (80089b4 <RCCEx_PLL3_Config+0x15c>)
 80088f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	695b      	ldr	r3, [r3, #20]
 80088fe:	492d      	ldr	r1, [pc, #180]	; (80089b4 <RCCEx_PLL3_Config+0x15c>)
 8008900:	4313      	orrs	r3, r2
 8008902:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008904:	4b2b      	ldr	r3, [pc, #172]	; (80089b4 <RCCEx_PLL3_Config+0x15c>)
 8008906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008908:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	699b      	ldr	r3, [r3, #24]
 8008910:	4928      	ldr	r1, [pc, #160]	; (80089b4 <RCCEx_PLL3_Config+0x15c>)
 8008912:	4313      	orrs	r3, r2
 8008914:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008916:	4b27      	ldr	r3, [pc, #156]	; (80089b4 <RCCEx_PLL3_Config+0x15c>)
 8008918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800891a:	4a26      	ldr	r2, [pc, #152]	; (80089b4 <RCCEx_PLL3_Config+0x15c>)
 800891c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008920:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008922:	4b24      	ldr	r3, [pc, #144]	; (80089b4 <RCCEx_PLL3_Config+0x15c>)
 8008924:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008926:	4b24      	ldr	r3, [pc, #144]	; (80089b8 <RCCEx_PLL3_Config+0x160>)
 8008928:	4013      	ands	r3, r2
 800892a:	687a      	ldr	r2, [r7, #4]
 800892c:	69d2      	ldr	r2, [r2, #28]
 800892e:	00d2      	lsls	r2, r2, #3
 8008930:	4920      	ldr	r1, [pc, #128]	; (80089b4 <RCCEx_PLL3_Config+0x15c>)
 8008932:	4313      	orrs	r3, r2
 8008934:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008936:	4b1f      	ldr	r3, [pc, #124]	; (80089b4 <RCCEx_PLL3_Config+0x15c>)
 8008938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800893a:	4a1e      	ldr	r2, [pc, #120]	; (80089b4 <RCCEx_PLL3_Config+0x15c>)
 800893c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008940:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d106      	bne.n	8008956 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008948:	4b1a      	ldr	r3, [pc, #104]	; (80089b4 <RCCEx_PLL3_Config+0x15c>)
 800894a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800894c:	4a19      	ldr	r2, [pc, #100]	; (80089b4 <RCCEx_PLL3_Config+0x15c>)
 800894e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008952:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008954:	e00f      	b.n	8008976 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	2b01      	cmp	r3, #1
 800895a:	d106      	bne.n	800896a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800895c:	4b15      	ldr	r3, [pc, #84]	; (80089b4 <RCCEx_PLL3_Config+0x15c>)
 800895e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008960:	4a14      	ldr	r2, [pc, #80]	; (80089b4 <RCCEx_PLL3_Config+0x15c>)
 8008962:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008966:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008968:	e005      	b.n	8008976 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800896a:	4b12      	ldr	r3, [pc, #72]	; (80089b4 <RCCEx_PLL3_Config+0x15c>)
 800896c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800896e:	4a11      	ldr	r2, [pc, #68]	; (80089b4 <RCCEx_PLL3_Config+0x15c>)
 8008970:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008974:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008976:	4b0f      	ldr	r3, [pc, #60]	; (80089b4 <RCCEx_PLL3_Config+0x15c>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a0e      	ldr	r2, [pc, #56]	; (80089b4 <RCCEx_PLL3_Config+0x15c>)
 800897c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008980:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008982:	f7f9 fca9 	bl	80022d8 <HAL_GetTick>
 8008986:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008988:	e008      	b.n	800899c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800898a:	f7f9 fca5 	bl	80022d8 <HAL_GetTick>
 800898e:	4602      	mov	r2, r0
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	1ad3      	subs	r3, r2, r3
 8008994:	2b02      	cmp	r3, #2
 8008996:	d901      	bls.n	800899c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008998:	2303      	movs	r3, #3
 800899a:	e006      	b.n	80089aa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800899c:	4b05      	ldr	r3, [pc, #20]	; (80089b4 <RCCEx_PLL3_Config+0x15c>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d0f0      	beq.n	800898a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80089a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3710      	adds	r7, #16
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}
 80089b2:	bf00      	nop
 80089b4:	58024400 	.word	0x58024400
 80089b8:	ffff0007 	.word	0xffff0007

080089bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80089bc:	b084      	sub	sp, #16
 80089be:	b580      	push	{r7, lr}
 80089c0:	b084      	sub	sp, #16
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]
 80089c6:	f107 001c 	add.w	r0, r7, #28
 80089ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80089ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	d120      	bne.n	8008a16 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	68da      	ldr	r2, [r3, #12]
 80089e4:	4b2a      	ldr	r3, [pc, #168]	; (8008a90 <USB_CoreInit+0xd4>)
 80089e6:	4013      	ands	r3, r2
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	68db      	ldr	r3, [r3, #12]
 80089f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80089f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d105      	bne.n	8008a0a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	68db      	ldr	r3, [r3, #12]
 8008a02:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f001 faf8 	bl	800a000 <USB_CoreReset>
 8008a10:	4603      	mov	r3, r0
 8008a12:	73fb      	strb	r3, [r7, #15]
 8008a14:	e01a      	b.n	8008a4c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	68db      	ldr	r3, [r3, #12]
 8008a1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f001 faec 	bl	800a000 <USB_CoreReset>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008a2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d106      	bne.n	8008a40 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a36:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	639a      	str	r2, [r3, #56]	; 0x38
 8008a3e:	e005      	b.n	8008a4c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	d116      	bne.n	8008a80 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a56:	b29a      	uxth	r2, r3
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008a60:	4b0c      	ldr	r3, [pc, #48]	; (8008a94 <USB_CoreInit+0xd8>)
 8008a62:	4313      	orrs	r3, r2
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	f043 0206 	orr.w	r2, r3, #6
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	f043 0220 	orr.w	r2, r3, #32
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3710      	adds	r7, #16
 8008a86:	46bd      	mov	sp, r7
 8008a88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a8c:	b004      	add	sp, #16
 8008a8e:	4770      	bx	lr
 8008a90:	ffbdffbf 	.word	0xffbdffbf
 8008a94:	03ee0000 	.word	0x03ee0000

08008a98 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b087      	sub	sp, #28
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	60b9      	str	r1, [r7, #8]
 8008aa2:	4613      	mov	r3, r2
 8008aa4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008aa6:	79fb      	ldrb	r3, [r7, #7]
 8008aa8:	2b02      	cmp	r3, #2
 8008aaa:	d165      	bne.n	8008b78 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	4a41      	ldr	r2, [pc, #260]	; (8008bb4 <USB_SetTurnaroundTime+0x11c>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d906      	bls.n	8008ac2 <USB_SetTurnaroundTime+0x2a>
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	4a40      	ldr	r2, [pc, #256]	; (8008bb8 <USB_SetTurnaroundTime+0x120>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d202      	bcs.n	8008ac2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008abc:	230f      	movs	r3, #15
 8008abe:	617b      	str	r3, [r7, #20]
 8008ac0:	e062      	b.n	8008b88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	4a3c      	ldr	r2, [pc, #240]	; (8008bb8 <USB_SetTurnaroundTime+0x120>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d306      	bcc.n	8008ad8 <USB_SetTurnaroundTime+0x40>
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	4a3b      	ldr	r2, [pc, #236]	; (8008bbc <USB_SetTurnaroundTime+0x124>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d202      	bcs.n	8008ad8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008ad2:	230e      	movs	r3, #14
 8008ad4:	617b      	str	r3, [r7, #20]
 8008ad6:	e057      	b.n	8008b88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	4a38      	ldr	r2, [pc, #224]	; (8008bbc <USB_SetTurnaroundTime+0x124>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d306      	bcc.n	8008aee <USB_SetTurnaroundTime+0x56>
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	4a37      	ldr	r2, [pc, #220]	; (8008bc0 <USB_SetTurnaroundTime+0x128>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d202      	bcs.n	8008aee <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008ae8:	230d      	movs	r3, #13
 8008aea:	617b      	str	r3, [r7, #20]
 8008aec:	e04c      	b.n	8008b88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	4a33      	ldr	r2, [pc, #204]	; (8008bc0 <USB_SetTurnaroundTime+0x128>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d306      	bcc.n	8008b04 <USB_SetTurnaroundTime+0x6c>
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	4a32      	ldr	r2, [pc, #200]	; (8008bc4 <USB_SetTurnaroundTime+0x12c>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d802      	bhi.n	8008b04 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008afe:	230c      	movs	r3, #12
 8008b00:	617b      	str	r3, [r7, #20]
 8008b02:	e041      	b.n	8008b88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	4a2f      	ldr	r2, [pc, #188]	; (8008bc4 <USB_SetTurnaroundTime+0x12c>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d906      	bls.n	8008b1a <USB_SetTurnaroundTime+0x82>
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	4a2e      	ldr	r2, [pc, #184]	; (8008bc8 <USB_SetTurnaroundTime+0x130>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d802      	bhi.n	8008b1a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008b14:	230b      	movs	r3, #11
 8008b16:	617b      	str	r3, [r7, #20]
 8008b18:	e036      	b.n	8008b88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	4a2a      	ldr	r2, [pc, #168]	; (8008bc8 <USB_SetTurnaroundTime+0x130>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d906      	bls.n	8008b30 <USB_SetTurnaroundTime+0x98>
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	4a29      	ldr	r2, [pc, #164]	; (8008bcc <USB_SetTurnaroundTime+0x134>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d802      	bhi.n	8008b30 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008b2a:	230a      	movs	r3, #10
 8008b2c:	617b      	str	r3, [r7, #20]
 8008b2e:	e02b      	b.n	8008b88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	4a26      	ldr	r2, [pc, #152]	; (8008bcc <USB_SetTurnaroundTime+0x134>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d906      	bls.n	8008b46 <USB_SetTurnaroundTime+0xae>
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	4a25      	ldr	r2, [pc, #148]	; (8008bd0 <USB_SetTurnaroundTime+0x138>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d202      	bcs.n	8008b46 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008b40:	2309      	movs	r3, #9
 8008b42:	617b      	str	r3, [r7, #20]
 8008b44:	e020      	b.n	8008b88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	4a21      	ldr	r2, [pc, #132]	; (8008bd0 <USB_SetTurnaroundTime+0x138>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d306      	bcc.n	8008b5c <USB_SetTurnaroundTime+0xc4>
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	4a20      	ldr	r2, [pc, #128]	; (8008bd4 <USB_SetTurnaroundTime+0x13c>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d802      	bhi.n	8008b5c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008b56:	2308      	movs	r3, #8
 8008b58:	617b      	str	r3, [r7, #20]
 8008b5a:	e015      	b.n	8008b88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	4a1d      	ldr	r2, [pc, #116]	; (8008bd4 <USB_SetTurnaroundTime+0x13c>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d906      	bls.n	8008b72 <USB_SetTurnaroundTime+0xda>
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	4a1c      	ldr	r2, [pc, #112]	; (8008bd8 <USB_SetTurnaroundTime+0x140>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d202      	bcs.n	8008b72 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008b6c:	2307      	movs	r3, #7
 8008b6e:	617b      	str	r3, [r7, #20]
 8008b70:	e00a      	b.n	8008b88 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008b72:	2306      	movs	r3, #6
 8008b74:	617b      	str	r3, [r7, #20]
 8008b76:	e007      	b.n	8008b88 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008b78:	79fb      	ldrb	r3, [r7, #7]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d102      	bne.n	8008b84 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008b7e:	2309      	movs	r3, #9
 8008b80:	617b      	str	r3, [r7, #20]
 8008b82:	e001      	b.n	8008b88 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008b84:	2309      	movs	r3, #9
 8008b86:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	68db      	ldr	r3, [r3, #12]
 8008b8c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	68da      	ldr	r2, [r3, #12]
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	029b      	lsls	r3, r3, #10
 8008b9c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008ba0:	431a      	orrs	r2, r3
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008ba6:	2300      	movs	r3, #0
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	371c      	adds	r7, #28
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr
 8008bb4:	00d8acbf 	.word	0x00d8acbf
 8008bb8:	00e4e1c0 	.word	0x00e4e1c0
 8008bbc:	00f42400 	.word	0x00f42400
 8008bc0:	01067380 	.word	0x01067380
 8008bc4:	011a499f 	.word	0x011a499f
 8008bc8:	01312cff 	.word	0x01312cff
 8008bcc:	014ca43f 	.word	0x014ca43f
 8008bd0:	016e3600 	.word	0x016e3600
 8008bd4:	01a6ab1f 	.word	0x01a6ab1f
 8008bd8:	01e84800 	.word	0x01e84800

08008bdc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b083      	sub	sp, #12
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	f043 0201 	orr.w	r2, r3, #1
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008bf0:	2300      	movs	r3, #0
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	370c      	adds	r7, #12
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfc:	4770      	bx	lr

08008bfe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008bfe:	b480      	push	{r7}
 8008c00:	b083      	sub	sp, #12
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	689b      	ldr	r3, [r3, #8]
 8008c0a:	f023 0201 	bic.w	r2, r3, #1
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c12:	2300      	movs	r3, #0
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	370c      	adds	r7, #12
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b084      	sub	sp, #16
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	460b      	mov	r3, r1
 8008c2a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	68db      	ldr	r3, [r3, #12]
 8008c34:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008c3c:	78fb      	ldrb	r3, [r7, #3]
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d115      	bne.n	8008c6e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	68db      	ldr	r3, [r3, #12]
 8008c46:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008c4e:	2001      	movs	r0, #1
 8008c50:	f7f9 fb4e 	bl	80022f0 <HAL_Delay>
      ms++;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	3301      	adds	r3, #1
 8008c58:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f001 f93f 	bl	8009ede <USB_GetMode>
 8008c60:	4603      	mov	r3, r0
 8008c62:	2b01      	cmp	r3, #1
 8008c64:	d01e      	beq.n	8008ca4 <USB_SetCurrentMode+0x84>
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2b31      	cmp	r3, #49	; 0x31
 8008c6a:	d9f0      	bls.n	8008c4e <USB_SetCurrentMode+0x2e>
 8008c6c:	e01a      	b.n	8008ca4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008c6e:	78fb      	ldrb	r3, [r7, #3]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d115      	bne.n	8008ca0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	68db      	ldr	r3, [r3, #12]
 8008c78:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008c80:	2001      	movs	r0, #1
 8008c82:	f7f9 fb35 	bl	80022f0 <HAL_Delay>
      ms++;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	3301      	adds	r3, #1
 8008c8a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f001 f926 	bl	8009ede <USB_GetMode>
 8008c92:	4603      	mov	r3, r0
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d005      	beq.n	8008ca4 <USB_SetCurrentMode+0x84>
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2b31      	cmp	r3, #49	; 0x31
 8008c9c:	d9f0      	bls.n	8008c80 <USB_SetCurrentMode+0x60>
 8008c9e:	e001      	b.n	8008ca4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	e005      	b.n	8008cb0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2b32      	cmp	r3, #50	; 0x32
 8008ca8:	d101      	bne.n	8008cae <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008caa:	2301      	movs	r3, #1
 8008cac:	e000      	b.n	8008cb0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008cae:	2300      	movs	r3, #0
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3710      	adds	r7, #16
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}

08008cb8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008cb8:	b084      	sub	sp, #16
 8008cba:	b580      	push	{r7, lr}
 8008cbc:	b086      	sub	sp, #24
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]
 8008cc2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008cc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	613b      	str	r3, [r7, #16]
 8008cd6:	e009      	b.n	8008cec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008cd8:	687a      	ldr	r2, [r7, #4]
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	3340      	adds	r3, #64	; 0x40
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	4413      	add	r3, r2
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	3301      	adds	r3, #1
 8008cea:	613b      	str	r3, [r7, #16]
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	2b0e      	cmp	r3, #14
 8008cf0:	d9f2      	bls.n	8008cd8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008cf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d11c      	bne.n	8008d32 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	68fa      	ldr	r2, [r7, #12]
 8008d02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d06:	f043 0302 	orr.w	r3, r3, #2
 8008d0a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d10:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	601a      	str	r2, [r3, #0]
 8008d30:	e005      	b.n	8008d3e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d36:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d44:	461a      	mov	r2, r3
 8008d46:	2300      	movs	r3, #0
 8008d48:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d50:	4619      	mov	r1, r3
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d58:	461a      	mov	r2, r3
 8008d5a:	680b      	ldr	r3, [r1, #0]
 8008d5c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d10c      	bne.n	8008d7e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d104      	bne.n	8008d74 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008d6a:	2100      	movs	r1, #0
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f000 f965 	bl	800903c <USB_SetDevSpeed>
 8008d72:	e008      	b.n	8008d86 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008d74:	2101      	movs	r1, #1
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 f960 	bl	800903c <USB_SetDevSpeed>
 8008d7c:	e003      	b.n	8008d86 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008d7e:	2103      	movs	r1, #3
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f000 f95b 	bl	800903c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008d86:	2110      	movs	r1, #16
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f000 f8f3 	bl	8008f74 <USB_FlushTxFifo>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d001      	beq.n	8008d98 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008d94:	2301      	movs	r3, #1
 8008d96:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 f91f 	bl	8008fdc <USB_FlushRxFifo>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d001      	beq.n	8008da8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008da4:	2301      	movs	r3, #1
 8008da6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dae:	461a      	mov	r2, r3
 8008db0:	2300      	movs	r3, #0
 8008db2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dba:	461a      	mov	r2, r3
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	2300      	movs	r3, #0
 8008dca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008dcc:	2300      	movs	r3, #0
 8008dce:	613b      	str	r3, [r7, #16]
 8008dd0:	e043      	b.n	8008e5a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	015a      	lsls	r2, r3, #5
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	4413      	add	r3, r2
 8008dda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008de4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008de8:	d118      	bne.n	8008e1c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d10a      	bne.n	8008e06 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	015a      	lsls	r2, r3, #5
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	4413      	add	r3, r2
 8008df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008e02:	6013      	str	r3, [r2, #0]
 8008e04:	e013      	b.n	8008e2e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	015a      	lsls	r2, r3, #5
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	4413      	add	r3, r2
 8008e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e12:	461a      	mov	r2, r3
 8008e14:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008e18:	6013      	str	r3, [r2, #0]
 8008e1a:	e008      	b.n	8008e2e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	015a      	lsls	r2, r3, #5
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	4413      	add	r3, r2
 8008e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e28:	461a      	mov	r2, r3
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	015a      	lsls	r2, r3, #5
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	4413      	add	r3, r2
 8008e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	015a      	lsls	r2, r3, #5
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	4413      	add	r3, r2
 8008e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008e52:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	3301      	adds	r3, #1
 8008e58:	613b      	str	r3, [r7, #16]
 8008e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5c:	693a      	ldr	r2, [r7, #16]
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d3b7      	bcc.n	8008dd2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e62:	2300      	movs	r3, #0
 8008e64:	613b      	str	r3, [r7, #16]
 8008e66:	e043      	b.n	8008ef0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	015a      	lsls	r2, r3, #5
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	4413      	add	r3, r2
 8008e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e7e:	d118      	bne.n	8008eb2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d10a      	bne.n	8008e9c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	015a      	lsls	r2, r3, #5
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	4413      	add	r3, r2
 8008e8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e92:	461a      	mov	r2, r3
 8008e94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008e98:	6013      	str	r3, [r2, #0]
 8008e9a:	e013      	b.n	8008ec4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	015a      	lsls	r2, r3, #5
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	4413      	add	r3, r2
 8008ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ea8:	461a      	mov	r2, r3
 8008eaa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008eae:	6013      	str	r3, [r2, #0]
 8008eb0:	e008      	b.n	8008ec4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	015a      	lsls	r2, r3, #5
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	4413      	add	r3, r2
 8008eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	015a      	lsls	r2, r3, #5
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	4413      	add	r3, r2
 8008ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	015a      	lsls	r2, r3, #5
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	4413      	add	r3, r2
 8008ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008ee8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	3301      	adds	r3, #1
 8008eee:	613b      	str	r3, [r7, #16]
 8008ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef2:	693a      	ldr	r2, [r7, #16]
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d3b7      	bcc.n	8008e68 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008efe:	691b      	ldr	r3, [r3, #16]
 8008f00:	68fa      	ldr	r2, [r7, #12]
 8008f02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f0a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008f18:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d105      	bne.n	8008f2c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	699b      	ldr	r3, [r3, #24]
 8008f24:	f043 0210 	orr.w	r2, r3, #16
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	699a      	ldr	r2, [r3, #24]
 8008f30:	4b0e      	ldr	r3, [pc, #56]	; (8008f6c <USB_DevInit+0x2b4>)
 8008f32:	4313      	orrs	r3, r2
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d005      	beq.n	8008f4a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	699b      	ldr	r3, [r3, #24]
 8008f42:	f043 0208 	orr.w	r2, r3, #8
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d105      	bne.n	8008f5c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	699a      	ldr	r2, [r3, #24]
 8008f54:	4b06      	ldr	r3, [pc, #24]	; (8008f70 <USB_DevInit+0x2b8>)
 8008f56:	4313      	orrs	r3, r2
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008f5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3718      	adds	r7, #24
 8008f62:	46bd      	mov	sp, r7
 8008f64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f68:	b004      	add	sp, #16
 8008f6a:	4770      	bx	lr
 8008f6c:	803c3800 	.word	0x803c3800
 8008f70:	40000004 	.word	0x40000004

08008f74 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008f74:	b480      	push	{r7}
 8008f76:	b085      	sub	sp, #20
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	3301      	adds	r3, #1
 8008f86:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	4a13      	ldr	r2, [pc, #76]	; (8008fd8 <USB_FlushTxFifo+0x64>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d901      	bls.n	8008f94 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008f90:	2303      	movs	r3, #3
 8008f92:	e01b      	b.n	8008fcc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	691b      	ldr	r3, [r3, #16]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	daf2      	bge.n	8008f82 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	019b      	lsls	r3, r3, #6
 8008fa4:	f043 0220 	orr.w	r2, r3, #32
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	3301      	adds	r3, #1
 8008fb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	4a08      	ldr	r2, [pc, #32]	; (8008fd8 <USB_FlushTxFifo+0x64>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d901      	bls.n	8008fbe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008fba:	2303      	movs	r3, #3
 8008fbc:	e006      	b.n	8008fcc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	691b      	ldr	r3, [r3, #16]
 8008fc2:	f003 0320 	and.w	r3, r3, #32
 8008fc6:	2b20      	cmp	r3, #32
 8008fc8:	d0f0      	beq.n	8008fac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008fca:	2300      	movs	r3, #0
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3714      	adds	r7, #20
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr
 8008fd8:	00030d40 	.word	0x00030d40

08008fdc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b085      	sub	sp, #20
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	3301      	adds	r3, #1
 8008fec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	4a11      	ldr	r2, [pc, #68]	; (8009038 <USB_FlushRxFifo+0x5c>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d901      	bls.n	8008ffa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008ff6:	2303      	movs	r3, #3
 8008ff8:	e018      	b.n	800902c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	691b      	ldr	r3, [r3, #16]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	daf2      	bge.n	8008fe8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009002:	2300      	movs	r3, #0
 8009004:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2210      	movs	r2, #16
 800900a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	3301      	adds	r3, #1
 8009010:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	4a08      	ldr	r2, [pc, #32]	; (8009038 <USB_FlushRxFifo+0x5c>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d901      	bls.n	800901e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800901a:	2303      	movs	r3, #3
 800901c:	e006      	b.n	800902c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	691b      	ldr	r3, [r3, #16]
 8009022:	f003 0310 	and.w	r3, r3, #16
 8009026:	2b10      	cmp	r3, #16
 8009028:	d0f0      	beq.n	800900c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800902a:	2300      	movs	r3, #0
}
 800902c:	4618      	mov	r0, r3
 800902e:	3714      	adds	r7, #20
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr
 8009038:	00030d40 	.word	0x00030d40

0800903c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800903c:	b480      	push	{r7}
 800903e:	b085      	sub	sp, #20
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	460b      	mov	r3, r1
 8009046:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009052:	681a      	ldr	r2, [r3, #0]
 8009054:	78fb      	ldrb	r3, [r7, #3]
 8009056:	68f9      	ldr	r1, [r7, #12]
 8009058:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800905c:	4313      	orrs	r3, r2
 800905e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009060:	2300      	movs	r3, #0
}
 8009062:	4618      	mov	r0, r3
 8009064:	3714      	adds	r7, #20
 8009066:	46bd      	mov	sp, r7
 8009068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906c:	4770      	bx	lr

0800906e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800906e:	b480      	push	{r7}
 8009070:	b087      	sub	sp, #28
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009080:	689b      	ldr	r3, [r3, #8]
 8009082:	f003 0306 	and.w	r3, r3, #6
 8009086:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d102      	bne.n	8009094 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800908e:	2300      	movs	r3, #0
 8009090:	75fb      	strb	r3, [r7, #23]
 8009092:	e00a      	b.n	80090aa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2b02      	cmp	r3, #2
 8009098:	d002      	beq.n	80090a0 <USB_GetDevSpeed+0x32>
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2b06      	cmp	r3, #6
 800909e:	d102      	bne.n	80090a6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80090a0:	2302      	movs	r3, #2
 80090a2:	75fb      	strb	r3, [r7, #23]
 80090a4:	e001      	b.n	80090aa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80090a6:	230f      	movs	r3, #15
 80090a8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80090aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	371c      	adds	r7, #28
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr

080090b8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b085      	sub	sp, #20
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	781b      	ldrb	r3, [r3, #0]
 80090ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	785b      	ldrb	r3, [r3, #1]
 80090d0:	2b01      	cmp	r3, #1
 80090d2:	d139      	bne.n	8009148 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090da:	69da      	ldr	r2, [r3, #28]
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	f003 030f 	and.w	r3, r3, #15
 80090e4:	2101      	movs	r1, #1
 80090e6:	fa01 f303 	lsl.w	r3, r1, r3
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	68f9      	ldr	r1, [r7, #12]
 80090ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090f2:	4313      	orrs	r3, r2
 80090f4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	015a      	lsls	r2, r3, #5
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	4413      	add	r3, r2
 80090fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009108:	2b00      	cmp	r3, #0
 800910a:	d153      	bne.n	80091b4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	015a      	lsls	r2, r3, #5
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	4413      	add	r3, r2
 8009114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009118:	681a      	ldr	r2, [r3, #0]
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	689b      	ldr	r3, [r3, #8]
 800911e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	791b      	ldrb	r3, [r3, #4]
 8009126:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009128:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	059b      	lsls	r3, r3, #22
 800912e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009130:	431a      	orrs	r2, r3
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	0159      	lsls	r1, r3, #5
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	440b      	add	r3, r1
 800913a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800913e:	4619      	mov	r1, r3
 8009140:	4b20      	ldr	r3, [pc, #128]	; (80091c4 <USB_ActivateEndpoint+0x10c>)
 8009142:	4313      	orrs	r3, r2
 8009144:	600b      	str	r3, [r1, #0]
 8009146:	e035      	b.n	80091b4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800914e:	69da      	ldr	r2, [r3, #28]
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	781b      	ldrb	r3, [r3, #0]
 8009154:	f003 030f 	and.w	r3, r3, #15
 8009158:	2101      	movs	r1, #1
 800915a:	fa01 f303 	lsl.w	r3, r1, r3
 800915e:	041b      	lsls	r3, r3, #16
 8009160:	68f9      	ldr	r1, [r7, #12]
 8009162:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009166:	4313      	orrs	r3, r2
 8009168:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	015a      	lsls	r2, r3, #5
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	4413      	add	r3, r2
 8009172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800917c:	2b00      	cmp	r3, #0
 800917e:	d119      	bne.n	80091b4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	015a      	lsls	r2, r3, #5
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	4413      	add	r3, r2
 8009188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800918c:	681a      	ldr	r2, [r3, #0]
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	689b      	ldr	r3, [r3, #8]
 8009192:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	791b      	ldrb	r3, [r3, #4]
 800919a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800919c:	430b      	orrs	r3, r1
 800919e:	431a      	orrs	r2, r3
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	0159      	lsls	r1, r3, #5
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	440b      	add	r3, r1
 80091a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091ac:	4619      	mov	r1, r3
 80091ae:	4b05      	ldr	r3, [pc, #20]	; (80091c4 <USB_ActivateEndpoint+0x10c>)
 80091b0:	4313      	orrs	r3, r2
 80091b2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80091b4:	2300      	movs	r3, #0
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3714      	adds	r7, #20
 80091ba:	46bd      	mov	sp, r7
 80091bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c0:	4770      	bx	lr
 80091c2:	bf00      	nop
 80091c4:	10008000 	.word	0x10008000

080091c8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b085      	sub	sp, #20
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	781b      	ldrb	r3, [r3, #0]
 80091da:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	785b      	ldrb	r3, [r3, #1]
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d161      	bne.n	80092a8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	015a      	lsls	r2, r3, #5
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	4413      	add	r3, r2
 80091ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091fa:	d11f      	bne.n	800923c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	015a      	lsls	r2, r3, #5
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	4413      	add	r3, r2
 8009204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	68ba      	ldr	r2, [r7, #8]
 800920c:	0151      	lsls	r1, r2, #5
 800920e:	68fa      	ldr	r2, [r7, #12]
 8009210:	440a      	add	r2, r1
 8009212:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009216:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800921a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	015a      	lsls	r2, r3, #5
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	4413      	add	r3, r2
 8009224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	68ba      	ldr	r2, [r7, #8]
 800922c:	0151      	lsls	r1, r2, #5
 800922e:	68fa      	ldr	r2, [r7, #12]
 8009230:	440a      	add	r2, r1
 8009232:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009236:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800923a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009242:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	781b      	ldrb	r3, [r3, #0]
 8009248:	f003 030f 	and.w	r3, r3, #15
 800924c:	2101      	movs	r1, #1
 800924e:	fa01 f303 	lsl.w	r3, r1, r3
 8009252:	b29b      	uxth	r3, r3
 8009254:	43db      	mvns	r3, r3
 8009256:	68f9      	ldr	r1, [r7, #12]
 8009258:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800925c:	4013      	ands	r3, r2
 800925e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009266:	69da      	ldr	r2, [r3, #28]
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	f003 030f 	and.w	r3, r3, #15
 8009270:	2101      	movs	r1, #1
 8009272:	fa01 f303 	lsl.w	r3, r1, r3
 8009276:	b29b      	uxth	r3, r3
 8009278:	43db      	mvns	r3, r3
 800927a:	68f9      	ldr	r1, [r7, #12]
 800927c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009280:	4013      	ands	r3, r2
 8009282:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	015a      	lsls	r2, r3, #5
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	4413      	add	r3, r2
 800928c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009290:	681a      	ldr	r2, [r3, #0]
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	0159      	lsls	r1, r3, #5
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	440b      	add	r3, r1
 800929a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800929e:	4619      	mov	r1, r3
 80092a0:	4b35      	ldr	r3, [pc, #212]	; (8009378 <USB_DeactivateEndpoint+0x1b0>)
 80092a2:	4013      	ands	r3, r2
 80092a4:	600b      	str	r3, [r1, #0]
 80092a6:	e060      	b.n	800936a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	015a      	lsls	r2, r3, #5
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	4413      	add	r3, r2
 80092b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092be:	d11f      	bne.n	8009300 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	015a      	lsls	r2, r3, #5
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	4413      	add	r3, r2
 80092c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	68ba      	ldr	r2, [r7, #8]
 80092d0:	0151      	lsls	r1, r2, #5
 80092d2:	68fa      	ldr	r2, [r7, #12]
 80092d4:	440a      	add	r2, r1
 80092d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80092de:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	015a      	lsls	r2, r3, #5
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	4413      	add	r3, r2
 80092e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	68ba      	ldr	r2, [r7, #8]
 80092f0:	0151      	lsls	r1, r2, #5
 80092f2:	68fa      	ldr	r2, [r7, #12]
 80092f4:	440a      	add	r2, r1
 80092f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80092fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009306:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	f003 030f 	and.w	r3, r3, #15
 8009310:	2101      	movs	r1, #1
 8009312:	fa01 f303 	lsl.w	r3, r1, r3
 8009316:	041b      	lsls	r3, r3, #16
 8009318:	43db      	mvns	r3, r3
 800931a:	68f9      	ldr	r1, [r7, #12]
 800931c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009320:	4013      	ands	r3, r2
 8009322:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800932a:	69da      	ldr	r2, [r3, #28]
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	f003 030f 	and.w	r3, r3, #15
 8009334:	2101      	movs	r1, #1
 8009336:	fa01 f303 	lsl.w	r3, r1, r3
 800933a:	041b      	lsls	r3, r3, #16
 800933c:	43db      	mvns	r3, r3
 800933e:	68f9      	ldr	r1, [r7, #12]
 8009340:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009344:	4013      	ands	r3, r2
 8009346:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	015a      	lsls	r2, r3, #5
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	4413      	add	r3, r2
 8009350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	0159      	lsls	r1, r3, #5
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	440b      	add	r3, r1
 800935e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009362:	4619      	mov	r1, r3
 8009364:	4b05      	ldr	r3, [pc, #20]	; (800937c <USB_DeactivateEndpoint+0x1b4>)
 8009366:	4013      	ands	r3, r2
 8009368:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800936a:	2300      	movs	r3, #0
}
 800936c:	4618      	mov	r0, r3
 800936e:	3714      	adds	r7, #20
 8009370:	46bd      	mov	sp, r7
 8009372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009376:	4770      	bx	lr
 8009378:	ec337800 	.word	0xec337800
 800937c:	eff37800 	.word	0xeff37800

08009380 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b08a      	sub	sp, #40	; 0x28
 8009384:	af02      	add	r7, sp, #8
 8009386:	60f8      	str	r0, [r7, #12]
 8009388:	60b9      	str	r1, [r7, #8]
 800938a:	4613      	mov	r3, r2
 800938c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	785b      	ldrb	r3, [r3, #1]
 800939c:	2b01      	cmp	r3, #1
 800939e:	f040 8181 	bne.w	80096a4 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	691b      	ldr	r3, [r3, #16]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d132      	bne.n	8009410 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80093aa:	69bb      	ldr	r3, [r7, #24]
 80093ac:	015a      	lsls	r2, r3, #5
 80093ae:	69fb      	ldr	r3, [r7, #28]
 80093b0:	4413      	add	r3, r2
 80093b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093b6:	691a      	ldr	r2, [r3, #16]
 80093b8:	69bb      	ldr	r3, [r7, #24]
 80093ba:	0159      	lsls	r1, r3, #5
 80093bc:	69fb      	ldr	r3, [r7, #28]
 80093be:	440b      	add	r3, r1
 80093c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093c4:	4619      	mov	r1, r3
 80093c6:	4ba5      	ldr	r3, [pc, #660]	; (800965c <USB_EPStartXfer+0x2dc>)
 80093c8:	4013      	ands	r3, r2
 80093ca:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80093cc:	69bb      	ldr	r3, [r7, #24]
 80093ce:	015a      	lsls	r2, r3, #5
 80093d0:	69fb      	ldr	r3, [r7, #28]
 80093d2:	4413      	add	r3, r2
 80093d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093d8:	691b      	ldr	r3, [r3, #16]
 80093da:	69ba      	ldr	r2, [r7, #24]
 80093dc:	0151      	lsls	r1, r2, #5
 80093de:	69fa      	ldr	r2, [r7, #28]
 80093e0:	440a      	add	r2, r1
 80093e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80093ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80093ec:	69bb      	ldr	r3, [r7, #24]
 80093ee:	015a      	lsls	r2, r3, #5
 80093f0:	69fb      	ldr	r3, [r7, #28]
 80093f2:	4413      	add	r3, r2
 80093f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093f8:	691a      	ldr	r2, [r3, #16]
 80093fa:	69bb      	ldr	r3, [r7, #24]
 80093fc:	0159      	lsls	r1, r3, #5
 80093fe:	69fb      	ldr	r3, [r7, #28]
 8009400:	440b      	add	r3, r1
 8009402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009406:	4619      	mov	r1, r3
 8009408:	4b95      	ldr	r3, [pc, #596]	; (8009660 <USB_EPStartXfer+0x2e0>)
 800940a:	4013      	ands	r3, r2
 800940c:	610b      	str	r3, [r1, #16]
 800940e:	e092      	b.n	8009536 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009410:	69bb      	ldr	r3, [r7, #24]
 8009412:	015a      	lsls	r2, r3, #5
 8009414:	69fb      	ldr	r3, [r7, #28]
 8009416:	4413      	add	r3, r2
 8009418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800941c:	691a      	ldr	r2, [r3, #16]
 800941e:	69bb      	ldr	r3, [r7, #24]
 8009420:	0159      	lsls	r1, r3, #5
 8009422:	69fb      	ldr	r3, [r7, #28]
 8009424:	440b      	add	r3, r1
 8009426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800942a:	4619      	mov	r1, r3
 800942c:	4b8c      	ldr	r3, [pc, #560]	; (8009660 <USB_EPStartXfer+0x2e0>)
 800942e:	4013      	ands	r3, r2
 8009430:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009432:	69bb      	ldr	r3, [r7, #24]
 8009434:	015a      	lsls	r2, r3, #5
 8009436:	69fb      	ldr	r3, [r7, #28]
 8009438:	4413      	add	r3, r2
 800943a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800943e:	691a      	ldr	r2, [r3, #16]
 8009440:	69bb      	ldr	r3, [r7, #24]
 8009442:	0159      	lsls	r1, r3, #5
 8009444:	69fb      	ldr	r3, [r7, #28]
 8009446:	440b      	add	r3, r1
 8009448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800944c:	4619      	mov	r1, r3
 800944e:	4b83      	ldr	r3, [pc, #524]	; (800965c <USB_EPStartXfer+0x2dc>)
 8009450:	4013      	ands	r3, r2
 8009452:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8009454:	69bb      	ldr	r3, [r7, #24]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d11a      	bne.n	8009490 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	691a      	ldr	r2, [r3, #16]
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	689b      	ldr	r3, [r3, #8]
 8009462:	429a      	cmp	r2, r3
 8009464:	d903      	bls.n	800946e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	689a      	ldr	r2, [r3, #8]
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800946e:	69bb      	ldr	r3, [r7, #24]
 8009470:	015a      	lsls	r2, r3, #5
 8009472:	69fb      	ldr	r3, [r7, #28]
 8009474:	4413      	add	r3, r2
 8009476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800947a:	691b      	ldr	r3, [r3, #16]
 800947c:	69ba      	ldr	r2, [r7, #24]
 800947e:	0151      	lsls	r1, r2, #5
 8009480:	69fa      	ldr	r2, [r7, #28]
 8009482:	440a      	add	r2, r1
 8009484:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009488:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800948c:	6113      	str	r3, [r2, #16]
 800948e:	e01b      	b.n	80094c8 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009490:	69bb      	ldr	r3, [r7, #24]
 8009492:	015a      	lsls	r2, r3, #5
 8009494:	69fb      	ldr	r3, [r7, #28]
 8009496:	4413      	add	r3, r2
 8009498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800949c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	6919      	ldr	r1, [r3, #16]
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	689b      	ldr	r3, [r3, #8]
 80094a6:	440b      	add	r3, r1
 80094a8:	1e59      	subs	r1, r3, #1
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	689b      	ldr	r3, [r3, #8]
 80094ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80094b2:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80094b4:	4b6b      	ldr	r3, [pc, #428]	; (8009664 <USB_EPStartXfer+0x2e4>)
 80094b6:	400b      	ands	r3, r1
 80094b8:	69b9      	ldr	r1, [r7, #24]
 80094ba:	0148      	lsls	r0, r1, #5
 80094bc:	69f9      	ldr	r1, [r7, #28]
 80094be:	4401      	add	r1, r0
 80094c0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80094c4:	4313      	orrs	r3, r2
 80094c6:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80094c8:	69bb      	ldr	r3, [r7, #24]
 80094ca:	015a      	lsls	r2, r3, #5
 80094cc:	69fb      	ldr	r3, [r7, #28]
 80094ce:	4413      	add	r3, r2
 80094d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094d4:	691a      	ldr	r2, [r3, #16]
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	691b      	ldr	r3, [r3, #16]
 80094da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80094de:	69b9      	ldr	r1, [r7, #24]
 80094e0:	0148      	lsls	r0, r1, #5
 80094e2:	69f9      	ldr	r1, [r7, #28]
 80094e4:	4401      	add	r1, r0
 80094e6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80094ea:	4313      	orrs	r3, r2
 80094ec:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	791b      	ldrb	r3, [r3, #4]
 80094f2:	2b01      	cmp	r3, #1
 80094f4:	d11f      	bne.n	8009536 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80094f6:	69bb      	ldr	r3, [r7, #24]
 80094f8:	015a      	lsls	r2, r3, #5
 80094fa:	69fb      	ldr	r3, [r7, #28]
 80094fc:	4413      	add	r3, r2
 80094fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009502:	691b      	ldr	r3, [r3, #16]
 8009504:	69ba      	ldr	r2, [r7, #24]
 8009506:	0151      	lsls	r1, r2, #5
 8009508:	69fa      	ldr	r2, [r7, #28]
 800950a:	440a      	add	r2, r1
 800950c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009510:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009514:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009516:	69bb      	ldr	r3, [r7, #24]
 8009518:	015a      	lsls	r2, r3, #5
 800951a:	69fb      	ldr	r3, [r7, #28]
 800951c:	4413      	add	r3, r2
 800951e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009522:	691b      	ldr	r3, [r3, #16]
 8009524:	69ba      	ldr	r2, [r7, #24]
 8009526:	0151      	lsls	r1, r2, #5
 8009528:	69fa      	ldr	r2, [r7, #28]
 800952a:	440a      	add	r2, r1
 800952c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009530:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009534:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009536:	79fb      	ldrb	r3, [r7, #7]
 8009538:	2b01      	cmp	r3, #1
 800953a:	d14b      	bne.n	80095d4 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	69db      	ldr	r3, [r3, #28]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d009      	beq.n	8009558 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009544:	69bb      	ldr	r3, [r7, #24]
 8009546:	015a      	lsls	r2, r3, #5
 8009548:	69fb      	ldr	r3, [r7, #28]
 800954a:	4413      	add	r3, r2
 800954c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009550:	461a      	mov	r2, r3
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	69db      	ldr	r3, [r3, #28]
 8009556:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	791b      	ldrb	r3, [r3, #4]
 800955c:	2b01      	cmp	r3, #1
 800955e:	d128      	bne.n	80095b2 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009560:	69fb      	ldr	r3, [r7, #28]
 8009562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009566:	689b      	ldr	r3, [r3, #8]
 8009568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800956c:	2b00      	cmp	r3, #0
 800956e:	d110      	bne.n	8009592 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009570:	69bb      	ldr	r3, [r7, #24]
 8009572:	015a      	lsls	r2, r3, #5
 8009574:	69fb      	ldr	r3, [r7, #28]
 8009576:	4413      	add	r3, r2
 8009578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	69ba      	ldr	r2, [r7, #24]
 8009580:	0151      	lsls	r1, r2, #5
 8009582:	69fa      	ldr	r2, [r7, #28]
 8009584:	440a      	add	r2, r1
 8009586:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800958a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800958e:	6013      	str	r3, [r2, #0]
 8009590:	e00f      	b.n	80095b2 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009592:	69bb      	ldr	r3, [r7, #24]
 8009594:	015a      	lsls	r2, r3, #5
 8009596:	69fb      	ldr	r3, [r7, #28]
 8009598:	4413      	add	r3, r2
 800959a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	69ba      	ldr	r2, [r7, #24]
 80095a2:	0151      	lsls	r1, r2, #5
 80095a4:	69fa      	ldr	r2, [r7, #28]
 80095a6:	440a      	add	r2, r1
 80095a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095b0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80095b2:	69bb      	ldr	r3, [r7, #24]
 80095b4:	015a      	lsls	r2, r3, #5
 80095b6:	69fb      	ldr	r3, [r7, #28]
 80095b8:	4413      	add	r3, r2
 80095ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	69ba      	ldr	r2, [r7, #24]
 80095c2:	0151      	lsls	r1, r2, #5
 80095c4:	69fa      	ldr	r2, [r7, #28]
 80095c6:	440a      	add	r2, r1
 80095c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80095d0:	6013      	str	r3, [r2, #0]
 80095d2:	e16a      	b.n	80098aa <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80095d4:	69bb      	ldr	r3, [r7, #24]
 80095d6:	015a      	lsls	r2, r3, #5
 80095d8:	69fb      	ldr	r3, [r7, #28]
 80095da:	4413      	add	r3, r2
 80095dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	69ba      	ldr	r2, [r7, #24]
 80095e4:	0151      	lsls	r1, r2, #5
 80095e6:	69fa      	ldr	r2, [r7, #28]
 80095e8:	440a      	add	r2, r1
 80095ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80095f2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	791b      	ldrb	r3, [r3, #4]
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	d015      	beq.n	8009628 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	691b      	ldr	r3, [r3, #16]
 8009600:	2b00      	cmp	r3, #0
 8009602:	f000 8152 	beq.w	80098aa <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009606:	69fb      	ldr	r3, [r7, #28]
 8009608:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800960c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	f003 030f 	and.w	r3, r3, #15
 8009616:	2101      	movs	r1, #1
 8009618:	fa01 f303 	lsl.w	r3, r1, r3
 800961c:	69f9      	ldr	r1, [r7, #28]
 800961e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009622:	4313      	orrs	r3, r2
 8009624:	634b      	str	r3, [r1, #52]	; 0x34
 8009626:	e140      	b.n	80098aa <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009628:	69fb      	ldr	r3, [r7, #28]
 800962a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800962e:	689b      	ldr	r3, [r3, #8]
 8009630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009634:	2b00      	cmp	r3, #0
 8009636:	d117      	bne.n	8009668 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009638:	69bb      	ldr	r3, [r7, #24]
 800963a:	015a      	lsls	r2, r3, #5
 800963c:	69fb      	ldr	r3, [r7, #28]
 800963e:	4413      	add	r3, r2
 8009640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	69ba      	ldr	r2, [r7, #24]
 8009648:	0151      	lsls	r1, r2, #5
 800964a:	69fa      	ldr	r2, [r7, #28]
 800964c:	440a      	add	r2, r1
 800964e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009652:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009656:	6013      	str	r3, [r2, #0]
 8009658:	e016      	b.n	8009688 <USB_EPStartXfer+0x308>
 800965a:	bf00      	nop
 800965c:	e007ffff 	.word	0xe007ffff
 8009660:	fff80000 	.word	0xfff80000
 8009664:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009668:	69bb      	ldr	r3, [r7, #24]
 800966a:	015a      	lsls	r2, r3, #5
 800966c:	69fb      	ldr	r3, [r7, #28]
 800966e:	4413      	add	r3, r2
 8009670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	69ba      	ldr	r2, [r7, #24]
 8009678:	0151      	lsls	r1, r2, #5
 800967a:	69fa      	ldr	r2, [r7, #28]
 800967c:	440a      	add	r2, r1
 800967e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009686:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	68d9      	ldr	r1, [r3, #12]
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	781a      	ldrb	r2, [r3, #0]
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	691b      	ldr	r3, [r3, #16]
 8009694:	b298      	uxth	r0, r3
 8009696:	79fb      	ldrb	r3, [r7, #7]
 8009698:	9300      	str	r3, [sp, #0]
 800969a:	4603      	mov	r3, r0
 800969c:	68f8      	ldr	r0, [r7, #12]
 800969e:	f000 f9b9 	bl	8009a14 <USB_WritePacket>
 80096a2:	e102      	b.n	80098aa <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80096a4:	69bb      	ldr	r3, [r7, #24]
 80096a6:	015a      	lsls	r2, r3, #5
 80096a8:	69fb      	ldr	r3, [r7, #28]
 80096aa:	4413      	add	r3, r2
 80096ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096b0:	691a      	ldr	r2, [r3, #16]
 80096b2:	69bb      	ldr	r3, [r7, #24]
 80096b4:	0159      	lsls	r1, r3, #5
 80096b6:	69fb      	ldr	r3, [r7, #28]
 80096b8:	440b      	add	r3, r1
 80096ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096be:	4619      	mov	r1, r3
 80096c0:	4b7c      	ldr	r3, [pc, #496]	; (80098b4 <USB_EPStartXfer+0x534>)
 80096c2:	4013      	ands	r3, r2
 80096c4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80096c6:	69bb      	ldr	r3, [r7, #24]
 80096c8:	015a      	lsls	r2, r3, #5
 80096ca:	69fb      	ldr	r3, [r7, #28]
 80096cc:	4413      	add	r3, r2
 80096ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096d2:	691a      	ldr	r2, [r3, #16]
 80096d4:	69bb      	ldr	r3, [r7, #24]
 80096d6:	0159      	lsls	r1, r3, #5
 80096d8:	69fb      	ldr	r3, [r7, #28]
 80096da:	440b      	add	r3, r1
 80096dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096e0:	4619      	mov	r1, r3
 80096e2:	4b75      	ldr	r3, [pc, #468]	; (80098b8 <USB_EPStartXfer+0x538>)
 80096e4:	4013      	ands	r3, r2
 80096e6:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80096e8:	69bb      	ldr	r3, [r7, #24]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d12f      	bne.n	800974e <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	691b      	ldr	r3, [r3, #16]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d003      	beq.n	80096fe <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	689a      	ldr	r2, [r3, #8]
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	689a      	ldr	r2, [r3, #8]
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009706:	69bb      	ldr	r3, [r7, #24]
 8009708:	015a      	lsls	r2, r3, #5
 800970a:	69fb      	ldr	r3, [r7, #28]
 800970c:	4413      	add	r3, r2
 800970e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009712:	691a      	ldr	r2, [r3, #16]
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	6a1b      	ldr	r3, [r3, #32]
 8009718:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800971c:	69b9      	ldr	r1, [r7, #24]
 800971e:	0148      	lsls	r0, r1, #5
 8009720:	69f9      	ldr	r1, [r7, #28]
 8009722:	4401      	add	r1, r0
 8009724:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009728:	4313      	orrs	r3, r2
 800972a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800972c:	69bb      	ldr	r3, [r7, #24]
 800972e:	015a      	lsls	r2, r3, #5
 8009730:	69fb      	ldr	r3, [r7, #28]
 8009732:	4413      	add	r3, r2
 8009734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009738:	691b      	ldr	r3, [r3, #16]
 800973a:	69ba      	ldr	r2, [r7, #24]
 800973c:	0151      	lsls	r1, r2, #5
 800973e:	69fa      	ldr	r2, [r7, #28]
 8009740:	440a      	add	r2, r1
 8009742:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009746:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800974a:	6113      	str	r3, [r2, #16]
 800974c:	e05f      	b.n	800980e <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	691b      	ldr	r3, [r3, #16]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d123      	bne.n	800979e <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009756:	69bb      	ldr	r3, [r7, #24]
 8009758:	015a      	lsls	r2, r3, #5
 800975a:	69fb      	ldr	r3, [r7, #28]
 800975c:	4413      	add	r3, r2
 800975e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009762:	691a      	ldr	r2, [r3, #16]
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	689b      	ldr	r3, [r3, #8]
 8009768:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800976c:	69b9      	ldr	r1, [r7, #24]
 800976e:	0148      	lsls	r0, r1, #5
 8009770:	69f9      	ldr	r1, [r7, #28]
 8009772:	4401      	add	r1, r0
 8009774:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009778:	4313      	orrs	r3, r2
 800977a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800977c:	69bb      	ldr	r3, [r7, #24]
 800977e:	015a      	lsls	r2, r3, #5
 8009780:	69fb      	ldr	r3, [r7, #28]
 8009782:	4413      	add	r3, r2
 8009784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009788:	691b      	ldr	r3, [r3, #16]
 800978a:	69ba      	ldr	r2, [r7, #24]
 800978c:	0151      	lsls	r1, r2, #5
 800978e:	69fa      	ldr	r2, [r7, #28]
 8009790:	440a      	add	r2, r1
 8009792:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009796:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800979a:	6113      	str	r3, [r2, #16]
 800979c:	e037      	b.n	800980e <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	691a      	ldr	r2, [r3, #16]
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	689b      	ldr	r3, [r3, #8]
 80097a6:	4413      	add	r3, r2
 80097a8:	1e5a      	subs	r2, r3, #1
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	689b      	ldr	r3, [r3, #8]
 80097ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80097b2:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	689b      	ldr	r3, [r3, #8]
 80097b8:	8afa      	ldrh	r2, [r7, #22]
 80097ba:	fb03 f202 	mul.w	r2, r3, r2
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80097c2:	69bb      	ldr	r3, [r7, #24]
 80097c4:	015a      	lsls	r2, r3, #5
 80097c6:	69fb      	ldr	r3, [r7, #28]
 80097c8:	4413      	add	r3, r2
 80097ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097ce:	691a      	ldr	r2, [r3, #16]
 80097d0:	8afb      	ldrh	r3, [r7, #22]
 80097d2:	04d9      	lsls	r1, r3, #19
 80097d4:	4b39      	ldr	r3, [pc, #228]	; (80098bc <USB_EPStartXfer+0x53c>)
 80097d6:	400b      	ands	r3, r1
 80097d8:	69b9      	ldr	r1, [r7, #24]
 80097da:	0148      	lsls	r0, r1, #5
 80097dc:	69f9      	ldr	r1, [r7, #28]
 80097de:	4401      	add	r1, r0
 80097e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80097e4:	4313      	orrs	r3, r2
 80097e6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80097e8:	69bb      	ldr	r3, [r7, #24]
 80097ea:	015a      	lsls	r2, r3, #5
 80097ec:	69fb      	ldr	r3, [r7, #28]
 80097ee:	4413      	add	r3, r2
 80097f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097f4:	691a      	ldr	r2, [r3, #16]
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	6a1b      	ldr	r3, [r3, #32]
 80097fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80097fe:	69b9      	ldr	r1, [r7, #24]
 8009800:	0148      	lsls	r0, r1, #5
 8009802:	69f9      	ldr	r1, [r7, #28]
 8009804:	4401      	add	r1, r0
 8009806:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800980a:	4313      	orrs	r3, r2
 800980c:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800980e:	79fb      	ldrb	r3, [r7, #7]
 8009810:	2b01      	cmp	r3, #1
 8009812:	d10d      	bne.n	8009830 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d009      	beq.n	8009830 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	68d9      	ldr	r1, [r3, #12]
 8009820:	69bb      	ldr	r3, [r7, #24]
 8009822:	015a      	lsls	r2, r3, #5
 8009824:	69fb      	ldr	r3, [r7, #28]
 8009826:	4413      	add	r3, r2
 8009828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800982c:	460a      	mov	r2, r1
 800982e:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	791b      	ldrb	r3, [r3, #4]
 8009834:	2b01      	cmp	r3, #1
 8009836:	d128      	bne.n	800988a <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009838:	69fb      	ldr	r3, [r7, #28]
 800983a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800983e:	689b      	ldr	r3, [r3, #8]
 8009840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009844:	2b00      	cmp	r3, #0
 8009846:	d110      	bne.n	800986a <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009848:	69bb      	ldr	r3, [r7, #24]
 800984a:	015a      	lsls	r2, r3, #5
 800984c:	69fb      	ldr	r3, [r7, #28]
 800984e:	4413      	add	r3, r2
 8009850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	69ba      	ldr	r2, [r7, #24]
 8009858:	0151      	lsls	r1, r2, #5
 800985a:	69fa      	ldr	r2, [r7, #28]
 800985c:	440a      	add	r2, r1
 800985e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009862:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009866:	6013      	str	r3, [r2, #0]
 8009868:	e00f      	b.n	800988a <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800986a:	69bb      	ldr	r3, [r7, #24]
 800986c:	015a      	lsls	r2, r3, #5
 800986e:	69fb      	ldr	r3, [r7, #28]
 8009870:	4413      	add	r3, r2
 8009872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	69ba      	ldr	r2, [r7, #24]
 800987a:	0151      	lsls	r1, r2, #5
 800987c:	69fa      	ldr	r2, [r7, #28]
 800987e:	440a      	add	r2, r1
 8009880:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009888:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800988a:	69bb      	ldr	r3, [r7, #24]
 800988c:	015a      	lsls	r2, r3, #5
 800988e:	69fb      	ldr	r3, [r7, #28]
 8009890:	4413      	add	r3, r2
 8009892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	69ba      	ldr	r2, [r7, #24]
 800989a:	0151      	lsls	r1, r2, #5
 800989c:	69fa      	ldr	r2, [r7, #28]
 800989e:	440a      	add	r2, r1
 80098a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80098a8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80098aa:	2300      	movs	r3, #0
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3720      	adds	r7, #32
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}
 80098b4:	fff80000 	.word	0xfff80000
 80098b8:	e007ffff 	.word	0xe007ffff
 80098bc:	1ff80000 	.word	0x1ff80000

080098c0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b087      	sub	sp, #28
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80098ca:	2300      	movs	r3, #0
 80098cc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80098ce:	2300      	movs	r3, #0
 80098d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	785b      	ldrb	r3, [r3, #1]
 80098da:	2b01      	cmp	r3, #1
 80098dc:	d14a      	bne.n	8009974 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	781b      	ldrb	r3, [r3, #0]
 80098e2:	015a      	lsls	r2, r3, #5
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	4413      	add	r3, r2
 80098e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80098f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098f6:	f040 8086 	bne.w	8009a06 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	015a      	lsls	r2, r3, #5
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	4413      	add	r3, r2
 8009904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	683a      	ldr	r2, [r7, #0]
 800990c:	7812      	ldrb	r2, [r2, #0]
 800990e:	0151      	lsls	r1, r2, #5
 8009910:	693a      	ldr	r2, [r7, #16]
 8009912:	440a      	add	r2, r1
 8009914:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009918:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800991c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	781b      	ldrb	r3, [r3, #0]
 8009922:	015a      	lsls	r2, r3, #5
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	4413      	add	r3, r2
 8009928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	683a      	ldr	r2, [r7, #0]
 8009930:	7812      	ldrb	r2, [r2, #0]
 8009932:	0151      	lsls	r1, r2, #5
 8009934:	693a      	ldr	r2, [r7, #16]
 8009936:	440a      	add	r2, r1
 8009938:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800993c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009940:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	3301      	adds	r3, #1
 8009946:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f242 7210 	movw	r2, #10000	; 0x2710
 800994e:	4293      	cmp	r3, r2
 8009950:	d902      	bls.n	8009958 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009952:	2301      	movs	r3, #1
 8009954:	75fb      	strb	r3, [r7, #23]
          break;
 8009956:	e056      	b.n	8009a06 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	781b      	ldrb	r3, [r3, #0]
 800995c:	015a      	lsls	r2, r3, #5
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	4413      	add	r3, r2
 8009962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800996c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009970:	d0e7      	beq.n	8009942 <USB_EPStopXfer+0x82>
 8009972:	e048      	b.n	8009a06 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	781b      	ldrb	r3, [r3, #0]
 8009978:	015a      	lsls	r2, r3, #5
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	4413      	add	r3, r2
 800997e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009988:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800998c:	d13b      	bne.n	8009a06 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	781b      	ldrb	r3, [r3, #0]
 8009992:	015a      	lsls	r2, r3, #5
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	4413      	add	r3, r2
 8009998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	683a      	ldr	r2, [r7, #0]
 80099a0:	7812      	ldrb	r2, [r2, #0]
 80099a2:	0151      	lsls	r1, r2, #5
 80099a4:	693a      	ldr	r2, [r7, #16]
 80099a6:	440a      	add	r2, r1
 80099a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80099b0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	015a      	lsls	r2, r3, #5
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	4413      	add	r3, r2
 80099bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	683a      	ldr	r2, [r7, #0]
 80099c4:	7812      	ldrb	r2, [r2, #0]
 80099c6:	0151      	lsls	r1, r2, #5
 80099c8:	693a      	ldr	r2, [r7, #16]
 80099ca:	440a      	add	r2, r1
 80099cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80099d4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	3301      	adds	r3, #1
 80099da:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f242 7210 	movw	r2, #10000	; 0x2710
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d902      	bls.n	80099ec <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80099e6:	2301      	movs	r3, #1
 80099e8:	75fb      	strb	r3, [r7, #23]
          break;
 80099ea:	e00c      	b.n	8009a06 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	015a      	lsls	r2, r3, #5
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	4413      	add	r3, r2
 80099f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a04:	d0e7      	beq.n	80099d6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009a06:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	371c      	adds	r7, #28
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr

08009a14 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b089      	sub	sp, #36	; 0x24
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	60b9      	str	r1, [r7, #8]
 8009a1e:	4611      	mov	r1, r2
 8009a20:	461a      	mov	r2, r3
 8009a22:	460b      	mov	r3, r1
 8009a24:	71fb      	strb	r3, [r7, #7]
 8009a26:	4613      	mov	r3, r2
 8009a28:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009a32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d123      	bne.n	8009a82 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009a3a:	88bb      	ldrh	r3, [r7, #4]
 8009a3c:	3303      	adds	r3, #3
 8009a3e:	089b      	lsrs	r3, r3, #2
 8009a40:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009a42:	2300      	movs	r3, #0
 8009a44:	61bb      	str	r3, [r7, #24]
 8009a46:	e018      	b.n	8009a7a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009a48:	79fb      	ldrb	r3, [r7, #7]
 8009a4a:	031a      	lsls	r2, r3, #12
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	4413      	add	r3, r2
 8009a50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a54:	461a      	mov	r2, r3
 8009a56:	69fb      	ldr	r3, [r7, #28]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009a5c:	69fb      	ldr	r3, [r7, #28]
 8009a5e:	3301      	adds	r3, #1
 8009a60:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009a62:	69fb      	ldr	r3, [r7, #28]
 8009a64:	3301      	adds	r3, #1
 8009a66:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009a68:	69fb      	ldr	r3, [r7, #28]
 8009a6a:	3301      	adds	r3, #1
 8009a6c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009a6e:	69fb      	ldr	r3, [r7, #28]
 8009a70:	3301      	adds	r3, #1
 8009a72:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009a74:	69bb      	ldr	r3, [r7, #24]
 8009a76:	3301      	adds	r3, #1
 8009a78:	61bb      	str	r3, [r7, #24]
 8009a7a:	69ba      	ldr	r2, [r7, #24]
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	429a      	cmp	r2, r3
 8009a80:	d3e2      	bcc.n	8009a48 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009a82:	2300      	movs	r3, #0
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3724      	adds	r7, #36	; 0x24
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr

08009a90 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b08b      	sub	sp, #44	; 0x2c
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	60b9      	str	r1, [r7, #8]
 8009a9a:	4613      	mov	r3, r2
 8009a9c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009aa6:	88fb      	ldrh	r3, [r7, #6]
 8009aa8:	089b      	lsrs	r3, r3, #2
 8009aaa:	b29b      	uxth	r3, r3
 8009aac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009aae:	88fb      	ldrh	r3, [r7, #6]
 8009ab0:	f003 0303 	and.w	r3, r3, #3
 8009ab4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	623b      	str	r3, [r7, #32]
 8009aba:	e014      	b.n	8009ae6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009abc:	69bb      	ldr	r3, [r7, #24]
 8009abe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ac2:	681a      	ldr	r2, [r3, #0]
 8009ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac6:	601a      	str	r2, [r3, #0]
    pDest++;
 8009ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aca:	3301      	adds	r3, #1
 8009acc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad0:	3301      	adds	r3, #1
 8009ad2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009adc:	3301      	adds	r3, #1
 8009ade:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009ae0:	6a3b      	ldr	r3, [r7, #32]
 8009ae2:	3301      	adds	r3, #1
 8009ae4:	623b      	str	r3, [r7, #32]
 8009ae6:	6a3a      	ldr	r2, [r7, #32]
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	429a      	cmp	r2, r3
 8009aec:	d3e6      	bcc.n	8009abc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009aee:	8bfb      	ldrh	r3, [r7, #30]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d01e      	beq.n	8009b32 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009af4:	2300      	movs	r3, #0
 8009af6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009af8:	69bb      	ldr	r3, [r7, #24]
 8009afa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009afe:	461a      	mov	r2, r3
 8009b00:	f107 0310 	add.w	r3, r7, #16
 8009b04:	6812      	ldr	r2, [r2, #0]
 8009b06:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009b08:	693a      	ldr	r2, [r7, #16]
 8009b0a:	6a3b      	ldr	r3, [r7, #32]
 8009b0c:	b2db      	uxtb	r3, r3
 8009b0e:	00db      	lsls	r3, r3, #3
 8009b10:	fa22 f303 	lsr.w	r3, r2, r3
 8009b14:	b2da      	uxtb	r2, r3
 8009b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b18:	701a      	strb	r2, [r3, #0]
      i++;
 8009b1a:	6a3b      	ldr	r3, [r7, #32]
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	623b      	str	r3, [r7, #32]
      pDest++;
 8009b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b22:	3301      	adds	r3, #1
 8009b24:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009b26:	8bfb      	ldrh	r3, [r7, #30]
 8009b28:	3b01      	subs	r3, #1
 8009b2a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009b2c:	8bfb      	ldrh	r3, [r7, #30]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d1ea      	bne.n	8009b08 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	372c      	adds	r7, #44	; 0x2c
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3e:	4770      	bx	lr

08009b40 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b085      	sub	sp, #20
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
 8009b48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	781b      	ldrb	r3, [r3, #0]
 8009b52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	785b      	ldrb	r3, [r3, #1]
 8009b58:	2b01      	cmp	r3, #1
 8009b5a:	d12c      	bne.n	8009bb6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	015a      	lsls	r2, r3, #5
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	4413      	add	r3, r2
 8009b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	db12      	blt.n	8009b94 <USB_EPSetStall+0x54>
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d00f      	beq.n	8009b94 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	015a      	lsls	r2, r3, #5
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	4413      	add	r3, r2
 8009b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	68ba      	ldr	r2, [r7, #8]
 8009b84:	0151      	lsls	r1, r2, #5
 8009b86:	68fa      	ldr	r2, [r7, #12]
 8009b88:	440a      	add	r2, r1
 8009b8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b8e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009b92:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	015a      	lsls	r2, r3, #5
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	4413      	add	r3, r2
 8009b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	68ba      	ldr	r2, [r7, #8]
 8009ba4:	0151      	lsls	r1, r2, #5
 8009ba6:	68fa      	ldr	r2, [r7, #12]
 8009ba8:	440a      	add	r2, r1
 8009baa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009bb2:	6013      	str	r3, [r2, #0]
 8009bb4:	e02b      	b.n	8009c0e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	015a      	lsls	r2, r3, #5
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	4413      	add	r3, r2
 8009bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	db12      	blt.n	8009bee <USB_EPSetStall+0xae>
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d00f      	beq.n	8009bee <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	015a      	lsls	r2, r3, #5
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	4413      	add	r3, r2
 8009bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	68ba      	ldr	r2, [r7, #8]
 8009bde:	0151      	lsls	r1, r2, #5
 8009be0:	68fa      	ldr	r2, [r7, #12]
 8009be2:	440a      	add	r2, r1
 8009be4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009be8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009bec:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	015a      	lsls	r2, r3, #5
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	4413      	add	r3, r2
 8009bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	68ba      	ldr	r2, [r7, #8]
 8009bfe:	0151      	lsls	r1, r2, #5
 8009c00:	68fa      	ldr	r2, [r7, #12]
 8009c02:	440a      	add	r2, r1
 8009c04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009c0c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009c0e:	2300      	movs	r3, #0
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3714      	adds	r7, #20
 8009c14:	46bd      	mov	sp, r7
 8009c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1a:	4770      	bx	lr

08009c1c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b085      	sub	sp, #20
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	785b      	ldrb	r3, [r3, #1]
 8009c34:	2b01      	cmp	r3, #1
 8009c36:	d128      	bne.n	8009c8a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	015a      	lsls	r2, r3, #5
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	4413      	add	r3, r2
 8009c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	68ba      	ldr	r2, [r7, #8]
 8009c48:	0151      	lsls	r1, r2, #5
 8009c4a:	68fa      	ldr	r2, [r7, #12]
 8009c4c:	440a      	add	r2, r1
 8009c4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009c56:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	791b      	ldrb	r3, [r3, #4]
 8009c5c:	2b03      	cmp	r3, #3
 8009c5e:	d003      	beq.n	8009c68 <USB_EPClearStall+0x4c>
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	791b      	ldrb	r3, [r3, #4]
 8009c64:	2b02      	cmp	r3, #2
 8009c66:	d138      	bne.n	8009cda <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	015a      	lsls	r2, r3, #5
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	4413      	add	r3, r2
 8009c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	68ba      	ldr	r2, [r7, #8]
 8009c78:	0151      	lsls	r1, r2, #5
 8009c7a:	68fa      	ldr	r2, [r7, #12]
 8009c7c:	440a      	add	r2, r1
 8009c7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c86:	6013      	str	r3, [r2, #0]
 8009c88:	e027      	b.n	8009cda <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	015a      	lsls	r2, r3, #5
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	4413      	add	r3, r2
 8009c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	68ba      	ldr	r2, [r7, #8]
 8009c9a:	0151      	lsls	r1, r2, #5
 8009c9c:	68fa      	ldr	r2, [r7, #12]
 8009c9e:	440a      	add	r2, r1
 8009ca0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ca4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009ca8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	791b      	ldrb	r3, [r3, #4]
 8009cae:	2b03      	cmp	r3, #3
 8009cb0:	d003      	beq.n	8009cba <USB_EPClearStall+0x9e>
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	791b      	ldrb	r3, [r3, #4]
 8009cb6:	2b02      	cmp	r3, #2
 8009cb8:	d10f      	bne.n	8009cda <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	015a      	lsls	r2, r3, #5
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	4413      	add	r3, r2
 8009cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	68ba      	ldr	r2, [r7, #8]
 8009cca:	0151      	lsls	r1, r2, #5
 8009ccc:	68fa      	ldr	r2, [r7, #12]
 8009cce:	440a      	add	r2, r1
 8009cd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009cd8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009cda:	2300      	movs	r3, #0
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3714      	adds	r7, #20
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce6:	4770      	bx	lr

08009ce8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b085      	sub	sp, #20
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	460b      	mov	r3, r1
 8009cf2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	68fa      	ldr	r2, [r7, #12]
 8009d02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d06:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009d0a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d12:	681a      	ldr	r2, [r3, #0]
 8009d14:	78fb      	ldrb	r3, [r7, #3]
 8009d16:	011b      	lsls	r3, r3, #4
 8009d18:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009d1c:	68f9      	ldr	r1, [r7, #12]
 8009d1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d22:	4313      	orrs	r3, r2
 8009d24:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009d26:	2300      	movs	r3, #0
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3714      	adds	r7, #20
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr

08009d34 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b085      	sub	sp, #20
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	68fa      	ldr	r2, [r7, #12]
 8009d4a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009d4e:	f023 0303 	bic.w	r3, r3, #3
 8009d52:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	68fa      	ldr	r2, [r7, #12]
 8009d5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d62:	f023 0302 	bic.w	r3, r3, #2
 8009d66:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009d68:	2300      	movs	r3, #0
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3714      	adds	r7, #20
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d74:	4770      	bx	lr

08009d76 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009d76:	b480      	push	{r7}
 8009d78:	b085      	sub	sp, #20
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	68fa      	ldr	r2, [r7, #12]
 8009d8c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009d90:	f023 0303 	bic.w	r3, r3, #3
 8009d94:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	68fa      	ldr	r2, [r7, #12]
 8009da0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009da4:	f043 0302 	orr.w	r3, r3, #2
 8009da8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009daa:	2300      	movs	r3, #0
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3714      	adds	r7, #20
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr

08009db8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b085      	sub	sp, #20
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	695b      	ldr	r3, [r3, #20]
 8009dc4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	699b      	ldr	r3, [r3, #24]
 8009dca:	68fa      	ldr	r2, [r7, #12]
 8009dcc:	4013      	ands	r3, r2
 8009dce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3714      	adds	r7, #20
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ddc:	4770      	bx	lr

08009dde <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009dde:	b480      	push	{r7}
 8009de0:	b085      	sub	sp, #20
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009df0:	699b      	ldr	r3, [r3, #24]
 8009df2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dfa:	69db      	ldr	r3, [r3, #28]
 8009dfc:	68ba      	ldr	r2, [r7, #8]
 8009dfe:	4013      	ands	r3, r2
 8009e00:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	0c1b      	lsrs	r3, r3, #16
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3714      	adds	r7, #20
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e10:	4770      	bx	lr

08009e12 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009e12:	b480      	push	{r7}
 8009e14:	b085      	sub	sp, #20
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e24:	699b      	ldr	r3, [r3, #24]
 8009e26:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e2e:	69db      	ldr	r3, [r3, #28]
 8009e30:	68ba      	ldr	r2, [r7, #8]
 8009e32:	4013      	ands	r3, r2
 8009e34:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	b29b      	uxth	r3, r3
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3714      	adds	r7, #20
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e44:	4770      	bx	lr

08009e46 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009e46:	b480      	push	{r7}
 8009e48:	b085      	sub	sp, #20
 8009e4a:	af00      	add	r7, sp, #0
 8009e4c:	6078      	str	r0, [r7, #4]
 8009e4e:	460b      	mov	r3, r1
 8009e50:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009e56:	78fb      	ldrb	r3, [r7, #3]
 8009e58:	015a      	lsls	r2, r3, #5
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	4413      	add	r3, r2
 8009e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e62:	689b      	ldr	r3, [r3, #8]
 8009e64:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e6c:	695b      	ldr	r3, [r3, #20]
 8009e6e:	68ba      	ldr	r2, [r7, #8]
 8009e70:	4013      	ands	r3, r2
 8009e72:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009e74:	68bb      	ldr	r3, [r7, #8]
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3714      	adds	r7, #20
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e80:	4770      	bx	lr

08009e82 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009e82:	b480      	push	{r7}
 8009e84:	b087      	sub	sp, #28
 8009e86:	af00      	add	r7, sp, #0
 8009e88:	6078      	str	r0, [r7, #4]
 8009e8a:	460b      	mov	r3, r1
 8009e8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e98:	691b      	ldr	r3, [r3, #16]
 8009e9a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ea4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009ea6:	78fb      	ldrb	r3, [r7, #3]
 8009ea8:	f003 030f 	and.w	r3, r3, #15
 8009eac:	68fa      	ldr	r2, [r7, #12]
 8009eae:	fa22 f303 	lsr.w	r3, r2, r3
 8009eb2:	01db      	lsls	r3, r3, #7
 8009eb4:	b2db      	uxtb	r3, r3
 8009eb6:	693a      	ldr	r2, [r7, #16]
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009ebc:	78fb      	ldrb	r3, [r7, #3]
 8009ebe:	015a      	lsls	r2, r3, #5
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	4413      	add	r3, r2
 8009ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ec8:	689b      	ldr	r3, [r3, #8]
 8009eca:	693a      	ldr	r2, [r7, #16]
 8009ecc:	4013      	ands	r3, r2
 8009ece:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009ed0:	68bb      	ldr	r3, [r7, #8]
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	371c      	adds	r7, #28
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009edc:	4770      	bx	lr

08009ede <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009ede:	b480      	push	{r7}
 8009ee0:	b083      	sub	sp, #12
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	695b      	ldr	r3, [r3, #20]
 8009eea:	f003 0301 	and.w	r3, r3, #1
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	370c      	adds	r7, #12
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr
	...

08009efc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b085      	sub	sp, #20
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f0e:	681a      	ldr	r2, [r3, #0]
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f16:	4619      	mov	r1, r3
 8009f18:	4b09      	ldr	r3, [pc, #36]	; (8009f40 <USB_ActivateSetup+0x44>)
 8009f1a:	4013      	ands	r3, r2
 8009f1c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f24:	685b      	ldr	r3, [r3, #4]
 8009f26:	68fa      	ldr	r2, [r7, #12]
 8009f28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f30:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009f32:	2300      	movs	r3, #0
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3714      	adds	r7, #20
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr
 8009f40:	fffff800 	.word	0xfffff800

08009f44 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b087      	sub	sp, #28
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	60f8      	str	r0, [r7, #12]
 8009f4c:	460b      	mov	r3, r1
 8009f4e:	607a      	str	r2, [r7, #4]
 8009f50:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	333c      	adds	r3, #60	; 0x3c
 8009f5a:	3304      	adds	r3, #4
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	4a26      	ldr	r2, [pc, #152]	; (8009ffc <USB_EP0_OutStart+0xb8>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d90a      	bls.n	8009f7e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f78:	d101      	bne.n	8009f7e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	e037      	b.n	8009fee <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f84:	461a      	mov	r2, r3
 8009f86:	2300      	movs	r3, #0
 8009f88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f90:	691b      	ldr	r3, [r3, #16]
 8009f92:	697a      	ldr	r2, [r7, #20]
 8009f94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009f9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fa4:	691b      	ldr	r3, [r3, #16]
 8009fa6:	697a      	ldr	r2, [r7, #20]
 8009fa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fac:	f043 0318 	orr.w	r3, r3, #24
 8009fb0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fb8:	691b      	ldr	r3, [r3, #16]
 8009fba:	697a      	ldr	r2, [r7, #20]
 8009fbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fc0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009fc4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009fc6:	7afb      	ldrb	r3, [r7, #11]
 8009fc8:	2b01      	cmp	r3, #1
 8009fca:	d10f      	bne.n	8009fec <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	697a      	ldr	r2, [r7, #20]
 8009fe2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fe6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009fea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009fec:	2300      	movs	r3, #0
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	371c      	adds	r7, #28
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff8:	4770      	bx	lr
 8009ffa:	bf00      	nop
 8009ffc:	4f54300a 	.word	0x4f54300a

0800a000 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a000:	b480      	push	{r7}
 800a002:	b085      	sub	sp, #20
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a008:	2300      	movs	r3, #0
 800a00a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	3301      	adds	r3, #1
 800a010:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	4a13      	ldr	r2, [pc, #76]	; (800a064 <USB_CoreReset+0x64>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d901      	bls.n	800a01e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a01a:	2303      	movs	r3, #3
 800a01c:	e01b      	b.n	800a056 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	691b      	ldr	r3, [r3, #16]
 800a022:	2b00      	cmp	r3, #0
 800a024:	daf2      	bge.n	800a00c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a026:	2300      	movs	r3, #0
 800a028:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	691b      	ldr	r3, [r3, #16]
 800a02e:	f043 0201 	orr.w	r2, r3, #1
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	3301      	adds	r3, #1
 800a03a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	4a09      	ldr	r2, [pc, #36]	; (800a064 <USB_CoreReset+0x64>)
 800a040:	4293      	cmp	r3, r2
 800a042:	d901      	bls.n	800a048 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a044:	2303      	movs	r3, #3
 800a046:	e006      	b.n	800a056 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	691b      	ldr	r3, [r3, #16]
 800a04c:	f003 0301 	and.w	r3, r3, #1
 800a050:	2b01      	cmp	r3, #1
 800a052:	d0f0      	beq.n	800a036 <USB_CoreReset+0x36>

  return HAL_OK;
 800a054:	2300      	movs	r3, #0
}
 800a056:	4618      	mov	r0, r3
 800a058:	3714      	adds	r7, #20
 800a05a:	46bd      	mov	sp, r7
 800a05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a060:	4770      	bx	lr
 800a062:	bf00      	nop
 800a064:	00030d40 	.word	0x00030d40

0800a068 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b084      	sub	sp, #16
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	460b      	mov	r3, r1
 800a072:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a074:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a078:	f002 fce4 	bl	800ca44 <USBD_static_malloc>
 800a07c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d109      	bne.n	800a098 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	32b0      	adds	r2, #176	; 0xb0
 800a08e:	2100      	movs	r1, #0
 800a090:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a094:	2302      	movs	r3, #2
 800a096:	e0d4      	b.n	800a242 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a098:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800a09c:	2100      	movs	r1, #0
 800a09e:	68f8      	ldr	r0, [r7, #12]
 800a0a0:	f003 fb31 	bl	800d706 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	32b0      	adds	r2, #176	; 0xb0
 800a0ae:	68f9      	ldr	r1, [r7, #12]
 800a0b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	32b0      	adds	r2, #176	; 0xb0
 800a0be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	7c1b      	ldrb	r3, [r3, #16]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d138      	bne.n	800a142 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a0d0:	4b5e      	ldr	r3, [pc, #376]	; (800a24c <USBD_CDC_Init+0x1e4>)
 800a0d2:	7819      	ldrb	r1, [r3, #0]
 800a0d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a0d8:	2202      	movs	r2, #2
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f002 fb8f 	bl	800c7fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a0e0:	4b5a      	ldr	r3, [pc, #360]	; (800a24c <USBD_CDC_Init+0x1e4>)
 800a0e2:	781b      	ldrb	r3, [r3, #0]
 800a0e4:	f003 020f 	and.w	r2, r3, #15
 800a0e8:	6879      	ldr	r1, [r7, #4]
 800a0ea:	4613      	mov	r3, r2
 800a0ec:	009b      	lsls	r3, r3, #2
 800a0ee:	4413      	add	r3, r2
 800a0f0:	009b      	lsls	r3, r3, #2
 800a0f2:	440b      	add	r3, r1
 800a0f4:	3324      	adds	r3, #36	; 0x24
 800a0f6:	2201      	movs	r2, #1
 800a0f8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a0fa:	4b55      	ldr	r3, [pc, #340]	; (800a250 <USBD_CDC_Init+0x1e8>)
 800a0fc:	7819      	ldrb	r1, [r3, #0]
 800a0fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a102:	2202      	movs	r2, #2
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f002 fb7a 	bl	800c7fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a10a:	4b51      	ldr	r3, [pc, #324]	; (800a250 <USBD_CDC_Init+0x1e8>)
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	f003 020f 	and.w	r2, r3, #15
 800a112:	6879      	ldr	r1, [r7, #4]
 800a114:	4613      	mov	r3, r2
 800a116:	009b      	lsls	r3, r3, #2
 800a118:	4413      	add	r3, r2
 800a11a:	009b      	lsls	r3, r3, #2
 800a11c:	440b      	add	r3, r1
 800a11e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a122:	2201      	movs	r2, #1
 800a124:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a126:	4b4b      	ldr	r3, [pc, #300]	; (800a254 <USBD_CDC_Init+0x1ec>)
 800a128:	781b      	ldrb	r3, [r3, #0]
 800a12a:	f003 020f 	and.w	r2, r3, #15
 800a12e:	6879      	ldr	r1, [r7, #4]
 800a130:	4613      	mov	r3, r2
 800a132:	009b      	lsls	r3, r3, #2
 800a134:	4413      	add	r3, r2
 800a136:	009b      	lsls	r3, r3, #2
 800a138:	440b      	add	r3, r1
 800a13a:	3326      	adds	r3, #38	; 0x26
 800a13c:	2210      	movs	r2, #16
 800a13e:	801a      	strh	r2, [r3, #0]
 800a140:	e035      	b.n	800a1ae <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a142:	4b42      	ldr	r3, [pc, #264]	; (800a24c <USBD_CDC_Init+0x1e4>)
 800a144:	7819      	ldrb	r1, [r3, #0]
 800a146:	2340      	movs	r3, #64	; 0x40
 800a148:	2202      	movs	r2, #2
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f002 fb57 	bl	800c7fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a150:	4b3e      	ldr	r3, [pc, #248]	; (800a24c <USBD_CDC_Init+0x1e4>)
 800a152:	781b      	ldrb	r3, [r3, #0]
 800a154:	f003 020f 	and.w	r2, r3, #15
 800a158:	6879      	ldr	r1, [r7, #4]
 800a15a:	4613      	mov	r3, r2
 800a15c:	009b      	lsls	r3, r3, #2
 800a15e:	4413      	add	r3, r2
 800a160:	009b      	lsls	r3, r3, #2
 800a162:	440b      	add	r3, r1
 800a164:	3324      	adds	r3, #36	; 0x24
 800a166:	2201      	movs	r2, #1
 800a168:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a16a:	4b39      	ldr	r3, [pc, #228]	; (800a250 <USBD_CDC_Init+0x1e8>)
 800a16c:	7819      	ldrb	r1, [r3, #0]
 800a16e:	2340      	movs	r3, #64	; 0x40
 800a170:	2202      	movs	r2, #2
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f002 fb43 	bl	800c7fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a178:	4b35      	ldr	r3, [pc, #212]	; (800a250 <USBD_CDC_Init+0x1e8>)
 800a17a:	781b      	ldrb	r3, [r3, #0]
 800a17c:	f003 020f 	and.w	r2, r3, #15
 800a180:	6879      	ldr	r1, [r7, #4]
 800a182:	4613      	mov	r3, r2
 800a184:	009b      	lsls	r3, r3, #2
 800a186:	4413      	add	r3, r2
 800a188:	009b      	lsls	r3, r3, #2
 800a18a:	440b      	add	r3, r1
 800a18c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a190:	2201      	movs	r2, #1
 800a192:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a194:	4b2f      	ldr	r3, [pc, #188]	; (800a254 <USBD_CDC_Init+0x1ec>)
 800a196:	781b      	ldrb	r3, [r3, #0]
 800a198:	f003 020f 	and.w	r2, r3, #15
 800a19c:	6879      	ldr	r1, [r7, #4]
 800a19e:	4613      	mov	r3, r2
 800a1a0:	009b      	lsls	r3, r3, #2
 800a1a2:	4413      	add	r3, r2
 800a1a4:	009b      	lsls	r3, r3, #2
 800a1a6:	440b      	add	r3, r1
 800a1a8:	3326      	adds	r3, #38	; 0x26
 800a1aa:	2210      	movs	r2, #16
 800a1ac:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a1ae:	4b29      	ldr	r3, [pc, #164]	; (800a254 <USBD_CDC_Init+0x1ec>)
 800a1b0:	7819      	ldrb	r1, [r3, #0]
 800a1b2:	2308      	movs	r3, #8
 800a1b4:	2203      	movs	r2, #3
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f002 fb21 	bl	800c7fe <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a1bc:	4b25      	ldr	r3, [pc, #148]	; (800a254 <USBD_CDC_Init+0x1ec>)
 800a1be:	781b      	ldrb	r3, [r3, #0]
 800a1c0:	f003 020f 	and.w	r2, r3, #15
 800a1c4:	6879      	ldr	r1, [r7, #4]
 800a1c6:	4613      	mov	r3, r2
 800a1c8:	009b      	lsls	r3, r3, #2
 800a1ca:	4413      	add	r3, r2
 800a1cc:	009b      	lsls	r3, r3, #2
 800a1ce:	440b      	add	r3, r1
 800a1d0:	3324      	adds	r3, #36	; 0x24
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a1e4:	687a      	ldr	r2, [r7, #4]
 800a1e6:	33b0      	adds	r3, #176	; 0xb0
 800a1e8:	009b      	lsls	r3, r3, #2
 800a1ea:	4413      	add	r3, r2
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d101      	bne.n	800a210 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a20c:	2302      	movs	r3, #2
 800a20e:	e018      	b.n	800a242 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	7c1b      	ldrb	r3, [r3, #16]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d10a      	bne.n	800a22e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a218:	4b0d      	ldr	r3, [pc, #52]	; (800a250 <USBD_CDC_Init+0x1e8>)
 800a21a:	7819      	ldrb	r1, [r3, #0]
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a222:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f002 fbd8 	bl	800c9dc <USBD_LL_PrepareReceive>
 800a22c:	e008      	b.n	800a240 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a22e:	4b08      	ldr	r3, [pc, #32]	; (800a250 <USBD_CDC_Init+0x1e8>)
 800a230:	7819      	ldrb	r1, [r3, #0]
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a238:	2340      	movs	r3, #64	; 0x40
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f002 fbce 	bl	800c9dc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a240:	2300      	movs	r3, #0
}
 800a242:	4618      	mov	r0, r3
 800a244:	3710      	adds	r7, #16
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	240000d7 	.word	0x240000d7
 800a250:	240000d8 	.word	0x240000d8
 800a254:	240000d9 	.word	0x240000d9

0800a258 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b082      	sub	sp, #8
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	460b      	mov	r3, r1
 800a262:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a264:	4b3a      	ldr	r3, [pc, #232]	; (800a350 <USBD_CDC_DeInit+0xf8>)
 800a266:	781b      	ldrb	r3, [r3, #0]
 800a268:	4619      	mov	r1, r3
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f002 faed 	bl	800c84a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a270:	4b37      	ldr	r3, [pc, #220]	; (800a350 <USBD_CDC_DeInit+0xf8>)
 800a272:	781b      	ldrb	r3, [r3, #0]
 800a274:	f003 020f 	and.w	r2, r3, #15
 800a278:	6879      	ldr	r1, [r7, #4]
 800a27a:	4613      	mov	r3, r2
 800a27c:	009b      	lsls	r3, r3, #2
 800a27e:	4413      	add	r3, r2
 800a280:	009b      	lsls	r3, r3, #2
 800a282:	440b      	add	r3, r1
 800a284:	3324      	adds	r3, #36	; 0x24
 800a286:	2200      	movs	r2, #0
 800a288:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a28a:	4b32      	ldr	r3, [pc, #200]	; (800a354 <USBD_CDC_DeInit+0xfc>)
 800a28c:	781b      	ldrb	r3, [r3, #0]
 800a28e:	4619      	mov	r1, r3
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f002 fada 	bl	800c84a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a296:	4b2f      	ldr	r3, [pc, #188]	; (800a354 <USBD_CDC_DeInit+0xfc>)
 800a298:	781b      	ldrb	r3, [r3, #0]
 800a29a:	f003 020f 	and.w	r2, r3, #15
 800a29e:	6879      	ldr	r1, [r7, #4]
 800a2a0:	4613      	mov	r3, r2
 800a2a2:	009b      	lsls	r3, r3, #2
 800a2a4:	4413      	add	r3, r2
 800a2a6:	009b      	lsls	r3, r3, #2
 800a2a8:	440b      	add	r3, r1
 800a2aa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a2b2:	4b29      	ldr	r3, [pc, #164]	; (800a358 <USBD_CDC_DeInit+0x100>)
 800a2b4:	781b      	ldrb	r3, [r3, #0]
 800a2b6:	4619      	mov	r1, r3
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f002 fac6 	bl	800c84a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a2be:	4b26      	ldr	r3, [pc, #152]	; (800a358 <USBD_CDC_DeInit+0x100>)
 800a2c0:	781b      	ldrb	r3, [r3, #0]
 800a2c2:	f003 020f 	and.w	r2, r3, #15
 800a2c6:	6879      	ldr	r1, [r7, #4]
 800a2c8:	4613      	mov	r3, r2
 800a2ca:	009b      	lsls	r3, r3, #2
 800a2cc:	4413      	add	r3, r2
 800a2ce:	009b      	lsls	r3, r3, #2
 800a2d0:	440b      	add	r3, r1
 800a2d2:	3324      	adds	r3, #36	; 0x24
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a2d8:	4b1f      	ldr	r3, [pc, #124]	; (800a358 <USBD_CDC_DeInit+0x100>)
 800a2da:	781b      	ldrb	r3, [r3, #0]
 800a2dc:	f003 020f 	and.w	r2, r3, #15
 800a2e0:	6879      	ldr	r1, [r7, #4]
 800a2e2:	4613      	mov	r3, r2
 800a2e4:	009b      	lsls	r3, r3, #2
 800a2e6:	4413      	add	r3, r2
 800a2e8:	009b      	lsls	r3, r3, #2
 800a2ea:	440b      	add	r3, r1
 800a2ec:	3326      	adds	r3, #38	; 0x26
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	32b0      	adds	r2, #176	; 0xb0
 800a2fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d01f      	beq.n	800a344 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a30a:	687a      	ldr	r2, [r7, #4]
 800a30c:	33b0      	adds	r3, #176	; 0xb0
 800a30e:	009b      	lsls	r3, r3, #2
 800a310:	4413      	add	r3, r2
 800a312:	685b      	ldr	r3, [r3, #4]
 800a314:	685b      	ldr	r3, [r3, #4]
 800a316:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	32b0      	adds	r2, #176	; 0xb0
 800a322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a326:	4618      	mov	r0, r3
 800a328:	f002 fb9a 	bl	800ca60 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	32b0      	adds	r2, #176	; 0xb0
 800a336:	2100      	movs	r1, #0
 800a338:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2200      	movs	r2, #0
 800a340:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a344:	2300      	movs	r3, #0
}
 800a346:	4618      	mov	r0, r3
 800a348:	3708      	adds	r7, #8
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}
 800a34e:	bf00      	nop
 800a350:	240000d7 	.word	0x240000d7
 800a354:	240000d8 	.word	0x240000d8
 800a358:	240000d9 	.word	0x240000d9

0800a35c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b086      	sub	sp, #24
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
 800a364:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	32b0      	adds	r2, #176	; 0xb0
 800a370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a374:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a376:	2300      	movs	r3, #0
 800a378:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a37a:	2300      	movs	r3, #0
 800a37c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a37e:	2300      	movs	r3, #0
 800a380:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a382:	693b      	ldr	r3, [r7, #16]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d101      	bne.n	800a38c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a388:	2303      	movs	r3, #3
 800a38a:	e0bf      	b.n	800a50c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	781b      	ldrb	r3, [r3, #0]
 800a390:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a394:	2b00      	cmp	r3, #0
 800a396:	d050      	beq.n	800a43a <USBD_CDC_Setup+0xde>
 800a398:	2b20      	cmp	r3, #32
 800a39a:	f040 80af 	bne.w	800a4fc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	88db      	ldrh	r3, [r3, #6]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d03a      	beq.n	800a41c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	781b      	ldrb	r3, [r3, #0]
 800a3aa:	b25b      	sxtb	r3, r3
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	da1b      	bge.n	800a3e8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a3b6:	687a      	ldr	r2, [r7, #4]
 800a3b8:	33b0      	adds	r3, #176	; 0xb0
 800a3ba:	009b      	lsls	r3, r3, #2
 800a3bc:	4413      	add	r3, r2
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	689b      	ldr	r3, [r3, #8]
 800a3c2:	683a      	ldr	r2, [r7, #0]
 800a3c4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a3c6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a3c8:	683a      	ldr	r2, [r7, #0]
 800a3ca:	88d2      	ldrh	r2, [r2, #6]
 800a3cc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	88db      	ldrh	r3, [r3, #6]
 800a3d2:	2b07      	cmp	r3, #7
 800a3d4:	bf28      	it	cs
 800a3d6:	2307      	movcs	r3, #7
 800a3d8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	89fa      	ldrh	r2, [r7, #14]
 800a3de:	4619      	mov	r1, r3
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f001 fdb3 	bl	800bf4c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a3e6:	e090      	b.n	800a50a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	785a      	ldrb	r2, [r3, #1]
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	88db      	ldrh	r3, [r3, #6]
 800a3f6:	2b3f      	cmp	r3, #63	; 0x3f
 800a3f8:	d803      	bhi.n	800a402 <USBD_CDC_Setup+0xa6>
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	88db      	ldrh	r3, [r3, #6]
 800a3fe:	b2da      	uxtb	r2, r3
 800a400:	e000      	b.n	800a404 <USBD_CDC_Setup+0xa8>
 800a402:	2240      	movs	r2, #64	; 0x40
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a40a:	6939      	ldr	r1, [r7, #16]
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a412:	461a      	mov	r2, r3
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f001 fdc5 	bl	800bfa4 <USBD_CtlPrepareRx>
      break;
 800a41a:	e076      	b.n	800a50a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a422:	687a      	ldr	r2, [r7, #4]
 800a424:	33b0      	adds	r3, #176	; 0xb0
 800a426:	009b      	lsls	r3, r3, #2
 800a428:	4413      	add	r3, r2
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	689b      	ldr	r3, [r3, #8]
 800a42e:	683a      	ldr	r2, [r7, #0]
 800a430:	7850      	ldrb	r0, [r2, #1]
 800a432:	2200      	movs	r2, #0
 800a434:	6839      	ldr	r1, [r7, #0]
 800a436:	4798      	blx	r3
      break;
 800a438:	e067      	b.n	800a50a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	785b      	ldrb	r3, [r3, #1]
 800a43e:	2b0b      	cmp	r3, #11
 800a440:	d851      	bhi.n	800a4e6 <USBD_CDC_Setup+0x18a>
 800a442:	a201      	add	r2, pc, #4	; (adr r2, 800a448 <USBD_CDC_Setup+0xec>)
 800a444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a448:	0800a479 	.word	0x0800a479
 800a44c:	0800a4f5 	.word	0x0800a4f5
 800a450:	0800a4e7 	.word	0x0800a4e7
 800a454:	0800a4e7 	.word	0x0800a4e7
 800a458:	0800a4e7 	.word	0x0800a4e7
 800a45c:	0800a4e7 	.word	0x0800a4e7
 800a460:	0800a4e7 	.word	0x0800a4e7
 800a464:	0800a4e7 	.word	0x0800a4e7
 800a468:	0800a4e7 	.word	0x0800a4e7
 800a46c:	0800a4e7 	.word	0x0800a4e7
 800a470:	0800a4a3 	.word	0x0800a4a3
 800a474:	0800a4cd 	.word	0x0800a4cd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a47e:	b2db      	uxtb	r3, r3
 800a480:	2b03      	cmp	r3, #3
 800a482:	d107      	bne.n	800a494 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a484:	f107 030a 	add.w	r3, r7, #10
 800a488:	2202      	movs	r2, #2
 800a48a:	4619      	mov	r1, r3
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f001 fd5d 	bl	800bf4c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a492:	e032      	b.n	800a4fa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a494:	6839      	ldr	r1, [r7, #0]
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f001 fce7 	bl	800be6a <USBD_CtlError>
            ret = USBD_FAIL;
 800a49c:	2303      	movs	r3, #3
 800a49e:	75fb      	strb	r3, [r7, #23]
          break;
 800a4a0:	e02b      	b.n	800a4fa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4a8:	b2db      	uxtb	r3, r3
 800a4aa:	2b03      	cmp	r3, #3
 800a4ac:	d107      	bne.n	800a4be <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a4ae:	f107 030d 	add.w	r3, r7, #13
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	4619      	mov	r1, r3
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f001 fd48 	bl	800bf4c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a4bc:	e01d      	b.n	800a4fa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a4be:	6839      	ldr	r1, [r7, #0]
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f001 fcd2 	bl	800be6a <USBD_CtlError>
            ret = USBD_FAIL;
 800a4c6:	2303      	movs	r3, #3
 800a4c8:	75fb      	strb	r3, [r7, #23]
          break;
 800a4ca:	e016      	b.n	800a4fa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4d2:	b2db      	uxtb	r3, r3
 800a4d4:	2b03      	cmp	r3, #3
 800a4d6:	d00f      	beq.n	800a4f8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a4d8:	6839      	ldr	r1, [r7, #0]
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f001 fcc5 	bl	800be6a <USBD_CtlError>
            ret = USBD_FAIL;
 800a4e0:	2303      	movs	r3, #3
 800a4e2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a4e4:	e008      	b.n	800a4f8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a4e6:	6839      	ldr	r1, [r7, #0]
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f001 fcbe 	bl	800be6a <USBD_CtlError>
          ret = USBD_FAIL;
 800a4ee:	2303      	movs	r3, #3
 800a4f0:	75fb      	strb	r3, [r7, #23]
          break;
 800a4f2:	e002      	b.n	800a4fa <USBD_CDC_Setup+0x19e>
          break;
 800a4f4:	bf00      	nop
 800a4f6:	e008      	b.n	800a50a <USBD_CDC_Setup+0x1ae>
          break;
 800a4f8:	bf00      	nop
      }
      break;
 800a4fa:	e006      	b.n	800a50a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a4fc:	6839      	ldr	r1, [r7, #0]
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f001 fcb3 	bl	800be6a <USBD_CtlError>
      ret = USBD_FAIL;
 800a504:	2303      	movs	r3, #3
 800a506:	75fb      	strb	r3, [r7, #23]
      break;
 800a508:	bf00      	nop
  }

  return (uint8_t)ret;
 800a50a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	3718      	adds	r7, #24
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}

0800a514 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b084      	sub	sp, #16
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
 800a51c:	460b      	mov	r3, r1
 800a51e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a526:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	32b0      	adds	r2, #176	; 0xb0
 800a532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d101      	bne.n	800a53e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a53a:	2303      	movs	r3, #3
 800a53c:	e065      	b.n	800a60a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	32b0      	adds	r2, #176	; 0xb0
 800a548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a54c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a54e:	78fb      	ldrb	r3, [r7, #3]
 800a550:	f003 020f 	and.w	r2, r3, #15
 800a554:	6879      	ldr	r1, [r7, #4]
 800a556:	4613      	mov	r3, r2
 800a558:	009b      	lsls	r3, r3, #2
 800a55a:	4413      	add	r3, r2
 800a55c:	009b      	lsls	r3, r3, #2
 800a55e:	440b      	add	r3, r1
 800a560:	3318      	adds	r3, #24
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d02f      	beq.n	800a5c8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a568:	78fb      	ldrb	r3, [r7, #3]
 800a56a:	f003 020f 	and.w	r2, r3, #15
 800a56e:	6879      	ldr	r1, [r7, #4]
 800a570:	4613      	mov	r3, r2
 800a572:	009b      	lsls	r3, r3, #2
 800a574:	4413      	add	r3, r2
 800a576:	009b      	lsls	r3, r3, #2
 800a578:	440b      	add	r3, r1
 800a57a:	3318      	adds	r3, #24
 800a57c:	681a      	ldr	r2, [r3, #0]
 800a57e:	78fb      	ldrb	r3, [r7, #3]
 800a580:	f003 010f 	and.w	r1, r3, #15
 800a584:	68f8      	ldr	r0, [r7, #12]
 800a586:	460b      	mov	r3, r1
 800a588:	00db      	lsls	r3, r3, #3
 800a58a:	440b      	add	r3, r1
 800a58c:	009b      	lsls	r3, r3, #2
 800a58e:	4403      	add	r3, r0
 800a590:	3344      	adds	r3, #68	; 0x44
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	fbb2 f1f3 	udiv	r1, r2, r3
 800a598:	fb01 f303 	mul.w	r3, r1, r3
 800a59c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d112      	bne.n	800a5c8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a5a2:	78fb      	ldrb	r3, [r7, #3]
 800a5a4:	f003 020f 	and.w	r2, r3, #15
 800a5a8:	6879      	ldr	r1, [r7, #4]
 800a5aa:	4613      	mov	r3, r2
 800a5ac:	009b      	lsls	r3, r3, #2
 800a5ae:	4413      	add	r3, r2
 800a5b0:	009b      	lsls	r3, r3, #2
 800a5b2:	440b      	add	r3, r1
 800a5b4:	3318      	adds	r3, #24
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a5ba:	78f9      	ldrb	r1, [r7, #3]
 800a5bc:	2300      	movs	r3, #0
 800a5be:	2200      	movs	r2, #0
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f002 f9ea 	bl	800c99a <USBD_LL_Transmit>
 800a5c6:	e01f      	b.n	800a608 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a5d6:	687a      	ldr	r2, [r7, #4]
 800a5d8:	33b0      	adds	r3, #176	; 0xb0
 800a5da:	009b      	lsls	r3, r3, #2
 800a5dc:	4413      	add	r3, r2
 800a5de:	685b      	ldr	r3, [r3, #4]
 800a5e0:	691b      	ldr	r3, [r3, #16]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d010      	beq.n	800a608 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a5ec:	687a      	ldr	r2, [r7, #4]
 800a5ee:	33b0      	adds	r3, #176	; 0xb0
 800a5f0:	009b      	lsls	r3, r3, #2
 800a5f2:	4413      	add	r3, r2
 800a5f4:	685b      	ldr	r3, [r3, #4]
 800a5f6:	691b      	ldr	r3, [r3, #16]
 800a5f8:	68ba      	ldr	r2, [r7, #8]
 800a5fa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a5fe:	68ba      	ldr	r2, [r7, #8]
 800a600:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a604:	78fa      	ldrb	r2, [r7, #3]
 800a606:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a608:	2300      	movs	r3, #0
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3710      	adds	r7, #16
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}

0800a612 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a612:	b580      	push	{r7, lr}
 800a614:	b084      	sub	sp, #16
 800a616:	af00      	add	r7, sp, #0
 800a618:	6078      	str	r0, [r7, #4]
 800a61a:	460b      	mov	r3, r1
 800a61c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	32b0      	adds	r2, #176	; 0xb0
 800a628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a62c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	32b0      	adds	r2, #176	; 0xb0
 800a638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d101      	bne.n	800a644 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a640:	2303      	movs	r3, #3
 800a642:	e01a      	b.n	800a67a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a644:	78fb      	ldrb	r3, [r7, #3]
 800a646:	4619      	mov	r1, r3
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f002 f9e8 	bl	800ca1e <USBD_LL_GetRxDataSize>
 800a64e:	4602      	mov	r2, r0
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a65c:	687a      	ldr	r2, [r7, #4]
 800a65e:	33b0      	adds	r3, #176	; 0xb0
 800a660:	009b      	lsls	r3, r3, #2
 800a662:	4413      	add	r3, r2
 800a664:	685b      	ldr	r3, [r3, #4]
 800a666:	68db      	ldr	r3, [r3, #12]
 800a668:	68fa      	ldr	r2, [r7, #12]
 800a66a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a66e:	68fa      	ldr	r2, [r7, #12]
 800a670:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a674:	4611      	mov	r1, r2
 800a676:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a678:	2300      	movs	r3, #0
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3710      	adds	r7, #16
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}

0800a682 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a682:	b580      	push	{r7, lr}
 800a684:	b084      	sub	sp, #16
 800a686:	af00      	add	r7, sp, #0
 800a688:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	32b0      	adds	r2, #176	; 0xb0
 800a694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a698:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d101      	bne.n	800a6a4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a6a0:	2303      	movs	r3, #3
 800a6a2:	e025      	b.n	800a6f0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a6aa:	687a      	ldr	r2, [r7, #4]
 800a6ac:	33b0      	adds	r3, #176	; 0xb0
 800a6ae:	009b      	lsls	r3, r3, #2
 800a6b0:	4413      	add	r3, r2
 800a6b2:	685b      	ldr	r3, [r3, #4]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d01a      	beq.n	800a6ee <USBD_CDC_EP0_RxReady+0x6c>
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a6be:	2bff      	cmp	r3, #255	; 0xff
 800a6c0:	d015      	beq.n	800a6ee <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a6c8:	687a      	ldr	r2, [r7, #4]
 800a6ca:	33b0      	adds	r3, #176	; 0xb0
 800a6cc:	009b      	lsls	r3, r3, #2
 800a6ce:	4413      	add	r3, r2
 800a6d0:	685b      	ldr	r3, [r3, #4]
 800a6d2:	689b      	ldr	r3, [r3, #8]
 800a6d4:	68fa      	ldr	r2, [r7, #12]
 800a6d6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a6da:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a6dc:	68fa      	ldr	r2, [r7, #12]
 800a6de:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a6e2:	b292      	uxth	r2, r2
 800a6e4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	22ff      	movs	r2, #255	; 0xff
 800a6ea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a6ee:	2300      	movs	r3, #0
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3710      	adds	r7, #16
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}

0800a6f8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b086      	sub	sp, #24
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a700:	2182      	movs	r1, #130	; 0x82
 800a702:	4818      	ldr	r0, [pc, #96]	; (800a764 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a704:	f000 fd4f 	bl	800b1a6 <USBD_GetEpDesc>
 800a708:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a70a:	2101      	movs	r1, #1
 800a70c:	4815      	ldr	r0, [pc, #84]	; (800a764 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a70e:	f000 fd4a 	bl	800b1a6 <USBD_GetEpDesc>
 800a712:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a714:	2181      	movs	r1, #129	; 0x81
 800a716:	4813      	ldr	r0, [pc, #76]	; (800a764 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a718:	f000 fd45 	bl	800b1a6 <USBD_GetEpDesc>
 800a71c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d002      	beq.n	800a72a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	2210      	movs	r2, #16
 800a728:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d006      	beq.n	800a73e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	2200      	movs	r2, #0
 800a734:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a738:	711a      	strb	r2, [r3, #4]
 800a73a:	2200      	movs	r2, #0
 800a73c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d006      	beq.n	800a752 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	2200      	movs	r2, #0
 800a748:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a74c:	711a      	strb	r2, [r3, #4]
 800a74e:	2200      	movs	r2, #0
 800a750:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2243      	movs	r2, #67	; 0x43
 800a756:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a758:	4b02      	ldr	r3, [pc, #8]	; (800a764 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3718      	adds	r7, #24
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}
 800a762:	bf00      	nop
 800a764:	24000094 	.word	0x24000094

0800a768 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b086      	sub	sp, #24
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a770:	2182      	movs	r1, #130	; 0x82
 800a772:	4818      	ldr	r0, [pc, #96]	; (800a7d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a774:	f000 fd17 	bl	800b1a6 <USBD_GetEpDesc>
 800a778:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a77a:	2101      	movs	r1, #1
 800a77c:	4815      	ldr	r0, [pc, #84]	; (800a7d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a77e:	f000 fd12 	bl	800b1a6 <USBD_GetEpDesc>
 800a782:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a784:	2181      	movs	r1, #129	; 0x81
 800a786:	4813      	ldr	r0, [pc, #76]	; (800a7d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a788:	f000 fd0d 	bl	800b1a6 <USBD_GetEpDesc>
 800a78c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d002      	beq.n	800a79a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	2210      	movs	r2, #16
 800a798:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d006      	beq.n	800a7ae <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	711a      	strb	r2, [r3, #4]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	f042 0202 	orr.w	r2, r2, #2
 800a7ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d006      	beq.n	800a7c2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	711a      	strb	r2, [r3, #4]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	f042 0202 	orr.w	r2, r2, #2
 800a7c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2243      	movs	r2, #67	; 0x43
 800a7c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a7c8:	4b02      	ldr	r3, [pc, #8]	; (800a7d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3718      	adds	r7, #24
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}
 800a7d2:	bf00      	nop
 800a7d4:	24000094 	.word	0x24000094

0800a7d8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b086      	sub	sp, #24
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a7e0:	2182      	movs	r1, #130	; 0x82
 800a7e2:	4818      	ldr	r0, [pc, #96]	; (800a844 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a7e4:	f000 fcdf 	bl	800b1a6 <USBD_GetEpDesc>
 800a7e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a7ea:	2101      	movs	r1, #1
 800a7ec:	4815      	ldr	r0, [pc, #84]	; (800a844 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a7ee:	f000 fcda 	bl	800b1a6 <USBD_GetEpDesc>
 800a7f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a7f4:	2181      	movs	r1, #129	; 0x81
 800a7f6:	4813      	ldr	r0, [pc, #76]	; (800a844 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a7f8:	f000 fcd5 	bl	800b1a6 <USBD_GetEpDesc>
 800a7fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d002      	beq.n	800a80a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	2210      	movs	r2, #16
 800a808:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d006      	beq.n	800a81e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	2200      	movs	r2, #0
 800a814:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a818:	711a      	strb	r2, [r3, #4]
 800a81a:	2200      	movs	r2, #0
 800a81c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d006      	beq.n	800a832 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	2200      	movs	r2, #0
 800a828:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a82c:	711a      	strb	r2, [r3, #4]
 800a82e:	2200      	movs	r2, #0
 800a830:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2243      	movs	r2, #67	; 0x43
 800a836:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a838:	4b02      	ldr	r3, [pc, #8]	; (800a844 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3718      	adds	r7, #24
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}
 800a842:	bf00      	nop
 800a844:	24000094 	.word	0x24000094

0800a848 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a848:	b480      	push	{r7}
 800a84a:	b083      	sub	sp, #12
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	220a      	movs	r2, #10
 800a854:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a856:	4b03      	ldr	r3, [pc, #12]	; (800a864 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a858:	4618      	mov	r0, r3
 800a85a:	370c      	adds	r7, #12
 800a85c:	46bd      	mov	sp, r7
 800a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a862:	4770      	bx	lr
 800a864:	24000050 	.word	0x24000050

0800a868 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a868:	b480      	push	{r7}
 800a86a:	b083      	sub	sp, #12
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
 800a870:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d101      	bne.n	800a87c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a878:	2303      	movs	r3, #3
 800a87a:	e009      	b.n	800a890 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a882:	687a      	ldr	r2, [r7, #4]
 800a884:	33b0      	adds	r3, #176	; 0xb0
 800a886:	009b      	lsls	r3, r3, #2
 800a888:	4413      	add	r3, r2
 800a88a:	683a      	ldr	r2, [r7, #0]
 800a88c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a88e:	2300      	movs	r3, #0
}
 800a890:	4618      	mov	r0, r3
 800a892:	370c      	adds	r7, #12
 800a894:	46bd      	mov	sp, r7
 800a896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89a:	4770      	bx	lr

0800a89c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a89c:	b480      	push	{r7}
 800a89e:	b087      	sub	sp, #28
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	60f8      	str	r0, [r7, #12]
 800a8a4:	60b9      	str	r1, [r7, #8]
 800a8a6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	32b0      	adds	r2, #176	; 0xb0
 800a8b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8b6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d101      	bne.n	800a8c2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a8be:	2303      	movs	r3, #3
 800a8c0:	e008      	b.n	800a8d4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	68ba      	ldr	r2, [r7, #8]
 800a8c6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a8d2:	2300      	movs	r3, #0
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	371c      	adds	r7, #28
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8de:	4770      	bx	lr

0800a8e0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b085      	sub	sp, #20
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
 800a8e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	32b0      	adds	r2, #176	; 0xb0
 800a8f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8f8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d101      	bne.n	800a904 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a900:	2303      	movs	r3, #3
 800a902:	e004      	b.n	800a90e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	683a      	ldr	r2, [r7, #0]
 800a908:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a90c:	2300      	movs	r3, #0
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3714      	adds	r7, #20
 800a912:	46bd      	mov	sp, r7
 800a914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a918:	4770      	bx	lr
	...

0800a91c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b084      	sub	sp, #16
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	32b0      	adds	r2, #176	; 0xb0
 800a92e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a932:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a934:	2301      	movs	r3, #1
 800a936:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d101      	bne.n	800a942 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a93e:	2303      	movs	r3, #3
 800a940:	e025      	b.n	800a98e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d11f      	bne.n	800a98c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	2201      	movs	r2, #1
 800a950:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a954:	4b10      	ldr	r3, [pc, #64]	; (800a998 <USBD_CDC_TransmitPacket+0x7c>)
 800a956:	781b      	ldrb	r3, [r3, #0]
 800a958:	f003 020f 	and.w	r2, r3, #15
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	4613      	mov	r3, r2
 800a966:	009b      	lsls	r3, r3, #2
 800a968:	4413      	add	r3, r2
 800a96a:	009b      	lsls	r3, r3, #2
 800a96c:	4403      	add	r3, r0
 800a96e:	3318      	adds	r3, #24
 800a970:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a972:	4b09      	ldr	r3, [pc, #36]	; (800a998 <USBD_CDC_TransmitPacket+0x7c>)
 800a974:	7819      	ldrb	r1, [r3, #0]
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f002 f809 	bl	800c99a <USBD_LL_Transmit>

    ret = USBD_OK;
 800a988:	2300      	movs	r3, #0
 800a98a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a98c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a98e:	4618      	mov	r0, r3
 800a990:	3710      	adds	r7, #16
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}
 800a996:	bf00      	nop
 800a998:	240000d7 	.word	0x240000d7

0800a99c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b084      	sub	sp, #16
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	32b0      	adds	r2, #176	; 0xb0
 800a9ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9b2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	32b0      	adds	r2, #176	; 0xb0
 800a9be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d101      	bne.n	800a9ca <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a9c6:	2303      	movs	r3, #3
 800a9c8:	e018      	b.n	800a9fc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	7c1b      	ldrb	r3, [r3, #16]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d10a      	bne.n	800a9e8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a9d2:	4b0c      	ldr	r3, [pc, #48]	; (800aa04 <USBD_CDC_ReceivePacket+0x68>)
 800a9d4:	7819      	ldrb	r1, [r3, #0]
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a9dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f001 fffb 	bl	800c9dc <USBD_LL_PrepareReceive>
 800a9e6:	e008      	b.n	800a9fa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a9e8:	4b06      	ldr	r3, [pc, #24]	; (800aa04 <USBD_CDC_ReceivePacket+0x68>)
 800a9ea:	7819      	ldrb	r1, [r3, #0]
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a9f2:	2340      	movs	r3, #64	; 0x40
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f001 fff1 	bl	800c9dc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a9fa:	2300      	movs	r3, #0
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3710      	adds	r7, #16
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}
 800aa04:	240000d8 	.word	0x240000d8

0800aa08 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b086      	sub	sp, #24
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	60f8      	str	r0, [r7, #12]
 800aa10:	60b9      	str	r1, [r7, #8]
 800aa12:	4613      	mov	r3, r2
 800aa14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d101      	bne.n	800aa20 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800aa1c:	2303      	movs	r3, #3
 800aa1e:	e01f      	b.n	800aa60 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	2200      	movs	r2, #0
 800aa24:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	2200      	movs	r2, #0
 800aa34:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d003      	beq.n	800aa46 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	68ba      	ldr	r2, [r7, #8]
 800aa42:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	2201      	movs	r2, #1
 800aa4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	79fa      	ldrb	r2, [r7, #7]
 800aa52:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800aa54:	68f8      	ldr	r0, [r7, #12]
 800aa56:	f001 fe67 	bl	800c728 <USBD_LL_Init>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800aa5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3718      	adds	r7, #24
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}

0800aa68 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b084      	sub	sp, #16
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aa72:	2300      	movs	r3, #0
 800aa74:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d101      	bne.n	800aa80 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800aa7c:	2303      	movs	r3, #3
 800aa7e:	e025      	b.n	800aacc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	683a      	ldr	r2, [r7, #0]
 800aa84:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	32ae      	adds	r2, #174	; 0xae
 800aa92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d00f      	beq.n	800aabc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	32ae      	adds	r2, #174	; 0xae
 800aaa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaac:	f107 020e 	add.w	r2, r7, #14
 800aab0:	4610      	mov	r0, r2
 800aab2:	4798      	blx	r3
 800aab4:	4602      	mov	r2, r0
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800aac2:	1c5a      	adds	r2, r3, #1
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800aaca:	2300      	movs	r3, #0
}
 800aacc:	4618      	mov	r0, r3
 800aace:	3710      	adds	r7, #16
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}

0800aad4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b082      	sub	sp, #8
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f001 fe73 	bl	800c7c8 <USBD_LL_Start>
 800aae2:	4603      	mov	r3, r0
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	3708      	adds	r7, #8
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}

0800aaec <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b083      	sub	sp, #12
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aaf4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	370c      	adds	r7, #12
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr

0800ab02 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab02:	b580      	push	{r7, lr}
 800ab04:	b084      	sub	sp, #16
 800ab06:	af00      	add	r7, sp, #0
 800ab08:	6078      	str	r0, [r7, #4]
 800ab0a:	460b      	mov	r3, r1
 800ab0c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d009      	beq.n	800ab30 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	78fa      	ldrb	r2, [r7, #3]
 800ab26:	4611      	mov	r1, r2
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	4798      	blx	r3
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ab30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3710      	adds	r7, #16
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}

0800ab3a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab3a:	b580      	push	{r7, lr}
 800ab3c:	b084      	sub	sp, #16
 800ab3e:	af00      	add	r7, sp, #0
 800ab40:	6078      	str	r0, [r7, #4]
 800ab42:	460b      	mov	r3, r1
 800ab44:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab46:	2300      	movs	r3, #0
 800ab48:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab50:	685b      	ldr	r3, [r3, #4]
 800ab52:	78fa      	ldrb	r2, [r7, #3]
 800ab54:	4611      	mov	r1, r2
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	4798      	blx	r3
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d001      	beq.n	800ab64 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ab60:	2303      	movs	r3, #3
 800ab62:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ab64:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab66:	4618      	mov	r0, r3
 800ab68:	3710      	adds	r7, #16
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}

0800ab6e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ab6e:	b580      	push	{r7, lr}
 800ab70:	b084      	sub	sp, #16
 800ab72:	af00      	add	r7, sp, #0
 800ab74:	6078      	str	r0, [r7, #4]
 800ab76:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ab7e:	6839      	ldr	r1, [r7, #0]
 800ab80:	4618      	mov	r0, r3
 800ab82:	f001 f938 	bl	800bdf6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2201      	movs	r2, #1
 800ab8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ab94:	461a      	mov	r2, r3
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800aba2:	f003 031f 	and.w	r3, r3, #31
 800aba6:	2b02      	cmp	r3, #2
 800aba8:	d01a      	beq.n	800abe0 <USBD_LL_SetupStage+0x72>
 800abaa:	2b02      	cmp	r3, #2
 800abac:	d822      	bhi.n	800abf4 <USBD_LL_SetupStage+0x86>
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d002      	beq.n	800abb8 <USBD_LL_SetupStage+0x4a>
 800abb2:	2b01      	cmp	r3, #1
 800abb4:	d00a      	beq.n	800abcc <USBD_LL_SetupStage+0x5e>
 800abb6:	e01d      	b.n	800abf4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800abbe:	4619      	mov	r1, r3
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	f000 fb65 	bl	800b290 <USBD_StdDevReq>
 800abc6:	4603      	mov	r3, r0
 800abc8:	73fb      	strb	r3, [r7, #15]
      break;
 800abca:	e020      	b.n	800ac0e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800abd2:	4619      	mov	r1, r3
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f000 fbcd 	bl	800b374 <USBD_StdItfReq>
 800abda:	4603      	mov	r3, r0
 800abdc:	73fb      	strb	r3, [r7, #15]
      break;
 800abde:	e016      	b.n	800ac0e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800abe6:	4619      	mov	r1, r3
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f000 fc2f 	bl	800b44c <USBD_StdEPReq>
 800abee:	4603      	mov	r3, r0
 800abf0:	73fb      	strb	r3, [r7, #15]
      break;
 800abf2:	e00c      	b.n	800ac0e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800abfa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800abfe:	b2db      	uxtb	r3, r3
 800ac00:	4619      	mov	r1, r3
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	f001 fe40 	bl	800c888 <USBD_LL_StallEP>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	73fb      	strb	r3, [r7, #15]
      break;
 800ac0c:	bf00      	nop
  }

  return ret;
 800ac0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	3710      	adds	r7, #16
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}

0800ac18 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b086      	sub	sp, #24
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	60f8      	str	r0, [r7, #12]
 800ac20:	460b      	mov	r3, r1
 800ac22:	607a      	str	r2, [r7, #4]
 800ac24:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ac26:	2300      	movs	r3, #0
 800ac28:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ac2a:	7afb      	ldrb	r3, [r7, #11]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d16e      	bne.n	800ad0e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ac36:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ac3e:	2b03      	cmp	r3, #3
 800ac40:	f040 8098 	bne.w	800ad74 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ac44:	693b      	ldr	r3, [r7, #16]
 800ac46:	689a      	ldr	r2, [r3, #8]
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	68db      	ldr	r3, [r3, #12]
 800ac4c:	429a      	cmp	r2, r3
 800ac4e:	d913      	bls.n	800ac78 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	689a      	ldr	r2, [r3, #8]
 800ac54:	693b      	ldr	r3, [r7, #16]
 800ac56:	68db      	ldr	r3, [r3, #12]
 800ac58:	1ad2      	subs	r2, r2, r3
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	68da      	ldr	r2, [r3, #12]
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	689b      	ldr	r3, [r3, #8]
 800ac66:	4293      	cmp	r3, r2
 800ac68:	bf28      	it	cs
 800ac6a:	4613      	movcs	r3, r2
 800ac6c:	461a      	mov	r2, r3
 800ac6e:	6879      	ldr	r1, [r7, #4]
 800ac70:	68f8      	ldr	r0, [r7, #12]
 800ac72:	f001 f9b4 	bl	800bfde <USBD_CtlContinueRx>
 800ac76:	e07d      	b.n	800ad74 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ac7e:	f003 031f 	and.w	r3, r3, #31
 800ac82:	2b02      	cmp	r3, #2
 800ac84:	d014      	beq.n	800acb0 <USBD_LL_DataOutStage+0x98>
 800ac86:	2b02      	cmp	r3, #2
 800ac88:	d81d      	bhi.n	800acc6 <USBD_LL_DataOutStage+0xae>
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d002      	beq.n	800ac94 <USBD_LL_DataOutStage+0x7c>
 800ac8e:	2b01      	cmp	r3, #1
 800ac90:	d003      	beq.n	800ac9a <USBD_LL_DataOutStage+0x82>
 800ac92:	e018      	b.n	800acc6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ac94:	2300      	movs	r3, #0
 800ac96:	75bb      	strb	r3, [r7, #22]
            break;
 800ac98:	e018      	b.n	800accc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800aca0:	b2db      	uxtb	r3, r3
 800aca2:	4619      	mov	r1, r3
 800aca4:	68f8      	ldr	r0, [r7, #12]
 800aca6:	f000 fa64 	bl	800b172 <USBD_CoreFindIF>
 800acaa:	4603      	mov	r3, r0
 800acac:	75bb      	strb	r3, [r7, #22]
            break;
 800acae:	e00d      	b.n	800accc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800acb6:	b2db      	uxtb	r3, r3
 800acb8:	4619      	mov	r1, r3
 800acba:	68f8      	ldr	r0, [r7, #12]
 800acbc:	f000 fa66 	bl	800b18c <USBD_CoreFindEP>
 800acc0:	4603      	mov	r3, r0
 800acc2:	75bb      	strb	r3, [r7, #22]
            break;
 800acc4:	e002      	b.n	800accc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800acc6:	2300      	movs	r3, #0
 800acc8:	75bb      	strb	r3, [r7, #22]
            break;
 800acca:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800accc:	7dbb      	ldrb	r3, [r7, #22]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d119      	bne.n	800ad06 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acd8:	b2db      	uxtb	r3, r3
 800acda:	2b03      	cmp	r3, #3
 800acdc:	d113      	bne.n	800ad06 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800acde:	7dba      	ldrb	r2, [r7, #22]
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	32ae      	adds	r2, #174	; 0xae
 800ace4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ace8:	691b      	ldr	r3, [r3, #16]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d00b      	beq.n	800ad06 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800acee:	7dba      	ldrb	r2, [r7, #22]
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800acf6:	7dba      	ldrb	r2, [r7, #22]
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	32ae      	adds	r2, #174	; 0xae
 800acfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad00:	691b      	ldr	r3, [r3, #16]
 800ad02:	68f8      	ldr	r0, [r7, #12]
 800ad04:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ad06:	68f8      	ldr	r0, [r7, #12]
 800ad08:	f001 f97a 	bl	800c000 <USBD_CtlSendStatus>
 800ad0c:	e032      	b.n	800ad74 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ad0e:	7afb      	ldrb	r3, [r7, #11]
 800ad10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad14:	b2db      	uxtb	r3, r3
 800ad16:	4619      	mov	r1, r3
 800ad18:	68f8      	ldr	r0, [r7, #12]
 800ad1a:	f000 fa37 	bl	800b18c <USBD_CoreFindEP>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ad22:	7dbb      	ldrb	r3, [r7, #22]
 800ad24:	2bff      	cmp	r3, #255	; 0xff
 800ad26:	d025      	beq.n	800ad74 <USBD_LL_DataOutStage+0x15c>
 800ad28:	7dbb      	ldrb	r3, [r7, #22]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d122      	bne.n	800ad74 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad34:	b2db      	uxtb	r3, r3
 800ad36:	2b03      	cmp	r3, #3
 800ad38:	d117      	bne.n	800ad6a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ad3a:	7dba      	ldrb	r2, [r7, #22]
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	32ae      	adds	r2, #174	; 0xae
 800ad40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad44:	699b      	ldr	r3, [r3, #24]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d00f      	beq.n	800ad6a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ad4a:	7dba      	ldrb	r2, [r7, #22]
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ad52:	7dba      	ldrb	r2, [r7, #22]
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	32ae      	adds	r2, #174	; 0xae
 800ad58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad5c:	699b      	ldr	r3, [r3, #24]
 800ad5e:	7afa      	ldrb	r2, [r7, #11]
 800ad60:	4611      	mov	r1, r2
 800ad62:	68f8      	ldr	r0, [r7, #12]
 800ad64:	4798      	blx	r3
 800ad66:	4603      	mov	r3, r0
 800ad68:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ad6a:	7dfb      	ldrb	r3, [r7, #23]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d001      	beq.n	800ad74 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ad70:	7dfb      	ldrb	r3, [r7, #23]
 800ad72:	e000      	b.n	800ad76 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ad74:	2300      	movs	r3, #0
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3718      	adds	r7, #24
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}

0800ad7e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ad7e:	b580      	push	{r7, lr}
 800ad80:	b086      	sub	sp, #24
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	60f8      	str	r0, [r7, #12]
 800ad86:	460b      	mov	r3, r1
 800ad88:	607a      	str	r2, [r7, #4]
 800ad8a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ad8c:	7afb      	ldrb	r3, [r7, #11]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d16f      	bne.n	800ae72 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	3314      	adds	r3, #20
 800ad96:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ad9e:	2b02      	cmp	r3, #2
 800ada0:	d15a      	bne.n	800ae58 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	689a      	ldr	r2, [r3, #8]
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	68db      	ldr	r3, [r3, #12]
 800adaa:	429a      	cmp	r2, r3
 800adac:	d914      	bls.n	800add8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	689a      	ldr	r2, [r3, #8]
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	68db      	ldr	r3, [r3, #12]
 800adb6:	1ad2      	subs	r2, r2, r3
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	689b      	ldr	r3, [r3, #8]
 800adc0:	461a      	mov	r2, r3
 800adc2:	6879      	ldr	r1, [r7, #4]
 800adc4:	68f8      	ldr	r0, [r7, #12]
 800adc6:	f001 f8dc 	bl	800bf82 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800adca:	2300      	movs	r3, #0
 800adcc:	2200      	movs	r2, #0
 800adce:	2100      	movs	r1, #0
 800add0:	68f8      	ldr	r0, [r7, #12]
 800add2:	f001 fe03 	bl	800c9dc <USBD_LL_PrepareReceive>
 800add6:	e03f      	b.n	800ae58 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800add8:	693b      	ldr	r3, [r7, #16]
 800adda:	68da      	ldr	r2, [r3, #12]
 800addc:	693b      	ldr	r3, [r7, #16]
 800adde:	689b      	ldr	r3, [r3, #8]
 800ade0:	429a      	cmp	r2, r3
 800ade2:	d11c      	bne.n	800ae1e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ade4:	693b      	ldr	r3, [r7, #16]
 800ade6:	685a      	ldr	r2, [r3, #4]
 800ade8:	693b      	ldr	r3, [r7, #16]
 800adea:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800adec:	429a      	cmp	r2, r3
 800adee:	d316      	bcc.n	800ae1e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	685a      	ldr	r2, [r3, #4]
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800adfa:	429a      	cmp	r2, r3
 800adfc:	d20f      	bcs.n	800ae1e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800adfe:	2200      	movs	r2, #0
 800ae00:	2100      	movs	r1, #0
 800ae02:	68f8      	ldr	r0, [r7, #12]
 800ae04:	f001 f8bd 	bl	800bf82 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ae10:	2300      	movs	r3, #0
 800ae12:	2200      	movs	r2, #0
 800ae14:	2100      	movs	r1, #0
 800ae16:	68f8      	ldr	r0, [r7, #12]
 800ae18:	f001 fde0 	bl	800c9dc <USBD_LL_PrepareReceive>
 800ae1c:	e01c      	b.n	800ae58 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae24:	b2db      	uxtb	r3, r3
 800ae26:	2b03      	cmp	r3, #3
 800ae28:	d10f      	bne.n	800ae4a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae30:	68db      	ldr	r3, [r3, #12]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d009      	beq.n	800ae4a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae44:	68db      	ldr	r3, [r3, #12]
 800ae46:	68f8      	ldr	r0, [r7, #12]
 800ae48:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ae4a:	2180      	movs	r1, #128	; 0x80
 800ae4c:	68f8      	ldr	r0, [r7, #12]
 800ae4e:	f001 fd1b 	bl	800c888 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ae52:	68f8      	ldr	r0, [r7, #12]
 800ae54:	f001 f8e7 	bl	800c026 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d03a      	beq.n	800aed8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ae62:	68f8      	ldr	r0, [r7, #12]
 800ae64:	f7ff fe42 	bl	800aaec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ae70:	e032      	b.n	800aed8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ae72:	7afb      	ldrb	r3, [r7, #11]
 800ae74:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ae78:	b2db      	uxtb	r3, r3
 800ae7a:	4619      	mov	r1, r3
 800ae7c:	68f8      	ldr	r0, [r7, #12]
 800ae7e:	f000 f985 	bl	800b18c <USBD_CoreFindEP>
 800ae82:	4603      	mov	r3, r0
 800ae84:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ae86:	7dfb      	ldrb	r3, [r7, #23]
 800ae88:	2bff      	cmp	r3, #255	; 0xff
 800ae8a:	d025      	beq.n	800aed8 <USBD_LL_DataInStage+0x15a>
 800ae8c:	7dfb      	ldrb	r3, [r7, #23]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d122      	bne.n	800aed8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae98:	b2db      	uxtb	r3, r3
 800ae9a:	2b03      	cmp	r3, #3
 800ae9c:	d11c      	bne.n	800aed8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ae9e:	7dfa      	ldrb	r2, [r7, #23]
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	32ae      	adds	r2, #174	; 0xae
 800aea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aea8:	695b      	ldr	r3, [r3, #20]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d014      	beq.n	800aed8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800aeae:	7dfa      	ldrb	r2, [r7, #23]
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800aeb6:	7dfa      	ldrb	r2, [r7, #23]
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	32ae      	adds	r2, #174	; 0xae
 800aebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aec0:	695b      	ldr	r3, [r3, #20]
 800aec2:	7afa      	ldrb	r2, [r7, #11]
 800aec4:	4611      	mov	r1, r2
 800aec6:	68f8      	ldr	r0, [r7, #12]
 800aec8:	4798      	blx	r3
 800aeca:	4603      	mov	r3, r0
 800aecc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800aece:	7dbb      	ldrb	r3, [r7, #22]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d001      	beq.n	800aed8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800aed4:	7dbb      	ldrb	r3, [r7, #22]
 800aed6:	e000      	b.n	800aeda <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800aed8:	2300      	movs	r3, #0
}
 800aeda:	4618      	mov	r0, r3
 800aedc:	3718      	adds	r7, #24
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}

0800aee2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800aee2:	b580      	push	{r7, lr}
 800aee4:	b084      	sub	sp, #16
 800aee6:	af00      	add	r7, sp, #0
 800aee8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800aeea:	2300      	movs	r3, #0
 800aeec:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2201      	movs	r2, #1
 800aef2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2200      	movs	r2, #0
 800aefa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2200      	movs	r2, #0
 800af02:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2200      	movs	r2, #0
 800af08:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2200      	movs	r2, #0
 800af10:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d014      	beq.n	800af48 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af24:	685b      	ldr	r3, [r3, #4]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d00e      	beq.n	800af48 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af30:	685b      	ldr	r3, [r3, #4]
 800af32:	687a      	ldr	r2, [r7, #4]
 800af34:	6852      	ldr	r2, [r2, #4]
 800af36:	b2d2      	uxtb	r2, r2
 800af38:	4611      	mov	r1, r2
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	4798      	blx	r3
 800af3e:	4603      	mov	r3, r0
 800af40:	2b00      	cmp	r3, #0
 800af42:	d001      	beq.n	800af48 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800af44:	2303      	movs	r3, #3
 800af46:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800af48:	2340      	movs	r3, #64	; 0x40
 800af4a:	2200      	movs	r2, #0
 800af4c:	2100      	movs	r1, #0
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f001 fc55 	bl	800c7fe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2201      	movs	r2, #1
 800af58:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2240      	movs	r2, #64	; 0x40
 800af60:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800af64:	2340      	movs	r3, #64	; 0x40
 800af66:	2200      	movs	r2, #0
 800af68:	2180      	movs	r1, #128	; 0x80
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f001 fc47 	bl	800c7fe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2201      	movs	r2, #1
 800af74:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2240      	movs	r2, #64	; 0x40
 800af7a:	621a      	str	r2, [r3, #32]

  return ret;
 800af7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af7e:	4618      	mov	r0, r3
 800af80:	3710      	adds	r7, #16
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}

0800af86 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800af86:	b480      	push	{r7}
 800af88:	b083      	sub	sp, #12
 800af8a:	af00      	add	r7, sp, #0
 800af8c:	6078      	str	r0, [r7, #4]
 800af8e:	460b      	mov	r3, r1
 800af90:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	78fa      	ldrb	r2, [r7, #3]
 800af96:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800af98:	2300      	movs	r3, #0
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	370c      	adds	r7, #12
 800af9e:	46bd      	mov	sp, r7
 800afa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa4:	4770      	bx	lr

0800afa6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800afa6:	b480      	push	{r7}
 800afa8:	b083      	sub	sp, #12
 800afaa:	af00      	add	r7, sp, #0
 800afac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afb4:	b2db      	uxtb	r3, r3
 800afb6:	2b04      	cmp	r3, #4
 800afb8:	d006      	beq.n	800afc8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afc0:	b2da      	uxtb	r2, r3
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2204      	movs	r2, #4
 800afcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800afd0:	2300      	movs	r3, #0
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	370c      	adds	r7, #12
 800afd6:	46bd      	mov	sp, r7
 800afd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afdc:	4770      	bx	lr

0800afde <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800afde:	b480      	push	{r7}
 800afe0:	b083      	sub	sp, #12
 800afe2:	af00      	add	r7, sp, #0
 800afe4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afec:	b2db      	uxtb	r3, r3
 800afee:	2b04      	cmp	r3, #4
 800aff0:	d106      	bne.n	800b000 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800aff8:	b2da      	uxtb	r2, r3
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b000:	2300      	movs	r3, #0
}
 800b002:	4618      	mov	r0, r3
 800b004:	370c      	adds	r7, #12
 800b006:	46bd      	mov	sp, r7
 800b008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00c:	4770      	bx	lr

0800b00e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b00e:	b580      	push	{r7, lr}
 800b010:	b082      	sub	sp, #8
 800b012:	af00      	add	r7, sp, #0
 800b014:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b01c:	b2db      	uxtb	r3, r3
 800b01e:	2b03      	cmp	r3, #3
 800b020:	d110      	bne.n	800b044 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d00b      	beq.n	800b044 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b032:	69db      	ldr	r3, [r3, #28]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d005      	beq.n	800b044 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b03e:	69db      	ldr	r3, [r3, #28]
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b044:	2300      	movs	r3, #0
}
 800b046:	4618      	mov	r0, r3
 800b048:	3708      	adds	r7, #8
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}

0800b04e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b04e:	b580      	push	{r7, lr}
 800b050:	b082      	sub	sp, #8
 800b052:	af00      	add	r7, sp, #0
 800b054:	6078      	str	r0, [r7, #4]
 800b056:	460b      	mov	r3, r1
 800b058:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	32ae      	adds	r2, #174	; 0xae
 800b064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d101      	bne.n	800b070 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b06c:	2303      	movs	r3, #3
 800b06e:	e01c      	b.n	800b0aa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b076:	b2db      	uxtb	r3, r3
 800b078:	2b03      	cmp	r3, #3
 800b07a:	d115      	bne.n	800b0a8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	32ae      	adds	r2, #174	; 0xae
 800b086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b08a:	6a1b      	ldr	r3, [r3, #32]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d00b      	beq.n	800b0a8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	32ae      	adds	r2, #174	; 0xae
 800b09a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b09e:	6a1b      	ldr	r3, [r3, #32]
 800b0a0:	78fa      	ldrb	r2, [r7, #3]
 800b0a2:	4611      	mov	r1, r2
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b0a8:	2300      	movs	r3, #0
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3708      	adds	r7, #8
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}

0800b0b2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b0b2:	b580      	push	{r7, lr}
 800b0b4:	b082      	sub	sp, #8
 800b0b6:	af00      	add	r7, sp, #0
 800b0b8:	6078      	str	r0, [r7, #4]
 800b0ba:	460b      	mov	r3, r1
 800b0bc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	32ae      	adds	r2, #174	; 0xae
 800b0c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d101      	bne.n	800b0d4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b0d0:	2303      	movs	r3, #3
 800b0d2:	e01c      	b.n	800b10e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0da:	b2db      	uxtb	r3, r3
 800b0dc:	2b03      	cmp	r3, #3
 800b0de:	d115      	bne.n	800b10c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	32ae      	adds	r2, #174	; 0xae
 800b0ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d00b      	beq.n	800b10c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	32ae      	adds	r2, #174	; 0xae
 800b0fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b104:	78fa      	ldrb	r2, [r7, #3]
 800b106:	4611      	mov	r1, r2
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b10c:	2300      	movs	r3, #0
}
 800b10e:	4618      	mov	r0, r3
 800b110:	3708      	adds	r7, #8
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}

0800b116 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b116:	b480      	push	{r7}
 800b118:	b083      	sub	sp, #12
 800b11a:	af00      	add	r7, sp, #0
 800b11c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b11e:	2300      	movs	r3, #0
}
 800b120:	4618      	mov	r0, r3
 800b122:	370c      	adds	r7, #12
 800b124:	46bd      	mov	sp, r7
 800b126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12a:	4770      	bx	lr

0800b12c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b084      	sub	sp, #16
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b134:	2300      	movs	r3, #0
 800b136:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2201      	movs	r2, #1
 800b13c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b146:	2b00      	cmp	r3, #0
 800b148:	d00e      	beq.n	800b168 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	687a      	ldr	r2, [r7, #4]
 800b154:	6852      	ldr	r2, [r2, #4]
 800b156:	b2d2      	uxtb	r2, r2
 800b158:	4611      	mov	r1, r2
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	4798      	blx	r3
 800b15e:	4603      	mov	r3, r0
 800b160:	2b00      	cmp	r3, #0
 800b162:	d001      	beq.n	800b168 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b164:	2303      	movs	r3, #3
 800b166:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b168:	7bfb      	ldrb	r3, [r7, #15]
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3710      	adds	r7, #16
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}

0800b172 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b172:	b480      	push	{r7}
 800b174:	b083      	sub	sp, #12
 800b176:	af00      	add	r7, sp, #0
 800b178:	6078      	str	r0, [r7, #4]
 800b17a:	460b      	mov	r3, r1
 800b17c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b17e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b180:	4618      	mov	r0, r3
 800b182:	370c      	adds	r7, #12
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr

0800b18c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b18c:	b480      	push	{r7}
 800b18e:	b083      	sub	sp, #12
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
 800b194:	460b      	mov	r3, r1
 800b196:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b198:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	370c      	adds	r7, #12
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a4:	4770      	bx	lr

0800b1a6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b1a6:	b580      	push	{r7, lr}
 800b1a8:	b086      	sub	sp, #24
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	6078      	str	r0, [r7, #4]
 800b1ae:	460b      	mov	r3, r1
 800b1b0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	885b      	ldrh	r3, [r3, #2]
 800b1c2:	b29a      	uxth	r2, r3
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	781b      	ldrb	r3, [r3, #0]
 800b1c8:	b29b      	uxth	r3, r3
 800b1ca:	429a      	cmp	r2, r3
 800b1cc:	d920      	bls.n	800b210 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	781b      	ldrb	r3, [r3, #0]
 800b1d2:	b29b      	uxth	r3, r3
 800b1d4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b1d6:	e013      	b.n	800b200 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b1d8:	f107 030a 	add.w	r3, r7, #10
 800b1dc:	4619      	mov	r1, r3
 800b1de:	6978      	ldr	r0, [r7, #20]
 800b1e0:	f000 f81b 	bl	800b21a <USBD_GetNextDesc>
 800b1e4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	785b      	ldrb	r3, [r3, #1]
 800b1ea:	2b05      	cmp	r3, #5
 800b1ec:	d108      	bne.n	800b200 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b1ee:	697b      	ldr	r3, [r7, #20]
 800b1f0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	789b      	ldrb	r3, [r3, #2]
 800b1f6:	78fa      	ldrb	r2, [r7, #3]
 800b1f8:	429a      	cmp	r2, r3
 800b1fa:	d008      	beq.n	800b20e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	885b      	ldrh	r3, [r3, #2]
 800b204:	b29a      	uxth	r2, r3
 800b206:	897b      	ldrh	r3, [r7, #10]
 800b208:	429a      	cmp	r2, r3
 800b20a:	d8e5      	bhi.n	800b1d8 <USBD_GetEpDesc+0x32>
 800b20c:	e000      	b.n	800b210 <USBD_GetEpDesc+0x6a>
          break;
 800b20e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b210:	693b      	ldr	r3, [r7, #16]
}
 800b212:	4618      	mov	r0, r3
 800b214:	3718      	adds	r7, #24
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}

0800b21a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b21a:	b480      	push	{r7}
 800b21c:	b085      	sub	sp, #20
 800b21e:	af00      	add	r7, sp, #0
 800b220:	6078      	str	r0, [r7, #4]
 800b222:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	881a      	ldrh	r2, [r3, #0]
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	781b      	ldrb	r3, [r3, #0]
 800b230:	b29b      	uxth	r3, r3
 800b232:	4413      	add	r3, r2
 800b234:	b29a      	uxth	r2, r3
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	781b      	ldrb	r3, [r3, #0]
 800b23e:	461a      	mov	r2, r3
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	4413      	add	r3, r2
 800b244:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b246:	68fb      	ldr	r3, [r7, #12]
}
 800b248:	4618      	mov	r0, r3
 800b24a:	3714      	adds	r7, #20
 800b24c:	46bd      	mov	sp, r7
 800b24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b252:	4770      	bx	lr

0800b254 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b254:	b480      	push	{r7}
 800b256:	b087      	sub	sp, #28
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	781b      	ldrb	r3, [r3, #0]
 800b264:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	3301      	adds	r3, #1
 800b26a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b26c:	697b      	ldr	r3, [r7, #20]
 800b26e:	781b      	ldrb	r3, [r3, #0]
 800b270:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b272:	8a3b      	ldrh	r3, [r7, #16]
 800b274:	021b      	lsls	r3, r3, #8
 800b276:	b21a      	sxth	r2, r3
 800b278:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b27c:	4313      	orrs	r3, r2
 800b27e:	b21b      	sxth	r3, r3
 800b280:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b282:	89fb      	ldrh	r3, [r7, #14]
}
 800b284:	4618      	mov	r0, r3
 800b286:	371c      	adds	r7, #28
 800b288:	46bd      	mov	sp, r7
 800b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28e:	4770      	bx	lr

0800b290 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b084      	sub	sp, #16
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
 800b298:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b29a:	2300      	movs	r3, #0
 800b29c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	781b      	ldrb	r3, [r3, #0]
 800b2a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b2a6:	2b40      	cmp	r3, #64	; 0x40
 800b2a8:	d005      	beq.n	800b2b6 <USBD_StdDevReq+0x26>
 800b2aa:	2b40      	cmp	r3, #64	; 0x40
 800b2ac:	d857      	bhi.n	800b35e <USBD_StdDevReq+0xce>
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d00f      	beq.n	800b2d2 <USBD_StdDevReq+0x42>
 800b2b2:	2b20      	cmp	r3, #32
 800b2b4:	d153      	bne.n	800b35e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	32ae      	adds	r2, #174	; 0xae
 800b2c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2c4:	689b      	ldr	r3, [r3, #8]
 800b2c6:	6839      	ldr	r1, [r7, #0]
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	4798      	blx	r3
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	73fb      	strb	r3, [r7, #15]
      break;
 800b2d0:	e04a      	b.n	800b368 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	785b      	ldrb	r3, [r3, #1]
 800b2d6:	2b09      	cmp	r3, #9
 800b2d8:	d83b      	bhi.n	800b352 <USBD_StdDevReq+0xc2>
 800b2da:	a201      	add	r2, pc, #4	; (adr r2, 800b2e0 <USBD_StdDevReq+0x50>)
 800b2dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2e0:	0800b335 	.word	0x0800b335
 800b2e4:	0800b349 	.word	0x0800b349
 800b2e8:	0800b353 	.word	0x0800b353
 800b2ec:	0800b33f 	.word	0x0800b33f
 800b2f0:	0800b353 	.word	0x0800b353
 800b2f4:	0800b313 	.word	0x0800b313
 800b2f8:	0800b309 	.word	0x0800b309
 800b2fc:	0800b353 	.word	0x0800b353
 800b300:	0800b32b 	.word	0x0800b32b
 800b304:	0800b31d 	.word	0x0800b31d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b308:	6839      	ldr	r1, [r7, #0]
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f000 fa3c 	bl	800b788 <USBD_GetDescriptor>
          break;
 800b310:	e024      	b.n	800b35c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b312:	6839      	ldr	r1, [r7, #0]
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f000 fbcb 	bl	800bab0 <USBD_SetAddress>
          break;
 800b31a:	e01f      	b.n	800b35c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b31c:	6839      	ldr	r1, [r7, #0]
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f000 fc0a 	bl	800bb38 <USBD_SetConfig>
 800b324:	4603      	mov	r3, r0
 800b326:	73fb      	strb	r3, [r7, #15]
          break;
 800b328:	e018      	b.n	800b35c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b32a:	6839      	ldr	r1, [r7, #0]
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f000 fcad 	bl	800bc8c <USBD_GetConfig>
          break;
 800b332:	e013      	b.n	800b35c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b334:	6839      	ldr	r1, [r7, #0]
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f000 fcde 	bl	800bcf8 <USBD_GetStatus>
          break;
 800b33c:	e00e      	b.n	800b35c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b33e:	6839      	ldr	r1, [r7, #0]
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f000 fd0d 	bl	800bd60 <USBD_SetFeature>
          break;
 800b346:	e009      	b.n	800b35c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b348:	6839      	ldr	r1, [r7, #0]
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f000 fd31 	bl	800bdb2 <USBD_ClrFeature>
          break;
 800b350:	e004      	b.n	800b35c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b352:	6839      	ldr	r1, [r7, #0]
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	f000 fd88 	bl	800be6a <USBD_CtlError>
          break;
 800b35a:	bf00      	nop
      }
      break;
 800b35c:	e004      	b.n	800b368 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b35e:	6839      	ldr	r1, [r7, #0]
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f000 fd82 	bl	800be6a <USBD_CtlError>
      break;
 800b366:	bf00      	nop
  }

  return ret;
 800b368:	7bfb      	ldrb	r3, [r7, #15]
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3710      	adds	r7, #16
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}
 800b372:	bf00      	nop

0800b374 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b084      	sub	sp, #16
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
 800b37c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b37e:	2300      	movs	r3, #0
 800b380:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	781b      	ldrb	r3, [r3, #0]
 800b386:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b38a:	2b40      	cmp	r3, #64	; 0x40
 800b38c:	d005      	beq.n	800b39a <USBD_StdItfReq+0x26>
 800b38e:	2b40      	cmp	r3, #64	; 0x40
 800b390:	d852      	bhi.n	800b438 <USBD_StdItfReq+0xc4>
 800b392:	2b00      	cmp	r3, #0
 800b394:	d001      	beq.n	800b39a <USBD_StdItfReq+0x26>
 800b396:	2b20      	cmp	r3, #32
 800b398:	d14e      	bne.n	800b438 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3a0:	b2db      	uxtb	r3, r3
 800b3a2:	3b01      	subs	r3, #1
 800b3a4:	2b02      	cmp	r3, #2
 800b3a6:	d840      	bhi.n	800b42a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	889b      	ldrh	r3, [r3, #4]
 800b3ac:	b2db      	uxtb	r3, r3
 800b3ae:	2b01      	cmp	r3, #1
 800b3b0:	d836      	bhi.n	800b420 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	889b      	ldrh	r3, [r3, #4]
 800b3b6:	b2db      	uxtb	r3, r3
 800b3b8:	4619      	mov	r1, r3
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f7ff fed9 	bl	800b172 <USBD_CoreFindIF>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b3c4:	7bbb      	ldrb	r3, [r7, #14]
 800b3c6:	2bff      	cmp	r3, #255	; 0xff
 800b3c8:	d01d      	beq.n	800b406 <USBD_StdItfReq+0x92>
 800b3ca:	7bbb      	ldrb	r3, [r7, #14]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d11a      	bne.n	800b406 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b3d0:	7bba      	ldrb	r2, [r7, #14]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	32ae      	adds	r2, #174	; 0xae
 800b3d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3da:	689b      	ldr	r3, [r3, #8]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d00f      	beq.n	800b400 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b3e0:	7bba      	ldrb	r2, [r7, #14]
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b3e8:	7bba      	ldrb	r2, [r7, #14]
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	32ae      	adds	r2, #174	; 0xae
 800b3ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3f2:	689b      	ldr	r3, [r3, #8]
 800b3f4:	6839      	ldr	r1, [r7, #0]
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	4798      	blx	r3
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b3fe:	e004      	b.n	800b40a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b400:	2303      	movs	r3, #3
 800b402:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b404:	e001      	b.n	800b40a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b406:	2303      	movs	r3, #3
 800b408:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	88db      	ldrh	r3, [r3, #6]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d110      	bne.n	800b434 <USBD_StdItfReq+0xc0>
 800b412:	7bfb      	ldrb	r3, [r7, #15]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d10d      	bne.n	800b434 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	f000 fdf1 	bl	800c000 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b41e:	e009      	b.n	800b434 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b420:	6839      	ldr	r1, [r7, #0]
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f000 fd21 	bl	800be6a <USBD_CtlError>
          break;
 800b428:	e004      	b.n	800b434 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b42a:	6839      	ldr	r1, [r7, #0]
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f000 fd1c 	bl	800be6a <USBD_CtlError>
          break;
 800b432:	e000      	b.n	800b436 <USBD_StdItfReq+0xc2>
          break;
 800b434:	bf00      	nop
      }
      break;
 800b436:	e004      	b.n	800b442 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b438:	6839      	ldr	r1, [r7, #0]
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f000 fd15 	bl	800be6a <USBD_CtlError>
      break;
 800b440:	bf00      	nop
  }

  return ret;
 800b442:	7bfb      	ldrb	r3, [r7, #15]
}
 800b444:	4618      	mov	r0, r3
 800b446:	3710      	adds	r7, #16
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}

0800b44c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b084      	sub	sp, #16
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b456:	2300      	movs	r3, #0
 800b458:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	889b      	ldrh	r3, [r3, #4]
 800b45e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	781b      	ldrb	r3, [r3, #0]
 800b464:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b468:	2b40      	cmp	r3, #64	; 0x40
 800b46a:	d007      	beq.n	800b47c <USBD_StdEPReq+0x30>
 800b46c:	2b40      	cmp	r3, #64	; 0x40
 800b46e:	f200 817f 	bhi.w	800b770 <USBD_StdEPReq+0x324>
 800b472:	2b00      	cmp	r3, #0
 800b474:	d02a      	beq.n	800b4cc <USBD_StdEPReq+0x80>
 800b476:	2b20      	cmp	r3, #32
 800b478:	f040 817a 	bne.w	800b770 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b47c:	7bbb      	ldrb	r3, [r7, #14]
 800b47e:	4619      	mov	r1, r3
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f7ff fe83 	bl	800b18c <USBD_CoreFindEP>
 800b486:	4603      	mov	r3, r0
 800b488:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b48a:	7b7b      	ldrb	r3, [r7, #13]
 800b48c:	2bff      	cmp	r3, #255	; 0xff
 800b48e:	f000 8174 	beq.w	800b77a <USBD_StdEPReq+0x32e>
 800b492:	7b7b      	ldrb	r3, [r7, #13]
 800b494:	2b00      	cmp	r3, #0
 800b496:	f040 8170 	bne.w	800b77a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b49a:	7b7a      	ldrb	r2, [r7, #13]
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b4a2:	7b7a      	ldrb	r2, [r7, #13]
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	32ae      	adds	r2, #174	; 0xae
 800b4a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4ac:	689b      	ldr	r3, [r3, #8]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	f000 8163 	beq.w	800b77a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b4b4:	7b7a      	ldrb	r2, [r7, #13]
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	32ae      	adds	r2, #174	; 0xae
 800b4ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4be:	689b      	ldr	r3, [r3, #8]
 800b4c0:	6839      	ldr	r1, [r7, #0]
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	4798      	blx	r3
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b4ca:	e156      	b.n	800b77a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	785b      	ldrb	r3, [r3, #1]
 800b4d0:	2b03      	cmp	r3, #3
 800b4d2:	d008      	beq.n	800b4e6 <USBD_StdEPReq+0x9a>
 800b4d4:	2b03      	cmp	r3, #3
 800b4d6:	f300 8145 	bgt.w	800b764 <USBD_StdEPReq+0x318>
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	f000 809b 	beq.w	800b616 <USBD_StdEPReq+0x1ca>
 800b4e0:	2b01      	cmp	r3, #1
 800b4e2:	d03c      	beq.n	800b55e <USBD_StdEPReq+0x112>
 800b4e4:	e13e      	b.n	800b764 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4ec:	b2db      	uxtb	r3, r3
 800b4ee:	2b02      	cmp	r3, #2
 800b4f0:	d002      	beq.n	800b4f8 <USBD_StdEPReq+0xac>
 800b4f2:	2b03      	cmp	r3, #3
 800b4f4:	d016      	beq.n	800b524 <USBD_StdEPReq+0xd8>
 800b4f6:	e02c      	b.n	800b552 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b4f8:	7bbb      	ldrb	r3, [r7, #14]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d00d      	beq.n	800b51a <USBD_StdEPReq+0xce>
 800b4fe:	7bbb      	ldrb	r3, [r7, #14]
 800b500:	2b80      	cmp	r3, #128	; 0x80
 800b502:	d00a      	beq.n	800b51a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b504:	7bbb      	ldrb	r3, [r7, #14]
 800b506:	4619      	mov	r1, r3
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f001 f9bd 	bl	800c888 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b50e:	2180      	movs	r1, #128	; 0x80
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	f001 f9b9 	bl	800c888 <USBD_LL_StallEP>
 800b516:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b518:	e020      	b.n	800b55c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b51a:	6839      	ldr	r1, [r7, #0]
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f000 fca4 	bl	800be6a <USBD_CtlError>
              break;
 800b522:	e01b      	b.n	800b55c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	885b      	ldrh	r3, [r3, #2]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d10e      	bne.n	800b54a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b52c:	7bbb      	ldrb	r3, [r7, #14]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d00b      	beq.n	800b54a <USBD_StdEPReq+0xfe>
 800b532:	7bbb      	ldrb	r3, [r7, #14]
 800b534:	2b80      	cmp	r3, #128	; 0x80
 800b536:	d008      	beq.n	800b54a <USBD_StdEPReq+0xfe>
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	88db      	ldrh	r3, [r3, #6]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d104      	bne.n	800b54a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b540:	7bbb      	ldrb	r3, [r7, #14]
 800b542:	4619      	mov	r1, r3
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f001 f99f 	bl	800c888 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f000 fd58 	bl	800c000 <USBD_CtlSendStatus>

              break;
 800b550:	e004      	b.n	800b55c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b552:	6839      	ldr	r1, [r7, #0]
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f000 fc88 	bl	800be6a <USBD_CtlError>
              break;
 800b55a:	bf00      	nop
          }
          break;
 800b55c:	e107      	b.n	800b76e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b564:	b2db      	uxtb	r3, r3
 800b566:	2b02      	cmp	r3, #2
 800b568:	d002      	beq.n	800b570 <USBD_StdEPReq+0x124>
 800b56a:	2b03      	cmp	r3, #3
 800b56c:	d016      	beq.n	800b59c <USBD_StdEPReq+0x150>
 800b56e:	e04b      	b.n	800b608 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b570:	7bbb      	ldrb	r3, [r7, #14]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d00d      	beq.n	800b592 <USBD_StdEPReq+0x146>
 800b576:	7bbb      	ldrb	r3, [r7, #14]
 800b578:	2b80      	cmp	r3, #128	; 0x80
 800b57a:	d00a      	beq.n	800b592 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b57c:	7bbb      	ldrb	r3, [r7, #14]
 800b57e:	4619      	mov	r1, r3
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f001 f981 	bl	800c888 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b586:	2180      	movs	r1, #128	; 0x80
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f001 f97d 	bl	800c888 <USBD_LL_StallEP>
 800b58e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b590:	e040      	b.n	800b614 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b592:	6839      	ldr	r1, [r7, #0]
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f000 fc68 	bl	800be6a <USBD_CtlError>
              break;
 800b59a:	e03b      	b.n	800b614 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	885b      	ldrh	r3, [r3, #2]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d136      	bne.n	800b612 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b5a4:	7bbb      	ldrb	r3, [r7, #14]
 800b5a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d004      	beq.n	800b5b8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b5ae:	7bbb      	ldrb	r3, [r7, #14]
 800b5b0:	4619      	mov	r1, r3
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f001 f987 	bl	800c8c6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f000 fd21 	bl	800c000 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b5be:	7bbb      	ldrb	r3, [r7, #14]
 800b5c0:	4619      	mov	r1, r3
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f7ff fde2 	bl	800b18c <USBD_CoreFindEP>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b5cc:	7b7b      	ldrb	r3, [r7, #13]
 800b5ce:	2bff      	cmp	r3, #255	; 0xff
 800b5d0:	d01f      	beq.n	800b612 <USBD_StdEPReq+0x1c6>
 800b5d2:	7b7b      	ldrb	r3, [r7, #13]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d11c      	bne.n	800b612 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b5d8:	7b7a      	ldrb	r2, [r7, #13]
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b5e0:	7b7a      	ldrb	r2, [r7, #13]
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	32ae      	adds	r2, #174	; 0xae
 800b5e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5ea:	689b      	ldr	r3, [r3, #8]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d010      	beq.n	800b612 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b5f0:	7b7a      	ldrb	r2, [r7, #13]
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	32ae      	adds	r2, #174	; 0xae
 800b5f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5fa:	689b      	ldr	r3, [r3, #8]
 800b5fc:	6839      	ldr	r1, [r7, #0]
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	4798      	blx	r3
 800b602:	4603      	mov	r3, r0
 800b604:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b606:	e004      	b.n	800b612 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b608:	6839      	ldr	r1, [r7, #0]
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f000 fc2d 	bl	800be6a <USBD_CtlError>
              break;
 800b610:	e000      	b.n	800b614 <USBD_StdEPReq+0x1c8>
              break;
 800b612:	bf00      	nop
          }
          break;
 800b614:	e0ab      	b.n	800b76e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b61c:	b2db      	uxtb	r3, r3
 800b61e:	2b02      	cmp	r3, #2
 800b620:	d002      	beq.n	800b628 <USBD_StdEPReq+0x1dc>
 800b622:	2b03      	cmp	r3, #3
 800b624:	d032      	beq.n	800b68c <USBD_StdEPReq+0x240>
 800b626:	e097      	b.n	800b758 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b628:	7bbb      	ldrb	r3, [r7, #14]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d007      	beq.n	800b63e <USBD_StdEPReq+0x1f2>
 800b62e:	7bbb      	ldrb	r3, [r7, #14]
 800b630:	2b80      	cmp	r3, #128	; 0x80
 800b632:	d004      	beq.n	800b63e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b634:	6839      	ldr	r1, [r7, #0]
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f000 fc17 	bl	800be6a <USBD_CtlError>
                break;
 800b63c:	e091      	b.n	800b762 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b63e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b642:	2b00      	cmp	r3, #0
 800b644:	da0b      	bge.n	800b65e <USBD_StdEPReq+0x212>
 800b646:	7bbb      	ldrb	r3, [r7, #14]
 800b648:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b64c:	4613      	mov	r3, r2
 800b64e:	009b      	lsls	r3, r3, #2
 800b650:	4413      	add	r3, r2
 800b652:	009b      	lsls	r3, r3, #2
 800b654:	3310      	adds	r3, #16
 800b656:	687a      	ldr	r2, [r7, #4]
 800b658:	4413      	add	r3, r2
 800b65a:	3304      	adds	r3, #4
 800b65c:	e00b      	b.n	800b676 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b65e:	7bbb      	ldrb	r3, [r7, #14]
 800b660:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b664:	4613      	mov	r3, r2
 800b666:	009b      	lsls	r3, r3, #2
 800b668:	4413      	add	r3, r2
 800b66a:	009b      	lsls	r3, r3, #2
 800b66c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b670:	687a      	ldr	r2, [r7, #4]
 800b672:	4413      	add	r3, r2
 800b674:	3304      	adds	r3, #4
 800b676:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b678:	68bb      	ldr	r3, [r7, #8]
 800b67a:	2200      	movs	r2, #0
 800b67c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	2202      	movs	r2, #2
 800b682:	4619      	mov	r1, r3
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f000 fc61 	bl	800bf4c <USBD_CtlSendData>
              break;
 800b68a:	e06a      	b.n	800b762 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b68c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b690:	2b00      	cmp	r3, #0
 800b692:	da11      	bge.n	800b6b8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b694:	7bbb      	ldrb	r3, [r7, #14]
 800b696:	f003 020f 	and.w	r2, r3, #15
 800b69a:	6879      	ldr	r1, [r7, #4]
 800b69c:	4613      	mov	r3, r2
 800b69e:	009b      	lsls	r3, r3, #2
 800b6a0:	4413      	add	r3, r2
 800b6a2:	009b      	lsls	r3, r3, #2
 800b6a4:	440b      	add	r3, r1
 800b6a6:	3324      	adds	r3, #36	; 0x24
 800b6a8:	881b      	ldrh	r3, [r3, #0]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d117      	bne.n	800b6de <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b6ae:	6839      	ldr	r1, [r7, #0]
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	f000 fbda 	bl	800be6a <USBD_CtlError>
                  break;
 800b6b6:	e054      	b.n	800b762 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b6b8:	7bbb      	ldrb	r3, [r7, #14]
 800b6ba:	f003 020f 	and.w	r2, r3, #15
 800b6be:	6879      	ldr	r1, [r7, #4]
 800b6c0:	4613      	mov	r3, r2
 800b6c2:	009b      	lsls	r3, r3, #2
 800b6c4:	4413      	add	r3, r2
 800b6c6:	009b      	lsls	r3, r3, #2
 800b6c8:	440b      	add	r3, r1
 800b6ca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b6ce:	881b      	ldrh	r3, [r3, #0]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d104      	bne.n	800b6de <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b6d4:	6839      	ldr	r1, [r7, #0]
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f000 fbc7 	bl	800be6a <USBD_CtlError>
                  break;
 800b6dc:	e041      	b.n	800b762 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b6de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	da0b      	bge.n	800b6fe <USBD_StdEPReq+0x2b2>
 800b6e6:	7bbb      	ldrb	r3, [r7, #14]
 800b6e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b6ec:	4613      	mov	r3, r2
 800b6ee:	009b      	lsls	r3, r3, #2
 800b6f0:	4413      	add	r3, r2
 800b6f2:	009b      	lsls	r3, r3, #2
 800b6f4:	3310      	adds	r3, #16
 800b6f6:	687a      	ldr	r2, [r7, #4]
 800b6f8:	4413      	add	r3, r2
 800b6fa:	3304      	adds	r3, #4
 800b6fc:	e00b      	b.n	800b716 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b6fe:	7bbb      	ldrb	r3, [r7, #14]
 800b700:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b704:	4613      	mov	r3, r2
 800b706:	009b      	lsls	r3, r3, #2
 800b708:	4413      	add	r3, r2
 800b70a:	009b      	lsls	r3, r3, #2
 800b70c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b710:	687a      	ldr	r2, [r7, #4]
 800b712:	4413      	add	r3, r2
 800b714:	3304      	adds	r3, #4
 800b716:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b718:	7bbb      	ldrb	r3, [r7, #14]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d002      	beq.n	800b724 <USBD_StdEPReq+0x2d8>
 800b71e:	7bbb      	ldrb	r3, [r7, #14]
 800b720:	2b80      	cmp	r3, #128	; 0x80
 800b722:	d103      	bne.n	800b72c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	2200      	movs	r2, #0
 800b728:	601a      	str	r2, [r3, #0]
 800b72a:	e00e      	b.n	800b74a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b72c:	7bbb      	ldrb	r3, [r7, #14]
 800b72e:	4619      	mov	r1, r3
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f001 f8e7 	bl	800c904 <USBD_LL_IsStallEP>
 800b736:	4603      	mov	r3, r0
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d003      	beq.n	800b744 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	2201      	movs	r2, #1
 800b740:	601a      	str	r2, [r3, #0]
 800b742:	e002      	b.n	800b74a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	2200      	movs	r2, #0
 800b748:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	2202      	movs	r2, #2
 800b74e:	4619      	mov	r1, r3
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f000 fbfb 	bl	800bf4c <USBD_CtlSendData>
              break;
 800b756:	e004      	b.n	800b762 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b758:	6839      	ldr	r1, [r7, #0]
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f000 fb85 	bl	800be6a <USBD_CtlError>
              break;
 800b760:	bf00      	nop
          }
          break;
 800b762:	e004      	b.n	800b76e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b764:	6839      	ldr	r1, [r7, #0]
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f000 fb7f 	bl	800be6a <USBD_CtlError>
          break;
 800b76c:	bf00      	nop
      }
      break;
 800b76e:	e005      	b.n	800b77c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b770:	6839      	ldr	r1, [r7, #0]
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	f000 fb79 	bl	800be6a <USBD_CtlError>
      break;
 800b778:	e000      	b.n	800b77c <USBD_StdEPReq+0x330>
      break;
 800b77a:	bf00      	nop
  }

  return ret;
 800b77c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b77e:	4618      	mov	r0, r3
 800b780:	3710      	adds	r7, #16
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}
	...

0800b788 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b084      	sub	sp, #16
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
 800b790:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b792:	2300      	movs	r3, #0
 800b794:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b796:	2300      	movs	r3, #0
 800b798:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b79a:	2300      	movs	r3, #0
 800b79c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	885b      	ldrh	r3, [r3, #2]
 800b7a2:	0a1b      	lsrs	r3, r3, #8
 800b7a4:	b29b      	uxth	r3, r3
 800b7a6:	3b01      	subs	r3, #1
 800b7a8:	2b0e      	cmp	r3, #14
 800b7aa:	f200 8152 	bhi.w	800ba52 <USBD_GetDescriptor+0x2ca>
 800b7ae:	a201      	add	r2, pc, #4	; (adr r2, 800b7b4 <USBD_GetDescriptor+0x2c>)
 800b7b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7b4:	0800b825 	.word	0x0800b825
 800b7b8:	0800b83d 	.word	0x0800b83d
 800b7bc:	0800b87d 	.word	0x0800b87d
 800b7c0:	0800ba53 	.word	0x0800ba53
 800b7c4:	0800ba53 	.word	0x0800ba53
 800b7c8:	0800b9f3 	.word	0x0800b9f3
 800b7cc:	0800ba1f 	.word	0x0800ba1f
 800b7d0:	0800ba53 	.word	0x0800ba53
 800b7d4:	0800ba53 	.word	0x0800ba53
 800b7d8:	0800ba53 	.word	0x0800ba53
 800b7dc:	0800ba53 	.word	0x0800ba53
 800b7e0:	0800ba53 	.word	0x0800ba53
 800b7e4:	0800ba53 	.word	0x0800ba53
 800b7e8:	0800ba53 	.word	0x0800ba53
 800b7ec:	0800b7f1 	.word	0x0800b7f1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7f6:	69db      	ldr	r3, [r3, #28]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d00b      	beq.n	800b814 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b802:	69db      	ldr	r3, [r3, #28]
 800b804:	687a      	ldr	r2, [r7, #4]
 800b806:	7c12      	ldrb	r2, [r2, #16]
 800b808:	f107 0108 	add.w	r1, r7, #8
 800b80c:	4610      	mov	r0, r2
 800b80e:	4798      	blx	r3
 800b810:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b812:	e126      	b.n	800ba62 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b814:	6839      	ldr	r1, [r7, #0]
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f000 fb27 	bl	800be6a <USBD_CtlError>
        err++;
 800b81c:	7afb      	ldrb	r3, [r7, #11]
 800b81e:	3301      	adds	r3, #1
 800b820:	72fb      	strb	r3, [r7, #11]
      break;
 800b822:	e11e      	b.n	800ba62 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	687a      	ldr	r2, [r7, #4]
 800b82e:	7c12      	ldrb	r2, [r2, #16]
 800b830:	f107 0108 	add.w	r1, r7, #8
 800b834:	4610      	mov	r0, r2
 800b836:	4798      	blx	r3
 800b838:	60f8      	str	r0, [r7, #12]
      break;
 800b83a:	e112      	b.n	800ba62 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	7c1b      	ldrb	r3, [r3, #16]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d10d      	bne.n	800b860 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b84a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b84c:	f107 0208 	add.w	r2, r7, #8
 800b850:	4610      	mov	r0, r2
 800b852:	4798      	blx	r3
 800b854:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	3301      	adds	r3, #1
 800b85a:	2202      	movs	r2, #2
 800b85c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b85e:	e100      	b.n	800ba62 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b868:	f107 0208 	add.w	r2, r7, #8
 800b86c:	4610      	mov	r0, r2
 800b86e:	4798      	blx	r3
 800b870:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	3301      	adds	r3, #1
 800b876:	2202      	movs	r2, #2
 800b878:	701a      	strb	r2, [r3, #0]
      break;
 800b87a:	e0f2      	b.n	800ba62 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	885b      	ldrh	r3, [r3, #2]
 800b880:	b2db      	uxtb	r3, r3
 800b882:	2b05      	cmp	r3, #5
 800b884:	f200 80ac 	bhi.w	800b9e0 <USBD_GetDescriptor+0x258>
 800b888:	a201      	add	r2, pc, #4	; (adr r2, 800b890 <USBD_GetDescriptor+0x108>)
 800b88a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b88e:	bf00      	nop
 800b890:	0800b8a9 	.word	0x0800b8a9
 800b894:	0800b8dd 	.word	0x0800b8dd
 800b898:	0800b911 	.word	0x0800b911
 800b89c:	0800b945 	.word	0x0800b945
 800b8a0:	0800b979 	.word	0x0800b979
 800b8a4:	0800b9ad 	.word	0x0800b9ad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8ae:	685b      	ldr	r3, [r3, #4]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d00b      	beq.n	800b8cc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8ba:	685b      	ldr	r3, [r3, #4]
 800b8bc:	687a      	ldr	r2, [r7, #4]
 800b8be:	7c12      	ldrb	r2, [r2, #16]
 800b8c0:	f107 0108 	add.w	r1, r7, #8
 800b8c4:	4610      	mov	r0, r2
 800b8c6:	4798      	blx	r3
 800b8c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8ca:	e091      	b.n	800b9f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b8cc:	6839      	ldr	r1, [r7, #0]
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f000 facb 	bl	800be6a <USBD_CtlError>
            err++;
 800b8d4:	7afb      	ldrb	r3, [r7, #11]
 800b8d6:	3301      	adds	r3, #1
 800b8d8:	72fb      	strb	r3, [r7, #11]
          break;
 800b8da:	e089      	b.n	800b9f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8e2:	689b      	ldr	r3, [r3, #8]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d00b      	beq.n	800b900 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8ee:	689b      	ldr	r3, [r3, #8]
 800b8f0:	687a      	ldr	r2, [r7, #4]
 800b8f2:	7c12      	ldrb	r2, [r2, #16]
 800b8f4:	f107 0108 	add.w	r1, r7, #8
 800b8f8:	4610      	mov	r0, r2
 800b8fa:	4798      	blx	r3
 800b8fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8fe:	e077      	b.n	800b9f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b900:	6839      	ldr	r1, [r7, #0]
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f000 fab1 	bl	800be6a <USBD_CtlError>
            err++;
 800b908:	7afb      	ldrb	r3, [r7, #11]
 800b90a:	3301      	adds	r3, #1
 800b90c:	72fb      	strb	r3, [r7, #11]
          break;
 800b90e:	e06f      	b.n	800b9f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b916:	68db      	ldr	r3, [r3, #12]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d00b      	beq.n	800b934 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b922:	68db      	ldr	r3, [r3, #12]
 800b924:	687a      	ldr	r2, [r7, #4]
 800b926:	7c12      	ldrb	r2, [r2, #16]
 800b928:	f107 0108 	add.w	r1, r7, #8
 800b92c:	4610      	mov	r0, r2
 800b92e:	4798      	blx	r3
 800b930:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b932:	e05d      	b.n	800b9f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b934:	6839      	ldr	r1, [r7, #0]
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f000 fa97 	bl	800be6a <USBD_CtlError>
            err++;
 800b93c:	7afb      	ldrb	r3, [r7, #11]
 800b93e:	3301      	adds	r3, #1
 800b940:	72fb      	strb	r3, [r7, #11]
          break;
 800b942:	e055      	b.n	800b9f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b94a:	691b      	ldr	r3, [r3, #16]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d00b      	beq.n	800b968 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b956:	691b      	ldr	r3, [r3, #16]
 800b958:	687a      	ldr	r2, [r7, #4]
 800b95a:	7c12      	ldrb	r2, [r2, #16]
 800b95c:	f107 0108 	add.w	r1, r7, #8
 800b960:	4610      	mov	r0, r2
 800b962:	4798      	blx	r3
 800b964:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b966:	e043      	b.n	800b9f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b968:	6839      	ldr	r1, [r7, #0]
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f000 fa7d 	bl	800be6a <USBD_CtlError>
            err++;
 800b970:	7afb      	ldrb	r3, [r7, #11]
 800b972:	3301      	adds	r3, #1
 800b974:	72fb      	strb	r3, [r7, #11]
          break;
 800b976:	e03b      	b.n	800b9f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b97e:	695b      	ldr	r3, [r3, #20]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d00b      	beq.n	800b99c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b98a:	695b      	ldr	r3, [r3, #20]
 800b98c:	687a      	ldr	r2, [r7, #4]
 800b98e:	7c12      	ldrb	r2, [r2, #16]
 800b990:	f107 0108 	add.w	r1, r7, #8
 800b994:	4610      	mov	r0, r2
 800b996:	4798      	blx	r3
 800b998:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b99a:	e029      	b.n	800b9f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b99c:	6839      	ldr	r1, [r7, #0]
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f000 fa63 	bl	800be6a <USBD_CtlError>
            err++;
 800b9a4:	7afb      	ldrb	r3, [r7, #11]
 800b9a6:	3301      	adds	r3, #1
 800b9a8:	72fb      	strb	r3, [r7, #11]
          break;
 800b9aa:	e021      	b.n	800b9f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9b2:	699b      	ldr	r3, [r3, #24]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d00b      	beq.n	800b9d0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9be:	699b      	ldr	r3, [r3, #24]
 800b9c0:	687a      	ldr	r2, [r7, #4]
 800b9c2:	7c12      	ldrb	r2, [r2, #16]
 800b9c4:	f107 0108 	add.w	r1, r7, #8
 800b9c8:	4610      	mov	r0, r2
 800b9ca:	4798      	blx	r3
 800b9cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b9ce:	e00f      	b.n	800b9f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b9d0:	6839      	ldr	r1, [r7, #0]
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	f000 fa49 	bl	800be6a <USBD_CtlError>
            err++;
 800b9d8:	7afb      	ldrb	r3, [r7, #11]
 800b9da:	3301      	adds	r3, #1
 800b9dc:	72fb      	strb	r3, [r7, #11]
          break;
 800b9de:	e007      	b.n	800b9f0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b9e0:	6839      	ldr	r1, [r7, #0]
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f000 fa41 	bl	800be6a <USBD_CtlError>
          err++;
 800b9e8:	7afb      	ldrb	r3, [r7, #11]
 800b9ea:	3301      	adds	r3, #1
 800b9ec:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b9ee:	bf00      	nop
      }
      break;
 800b9f0:	e037      	b.n	800ba62 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	7c1b      	ldrb	r3, [r3, #16]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d109      	bne.n	800ba0e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba02:	f107 0208 	add.w	r2, r7, #8
 800ba06:	4610      	mov	r0, r2
 800ba08:	4798      	blx	r3
 800ba0a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ba0c:	e029      	b.n	800ba62 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ba0e:	6839      	ldr	r1, [r7, #0]
 800ba10:	6878      	ldr	r0, [r7, #4]
 800ba12:	f000 fa2a 	bl	800be6a <USBD_CtlError>
        err++;
 800ba16:	7afb      	ldrb	r3, [r7, #11]
 800ba18:	3301      	adds	r3, #1
 800ba1a:	72fb      	strb	r3, [r7, #11]
      break;
 800ba1c:	e021      	b.n	800ba62 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	7c1b      	ldrb	r3, [r3, #16]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d10d      	bne.n	800ba42 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba2e:	f107 0208 	add.w	r2, r7, #8
 800ba32:	4610      	mov	r0, r2
 800ba34:	4798      	blx	r3
 800ba36:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	3301      	adds	r3, #1
 800ba3c:	2207      	movs	r2, #7
 800ba3e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ba40:	e00f      	b.n	800ba62 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ba42:	6839      	ldr	r1, [r7, #0]
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f000 fa10 	bl	800be6a <USBD_CtlError>
        err++;
 800ba4a:	7afb      	ldrb	r3, [r7, #11]
 800ba4c:	3301      	adds	r3, #1
 800ba4e:	72fb      	strb	r3, [r7, #11]
      break;
 800ba50:	e007      	b.n	800ba62 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ba52:	6839      	ldr	r1, [r7, #0]
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	f000 fa08 	bl	800be6a <USBD_CtlError>
      err++;
 800ba5a:	7afb      	ldrb	r3, [r7, #11]
 800ba5c:	3301      	adds	r3, #1
 800ba5e:	72fb      	strb	r3, [r7, #11]
      break;
 800ba60:	bf00      	nop
  }

  if (err != 0U)
 800ba62:	7afb      	ldrb	r3, [r7, #11]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d11e      	bne.n	800baa6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	88db      	ldrh	r3, [r3, #6]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d016      	beq.n	800ba9e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ba70:	893b      	ldrh	r3, [r7, #8]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d00e      	beq.n	800ba94 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	88da      	ldrh	r2, [r3, #6]
 800ba7a:	893b      	ldrh	r3, [r7, #8]
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	bf28      	it	cs
 800ba80:	4613      	movcs	r3, r2
 800ba82:	b29b      	uxth	r3, r3
 800ba84:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ba86:	893b      	ldrh	r3, [r7, #8]
 800ba88:	461a      	mov	r2, r3
 800ba8a:	68f9      	ldr	r1, [r7, #12]
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f000 fa5d 	bl	800bf4c <USBD_CtlSendData>
 800ba92:	e009      	b.n	800baa8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ba94:	6839      	ldr	r1, [r7, #0]
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f000 f9e7 	bl	800be6a <USBD_CtlError>
 800ba9c:	e004      	b.n	800baa8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f000 faae 	bl	800c000 <USBD_CtlSendStatus>
 800baa4:	e000      	b.n	800baa8 <USBD_GetDescriptor+0x320>
    return;
 800baa6:	bf00      	nop
  }
}
 800baa8:	3710      	adds	r7, #16
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}
 800baae:	bf00      	nop

0800bab0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b084      	sub	sp, #16
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
 800bab8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	889b      	ldrh	r3, [r3, #4]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d131      	bne.n	800bb26 <USBD_SetAddress+0x76>
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	88db      	ldrh	r3, [r3, #6]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d12d      	bne.n	800bb26 <USBD_SetAddress+0x76>
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	885b      	ldrh	r3, [r3, #2]
 800bace:	2b7f      	cmp	r3, #127	; 0x7f
 800bad0:	d829      	bhi.n	800bb26 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	885b      	ldrh	r3, [r3, #2]
 800bad6:	b2db      	uxtb	r3, r3
 800bad8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800badc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bae4:	b2db      	uxtb	r3, r3
 800bae6:	2b03      	cmp	r3, #3
 800bae8:	d104      	bne.n	800baf4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800baea:	6839      	ldr	r1, [r7, #0]
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f000 f9bc 	bl	800be6a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800baf2:	e01d      	b.n	800bb30 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	7bfa      	ldrb	r2, [r7, #15]
 800baf8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bafc:	7bfb      	ldrb	r3, [r7, #15]
 800bafe:	4619      	mov	r1, r3
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	f000 ff2b 	bl	800c95c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f000 fa7a 	bl	800c000 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bb0c:	7bfb      	ldrb	r3, [r7, #15]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d004      	beq.n	800bb1c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	2202      	movs	r2, #2
 800bb16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb1a:	e009      	b.n	800bb30 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2201      	movs	r2, #1
 800bb20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb24:	e004      	b.n	800bb30 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bb26:	6839      	ldr	r1, [r7, #0]
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	f000 f99e 	bl	800be6a <USBD_CtlError>
  }
}
 800bb2e:	bf00      	nop
 800bb30:	bf00      	nop
 800bb32:	3710      	adds	r7, #16
 800bb34:	46bd      	mov	sp, r7
 800bb36:	bd80      	pop	{r7, pc}

0800bb38 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b084      	sub	sp, #16
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
 800bb40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb42:	2300      	movs	r3, #0
 800bb44:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	885b      	ldrh	r3, [r3, #2]
 800bb4a:	b2da      	uxtb	r2, r3
 800bb4c:	4b4e      	ldr	r3, [pc, #312]	; (800bc88 <USBD_SetConfig+0x150>)
 800bb4e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bb50:	4b4d      	ldr	r3, [pc, #308]	; (800bc88 <USBD_SetConfig+0x150>)
 800bb52:	781b      	ldrb	r3, [r3, #0]
 800bb54:	2b01      	cmp	r3, #1
 800bb56:	d905      	bls.n	800bb64 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bb58:	6839      	ldr	r1, [r7, #0]
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	f000 f985 	bl	800be6a <USBD_CtlError>
    return USBD_FAIL;
 800bb60:	2303      	movs	r3, #3
 800bb62:	e08c      	b.n	800bc7e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb6a:	b2db      	uxtb	r3, r3
 800bb6c:	2b02      	cmp	r3, #2
 800bb6e:	d002      	beq.n	800bb76 <USBD_SetConfig+0x3e>
 800bb70:	2b03      	cmp	r3, #3
 800bb72:	d029      	beq.n	800bbc8 <USBD_SetConfig+0x90>
 800bb74:	e075      	b.n	800bc62 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bb76:	4b44      	ldr	r3, [pc, #272]	; (800bc88 <USBD_SetConfig+0x150>)
 800bb78:	781b      	ldrb	r3, [r3, #0]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d020      	beq.n	800bbc0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800bb7e:	4b42      	ldr	r3, [pc, #264]	; (800bc88 <USBD_SetConfig+0x150>)
 800bb80:	781b      	ldrb	r3, [r3, #0]
 800bb82:	461a      	mov	r2, r3
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bb88:	4b3f      	ldr	r3, [pc, #252]	; (800bc88 <USBD_SetConfig+0x150>)
 800bb8a:	781b      	ldrb	r3, [r3, #0]
 800bb8c:	4619      	mov	r1, r3
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f7fe ffb7 	bl	800ab02 <USBD_SetClassConfig>
 800bb94:	4603      	mov	r3, r0
 800bb96:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bb98:	7bfb      	ldrb	r3, [r7, #15]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d008      	beq.n	800bbb0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bb9e:	6839      	ldr	r1, [r7, #0]
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f000 f962 	bl	800be6a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	2202      	movs	r2, #2
 800bbaa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bbae:	e065      	b.n	800bc7c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f000 fa25 	bl	800c000 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2203      	movs	r2, #3
 800bbba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bbbe:	e05d      	b.n	800bc7c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f000 fa1d 	bl	800c000 <USBD_CtlSendStatus>
      break;
 800bbc6:	e059      	b.n	800bc7c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bbc8:	4b2f      	ldr	r3, [pc, #188]	; (800bc88 <USBD_SetConfig+0x150>)
 800bbca:	781b      	ldrb	r3, [r3, #0]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d112      	bne.n	800bbf6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2202      	movs	r2, #2
 800bbd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800bbd8:	4b2b      	ldr	r3, [pc, #172]	; (800bc88 <USBD_SetConfig+0x150>)
 800bbda:	781b      	ldrb	r3, [r3, #0]
 800bbdc:	461a      	mov	r2, r3
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bbe2:	4b29      	ldr	r3, [pc, #164]	; (800bc88 <USBD_SetConfig+0x150>)
 800bbe4:	781b      	ldrb	r3, [r3, #0]
 800bbe6:	4619      	mov	r1, r3
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	f7fe ffa6 	bl	800ab3a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f000 fa06 	bl	800c000 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bbf4:	e042      	b.n	800bc7c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800bbf6:	4b24      	ldr	r3, [pc, #144]	; (800bc88 <USBD_SetConfig+0x150>)
 800bbf8:	781b      	ldrb	r3, [r3, #0]
 800bbfa:	461a      	mov	r2, r3
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	685b      	ldr	r3, [r3, #4]
 800bc00:	429a      	cmp	r2, r3
 800bc02:	d02a      	beq.n	800bc5a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	685b      	ldr	r3, [r3, #4]
 800bc08:	b2db      	uxtb	r3, r3
 800bc0a:	4619      	mov	r1, r3
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f7fe ff94 	bl	800ab3a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bc12:	4b1d      	ldr	r3, [pc, #116]	; (800bc88 <USBD_SetConfig+0x150>)
 800bc14:	781b      	ldrb	r3, [r3, #0]
 800bc16:	461a      	mov	r2, r3
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bc1c:	4b1a      	ldr	r3, [pc, #104]	; (800bc88 <USBD_SetConfig+0x150>)
 800bc1e:	781b      	ldrb	r3, [r3, #0]
 800bc20:	4619      	mov	r1, r3
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f7fe ff6d 	bl	800ab02 <USBD_SetClassConfig>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bc2c:	7bfb      	ldrb	r3, [r7, #15]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d00f      	beq.n	800bc52 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800bc32:	6839      	ldr	r1, [r7, #0]
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	f000 f918 	bl	800be6a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	685b      	ldr	r3, [r3, #4]
 800bc3e:	b2db      	uxtb	r3, r3
 800bc40:	4619      	mov	r1, r3
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f7fe ff79 	bl	800ab3a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2202      	movs	r2, #2
 800bc4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bc50:	e014      	b.n	800bc7c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f000 f9d4 	bl	800c000 <USBD_CtlSendStatus>
      break;
 800bc58:	e010      	b.n	800bc7c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	f000 f9d0 	bl	800c000 <USBD_CtlSendStatus>
      break;
 800bc60:	e00c      	b.n	800bc7c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800bc62:	6839      	ldr	r1, [r7, #0]
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	f000 f900 	bl	800be6a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bc6a:	4b07      	ldr	r3, [pc, #28]	; (800bc88 <USBD_SetConfig+0x150>)
 800bc6c:	781b      	ldrb	r3, [r3, #0]
 800bc6e:	4619      	mov	r1, r3
 800bc70:	6878      	ldr	r0, [r7, #4]
 800bc72:	f7fe ff62 	bl	800ab3a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bc76:	2303      	movs	r3, #3
 800bc78:	73fb      	strb	r3, [r7, #15]
      break;
 800bc7a:	bf00      	nop
  }

  return ret;
 800bc7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3710      	adds	r7, #16
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}
 800bc86:	bf00      	nop
 800bc88:	2400f1f8 	.word	0x2400f1f8

0800bc8c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b082      	sub	sp, #8
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
 800bc94:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	88db      	ldrh	r3, [r3, #6]
 800bc9a:	2b01      	cmp	r3, #1
 800bc9c:	d004      	beq.n	800bca8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bc9e:	6839      	ldr	r1, [r7, #0]
 800bca0:	6878      	ldr	r0, [r7, #4]
 800bca2:	f000 f8e2 	bl	800be6a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bca6:	e023      	b.n	800bcf0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcae:	b2db      	uxtb	r3, r3
 800bcb0:	2b02      	cmp	r3, #2
 800bcb2:	dc02      	bgt.n	800bcba <USBD_GetConfig+0x2e>
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	dc03      	bgt.n	800bcc0 <USBD_GetConfig+0x34>
 800bcb8:	e015      	b.n	800bce6 <USBD_GetConfig+0x5a>
 800bcba:	2b03      	cmp	r3, #3
 800bcbc:	d00b      	beq.n	800bcd6 <USBD_GetConfig+0x4a>
 800bcbe:	e012      	b.n	800bce6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	3308      	adds	r3, #8
 800bcca:	2201      	movs	r2, #1
 800bccc:	4619      	mov	r1, r3
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f000 f93c 	bl	800bf4c <USBD_CtlSendData>
        break;
 800bcd4:	e00c      	b.n	800bcf0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	3304      	adds	r3, #4
 800bcda:	2201      	movs	r2, #1
 800bcdc:	4619      	mov	r1, r3
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	f000 f934 	bl	800bf4c <USBD_CtlSendData>
        break;
 800bce4:	e004      	b.n	800bcf0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bce6:	6839      	ldr	r1, [r7, #0]
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	f000 f8be 	bl	800be6a <USBD_CtlError>
        break;
 800bcee:	bf00      	nop
}
 800bcf0:	bf00      	nop
 800bcf2:	3708      	adds	r7, #8
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}

0800bcf8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b082      	sub	sp, #8
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
 800bd00:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd08:	b2db      	uxtb	r3, r3
 800bd0a:	3b01      	subs	r3, #1
 800bd0c:	2b02      	cmp	r3, #2
 800bd0e:	d81e      	bhi.n	800bd4e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	88db      	ldrh	r3, [r3, #6]
 800bd14:	2b02      	cmp	r3, #2
 800bd16:	d004      	beq.n	800bd22 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bd18:	6839      	ldr	r1, [r7, #0]
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f000 f8a5 	bl	800be6a <USBD_CtlError>
        break;
 800bd20:	e01a      	b.n	800bd58 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2201      	movs	r2, #1
 800bd26:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d005      	beq.n	800bd3e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	68db      	ldr	r3, [r3, #12]
 800bd36:	f043 0202 	orr.w	r2, r3, #2
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	330c      	adds	r3, #12
 800bd42:	2202      	movs	r2, #2
 800bd44:	4619      	mov	r1, r3
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	f000 f900 	bl	800bf4c <USBD_CtlSendData>
      break;
 800bd4c:	e004      	b.n	800bd58 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bd4e:	6839      	ldr	r1, [r7, #0]
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	f000 f88a 	bl	800be6a <USBD_CtlError>
      break;
 800bd56:	bf00      	nop
  }
}
 800bd58:	bf00      	nop
 800bd5a:	3708      	adds	r7, #8
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}

0800bd60 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b082      	sub	sp, #8
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
 800bd68:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	885b      	ldrh	r3, [r3, #2]
 800bd6e:	2b01      	cmp	r3, #1
 800bd70:	d107      	bne.n	800bd82 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2201      	movs	r2, #1
 800bd76:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	f000 f940 	bl	800c000 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800bd80:	e013      	b.n	800bdaa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	885b      	ldrh	r3, [r3, #2]
 800bd86:	2b02      	cmp	r3, #2
 800bd88:	d10b      	bne.n	800bda2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	889b      	ldrh	r3, [r3, #4]
 800bd8e:	0a1b      	lsrs	r3, r3, #8
 800bd90:	b29b      	uxth	r3, r3
 800bd92:	b2da      	uxtb	r2, r3
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f000 f930 	bl	800c000 <USBD_CtlSendStatus>
}
 800bda0:	e003      	b.n	800bdaa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800bda2:	6839      	ldr	r1, [r7, #0]
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	f000 f860 	bl	800be6a <USBD_CtlError>
}
 800bdaa:	bf00      	nop
 800bdac:	3708      	adds	r7, #8
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}

0800bdb2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdb2:	b580      	push	{r7, lr}
 800bdb4:	b082      	sub	sp, #8
 800bdb6:	af00      	add	r7, sp, #0
 800bdb8:	6078      	str	r0, [r7, #4]
 800bdba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdc2:	b2db      	uxtb	r3, r3
 800bdc4:	3b01      	subs	r3, #1
 800bdc6:	2b02      	cmp	r3, #2
 800bdc8:	d80b      	bhi.n	800bde2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	885b      	ldrh	r3, [r3, #2]
 800bdce:	2b01      	cmp	r3, #1
 800bdd0:	d10c      	bne.n	800bdec <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f000 f910 	bl	800c000 <USBD_CtlSendStatus>
      }
      break;
 800bde0:	e004      	b.n	800bdec <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bde2:	6839      	ldr	r1, [r7, #0]
 800bde4:	6878      	ldr	r0, [r7, #4]
 800bde6:	f000 f840 	bl	800be6a <USBD_CtlError>
      break;
 800bdea:	e000      	b.n	800bdee <USBD_ClrFeature+0x3c>
      break;
 800bdec:	bf00      	nop
  }
}
 800bdee:	bf00      	nop
 800bdf0:	3708      	adds	r7, #8
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}

0800bdf6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bdf6:	b580      	push	{r7, lr}
 800bdf8:	b084      	sub	sp, #16
 800bdfa:	af00      	add	r7, sp, #0
 800bdfc:	6078      	str	r0, [r7, #4]
 800bdfe:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	781a      	ldrb	r2, [r3, #0]
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	3301      	adds	r3, #1
 800be10:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	781a      	ldrb	r2, [r3, #0]
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	3301      	adds	r3, #1
 800be1e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800be20:	68f8      	ldr	r0, [r7, #12]
 800be22:	f7ff fa17 	bl	800b254 <SWAPBYTE>
 800be26:	4603      	mov	r3, r0
 800be28:	461a      	mov	r2, r3
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	3301      	adds	r3, #1
 800be32:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	3301      	adds	r3, #1
 800be38:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800be3a:	68f8      	ldr	r0, [r7, #12]
 800be3c:	f7ff fa0a 	bl	800b254 <SWAPBYTE>
 800be40:	4603      	mov	r3, r0
 800be42:	461a      	mov	r2, r3
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	3301      	adds	r3, #1
 800be4c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	3301      	adds	r3, #1
 800be52:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800be54:	68f8      	ldr	r0, [r7, #12]
 800be56:	f7ff f9fd 	bl	800b254 <SWAPBYTE>
 800be5a:	4603      	mov	r3, r0
 800be5c:	461a      	mov	r2, r3
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	80da      	strh	r2, [r3, #6]
}
 800be62:	bf00      	nop
 800be64:	3710      	adds	r7, #16
 800be66:	46bd      	mov	sp, r7
 800be68:	bd80      	pop	{r7, pc}

0800be6a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be6a:	b580      	push	{r7, lr}
 800be6c:	b082      	sub	sp, #8
 800be6e:	af00      	add	r7, sp, #0
 800be70:	6078      	str	r0, [r7, #4]
 800be72:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800be74:	2180      	movs	r1, #128	; 0x80
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f000 fd06 	bl	800c888 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800be7c:	2100      	movs	r1, #0
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f000 fd02 	bl	800c888 <USBD_LL_StallEP>
}
 800be84:	bf00      	nop
 800be86:	3708      	adds	r7, #8
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd80      	pop	{r7, pc}

0800be8c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b086      	sub	sp, #24
 800be90:	af00      	add	r7, sp, #0
 800be92:	60f8      	str	r0, [r7, #12]
 800be94:	60b9      	str	r1, [r7, #8]
 800be96:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800be98:	2300      	movs	r3, #0
 800be9a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d036      	beq.n	800bf10 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bea6:	6938      	ldr	r0, [r7, #16]
 800bea8:	f000 f836 	bl	800bf18 <USBD_GetLen>
 800beac:	4603      	mov	r3, r0
 800beae:	3301      	adds	r3, #1
 800beb0:	b29b      	uxth	r3, r3
 800beb2:	005b      	lsls	r3, r3, #1
 800beb4:	b29a      	uxth	r2, r3
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800beba:	7dfb      	ldrb	r3, [r7, #23]
 800bebc:	68ba      	ldr	r2, [r7, #8]
 800bebe:	4413      	add	r3, r2
 800bec0:	687a      	ldr	r2, [r7, #4]
 800bec2:	7812      	ldrb	r2, [r2, #0]
 800bec4:	701a      	strb	r2, [r3, #0]
  idx++;
 800bec6:	7dfb      	ldrb	r3, [r7, #23]
 800bec8:	3301      	adds	r3, #1
 800beca:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800becc:	7dfb      	ldrb	r3, [r7, #23]
 800bece:	68ba      	ldr	r2, [r7, #8]
 800bed0:	4413      	add	r3, r2
 800bed2:	2203      	movs	r2, #3
 800bed4:	701a      	strb	r2, [r3, #0]
  idx++;
 800bed6:	7dfb      	ldrb	r3, [r7, #23]
 800bed8:	3301      	adds	r3, #1
 800beda:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bedc:	e013      	b.n	800bf06 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bede:	7dfb      	ldrb	r3, [r7, #23]
 800bee0:	68ba      	ldr	r2, [r7, #8]
 800bee2:	4413      	add	r3, r2
 800bee4:	693a      	ldr	r2, [r7, #16]
 800bee6:	7812      	ldrb	r2, [r2, #0]
 800bee8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800beea:	693b      	ldr	r3, [r7, #16]
 800beec:	3301      	adds	r3, #1
 800beee:	613b      	str	r3, [r7, #16]
    idx++;
 800bef0:	7dfb      	ldrb	r3, [r7, #23]
 800bef2:	3301      	adds	r3, #1
 800bef4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bef6:	7dfb      	ldrb	r3, [r7, #23]
 800bef8:	68ba      	ldr	r2, [r7, #8]
 800befa:	4413      	add	r3, r2
 800befc:	2200      	movs	r2, #0
 800befe:	701a      	strb	r2, [r3, #0]
    idx++;
 800bf00:	7dfb      	ldrb	r3, [r7, #23]
 800bf02:	3301      	adds	r3, #1
 800bf04:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bf06:	693b      	ldr	r3, [r7, #16]
 800bf08:	781b      	ldrb	r3, [r3, #0]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d1e7      	bne.n	800bede <USBD_GetString+0x52>
 800bf0e:	e000      	b.n	800bf12 <USBD_GetString+0x86>
    return;
 800bf10:	bf00      	nop
  }
}
 800bf12:	3718      	adds	r7, #24
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}

0800bf18 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bf18:	b480      	push	{r7}
 800bf1a:	b085      	sub	sp, #20
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bf20:	2300      	movs	r3, #0
 800bf22:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bf28:	e005      	b.n	800bf36 <USBD_GetLen+0x1e>
  {
    len++;
 800bf2a:	7bfb      	ldrb	r3, [r7, #15]
 800bf2c:	3301      	adds	r3, #1
 800bf2e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	3301      	adds	r3, #1
 800bf34:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	781b      	ldrb	r3, [r3, #0]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d1f5      	bne.n	800bf2a <USBD_GetLen+0x12>
  }

  return len;
 800bf3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	3714      	adds	r7, #20
 800bf44:	46bd      	mov	sp, r7
 800bf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4a:	4770      	bx	lr

0800bf4c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b084      	sub	sp, #16
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	60f8      	str	r0, [r7, #12]
 800bf54:	60b9      	str	r1, [r7, #8]
 800bf56:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	2202      	movs	r2, #2
 800bf5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	687a      	ldr	r2, [r7, #4]
 800bf64:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	687a      	ldr	r2, [r7, #4]
 800bf6a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	68ba      	ldr	r2, [r7, #8]
 800bf70:	2100      	movs	r1, #0
 800bf72:	68f8      	ldr	r0, [r7, #12]
 800bf74:	f000 fd11 	bl	800c99a <USBD_LL_Transmit>

  return USBD_OK;
 800bf78:	2300      	movs	r3, #0
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	3710      	adds	r7, #16
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}

0800bf82 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bf82:	b580      	push	{r7, lr}
 800bf84:	b084      	sub	sp, #16
 800bf86:	af00      	add	r7, sp, #0
 800bf88:	60f8      	str	r0, [r7, #12]
 800bf8a:	60b9      	str	r1, [r7, #8]
 800bf8c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	68ba      	ldr	r2, [r7, #8]
 800bf92:	2100      	movs	r1, #0
 800bf94:	68f8      	ldr	r0, [r7, #12]
 800bf96:	f000 fd00 	bl	800c99a <USBD_LL_Transmit>

  return USBD_OK;
 800bf9a:	2300      	movs	r3, #0
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3710      	adds	r7, #16
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}

0800bfa4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b084      	sub	sp, #16
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	60f8      	str	r0, [r7, #12]
 800bfac:	60b9      	str	r1, [r7, #8]
 800bfae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	2203      	movs	r2, #3
 800bfb4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	687a      	ldr	r2, [r7, #4]
 800bfbc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	687a      	ldr	r2, [r7, #4]
 800bfc4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	68ba      	ldr	r2, [r7, #8]
 800bfcc:	2100      	movs	r1, #0
 800bfce:	68f8      	ldr	r0, [r7, #12]
 800bfd0:	f000 fd04 	bl	800c9dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bfd4:	2300      	movs	r3, #0
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3710      	adds	r7, #16
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}

0800bfde <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bfde:	b580      	push	{r7, lr}
 800bfe0:	b084      	sub	sp, #16
 800bfe2:	af00      	add	r7, sp, #0
 800bfe4:	60f8      	str	r0, [r7, #12]
 800bfe6:	60b9      	str	r1, [r7, #8]
 800bfe8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	68ba      	ldr	r2, [r7, #8]
 800bfee:	2100      	movs	r1, #0
 800bff0:	68f8      	ldr	r0, [r7, #12]
 800bff2:	f000 fcf3 	bl	800c9dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bff6:	2300      	movs	r3, #0
}
 800bff8:	4618      	mov	r0, r3
 800bffa:	3710      	adds	r7, #16
 800bffc:	46bd      	mov	sp, r7
 800bffe:	bd80      	pop	{r7, pc}

0800c000 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b082      	sub	sp, #8
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2204      	movs	r2, #4
 800c00c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c010:	2300      	movs	r3, #0
 800c012:	2200      	movs	r2, #0
 800c014:	2100      	movs	r1, #0
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	f000 fcbf 	bl	800c99a <USBD_LL_Transmit>

  return USBD_OK;
 800c01c:	2300      	movs	r3, #0
}
 800c01e:	4618      	mov	r0, r3
 800c020:	3708      	adds	r7, #8
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}

0800c026 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c026:	b580      	push	{r7, lr}
 800c028:	b082      	sub	sp, #8
 800c02a:	af00      	add	r7, sp, #0
 800c02c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2205      	movs	r2, #5
 800c032:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c036:	2300      	movs	r3, #0
 800c038:	2200      	movs	r2, #0
 800c03a:	2100      	movs	r1, #0
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	f000 fccd 	bl	800c9dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c042:	2300      	movs	r3, #0
}
 800c044:	4618      	mov	r0, r3
 800c046:	3708      	adds	r7, #8
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}

0800c04c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c050:	2200      	movs	r2, #0
 800c052:	4913      	ldr	r1, [pc, #76]	; (800c0a0 <MX_USB_DEVICE_Init+0x54>)
 800c054:	4813      	ldr	r0, [pc, #76]	; (800c0a4 <MX_USB_DEVICE_Init+0x58>)
 800c056:	f7fe fcd7 	bl	800aa08 <USBD_Init>
 800c05a:	4603      	mov	r3, r0
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d001      	beq.n	800c064 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c060:	f7f5 fdec 	bl	8001c3c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c064:	4910      	ldr	r1, [pc, #64]	; (800c0a8 <MX_USB_DEVICE_Init+0x5c>)
 800c066:	480f      	ldr	r0, [pc, #60]	; (800c0a4 <MX_USB_DEVICE_Init+0x58>)
 800c068:	f7fe fcfe 	bl	800aa68 <USBD_RegisterClass>
 800c06c:	4603      	mov	r3, r0
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d001      	beq.n	800c076 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c072:	f7f5 fde3 	bl	8001c3c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c076:	490d      	ldr	r1, [pc, #52]	; (800c0ac <MX_USB_DEVICE_Init+0x60>)
 800c078:	480a      	ldr	r0, [pc, #40]	; (800c0a4 <MX_USB_DEVICE_Init+0x58>)
 800c07a:	f7fe fbf5 	bl	800a868 <USBD_CDC_RegisterInterface>
 800c07e:	4603      	mov	r3, r0
 800c080:	2b00      	cmp	r3, #0
 800c082:	d001      	beq.n	800c088 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c084:	f7f5 fdda 	bl	8001c3c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c088:	4806      	ldr	r0, [pc, #24]	; (800c0a4 <MX_USB_DEVICE_Init+0x58>)
 800c08a:	f7fe fd23 	bl	800aad4 <USBD_Start>
 800c08e:	4603      	mov	r3, r0
 800c090:	2b00      	cmp	r3, #0
 800c092:	d001      	beq.n	800c098 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c094:	f7f5 fdd2 	bl	8001c3c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800c098:	f7f8 ffb2 	bl	8005000 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c09c:	bf00      	nop
 800c09e:	bd80      	pop	{r7, pc}
 800c0a0:	240000f0 	.word	0x240000f0
 800c0a4:	2400f1fc 	.word	0x2400f1fc
 800c0a8:	2400005c 	.word	0x2400005c
 800c0ac:	240000dc 	.word	0x240000dc

0800c0b0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	4905      	ldr	r1, [pc, #20]	; (800c0cc <CDC_Init_FS+0x1c>)
 800c0b8:	4805      	ldr	r0, [pc, #20]	; (800c0d0 <CDC_Init_FS+0x20>)
 800c0ba:	f7fe fbef 	bl	800a89c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c0be:	4905      	ldr	r1, [pc, #20]	; (800c0d4 <CDC_Init_FS+0x24>)
 800c0c0:	4803      	ldr	r0, [pc, #12]	; (800c0d0 <CDC_Init_FS+0x20>)
 800c0c2:	f7fe fc0d 	bl	800a8e0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c0c6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	bd80      	pop	{r7, pc}
 800c0cc:	2400fcd8 	.word	0x2400fcd8
 800c0d0:	2400f1fc 	.word	0x2400f1fc
 800c0d4:	2400f4d8 	.word	0x2400f4d8

0800c0d8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c0d8:	b480      	push	{r7}
 800c0da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c0dc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e6:	4770      	bx	lr

0800c0e8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b083      	sub	sp, #12
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	6039      	str	r1, [r7, #0]
 800c0f2:	71fb      	strb	r3, [r7, #7]
 800c0f4:	4613      	mov	r3, r2
 800c0f6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c0f8:	79fb      	ldrb	r3, [r7, #7]
 800c0fa:	2b23      	cmp	r3, #35	; 0x23
 800c0fc:	d84a      	bhi.n	800c194 <CDC_Control_FS+0xac>
 800c0fe:	a201      	add	r2, pc, #4	; (adr r2, 800c104 <CDC_Control_FS+0x1c>)
 800c100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c104:	0800c195 	.word	0x0800c195
 800c108:	0800c195 	.word	0x0800c195
 800c10c:	0800c195 	.word	0x0800c195
 800c110:	0800c195 	.word	0x0800c195
 800c114:	0800c195 	.word	0x0800c195
 800c118:	0800c195 	.word	0x0800c195
 800c11c:	0800c195 	.word	0x0800c195
 800c120:	0800c195 	.word	0x0800c195
 800c124:	0800c195 	.word	0x0800c195
 800c128:	0800c195 	.word	0x0800c195
 800c12c:	0800c195 	.word	0x0800c195
 800c130:	0800c195 	.word	0x0800c195
 800c134:	0800c195 	.word	0x0800c195
 800c138:	0800c195 	.word	0x0800c195
 800c13c:	0800c195 	.word	0x0800c195
 800c140:	0800c195 	.word	0x0800c195
 800c144:	0800c195 	.word	0x0800c195
 800c148:	0800c195 	.word	0x0800c195
 800c14c:	0800c195 	.word	0x0800c195
 800c150:	0800c195 	.word	0x0800c195
 800c154:	0800c195 	.word	0x0800c195
 800c158:	0800c195 	.word	0x0800c195
 800c15c:	0800c195 	.word	0x0800c195
 800c160:	0800c195 	.word	0x0800c195
 800c164:	0800c195 	.word	0x0800c195
 800c168:	0800c195 	.word	0x0800c195
 800c16c:	0800c195 	.word	0x0800c195
 800c170:	0800c195 	.word	0x0800c195
 800c174:	0800c195 	.word	0x0800c195
 800c178:	0800c195 	.word	0x0800c195
 800c17c:	0800c195 	.word	0x0800c195
 800c180:	0800c195 	.word	0x0800c195
 800c184:	0800c195 	.word	0x0800c195
 800c188:	0800c195 	.word	0x0800c195
 800c18c:	0800c195 	.word	0x0800c195
 800c190:	0800c195 	.word	0x0800c195
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c194:	bf00      	nop
  }

  return (USBD_OK);
 800c196:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c198:	4618      	mov	r0, r3
 800c19a:	370c      	adds	r7, #12
 800c19c:	46bd      	mov	sp, r7
 800c19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a2:	4770      	bx	lr

0800c1a4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b082      	sub	sp, #8
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
 800c1ac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c1ae:	6879      	ldr	r1, [r7, #4]
 800c1b0:	4805      	ldr	r0, [pc, #20]	; (800c1c8 <CDC_Receive_FS+0x24>)
 800c1b2:	f7fe fb95 	bl	800a8e0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c1b6:	4804      	ldr	r0, [pc, #16]	; (800c1c8 <CDC_Receive_FS+0x24>)
 800c1b8:	f7fe fbf0 	bl	800a99c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c1bc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3708      	adds	r7, #8
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}
 800c1c6:	bf00      	nop
 800c1c8:	2400f1fc 	.word	0x2400f1fc

0800c1cc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b084      	sub	sp, #16
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
 800c1d4:	460b      	mov	r3, r1
 800c1d6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c1d8:	2300      	movs	r3, #0
 800c1da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c1dc:	4b0d      	ldr	r3, [pc, #52]	; (800c214 <CDC_Transmit_FS+0x48>)
 800c1de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c1e2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d001      	beq.n	800c1f2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	e00b      	b.n	800c20a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c1f2:	887b      	ldrh	r3, [r7, #2]
 800c1f4:	461a      	mov	r2, r3
 800c1f6:	6879      	ldr	r1, [r7, #4]
 800c1f8:	4806      	ldr	r0, [pc, #24]	; (800c214 <CDC_Transmit_FS+0x48>)
 800c1fa:	f7fe fb4f 	bl	800a89c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c1fe:	4805      	ldr	r0, [pc, #20]	; (800c214 <CDC_Transmit_FS+0x48>)
 800c200:	f7fe fb8c 	bl	800a91c <USBD_CDC_TransmitPacket>
 800c204:	4603      	mov	r3, r0
 800c206:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c208:	7bfb      	ldrb	r3, [r7, #15]
}
 800c20a:	4618      	mov	r0, r3
 800c20c:	3710      	adds	r7, #16
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}
 800c212:	bf00      	nop
 800c214:	2400f1fc 	.word	0x2400f1fc

0800c218 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c218:	b480      	push	{r7}
 800c21a:	b087      	sub	sp, #28
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	60f8      	str	r0, [r7, #12]
 800c220:	60b9      	str	r1, [r7, #8]
 800c222:	4613      	mov	r3, r2
 800c224:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c226:	2300      	movs	r3, #0
 800c228:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c22a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c22e:	4618      	mov	r0, r3
 800c230:	371c      	adds	r7, #28
 800c232:	46bd      	mov	sp, r7
 800c234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c238:	4770      	bx	lr
	...

0800c23c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c23c:	b480      	push	{r7}
 800c23e:	b083      	sub	sp, #12
 800c240:	af00      	add	r7, sp, #0
 800c242:	4603      	mov	r3, r0
 800c244:	6039      	str	r1, [r7, #0]
 800c246:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	2212      	movs	r2, #18
 800c24c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c24e:	4b03      	ldr	r3, [pc, #12]	; (800c25c <USBD_FS_DeviceDescriptor+0x20>)
}
 800c250:	4618      	mov	r0, r3
 800c252:	370c      	adds	r7, #12
 800c254:	46bd      	mov	sp, r7
 800c256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25a:	4770      	bx	lr
 800c25c:	24000110 	.word	0x24000110

0800c260 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c260:	b480      	push	{r7}
 800c262:	b083      	sub	sp, #12
 800c264:	af00      	add	r7, sp, #0
 800c266:	4603      	mov	r3, r0
 800c268:	6039      	str	r1, [r7, #0]
 800c26a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	2204      	movs	r2, #4
 800c270:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c272:	4b03      	ldr	r3, [pc, #12]	; (800c280 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c274:	4618      	mov	r0, r3
 800c276:	370c      	adds	r7, #12
 800c278:	46bd      	mov	sp, r7
 800c27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27e:	4770      	bx	lr
 800c280:	24000124 	.word	0x24000124

0800c284 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b082      	sub	sp, #8
 800c288:	af00      	add	r7, sp, #0
 800c28a:	4603      	mov	r3, r0
 800c28c:	6039      	str	r1, [r7, #0]
 800c28e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c290:	79fb      	ldrb	r3, [r7, #7]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d105      	bne.n	800c2a2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c296:	683a      	ldr	r2, [r7, #0]
 800c298:	4907      	ldr	r1, [pc, #28]	; (800c2b8 <USBD_FS_ProductStrDescriptor+0x34>)
 800c29a:	4808      	ldr	r0, [pc, #32]	; (800c2bc <USBD_FS_ProductStrDescriptor+0x38>)
 800c29c:	f7ff fdf6 	bl	800be8c <USBD_GetString>
 800c2a0:	e004      	b.n	800c2ac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c2a2:	683a      	ldr	r2, [r7, #0]
 800c2a4:	4904      	ldr	r1, [pc, #16]	; (800c2b8 <USBD_FS_ProductStrDescriptor+0x34>)
 800c2a6:	4805      	ldr	r0, [pc, #20]	; (800c2bc <USBD_FS_ProductStrDescriptor+0x38>)
 800c2a8:	f7ff fdf0 	bl	800be8c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c2ac:	4b02      	ldr	r3, [pc, #8]	; (800c2b8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	3708      	adds	r7, #8
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}
 800c2b6:	bf00      	nop
 800c2b8:	240104d8 	.word	0x240104d8
 800c2bc:	0800f708 	.word	0x0800f708

0800c2c0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b082      	sub	sp, #8
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	6039      	str	r1, [r7, #0]
 800c2ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c2cc:	683a      	ldr	r2, [r7, #0]
 800c2ce:	4904      	ldr	r1, [pc, #16]	; (800c2e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c2d0:	4804      	ldr	r0, [pc, #16]	; (800c2e4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c2d2:	f7ff fddb 	bl	800be8c <USBD_GetString>
  return USBD_StrDesc;
 800c2d6:	4b02      	ldr	r3, [pc, #8]	; (800c2e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c2d8:	4618      	mov	r0, r3
 800c2da:	3708      	adds	r7, #8
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	bd80      	pop	{r7, pc}
 800c2e0:	240104d8 	.word	0x240104d8
 800c2e4:	0800f720 	.word	0x0800f720

0800c2e8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b082      	sub	sp, #8
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	6039      	str	r1, [r7, #0]
 800c2f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	221a      	movs	r2, #26
 800c2f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c2fa:	f000 f843 	bl	800c384 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c2fe:	4b02      	ldr	r3, [pc, #8]	; (800c308 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c300:	4618      	mov	r0, r3
 800c302:	3708      	adds	r7, #8
 800c304:	46bd      	mov	sp, r7
 800c306:	bd80      	pop	{r7, pc}
 800c308:	24000128 	.word	0x24000128

0800c30c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b082      	sub	sp, #8
 800c310:	af00      	add	r7, sp, #0
 800c312:	4603      	mov	r3, r0
 800c314:	6039      	str	r1, [r7, #0]
 800c316:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c318:	79fb      	ldrb	r3, [r7, #7]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d105      	bne.n	800c32a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c31e:	683a      	ldr	r2, [r7, #0]
 800c320:	4907      	ldr	r1, [pc, #28]	; (800c340 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c322:	4808      	ldr	r0, [pc, #32]	; (800c344 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c324:	f7ff fdb2 	bl	800be8c <USBD_GetString>
 800c328:	e004      	b.n	800c334 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c32a:	683a      	ldr	r2, [r7, #0]
 800c32c:	4904      	ldr	r1, [pc, #16]	; (800c340 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c32e:	4805      	ldr	r0, [pc, #20]	; (800c344 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c330:	f7ff fdac 	bl	800be8c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c334:	4b02      	ldr	r3, [pc, #8]	; (800c340 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c336:	4618      	mov	r0, r3
 800c338:	3708      	adds	r7, #8
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}
 800c33e:	bf00      	nop
 800c340:	240104d8 	.word	0x240104d8
 800c344:	0800f734 	.word	0x0800f734

0800c348 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b082      	sub	sp, #8
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	4603      	mov	r3, r0
 800c350:	6039      	str	r1, [r7, #0]
 800c352:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c354:	79fb      	ldrb	r3, [r7, #7]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d105      	bne.n	800c366 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c35a:	683a      	ldr	r2, [r7, #0]
 800c35c:	4907      	ldr	r1, [pc, #28]	; (800c37c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c35e:	4808      	ldr	r0, [pc, #32]	; (800c380 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c360:	f7ff fd94 	bl	800be8c <USBD_GetString>
 800c364:	e004      	b.n	800c370 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c366:	683a      	ldr	r2, [r7, #0]
 800c368:	4904      	ldr	r1, [pc, #16]	; (800c37c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c36a:	4805      	ldr	r0, [pc, #20]	; (800c380 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c36c:	f7ff fd8e 	bl	800be8c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c370:	4b02      	ldr	r3, [pc, #8]	; (800c37c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c372:	4618      	mov	r0, r3
 800c374:	3708      	adds	r7, #8
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}
 800c37a:	bf00      	nop
 800c37c:	240104d8 	.word	0x240104d8
 800c380:	0800f740 	.word	0x0800f740

0800c384 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b084      	sub	sp, #16
 800c388:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c38a:	4b0f      	ldr	r3, [pc, #60]	; (800c3c8 <Get_SerialNum+0x44>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c390:	4b0e      	ldr	r3, [pc, #56]	; (800c3cc <Get_SerialNum+0x48>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c396:	4b0e      	ldr	r3, [pc, #56]	; (800c3d0 <Get_SerialNum+0x4c>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c39c:	68fa      	ldr	r2, [r7, #12]
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	4413      	add	r3, r2
 800c3a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d009      	beq.n	800c3be <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c3aa:	2208      	movs	r2, #8
 800c3ac:	4909      	ldr	r1, [pc, #36]	; (800c3d4 <Get_SerialNum+0x50>)
 800c3ae:	68f8      	ldr	r0, [r7, #12]
 800c3b0:	f000 f814 	bl	800c3dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c3b4:	2204      	movs	r2, #4
 800c3b6:	4908      	ldr	r1, [pc, #32]	; (800c3d8 <Get_SerialNum+0x54>)
 800c3b8:	68b8      	ldr	r0, [r7, #8]
 800c3ba:	f000 f80f 	bl	800c3dc <IntToUnicode>
  }
}
 800c3be:	bf00      	nop
 800c3c0:	3710      	adds	r7, #16
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd80      	pop	{r7, pc}
 800c3c6:	bf00      	nop
 800c3c8:	1ff1e800 	.word	0x1ff1e800
 800c3cc:	1ff1e804 	.word	0x1ff1e804
 800c3d0:	1ff1e808 	.word	0x1ff1e808
 800c3d4:	2400012a 	.word	0x2400012a
 800c3d8:	2400013a 	.word	0x2400013a

0800c3dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c3dc:	b480      	push	{r7}
 800c3de:	b087      	sub	sp, #28
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	60f8      	str	r0, [r7, #12]
 800c3e4:	60b9      	str	r1, [r7, #8]
 800c3e6:	4613      	mov	r3, r2
 800c3e8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	75fb      	strb	r3, [r7, #23]
 800c3f2:	e027      	b.n	800c444 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	0f1b      	lsrs	r3, r3, #28
 800c3f8:	2b09      	cmp	r3, #9
 800c3fa:	d80b      	bhi.n	800c414 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	0f1b      	lsrs	r3, r3, #28
 800c400:	b2da      	uxtb	r2, r3
 800c402:	7dfb      	ldrb	r3, [r7, #23]
 800c404:	005b      	lsls	r3, r3, #1
 800c406:	4619      	mov	r1, r3
 800c408:	68bb      	ldr	r3, [r7, #8]
 800c40a:	440b      	add	r3, r1
 800c40c:	3230      	adds	r2, #48	; 0x30
 800c40e:	b2d2      	uxtb	r2, r2
 800c410:	701a      	strb	r2, [r3, #0]
 800c412:	e00a      	b.n	800c42a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	0f1b      	lsrs	r3, r3, #28
 800c418:	b2da      	uxtb	r2, r3
 800c41a:	7dfb      	ldrb	r3, [r7, #23]
 800c41c:	005b      	lsls	r3, r3, #1
 800c41e:	4619      	mov	r1, r3
 800c420:	68bb      	ldr	r3, [r7, #8]
 800c422:	440b      	add	r3, r1
 800c424:	3237      	adds	r2, #55	; 0x37
 800c426:	b2d2      	uxtb	r2, r2
 800c428:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	011b      	lsls	r3, r3, #4
 800c42e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c430:	7dfb      	ldrb	r3, [r7, #23]
 800c432:	005b      	lsls	r3, r3, #1
 800c434:	3301      	adds	r3, #1
 800c436:	68ba      	ldr	r2, [r7, #8]
 800c438:	4413      	add	r3, r2
 800c43a:	2200      	movs	r2, #0
 800c43c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c43e:	7dfb      	ldrb	r3, [r7, #23]
 800c440:	3301      	adds	r3, #1
 800c442:	75fb      	strb	r3, [r7, #23]
 800c444:	7dfa      	ldrb	r2, [r7, #23]
 800c446:	79fb      	ldrb	r3, [r7, #7]
 800c448:	429a      	cmp	r2, r3
 800c44a:	d3d3      	bcc.n	800c3f4 <IntToUnicode+0x18>
  }
}
 800c44c:	bf00      	nop
 800c44e:	bf00      	nop
 800c450:	371c      	adds	r7, #28
 800c452:	46bd      	mov	sp, r7
 800c454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c458:	4770      	bx	lr
	...

0800c45c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b0ba      	sub	sp, #232	; 0xe8
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c464:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800c468:	2200      	movs	r2, #0
 800c46a:	601a      	str	r2, [r3, #0]
 800c46c:	605a      	str	r2, [r3, #4]
 800c46e:	609a      	str	r2, [r3, #8]
 800c470:	60da      	str	r2, [r3, #12]
 800c472:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800c474:	f107 0310 	add.w	r3, r7, #16
 800c478:	22c0      	movs	r2, #192	; 0xc0
 800c47a:	2100      	movs	r1, #0
 800c47c:	4618      	mov	r0, r3
 800c47e:	f001 f942 	bl	800d706 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	4a2c      	ldr	r2, [pc, #176]	; (800c538 <HAL_PCD_MspInit+0xdc>)
 800c488:	4293      	cmp	r3, r2
 800c48a:	d151      	bne.n	800c530 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800c48c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800c490:	f04f 0300 	mov.w	r3, #0
 800c494:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800c498:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c49c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c4a0:	f107 0310 	add.w	r3, r7, #16
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	f7f9 fd8b 	bl	8005fc0 <HAL_RCCEx_PeriphCLKConfig>
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d001      	beq.n	800c4b4 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800c4b0:	f7f5 fbc4 	bl	8001c3c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800c4b4:	f7f8 fda4 	bl	8005000 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c4b8:	4b20      	ldr	r3, [pc, #128]	; (800c53c <HAL_PCD_MspInit+0xe0>)
 800c4ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c4be:	4a1f      	ldr	r2, [pc, #124]	; (800c53c <HAL_PCD_MspInit+0xe0>)
 800c4c0:	f043 0301 	orr.w	r3, r3, #1
 800c4c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c4c8:	4b1c      	ldr	r3, [pc, #112]	; (800c53c <HAL_PCD_MspInit+0xe0>)
 800c4ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c4ce:	f003 0301 	and.w	r3, r3, #1
 800c4d2:	60fb      	str	r3, [r7, #12]
 800c4d4:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c4d6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c4da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c4de:	2302      	movs	r3, #2
 800c4e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800c4f0:	230a      	movs	r3, #10
 800c4f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c4f6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800c4fa:	4619      	mov	r1, r3
 800c4fc:	4810      	ldr	r0, [pc, #64]	; (800c540 <HAL_PCD_MspInit+0xe4>)
 800c4fe:	f7f7 f8db 	bl	80036b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c502:	4b0e      	ldr	r3, [pc, #56]	; (800c53c <HAL_PCD_MspInit+0xe0>)
 800c504:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c508:	4a0c      	ldr	r2, [pc, #48]	; (800c53c <HAL_PCD_MspInit+0xe0>)
 800c50a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c50e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800c512:	4b0a      	ldr	r3, [pc, #40]	; (800c53c <HAL_PCD_MspInit+0xe0>)
 800c514:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c518:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c51c:	60bb      	str	r3, [r7, #8]
 800c51e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c520:	2200      	movs	r2, #0
 800c522:	2100      	movs	r1, #0
 800c524:	2065      	movs	r0, #101	; 0x65
 800c526:	f7f7 f892 	bl	800364e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c52a:	2065      	movs	r0, #101	; 0x65
 800c52c:	f7f7 f8a9 	bl	8003682 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c530:	bf00      	nop
 800c532:	37e8      	adds	r7, #232	; 0xe8
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}
 800c538:	40080000 	.word	0x40080000
 800c53c:	58024400 	.word	0x58024400
 800c540:	58020000 	.word	0x58020000

0800c544 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b082      	sub	sp, #8
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c558:	4619      	mov	r1, r3
 800c55a:	4610      	mov	r0, r2
 800c55c:	f7fe fb07 	bl	800ab6e <USBD_LL_SetupStage>
}
 800c560:	bf00      	nop
 800c562:	3708      	adds	r7, #8
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}

0800c568 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b082      	sub	sp, #8
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
 800c570:	460b      	mov	r3, r1
 800c572:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c57a:	78fa      	ldrb	r2, [r7, #3]
 800c57c:	6879      	ldr	r1, [r7, #4]
 800c57e:	4613      	mov	r3, r2
 800c580:	00db      	lsls	r3, r3, #3
 800c582:	4413      	add	r3, r2
 800c584:	009b      	lsls	r3, r3, #2
 800c586:	440b      	add	r3, r1
 800c588:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800c58c:	681a      	ldr	r2, [r3, #0]
 800c58e:	78fb      	ldrb	r3, [r7, #3]
 800c590:	4619      	mov	r1, r3
 800c592:	f7fe fb41 	bl	800ac18 <USBD_LL_DataOutStage>
}
 800c596:	bf00      	nop
 800c598:	3708      	adds	r7, #8
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}

0800c59e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c59e:	b580      	push	{r7, lr}
 800c5a0:	b082      	sub	sp, #8
 800c5a2:	af00      	add	r7, sp, #0
 800c5a4:	6078      	str	r0, [r7, #4]
 800c5a6:	460b      	mov	r3, r1
 800c5a8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c5b0:	78fa      	ldrb	r2, [r7, #3]
 800c5b2:	6879      	ldr	r1, [r7, #4]
 800c5b4:	4613      	mov	r3, r2
 800c5b6:	00db      	lsls	r3, r3, #3
 800c5b8:	4413      	add	r3, r2
 800c5ba:	009b      	lsls	r3, r3, #2
 800c5bc:	440b      	add	r3, r1
 800c5be:	3348      	adds	r3, #72	; 0x48
 800c5c0:	681a      	ldr	r2, [r3, #0]
 800c5c2:	78fb      	ldrb	r3, [r7, #3]
 800c5c4:	4619      	mov	r1, r3
 800c5c6:	f7fe fbda 	bl	800ad7e <USBD_LL_DataInStage>
}
 800c5ca:	bf00      	nop
 800c5cc:	3708      	adds	r7, #8
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}

0800c5d2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5d2:	b580      	push	{r7, lr}
 800c5d4:	b082      	sub	sp, #8
 800c5d6:	af00      	add	r7, sp, #0
 800c5d8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	f7fe fd14 	bl	800b00e <USBD_LL_SOF>
}
 800c5e6:	bf00      	nop
 800c5e8:	3708      	adds	r7, #8
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}

0800c5ee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5ee:	b580      	push	{r7, lr}
 800c5f0:	b084      	sub	sp, #16
 800c5f2:	af00      	add	r7, sp, #0
 800c5f4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c5f6:	2301      	movs	r3, #1
 800c5f8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	691b      	ldr	r3, [r3, #16]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d102      	bne.n	800c608 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c602:	2300      	movs	r3, #0
 800c604:	73fb      	strb	r3, [r7, #15]
 800c606:	e008      	b.n	800c61a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	691b      	ldr	r3, [r3, #16]
 800c60c:	2b02      	cmp	r3, #2
 800c60e:	d102      	bne.n	800c616 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c610:	2301      	movs	r3, #1
 800c612:	73fb      	strb	r3, [r7, #15]
 800c614:	e001      	b.n	800c61a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c616:	f7f5 fb11 	bl	8001c3c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c620:	7bfa      	ldrb	r2, [r7, #15]
 800c622:	4611      	mov	r1, r2
 800c624:	4618      	mov	r0, r3
 800c626:	f7fe fcae 	bl	800af86 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c630:	4618      	mov	r0, r3
 800c632:	f7fe fc56 	bl	800aee2 <USBD_LL_Reset>
}
 800c636:	bf00      	nop
 800c638:	3710      	adds	r7, #16
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}
	...

0800c640 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b082      	sub	sp, #8
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c64e:	4618      	mov	r0, r3
 800c650:	f7fe fca9 	bl	800afa6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	687a      	ldr	r2, [r7, #4]
 800c660:	6812      	ldr	r2, [r2, #0]
 800c662:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c666:	f043 0301 	orr.w	r3, r3, #1
 800c66a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	6a1b      	ldr	r3, [r3, #32]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d005      	beq.n	800c680 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c674:	4b04      	ldr	r3, [pc, #16]	; (800c688 <HAL_PCD_SuspendCallback+0x48>)
 800c676:	691b      	ldr	r3, [r3, #16]
 800c678:	4a03      	ldr	r2, [pc, #12]	; (800c688 <HAL_PCD_SuspendCallback+0x48>)
 800c67a:	f043 0306 	orr.w	r3, r3, #6
 800c67e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c680:	bf00      	nop
 800c682:	3708      	adds	r7, #8
 800c684:	46bd      	mov	sp, r7
 800c686:	bd80      	pop	{r7, pc}
 800c688:	e000ed00 	.word	0xe000ed00

0800c68c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b082      	sub	sp, #8
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c69a:	4618      	mov	r0, r3
 800c69c:	f7fe fc9f 	bl	800afde <USBD_LL_Resume>
}
 800c6a0:	bf00      	nop
 800c6a2:	3708      	adds	r7, #8
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}

0800c6a8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b082      	sub	sp, #8
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
 800c6b0:	460b      	mov	r3, r1
 800c6b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c6ba:	78fa      	ldrb	r2, [r7, #3]
 800c6bc:	4611      	mov	r1, r2
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f7fe fcf7 	bl	800b0b2 <USBD_LL_IsoOUTIncomplete>
}
 800c6c4:	bf00      	nop
 800c6c6:	3708      	adds	r7, #8
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	bd80      	pop	{r7, pc}

0800c6cc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b082      	sub	sp, #8
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
 800c6d4:	460b      	mov	r3, r1
 800c6d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c6de:	78fa      	ldrb	r2, [r7, #3]
 800c6e0:	4611      	mov	r1, r2
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	f7fe fcb3 	bl	800b04e <USBD_LL_IsoINIncomplete>
}
 800c6e8:	bf00      	nop
 800c6ea:	3708      	adds	r7, #8
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	bd80      	pop	{r7, pc}

0800c6f0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b082      	sub	sp, #8
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c6fe:	4618      	mov	r0, r3
 800c700:	f7fe fd09 	bl	800b116 <USBD_LL_DevConnected>
}
 800c704:	bf00      	nop
 800c706:	3708      	adds	r7, #8
 800c708:	46bd      	mov	sp, r7
 800c70a:	bd80      	pop	{r7, pc}

0800c70c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b082      	sub	sp, #8
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c71a:	4618      	mov	r0, r3
 800c71c:	f7fe fd06 	bl	800b12c <USBD_LL_DevDisconnected>
}
 800c720:	bf00      	nop
 800c722:	3708      	adds	r7, #8
 800c724:	46bd      	mov	sp, r7
 800c726:	bd80      	pop	{r7, pc}

0800c728 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b082      	sub	sp, #8
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	781b      	ldrb	r3, [r3, #0]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d13e      	bne.n	800c7b6 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c738:	4a21      	ldr	r2, [pc, #132]	; (800c7c0 <USBD_LL_Init+0x98>)
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	4a1f      	ldr	r2, [pc, #124]	; (800c7c0 <USBD_LL_Init+0x98>)
 800c744:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c748:	4b1d      	ldr	r3, [pc, #116]	; (800c7c0 <USBD_LL_Init+0x98>)
 800c74a:	4a1e      	ldr	r2, [pc, #120]	; (800c7c4 <USBD_LL_Init+0x9c>)
 800c74c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800c74e:	4b1c      	ldr	r3, [pc, #112]	; (800c7c0 <USBD_LL_Init+0x98>)
 800c750:	2209      	movs	r2, #9
 800c752:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c754:	4b1a      	ldr	r3, [pc, #104]	; (800c7c0 <USBD_LL_Init+0x98>)
 800c756:	2202      	movs	r2, #2
 800c758:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c75a:	4b19      	ldr	r3, [pc, #100]	; (800c7c0 <USBD_LL_Init+0x98>)
 800c75c:	2200      	movs	r2, #0
 800c75e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c760:	4b17      	ldr	r3, [pc, #92]	; (800c7c0 <USBD_LL_Init+0x98>)
 800c762:	2202      	movs	r2, #2
 800c764:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c766:	4b16      	ldr	r3, [pc, #88]	; (800c7c0 <USBD_LL_Init+0x98>)
 800c768:	2200      	movs	r2, #0
 800c76a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c76c:	4b14      	ldr	r3, [pc, #80]	; (800c7c0 <USBD_LL_Init+0x98>)
 800c76e:	2200      	movs	r2, #0
 800c770:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c772:	4b13      	ldr	r3, [pc, #76]	; (800c7c0 <USBD_LL_Init+0x98>)
 800c774:	2200      	movs	r2, #0
 800c776:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800c778:	4b11      	ldr	r3, [pc, #68]	; (800c7c0 <USBD_LL_Init+0x98>)
 800c77a:	2200      	movs	r2, #0
 800c77c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c77e:	4b10      	ldr	r3, [pc, #64]	; (800c7c0 <USBD_LL_Init+0x98>)
 800c780:	2200      	movs	r2, #0
 800c782:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c784:	4b0e      	ldr	r3, [pc, #56]	; (800c7c0 <USBD_LL_Init+0x98>)
 800c786:	2200      	movs	r2, #0
 800c788:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c78a:	480d      	ldr	r0, [pc, #52]	; (800c7c0 <USBD_LL_Init+0x98>)
 800c78c:	f7f7 f944 	bl	8003a18 <HAL_PCD_Init>
 800c790:	4603      	mov	r3, r0
 800c792:	2b00      	cmp	r3, #0
 800c794:	d001      	beq.n	800c79a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800c796:	f7f5 fa51 	bl	8001c3c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c79a:	2180      	movs	r1, #128	; 0x80
 800c79c:	4808      	ldr	r0, [pc, #32]	; (800c7c0 <USBD_LL_Init+0x98>)
 800c79e:	f7f8 fbb4 	bl	8004f0a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c7a2:	2240      	movs	r2, #64	; 0x40
 800c7a4:	2100      	movs	r1, #0
 800c7a6:	4806      	ldr	r0, [pc, #24]	; (800c7c0 <USBD_LL_Init+0x98>)
 800c7a8:	f7f8 fb68 	bl	8004e7c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c7ac:	2280      	movs	r2, #128	; 0x80
 800c7ae:	2101      	movs	r1, #1
 800c7b0:	4803      	ldr	r0, [pc, #12]	; (800c7c0 <USBD_LL_Init+0x98>)
 800c7b2:	f7f8 fb63 	bl	8004e7c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800c7b6:	2300      	movs	r3, #0
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	3708      	adds	r7, #8
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bd80      	pop	{r7, pc}
 800c7c0:	240106d8 	.word	0x240106d8
 800c7c4:	40080000 	.word	0x40080000

0800c7c8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b084      	sub	sp, #16
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c7de:	4618      	mov	r0, r3
 800c7e0:	f7f7 fa3e 	bl	8003c60 <HAL_PCD_Start>
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7e8:	7bfb      	ldrb	r3, [r7, #15]
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	f000 f942 	bl	800ca74 <USBD_Get_USB_Status>
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	3710      	adds	r7, #16
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	bd80      	pop	{r7, pc}

0800c7fe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c7fe:	b580      	push	{r7, lr}
 800c800:	b084      	sub	sp, #16
 800c802:	af00      	add	r7, sp, #0
 800c804:	6078      	str	r0, [r7, #4]
 800c806:	4608      	mov	r0, r1
 800c808:	4611      	mov	r1, r2
 800c80a:	461a      	mov	r2, r3
 800c80c:	4603      	mov	r3, r0
 800c80e:	70fb      	strb	r3, [r7, #3]
 800c810:	460b      	mov	r3, r1
 800c812:	70bb      	strb	r3, [r7, #2]
 800c814:	4613      	mov	r3, r2
 800c816:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c818:	2300      	movs	r3, #0
 800c81a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c81c:	2300      	movs	r3, #0
 800c81e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c826:	78bb      	ldrb	r3, [r7, #2]
 800c828:	883a      	ldrh	r2, [r7, #0]
 800c82a:	78f9      	ldrb	r1, [r7, #3]
 800c82c:	f7f7 ff3e 	bl	80046ac <HAL_PCD_EP_Open>
 800c830:	4603      	mov	r3, r0
 800c832:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c834:	7bfb      	ldrb	r3, [r7, #15]
 800c836:	4618      	mov	r0, r3
 800c838:	f000 f91c 	bl	800ca74 <USBD_Get_USB_Status>
 800c83c:	4603      	mov	r3, r0
 800c83e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c840:	7bbb      	ldrb	r3, [r7, #14]
}
 800c842:	4618      	mov	r0, r3
 800c844:	3710      	adds	r7, #16
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}

0800c84a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c84a:	b580      	push	{r7, lr}
 800c84c:	b084      	sub	sp, #16
 800c84e:	af00      	add	r7, sp, #0
 800c850:	6078      	str	r0, [r7, #4]
 800c852:	460b      	mov	r3, r1
 800c854:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c856:	2300      	movs	r3, #0
 800c858:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c85a:	2300      	movs	r3, #0
 800c85c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c864:	78fa      	ldrb	r2, [r7, #3]
 800c866:	4611      	mov	r1, r2
 800c868:	4618      	mov	r0, r3
 800c86a:	f7f7 ff87 	bl	800477c <HAL_PCD_EP_Close>
 800c86e:	4603      	mov	r3, r0
 800c870:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c872:	7bfb      	ldrb	r3, [r7, #15]
 800c874:	4618      	mov	r0, r3
 800c876:	f000 f8fd 	bl	800ca74 <USBD_Get_USB_Status>
 800c87a:	4603      	mov	r3, r0
 800c87c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c87e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c880:	4618      	mov	r0, r3
 800c882:	3710      	adds	r7, #16
 800c884:	46bd      	mov	sp, r7
 800c886:	bd80      	pop	{r7, pc}

0800c888 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b084      	sub	sp, #16
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
 800c890:	460b      	mov	r3, r1
 800c892:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c894:	2300      	movs	r3, #0
 800c896:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c898:	2300      	movs	r3, #0
 800c89a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c8a2:	78fa      	ldrb	r2, [r7, #3]
 800c8a4:	4611      	mov	r1, r2
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	f7f8 f841 	bl	800492e <HAL_PCD_EP_SetStall>
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8b0:	7bfb      	ldrb	r3, [r7, #15]
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f000 f8de 	bl	800ca74 <USBD_Get_USB_Status>
 800c8b8:	4603      	mov	r3, r0
 800c8ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c8bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	3710      	adds	r7, #16
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}

0800c8c6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c8c6:	b580      	push	{r7, lr}
 800c8c8:	b084      	sub	sp, #16
 800c8ca:	af00      	add	r7, sp, #0
 800c8cc:	6078      	str	r0, [r7, #4]
 800c8ce:	460b      	mov	r3, r1
 800c8d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c8e0:	78fa      	ldrb	r2, [r7, #3]
 800c8e2:	4611      	mov	r1, r2
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	f7f8 f886 	bl	80049f6 <HAL_PCD_EP_ClrStall>
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8ee:	7bfb      	ldrb	r3, [r7, #15]
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	f000 f8bf 	bl	800ca74 <USBD_Get_USB_Status>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c8fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	3710      	adds	r7, #16
 800c900:	46bd      	mov	sp, r7
 800c902:	bd80      	pop	{r7, pc}

0800c904 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c904:	b480      	push	{r7}
 800c906:	b085      	sub	sp, #20
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
 800c90c:	460b      	mov	r3, r1
 800c90e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c916:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c918:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	da0b      	bge.n	800c938 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c920:	78fb      	ldrb	r3, [r7, #3]
 800c922:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c926:	68f9      	ldr	r1, [r7, #12]
 800c928:	4613      	mov	r3, r2
 800c92a:	00db      	lsls	r3, r3, #3
 800c92c:	4413      	add	r3, r2
 800c92e:	009b      	lsls	r3, r3, #2
 800c930:	440b      	add	r3, r1
 800c932:	333e      	adds	r3, #62	; 0x3e
 800c934:	781b      	ldrb	r3, [r3, #0]
 800c936:	e00b      	b.n	800c950 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c938:	78fb      	ldrb	r3, [r7, #3]
 800c93a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c93e:	68f9      	ldr	r1, [r7, #12]
 800c940:	4613      	mov	r3, r2
 800c942:	00db      	lsls	r3, r3, #3
 800c944:	4413      	add	r3, r2
 800c946:	009b      	lsls	r3, r3, #2
 800c948:	440b      	add	r3, r1
 800c94a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c94e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c950:	4618      	mov	r0, r3
 800c952:	3714      	adds	r7, #20
 800c954:	46bd      	mov	sp, r7
 800c956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95a:	4770      	bx	lr

0800c95c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b084      	sub	sp, #16
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
 800c964:	460b      	mov	r3, r1
 800c966:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c968:	2300      	movs	r3, #0
 800c96a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c96c:	2300      	movs	r3, #0
 800c96e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c976:	78fa      	ldrb	r2, [r7, #3]
 800c978:	4611      	mov	r1, r2
 800c97a:	4618      	mov	r0, r3
 800c97c:	f7f7 fe71 	bl	8004662 <HAL_PCD_SetAddress>
 800c980:	4603      	mov	r3, r0
 800c982:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c984:	7bfb      	ldrb	r3, [r7, #15]
 800c986:	4618      	mov	r0, r3
 800c988:	f000 f874 	bl	800ca74 <USBD_Get_USB_Status>
 800c98c:	4603      	mov	r3, r0
 800c98e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c990:	7bbb      	ldrb	r3, [r7, #14]
}
 800c992:	4618      	mov	r0, r3
 800c994:	3710      	adds	r7, #16
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}

0800c99a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c99a:	b580      	push	{r7, lr}
 800c99c:	b086      	sub	sp, #24
 800c99e:	af00      	add	r7, sp, #0
 800c9a0:	60f8      	str	r0, [r7, #12]
 800c9a2:	607a      	str	r2, [r7, #4]
 800c9a4:	603b      	str	r3, [r7, #0]
 800c9a6:	460b      	mov	r3, r1
 800c9a8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c9b8:	7af9      	ldrb	r1, [r7, #11]
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	687a      	ldr	r2, [r7, #4]
 800c9be:	f7f7 ff7b 	bl	80048b8 <HAL_PCD_EP_Transmit>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c9c6:	7dfb      	ldrb	r3, [r7, #23]
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	f000 f853 	bl	800ca74 <USBD_Get_USB_Status>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c9d2:	7dbb      	ldrb	r3, [r7, #22]
}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	3718      	adds	r7, #24
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bd80      	pop	{r7, pc}

0800c9dc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b086      	sub	sp, #24
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	60f8      	str	r0, [r7, #12]
 800c9e4:	607a      	str	r2, [r7, #4]
 800c9e6:	603b      	str	r3, [r7, #0]
 800c9e8:	460b      	mov	r3, r1
 800c9ea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c9fa:	7af9      	ldrb	r1, [r7, #11]
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	687a      	ldr	r2, [r7, #4]
 800ca00:	f7f7 ff06 	bl	8004810 <HAL_PCD_EP_Receive>
 800ca04:	4603      	mov	r3, r0
 800ca06:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca08:	7dfb      	ldrb	r3, [r7, #23]
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	f000 f832 	bl	800ca74 <USBD_Get_USB_Status>
 800ca10:	4603      	mov	r3, r0
 800ca12:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ca14:	7dbb      	ldrb	r3, [r7, #22]
}
 800ca16:	4618      	mov	r0, r3
 800ca18:	3718      	adds	r7, #24
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	bd80      	pop	{r7, pc}

0800ca1e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ca1e:	b580      	push	{r7, lr}
 800ca20:	b082      	sub	sp, #8
 800ca22:	af00      	add	r7, sp, #0
 800ca24:	6078      	str	r0, [r7, #4]
 800ca26:	460b      	mov	r3, r1
 800ca28:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ca30:	78fa      	ldrb	r2, [r7, #3]
 800ca32:	4611      	mov	r1, r2
 800ca34:	4618      	mov	r0, r3
 800ca36:	f7f7 ff27 	bl	8004888 <HAL_PCD_EP_GetRxCount>
 800ca3a:	4603      	mov	r3, r0
}
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	3708      	adds	r7, #8
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}

0800ca44 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ca44:	b480      	push	{r7}
 800ca46:	b083      	sub	sp, #12
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ca4c:	4b03      	ldr	r3, [pc, #12]	; (800ca5c <USBD_static_malloc+0x18>)
}
 800ca4e:	4618      	mov	r0, r3
 800ca50:	370c      	adds	r7, #12
 800ca52:	46bd      	mov	sp, r7
 800ca54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca58:	4770      	bx	lr
 800ca5a:	bf00      	nop
 800ca5c:	24010be4 	.word	0x24010be4

0800ca60 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ca60:	b480      	push	{r7}
 800ca62:	b083      	sub	sp, #12
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800ca68:	bf00      	nop
 800ca6a:	370c      	adds	r7, #12
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca72:	4770      	bx	lr

0800ca74 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ca74:	b480      	push	{r7}
 800ca76:	b085      	sub	sp, #20
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca7e:	2300      	movs	r3, #0
 800ca80:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ca82:	79fb      	ldrb	r3, [r7, #7]
 800ca84:	2b03      	cmp	r3, #3
 800ca86:	d817      	bhi.n	800cab8 <USBD_Get_USB_Status+0x44>
 800ca88:	a201      	add	r2, pc, #4	; (adr r2, 800ca90 <USBD_Get_USB_Status+0x1c>)
 800ca8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca8e:	bf00      	nop
 800ca90:	0800caa1 	.word	0x0800caa1
 800ca94:	0800caa7 	.word	0x0800caa7
 800ca98:	0800caad 	.word	0x0800caad
 800ca9c:	0800cab3 	.word	0x0800cab3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800caa0:	2300      	movs	r3, #0
 800caa2:	73fb      	strb	r3, [r7, #15]
    break;
 800caa4:	e00b      	b.n	800cabe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800caa6:	2303      	movs	r3, #3
 800caa8:	73fb      	strb	r3, [r7, #15]
    break;
 800caaa:	e008      	b.n	800cabe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800caac:	2301      	movs	r3, #1
 800caae:	73fb      	strb	r3, [r7, #15]
    break;
 800cab0:	e005      	b.n	800cabe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cab2:	2303      	movs	r3, #3
 800cab4:	73fb      	strb	r3, [r7, #15]
    break;
 800cab6:	e002      	b.n	800cabe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cab8:	2303      	movs	r3, #3
 800caba:	73fb      	strb	r3, [r7, #15]
    break;
 800cabc:	bf00      	nop
  }
  return usb_status;
 800cabe:	7bfb      	ldrb	r3, [r7, #15]
}
 800cac0:	4618      	mov	r0, r3
 800cac2:	3714      	adds	r7, #20
 800cac4:	46bd      	mov	sp, r7
 800cac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caca:	4770      	bx	lr

0800cacc <malloc>:
 800cacc:	4b02      	ldr	r3, [pc, #8]	; (800cad8 <malloc+0xc>)
 800cace:	4601      	mov	r1, r0
 800cad0:	6818      	ldr	r0, [r3, #0]
 800cad2:	f000 b82b 	b.w	800cb2c <_malloc_r>
 800cad6:	bf00      	nop
 800cad8:	2400019c 	.word	0x2400019c

0800cadc <free>:
 800cadc:	4b02      	ldr	r3, [pc, #8]	; (800cae8 <free+0xc>)
 800cade:	4601      	mov	r1, r0
 800cae0:	6818      	ldr	r0, [r3, #0]
 800cae2:	f001 bcad 	b.w	800e440 <_free_r>
 800cae6:	bf00      	nop
 800cae8:	2400019c 	.word	0x2400019c

0800caec <sbrk_aligned>:
 800caec:	b570      	push	{r4, r5, r6, lr}
 800caee:	4e0e      	ldr	r6, [pc, #56]	; (800cb28 <sbrk_aligned+0x3c>)
 800caf0:	460c      	mov	r4, r1
 800caf2:	6831      	ldr	r1, [r6, #0]
 800caf4:	4605      	mov	r5, r0
 800caf6:	b911      	cbnz	r1, 800cafe <sbrk_aligned+0x12>
 800caf8:	f000 fe46 	bl	800d788 <_sbrk_r>
 800cafc:	6030      	str	r0, [r6, #0]
 800cafe:	4621      	mov	r1, r4
 800cb00:	4628      	mov	r0, r5
 800cb02:	f000 fe41 	bl	800d788 <_sbrk_r>
 800cb06:	1c43      	adds	r3, r0, #1
 800cb08:	d00a      	beq.n	800cb20 <sbrk_aligned+0x34>
 800cb0a:	1cc4      	adds	r4, r0, #3
 800cb0c:	f024 0403 	bic.w	r4, r4, #3
 800cb10:	42a0      	cmp	r0, r4
 800cb12:	d007      	beq.n	800cb24 <sbrk_aligned+0x38>
 800cb14:	1a21      	subs	r1, r4, r0
 800cb16:	4628      	mov	r0, r5
 800cb18:	f000 fe36 	bl	800d788 <_sbrk_r>
 800cb1c:	3001      	adds	r0, #1
 800cb1e:	d101      	bne.n	800cb24 <sbrk_aligned+0x38>
 800cb20:	f04f 34ff 	mov.w	r4, #4294967295
 800cb24:	4620      	mov	r0, r4
 800cb26:	bd70      	pop	{r4, r5, r6, pc}
 800cb28:	24010e08 	.word	0x24010e08

0800cb2c <_malloc_r>:
 800cb2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb30:	1ccd      	adds	r5, r1, #3
 800cb32:	f025 0503 	bic.w	r5, r5, #3
 800cb36:	3508      	adds	r5, #8
 800cb38:	2d0c      	cmp	r5, #12
 800cb3a:	bf38      	it	cc
 800cb3c:	250c      	movcc	r5, #12
 800cb3e:	2d00      	cmp	r5, #0
 800cb40:	4607      	mov	r7, r0
 800cb42:	db01      	blt.n	800cb48 <_malloc_r+0x1c>
 800cb44:	42a9      	cmp	r1, r5
 800cb46:	d905      	bls.n	800cb54 <_malloc_r+0x28>
 800cb48:	230c      	movs	r3, #12
 800cb4a:	603b      	str	r3, [r7, #0]
 800cb4c:	2600      	movs	r6, #0
 800cb4e:	4630      	mov	r0, r6
 800cb50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb54:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800cc28 <_malloc_r+0xfc>
 800cb58:	f000 f868 	bl	800cc2c <__malloc_lock>
 800cb5c:	f8d8 3000 	ldr.w	r3, [r8]
 800cb60:	461c      	mov	r4, r3
 800cb62:	bb5c      	cbnz	r4, 800cbbc <_malloc_r+0x90>
 800cb64:	4629      	mov	r1, r5
 800cb66:	4638      	mov	r0, r7
 800cb68:	f7ff ffc0 	bl	800caec <sbrk_aligned>
 800cb6c:	1c43      	adds	r3, r0, #1
 800cb6e:	4604      	mov	r4, r0
 800cb70:	d155      	bne.n	800cc1e <_malloc_r+0xf2>
 800cb72:	f8d8 4000 	ldr.w	r4, [r8]
 800cb76:	4626      	mov	r6, r4
 800cb78:	2e00      	cmp	r6, #0
 800cb7a:	d145      	bne.n	800cc08 <_malloc_r+0xdc>
 800cb7c:	2c00      	cmp	r4, #0
 800cb7e:	d048      	beq.n	800cc12 <_malloc_r+0xe6>
 800cb80:	6823      	ldr	r3, [r4, #0]
 800cb82:	4631      	mov	r1, r6
 800cb84:	4638      	mov	r0, r7
 800cb86:	eb04 0903 	add.w	r9, r4, r3
 800cb8a:	f000 fdfd 	bl	800d788 <_sbrk_r>
 800cb8e:	4581      	cmp	r9, r0
 800cb90:	d13f      	bne.n	800cc12 <_malloc_r+0xe6>
 800cb92:	6821      	ldr	r1, [r4, #0]
 800cb94:	1a6d      	subs	r5, r5, r1
 800cb96:	4629      	mov	r1, r5
 800cb98:	4638      	mov	r0, r7
 800cb9a:	f7ff ffa7 	bl	800caec <sbrk_aligned>
 800cb9e:	3001      	adds	r0, #1
 800cba0:	d037      	beq.n	800cc12 <_malloc_r+0xe6>
 800cba2:	6823      	ldr	r3, [r4, #0]
 800cba4:	442b      	add	r3, r5
 800cba6:	6023      	str	r3, [r4, #0]
 800cba8:	f8d8 3000 	ldr.w	r3, [r8]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d038      	beq.n	800cc22 <_malloc_r+0xf6>
 800cbb0:	685a      	ldr	r2, [r3, #4]
 800cbb2:	42a2      	cmp	r2, r4
 800cbb4:	d12b      	bne.n	800cc0e <_malloc_r+0xe2>
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	605a      	str	r2, [r3, #4]
 800cbba:	e00f      	b.n	800cbdc <_malloc_r+0xb0>
 800cbbc:	6822      	ldr	r2, [r4, #0]
 800cbbe:	1b52      	subs	r2, r2, r5
 800cbc0:	d41f      	bmi.n	800cc02 <_malloc_r+0xd6>
 800cbc2:	2a0b      	cmp	r2, #11
 800cbc4:	d917      	bls.n	800cbf6 <_malloc_r+0xca>
 800cbc6:	1961      	adds	r1, r4, r5
 800cbc8:	42a3      	cmp	r3, r4
 800cbca:	6025      	str	r5, [r4, #0]
 800cbcc:	bf18      	it	ne
 800cbce:	6059      	strne	r1, [r3, #4]
 800cbd0:	6863      	ldr	r3, [r4, #4]
 800cbd2:	bf08      	it	eq
 800cbd4:	f8c8 1000 	streq.w	r1, [r8]
 800cbd8:	5162      	str	r2, [r4, r5]
 800cbda:	604b      	str	r3, [r1, #4]
 800cbdc:	4638      	mov	r0, r7
 800cbde:	f104 060b 	add.w	r6, r4, #11
 800cbe2:	f000 f829 	bl	800cc38 <__malloc_unlock>
 800cbe6:	f026 0607 	bic.w	r6, r6, #7
 800cbea:	1d23      	adds	r3, r4, #4
 800cbec:	1af2      	subs	r2, r6, r3
 800cbee:	d0ae      	beq.n	800cb4e <_malloc_r+0x22>
 800cbf0:	1b9b      	subs	r3, r3, r6
 800cbf2:	50a3      	str	r3, [r4, r2]
 800cbf4:	e7ab      	b.n	800cb4e <_malloc_r+0x22>
 800cbf6:	42a3      	cmp	r3, r4
 800cbf8:	6862      	ldr	r2, [r4, #4]
 800cbfa:	d1dd      	bne.n	800cbb8 <_malloc_r+0x8c>
 800cbfc:	f8c8 2000 	str.w	r2, [r8]
 800cc00:	e7ec      	b.n	800cbdc <_malloc_r+0xb0>
 800cc02:	4623      	mov	r3, r4
 800cc04:	6864      	ldr	r4, [r4, #4]
 800cc06:	e7ac      	b.n	800cb62 <_malloc_r+0x36>
 800cc08:	4634      	mov	r4, r6
 800cc0a:	6876      	ldr	r6, [r6, #4]
 800cc0c:	e7b4      	b.n	800cb78 <_malloc_r+0x4c>
 800cc0e:	4613      	mov	r3, r2
 800cc10:	e7cc      	b.n	800cbac <_malloc_r+0x80>
 800cc12:	230c      	movs	r3, #12
 800cc14:	603b      	str	r3, [r7, #0]
 800cc16:	4638      	mov	r0, r7
 800cc18:	f000 f80e 	bl	800cc38 <__malloc_unlock>
 800cc1c:	e797      	b.n	800cb4e <_malloc_r+0x22>
 800cc1e:	6025      	str	r5, [r4, #0]
 800cc20:	e7dc      	b.n	800cbdc <_malloc_r+0xb0>
 800cc22:	605b      	str	r3, [r3, #4]
 800cc24:	deff      	udf	#255	; 0xff
 800cc26:	bf00      	nop
 800cc28:	24010e04 	.word	0x24010e04

0800cc2c <__malloc_lock>:
 800cc2c:	4801      	ldr	r0, [pc, #4]	; (800cc34 <__malloc_lock+0x8>)
 800cc2e:	f000 bdf8 	b.w	800d822 <__retarget_lock_acquire_recursive>
 800cc32:	bf00      	nop
 800cc34:	24010f4c 	.word	0x24010f4c

0800cc38 <__malloc_unlock>:
 800cc38:	4801      	ldr	r0, [pc, #4]	; (800cc40 <__malloc_unlock+0x8>)
 800cc3a:	f000 bdf3 	b.w	800d824 <__retarget_lock_release_recursive>
 800cc3e:	bf00      	nop
 800cc40:	24010f4c 	.word	0x24010f4c

0800cc44 <__cvt>:
 800cc44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc46:	ed2d 8b02 	vpush	{d8}
 800cc4a:	eeb0 8b40 	vmov.f64	d8, d0
 800cc4e:	b085      	sub	sp, #20
 800cc50:	4617      	mov	r7, r2
 800cc52:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800cc54:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800cc56:	ee18 2a90 	vmov	r2, s17
 800cc5a:	f025 0520 	bic.w	r5, r5, #32
 800cc5e:	2a00      	cmp	r2, #0
 800cc60:	bfb6      	itet	lt
 800cc62:	222d      	movlt	r2, #45	; 0x2d
 800cc64:	2200      	movge	r2, #0
 800cc66:	eeb1 8b40 	vneglt.f64	d8, d0
 800cc6a:	2d46      	cmp	r5, #70	; 0x46
 800cc6c:	460c      	mov	r4, r1
 800cc6e:	701a      	strb	r2, [r3, #0]
 800cc70:	d004      	beq.n	800cc7c <__cvt+0x38>
 800cc72:	2d45      	cmp	r5, #69	; 0x45
 800cc74:	d100      	bne.n	800cc78 <__cvt+0x34>
 800cc76:	3401      	adds	r4, #1
 800cc78:	2102      	movs	r1, #2
 800cc7a:	e000      	b.n	800cc7e <__cvt+0x3a>
 800cc7c:	2103      	movs	r1, #3
 800cc7e:	ab03      	add	r3, sp, #12
 800cc80:	9301      	str	r3, [sp, #4]
 800cc82:	ab02      	add	r3, sp, #8
 800cc84:	9300      	str	r3, [sp, #0]
 800cc86:	4622      	mov	r2, r4
 800cc88:	4633      	mov	r3, r6
 800cc8a:	eeb0 0b48 	vmov.f64	d0, d8
 800cc8e:	f000 fe6b 	bl	800d968 <_dtoa_r>
 800cc92:	2d47      	cmp	r5, #71	; 0x47
 800cc94:	d101      	bne.n	800cc9a <__cvt+0x56>
 800cc96:	07fb      	lsls	r3, r7, #31
 800cc98:	d51a      	bpl.n	800ccd0 <__cvt+0x8c>
 800cc9a:	2d46      	cmp	r5, #70	; 0x46
 800cc9c:	eb00 0204 	add.w	r2, r0, r4
 800cca0:	d10c      	bne.n	800ccbc <__cvt+0x78>
 800cca2:	7803      	ldrb	r3, [r0, #0]
 800cca4:	2b30      	cmp	r3, #48	; 0x30
 800cca6:	d107      	bne.n	800ccb8 <__cvt+0x74>
 800cca8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ccac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccb0:	bf1c      	itt	ne
 800ccb2:	f1c4 0401 	rsbne	r4, r4, #1
 800ccb6:	6034      	strne	r4, [r6, #0]
 800ccb8:	6833      	ldr	r3, [r6, #0]
 800ccba:	441a      	add	r2, r3
 800ccbc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ccc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccc4:	bf08      	it	eq
 800ccc6:	9203      	streq	r2, [sp, #12]
 800ccc8:	2130      	movs	r1, #48	; 0x30
 800ccca:	9b03      	ldr	r3, [sp, #12]
 800cccc:	4293      	cmp	r3, r2
 800ccce:	d307      	bcc.n	800cce0 <__cvt+0x9c>
 800ccd0:	9b03      	ldr	r3, [sp, #12]
 800ccd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ccd4:	1a1b      	subs	r3, r3, r0
 800ccd6:	6013      	str	r3, [r2, #0]
 800ccd8:	b005      	add	sp, #20
 800ccda:	ecbd 8b02 	vpop	{d8}
 800ccde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cce0:	1c5c      	adds	r4, r3, #1
 800cce2:	9403      	str	r4, [sp, #12]
 800cce4:	7019      	strb	r1, [r3, #0]
 800cce6:	e7f0      	b.n	800ccca <__cvt+0x86>

0800cce8 <__exponent>:
 800cce8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ccea:	4603      	mov	r3, r0
 800ccec:	2900      	cmp	r1, #0
 800ccee:	bfb8      	it	lt
 800ccf0:	4249      	neglt	r1, r1
 800ccf2:	f803 2b02 	strb.w	r2, [r3], #2
 800ccf6:	bfb4      	ite	lt
 800ccf8:	222d      	movlt	r2, #45	; 0x2d
 800ccfa:	222b      	movge	r2, #43	; 0x2b
 800ccfc:	2909      	cmp	r1, #9
 800ccfe:	7042      	strb	r2, [r0, #1]
 800cd00:	dd2a      	ble.n	800cd58 <__exponent+0x70>
 800cd02:	f10d 0207 	add.w	r2, sp, #7
 800cd06:	4617      	mov	r7, r2
 800cd08:	260a      	movs	r6, #10
 800cd0a:	4694      	mov	ip, r2
 800cd0c:	fb91 f5f6 	sdiv	r5, r1, r6
 800cd10:	fb06 1415 	mls	r4, r6, r5, r1
 800cd14:	3430      	adds	r4, #48	; 0x30
 800cd16:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800cd1a:	460c      	mov	r4, r1
 800cd1c:	2c63      	cmp	r4, #99	; 0x63
 800cd1e:	f102 32ff 	add.w	r2, r2, #4294967295
 800cd22:	4629      	mov	r1, r5
 800cd24:	dcf1      	bgt.n	800cd0a <__exponent+0x22>
 800cd26:	3130      	adds	r1, #48	; 0x30
 800cd28:	f1ac 0402 	sub.w	r4, ip, #2
 800cd2c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800cd30:	1c41      	adds	r1, r0, #1
 800cd32:	4622      	mov	r2, r4
 800cd34:	42ba      	cmp	r2, r7
 800cd36:	d30a      	bcc.n	800cd4e <__exponent+0x66>
 800cd38:	f10d 0209 	add.w	r2, sp, #9
 800cd3c:	eba2 020c 	sub.w	r2, r2, ip
 800cd40:	42bc      	cmp	r4, r7
 800cd42:	bf88      	it	hi
 800cd44:	2200      	movhi	r2, #0
 800cd46:	4413      	add	r3, r2
 800cd48:	1a18      	subs	r0, r3, r0
 800cd4a:	b003      	add	sp, #12
 800cd4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd4e:	f812 5b01 	ldrb.w	r5, [r2], #1
 800cd52:	f801 5f01 	strb.w	r5, [r1, #1]!
 800cd56:	e7ed      	b.n	800cd34 <__exponent+0x4c>
 800cd58:	2330      	movs	r3, #48	; 0x30
 800cd5a:	3130      	adds	r1, #48	; 0x30
 800cd5c:	7083      	strb	r3, [r0, #2]
 800cd5e:	70c1      	strb	r1, [r0, #3]
 800cd60:	1d03      	adds	r3, r0, #4
 800cd62:	e7f1      	b.n	800cd48 <__exponent+0x60>
 800cd64:	0000      	movs	r0, r0
	...

0800cd68 <_printf_float>:
 800cd68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd6c:	b08b      	sub	sp, #44	; 0x2c
 800cd6e:	460c      	mov	r4, r1
 800cd70:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800cd74:	4616      	mov	r6, r2
 800cd76:	461f      	mov	r7, r3
 800cd78:	4605      	mov	r5, r0
 800cd7a:	f000 fccd 	bl	800d718 <_localeconv_r>
 800cd7e:	f8d0 b000 	ldr.w	fp, [r0]
 800cd82:	4658      	mov	r0, fp
 800cd84:	f7f3 fafc 	bl	8000380 <strlen>
 800cd88:	2300      	movs	r3, #0
 800cd8a:	9308      	str	r3, [sp, #32]
 800cd8c:	f8d8 3000 	ldr.w	r3, [r8]
 800cd90:	f894 9018 	ldrb.w	r9, [r4, #24]
 800cd94:	6822      	ldr	r2, [r4, #0]
 800cd96:	3307      	adds	r3, #7
 800cd98:	f023 0307 	bic.w	r3, r3, #7
 800cd9c:	f103 0108 	add.w	r1, r3, #8
 800cda0:	f8c8 1000 	str.w	r1, [r8]
 800cda4:	ed93 0b00 	vldr	d0, [r3]
 800cda8:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800d008 <_printf_float+0x2a0>
 800cdac:	eeb0 7bc0 	vabs.f64	d7, d0
 800cdb0:	eeb4 7b46 	vcmp.f64	d7, d6
 800cdb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdb8:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800cdbc:	4682      	mov	sl, r0
 800cdbe:	dd24      	ble.n	800ce0a <_printf_float+0xa2>
 800cdc0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800cdc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdc8:	d502      	bpl.n	800cdd0 <_printf_float+0x68>
 800cdca:	232d      	movs	r3, #45	; 0x2d
 800cdcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cdd0:	498f      	ldr	r1, [pc, #572]	; (800d010 <_printf_float+0x2a8>)
 800cdd2:	4b90      	ldr	r3, [pc, #576]	; (800d014 <_printf_float+0x2ac>)
 800cdd4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800cdd8:	bf94      	ite	ls
 800cdda:	4688      	movls	r8, r1
 800cddc:	4698      	movhi	r8, r3
 800cdde:	2303      	movs	r3, #3
 800cde0:	6123      	str	r3, [r4, #16]
 800cde2:	f022 0204 	bic.w	r2, r2, #4
 800cde6:	2300      	movs	r3, #0
 800cde8:	6022      	str	r2, [r4, #0]
 800cdea:	9304      	str	r3, [sp, #16]
 800cdec:	9700      	str	r7, [sp, #0]
 800cdee:	4633      	mov	r3, r6
 800cdf0:	aa09      	add	r2, sp, #36	; 0x24
 800cdf2:	4621      	mov	r1, r4
 800cdf4:	4628      	mov	r0, r5
 800cdf6:	f000 f9d1 	bl	800d19c <_printf_common>
 800cdfa:	3001      	adds	r0, #1
 800cdfc:	f040 808a 	bne.w	800cf14 <_printf_float+0x1ac>
 800ce00:	f04f 30ff 	mov.w	r0, #4294967295
 800ce04:	b00b      	add	sp, #44	; 0x2c
 800ce06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce0a:	eeb4 0b40 	vcmp.f64	d0, d0
 800ce0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce12:	d709      	bvc.n	800ce28 <_printf_float+0xc0>
 800ce14:	ee10 3a90 	vmov	r3, s1
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	bfbc      	itt	lt
 800ce1c:	232d      	movlt	r3, #45	; 0x2d
 800ce1e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ce22:	497d      	ldr	r1, [pc, #500]	; (800d018 <_printf_float+0x2b0>)
 800ce24:	4b7d      	ldr	r3, [pc, #500]	; (800d01c <_printf_float+0x2b4>)
 800ce26:	e7d5      	b.n	800cdd4 <_printf_float+0x6c>
 800ce28:	6863      	ldr	r3, [r4, #4]
 800ce2a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800ce2e:	9104      	str	r1, [sp, #16]
 800ce30:	1c59      	adds	r1, r3, #1
 800ce32:	d13c      	bne.n	800ceae <_printf_float+0x146>
 800ce34:	2306      	movs	r3, #6
 800ce36:	6063      	str	r3, [r4, #4]
 800ce38:	2300      	movs	r3, #0
 800ce3a:	9303      	str	r3, [sp, #12]
 800ce3c:	ab08      	add	r3, sp, #32
 800ce3e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800ce42:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ce46:	ab07      	add	r3, sp, #28
 800ce48:	6861      	ldr	r1, [r4, #4]
 800ce4a:	9300      	str	r3, [sp, #0]
 800ce4c:	6022      	str	r2, [r4, #0]
 800ce4e:	f10d 031b 	add.w	r3, sp, #27
 800ce52:	4628      	mov	r0, r5
 800ce54:	f7ff fef6 	bl	800cc44 <__cvt>
 800ce58:	9b04      	ldr	r3, [sp, #16]
 800ce5a:	9907      	ldr	r1, [sp, #28]
 800ce5c:	2b47      	cmp	r3, #71	; 0x47
 800ce5e:	4680      	mov	r8, r0
 800ce60:	d108      	bne.n	800ce74 <_printf_float+0x10c>
 800ce62:	1cc8      	adds	r0, r1, #3
 800ce64:	db02      	blt.n	800ce6c <_printf_float+0x104>
 800ce66:	6863      	ldr	r3, [r4, #4]
 800ce68:	4299      	cmp	r1, r3
 800ce6a:	dd41      	ble.n	800cef0 <_printf_float+0x188>
 800ce6c:	f1a9 0902 	sub.w	r9, r9, #2
 800ce70:	fa5f f989 	uxtb.w	r9, r9
 800ce74:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ce78:	d820      	bhi.n	800cebc <_printf_float+0x154>
 800ce7a:	3901      	subs	r1, #1
 800ce7c:	464a      	mov	r2, r9
 800ce7e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ce82:	9107      	str	r1, [sp, #28]
 800ce84:	f7ff ff30 	bl	800cce8 <__exponent>
 800ce88:	9a08      	ldr	r2, [sp, #32]
 800ce8a:	9004      	str	r0, [sp, #16]
 800ce8c:	1813      	adds	r3, r2, r0
 800ce8e:	2a01      	cmp	r2, #1
 800ce90:	6123      	str	r3, [r4, #16]
 800ce92:	dc02      	bgt.n	800ce9a <_printf_float+0x132>
 800ce94:	6822      	ldr	r2, [r4, #0]
 800ce96:	07d2      	lsls	r2, r2, #31
 800ce98:	d501      	bpl.n	800ce9e <_printf_float+0x136>
 800ce9a:	3301      	adds	r3, #1
 800ce9c:	6123      	str	r3, [r4, #16]
 800ce9e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d0a2      	beq.n	800cdec <_printf_float+0x84>
 800cea6:	232d      	movs	r3, #45	; 0x2d
 800cea8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ceac:	e79e      	b.n	800cdec <_printf_float+0x84>
 800ceae:	9904      	ldr	r1, [sp, #16]
 800ceb0:	2947      	cmp	r1, #71	; 0x47
 800ceb2:	d1c1      	bne.n	800ce38 <_printf_float+0xd0>
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d1bf      	bne.n	800ce38 <_printf_float+0xd0>
 800ceb8:	2301      	movs	r3, #1
 800ceba:	e7bc      	b.n	800ce36 <_printf_float+0xce>
 800cebc:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800cec0:	d118      	bne.n	800cef4 <_printf_float+0x18c>
 800cec2:	2900      	cmp	r1, #0
 800cec4:	6863      	ldr	r3, [r4, #4]
 800cec6:	dd0b      	ble.n	800cee0 <_printf_float+0x178>
 800cec8:	6121      	str	r1, [r4, #16]
 800ceca:	b913      	cbnz	r3, 800ced2 <_printf_float+0x16a>
 800cecc:	6822      	ldr	r2, [r4, #0]
 800cece:	07d0      	lsls	r0, r2, #31
 800ced0:	d502      	bpl.n	800ced8 <_printf_float+0x170>
 800ced2:	3301      	adds	r3, #1
 800ced4:	440b      	add	r3, r1
 800ced6:	6123      	str	r3, [r4, #16]
 800ced8:	2300      	movs	r3, #0
 800ceda:	65a1      	str	r1, [r4, #88]	; 0x58
 800cedc:	9304      	str	r3, [sp, #16]
 800cede:	e7de      	b.n	800ce9e <_printf_float+0x136>
 800cee0:	b913      	cbnz	r3, 800cee8 <_printf_float+0x180>
 800cee2:	6822      	ldr	r2, [r4, #0]
 800cee4:	07d2      	lsls	r2, r2, #31
 800cee6:	d501      	bpl.n	800ceec <_printf_float+0x184>
 800cee8:	3302      	adds	r3, #2
 800ceea:	e7f4      	b.n	800ced6 <_printf_float+0x16e>
 800ceec:	2301      	movs	r3, #1
 800ceee:	e7f2      	b.n	800ced6 <_printf_float+0x16e>
 800cef0:	f04f 0967 	mov.w	r9, #103	; 0x67
 800cef4:	9b08      	ldr	r3, [sp, #32]
 800cef6:	4299      	cmp	r1, r3
 800cef8:	db05      	blt.n	800cf06 <_printf_float+0x19e>
 800cefa:	6823      	ldr	r3, [r4, #0]
 800cefc:	6121      	str	r1, [r4, #16]
 800cefe:	07d8      	lsls	r0, r3, #31
 800cf00:	d5ea      	bpl.n	800ced8 <_printf_float+0x170>
 800cf02:	1c4b      	adds	r3, r1, #1
 800cf04:	e7e7      	b.n	800ced6 <_printf_float+0x16e>
 800cf06:	2900      	cmp	r1, #0
 800cf08:	bfd4      	ite	le
 800cf0a:	f1c1 0202 	rsble	r2, r1, #2
 800cf0e:	2201      	movgt	r2, #1
 800cf10:	4413      	add	r3, r2
 800cf12:	e7e0      	b.n	800ced6 <_printf_float+0x16e>
 800cf14:	6823      	ldr	r3, [r4, #0]
 800cf16:	055a      	lsls	r2, r3, #21
 800cf18:	d407      	bmi.n	800cf2a <_printf_float+0x1c2>
 800cf1a:	6923      	ldr	r3, [r4, #16]
 800cf1c:	4642      	mov	r2, r8
 800cf1e:	4631      	mov	r1, r6
 800cf20:	4628      	mov	r0, r5
 800cf22:	47b8      	blx	r7
 800cf24:	3001      	adds	r0, #1
 800cf26:	d12a      	bne.n	800cf7e <_printf_float+0x216>
 800cf28:	e76a      	b.n	800ce00 <_printf_float+0x98>
 800cf2a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800cf2e:	f240 80e0 	bls.w	800d0f2 <_printf_float+0x38a>
 800cf32:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800cf36:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cf3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf3e:	d133      	bne.n	800cfa8 <_printf_float+0x240>
 800cf40:	4a37      	ldr	r2, [pc, #220]	; (800d020 <_printf_float+0x2b8>)
 800cf42:	2301      	movs	r3, #1
 800cf44:	4631      	mov	r1, r6
 800cf46:	4628      	mov	r0, r5
 800cf48:	47b8      	blx	r7
 800cf4a:	3001      	adds	r0, #1
 800cf4c:	f43f af58 	beq.w	800ce00 <_printf_float+0x98>
 800cf50:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800cf54:	429a      	cmp	r2, r3
 800cf56:	db02      	blt.n	800cf5e <_printf_float+0x1f6>
 800cf58:	6823      	ldr	r3, [r4, #0]
 800cf5a:	07d8      	lsls	r0, r3, #31
 800cf5c:	d50f      	bpl.n	800cf7e <_printf_float+0x216>
 800cf5e:	4653      	mov	r3, sl
 800cf60:	465a      	mov	r2, fp
 800cf62:	4631      	mov	r1, r6
 800cf64:	4628      	mov	r0, r5
 800cf66:	47b8      	blx	r7
 800cf68:	3001      	adds	r0, #1
 800cf6a:	f43f af49 	beq.w	800ce00 <_printf_float+0x98>
 800cf6e:	f04f 0800 	mov.w	r8, #0
 800cf72:	f104 091a 	add.w	r9, r4, #26
 800cf76:	9b08      	ldr	r3, [sp, #32]
 800cf78:	3b01      	subs	r3, #1
 800cf7a:	4543      	cmp	r3, r8
 800cf7c:	dc09      	bgt.n	800cf92 <_printf_float+0x22a>
 800cf7e:	6823      	ldr	r3, [r4, #0]
 800cf80:	079b      	lsls	r3, r3, #30
 800cf82:	f100 8106 	bmi.w	800d192 <_printf_float+0x42a>
 800cf86:	68e0      	ldr	r0, [r4, #12]
 800cf88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf8a:	4298      	cmp	r0, r3
 800cf8c:	bfb8      	it	lt
 800cf8e:	4618      	movlt	r0, r3
 800cf90:	e738      	b.n	800ce04 <_printf_float+0x9c>
 800cf92:	2301      	movs	r3, #1
 800cf94:	464a      	mov	r2, r9
 800cf96:	4631      	mov	r1, r6
 800cf98:	4628      	mov	r0, r5
 800cf9a:	47b8      	blx	r7
 800cf9c:	3001      	adds	r0, #1
 800cf9e:	f43f af2f 	beq.w	800ce00 <_printf_float+0x98>
 800cfa2:	f108 0801 	add.w	r8, r8, #1
 800cfa6:	e7e6      	b.n	800cf76 <_printf_float+0x20e>
 800cfa8:	9b07      	ldr	r3, [sp, #28]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	dc3a      	bgt.n	800d024 <_printf_float+0x2bc>
 800cfae:	4a1c      	ldr	r2, [pc, #112]	; (800d020 <_printf_float+0x2b8>)
 800cfb0:	2301      	movs	r3, #1
 800cfb2:	4631      	mov	r1, r6
 800cfb4:	4628      	mov	r0, r5
 800cfb6:	47b8      	blx	r7
 800cfb8:	3001      	adds	r0, #1
 800cfba:	f43f af21 	beq.w	800ce00 <_printf_float+0x98>
 800cfbe:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800cfc2:	4313      	orrs	r3, r2
 800cfc4:	d102      	bne.n	800cfcc <_printf_float+0x264>
 800cfc6:	6823      	ldr	r3, [r4, #0]
 800cfc8:	07d9      	lsls	r1, r3, #31
 800cfca:	d5d8      	bpl.n	800cf7e <_printf_float+0x216>
 800cfcc:	4653      	mov	r3, sl
 800cfce:	465a      	mov	r2, fp
 800cfd0:	4631      	mov	r1, r6
 800cfd2:	4628      	mov	r0, r5
 800cfd4:	47b8      	blx	r7
 800cfd6:	3001      	adds	r0, #1
 800cfd8:	f43f af12 	beq.w	800ce00 <_printf_float+0x98>
 800cfdc:	f04f 0900 	mov.w	r9, #0
 800cfe0:	f104 0a1a 	add.w	sl, r4, #26
 800cfe4:	9b07      	ldr	r3, [sp, #28]
 800cfe6:	425b      	negs	r3, r3
 800cfe8:	454b      	cmp	r3, r9
 800cfea:	dc01      	bgt.n	800cff0 <_printf_float+0x288>
 800cfec:	9b08      	ldr	r3, [sp, #32]
 800cfee:	e795      	b.n	800cf1c <_printf_float+0x1b4>
 800cff0:	2301      	movs	r3, #1
 800cff2:	4652      	mov	r2, sl
 800cff4:	4631      	mov	r1, r6
 800cff6:	4628      	mov	r0, r5
 800cff8:	47b8      	blx	r7
 800cffa:	3001      	adds	r0, #1
 800cffc:	f43f af00 	beq.w	800ce00 <_printf_float+0x98>
 800d000:	f109 0901 	add.w	r9, r9, #1
 800d004:	e7ee      	b.n	800cfe4 <_printf_float+0x27c>
 800d006:	bf00      	nop
 800d008:	ffffffff 	.word	0xffffffff
 800d00c:	7fefffff 	.word	0x7fefffff
 800d010:	0800f760 	.word	0x0800f760
 800d014:	0800f764 	.word	0x0800f764
 800d018:	0800f768 	.word	0x0800f768
 800d01c:	0800f76c 	.word	0x0800f76c
 800d020:	0800f770 	.word	0x0800f770
 800d024:	9a08      	ldr	r2, [sp, #32]
 800d026:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d028:	429a      	cmp	r2, r3
 800d02a:	bfa8      	it	ge
 800d02c:	461a      	movge	r2, r3
 800d02e:	2a00      	cmp	r2, #0
 800d030:	4691      	mov	r9, r2
 800d032:	dc38      	bgt.n	800d0a6 <_printf_float+0x33e>
 800d034:	2300      	movs	r3, #0
 800d036:	9305      	str	r3, [sp, #20]
 800d038:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d03c:	f104 021a 	add.w	r2, r4, #26
 800d040:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d042:	9905      	ldr	r1, [sp, #20]
 800d044:	9304      	str	r3, [sp, #16]
 800d046:	eba3 0309 	sub.w	r3, r3, r9
 800d04a:	428b      	cmp	r3, r1
 800d04c:	dc33      	bgt.n	800d0b6 <_printf_float+0x34e>
 800d04e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d052:	429a      	cmp	r2, r3
 800d054:	db3c      	blt.n	800d0d0 <_printf_float+0x368>
 800d056:	6823      	ldr	r3, [r4, #0]
 800d058:	07da      	lsls	r2, r3, #31
 800d05a:	d439      	bmi.n	800d0d0 <_printf_float+0x368>
 800d05c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800d060:	eba2 0903 	sub.w	r9, r2, r3
 800d064:	9b04      	ldr	r3, [sp, #16]
 800d066:	1ad2      	subs	r2, r2, r3
 800d068:	4591      	cmp	r9, r2
 800d06a:	bfa8      	it	ge
 800d06c:	4691      	movge	r9, r2
 800d06e:	f1b9 0f00 	cmp.w	r9, #0
 800d072:	dc35      	bgt.n	800d0e0 <_printf_float+0x378>
 800d074:	f04f 0800 	mov.w	r8, #0
 800d078:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d07c:	f104 0a1a 	add.w	sl, r4, #26
 800d080:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d084:	1a9b      	subs	r3, r3, r2
 800d086:	eba3 0309 	sub.w	r3, r3, r9
 800d08a:	4543      	cmp	r3, r8
 800d08c:	f77f af77 	ble.w	800cf7e <_printf_float+0x216>
 800d090:	2301      	movs	r3, #1
 800d092:	4652      	mov	r2, sl
 800d094:	4631      	mov	r1, r6
 800d096:	4628      	mov	r0, r5
 800d098:	47b8      	blx	r7
 800d09a:	3001      	adds	r0, #1
 800d09c:	f43f aeb0 	beq.w	800ce00 <_printf_float+0x98>
 800d0a0:	f108 0801 	add.w	r8, r8, #1
 800d0a4:	e7ec      	b.n	800d080 <_printf_float+0x318>
 800d0a6:	4613      	mov	r3, r2
 800d0a8:	4631      	mov	r1, r6
 800d0aa:	4642      	mov	r2, r8
 800d0ac:	4628      	mov	r0, r5
 800d0ae:	47b8      	blx	r7
 800d0b0:	3001      	adds	r0, #1
 800d0b2:	d1bf      	bne.n	800d034 <_printf_float+0x2cc>
 800d0b4:	e6a4      	b.n	800ce00 <_printf_float+0x98>
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	4631      	mov	r1, r6
 800d0ba:	4628      	mov	r0, r5
 800d0bc:	9204      	str	r2, [sp, #16]
 800d0be:	47b8      	blx	r7
 800d0c0:	3001      	adds	r0, #1
 800d0c2:	f43f ae9d 	beq.w	800ce00 <_printf_float+0x98>
 800d0c6:	9b05      	ldr	r3, [sp, #20]
 800d0c8:	9a04      	ldr	r2, [sp, #16]
 800d0ca:	3301      	adds	r3, #1
 800d0cc:	9305      	str	r3, [sp, #20]
 800d0ce:	e7b7      	b.n	800d040 <_printf_float+0x2d8>
 800d0d0:	4653      	mov	r3, sl
 800d0d2:	465a      	mov	r2, fp
 800d0d4:	4631      	mov	r1, r6
 800d0d6:	4628      	mov	r0, r5
 800d0d8:	47b8      	blx	r7
 800d0da:	3001      	adds	r0, #1
 800d0dc:	d1be      	bne.n	800d05c <_printf_float+0x2f4>
 800d0de:	e68f      	b.n	800ce00 <_printf_float+0x98>
 800d0e0:	9a04      	ldr	r2, [sp, #16]
 800d0e2:	464b      	mov	r3, r9
 800d0e4:	4442      	add	r2, r8
 800d0e6:	4631      	mov	r1, r6
 800d0e8:	4628      	mov	r0, r5
 800d0ea:	47b8      	blx	r7
 800d0ec:	3001      	adds	r0, #1
 800d0ee:	d1c1      	bne.n	800d074 <_printf_float+0x30c>
 800d0f0:	e686      	b.n	800ce00 <_printf_float+0x98>
 800d0f2:	9a08      	ldr	r2, [sp, #32]
 800d0f4:	2a01      	cmp	r2, #1
 800d0f6:	dc01      	bgt.n	800d0fc <_printf_float+0x394>
 800d0f8:	07db      	lsls	r3, r3, #31
 800d0fa:	d537      	bpl.n	800d16c <_printf_float+0x404>
 800d0fc:	2301      	movs	r3, #1
 800d0fe:	4642      	mov	r2, r8
 800d100:	4631      	mov	r1, r6
 800d102:	4628      	mov	r0, r5
 800d104:	47b8      	blx	r7
 800d106:	3001      	adds	r0, #1
 800d108:	f43f ae7a 	beq.w	800ce00 <_printf_float+0x98>
 800d10c:	4653      	mov	r3, sl
 800d10e:	465a      	mov	r2, fp
 800d110:	4631      	mov	r1, r6
 800d112:	4628      	mov	r0, r5
 800d114:	47b8      	blx	r7
 800d116:	3001      	adds	r0, #1
 800d118:	f43f ae72 	beq.w	800ce00 <_printf_float+0x98>
 800d11c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800d120:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d128:	9b08      	ldr	r3, [sp, #32]
 800d12a:	d01a      	beq.n	800d162 <_printf_float+0x3fa>
 800d12c:	3b01      	subs	r3, #1
 800d12e:	f108 0201 	add.w	r2, r8, #1
 800d132:	4631      	mov	r1, r6
 800d134:	4628      	mov	r0, r5
 800d136:	47b8      	blx	r7
 800d138:	3001      	adds	r0, #1
 800d13a:	d10e      	bne.n	800d15a <_printf_float+0x3f2>
 800d13c:	e660      	b.n	800ce00 <_printf_float+0x98>
 800d13e:	2301      	movs	r3, #1
 800d140:	464a      	mov	r2, r9
 800d142:	4631      	mov	r1, r6
 800d144:	4628      	mov	r0, r5
 800d146:	47b8      	blx	r7
 800d148:	3001      	adds	r0, #1
 800d14a:	f43f ae59 	beq.w	800ce00 <_printf_float+0x98>
 800d14e:	f108 0801 	add.w	r8, r8, #1
 800d152:	9b08      	ldr	r3, [sp, #32]
 800d154:	3b01      	subs	r3, #1
 800d156:	4543      	cmp	r3, r8
 800d158:	dcf1      	bgt.n	800d13e <_printf_float+0x3d6>
 800d15a:	9b04      	ldr	r3, [sp, #16]
 800d15c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d160:	e6dd      	b.n	800cf1e <_printf_float+0x1b6>
 800d162:	f04f 0800 	mov.w	r8, #0
 800d166:	f104 091a 	add.w	r9, r4, #26
 800d16a:	e7f2      	b.n	800d152 <_printf_float+0x3ea>
 800d16c:	2301      	movs	r3, #1
 800d16e:	4642      	mov	r2, r8
 800d170:	e7df      	b.n	800d132 <_printf_float+0x3ca>
 800d172:	2301      	movs	r3, #1
 800d174:	464a      	mov	r2, r9
 800d176:	4631      	mov	r1, r6
 800d178:	4628      	mov	r0, r5
 800d17a:	47b8      	blx	r7
 800d17c:	3001      	adds	r0, #1
 800d17e:	f43f ae3f 	beq.w	800ce00 <_printf_float+0x98>
 800d182:	f108 0801 	add.w	r8, r8, #1
 800d186:	68e3      	ldr	r3, [r4, #12]
 800d188:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d18a:	1a5b      	subs	r3, r3, r1
 800d18c:	4543      	cmp	r3, r8
 800d18e:	dcf0      	bgt.n	800d172 <_printf_float+0x40a>
 800d190:	e6f9      	b.n	800cf86 <_printf_float+0x21e>
 800d192:	f04f 0800 	mov.w	r8, #0
 800d196:	f104 0919 	add.w	r9, r4, #25
 800d19a:	e7f4      	b.n	800d186 <_printf_float+0x41e>

0800d19c <_printf_common>:
 800d19c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1a0:	4616      	mov	r6, r2
 800d1a2:	4699      	mov	r9, r3
 800d1a4:	688a      	ldr	r2, [r1, #8]
 800d1a6:	690b      	ldr	r3, [r1, #16]
 800d1a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d1ac:	4293      	cmp	r3, r2
 800d1ae:	bfb8      	it	lt
 800d1b0:	4613      	movlt	r3, r2
 800d1b2:	6033      	str	r3, [r6, #0]
 800d1b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d1b8:	4607      	mov	r7, r0
 800d1ba:	460c      	mov	r4, r1
 800d1bc:	b10a      	cbz	r2, 800d1c2 <_printf_common+0x26>
 800d1be:	3301      	adds	r3, #1
 800d1c0:	6033      	str	r3, [r6, #0]
 800d1c2:	6823      	ldr	r3, [r4, #0]
 800d1c4:	0699      	lsls	r1, r3, #26
 800d1c6:	bf42      	ittt	mi
 800d1c8:	6833      	ldrmi	r3, [r6, #0]
 800d1ca:	3302      	addmi	r3, #2
 800d1cc:	6033      	strmi	r3, [r6, #0]
 800d1ce:	6825      	ldr	r5, [r4, #0]
 800d1d0:	f015 0506 	ands.w	r5, r5, #6
 800d1d4:	d106      	bne.n	800d1e4 <_printf_common+0x48>
 800d1d6:	f104 0a19 	add.w	sl, r4, #25
 800d1da:	68e3      	ldr	r3, [r4, #12]
 800d1dc:	6832      	ldr	r2, [r6, #0]
 800d1de:	1a9b      	subs	r3, r3, r2
 800d1e0:	42ab      	cmp	r3, r5
 800d1e2:	dc26      	bgt.n	800d232 <_printf_common+0x96>
 800d1e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d1e8:	1e13      	subs	r3, r2, #0
 800d1ea:	6822      	ldr	r2, [r4, #0]
 800d1ec:	bf18      	it	ne
 800d1ee:	2301      	movne	r3, #1
 800d1f0:	0692      	lsls	r2, r2, #26
 800d1f2:	d42b      	bmi.n	800d24c <_printf_common+0xb0>
 800d1f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d1f8:	4649      	mov	r1, r9
 800d1fa:	4638      	mov	r0, r7
 800d1fc:	47c0      	blx	r8
 800d1fe:	3001      	adds	r0, #1
 800d200:	d01e      	beq.n	800d240 <_printf_common+0xa4>
 800d202:	6823      	ldr	r3, [r4, #0]
 800d204:	6922      	ldr	r2, [r4, #16]
 800d206:	f003 0306 	and.w	r3, r3, #6
 800d20a:	2b04      	cmp	r3, #4
 800d20c:	bf02      	ittt	eq
 800d20e:	68e5      	ldreq	r5, [r4, #12]
 800d210:	6833      	ldreq	r3, [r6, #0]
 800d212:	1aed      	subeq	r5, r5, r3
 800d214:	68a3      	ldr	r3, [r4, #8]
 800d216:	bf0c      	ite	eq
 800d218:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d21c:	2500      	movne	r5, #0
 800d21e:	4293      	cmp	r3, r2
 800d220:	bfc4      	itt	gt
 800d222:	1a9b      	subgt	r3, r3, r2
 800d224:	18ed      	addgt	r5, r5, r3
 800d226:	2600      	movs	r6, #0
 800d228:	341a      	adds	r4, #26
 800d22a:	42b5      	cmp	r5, r6
 800d22c:	d11a      	bne.n	800d264 <_printf_common+0xc8>
 800d22e:	2000      	movs	r0, #0
 800d230:	e008      	b.n	800d244 <_printf_common+0xa8>
 800d232:	2301      	movs	r3, #1
 800d234:	4652      	mov	r2, sl
 800d236:	4649      	mov	r1, r9
 800d238:	4638      	mov	r0, r7
 800d23a:	47c0      	blx	r8
 800d23c:	3001      	adds	r0, #1
 800d23e:	d103      	bne.n	800d248 <_printf_common+0xac>
 800d240:	f04f 30ff 	mov.w	r0, #4294967295
 800d244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d248:	3501      	adds	r5, #1
 800d24a:	e7c6      	b.n	800d1da <_printf_common+0x3e>
 800d24c:	18e1      	adds	r1, r4, r3
 800d24e:	1c5a      	adds	r2, r3, #1
 800d250:	2030      	movs	r0, #48	; 0x30
 800d252:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d256:	4422      	add	r2, r4
 800d258:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d25c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d260:	3302      	adds	r3, #2
 800d262:	e7c7      	b.n	800d1f4 <_printf_common+0x58>
 800d264:	2301      	movs	r3, #1
 800d266:	4622      	mov	r2, r4
 800d268:	4649      	mov	r1, r9
 800d26a:	4638      	mov	r0, r7
 800d26c:	47c0      	blx	r8
 800d26e:	3001      	adds	r0, #1
 800d270:	d0e6      	beq.n	800d240 <_printf_common+0xa4>
 800d272:	3601      	adds	r6, #1
 800d274:	e7d9      	b.n	800d22a <_printf_common+0x8e>
	...

0800d278 <_printf_i>:
 800d278:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d27c:	7e0f      	ldrb	r7, [r1, #24]
 800d27e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d280:	2f78      	cmp	r7, #120	; 0x78
 800d282:	4691      	mov	r9, r2
 800d284:	4680      	mov	r8, r0
 800d286:	460c      	mov	r4, r1
 800d288:	469a      	mov	sl, r3
 800d28a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d28e:	d807      	bhi.n	800d2a0 <_printf_i+0x28>
 800d290:	2f62      	cmp	r7, #98	; 0x62
 800d292:	d80a      	bhi.n	800d2aa <_printf_i+0x32>
 800d294:	2f00      	cmp	r7, #0
 800d296:	f000 80d4 	beq.w	800d442 <_printf_i+0x1ca>
 800d29a:	2f58      	cmp	r7, #88	; 0x58
 800d29c:	f000 80c0 	beq.w	800d420 <_printf_i+0x1a8>
 800d2a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d2a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d2a8:	e03a      	b.n	800d320 <_printf_i+0xa8>
 800d2aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d2ae:	2b15      	cmp	r3, #21
 800d2b0:	d8f6      	bhi.n	800d2a0 <_printf_i+0x28>
 800d2b2:	a101      	add	r1, pc, #4	; (adr r1, 800d2b8 <_printf_i+0x40>)
 800d2b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d2b8:	0800d311 	.word	0x0800d311
 800d2bc:	0800d325 	.word	0x0800d325
 800d2c0:	0800d2a1 	.word	0x0800d2a1
 800d2c4:	0800d2a1 	.word	0x0800d2a1
 800d2c8:	0800d2a1 	.word	0x0800d2a1
 800d2cc:	0800d2a1 	.word	0x0800d2a1
 800d2d0:	0800d325 	.word	0x0800d325
 800d2d4:	0800d2a1 	.word	0x0800d2a1
 800d2d8:	0800d2a1 	.word	0x0800d2a1
 800d2dc:	0800d2a1 	.word	0x0800d2a1
 800d2e0:	0800d2a1 	.word	0x0800d2a1
 800d2e4:	0800d429 	.word	0x0800d429
 800d2e8:	0800d351 	.word	0x0800d351
 800d2ec:	0800d3e3 	.word	0x0800d3e3
 800d2f0:	0800d2a1 	.word	0x0800d2a1
 800d2f4:	0800d2a1 	.word	0x0800d2a1
 800d2f8:	0800d44b 	.word	0x0800d44b
 800d2fc:	0800d2a1 	.word	0x0800d2a1
 800d300:	0800d351 	.word	0x0800d351
 800d304:	0800d2a1 	.word	0x0800d2a1
 800d308:	0800d2a1 	.word	0x0800d2a1
 800d30c:	0800d3eb 	.word	0x0800d3eb
 800d310:	682b      	ldr	r3, [r5, #0]
 800d312:	1d1a      	adds	r2, r3, #4
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	602a      	str	r2, [r5, #0]
 800d318:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d31c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d320:	2301      	movs	r3, #1
 800d322:	e09f      	b.n	800d464 <_printf_i+0x1ec>
 800d324:	6820      	ldr	r0, [r4, #0]
 800d326:	682b      	ldr	r3, [r5, #0]
 800d328:	0607      	lsls	r7, r0, #24
 800d32a:	f103 0104 	add.w	r1, r3, #4
 800d32e:	6029      	str	r1, [r5, #0]
 800d330:	d501      	bpl.n	800d336 <_printf_i+0xbe>
 800d332:	681e      	ldr	r6, [r3, #0]
 800d334:	e003      	b.n	800d33e <_printf_i+0xc6>
 800d336:	0646      	lsls	r6, r0, #25
 800d338:	d5fb      	bpl.n	800d332 <_printf_i+0xba>
 800d33a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d33e:	2e00      	cmp	r6, #0
 800d340:	da03      	bge.n	800d34a <_printf_i+0xd2>
 800d342:	232d      	movs	r3, #45	; 0x2d
 800d344:	4276      	negs	r6, r6
 800d346:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d34a:	485a      	ldr	r0, [pc, #360]	; (800d4b4 <_printf_i+0x23c>)
 800d34c:	230a      	movs	r3, #10
 800d34e:	e012      	b.n	800d376 <_printf_i+0xfe>
 800d350:	682b      	ldr	r3, [r5, #0]
 800d352:	6820      	ldr	r0, [r4, #0]
 800d354:	1d19      	adds	r1, r3, #4
 800d356:	6029      	str	r1, [r5, #0]
 800d358:	0605      	lsls	r5, r0, #24
 800d35a:	d501      	bpl.n	800d360 <_printf_i+0xe8>
 800d35c:	681e      	ldr	r6, [r3, #0]
 800d35e:	e002      	b.n	800d366 <_printf_i+0xee>
 800d360:	0641      	lsls	r1, r0, #25
 800d362:	d5fb      	bpl.n	800d35c <_printf_i+0xe4>
 800d364:	881e      	ldrh	r6, [r3, #0]
 800d366:	4853      	ldr	r0, [pc, #332]	; (800d4b4 <_printf_i+0x23c>)
 800d368:	2f6f      	cmp	r7, #111	; 0x6f
 800d36a:	bf0c      	ite	eq
 800d36c:	2308      	moveq	r3, #8
 800d36e:	230a      	movne	r3, #10
 800d370:	2100      	movs	r1, #0
 800d372:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d376:	6865      	ldr	r5, [r4, #4]
 800d378:	60a5      	str	r5, [r4, #8]
 800d37a:	2d00      	cmp	r5, #0
 800d37c:	bfa2      	ittt	ge
 800d37e:	6821      	ldrge	r1, [r4, #0]
 800d380:	f021 0104 	bicge.w	r1, r1, #4
 800d384:	6021      	strge	r1, [r4, #0]
 800d386:	b90e      	cbnz	r6, 800d38c <_printf_i+0x114>
 800d388:	2d00      	cmp	r5, #0
 800d38a:	d04b      	beq.n	800d424 <_printf_i+0x1ac>
 800d38c:	4615      	mov	r5, r2
 800d38e:	fbb6 f1f3 	udiv	r1, r6, r3
 800d392:	fb03 6711 	mls	r7, r3, r1, r6
 800d396:	5dc7      	ldrb	r7, [r0, r7]
 800d398:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d39c:	4637      	mov	r7, r6
 800d39e:	42bb      	cmp	r3, r7
 800d3a0:	460e      	mov	r6, r1
 800d3a2:	d9f4      	bls.n	800d38e <_printf_i+0x116>
 800d3a4:	2b08      	cmp	r3, #8
 800d3a6:	d10b      	bne.n	800d3c0 <_printf_i+0x148>
 800d3a8:	6823      	ldr	r3, [r4, #0]
 800d3aa:	07de      	lsls	r6, r3, #31
 800d3ac:	d508      	bpl.n	800d3c0 <_printf_i+0x148>
 800d3ae:	6923      	ldr	r3, [r4, #16]
 800d3b0:	6861      	ldr	r1, [r4, #4]
 800d3b2:	4299      	cmp	r1, r3
 800d3b4:	bfde      	ittt	le
 800d3b6:	2330      	movle	r3, #48	; 0x30
 800d3b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d3bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d3c0:	1b52      	subs	r2, r2, r5
 800d3c2:	6122      	str	r2, [r4, #16]
 800d3c4:	f8cd a000 	str.w	sl, [sp]
 800d3c8:	464b      	mov	r3, r9
 800d3ca:	aa03      	add	r2, sp, #12
 800d3cc:	4621      	mov	r1, r4
 800d3ce:	4640      	mov	r0, r8
 800d3d0:	f7ff fee4 	bl	800d19c <_printf_common>
 800d3d4:	3001      	adds	r0, #1
 800d3d6:	d14a      	bne.n	800d46e <_printf_i+0x1f6>
 800d3d8:	f04f 30ff 	mov.w	r0, #4294967295
 800d3dc:	b004      	add	sp, #16
 800d3de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3e2:	6823      	ldr	r3, [r4, #0]
 800d3e4:	f043 0320 	orr.w	r3, r3, #32
 800d3e8:	6023      	str	r3, [r4, #0]
 800d3ea:	4833      	ldr	r0, [pc, #204]	; (800d4b8 <_printf_i+0x240>)
 800d3ec:	2778      	movs	r7, #120	; 0x78
 800d3ee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d3f2:	6823      	ldr	r3, [r4, #0]
 800d3f4:	6829      	ldr	r1, [r5, #0]
 800d3f6:	061f      	lsls	r7, r3, #24
 800d3f8:	f851 6b04 	ldr.w	r6, [r1], #4
 800d3fc:	d402      	bmi.n	800d404 <_printf_i+0x18c>
 800d3fe:	065f      	lsls	r7, r3, #25
 800d400:	bf48      	it	mi
 800d402:	b2b6      	uxthmi	r6, r6
 800d404:	07df      	lsls	r7, r3, #31
 800d406:	bf48      	it	mi
 800d408:	f043 0320 	orrmi.w	r3, r3, #32
 800d40c:	6029      	str	r1, [r5, #0]
 800d40e:	bf48      	it	mi
 800d410:	6023      	strmi	r3, [r4, #0]
 800d412:	b91e      	cbnz	r6, 800d41c <_printf_i+0x1a4>
 800d414:	6823      	ldr	r3, [r4, #0]
 800d416:	f023 0320 	bic.w	r3, r3, #32
 800d41a:	6023      	str	r3, [r4, #0]
 800d41c:	2310      	movs	r3, #16
 800d41e:	e7a7      	b.n	800d370 <_printf_i+0xf8>
 800d420:	4824      	ldr	r0, [pc, #144]	; (800d4b4 <_printf_i+0x23c>)
 800d422:	e7e4      	b.n	800d3ee <_printf_i+0x176>
 800d424:	4615      	mov	r5, r2
 800d426:	e7bd      	b.n	800d3a4 <_printf_i+0x12c>
 800d428:	682b      	ldr	r3, [r5, #0]
 800d42a:	6826      	ldr	r6, [r4, #0]
 800d42c:	6961      	ldr	r1, [r4, #20]
 800d42e:	1d18      	adds	r0, r3, #4
 800d430:	6028      	str	r0, [r5, #0]
 800d432:	0635      	lsls	r5, r6, #24
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	d501      	bpl.n	800d43c <_printf_i+0x1c4>
 800d438:	6019      	str	r1, [r3, #0]
 800d43a:	e002      	b.n	800d442 <_printf_i+0x1ca>
 800d43c:	0670      	lsls	r0, r6, #25
 800d43e:	d5fb      	bpl.n	800d438 <_printf_i+0x1c0>
 800d440:	8019      	strh	r1, [r3, #0]
 800d442:	2300      	movs	r3, #0
 800d444:	6123      	str	r3, [r4, #16]
 800d446:	4615      	mov	r5, r2
 800d448:	e7bc      	b.n	800d3c4 <_printf_i+0x14c>
 800d44a:	682b      	ldr	r3, [r5, #0]
 800d44c:	1d1a      	adds	r2, r3, #4
 800d44e:	602a      	str	r2, [r5, #0]
 800d450:	681d      	ldr	r5, [r3, #0]
 800d452:	6862      	ldr	r2, [r4, #4]
 800d454:	2100      	movs	r1, #0
 800d456:	4628      	mov	r0, r5
 800d458:	f7f2 ff42 	bl	80002e0 <memchr>
 800d45c:	b108      	cbz	r0, 800d462 <_printf_i+0x1ea>
 800d45e:	1b40      	subs	r0, r0, r5
 800d460:	6060      	str	r0, [r4, #4]
 800d462:	6863      	ldr	r3, [r4, #4]
 800d464:	6123      	str	r3, [r4, #16]
 800d466:	2300      	movs	r3, #0
 800d468:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d46c:	e7aa      	b.n	800d3c4 <_printf_i+0x14c>
 800d46e:	6923      	ldr	r3, [r4, #16]
 800d470:	462a      	mov	r2, r5
 800d472:	4649      	mov	r1, r9
 800d474:	4640      	mov	r0, r8
 800d476:	47d0      	blx	sl
 800d478:	3001      	adds	r0, #1
 800d47a:	d0ad      	beq.n	800d3d8 <_printf_i+0x160>
 800d47c:	6823      	ldr	r3, [r4, #0]
 800d47e:	079b      	lsls	r3, r3, #30
 800d480:	d413      	bmi.n	800d4aa <_printf_i+0x232>
 800d482:	68e0      	ldr	r0, [r4, #12]
 800d484:	9b03      	ldr	r3, [sp, #12]
 800d486:	4298      	cmp	r0, r3
 800d488:	bfb8      	it	lt
 800d48a:	4618      	movlt	r0, r3
 800d48c:	e7a6      	b.n	800d3dc <_printf_i+0x164>
 800d48e:	2301      	movs	r3, #1
 800d490:	4632      	mov	r2, r6
 800d492:	4649      	mov	r1, r9
 800d494:	4640      	mov	r0, r8
 800d496:	47d0      	blx	sl
 800d498:	3001      	adds	r0, #1
 800d49a:	d09d      	beq.n	800d3d8 <_printf_i+0x160>
 800d49c:	3501      	adds	r5, #1
 800d49e:	68e3      	ldr	r3, [r4, #12]
 800d4a0:	9903      	ldr	r1, [sp, #12]
 800d4a2:	1a5b      	subs	r3, r3, r1
 800d4a4:	42ab      	cmp	r3, r5
 800d4a6:	dcf2      	bgt.n	800d48e <_printf_i+0x216>
 800d4a8:	e7eb      	b.n	800d482 <_printf_i+0x20a>
 800d4aa:	2500      	movs	r5, #0
 800d4ac:	f104 0619 	add.w	r6, r4, #25
 800d4b0:	e7f5      	b.n	800d49e <_printf_i+0x226>
 800d4b2:	bf00      	nop
 800d4b4:	0800f772 	.word	0x0800f772
 800d4b8:	0800f783 	.word	0x0800f783

0800d4bc <std>:
 800d4bc:	2300      	movs	r3, #0
 800d4be:	b510      	push	{r4, lr}
 800d4c0:	4604      	mov	r4, r0
 800d4c2:	e9c0 3300 	strd	r3, r3, [r0]
 800d4c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d4ca:	6083      	str	r3, [r0, #8]
 800d4cc:	8181      	strh	r1, [r0, #12]
 800d4ce:	6643      	str	r3, [r0, #100]	; 0x64
 800d4d0:	81c2      	strh	r2, [r0, #14]
 800d4d2:	6183      	str	r3, [r0, #24]
 800d4d4:	4619      	mov	r1, r3
 800d4d6:	2208      	movs	r2, #8
 800d4d8:	305c      	adds	r0, #92	; 0x5c
 800d4da:	f000 f914 	bl	800d706 <memset>
 800d4de:	4b0d      	ldr	r3, [pc, #52]	; (800d514 <std+0x58>)
 800d4e0:	6263      	str	r3, [r4, #36]	; 0x24
 800d4e2:	4b0d      	ldr	r3, [pc, #52]	; (800d518 <std+0x5c>)
 800d4e4:	62a3      	str	r3, [r4, #40]	; 0x28
 800d4e6:	4b0d      	ldr	r3, [pc, #52]	; (800d51c <std+0x60>)
 800d4e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d4ea:	4b0d      	ldr	r3, [pc, #52]	; (800d520 <std+0x64>)
 800d4ec:	6323      	str	r3, [r4, #48]	; 0x30
 800d4ee:	4b0d      	ldr	r3, [pc, #52]	; (800d524 <std+0x68>)
 800d4f0:	6224      	str	r4, [r4, #32]
 800d4f2:	429c      	cmp	r4, r3
 800d4f4:	d006      	beq.n	800d504 <std+0x48>
 800d4f6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d4fa:	4294      	cmp	r4, r2
 800d4fc:	d002      	beq.n	800d504 <std+0x48>
 800d4fe:	33d0      	adds	r3, #208	; 0xd0
 800d500:	429c      	cmp	r4, r3
 800d502:	d105      	bne.n	800d510 <std+0x54>
 800d504:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d50c:	f000 b988 	b.w	800d820 <__retarget_lock_init_recursive>
 800d510:	bd10      	pop	{r4, pc}
 800d512:	bf00      	nop
 800d514:	0800d681 	.word	0x0800d681
 800d518:	0800d6a3 	.word	0x0800d6a3
 800d51c:	0800d6db 	.word	0x0800d6db
 800d520:	0800d6ff 	.word	0x0800d6ff
 800d524:	24010e0c 	.word	0x24010e0c

0800d528 <stdio_exit_handler>:
 800d528:	4a02      	ldr	r2, [pc, #8]	; (800d534 <stdio_exit_handler+0xc>)
 800d52a:	4903      	ldr	r1, [pc, #12]	; (800d538 <stdio_exit_handler+0x10>)
 800d52c:	4803      	ldr	r0, [pc, #12]	; (800d53c <stdio_exit_handler+0x14>)
 800d52e:	f000 b869 	b.w	800d604 <_fwalk_sglue>
 800d532:	bf00      	nop
 800d534:	24000144 	.word	0x24000144
 800d538:	0800ef8d 	.word	0x0800ef8d
 800d53c:	24000150 	.word	0x24000150

0800d540 <cleanup_stdio>:
 800d540:	6841      	ldr	r1, [r0, #4]
 800d542:	4b0c      	ldr	r3, [pc, #48]	; (800d574 <cleanup_stdio+0x34>)
 800d544:	4299      	cmp	r1, r3
 800d546:	b510      	push	{r4, lr}
 800d548:	4604      	mov	r4, r0
 800d54a:	d001      	beq.n	800d550 <cleanup_stdio+0x10>
 800d54c:	f001 fd1e 	bl	800ef8c <_fflush_r>
 800d550:	68a1      	ldr	r1, [r4, #8]
 800d552:	4b09      	ldr	r3, [pc, #36]	; (800d578 <cleanup_stdio+0x38>)
 800d554:	4299      	cmp	r1, r3
 800d556:	d002      	beq.n	800d55e <cleanup_stdio+0x1e>
 800d558:	4620      	mov	r0, r4
 800d55a:	f001 fd17 	bl	800ef8c <_fflush_r>
 800d55e:	68e1      	ldr	r1, [r4, #12]
 800d560:	4b06      	ldr	r3, [pc, #24]	; (800d57c <cleanup_stdio+0x3c>)
 800d562:	4299      	cmp	r1, r3
 800d564:	d004      	beq.n	800d570 <cleanup_stdio+0x30>
 800d566:	4620      	mov	r0, r4
 800d568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d56c:	f001 bd0e 	b.w	800ef8c <_fflush_r>
 800d570:	bd10      	pop	{r4, pc}
 800d572:	bf00      	nop
 800d574:	24010e0c 	.word	0x24010e0c
 800d578:	24010e74 	.word	0x24010e74
 800d57c:	24010edc 	.word	0x24010edc

0800d580 <global_stdio_init.part.0>:
 800d580:	b510      	push	{r4, lr}
 800d582:	4b0b      	ldr	r3, [pc, #44]	; (800d5b0 <global_stdio_init.part.0+0x30>)
 800d584:	4c0b      	ldr	r4, [pc, #44]	; (800d5b4 <global_stdio_init.part.0+0x34>)
 800d586:	4a0c      	ldr	r2, [pc, #48]	; (800d5b8 <global_stdio_init.part.0+0x38>)
 800d588:	601a      	str	r2, [r3, #0]
 800d58a:	4620      	mov	r0, r4
 800d58c:	2200      	movs	r2, #0
 800d58e:	2104      	movs	r1, #4
 800d590:	f7ff ff94 	bl	800d4bc <std>
 800d594:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d598:	2201      	movs	r2, #1
 800d59a:	2109      	movs	r1, #9
 800d59c:	f7ff ff8e 	bl	800d4bc <std>
 800d5a0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d5a4:	2202      	movs	r2, #2
 800d5a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d5aa:	2112      	movs	r1, #18
 800d5ac:	f7ff bf86 	b.w	800d4bc <std>
 800d5b0:	24010f44 	.word	0x24010f44
 800d5b4:	24010e0c 	.word	0x24010e0c
 800d5b8:	0800d529 	.word	0x0800d529

0800d5bc <__sfp_lock_acquire>:
 800d5bc:	4801      	ldr	r0, [pc, #4]	; (800d5c4 <__sfp_lock_acquire+0x8>)
 800d5be:	f000 b930 	b.w	800d822 <__retarget_lock_acquire_recursive>
 800d5c2:	bf00      	nop
 800d5c4:	24010f4d 	.word	0x24010f4d

0800d5c8 <__sfp_lock_release>:
 800d5c8:	4801      	ldr	r0, [pc, #4]	; (800d5d0 <__sfp_lock_release+0x8>)
 800d5ca:	f000 b92b 	b.w	800d824 <__retarget_lock_release_recursive>
 800d5ce:	bf00      	nop
 800d5d0:	24010f4d 	.word	0x24010f4d

0800d5d4 <__sinit>:
 800d5d4:	b510      	push	{r4, lr}
 800d5d6:	4604      	mov	r4, r0
 800d5d8:	f7ff fff0 	bl	800d5bc <__sfp_lock_acquire>
 800d5dc:	6a23      	ldr	r3, [r4, #32]
 800d5de:	b11b      	cbz	r3, 800d5e8 <__sinit+0x14>
 800d5e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d5e4:	f7ff bff0 	b.w	800d5c8 <__sfp_lock_release>
 800d5e8:	4b04      	ldr	r3, [pc, #16]	; (800d5fc <__sinit+0x28>)
 800d5ea:	6223      	str	r3, [r4, #32]
 800d5ec:	4b04      	ldr	r3, [pc, #16]	; (800d600 <__sinit+0x2c>)
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d1f5      	bne.n	800d5e0 <__sinit+0xc>
 800d5f4:	f7ff ffc4 	bl	800d580 <global_stdio_init.part.0>
 800d5f8:	e7f2      	b.n	800d5e0 <__sinit+0xc>
 800d5fa:	bf00      	nop
 800d5fc:	0800d541 	.word	0x0800d541
 800d600:	24010f44 	.word	0x24010f44

0800d604 <_fwalk_sglue>:
 800d604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d608:	4607      	mov	r7, r0
 800d60a:	4688      	mov	r8, r1
 800d60c:	4614      	mov	r4, r2
 800d60e:	2600      	movs	r6, #0
 800d610:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d614:	f1b9 0901 	subs.w	r9, r9, #1
 800d618:	d505      	bpl.n	800d626 <_fwalk_sglue+0x22>
 800d61a:	6824      	ldr	r4, [r4, #0]
 800d61c:	2c00      	cmp	r4, #0
 800d61e:	d1f7      	bne.n	800d610 <_fwalk_sglue+0xc>
 800d620:	4630      	mov	r0, r6
 800d622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d626:	89ab      	ldrh	r3, [r5, #12]
 800d628:	2b01      	cmp	r3, #1
 800d62a:	d907      	bls.n	800d63c <_fwalk_sglue+0x38>
 800d62c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d630:	3301      	adds	r3, #1
 800d632:	d003      	beq.n	800d63c <_fwalk_sglue+0x38>
 800d634:	4629      	mov	r1, r5
 800d636:	4638      	mov	r0, r7
 800d638:	47c0      	blx	r8
 800d63a:	4306      	orrs	r6, r0
 800d63c:	3568      	adds	r5, #104	; 0x68
 800d63e:	e7e9      	b.n	800d614 <_fwalk_sglue+0x10>

0800d640 <siprintf>:
 800d640:	b40e      	push	{r1, r2, r3}
 800d642:	b500      	push	{lr}
 800d644:	b09c      	sub	sp, #112	; 0x70
 800d646:	ab1d      	add	r3, sp, #116	; 0x74
 800d648:	9002      	str	r0, [sp, #8]
 800d64a:	9006      	str	r0, [sp, #24]
 800d64c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d650:	4809      	ldr	r0, [pc, #36]	; (800d678 <siprintf+0x38>)
 800d652:	9107      	str	r1, [sp, #28]
 800d654:	9104      	str	r1, [sp, #16]
 800d656:	4909      	ldr	r1, [pc, #36]	; (800d67c <siprintf+0x3c>)
 800d658:	f853 2b04 	ldr.w	r2, [r3], #4
 800d65c:	9105      	str	r1, [sp, #20]
 800d65e:	6800      	ldr	r0, [r0, #0]
 800d660:	9301      	str	r3, [sp, #4]
 800d662:	a902      	add	r1, sp, #8
 800d664:	f001 fb0e 	bl	800ec84 <_svfiprintf_r>
 800d668:	9b02      	ldr	r3, [sp, #8]
 800d66a:	2200      	movs	r2, #0
 800d66c:	701a      	strb	r2, [r3, #0]
 800d66e:	b01c      	add	sp, #112	; 0x70
 800d670:	f85d eb04 	ldr.w	lr, [sp], #4
 800d674:	b003      	add	sp, #12
 800d676:	4770      	bx	lr
 800d678:	2400019c 	.word	0x2400019c
 800d67c:	ffff0208 	.word	0xffff0208

0800d680 <__sread>:
 800d680:	b510      	push	{r4, lr}
 800d682:	460c      	mov	r4, r1
 800d684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d688:	f000 f86c 	bl	800d764 <_read_r>
 800d68c:	2800      	cmp	r0, #0
 800d68e:	bfab      	itete	ge
 800d690:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d692:	89a3      	ldrhlt	r3, [r4, #12]
 800d694:	181b      	addge	r3, r3, r0
 800d696:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d69a:	bfac      	ite	ge
 800d69c:	6563      	strge	r3, [r4, #84]	; 0x54
 800d69e:	81a3      	strhlt	r3, [r4, #12]
 800d6a0:	bd10      	pop	{r4, pc}

0800d6a2 <__swrite>:
 800d6a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6a6:	461f      	mov	r7, r3
 800d6a8:	898b      	ldrh	r3, [r1, #12]
 800d6aa:	05db      	lsls	r3, r3, #23
 800d6ac:	4605      	mov	r5, r0
 800d6ae:	460c      	mov	r4, r1
 800d6b0:	4616      	mov	r6, r2
 800d6b2:	d505      	bpl.n	800d6c0 <__swrite+0x1e>
 800d6b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6b8:	2302      	movs	r3, #2
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	f000 f840 	bl	800d740 <_lseek_r>
 800d6c0:	89a3      	ldrh	r3, [r4, #12]
 800d6c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d6c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d6ca:	81a3      	strh	r3, [r4, #12]
 800d6cc:	4632      	mov	r2, r6
 800d6ce:	463b      	mov	r3, r7
 800d6d0:	4628      	mov	r0, r5
 800d6d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d6d6:	f000 b867 	b.w	800d7a8 <_write_r>

0800d6da <__sseek>:
 800d6da:	b510      	push	{r4, lr}
 800d6dc:	460c      	mov	r4, r1
 800d6de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6e2:	f000 f82d 	bl	800d740 <_lseek_r>
 800d6e6:	1c43      	adds	r3, r0, #1
 800d6e8:	89a3      	ldrh	r3, [r4, #12]
 800d6ea:	bf15      	itete	ne
 800d6ec:	6560      	strne	r0, [r4, #84]	; 0x54
 800d6ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d6f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d6f6:	81a3      	strheq	r3, [r4, #12]
 800d6f8:	bf18      	it	ne
 800d6fa:	81a3      	strhne	r3, [r4, #12]
 800d6fc:	bd10      	pop	{r4, pc}

0800d6fe <__sclose>:
 800d6fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d702:	f000 b80d 	b.w	800d720 <_close_r>

0800d706 <memset>:
 800d706:	4402      	add	r2, r0
 800d708:	4603      	mov	r3, r0
 800d70a:	4293      	cmp	r3, r2
 800d70c:	d100      	bne.n	800d710 <memset+0xa>
 800d70e:	4770      	bx	lr
 800d710:	f803 1b01 	strb.w	r1, [r3], #1
 800d714:	e7f9      	b.n	800d70a <memset+0x4>
	...

0800d718 <_localeconv_r>:
 800d718:	4800      	ldr	r0, [pc, #0]	; (800d71c <_localeconv_r+0x4>)
 800d71a:	4770      	bx	lr
 800d71c:	24000290 	.word	0x24000290

0800d720 <_close_r>:
 800d720:	b538      	push	{r3, r4, r5, lr}
 800d722:	4d06      	ldr	r5, [pc, #24]	; (800d73c <_close_r+0x1c>)
 800d724:	2300      	movs	r3, #0
 800d726:	4604      	mov	r4, r0
 800d728:	4608      	mov	r0, r1
 800d72a:	602b      	str	r3, [r5, #0]
 800d72c:	f7f4 fc31 	bl	8001f92 <_close>
 800d730:	1c43      	adds	r3, r0, #1
 800d732:	d102      	bne.n	800d73a <_close_r+0x1a>
 800d734:	682b      	ldr	r3, [r5, #0]
 800d736:	b103      	cbz	r3, 800d73a <_close_r+0x1a>
 800d738:	6023      	str	r3, [r4, #0]
 800d73a:	bd38      	pop	{r3, r4, r5, pc}
 800d73c:	24010f48 	.word	0x24010f48

0800d740 <_lseek_r>:
 800d740:	b538      	push	{r3, r4, r5, lr}
 800d742:	4d07      	ldr	r5, [pc, #28]	; (800d760 <_lseek_r+0x20>)
 800d744:	4604      	mov	r4, r0
 800d746:	4608      	mov	r0, r1
 800d748:	4611      	mov	r1, r2
 800d74a:	2200      	movs	r2, #0
 800d74c:	602a      	str	r2, [r5, #0]
 800d74e:	461a      	mov	r2, r3
 800d750:	f7f4 fc46 	bl	8001fe0 <_lseek>
 800d754:	1c43      	adds	r3, r0, #1
 800d756:	d102      	bne.n	800d75e <_lseek_r+0x1e>
 800d758:	682b      	ldr	r3, [r5, #0]
 800d75a:	b103      	cbz	r3, 800d75e <_lseek_r+0x1e>
 800d75c:	6023      	str	r3, [r4, #0]
 800d75e:	bd38      	pop	{r3, r4, r5, pc}
 800d760:	24010f48 	.word	0x24010f48

0800d764 <_read_r>:
 800d764:	b538      	push	{r3, r4, r5, lr}
 800d766:	4d07      	ldr	r5, [pc, #28]	; (800d784 <_read_r+0x20>)
 800d768:	4604      	mov	r4, r0
 800d76a:	4608      	mov	r0, r1
 800d76c:	4611      	mov	r1, r2
 800d76e:	2200      	movs	r2, #0
 800d770:	602a      	str	r2, [r5, #0]
 800d772:	461a      	mov	r2, r3
 800d774:	f7f4 fbd4 	bl	8001f20 <_read>
 800d778:	1c43      	adds	r3, r0, #1
 800d77a:	d102      	bne.n	800d782 <_read_r+0x1e>
 800d77c:	682b      	ldr	r3, [r5, #0]
 800d77e:	b103      	cbz	r3, 800d782 <_read_r+0x1e>
 800d780:	6023      	str	r3, [r4, #0]
 800d782:	bd38      	pop	{r3, r4, r5, pc}
 800d784:	24010f48 	.word	0x24010f48

0800d788 <_sbrk_r>:
 800d788:	b538      	push	{r3, r4, r5, lr}
 800d78a:	4d06      	ldr	r5, [pc, #24]	; (800d7a4 <_sbrk_r+0x1c>)
 800d78c:	2300      	movs	r3, #0
 800d78e:	4604      	mov	r4, r0
 800d790:	4608      	mov	r0, r1
 800d792:	602b      	str	r3, [r5, #0]
 800d794:	f7f4 fc32 	bl	8001ffc <_sbrk>
 800d798:	1c43      	adds	r3, r0, #1
 800d79a:	d102      	bne.n	800d7a2 <_sbrk_r+0x1a>
 800d79c:	682b      	ldr	r3, [r5, #0]
 800d79e:	b103      	cbz	r3, 800d7a2 <_sbrk_r+0x1a>
 800d7a0:	6023      	str	r3, [r4, #0]
 800d7a2:	bd38      	pop	{r3, r4, r5, pc}
 800d7a4:	24010f48 	.word	0x24010f48

0800d7a8 <_write_r>:
 800d7a8:	b538      	push	{r3, r4, r5, lr}
 800d7aa:	4d07      	ldr	r5, [pc, #28]	; (800d7c8 <_write_r+0x20>)
 800d7ac:	4604      	mov	r4, r0
 800d7ae:	4608      	mov	r0, r1
 800d7b0:	4611      	mov	r1, r2
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	602a      	str	r2, [r5, #0]
 800d7b6:	461a      	mov	r2, r3
 800d7b8:	f7f4 fbcf 	bl	8001f5a <_write>
 800d7bc:	1c43      	adds	r3, r0, #1
 800d7be:	d102      	bne.n	800d7c6 <_write_r+0x1e>
 800d7c0:	682b      	ldr	r3, [r5, #0]
 800d7c2:	b103      	cbz	r3, 800d7c6 <_write_r+0x1e>
 800d7c4:	6023      	str	r3, [r4, #0]
 800d7c6:	bd38      	pop	{r3, r4, r5, pc}
 800d7c8:	24010f48 	.word	0x24010f48

0800d7cc <__errno>:
 800d7cc:	4b01      	ldr	r3, [pc, #4]	; (800d7d4 <__errno+0x8>)
 800d7ce:	6818      	ldr	r0, [r3, #0]
 800d7d0:	4770      	bx	lr
 800d7d2:	bf00      	nop
 800d7d4:	2400019c 	.word	0x2400019c

0800d7d8 <__libc_init_array>:
 800d7d8:	b570      	push	{r4, r5, r6, lr}
 800d7da:	4d0d      	ldr	r5, [pc, #52]	; (800d810 <__libc_init_array+0x38>)
 800d7dc:	4c0d      	ldr	r4, [pc, #52]	; (800d814 <__libc_init_array+0x3c>)
 800d7de:	1b64      	subs	r4, r4, r5
 800d7e0:	10a4      	asrs	r4, r4, #2
 800d7e2:	2600      	movs	r6, #0
 800d7e4:	42a6      	cmp	r6, r4
 800d7e6:	d109      	bne.n	800d7fc <__libc_init_array+0x24>
 800d7e8:	4d0b      	ldr	r5, [pc, #44]	; (800d818 <__libc_init_array+0x40>)
 800d7ea:	4c0c      	ldr	r4, [pc, #48]	; (800d81c <__libc_init_array+0x44>)
 800d7ec:	f001 ff54 	bl	800f698 <_init>
 800d7f0:	1b64      	subs	r4, r4, r5
 800d7f2:	10a4      	asrs	r4, r4, #2
 800d7f4:	2600      	movs	r6, #0
 800d7f6:	42a6      	cmp	r6, r4
 800d7f8:	d105      	bne.n	800d806 <__libc_init_array+0x2e>
 800d7fa:	bd70      	pop	{r4, r5, r6, pc}
 800d7fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800d800:	4798      	blx	r3
 800d802:	3601      	adds	r6, #1
 800d804:	e7ee      	b.n	800d7e4 <__libc_init_array+0xc>
 800d806:	f855 3b04 	ldr.w	r3, [r5], #4
 800d80a:	4798      	blx	r3
 800d80c:	3601      	adds	r6, #1
 800d80e:	e7f2      	b.n	800d7f6 <__libc_init_array+0x1e>
 800d810:	0800fad4 	.word	0x0800fad4
 800d814:	0800fad4 	.word	0x0800fad4
 800d818:	0800fad4 	.word	0x0800fad4
 800d81c:	0800fad8 	.word	0x0800fad8

0800d820 <__retarget_lock_init_recursive>:
 800d820:	4770      	bx	lr

0800d822 <__retarget_lock_acquire_recursive>:
 800d822:	4770      	bx	lr

0800d824 <__retarget_lock_release_recursive>:
 800d824:	4770      	bx	lr

0800d826 <strcpy>:
 800d826:	4603      	mov	r3, r0
 800d828:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d82c:	f803 2b01 	strb.w	r2, [r3], #1
 800d830:	2a00      	cmp	r2, #0
 800d832:	d1f9      	bne.n	800d828 <strcpy+0x2>
 800d834:	4770      	bx	lr

0800d836 <memcpy>:
 800d836:	440a      	add	r2, r1
 800d838:	4291      	cmp	r1, r2
 800d83a:	f100 33ff 	add.w	r3, r0, #4294967295
 800d83e:	d100      	bne.n	800d842 <memcpy+0xc>
 800d840:	4770      	bx	lr
 800d842:	b510      	push	{r4, lr}
 800d844:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d848:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d84c:	4291      	cmp	r1, r2
 800d84e:	d1f9      	bne.n	800d844 <memcpy+0xe>
 800d850:	bd10      	pop	{r4, pc}

0800d852 <quorem>:
 800d852:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d856:	6903      	ldr	r3, [r0, #16]
 800d858:	690c      	ldr	r4, [r1, #16]
 800d85a:	42a3      	cmp	r3, r4
 800d85c:	4607      	mov	r7, r0
 800d85e:	db7e      	blt.n	800d95e <quorem+0x10c>
 800d860:	3c01      	subs	r4, #1
 800d862:	f101 0814 	add.w	r8, r1, #20
 800d866:	f100 0514 	add.w	r5, r0, #20
 800d86a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d86e:	9301      	str	r3, [sp, #4]
 800d870:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d874:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d878:	3301      	adds	r3, #1
 800d87a:	429a      	cmp	r2, r3
 800d87c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d880:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d884:	fbb2 f6f3 	udiv	r6, r2, r3
 800d888:	d331      	bcc.n	800d8ee <quorem+0x9c>
 800d88a:	f04f 0e00 	mov.w	lr, #0
 800d88e:	4640      	mov	r0, r8
 800d890:	46ac      	mov	ip, r5
 800d892:	46f2      	mov	sl, lr
 800d894:	f850 2b04 	ldr.w	r2, [r0], #4
 800d898:	b293      	uxth	r3, r2
 800d89a:	fb06 e303 	mla	r3, r6, r3, lr
 800d89e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d8a2:	0c1a      	lsrs	r2, r3, #16
 800d8a4:	b29b      	uxth	r3, r3
 800d8a6:	ebaa 0303 	sub.w	r3, sl, r3
 800d8aa:	f8dc a000 	ldr.w	sl, [ip]
 800d8ae:	fa13 f38a 	uxtah	r3, r3, sl
 800d8b2:	fb06 220e 	mla	r2, r6, lr, r2
 800d8b6:	9300      	str	r3, [sp, #0]
 800d8b8:	9b00      	ldr	r3, [sp, #0]
 800d8ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d8be:	b292      	uxth	r2, r2
 800d8c0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d8c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d8c8:	f8bd 3000 	ldrh.w	r3, [sp]
 800d8cc:	4581      	cmp	r9, r0
 800d8ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d8d2:	f84c 3b04 	str.w	r3, [ip], #4
 800d8d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d8da:	d2db      	bcs.n	800d894 <quorem+0x42>
 800d8dc:	f855 300b 	ldr.w	r3, [r5, fp]
 800d8e0:	b92b      	cbnz	r3, 800d8ee <quorem+0x9c>
 800d8e2:	9b01      	ldr	r3, [sp, #4]
 800d8e4:	3b04      	subs	r3, #4
 800d8e6:	429d      	cmp	r5, r3
 800d8e8:	461a      	mov	r2, r3
 800d8ea:	d32c      	bcc.n	800d946 <quorem+0xf4>
 800d8ec:	613c      	str	r4, [r7, #16]
 800d8ee:	4638      	mov	r0, r7
 800d8f0:	f001 f86e 	bl	800e9d0 <__mcmp>
 800d8f4:	2800      	cmp	r0, #0
 800d8f6:	db22      	blt.n	800d93e <quorem+0xec>
 800d8f8:	3601      	adds	r6, #1
 800d8fa:	4629      	mov	r1, r5
 800d8fc:	2000      	movs	r0, #0
 800d8fe:	f858 2b04 	ldr.w	r2, [r8], #4
 800d902:	f8d1 c000 	ldr.w	ip, [r1]
 800d906:	b293      	uxth	r3, r2
 800d908:	1ac3      	subs	r3, r0, r3
 800d90a:	0c12      	lsrs	r2, r2, #16
 800d90c:	fa13 f38c 	uxtah	r3, r3, ip
 800d910:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d914:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d918:	b29b      	uxth	r3, r3
 800d91a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d91e:	45c1      	cmp	r9, r8
 800d920:	f841 3b04 	str.w	r3, [r1], #4
 800d924:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d928:	d2e9      	bcs.n	800d8fe <quorem+0xac>
 800d92a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d92e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d932:	b922      	cbnz	r2, 800d93e <quorem+0xec>
 800d934:	3b04      	subs	r3, #4
 800d936:	429d      	cmp	r5, r3
 800d938:	461a      	mov	r2, r3
 800d93a:	d30a      	bcc.n	800d952 <quorem+0x100>
 800d93c:	613c      	str	r4, [r7, #16]
 800d93e:	4630      	mov	r0, r6
 800d940:	b003      	add	sp, #12
 800d942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d946:	6812      	ldr	r2, [r2, #0]
 800d948:	3b04      	subs	r3, #4
 800d94a:	2a00      	cmp	r2, #0
 800d94c:	d1ce      	bne.n	800d8ec <quorem+0x9a>
 800d94e:	3c01      	subs	r4, #1
 800d950:	e7c9      	b.n	800d8e6 <quorem+0x94>
 800d952:	6812      	ldr	r2, [r2, #0]
 800d954:	3b04      	subs	r3, #4
 800d956:	2a00      	cmp	r2, #0
 800d958:	d1f0      	bne.n	800d93c <quorem+0xea>
 800d95a:	3c01      	subs	r4, #1
 800d95c:	e7eb      	b.n	800d936 <quorem+0xe4>
 800d95e:	2000      	movs	r0, #0
 800d960:	e7ee      	b.n	800d940 <quorem+0xee>
 800d962:	0000      	movs	r0, r0
 800d964:	0000      	movs	r0, r0
	...

0800d968 <_dtoa_r>:
 800d968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d96c:	ed2d 8b02 	vpush	{d8}
 800d970:	69c5      	ldr	r5, [r0, #28]
 800d972:	b091      	sub	sp, #68	; 0x44
 800d974:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d978:	ec59 8b10 	vmov	r8, r9, d0
 800d97c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800d97e:	9106      	str	r1, [sp, #24]
 800d980:	4606      	mov	r6, r0
 800d982:	9208      	str	r2, [sp, #32]
 800d984:	930c      	str	r3, [sp, #48]	; 0x30
 800d986:	b975      	cbnz	r5, 800d9a6 <_dtoa_r+0x3e>
 800d988:	2010      	movs	r0, #16
 800d98a:	f7ff f89f 	bl	800cacc <malloc>
 800d98e:	4602      	mov	r2, r0
 800d990:	61f0      	str	r0, [r6, #28]
 800d992:	b920      	cbnz	r0, 800d99e <_dtoa_r+0x36>
 800d994:	4ba6      	ldr	r3, [pc, #664]	; (800dc30 <_dtoa_r+0x2c8>)
 800d996:	21ef      	movs	r1, #239	; 0xef
 800d998:	48a6      	ldr	r0, [pc, #664]	; (800dc34 <_dtoa_r+0x2cc>)
 800d99a:	f001 fb39 	bl	800f010 <__assert_func>
 800d99e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d9a2:	6005      	str	r5, [r0, #0]
 800d9a4:	60c5      	str	r5, [r0, #12]
 800d9a6:	69f3      	ldr	r3, [r6, #28]
 800d9a8:	6819      	ldr	r1, [r3, #0]
 800d9aa:	b151      	cbz	r1, 800d9c2 <_dtoa_r+0x5a>
 800d9ac:	685a      	ldr	r2, [r3, #4]
 800d9ae:	604a      	str	r2, [r1, #4]
 800d9b0:	2301      	movs	r3, #1
 800d9b2:	4093      	lsls	r3, r2
 800d9b4:	608b      	str	r3, [r1, #8]
 800d9b6:	4630      	mov	r0, r6
 800d9b8:	f000 fdce 	bl	800e558 <_Bfree>
 800d9bc:	69f3      	ldr	r3, [r6, #28]
 800d9be:	2200      	movs	r2, #0
 800d9c0:	601a      	str	r2, [r3, #0]
 800d9c2:	f1b9 0300 	subs.w	r3, r9, #0
 800d9c6:	bfbb      	ittet	lt
 800d9c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d9cc:	9303      	strlt	r3, [sp, #12]
 800d9ce:	2300      	movge	r3, #0
 800d9d0:	2201      	movlt	r2, #1
 800d9d2:	bfac      	ite	ge
 800d9d4:	6023      	strge	r3, [r4, #0]
 800d9d6:	6022      	strlt	r2, [r4, #0]
 800d9d8:	4b97      	ldr	r3, [pc, #604]	; (800dc38 <_dtoa_r+0x2d0>)
 800d9da:	9c03      	ldr	r4, [sp, #12]
 800d9dc:	43a3      	bics	r3, r4
 800d9de:	d11c      	bne.n	800da1a <_dtoa_r+0xb2>
 800d9e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d9e2:	f242 730f 	movw	r3, #9999	; 0x270f
 800d9e6:	6013      	str	r3, [r2, #0]
 800d9e8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800d9ec:	ea53 0308 	orrs.w	r3, r3, r8
 800d9f0:	f000 84fb 	beq.w	800e3ea <_dtoa_r+0xa82>
 800d9f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d9f6:	b963      	cbnz	r3, 800da12 <_dtoa_r+0xaa>
 800d9f8:	4b90      	ldr	r3, [pc, #576]	; (800dc3c <_dtoa_r+0x2d4>)
 800d9fa:	e020      	b.n	800da3e <_dtoa_r+0xd6>
 800d9fc:	4b90      	ldr	r3, [pc, #576]	; (800dc40 <_dtoa_r+0x2d8>)
 800d9fe:	9301      	str	r3, [sp, #4]
 800da00:	3308      	adds	r3, #8
 800da02:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800da04:	6013      	str	r3, [r2, #0]
 800da06:	9801      	ldr	r0, [sp, #4]
 800da08:	b011      	add	sp, #68	; 0x44
 800da0a:	ecbd 8b02 	vpop	{d8}
 800da0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da12:	4b8a      	ldr	r3, [pc, #552]	; (800dc3c <_dtoa_r+0x2d4>)
 800da14:	9301      	str	r3, [sp, #4]
 800da16:	3303      	adds	r3, #3
 800da18:	e7f3      	b.n	800da02 <_dtoa_r+0x9a>
 800da1a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800da1e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800da22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da26:	d10c      	bne.n	800da42 <_dtoa_r+0xda>
 800da28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800da2a:	2301      	movs	r3, #1
 800da2c:	6013      	str	r3, [r2, #0]
 800da2e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800da30:	2b00      	cmp	r3, #0
 800da32:	f000 84d7 	beq.w	800e3e4 <_dtoa_r+0xa7c>
 800da36:	4b83      	ldr	r3, [pc, #524]	; (800dc44 <_dtoa_r+0x2dc>)
 800da38:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800da3a:	6013      	str	r3, [r2, #0]
 800da3c:	3b01      	subs	r3, #1
 800da3e:	9301      	str	r3, [sp, #4]
 800da40:	e7e1      	b.n	800da06 <_dtoa_r+0x9e>
 800da42:	aa0e      	add	r2, sp, #56	; 0x38
 800da44:	a90f      	add	r1, sp, #60	; 0x3c
 800da46:	4630      	mov	r0, r6
 800da48:	eeb0 0b48 	vmov.f64	d0, d8
 800da4c:	f001 f866 	bl	800eb1c <__d2b>
 800da50:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800da54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800da56:	4605      	mov	r5, r0
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d046      	beq.n	800daea <_dtoa_r+0x182>
 800da5c:	eeb0 7b48 	vmov.f64	d7, d8
 800da60:	ee18 1a90 	vmov	r1, s17
 800da64:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800da68:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800da6c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800da70:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800da74:	2000      	movs	r0, #0
 800da76:	ee07 1a90 	vmov	s15, r1
 800da7a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800da7e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800dc18 <_dtoa_r+0x2b0>
 800da82:	ee37 7b46 	vsub.f64	d7, d7, d6
 800da86:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800dc20 <_dtoa_r+0x2b8>
 800da8a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800da8e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800dc28 <_dtoa_r+0x2c0>
 800da92:	ee07 3a90 	vmov	s15, r3
 800da96:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800da9a:	eeb0 7b46 	vmov.f64	d7, d6
 800da9e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800daa2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800daa6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800daaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800daae:	ee16 ba90 	vmov	fp, s13
 800dab2:	9009      	str	r0, [sp, #36]	; 0x24
 800dab4:	d508      	bpl.n	800dac8 <_dtoa_r+0x160>
 800dab6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800daba:	eeb4 6b47 	vcmp.f64	d6, d7
 800dabe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dac2:	bf18      	it	ne
 800dac4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800dac8:	f1bb 0f16 	cmp.w	fp, #22
 800dacc:	d82b      	bhi.n	800db26 <_dtoa_r+0x1be>
 800dace:	495e      	ldr	r1, [pc, #376]	; (800dc48 <_dtoa_r+0x2e0>)
 800dad0:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800dad4:	ed91 7b00 	vldr	d7, [r1]
 800dad8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800dadc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dae0:	d501      	bpl.n	800dae6 <_dtoa_r+0x17e>
 800dae2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dae6:	2100      	movs	r1, #0
 800dae8:	e01e      	b.n	800db28 <_dtoa_r+0x1c0>
 800daea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800daec:	4413      	add	r3, r2
 800daee:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800daf2:	2920      	cmp	r1, #32
 800daf4:	bfc1      	itttt	gt
 800daf6:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800dafa:	408c      	lslgt	r4, r1
 800dafc:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800db00:	fa28 f101 	lsrgt.w	r1, r8, r1
 800db04:	bfd6      	itet	le
 800db06:	f1c1 0120 	rsble	r1, r1, #32
 800db0a:	4321      	orrgt	r1, r4
 800db0c:	fa08 f101 	lslle.w	r1, r8, r1
 800db10:	ee07 1a90 	vmov	s15, r1
 800db14:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800db18:	3b01      	subs	r3, #1
 800db1a:	ee17 1a90 	vmov	r1, s15
 800db1e:	2001      	movs	r0, #1
 800db20:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800db24:	e7a7      	b.n	800da76 <_dtoa_r+0x10e>
 800db26:	2101      	movs	r1, #1
 800db28:	1ad2      	subs	r2, r2, r3
 800db2a:	1e53      	subs	r3, r2, #1
 800db2c:	9305      	str	r3, [sp, #20]
 800db2e:	bf45      	ittet	mi
 800db30:	f1c2 0301 	rsbmi	r3, r2, #1
 800db34:	9304      	strmi	r3, [sp, #16]
 800db36:	2300      	movpl	r3, #0
 800db38:	2300      	movmi	r3, #0
 800db3a:	bf4c      	ite	mi
 800db3c:	9305      	strmi	r3, [sp, #20]
 800db3e:	9304      	strpl	r3, [sp, #16]
 800db40:	f1bb 0f00 	cmp.w	fp, #0
 800db44:	910b      	str	r1, [sp, #44]	; 0x2c
 800db46:	db18      	blt.n	800db7a <_dtoa_r+0x212>
 800db48:	9b05      	ldr	r3, [sp, #20]
 800db4a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800db4e:	445b      	add	r3, fp
 800db50:	9305      	str	r3, [sp, #20]
 800db52:	2300      	movs	r3, #0
 800db54:	9a06      	ldr	r2, [sp, #24]
 800db56:	2a09      	cmp	r2, #9
 800db58:	d848      	bhi.n	800dbec <_dtoa_r+0x284>
 800db5a:	2a05      	cmp	r2, #5
 800db5c:	bfc4      	itt	gt
 800db5e:	3a04      	subgt	r2, #4
 800db60:	9206      	strgt	r2, [sp, #24]
 800db62:	9a06      	ldr	r2, [sp, #24]
 800db64:	f1a2 0202 	sub.w	r2, r2, #2
 800db68:	bfcc      	ite	gt
 800db6a:	2400      	movgt	r4, #0
 800db6c:	2401      	movle	r4, #1
 800db6e:	2a03      	cmp	r2, #3
 800db70:	d847      	bhi.n	800dc02 <_dtoa_r+0x29a>
 800db72:	e8df f002 	tbb	[pc, r2]
 800db76:	2d0b      	.short	0x2d0b
 800db78:	392b      	.short	0x392b
 800db7a:	9b04      	ldr	r3, [sp, #16]
 800db7c:	2200      	movs	r2, #0
 800db7e:	eba3 030b 	sub.w	r3, r3, fp
 800db82:	9304      	str	r3, [sp, #16]
 800db84:	920a      	str	r2, [sp, #40]	; 0x28
 800db86:	f1cb 0300 	rsb	r3, fp, #0
 800db8a:	e7e3      	b.n	800db54 <_dtoa_r+0x1ec>
 800db8c:	2200      	movs	r2, #0
 800db8e:	9207      	str	r2, [sp, #28]
 800db90:	9a08      	ldr	r2, [sp, #32]
 800db92:	2a00      	cmp	r2, #0
 800db94:	dc38      	bgt.n	800dc08 <_dtoa_r+0x2a0>
 800db96:	f04f 0a01 	mov.w	sl, #1
 800db9a:	46d1      	mov	r9, sl
 800db9c:	4652      	mov	r2, sl
 800db9e:	f8cd a020 	str.w	sl, [sp, #32]
 800dba2:	69f7      	ldr	r7, [r6, #28]
 800dba4:	2100      	movs	r1, #0
 800dba6:	2004      	movs	r0, #4
 800dba8:	f100 0c14 	add.w	ip, r0, #20
 800dbac:	4594      	cmp	ip, r2
 800dbae:	d930      	bls.n	800dc12 <_dtoa_r+0x2aa>
 800dbb0:	6079      	str	r1, [r7, #4]
 800dbb2:	4630      	mov	r0, r6
 800dbb4:	930d      	str	r3, [sp, #52]	; 0x34
 800dbb6:	f000 fc8f 	bl	800e4d8 <_Balloc>
 800dbba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dbbc:	9001      	str	r0, [sp, #4]
 800dbbe:	4602      	mov	r2, r0
 800dbc0:	2800      	cmp	r0, #0
 800dbc2:	d145      	bne.n	800dc50 <_dtoa_r+0x2e8>
 800dbc4:	4b21      	ldr	r3, [pc, #132]	; (800dc4c <_dtoa_r+0x2e4>)
 800dbc6:	f240 11af 	movw	r1, #431	; 0x1af
 800dbca:	e6e5      	b.n	800d998 <_dtoa_r+0x30>
 800dbcc:	2201      	movs	r2, #1
 800dbce:	e7de      	b.n	800db8e <_dtoa_r+0x226>
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	9207      	str	r2, [sp, #28]
 800dbd4:	9a08      	ldr	r2, [sp, #32]
 800dbd6:	eb0b 0a02 	add.w	sl, fp, r2
 800dbda:	f10a 0901 	add.w	r9, sl, #1
 800dbde:	464a      	mov	r2, r9
 800dbe0:	2a01      	cmp	r2, #1
 800dbe2:	bfb8      	it	lt
 800dbe4:	2201      	movlt	r2, #1
 800dbe6:	e7dc      	b.n	800dba2 <_dtoa_r+0x23a>
 800dbe8:	2201      	movs	r2, #1
 800dbea:	e7f2      	b.n	800dbd2 <_dtoa_r+0x26a>
 800dbec:	2401      	movs	r4, #1
 800dbee:	2200      	movs	r2, #0
 800dbf0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800dbf4:	f04f 3aff 	mov.w	sl, #4294967295
 800dbf8:	2100      	movs	r1, #0
 800dbfa:	46d1      	mov	r9, sl
 800dbfc:	2212      	movs	r2, #18
 800dbfe:	9108      	str	r1, [sp, #32]
 800dc00:	e7cf      	b.n	800dba2 <_dtoa_r+0x23a>
 800dc02:	2201      	movs	r2, #1
 800dc04:	9207      	str	r2, [sp, #28]
 800dc06:	e7f5      	b.n	800dbf4 <_dtoa_r+0x28c>
 800dc08:	f8dd a020 	ldr.w	sl, [sp, #32]
 800dc0c:	46d1      	mov	r9, sl
 800dc0e:	4652      	mov	r2, sl
 800dc10:	e7c7      	b.n	800dba2 <_dtoa_r+0x23a>
 800dc12:	3101      	adds	r1, #1
 800dc14:	0040      	lsls	r0, r0, #1
 800dc16:	e7c7      	b.n	800dba8 <_dtoa_r+0x240>
 800dc18:	636f4361 	.word	0x636f4361
 800dc1c:	3fd287a7 	.word	0x3fd287a7
 800dc20:	8b60c8b3 	.word	0x8b60c8b3
 800dc24:	3fc68a28 	.word	0x3fc68a28
 800dc28:	509f79fb 	.word	0x509f79fb
 800dc2c:	3fd34413 	.word	0x3fd34413
 800dc30:	0800f7a1 	.word	0x0800f7a1
 800dc34:	0800f7b8 	.word	0x0800f7b8
 800dc38:	7ff00000 	.word	0x7ff00000
 800dc3c:	0800f79d 	.word	0x0800f79d
 800dc40:	0800f794 	.word	0x0800f794
 800dc44:	0800f771 	.word	0x0800f771
 800dc48:	0800f8a8 	.word	0x0800f8a8
 800dc4c:	0800f810 	.word	0x0800f810
 800dc50:	69f2      	ldr	r2, [r6, #28]
 800dc52:	9901      	ldr	r1, [sp, #4]
 800dc54:	6011      	str	r1, [r2, #0]
 800dc56:	f1b9 0f0e 	cmp.w	r9, #14
 800dc5a:	d86c      	bhi.n	800dd36 <_dtoa_r+0x3ce>
 800dc5c:	2c00      	cmp	r4, #0
 800dc5e:	d06a      	beq.n	800dd36 <_dtoa_r+0x3ce>
 800dc60:	f1bb 0f00 	cmp.w	fp, #0
 800dc64:	f340 80a0 	ble.w	800dda8 <_dtoa_r+0x440>
 800dc68:	4ac1      	ldr	r2, [pc, #772]	; (800df70 <_dtoa_r+0x608>)
 800dc6a:	f00b 010f 	and.w	r1, fp, #15
 800dc6e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800dc72:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800dc76:	ed92 7b00 	vldr	d7, [r2]
 800dc7a:	ea4f 122b 	mov.w	r2, fp, asr #4
 800dc7e:	f000 8087 	beq.w	800dd90 <_dtoa_r+0x428>
 800dc82:	49bc      	ldr	r1, [pc, #752]	; (800df74 <_dtoa_r+0x60c>)
 800dc84:	ed91 6b08 	vldr	d6, [r1, #32]
 800dc88:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800dc8c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800dc90:	f002 020f 	and.w	r2, r2, #15
 800dc94:	2103      	movs	r1, #3
 800dc96:	48b7      	ldr	r0, [pc, #732]	; (800df74 <_dtoa_r+0x60c>)
 800dc98:	2a00      	cmp	r2, #0
 800dc9a:	d17b      	bne.n	800dd94 <_dtoa_r+0x42c>
 800dc9c:	ed9d 6b02 	vldr	d6, [sp, #8]
 800dca0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800dca4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800dca8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dcaa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dcae:	2a00      	cmp	r2, #0
 800dcb0:	f000 80a0 	beq.w	800ddf4 <_dtoa_r+0x48c>
 800dcb4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800dcb8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800dcbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcc0:	f140 8098 	bpl.w	800ddf4 <_dtoa_r+0x48c>
 800dcc4:	f1b9 0f00 	cmp.w	r9, #0
 800dcc8:	f000 8094 	beq.w	800ddf4 <_dtoa_r+0x48c>
 800dccc:	f1ba 0f00 	cmp.w	sl, #0
 800dcd0:	dd2f      	ble.n	800dd32 <_dtoa_r+0x3ca>
 800dcd2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800dcd6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dcda:	ed8d 7b02 	vstr	d7, [sp, #8]
 800dcde:	f10b 32ff 	add.w	r2, fp, #4294967295
 800dce2:	3101      	adds	r1, #1
 800dce4:	4654      	mov	r4, sl
 800dce6:	ed9d 6b02 	vldr	d6, [sp, #8]
 800dcea:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800dcee:	ee07 1a90 	vmov	s15, r1
 800dcf2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800dcf6:	eea7 5b06 	vfma.f64	d5, d7, d6
 800dcfa:	ee15 7a90 	vmov	r7, s11
 800dcfe:	ec51 0b15 	vmov	r0, r1, d5
 800dd02:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800dd06:	2c00      	cmp	r4, #0
 800dd08:	d177      	bne.n	800ddfa <_dtoa_r+0x492>
 800dd0a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800dd0e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800dd12:	ec41 0b17 	vmov	d7, r0, r1
 800dd16:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800dd1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd1e:	f300 826a 	bgt.w	800e1f6 <_dtoa_r+0x88e>
 800dd22:	eeb1 7b47 	vneg.f64	d7, d7
 800dd26:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800dd2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd2e:	f100 8260 	bmi.w	800e1f2 <_dtoa_r+0x88a>
 800dd32:	ed8d 8b02 	vstr	d8, [sp, #8]
 800dd36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dd38:	2a00      	cmp	r2, #0
 800dd3a:	f2c0 811d 	blt.w	800df78 <_dtoa_r+0x610>
 800dd3e:	f1bb 0f0e 	cmp.w	fp, #14
 800dd42:	f300 8119 	bgt.w	800df78 <_dtoa_r+0x610>
 800dd46:	4b8a      	ldr	r3, [pc, #552]	; (800df70 <_dtoa_r+0x608>)
 800dd48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800dd4c:	ed93 6b00 	vldr	d6, [r3]
 800dd50:	9b08      	ldr	r3, [sp, #32]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	f280 80b7 	bge.w	800dec6 <_dtoa_r+0x55e>
 800dd58:	f1b9 0f00 	cmp.w	r9, #0
 800dd5c:	f300 80b3 	bgt.w	800dec6 <_dtoa_r+0x55e>
 800dd60:	f040 8246 	bne.w	800e1f0 <_dtoa_r+0x888>
 800dd64:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800dd68:	ee26 6b07 	vmul.f64	d6, d6, d7
 800dd6c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dd70:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800dd74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd78:	464c      	mov	r4, r9
 800dd7a:	464f      	mov	r7, r9
 800dd7c:	f280 821c 	bge.w	800e1b8 <_dtoa_r+0x850>
 800dd80:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800dd84:	2331      	movs	r3, #49	; 0x31
 800dd86:	f808 3b01 	strb.w	r3, [r8], #1
 800dd8a:	f10b 0b01 	add.w	fp, fp, #1
 800dd8e:	e218      	b.n	800e1c2 <_dtoa_r+0x85a>
 800dd90:	2102      	movs	r1, #2
 800dd92:	e780      	b.n	800dc96 <_dtoa_r+0x32e>
 800dd94:	07d4      	lsls	r4, r2, #31
 800dd96:	d504      	bpl.n	800dda2 <_dtoa_r+0x43a>
 800dd98:	ed90 6b00 	vldr	d6, [r0]
 800dd9c:	3101      	adds	r1, #1
 800dd9e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dda2:	1052      	asrs	r2, r2, #1
 800dda4:	3008      	adds	r0, #8
 800dda6:	e777      	b.n	800dc98 <_dtoa_r+0x330>
 800dda8:	d022      	beq.n	800ddf0 <_dtoa_r+0x488>
 800ddaa:	f1cb 0200 	rsb	r2, fp, #0
 800ddae:	4970      	ldr	r1, [pc, #448]	; (800df70 <_dtoa_r+0x608>)
 800ddb0:	f002 000f 	and.w	r0, r2, #15
 800ddb4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800ddb8:	ed91 7b00 	vldr	d7, [r1]
 800ddbc:	ee28 7b07 	vmul.f64	d7, d8, d7
 800ddc0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ddc4:	486b      	ldr	r0, [pc, #428]	; (800df74 <_dtoa_r+0x60c>)
 800ddc6:	1112      	asrs	r2, r2, #4
 800ddc8:	2400      	movs	r4, #0
 800ddca:	2102      	movs	r1, #2
 800ddcc:	b92a      	cbnz	r2, 800ddda <_dtoa_r+0x472>
 800ddce:	2c00      	cmp	r4, #0
 800ddd0:	f43f af6a 	beq.w	800dca8 <_dtoa_r+0x340>
 800ddd4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ddd8:	e766      	b.n	800dca8 <_dtoa_r+0x340>
 800ddda:	07d7      	lsls	r7, r2, #31
 800dddc:	d505      	bpl.n	800ddea <_dtoa_r+0x482>
 800ddde:	ed90 6b00 	vldr	d6, [r0]
 800dde2:	3101      	adds	r1, #1
 800dde4:	2401      	movs	r4, #1
 800dde6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ddea:	1052      	asrs	r2, r2, #1
 800ddec:	3008      	adds	r0, #8
 800ddee:	e7ed      	b.n	800ddcc <_dtoa_r+0x464>
 800ddf0:	2102      	movs	r1, #2
 800ddf2:	e759      	b.n	800dca8 <_dtoa_r+0x340>
 800ddf4:	465a      	mov	r2, fp
 800ddf6:	464c      	mov	r4, r9
 800ddf8:	e775      	b.n	800dce6 <_dtoa_r+0x37e>
 800ddfa:	ec41 0b17 	vmov	d7, r0, r1
 800ddfe:	495c      	ldr	r1, [pc, #368]	; (800df70 <_dtoa_r+0x608>)
 800de00:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800de04:	ed11 4b02 	vldr	d4, [r1, #-8]
 800de08:	9901      	ldr	r1, [sp, #4]
 800de0a:	440c      	add	r4, r1
 800de0c:	9907      	ldr	r1, [sp, #28]
 800de0e:	b351      	cbz	r1, 800de66 <_dtoa_r+0x4fe>
 800de10:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800de14:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800de18:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800de1c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800de20:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800de24:	ee35 7b47 	vsub.f64	d7, d5, d7
 800de28:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800de2c:	ee14 1a90 	vmov	r1, s9
 800de30:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800de34:	3130      	adds	r1, #48	; 0x30
 800de36:	ee36 6b45 	vsub.f64	d6, d6, d5
 800de3a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800de3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de42:	f808 1b01 	strb.w	r1, [r8], #1
 800de46:	d439      	bmi.n	800debc <_dtoa_r+0x554>
 800de48:	ee32 5b46 	vsub.f64	d5, d2, d6
 800de4c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800de50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de54:	d472      	bmi.n	800df3c <_dtoa_r+0x5d4>
 800de56:	45a0      	cmp	r8, r4
 800de58:	f43f af6b 	beq.w	800dd32 <_dtoa_r+0x3ca>
 800de5c:	ee27 7b03 	vmul.f64	d7, d7, d3
 800de60:	ee26 6b03 	vmul.f64	d6, d6, d3
 800de64:	e7e0      	b.n	800de28 <_dtoa_r+0x4c0>
 800de66:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800de6a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800de6e:	4620      	mov	r0, r4
 800de70:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800de74:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800de78:	ee14 1a90 	vmov	r1, s9
 800de7c:	3130      	adds	r1, #48	; 0x30
 800de7e:	f808 1b01 	strb.w	r1, [r8], #1
 800de82:	45a0      	cmp	r8, r4
 800de84:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800de88:	ee36 6b45 	vsub.f64	d6, d6, d5
 800de8c:	d118      	bne.n	800dec0 <_dtoa_r+0x558>
 800de8e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800de92:	ee37 4b05 	vadd.f64	d4, d7, d5
 800de96:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800de9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de9e:	dc4d      	bgt.n	800df3c <_dtoa_r+0x5d4>
 800dea0:	ee35 5b47 	vsub.f64	d5, d5, d7
 800dea4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800dea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800deac:	f57f af41 	bpl.w	800dd32 <_dtoa_r+0x3ca>
 800deb0:	4680      	mov	r8, r0
 800deb2:	3801      	subs	r0, #1
 800deb4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800deb8:	2b30      	cmp	r3, #48	; 0x30
 800deba:	d0f9      	beq.n	800deb0 <_dtoa_r+0x548>
 800debc:	4693      	mov	fp, r2
 800debe:	e02a      	b.n	800df16 <_dtoa_r+0x5ae>
 800dec0:	ee26 6b03 	vmul.f64	d6, d6, d3
 800dec4:	e7d6      	b.n	800de74 <_dtoa_r+0x50c>
 800dec6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800deca:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800dece:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ded2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800ded6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800deda:	ee15 3a10 	vmov	r3, s10
 800dede:	3330      	adds	r3, #48	; 0x30
 800dee0:	f808 3b01 	strb.w	r3, [r8], #1
 800dee4:	9b01      	ldr	r3, [sp, #4]
 800dee6:	eba8 0303 	sub.w	r3, r8, r3
 800deea:	4599      	cmp	r9, r3
 800deec:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800def0:	eea3 7b46 	vfms.f64	d7, d3, d6
 800def4:	d133      	bne.n	800df5e <_dtoa_r+0x5f6>
 800def6:	ee37 7b07 	vadd.f64	d7, d7, d7
 800defa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800defe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df02:	dc1a      	bgt.n	800df3a <_dtoa_r+0x5d2>
 800df04:	eeb4 7b46 	vcmp.f64	d7, d6
 800df08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df0c:	d103      	bne.n	800df16 <_dtoa_r+0x5ae>
 800df0e:	ee15 3a10 	vmov	r3, s10
 800df12:	07d9      	lsls	r1, r3, #31
 800df14:	d411      	bmi.n	800df3a <_dtoa_r+0x5d2>
 800df16:	4629      	mov	r1, r5
 800df18:	4630      	mov	r0, r6
 800df1a:	f000 fb1d 	bl	800e558 <_Bfree>
 800df1e:	2300      	movs	r3, #0
 800df20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800df22:	f888 3000 	strb.w	r3, [r8]
 800df26:	f10b 0301 	add.w	r3, fp, #1
 800df2a:	6013      	str	r3, [r2, #0]
 800df2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800df2e:	2b00      	cmp	r3, #0
 800df30:	f43f ad69 	beq.w	800da06 <_dtoa_r+0x9e>
 800df34:	f8c3 8000 	str.w	r8, [r3]
 800df38:	e565      	b.n	800da06 <_dtoa_r+0x9e>
 800df3a:	465a      	mov	r2, fp
 800df3c:	4643      	mov	r3, r8
 800df3e:	4698      	mov	r8, r3
 800df40:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800df44:	2939      	cmp	r1, #57	; 0x39
 800df46:	d106      	bne.n	800df56 <_dtoa_r+0x5ee>
 800df48:	9901      	ldr	r1, [sp, #4]
 800df4a:	4299      	cmp	r1, r3
 800df4c:	d1f7      	bne.n	800df3e <_dtoa_r+0x5d6>
 800df4e:	9801      	ldr	r0, [sp, #4]
 800df50:	2130      	movs	r1, #48	; 0x30
 800df52:	3201      	adds	r2, #1
 800df54:	7001      	strb	r1, [r0, #0]
 800df56:	7819      	ldrb	r1, [r3, #0]
 800df58:	3101      	adds	r1, #1
 800df5a:	7019      	strb	r1, [r3, #0]
 800df5c:	e7ae      	b.n	800debc <_dtoa_r+0x554>
 800df5e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800df62:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800df66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df6a:	d1b2      	bne.n	800ded2 <_dtoa_r+0x56a>
 800df6c:	e7d3      	b.n	800df16 <_dtoa_r+0x5ae>
 800df6e:	bf00      	nop
 800df70:	0800f8a8 	.word	0x0800f8a8
 800df74:	0800f880 	.word	0x0800f880
 800df78:	9907      	ldr	r1, [sp, #28]
 800df7a:	2900      	cmp	r1, #0
 800df7c:	f000 80d0 	beq.w	800e120 <_dtoa_r+0x7b8>
 800df80:	9906      	ldr	r1, [sp, #24]
 800df82:	2901      	cmp	r1, #1
 800df84:	f300 80b4 	bgt.w	800e0f0 <_dtoa_r+0x788>
 800df88:	9909      	ldr	r1, [sp, #36]	; 0x24
 800df8a:	2900      	cmp	r1, #0
 800df8c:	f000 80ac 	beq.w	800e0e8 <_dtoa_r+0x780>
 800df90:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800df94:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800df98:	461c      	mov	r4, r3
 800df9a:	9309      	str	r3, [sp, #36]	; 0x24
 800df9c:	9b04      	ldr	r3, [sp, #16]
 800df9e:	4413      	add	r3, r2
 800dfa0:	9304      	str	r3, [sp, #16]
 800dfa2:	9b05      	ldr	r3, [sp, #20]
 800dfa4:	2101      	movs	r1, #1
 800dfa6:	4413      	add	r3, r2
 800dfa8:	4630      	mov	r0, r6
 800dfaa:	9305      	str	r3, [sp, #20]
 800dfac:	f000 fb8a 	bl	800e6c4 <__i2b>
 800dfb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfb2:	4607      	mov	r7, r0
 800dfb4:	f1b8 0f00 	cmp.w	r8, #0
 800dfb8:	d00d      	beq.n	800dfd6 <_dtoa_r+0x66e>
 800dfba:	9a05      	ldr	r2, [sp, #20]
 800dfbc:	2a00      	cmp	r2, #0
 800dfbe:	dd0a      	ble.n	800dfd6 <_dtoa_r+0x66e>
 800dfc0:	4542      	cmp	r2, r8
 800dfc2:	9904      	ldr	r1, [sp, #16]
 800dfc4:	bfa8      	it	ge
 800dfc6:	4642      	movge	r2, r8
 800dfc8:	1a89      	subs	r1, r1, r2
 800dfca:	9104      	str	r1, [sp, #16]
 800dfcc:	9905      	ldr	r1, [sp, #20]
 800dfce:	eba8 0802 	sub.w	r8, r8, r2
 800dfd2:	1a8a      	subs	r2, r1, r2
 800dfd4:	9205      	str	r2, [sp, #20]
 800dfd6:	b303      	cbz	r3, 800e01a <_dtoa_r+0x6b2>
 800dfd8:	9a07      	ldr	r2, [sp, #28]
 800dfda:	2a00      	cmp	r2, #0
 800dfdc:	f000 80a5 	beq.w	800e12a <_dtoa_r+0x7c2>
 800dfe0:	2c00      	cmp	r4, #0
 800dfe2:	dd13      	ble.n	800e00c <_dtoa_r+0x6a4>
 800dfe4:	4639      	mov	r1, r7
 800dfe6:	4622      	mov	r2, r4
 800dfe8:	4630      	mov	r0, r6
 800dfea:	930d      	str	r3, [sp, #52]	; 0x34
 800dfec:	f000 fc2a 	bl	800e844 <__pow5mult>
 800dff0:	462a      	mov	r2, r5
 800dff2:	4601      	mov	r1, r0
 800dff4:	4607      	mov	r7, r0
 800dff6:	4630      	mov	r0, r6
 800dff8:	f000 fb7a 	bl	800e6f0 <__multiply>
 800dffc:	4629      	mov	r1, r5
 800dffe:	9009      	str	r0, [sp, #36]	; 0x24
 800e000:	4630      	mov	r0, r6
 800e002:	f000 faa9 	bl	800e558 <_Bfree>
 800e006:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e008:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e00a:	4615      	mov	r5, r2
 800e00c:	1b1a      	subs	r2, r3, r4
 800e00e:	d004      	beq.n	800e01a <_dtoa_r+0x6b2>
 800e010:	4629      	mov	r1, r5
 800e012:	4630      	mov	r0, r6
 800e014:	f000 fc16 	bl	800e844 <__pow5mult>
 800e018:	4605      	mov	r5, r0
 800e01a:	2101      	movs	r1, #1
 800e01c:	4630      	mov	r0, r6
 800e01e:	f000 fb51 	bl	800e6c4 <__i2b>
 800e022:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e024:	2b00      	cmp	r3, #0
 800e026:	4604      	mov	r4, r0
 800e028:	f340 8081 	ble.w	800e12e <_dtoa_r+0x7c6>
 800e02c:	461a      	mov	r2, r3
 800e02e:	4601      	mov	r1, r0
 800e030:	4630      	mov	r0, r6
 800e032:	f000 fc07 	bl	800e844 <__pow5mult>
 800e036:	9b06      	ldr	r3, [sp, #24]
 800e038:	2b01      	cmp	r3, #1
 800e03a:	4604      	mov	r4, r0
 800e03c:	dd7a      	ble.n	800e134 <_dtoa_r+0x7cc>
 800e03e:	2300      	movs	r3, #0
 800e040:	9309      	str	r3, [sp, #36]	; 0x24
 800e042:	6922      	ldr	r2, [r4, #16]
 800e044:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800e048:	6910      	ldr	r0, [r2, #16]
 800e04a:	f000 faed 	bl	800e628 <__hi0bits>
 800e04e:	f1c0 0020 	rsb	r0, r0, #32
 800e052:	9b05      	ldr	r3, [sp, #20]
 800e054:	4418      	add	r0, r3
 800e056:	f010 001f 	ands.w	r0, r0, #31
 800e05a:	f000 8093 	beq.w	800e184 <_dtoa_r+0x81c>
 800e05e:	f1c0 0220 	rsb	r2, r0, #32
 800e062:	2a04      	cmp	r2, #4
 800e064:	f340 8085 	ble.w	800e172 <_dtoa_r+0x80a>
 800e068:	9b04      	ldr	r3, [sp, #16]
 800e06a:	f1c0 001c 	rsb	r0, r0, #28
 800e06e:	4403      	add	r3, r0
 800e070:	9304      	str	r3, [sp, #16]
 800e072:	9b05      	ldr	r3, [sp, #20]
 800e074:	4480      	add	r8, r0
 800e076:	4403      	add	r3, r0
 800e078:	9305      	str	r3, [sp, #20]
 800e07a:	9b04      	ldr	r3, [sp, #16]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	dd05      	ble.n	800e08c <_dtoa_r+0x724>
 800e080:	4629      	mov	r1, r5
 800e082:	461a      	mov	r2, r3
 800e084:	4630      	mov	r0, r6
 800e086:	f000 fc37 	bl	800e8f8 <__lshift>
 800e08a:	4605      	mov	r5, r0
 800e08c:	9b05      	ldr	r3, [sp, #20]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	dd05      	ble.n	800e09e <_dtoa_r+0x736>
 800e092:	4621      	mov	r1, r4
 800e094:	461a      	mov	r2, r3
 800e096:	4630      	mov	r0, r6
 800e098:	f000 fc2e 	bl	800e8f8 <__lshift>
 800e09c:	4604      	mov	r4, r0
 800e09e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d071      	beq.n	800e188 <_dtoa_r+0x820>
 800e0a4:	4621      	mov	r1, r4
 800e0a6:	4628      	mov	r0, r5
 800e0a8:	f000 fc92 	bl	800e9d0 <__mcmp>
 800e0ac:	2800      	cmp	r0, #0
 800e0ae:	da6b      	bge.n	800e188 <_dtoa_r+0x820>
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	4629      	mov	r1, r5
 800e0b4:	220a      	movs	r2, #10
 800e0b6:	4630      	mov	r0, r6
 800e0b8:	f000 fa70 	bl	800e59c <__multadd>
 800e0bc:	9b07      	ldr	r3, [sp, #28]
 800e0be:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e0c2:	4605      	mov	r5, r0
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	f000 8197 	beq.w	800e3f8 <_dtoa_r+0xa90>
 800e0ca:	4639      	mov	r1, r7
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	220a      	movs	r2, #10
 800e0d0:	4630      	mov	r0, r6
 800e0d2:	f000 fa63 	bl	800e59c <__multadd>
 800e0d6:	f1ba 0f00 	cmp.w	sl, #0
 800e0da:	4607      	mov	r7, r0
 800e0dc:	f300 8093 	bgt.w	800e206 <_dtoa_r+0x89e>
 800e0e0:	9b06      	ldr	r3, [sp, #24]
 800e0e2:	2b02      	cmp	r3, #2
 800e0e4:	dc57      	bgt.n	800e196 <_dtoa_r+0x82e>
 800e0e6:	e08e      	b.n	800e206 <_dtoa_r+0x89e>
 800e0e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e0ea:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e0ee:	e751      	b.n	800df94 <_dtoa_r+0x62c>
 800e0f0:	f109 34ff 	add.w	r4, r9, #4294967295
 800e0f4:	42a3      	cmp	r3, r4
 800e0f6:	bfbf      	itttt	lt
 800e0f8:	1ae2      	sublt	r2, r4, r3
 800e0fa:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e0fc:	189b      	addlt	r3, r3, r2
 800e0fe:	930a      	strlt	r3, [sp, #40]	; 0x28
 800e100:	bfae      	itee	ge
 800e102:	1b1c      	subge	r4, r3, r4
 800e104:	4623      	movlt	r3, r4
 800e106:	2400      	movlt	r4, #0
 800e108:	f1b9 0f00 	cmp.w	r9, #0
 800e10c:	bfb5      	itete	lt
 800e10e:	9a04      	ldrlt	r2, [sp, #16]
 800e110:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800e114:	eba2 0809 	sublt.w	r8, r2, r9
 800e118:	464a      	movge	r2, r9
 800e11a:	bfb8      	it	lt
 800e11c:	2200      	movlt	r2, #0
 800e11e:	e73c      	b.n	800df9a <_dtoa_r+0x632>
 800e120:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800e124:	9f07      	ldr	r7, [sp, #28]
 800e126:	461c      	mov	r4, r3
 800e128:	e744      	b.n	800dfb4 <_dtoa_r+0x64c>
 800e12a:	461a      	mov	r2, r3
 800e12c:	e770      	b.n	800e010 <_dtoa_r+0x6a8>
 800e12e:	9b06      	ldr	r3, [sp, #24]
 800e130:	2b01      	cmp	r3, #1
 800e132:	dc18      	bgt.n	800e166 <_dtoa_r+0x7fe>
 800e134:	9b02      	ldr	r3, [sp, #8]
 800e136:	b9b3      	cbnz	r3, 800e166 <_dtoa_r+0x7fe>
 800e138:	9b03      	ldr	r3, [sp, #12]
 800e13a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800e13e:	b9a2      	cbnz	r2, 800e16a <_dtoa_r+0x802>
 800e140:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800e144:	0d12      	lsrs	r2, r2, #20
 800e146:	0512      	lsls	r2, r2, #20
 800e148:	b18a      	cbz	r2, 800e16e <_dtoa_r+0x806>
 800e14a:	9b04      	ldr	r3, [sp, #16]
 800e14c:	3301      	adds	r3, #1
 800e14e:	9304      	str	r3, [sp, #16]
 800e150:	9b05      	ldr	r3, [sp, #20]
 800e152:	3301      	adds	r3, #1
 800e154:	9305      	str	r3, [sp, #20]
 800e156:	2301      	movs	r3, #1
 800e158:	9309      	str	r3, [sp, #36]	; 0x24
 800e15a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	f47f af70 	bne.w	800e042 <_dtoa_r+0x6da>
 800e162:	2001      	movs	r0, #1
 800e164:	e775      	b.n	800e052 <_dtoa_r+0x6ea>
 800e166:	2300      	movs	r3, #0
 800e168:	e7f6      	b.n	800e158 <_dtoa_r+0x7f0>
 800e16a:	9b02      	ldr	r3, [sp, #8]
 800e16c:	e7f4      	b.n	800e158 <_dtoa_r+0x7f0>
 800e16e:	9209      	str	r2, [sp, #36]	; 0x24
 800e170:	e7f3      	b.n	800e15a <_dtoa_r+0x7f2>
 800e172:	d082      	beq.n	800e07a <_dtoa_r+0x712>
 800e174:	9b04      	ldr	r3, [sp, #16]
 800e176:	321c      	adds	r2, #28
 800e178:	4413      	add	r3, r2
 800e17a:	9304      	str	r3, [sp, #16]
 800e17c:	9b05      	ldr	r3, [sp, #20]
 800e17e:	4490      	add	r8, r2
 800e180:	4413      	add	r3, r2
 800e182:	e779      	b.n	800e078 <_dtoa_r+0x710>
 800e184:	4602      	mov	r2, r0
 800e186:	e7f5      	b.n	800e174 <_dtoa_r+0x80c>
 800e188:	f1b9 0f00 	cmp.w	r9, #0
 800e18c:	dc36      	bgt.n	800e1fc <_dtoa_r+0x894>
 800e18e:	9b06      	ldr	r3, [sp, #24]
 800e190:	2b02      	cmp	r3, #2
 800e192:	dd33      	ble.n	800e1fc <_dtoa_r+0x894>
 800e194:	46ca      	mov	sl, r9
 800e196:	f1ba 0f00 	cmp.w	sl, #0
 800e19a:	d10d      	bne.n	800e1b8 <_dtoa_r+0x850>
 800e19c:	4621      	mov	r1, r4
 800e19e:	4653      	mov	r3, sl
 800e1a0:	2205      	movs	r2, #5
 800e1a2:	4630      	mov	r0, r6
 800e1a4:	f000 f9fa 	bl	800e59c <__multadd>
 800e1a8:	4601      	mov	r1, r0
 800e1aa:	4604      	mov	r4, r0
 800e1ac:	4628      	mov	r0, r5
 800e1ae:	f000 fc0f 	bl	800e9d0 <__mcmp>
 800e1b2:	2800      	cmp	r0, #0
 800e1b4:	f73f ade4 	bgt.w	800dd80 <_dtoa_r+0x418>
 800e1b8:	9b08      	ldr	r3, [sp, #32]
 800e1ba:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e1be:	ea6f 0b03 	mvn.w	fp, r3
 800e1c2:	f04f 0900 	mov.w	r9, #0
 800e1c6:	4621      	mov	r1, r4
 800e1c8:	4630      	mov	r0, r6
 800e1ca:	f000 f9c5 	bl	800e558 <_Bfree>
 800e1ce:	2f00      	cmp	r7, #0
 800e1d0:	f43f aea1 	beq.w	800df16 <_dtoa_r+0x5ae>
 800e1d4:	f1b9 0f00 	cmp.w	r9, #0
 800e1d8:	d005      	beq.n	800e1e6 <_dtoa_r+0x87e>
 800e1da:	45b9      	cmp	r9, r7
 800e1dc:	d003      	beq.n	800e1e6 <_dtoa_r+0x87e>
 800e1de:	4649      	mov	r1, r9
 800e1e0:	4630      	mov	r0, r6
 800e1e2:	f000 f9b9 	bl	800e558 <_Bfree>
 800e1e6:	4639      	mov	r1, r7
 800e1e8:	4630      	mov	r0, r6
 800e1ea:	f000 f9b5 	bl	800e558 <_Bfree>
 800e1ee:	e692      	b.n	800df16 <_dtoa_r+0x5ae>
 800e1f0:	2400      	movs	r4, #0
 800e1f2:	4627      	mov	r7, r4
 800e1f4:	e7e0      	b.n	800e1b8 <_dtoa_r+0x850>
 800e1f6:	4693      	mov	fp, r2
 800e1f8:	4627      	mov	r7, r4
 800e1fa:	e5c1      	b.n	800dd80 <_dtoa_r+0x418>
 800e1fc:	9b07      	ldr	r3, [sp, #28]
 800e1fe:	46ca      	mov	sl, r9
 800e200:	2b00      	cmp	r3, #0
 800e202:	f000 8100 	beq.w	800e406 <_dtoa_r+0xa9e>
 800e206:	f1b8 0f00 	cmp.w	r8, #0
 800e20a:	dd05      	ble.n	800e218 <_dtoa_r+0x8b0>
 800e20c:	4639      	mov	r1, r7
 800e20e:	4642      	mov	r2, r8
 800e210:	4630      	mov	r0, r6
 800e212:	f000 fb71 	bl	800e8f8 <__lshift>
 800e216:	4607      	mov	r7, r0
 800e218:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d05d      	beq.n	800e2da <_dtoa_r+0x972>
 800e21e:	6879      	ldr	r1, [r7, #4]
 800e220:	4630      	mov	r0, r6
 800e222:	f000 f959 	bl	800e4d8 <_Balloc>
 800e226:	4680      	mov	r8, r0
 800e228:	b928      	cbnz	r0, 800e236 <_dtoa_r+0x8ce>
 800e22a:	4b82      	ldr	r3, [pc, #520]	; (800e434 <_dtoa_r+0xacc>)
 800e22c:	4602      	mov	r2, r0
 800e22e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800e232:	f7ff bbb1 	b.w	800d998 <_dtoa_r+0x30>
 800e236:	693a      	ldr	r2, [r7, #16]
 800e238:	3202      	adds	r2, #2
 800e23a:	0092      	lsls	r2, r2, #2
 800e23c:	f107 010c 	add.w	r1, r7, #12
 800e240:	300c      	adds	r0, #12
 800e242:	f7ff faf8 	bl	800d836 <memcpy>
 800e246:	2201      	movs	r2, #1
 800e248:	4641      	mov	r1, r8
 800e24a:	4630      	mov	r0, r6
 800e24c:	f000 fb54 	bl	800e8f8 <__lshift>
 800e250:	9b01      	ldr	r3, [sp, #4]
 800e252:	3301      	adds	r3, #1
 800e254:	9304      	str	r3, [sp, #16]
 800e256:	9b01      	ldr	r3, [sp, #4]
 800e258:	4453      	add	r3, sl
 800e25a:	9308      	str	r3, [sp, #32]
 800e25c:	9b02      	ldr	r3, [sp, #8]
 800e25e:	f003 0301 	and.w	r3, r3, #1
 800e262:	46b9      	mov	r9, r7
 800e264:	9307      	str	r3, [sp, #28]
 800e266:	4607      	mov	r7, r0
 800e268:	9b04      	ldr	r3, [sp, #16]
 800e26a:	4621      	mov	r1, r4
 800e26c:	3b01      	subs	r3, #1
 800e26e:	4628      	mov	r0, r5
 800e270:	9302      	str	r3, [sp, #8]
 800e272:	f7ff faee 	bl	800d852 <quorem>
 800e276:	4603      	mov	r3, r0
 800e278:	3330      	adds	r3, #48	; 0x30
 800e27a:	9005      	str	r0, [sp, #20]
 800e27c:	4649      	mov	r1, r9
 800e27e:	4628      	mov	r0, r5
 800e280:	9309      	str	r3, [sp, #36]	; 0x24
 800e282:	f000 fba5 	bl	800e9d0 <__mcmp>
 800e286:	463a      	mov	r2, r7
 800e288:	4682      	mov	sl, r0
 800e28a:	4621      	mov	r1, r4
 800e28c:	4630      	mov	r0, r6
 800e28e:	f000 fbbb 	bl	800ea08 <__mdiff>
 800e292:	68c2      	ldr	r2, [r0, #12]
 800e294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e296:	4680      	mov	r8, r0
 800e298:	bb0a      	cbnz	r2, 800e2de <_dtoa_r+0x976>
 800e29a:	4601      	mov	r1, r0
 800e29c:	4628      	mov	r0, r5
 800e29e:	f000 fb97 	bl	800e9d0 <__mcmp>
 800e2a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2a4:	4602      	mov	r2, r0
 800e2a6:	4641      	mov	r1, r8
 800e2a8:	4630      	mov	r0, r6
 800e2aa:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800e2ae:	f000 f953 	bl	800e558 <_Bfree>
 800e2b2:	9b06      	ldr	r3, [sp, #24]
 800e2b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e2b6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800e2ba:	ea43 0102 	orr.w	r1, r3, r2
 800e2be:	9b07      	ldr	r3, [sp, #28]
 800e2c0:	4319      	orrs	r1, r3
 800e2c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2c4:	d10d      	bne.n	800e2e2 <_dtoa_r+0x97a>
 800e2c6:	2b39      	cmp	r3, #57	; 0x39
 800e2c8:	d029      	beq.n	800e31e <_dtoa_r+0x9b6>
 800e2ca:	f1ba 0f00 	cmp.w	sl, #0
 800e2ce:	dd01      	ble.n	800e2d4 <_dtoa_r+0x96c>
 800e2d0:	9b05      	ldr	r3, [sp, #20]
 800e2d2:	3331      	adds	r3, #49	; 0x31
 800e2d4:	9a02      	ldr	r2, [sp, #8]
 800e2d6:	7013      	strb	r3, [r2, #0]
 800e2d8:	e775      	b.n	800e1c6 <_dtoa_r+0x85e>
 800e2da:	4638      	mov	r0, r7
 800e2dc:	e7b8      	b.n	800e250 <_dtoa_r+0x8e8>
 800e2de:	2201      	movs	r2, #1
 800e2e0:	e7e1      	b.n	800e2a6 <_dtoa_r+0x93e>
 800e2e2:	f1ba 0f00 	cmp.w	sl, #0
 800e2e6:	db06      	blt.n	800e2f6 <_dtoa_r+0x98e>
 800e2e8:	9906      	ldr	r1, [sp, #24]
 800e2ea:	ea41 0a0a 	orr.w	sl, r1, sl
 800e2ee:	9907      	ldr	r1, [sp, #28]
 800e2f0:	ea5a 0a01 	orrs.w	sl, sl, r1
 800e2f4:	d120      	bne.n	800e338 <_dtoa_r+0x9d0>
 800e2f6:	2a00      	cmp	r2, #0
 800e2f8:	ddec      	ble.n	800e2d4 <_dtoa_r+0x96c>
 800e2fa:	4629      	mov	r1, r5
 800e2fc:	2201      	movs	r2, #1
 800e2fe:	4630      	mov	r0, r6
 800e300:	9304      	str	r3, [sp, #16]
 800e302:	f000 faf9 	bl	800e8f8 <__lshift>
 800e306:	4621      	mov	r1, r4
 800e308:	4605      	mov	r5, r0
 800e30a:	f000 fb61 	bl	800e9d0 <__mcmp>
 800e30e:	2800      	cmp	r0, #0
 800e310:	9b04      	ldr	r3, [sp, #16]
 800e312:	dc02      	bgt.n	800e31a <_dtoa_r+0x9b2>
 800e314:	d1de      	bne.n	800e2d4 <_dtoa_r+0x96c>
 800e316:	07da      	lsls	r2, r3, #31
 800e318:	d5dc      	bpl.n	800e2d4 <_dtoa_r+0x96c>
 800e31a:	2b39      	cmp	r3, #57	; 0x39
 800e31c:	d1d8      	bne.n	800e2d0 <_dtoa_r+0x968>
 800e31e:	9a02      	ldr	r2, [sp, #8]
 800e320:	2339      	movs	r3, #57	; 0x39
 800e322:	7013      	strb	r3, [r2, #0]
 800e324:	4643      	mov	r3, r8
 800e326:	4698      	mov	r8, r3
 800e328:	3b01      	subs	r3, #1
 800e32a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800e32e:	2a39      	cmp	r2, #57	; 0x39
 800e330:	d051      	beq.n	800e3d6 <_dtoa_r+0xa6e>
 800e332:	3201      	adds	r2, #1
 800e334:	701a      	strb	r2, [r3, #0]
 800e336:	e746      	b.n	800e1c6 <_dtoa_r+0x85e>
 800e338:	2a00      	cmp	r2, #0
 800e33a:	dd03      	ble.n	800e344 <_dtoa_r+0x9dc>
 800e33c:	2b39      	cmp	r3, #57	; 0x39
 800e33e:	d0ee      	beq.n	800e31e <_dtoa_r+0x9b6>
 800e340:	3301      	adds	r3, #1
 800e342:	e7c7      	b.n	800e2d4 <_dtoa_r+0x96c>
 800e344:	9a04      	ldr	r2, [sp, #16]
 800e346:	9908      	ldr	r1, [sp, #32]
 800e348:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e34c:	428a      	cmp	r2, r1
 800e34e:	d02b      	beq.n	800e3a8 <_dtoa_r+0xa40>
 800e350:	4629      	mov	r1, r5
 800e352:	2300      	movs	r3, #0
 800e354:	220a      	movs	r2, #10
 800e356:	4630      	mov	r0, r6
 800e358:	f000 f920 	bl	800e59c <__multadd>
 800e35c:	45b9      	cmp	r9, r7
 800e35e:	4605      	mov	r5, r0
 800e360:	f04f 0300 	mov.w	r3, #0
 800e364:	f04f 020a 	mov.w	r2, #10
 800e368:	4649      	mov	r1, r9
 800e36a:	4630      	mov	r0, r6
 800e36c:	d107      	bne.n	800e37e <_dtoa_r+0xa16>
 800e36e:	f000 f915 	bl	800e59c <__multadd>
 800e372:	4681      	mov	r9, r0
 800e374:	4607      	mov	r7, r0
 800e376:	9b04      	ldr	r3, [sp, #16]
 800e378:	3301      	adds	r3, #1
 800e37a:	9304      	str	r3, [sp, #16]
 800e37c:	e774      	b.n	800e268 <_dtoa_r+0x900>
 800e37e:	f000 f90d 	bl	800e59c <__multadd>
 800e382:	4639      	mov	r1, r7
 800e384:	4681      	mov	r9, r0
 800e386:	2300      	movs	r3, #0
 800e388:	220a      	movs	r2, #10
 800e38a:	4630      	mov	r0, r6
 800e38c:	f000 f906 	bl	800e59c <__multadd>
 800e390:	4607      	mov	r7, r0
 800e392:	e7f0      	b.n	800e376 <_dtoa_r+0xa0e>
 800e394:	f1ba 0f00 	cmp.w	sl, #0
 800e398:	9a01      	ldr	r2, [sp, #4]
 800e39a:	bfcc      	ite	gt
 800e39c:	46d0      	movgt	r8, sl
 800e39e:	f04f 0801 	movle.w	r8, #1
 800e3a2:	4490      	add	r8, r2
 800e3a4:	f04f 0900 	mov.w	r9, #0
 800e3a8:	4629      	mov	r1, r5
 800e3aa:	2201      	movs	r2, #1
 800e3ac:	4630      	mov	r0, r6
 800e3ae:	9302      	str	r3, [sp, #8]
 800e3b0:	f000 faa2 	bl	800e8f8 <__lshift>
 800e3b4:	4621      	mov	r1, r4
 800e3b6:	4605      	mov	r5, r0
 800e3b8:	f000 fb0a 	bl	800e9d0 <__mcmp>
 800e3bc:	2800      	cmp	r0, #0
 800e3be:	dcb1      	bgt.n	800e324 <_dtoa_r+0x9bc>
 800e3c0:	d102      	bne.n	800e3c8 <_dtoa_r+0xa60>
 800e3c2:	9b02      	ldr	r3, [sp, #8]
 800e3c4:	07db      	lsls	r3, r3, #31
 800e3c6:	d4ad      	bmi.n	800e324 <_dtoa_r+0x9bc>
 800e3c8:	4643      	mov	r3, r8
 800e3ca:	4698      	mov	r8, r3
 800e3cc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e3d0:	2a30      	cmp	r2, #48	; 0x30
 800e3d2:	d0fa      	beq.n	800e3ca <_dtoa_r+0xa62>
 800e3d4:	e6f7      	b.n	800e1c6 <_dtoa_r+0x85e>
 800e3d6:	9a01      	ldr	r2, [sp, #4]
 800e3d8:	429a      	cmp	r2, r3
 800e3da:	d1a4      	bne.n	800e326 <_dtoa_r+0x9be>
 800e3dc:	f10b 0b01 	add.w	fp, fp, #1
 800e3e0:	2331      	movs	r3, #49	; 0x31
 800e3e2:	e778      	b.n	800e2d6 <_dtoa_r+0x96e>
 800e3e4:	4b14      	ldr	r3, [pc, #80]	; (800e438 <_dtoa_r+0xad0>)
 800e3e6:	f7ff bb2a 	b.w	800da3e <_dtoa_r+0xd6>
 800e3ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	f47f ab05 	bne.w	800d9fc <_dtoa_r+0x94>
 800e3f2:	4b12      	ldr	r3, [pc, #72]	; (800e43c <_dtoa_r+0xad4>)
 800e3f4:	f7ff bb23 	b.w	800da3e <_dtoa_r+0xd6>
 800e3f8:	f1ba 0f00 	cmp.w	sl, #0
 800e3fc:	dc03      	bgt.n	800e406 <_dtoa_r+0xa9e>
 800e3fe:	9b06      	ldr	r3, [sp, #24]
 800e400:	2b02      	cmp	r3, #2
 800e402:	f73f aec8 	bgt.w	800e196 <_dtoa_r+0x82e>
 800e406:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e40a:	4621      	mov	r1, r4
 800e40c:	4628      	mov	r0, r5
 800e40e:	f7ff fa20 	bl	800d852 <quorem>
 800e412:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e416:	f808 3b01 	strb.w	r3, [r8], #1
 800e41a:	9a01      	ldr	r2, [sp, #4]
 800e41c:	eba8 0202 	sub.w	r2, r8, r2
 800e420:	4592      	cmp	sl, r2
 800e422:	ddb7      	ble.n	800e394 <_dtoa_r+0xa2c>
 800e424:	4629      	mov	r1, r5
 800e426:	2300      	movs	r3, #0
 800e428:	220a      	movs	r2, #10
 800e42a:	4630      	mov	r0, r6
 800e42c:	f000 f8b6 	bl	800e59c <__multadd>
 800e430:	4605      	mov	r5, r0
 800e432:	e7ea      	b.n	800e40a <_dtoa_r+0xaa2>
 800e434:	0800f810 	.word	0x0800f810
 800e438:	0800f770 	.word	0x0800f770
 800e43c:	0800f794 	.word	0x0800f794

0800e440 <_free_r>:
 800e440:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e442:	2900      	cmp	r1, #0
 800e444:	d044      	beq.n	800e4d0 <_free_r+0x90>
 800e446:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e44a:	9001      	str	r0, [sp, #4]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	f1a1 0404 	sub.w	r4, r1, #4
 800e452:	bfb8      	it	lt
 800e454:	18e4      	addlt	r4, r4, r3
 800e456:	f7fe fbe9 	bl	800cc2c <__malloc_lock>
 800e45a:	4a1e      	ldr	r2, [pc, #120]	; (800e4d4 <_free_r+0x94>)
 800e45c:	9801      	ldr	r0, [sp, #4]
 800e45e:	6813      	ldr	r3, [r2, #0]
 800e460:	b933      	cbnz	r3, 800e470 <_free_r+0x30>
 800e462:	6063      	str	r3, [r4, #4]
 800e464:	6014      	str	r4, [r2, #0]
 800e466:	b003      	add	sp, #12
 800e468:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e46c:	f7fe bbe4 	b.w	800cc38 <__malloc_unlock>
 800e470:	42a3      	cmp	r3, r4
 800e472:	d908      	bls.n	800e486 <_free_r+0x46>
 800e474:	6825      	ldr	r5, [r4, #0]
 800e476:	1961      	adds	r1, r4, r5
 800e478:	428b      	cmp	r3, r1
 800e47a:	bf01      	itttt	eq
 800e47c:	6819      	ldreq	r1, [r3, #0]
 800e47e:	685b      	ldreq	r3, [r3, #4]
 800e480:	1949      	addeq	r1, r1, r5
 800e482:	6021      	streq	r1, [r4, #0]
 800e484:	e7ed      	b.n	800e462 <_free_r+0x22>
 800e486:	461a      	mov	r2, r3
 800e488:	685b      	ldr	r3, [r3, #4]
 800e48a:	b10b      	cbz	r3, 800e490 <_free_r+0x50>
 800e48c:	42a3      	cmp	r3, r4
 800e48e:	d9fa      	bls.n	800e486 <_free_r+0x46>
 800e490:	6811      	ldr	r1, [r2, #0]
 800e492:	1855      	adds	r5, r2, r1
 800e494:	42a5      	cmp	r5, r4
 800e496:	d10b      	bne.n	800e4b0 <_free_r+0x70>
 800e498:	6824      	ldr	r4, [r4, #0]
 800e49a:	4421      	add	r1, r4
 800e49c:	1854      	adds	r4, r2, r1
 800e49e:	42a3      	cmp	r3, r4
 800e4a0:	6011      	str	r1, [r2, #0]
 800e4a2:	d1e0      	bne.n	800e466 <_free_r+0x26>
 800e4a4:	681c      	ldr	r4, [r3, #0]
 800e4a6:	685b      	ldr	r3, [r3, #4]
 800e4a8:	6053      	str	r3, [r2, #4]
 800e4aa:	440c      	add	r4, r1
 800e4ac:	6014      	str	r4, [r2, #0]
 800e4ae:	e7da      	b.n	800e466 <_free_r+0x26>
 800e4b0:	d902      	bls.n	800e4b8 <_free_r+0x78>
 800e4b2:	230c      	movs	r3, #12
 800e4b4:	6003      	str	r3, [r0, #0]
 800e4b6:	e7d6      	b.n	800e466 <_free_r+0x26>
 800e4b8:	6825      	ldr	r5, [r4, #0]
 800e4ba:	1961      	adds	r1, r4, r5
 800e4bc:	428b      	cmp	r3, r1
 800e4be:	bf04      	itt	eq
 800e4c0:	6819      	ldreq	r1, [r3, #0]
 800e4c2:	685b      	ldreq	r3, [r3, #4]
 800e4c4:	6063      	str	r3, [r4, #4]
 800e4c6:	bf04      	itt	eq
 800e4c8:	1949      	addeq	r1, r1, r5
 800e4ca:	6021      	streq	r1, [r4, #0]
 800e4cc:	6054      	str	r4, [r2, #4]
 800e4ce:	e7ca      	b.n	800e466 <_free_r+0x26>
 800e4d0:	b003      	add	sp, #12
 800e4d2:	bd30      	pop	{r4, r5, pc}
 800e4d4:	24010e04 	.word	0x24010e04

0800e4d8 <_Balloc>:
 800e4d8:	b570      	push	{r4, r5, r6, lr}
 800e4da:	69c6      	ldr	r6, [r0, #28]
 800e4dc:	4604      	mov	r4, r0
 800e4de:	460d      	mov	r5, r1
 800e4e0:	b976      	cbnz	r6, 800e500 <_Balloc+0x28>
 800e4e2:	2010      	movs	r0, #16
 800e4e4:	f7fe faf2 	bl	800cacc <malloc>
 800e4e8:	4602      	mov	r2, r0
 800e4ea:	61e0      	str	r0, [r4, #28]
 800e4ec:	b920      	cbnz	r0, 800e4f8 <_Balloc+0x20>
 800e4ee:	4b18      	ldr	r3, [pc, #96]	; (800e550 <_Balloc+0x78>)
 800e4f0:	4818      	ldr	r0, [pc, #96]	; (800e554 <_Balloc+0x7c>)
 800e4f2:	216b      	movs	r1, #107	; 0x6b
 800e4f4:	f000 fd8c 	bl	800f010 <__assert_func>
 800e4f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e4fc:	6006      	str	r6, [r0, #0]
 800e4fe:	60c6      	str	r6, [r0, #12]
 800e500:	69e6      	ldr	r6, [r4, #28]
 800e502:	68f3      	ldr	r3, [r6, #12]
 800e504:	b183      	cbz	r3, 800e528 <_Balloc+0x50>
 800e506:	69e3      	ldr	r3, [r4, #28]
 800e508:	68db      	ldr	r3, [r3, #12]
 800e50a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e50e:	b9b8      	cbnz	r0, 800e540 <_Balloc+0x68>
 800e510:	2101      	movs	r1, #1
 800e512:	fa01 f605 	lsl.w	r6, r1, r5
 800e516:	1d72      	adds	r2, r6, #5
 800e518:	0092      	lsls	r2, r2, #2
 800e51a:	4620      	mov	r0, r4
 800e51c:	f000 fd96 	bl	800f04c <_calloc_r>
 800e520:	b160      	cbz	r0, 800e53c <_Balloc+0x64>
 800e522:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e526:	e00e      	b.n	800e546 <_Balloc+0x6e>
 800e528:	2221      	movs	r2, #33	; 0x21
 800e52a:	2104      	movs	r1, #4
 800e52c:	4620      	mov	r0, r4
 800e52e:	f000 fd8d 	bl	800f04c <_calloc_r>
 800e532:	69e3      	ldr	r3, [r4, #28]
 800e534:	60f0      	str	r0, [r6, #12]
 800e536:	68db      	ldr	r3, [r3, #12]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d1e4      	bne.n	800e506 <_Balloc+0x2e>
 800e53c:	2000      	movs	r0, #0
 800e53e:	bd70      	pop	{r4, r5, r6, pc}
 800e540:	6802      	ldr	r2, [r0, #0]
 800e542:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e546:	2300      	movs	r3, #0
 800e548:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e54c:	e7f7      	b.n	800e53e <_Balloc+0x66>
 800e54e:	bf00      	nop
 800e550:	0800f7a1 	.word	0x0800f7a1
 800e554:	0800f821 	.word	0x0800f821

0800e558 <_Bfree>:
 800e558:	b570      	push	{r4, r5, r6, lr}
 800e55a:	69c6      	ldr	r6, [r0, #28]
 800e55c:	4605      	mov	r5, r0
 800e55e:	460c      	mov	r4, r1
 800e560:	b976      	cbnz	r6, 800e580 <_Bfree+0x28>
 800e562:	2010      	movs	r0, #16
 800e564:	f7fe fab2 	bl	800cacc <malloc>
 800e568:	4602      	mov	r2, r0
 800e56a:	61e8      	str	r0, [r5, #28]
 800e56c:	b920      	cbnz	r0, 800e578 <_Bfree+0x20>
 800e56e:	4b09      	ldr	r3, [pc, #36]	; (800e594 <_Bfree+0x3c>)
 800e570:	4809      	ldr	r0, [pc, #36]	; (800e598 <_Bfree+0x40>)
 800e572:	218f      	movs	r1, #143	; 0x8f
 800e574:	f000 fd4c 	bl	800f010 <__assert_func>
 800e578:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e57c:	6006      	str	r6, [r0, #0]
 800e57e:	60c6      	str	r6, [r0, #12]
 800e580:	b13c      	cbz	r4, 800e592 <_Bfree+0x3a>
 800e582:	69eb      	ldr	r3, [r5, #28]
 800e584:	6862      	ldr	r2, [r4, #4]
 800e586:	68db      	ldr	r3, [r3, #12]
 800e588:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e58c:	6021      	str	r1, [r4, #0]
 800e58e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e592:	bd70      	pop	{r4, r5, r6, pc}
 800e594:	0800f7a1 	.word	0x0800f7a1
 800e598:	0800f821 	.word	0x0800f821

0800e59c <__multadd>:
 800e59c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5a0:	690d      	ldr	r5, [r1, #16]
 800e5a2:	4607      	mov	r7, r0
 800e5a4:	460c      	mov	r4, r1
 800e5a6:	461e      	mov	r6, r3
 800e5a8:	f101 0c14 	add.w	ip, r1, #20
 800e5ac:	2000      	movs	r0, #0
 800e5ae:	f8dc 3000 	ldr.w	r3, [ip]
 800e5b2:	b299      	uxth	r1, r3
 800e5b4:	fb02 6101 	mla	r1, r2, r1, r6
 800e5b8:	0c1e      	lsrs	r6, r3, #16
 800e5ba:	0c0b      	lsrs	r3, r1, #16
 800e5bc:	fb02 3306 	mla	r3, r2, r6, r3
 800e5c0:	b289      	uxth	r1, r1
 800e5c2:	3001      	adds	r0, #1
 800e5c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e5c8:	4285      	cmp	r5, r0
 800e5ca:	f84c 1b04 	str.w	r1, [ip], #4
 800e5ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e5d2:	dcec      	bgt.n	800e5ae <__multadd+0x12>
 800e5d4:	b30e      	cbz	r6, 800e61a <__multadd+0x7e>
 800e5d6:	68a3      	ldr	r3, [r4, #8]
 800e5d8:	42ab      	cmp	r3, r5
 800e5da:	dc19      	bgt.n	800e610 <__multadd+0x74>
 800e5dc:	6861      	ldr	r1, [r4, #4]
 800e5de:	4638      	mov	r0, r7
 800e5e0:	3101      	adds	r1, #1
 800e5e2:	f7ff ff79 	bl	800e4d8 <_Balloc>
 800e5e6:	4680      	mov	r8, r0
 800e5e8:	b928      	cbnz	r0, 800e5f6 <__multadd+0x5a>
 800e5ea:	4602      	mov	r2, r0
 800e5ec:	4b0c      	ldr	r3, [pc, #48]	; (800e620 <__multadd+0x84>)
 800e5ee:	480d      	ldr	r0, [pc, #52]	; (800e624 <__multadd+0x88>)
 800e5f0:	21ba      	movs	r1, #186	; 0xba
 800e5f2:	f000 fd0d 	bl	800f010 <__assert_func>
 800e5f6:	6922      	ldr	r2, [r4, #16]
 800e5f8:	3202      	adds	r2, #2
 800e5fa:	f104 010c 	add.w	r1, r4, #12
 800e5fe:	0092      	lsls	r2, r2, #2
 800e600:	300c      	adds	r0, #12
 800e602:	f7ff f918 	bl	800d836 <memcpy>
 800e606:	4621      	mov	r1, r4
 800e608:	4638      	mov	r0, r7
 800e60a:	f7ff ffa5 	bl	800e558 <_Bfree>
 800e60e:	4644      	mov	r4, r8
 800e610:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e614:	3501      	adds	r5, #1
 800e616:	615e      	str	r6, [r3, #20]
 800e618:	6125      	str	r5, [r4, #16]
 800e61a:	4620      	mov	r0, r4
 800e61c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e620:	0800f810 	.word	0x0800f810
 800e624:	0800f821 	.word	0x0800f821

0800e628 <__hi0bits>:
 800e628:	0c03      	lsrs	r3, r0, #16
 800e62a:	041b      	lsls	r3, r3, #16
 800e62c:	b9d3      	cbnz	r3, 800e664 <__hi0bits+0x3c>
 800e62e:	0400      	lsls	r0, r0, #16
 800e630:	2310      	movs	r3, #16
 800e632:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e636:	bf04      	itt	eq
 800e638:	0200      	lsleq	r0, r0, #8
 800e63a:	3308      	addeq	r3, #8
 800e63c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e640:	bf04      	itt	eq
 800e642:	0100      	lsleq	r0, r0, #4
 800e644:	3304      	addeq	r3, #4
 800e646:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e64a:	bf04      	itt	eq
 800e64c:	0080      	lsleq	r0, r0, #2
 800e64e:	3302      	addeq	r3, #2
 800e650:	2800      	cmp	r0, #0
 800e652:	db05      	blt.n	800e660 <__hi0bits+0x38>
 800e654:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e658:	f103 0301 	add.w	r3, r3, #1
 800e65c:	bf08      	it	eq
 800e65e:	2320      	moveq	r3, #32
 800e660:	4618      	mov	r0, r3
 800e662:	4770      	bx	lr
 800e664:	2300      	movs	r3, #0
 800e666:	e7e4      	b.n	800e632 <__hi0bits+0xa>

0800e668 <__lo0bits>:
 800e668:	6803      	ldr	r3, [r0, #0]
 800e66a:	f013 0207 	ands.w	r2, r3, #7
 800e66e:	d00c      	beq.n	800e68a <__lo0bits+0x22>
 800e670:	07d9      	lsls	r1, r3, #31
 800e672:	d422      	bmi.n	800e6ba <__lo0bits+0x52>
 800e674:	079a      	lsls	r2, r3, #30
 800e676:	bf49      	itett	mi
 800e678:	085b      	lsrmi	r3, r3, #1
 800e67a:	089b      	lsrpl	r3, r3, #2
 800e67c:	6003      	strmi	r3, [r0, #0]
 800e67e:	2201      	movmi	r2, #1
 800e680:	bf5c      	itt	pl
 800e682:	6003      	strpl	r3, [r0, #0]
 800e684:	2202      	movpl	r2, #2
 800e686:	4610      	mov	r0, r2
 800e688:	4770      	bx	lr
 800e68a:	b299      	uxth	r1, r3
 800e68c:	b909      	cbnz	r1, 800e692 <__lo0bits+0x2a>
 800e68e:	0c1b      	lsrs	r3, r3, #16
 800e690:	2210      	movs	r2, #16
 800e692:	b2d9      	uxtb	r1, r3
 800e694:	b909      	cbnz	r1, 800e69a <__lo0bits+0x32>
 800e696:	3208      	adds	r2, #8
 800e698:	0a1b      	lsrs	r3, r3, #8
 800e69a:	0719      	lsls	r1, r3, #28
 800e69c:	bf04      	itt	eq
 800e69e:	091b      	lsreq	r3, r3, #4
 800e6a0:	3204      	addeq	r2, #4
 800e6a2:	0799      	lsls	r1, r3, #30
 800e6a4:	bf04      	itt	eq
 800e6a6:	089b      	lsreq	r3, r3, #2
 800e6a8:	3202      	addeq	r2, #2
 800e6aa:	07d9      	lsls	r1, r3, #31
 800e6ac:	d403      	bmi.n	800e6b6 <__lo0bits+0x4e>
 800e6ae:	085b      	lsrs	r3, r3, #1
 800e6b0:	f102 0201 	add.w	r2, r2, #1
 800e6b4:	d003      	beq.n	800e6be <__lo0bits+0x56>
 800e6b6:	6003      	str	r3, [r0, #0]
 800e6b8:	e7e5      	b.n	800e686 <__lo0bits+0x1e>
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	e7e3      	b.n	800e686 <__lo0bits+0x1e>
 800e6be:	2220      	movs	r2, #32
 800e6c0:	e7e1      	b.n	800e686 <__lo0bits+0x1e>
	...

0800e6c4 <__i2b>:
 800e6c4:	b510      	push	{r4, lr}
 800e6c6:	460c      	mov	r4, r1
 800e6c8:	2101      	movs	r1, #1
 800e6ca:	f7ff ff05 	bl	800e4d8 <_Balloc>
 800e6ce:	4602      	mov	r2, r0
 800e6d0:	b928      	cbnz	r0, 800e6de <__i2b+0x1a>
 800e6d2:	4b05      	ldr	r3, [pc, #20]	; (800e6e8 <__i2b+0x24>)
 800e6d4:	4805      	ldr	r0, [pc, #20]	; (800e6ec <__i2b+0x28>)
 800e6d6:	f240 1145 	movw	r1, #325	; 0x145
 800e6da:	f000 fc99 	bl	800f010 <__assert_func>
 800e6de:	2301      	movs	r3, #1
 800e6e0:	6144      	str	r4, [r0, #20]
 800e6e2:	6103      	str	r3, [r0, #16]
 800e6e4:	bd10      	pop	{r4, pc}
 800e6e6:	bf00      	nop
 800e6e8:	0800f810 	.word	0x0800f810
 800e6ec:	0800f821 	.word	0x0800f821

0800e6f0 <__multiply>:
 800e6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6f4:	4691      	mov	r9, r2
 800e6f6:	690a      	ldr	r2, [r1, #16]
 800e6f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e6fc:	429a      	cmp	r2, r3
 800e6fe:	bfb8      	it	lt
 800e700:	460b      	movlt	r3, r1
 800e702:	460c      	mov	r4, r1
 800e704:	bfbc      	itt	lt
 800e706:	464c      	movlt	r4, r9
 800e708:	4699      	movlt	r9, r3
 800e70a:	6927      	ldr	r7, [r4, #16]
 800e70c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e710:	68a3      	ldr	r3, [r4, #8]
 800e712:	6861      	ldr	r1, [r4, #4]
 800e714:	eb07 060a 	add.w	r6, r7, sl
 800e718:	42b3      	cmp	r3, r6
 800e71a:	b085      	sub	sp, #20
 800e71c:	bfb8      	it	lt
 800e71e:	3101      	addlt	r1, #1
 800e720:	f7ff feda 	bl	800e4d8 <_Balloc>
 800e724:	b930      	cbnz	r0, 800e734 <__multiply+0x44>
 800e726:	4602      	mov	r2, r0
 800e728:	4b44      	ldr	r3, [pc, #272]	; (800e83c <__multiply+0x14c>)
 800e72a:	4845      	ldr	r0, [pc, #276]	; (800e840 <__multiply+0x150>)
 800e72c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800e730:	f000 fc6e 	bl	800f010 <__assert_func>
 800e734:	f100 0514 	add.w	r5, r0, #20
 800e738:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e73c:	462b      	mov	r3, r5
 800e73e:	2200      	movs	r2, #0
 800e740:	4543      	cmp	r3, r8
 800e742:	d321      	bcc.n	800e788 <__multiply+0x98>
 800e744:	f104 0314 	add.w	r3, r4, #20
 800e748:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e74c:	f109 0314 	add.w	r3, r9, #20
 800e750:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e754:	9202      	str	r2, [sp, #8]
 800e756:	1b3a      	subs	r2, r7, r4
 800e758:	3a15      	subs	r2, #21
 800e75a:	f022 0203 	bic.w	r2, r2, #3
 800e75e:	3204      	adds	r2, #4
 800e760:	f104 0115 	add.w	r1, r4, #21
 800e764:	428f      	cmp	r7, r1
 800e766:	bf38      	it	cc
 800e768:	2204      	movcc	r2, #4
 800e76a:	9201      	str	r2, [sp, #4]
 800e76c:	9a02      	ldr	r2, [sp, #8]
 800e76e:	9303      	str	r3, [sp, #12]
 800e770:	429a      	cmp	r2, r3
 800e772:	d80c      	bhi.n	800e78e <__multiply+0x9e>
 800e774:	2e00      	cmp	r6, #0
 800e776:	dd03      	ble.n	800e780 <__multiply+0x90>
 800e778:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d05b      	beq.n	800e838 <__multiply+0x148>
 800e780:	6106      	str	r6, [r0, #16]
 800e782:	b005      	add	sp, #20
 800e784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e788:	f843 2b04 	str.w	r2, [r3], #4
 800e78c:	e7d8      	b.n	800e740 <__multiply+0x50>
 800e78e:	f8b3 a000 	ldrh.w	sl, [r3]
 800e792:	f1ba 0f00 	cmp.w	sl, #0
 800e796:	d024      	beq.n	800e7e2 <__multiply+0xf2>
 800e798:	f104 0e14 	add.w	lr, r4, #20
 800e79c:	46a9      	mov	r9, r5
 800e79e:	f04f 0c00 	mov.w	ip, #0
 800e7a2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e7a6:	f8d9 1000 	ldr.w	r1, [r9]
 800e7aa:	fa1f fb82 	uxth.w	fp, r2
 800e7ae:	b289      	uxth	r1, r1
 800e7b0:	fb0a 110b 	mla	r1, sl, fp, r1
 800e7b4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e7b8:	f8d9 2000 	ldr.w	r2, [r9]
 800e7bc:	4461      	add	r1, ip
 800e7be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e7c2:	fb0a c20b 	mla	r2, sl, fp, ip
 800e7c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e7ca:	b289      	uxth	r1, r1
 800e7cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e7d0:	4577      	cmp	r7, lr
 800e7d2:	f849 1b04 	str.w	r1, [r9], #4
 800e7d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e7da:	d8e2      	bhi.n	800e7a2 <__multiply+0xb2>
 800e7dc:	9a01      	ldr	r2, [sp, #4]
 800e7de:	f845 c002 	str.w	ip, [r5, r2]
 800e7e2:	9a03      	ldr	r2, [sp, #12]
 800e7e4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e7e8:	3304      	adds	r3, #4
 800e7ea:	f1b9 0f00 	cmp.w	r9, #0
 800e7ee:	d021      	beq.n	800e834 <__multiply+0x144>
 800e7f0:	6829      	ldr	r1, [r5, #0]
 800e7f2:	f104 0c14 	add.w	ip, r4, #20
 800e7f6:	46ae      	mov	lr, r5
 800e7f8:	f04f 0a00 	mov.w	sl, #0
 800e7fc:	f8bc b000 	ldrh.w	fp, [ip]
 800e800:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e804:	fb09 220b 	mla	r2, r9, fp, r2
 800e808:	4452      	add	r2, sl
 800e80a:	b289      	uxth	r1, r1
 800e80c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e810:	f84e 1b04 	str.w	r1, [lr], #4
 800e814:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e818:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e81c:	f8be 1000 	ldrh.w	r1, [lr]
 800e820:	fb09 110a 	mla	r1, r9, sl, r1
 800e824:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800e828:	4567      	cmp	r7, ip
 800e82a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e82e:	d8e5      	bhi.n	800e7fc <__multiply+0x10c>
 800e830:	9a01      	ldr	r2, [sp, #4]
 800e832:	50a9      	str	r1, [r5, r2]
 800e834:	3504      	adds	r5, #4
 800e836:	e799      	b.n	800e76c <__multiply+0x7c>
 800e838:	3e01      	subs	r6, #1
 800e83a:	e79b      	b.n	800e774 <__multiply+0x84>
 800e83c:	0800f810 	.word	0x0800f810
 800e840:	0800f821 	.word	0x0800f821

0800e844 <__pow5mult>:
 800e844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e848:	4615      	mov	r5, r2
 800e84a:	f012 0203 	ands.w	r2, r2, #3
 800e84e:	4606      	mov	r6, r0
 800e850:	460f      	mov	r7, r1
 800e852:	d007      	beq.n	800e864 <__pow5mult+0x20>
 800e854:	4c25      	ldr	r4, [pc, #148]	; (800e8ec <__pow5mult+0xa8>)
 800e856:	3a01      	subs	r2, #1
 800e858:	2300      	movs	r3, #0
 800e85a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e85e:	f7ff fe9d 	bl	800e59c <__multadd>
 800e862:	4607      	mov	r7, r0
 800e864:	10ad      	asrs	r5, r5, #2
 800e866:	d03d      	beq.n	800e8e4 <__pow5mult+0xa0>
 800e868:	69f4      	ldr	r4, [r6, #28]
 800e86a:	b97c      	cbnz	r4, 800e88c <__pow5mult+0x48>
 800e86c:	2010      	movs	r0, #16
 800e86e:	f7fe f92d 	bl	800cacc <malloc>
 800e872:	4602      	mov	r2, r0
 800e874:	61f0      	str	r0, [r6, #28]
 800e876:	b928      	cbnz	r0, 800e884 <__pow5mult+0x40>
 800e878:	4b1d      	ldr	r3, [pc, #116]	; (800e8f0 <__pow5mult+0xac>)
 800e87a:	481e      	ldr	r0, [pc, #120]	; (800e8f4 <__pow5mult+0xb0>)
 800e87c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800e880:	f000 fbc6 	bl	800f010 <__assert_func>
 800e884:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e888:	6004      	str	r4, [r0, #0]
 800e88a:	60c4      	str	r4, [r0, #12]
 800e88c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800e890:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e894:	b94c      	cbnz	r4, 800e8aa <__pow5mult+0x66>
 800e896:	f240 2171 	movw	r1, #625	; 0x271
 800e89a:	4630      	mov	r0, r6
 800e89c:	f7ff ff12 	bl	800e6c4 <__i2b>
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	f8c8 0008 	str.w	r0, [r8, #8]
 800e8a6:	4604      	mov	r4, r0
 800e8a8:	6003      	str	r3, [r0, #0]
 800e8aa:	f04f 0900 	mov.w	r9, #0
 800e8ae:	07eb      	lsls	r3, r5, #31
 800e8b0:	d50a      	bpl.n	800e8c8 <__pow5mult+0x84>
 800e8b2:	4639      	mov	r1, r7
 800e8b4:	4622      	mov	r2, r4
 800e8b6:	4630      	mov	r0, r6
 800e8b8:	f7ff ff1a 	bl	800e6f0 <__multiply>
 800e8bc:	4639      	mov	r1, r7
 800e8be:	4680      	mov	r8, r0
 800e8c0:	4630      	mov	r0, r6
 800e8c2:	f7ff fe49 	bl	800e558 <_Bfree>
 800e8c6:	4647      	mov	r7, r8
 800e8c8:	106d      	asrs	r5, r5, #1
 800e8ca:	d00b      	beq.n	800e8e4 <__pow5mult+0xa0>
 800e8cc:	6820      	ldr	r0, [r4, #0]
 800e8ce:	b938      	cbnz	r0, 800e8e0 <__pow5mult+0x9c>
 800e8d0:	4622      	mov	r2, r4
 800e8d2:	4621      	mov	r1, r4
 800e8d4:	4630      	mov	r0, r6
 800e8d6:	f7ff ff0b 	bl	800e6f0 <__multiply>
 800e8da:	6020      	str	r0, [r4, #0]
 800e8dc:	f8c0 9000 	str.w	r9, [r0]
 800e8e0:	4604      	mov	r4, r0
 800e8e2:	e7e4      	b.n	800e8ae <__pow5mult+0x6a>
 800e8e4:	4638      	mov	r0, r7
 800e8e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8ea:	bf00      	nop
 800e8ec:	0800f970 	.word	0x0800f970
 800e8f0:	0800f7a1 	.word	0x0800f7a1
 800e8f4:	0800f821 	.word	0x0800f821

0800e8f8 <__lshift>:
 800e8f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8fc:	460c      	mov	r4, r1
 800e8fe:	6849      	ldr	r1, [r1, #4]
 800e900:	6923      	ldr	r3, [r4, #16]
 800e902:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e906:	68a3      	ldr	r3, [r4, #8]
 800e908:	4607      	mov	r7, r0
 800e90a:	4691      	mov	r9, r2
 800e90c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e910:	f108 0601 	add.w	r6, r8, #1
 800e914:	42b3      	cmp	r3, r6
 800e916:	db0b      	blt.n	800e930 <__lshift+0x38>
 800e918:	4638      	mov	r0, r7
 800e91a:	f7ff fddd 	bl	800e4d8 <_Balloc>
 800e91e:	4605      	mov	r5, r0
 800e920:	b948      	cbnz	r0, 800e936 <__lshift+0x3e>
 800e922:	4602      	mov	r2, r0
 800e924:	4b28      	ldr	r3, [pc, #160]	; (800e9c8 <__lshift+0xd0>)
 800e926:	4829      	ldr	r0, [pc, #164]	; (800e9cc <__lshift+0xd4>)
 800e928:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800e92c:	f000 fb70 	bl	800f010 <__assert_func>
 800e930:	3101      	adds	r1, #1
 800e932:	005b      	lsls	r3, r3, #1
 800e934:	e7ee      	b.n	800e914 <__lshift+0x1c>
 800e936:	2300      	movs	r3, #0
 800e938:	f100 0114 	add.w	r1, r0, #20
 800e93c:	f100 0210 	add.w	r2, r0, #16
 800e940:	4618      	mov	r0, r3
 800e942:	4553      	cmp	r3, sl
 800e944:	db33      	blt.n	800e9ae <__lshift+0xb6>
 800e946:	6920      	ldr	r0, [r4, #16]
 800e948:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e94c:	f104 0314 	add.w	r3, r4, #20
 800e950:	f019 091f 	ands.w	r9, r9, #31
 800e954:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e958:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e95c:	d02b      	beq.n	800e9b6 <__lshift+0xbe>
 800e95e:	f1c9 0e20 	rsb	lr, r9, #32
 800e962:	468a      	mov	sl, r1
 800e964:	2200      	movs	r2, #0
 800e966:	6818      	ldr	r0, [r3, #0]
 800e968:	fa00 f009 	lsl.w	r0, r0, r9
 800e96c:	4310      	orrs	r0, r2
 800e96e:	f84a 0b04 	str.w	r0, [sl], #4
 800e972:	f853 2b04 	ldr.w	r2, [r3], #4
 800e976:	459c      	cmp	ip, r3
 800e978:	fa22 f20e 	lsr.w	r2, r2, lr
 800e97c:	d8f3      	bhi.n	800e966 <__lshift+0x6e>
 800e97e:	ebac 0304 	sub.w	r3, ip, r4
 800e982:	3b15      	subs	r3, #21
 800e984:	f023 0303 	bic.w	r3, r3, #3
 800e988:	3304      	adds	r3, #4
 800e98a:	f104 0015 	add.w	r0, r4, #21
 800e98e:	4584      	cmp	ip, r0
 800e990:	bf38      	it	cc
 800e992:	2304      	movcc	r3, #4
 800e994:	50ca      	str	r2, [r1, r3]
 800e996:	b10a      	cbz	r2, 800e99c <__lshift+0xa4>
 800e998:	f108 0602 	add.w	r6, r8, #2
 800e99c:	3e01      	subs	r6, #1
 800e99e:	4638      	mov	r0, r7
 800e9a0:	612e      	str	r6, [r5, #16]
 800e9a2:	4621      	mov	r1, r4
 800e9a4:	f7ff fdd8 	bl	800e558 <_Bfree>
 800e9a8:	4628      	mov	r0, r5
 800e9aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9ae:	f842 0f04 	str.w	r0, [r2, #4]!
 800e9b2:	3301      	adds	r3, #1
 800e9b4:	e7c5      	b.n	800e942 <__lshift+0x4a>
 800e9b6:	3904      	subs	r1, #4
 800e9b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9bc:	f841 2f04 	str.w	r2, [r1, #4]!
 800e9c0:	459c      	cmp	ip, r3
 800e9c2:	d8f9      	bhi.n	800e9b8 <__lshift+0xc0>
 800e9c4:	e7ea      	b.n	800e99c <__lshift+0xa4>
 800e9c6:	bf00      	nop
 800e9c8:	0800f810 	.word	0x0800f810
 800e9cc:	0800f821 	.word	0x0800f821

0800e9d0 <__mcmp>:
 800e9d0:	b530      	push	{r4, r5, lr}
 800e9d2:	6902      	ldr	r2, [r0, #16]
 800e9d4:	690c      	ldr	r4, [r1, #16]
 800e9d6:	1b12      	subs	r2, r2, r4
 800e9d8:	d10e      	bne.n	800e9f8 <__mcmp+0x28>
 800e9da:	f100 0314 	add.w	r3, r0, #20
 800e9de:	3114      	adds	r1, #20
 800e9e0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e9e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e9e8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e9ec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e9f0:	42a5      	cmp	r5, r4
 800e9f2:	d003      	beq.n	800e9fc <__mcmp+0x2c>
 800e9f4:	d305      	bcc.n	800ea02 <__mcmp+0x32>
 800e9f6:	2201      	movs	r2, #1
 800e9f8:	4610      	mov	r0, r2
 800e9fa:	bd30      	pop	{r4, r5, pc}
 800e9fc:	4283      	cmp	r3, r0
 800e9fe:	d3f3      	bcc.n	800e9e8 <__mcmp+0x18>
 800ea00:	e7fa      	b.n	800e9f8 <__mcmp+0x28>
 800ea02:	f04f 32ff 	mov.w	r2, #4294967295
 800ea06:	e7f7      	b.n	800e9f8 <__mcmp+0x28>

0800ea08 <__mdiff>:
 800ea08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea0c:	460c      	mov	r4, r1
 800ea0e:	4606      	mov	r6, r0
 800ea10:	4611      	mov	r1, r2
 800ea12:	4620      	mov	r0, r4
 800ea14:	4690      	mov	r8, r2
 800ea16:	f7ff ffdb 	bl	800e9d0 <__mcmp>
 800ea1a:	1e05      	subs	r5, r0, #0
 800ea1c:	d110      	bne.n	800ea40 <__mdiff+0x38>
 800ea1e:	4629      	mov	r1, r5
 800ea20:	4630      	mov	r0, r6
 800ea22:	f7ff fd59 	bl	800e4d8 <_Balloc>
 800ea26:	b930      	cbnz	r0, 800ea36 <__mdiff+0x2e>
 800ea28:	4b3a      	ldr	r3, [pc, #232]	; (800eb14 <__mdiff+0x10c>)
 800ea2a:	4602      	mov	r2, r0
 800ea2c:	f240 2137 	movw	r1, #567	; 0x237
 800ea30:	4839      	ldr	r0, [pc, #228]	; (800eb18 <__mdiff+0x110>)
 800ea32:	f000 faed 	bl	800f010 <__assert_func>
 800ea36:	2301      	movs	r3, #1
 800ea38:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ea3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea40:	bfa4      	itt	ge
 800ea42:	4643      	movge	r3, r8
 800ea44:	46a0      	movge	r8, r4
 800ea46:	4630      	mov	r0, r6
 800ea48:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ea4c:	bfa6      	itte	ge
 800ea4e:	461c      	movge	r4, r3
 800ea50:	2500      	movge	r5, #0
 800ea52:	2501      	movlt	r5, #1
 800ea54:	f7ff fd40 	bl	800e4d8 <_Balloc>
 800ea58:	b920      	cbnz	r0, 800ea64 <__mdiff+0x5c>
 800ea5a:	4b2e      	ldr	r3, [pc, #184]	; (800eb14 <__mdiff+0x10c>)
 800ea5c:	4602      	mov	r2, r0
 800ea5e:	f240 2145 	movw	r1, #581	; 0x245
 800ea62:	e7e5      	b.n	800ea30 <__mdiff+0x28>
 800ea64:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ea68:	6926      	ldr	r6, [r4, #16]
 800ea6a:	60c5      	str	r5, [r0, #12]
 800ea6c:	f104 0914 	add.w	r9, r4, #20
 800ea70:	f108 0514 	add.w	r5, r8, #20
 800ea74:	f100 0e14 	add.w	lr, r0, #20
 800ea78:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ea7c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ea80:	f108 0210 	add.w	r2, r8, #16
 800ea84:	46f2      	mov	sl, lr
 800ea86:	2100      	movs	r1, #0
 800ea88:	f859 3b04 	ldr.w	r3, [r9], #4
 800ea8c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ea90:	fa11 f88b 	uxtah	r8, r1, fp
 800ea94:	b299      	uxth	r1, r3
 800ea96:	0c1b      	lsrs	r3, r3, #16
 800ea98:	eba8 0801 	sub.w	r8, r8, r1
 800ea9c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800eaa0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800eaa4:	fa1f f888 	uxth.w	r8, r8
 800eaa8:	1419      	asrs	r1, r3, #16
 800eaaa:	454e      	cmp	r6, r9
 800eaac:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800eab0:	f84a 3b04 	str.w	r3, [sl], #4
 800eab4:	d8e8      	bhi.n	800ea88 <__mdiff+0x80>
 800eab6:	1b33      	subs	r3, r6, r4
 800eab8:	3b15      	subs	r3, #21
 800eaba:	f023 0303 	bic.w	r3, r3, #3
 800eabe:	3304      	adds	r3, #4
 800eac0:	3415      	adds	r4, #21
 800eac2:	42a6      	cmp	r6, r4
 800eac4:	bf38      	it	cc
 800eac6:	2304      	movcc	r3, #4
 800eac8:	441d      	add	r5, r3
 800eaca:	4473      	add	r3, lr
 800eacc:	469e      	mov	lr, r3
 800eace:	462e      	mov	r6, r5
 800ead0:	4566      	cmp	r6, ip
 800ead2:	d30e      	bcc.n	800eaf2 <__mdiff+0xea>
 800ead4:	f10c 0203 	add.w	r2, ip, #3
 800ead8:	1b52      	subs	r2, r2, r5
 800eada:	f022 0203 	bic.w	r2, r2, #3
 800eade:	3d03      	subs	r5, #3
 800eae0:	45ac      	cmp	ip, r5
 800eae2:	bf38      	it	cc
 800eae4:	2200      	movcc	r2, #0
 800eae6:	4413      	add	r3, r2
 800eae8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800eaec:	b17a      	cbz	r2, 800eb0e <__mdiff+0x106>
 800eaee:	6107      	str	r7, [r0, #16]
 800eaf0:	e7a4      	b.n	800ea3c <__mdiff+0x34>
 800eaf2:	f856 8b04 	ldr.w	r8, [r6], #4
 800eaf6:	fa11 f288 	uxtah	r2, r1, r8
 800eafa:	1414      	asrs	r4, r2, #16
 800eafc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800eb00:	b292      	uxth	r2, r2
 800eb02:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800eb06:	f84e 2b04 	str.w	r2, [lr], #4
 800eb0a:	1421      	asrs	r1, r4, #16
 800eb0c:	e7e0      	b.n	800ead0 <__mdiff+0xc8>
 800eb0e:	3f01      	subs	r7, #1
 800eb10:	e7ea      	b.n	800eae8 <__mdiff+0xe0>
 800eb12:	bf00      	nop
 800eb14:	0800f810 	.word	0x0800f810
 800eb18:	0800f821 	.word	0x0800f821

0800eb1c <__d2b>:
 800eb1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800eb20:	460f      	mov	r7, r1
 800eb22:	2101      	movs	r1, #1
 800eb24:	ec59 8b10 	vmov	r8, r9, d0
 800eb28:	4616      	mov	r6, r2
 800eb2a:	f7ff fcd5 	bl	800e4d8 <_Balloc>
 800eb2e:	4604      	mov	r4, r0
 800eb30:	b930      	cbnz	r0, 800eb40 <__d2b+0x24>
 800eb32:	4602      	mov	r2, r0
 800eb34:	4b24      	ldr	r3, [pc, #144]	; (800ebc8 <__d2b+0xac>)
 800eb36:	4825      	ldr	r0, [pc, #148]	; (800ebcc <__d2b+0xb0>)
 800eb38:	f240 310f 	movw	r1, #783	; 0x30f
 800eb3c:	f000 fa68 	bl	800f010 <__assert_func>
 800eb40:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800eb44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800eb48:	bb2d      	cbnz	r5, 800eb96 <__d2b+0x7a>
 800eb4a:	9301      	str	r3, [sp, #4]
 800eb4c:	f1b8 0300 	subs.w	r3, r8, #0
 800eb50:	d026      	beq.n	800eba0 <__d2b+0x84>
 800eb52:	4668      	mov	r0, sp
 800eb54:	9300      	str	r3, [sp, #0]
 800eb56:	f7ff fd87 	bl	800e668 <__lo0bits>
 800eb5a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800eb5e:	b1e8      	cbz	r0, 800eb9c <__d2b+0x80>
 800eb60:	f1c0 0320 	rsb	r3, r0, #32
 800eb64:	fa02 f303 	lsl.w	r3, r2, r3
 800eb68:	430b      	orrs	r3, r1
 800eb6a:	40c2      	lsrs	r2, r0
 800eb6c:	6163      	str	r3, [r4, #20]
 800eb6e:	9201      	str	r2, [sp, #4]
 800eb70:	9b01      	ldr	r3, [sp, #4]
 800eb72:	61a3      	str	r3, [r4, #24]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	bf14      	ite	ne
 800eb78:	2202      	movne	r2, #2
 800eb7a:	2201      	moveq	r2, #1
 800eb7c:	6122      	str	r2, [r4, #16]
 800eb7e:	b1bd      	cbz	r5, 800ebb0 <__d2b+0x94>
 800eb80:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800eb84:	4405      	add	r5, r0
 800eb86:	603d      	str	r5, [r7, #0]
 800eb88:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800eb8c:	6030      	str	r0, [r6, #0]
 800eb8e:	4620      	mov	r0, r4
 800eb90:	b003      	add	sp, #12
 800eb92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eb9a:	e7d6      	b.n	800eb4a <__d2b+0x2e>
 800eb9c:	6161      	str	r1, [r4, #20]
 800eb9e:	e7e7      	b.n	800eb70 <__d2b+0x54>
 800eba0:	a801      	add	r0, sp, #4
 800eba2:	f7ff fd61 	bl	800e668 <__lo0bits>
 800eba6:	9b01      	ldr	r3, [sp, #4]
 800eba8:	6163      	str	r3, [r4, #20]
 800ebaa:	3020      	adds	r0, #32
 800ebac:	2201      	movs	r2, #1
 800ebae:	e7e5      	b.n	800eb7c <__d2b+0x60>
 800ebb0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ebb4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ebb8:	6038      	str	r0, [r7, #0]
 800ebba:	6918      	ldr	r0, [r3, #16]
 800ebbc:	f7ff fd34 	bl	800e628 <__hi0bits>
 800ebc0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ebc4:	e7e2      	b.n	800eb8c <__d2b+0x70>
 800ebc6:	bf00      	nop
 800ebc8:	0800f810 	.word	0x0800f810
 800ebcc:	0800f821 	.word	0x0800f821

0800ebd0 <__ssputs_r>:
 800ebd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebd4:	688e      	ldr	r6, [r1, #8]
 800ebd6:	461f      	mov	r7, r3
 800ebd8:	42be      	cmp	r6, r7
 800ebda:	680b      	ldr	r3, [r1, #0]
 800ebdc:	4682      	mov	sl, r0
 800ebde:	460c      	mov	r4, r1
 800ebe0:	4690      	mov	r8, r2
 800ebe2:	d82c      	bhi.n	800ec3e <__ssputs_r+0x6e>
 800ebe4:	898a      	ldrh	r2, [r1, #12]
 800ebe6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ebea:	d026      	beq.n	800ec3a <__ssputs_r+0x6a>
 800ebec:	6965      	ldr	r5, [r4, #20]
 800ebee:	6909      	ldr	r1, [r1, #16]
 800ebf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ebf4:	eba3 0901 	sub.w	r9, r3, r1
 800ebf8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ebfc:	1c7b      	adds	r3, r7, #1
 800ebfe:	444b      	add	r3, r9
 800ec00:	106d      	asrs	r5, r5, #1
 800ec02:	429d      	cmp	r5, r3
 800ec04:	bf38      	it	cc
 800ec06:	461d      	movcc	r5, r3
 800ec08:	0553      	lsls	r3, r2, #21
 800ec0a:	d527      	bpl.n	800ec5c <__ssputs_r+0x8c>
 800ec0c:	4629      	mov	r1, r5
 800ec0e:	f7fd ff8d 	bl	800cb2c <_malloc_r>
 800ec12:	4606      	mov	r6, r0
 800ec14:	b360      	cbz	r0, 800ec70 <__ssputs_r+0xa0>
 800ec16:	6921      	ldr	r1, [r4, #16]
 800ec18:	464a      	mov	r2, r9
 800ec1a:	f7fe fe0c 	bl	800d836 <memcpy>
 800ec1e:	89a3      	ldrh	r3, [r4, #12]
 800ec20:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ec24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec28:	81a3      	strh	r3, [r4, #12]
 800ec2a:	6126      	str	r6, [r4, #16]
 800ec2c:	6165      	str	r5, [r4, #20]
 800ec2e:	444e      	add	r6, r9
 800ec30:	eba5 0509 	sub.w	r5, r5, r9
 800ec34:	6026      	str	r6, [r4, #0]
 800ec36:	60a5      	str	r5, [r4, #8]
 800ec38:	463e      	mov	r6, r7
 800ec3a:	42be      	cmp	r6, r7
 800ec3c:	d900      	bls.n	800ec40 <__ssputs_r+0x70>
 800ec3e:	463e      	mov	r6, r7
 800ec40:	6820      	ldr	r0, [r4, #0]
 800ec42:	4632      	mov	r2, r6
 800ec44:	4641      	mov	r1, r8
 800ec46:	f000 f9c9 	bl	800efdc <memmove>
 800ec4a:	68a3      	ldr	r3, [r4, #8]
 800ec4c:	1b9b      	subs	r3, r3, r6
 800ec4e:	60a3      	str	r3, [r4, #8]
 800ec50:	6823      	ldr	r3, [r4, #0]
 800ec52:	4433      	add	r3, r6
 800ec54:	6023      	str	r3, [r4, #0]
 800ec56:	2000      	movs	r0, #0
 800ec58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec5c:	462a      	mov	r2, r5
 800ec5e:	f000 fa1d 	bl	800f09c <_realloc_r>
 800ec62:	4606      	mov	r6, r0
 800ec64:	2800      	cmp	r0, #0
 800ec66:	d1e0      	bne.n	800ec2a <__ssputs_r+0x5a>
 800ec68:	6921      	ldr	r1, [r4, #16]
 800ec6a:	4650      	mov	r0, sl
 800ec6c:	f7ff fbe8 	bl	800e440 <_free_r>
 800ec70:	230c      	movs	r3, #12
 800ec72:	f8ca 3000 	str.w	r3, [sl]
 800ec76:	89a3      	ldrh	r3, [r4, #12]
 800ec78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec7c:	81a3      	strh	r3, [r4, #12]
 800ec7e:	f04f 30ff 	mov.w	r0, #4294967295
 800ec82:	e7e9      	b.n	800ec58 <__ssputs_r+0x88>

0800ec84 <_svfiprintf_r>:
 800ec84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec88:	4698      	mov	r8, r3
 800ec8a:	898b      	ldrh	r3, [r1, #12]
 800ec8c:	061b      	lsls	r3, r3, #24
 800ec8e:	b09d      	sub	sp, #116	; 0x74
 800ec90:	4607      	mov	r7, r0
 800ec92:	460d      	mov	r5, r1
 800ec94:	4614      	mov	r4, r2
 800ec96:	d50e      	bpl.n	800ecb6 <_svfiprintf_r+0x32>
 800ec98:	690b      	ldr	r3, [r1, #16]
 800ec9a:	b963      	cbnz	r3, 800ecb6 <_svfiprintf_r+0x32>
 800ec9c:	2140      	movs	r1, #64	; 0x40
 800ec9e:	f7fd ff45 	bl	800cb2c <_malloc_r>
 800eca2:	6028      	str	r0, [r5, #0]
 800eca4:	6128      	str	r0, [r5, #16]
 800eca6:	b920      	cbnz	r0, 800ecb2 <_svfiprintf_r+0x2e>
 800eca8:	230c      	movs	r3, #12
 800ecaa:	603b      	str	r3, [r7, #0]
 800ecac:	f04f 30ff 	mov.w	r0, #4294967295
 800ecb0:	e0d0      	b.n	800ee54 <_svfiprintf_r+0x1d0>
 800ecb2:	2340      	movs	r3, #64	; 0x40
 800ecb4:	616b      	str	r3, [r5, #20]
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	9309      	str	r3, [sp, #36]	; 0x24
 800ecba:	2320      	movs	r3, #32
 800ecbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ecc0:	f8cd 800c 	str.w	r8, [sp, #12]
 800ecc4:	2330      	movs	r3, #48	; 0x30
 800ecc6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ee6c <_svfiprintf_r+0x1e8>
 800ecca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ecce:	f04f 0901 	mov.w	r9, #1
 800ecd2:	4623      	mov	r3, r4
 800ecd4:	469a      	mov	sl, r3
 800ecd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ecda:	b10a      	cbz	r2, 800ece0 <_svfiprintf_r+0x5c>
 800ecdc:	2a25      	cmp	r2, #37	; 0x25
 800ecde:	d1f9      	bne.n	800ecd4 <_svfiprintf_r+0x50>
 800ece0:	ebba 0b04 	subs.w	fp, sl, r4
 800ece4:	d00b      	beq.n	800ecfe <_svfiprintf_r+0x7a>
 800ece6:	465b      	mov	r3, fp
 800ece8:	4622      	mov	r2, r4
 800ecea:	4629      	mov	r1, r5
 800ecec:	4638      	mov	r0, r7
 800ecee:	f7ff ff6f 	bl	800ebd0 <__ssputs_r>
 800ecf2:	3001      	adds	r0, #1
 800ecf4:	f000 80a9 	beq.w	800ee4a <_svfiprintf_r+0x1c6>
 800ecf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ecfa:	445a      	add	r2, fp
 800ecfc:	9209      	str	r2, [sp, #36]	; 0x24
 800ecfe:	f89a 3000 	ldrb.w	r3, [sl]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	f000 80a1 	beq.w	800ee4a <_svfiprintf_r+0x1c6>
 800ed08:	2300      	movs	r3, #0
 800ed0a:	f04f 32ff 	mov.w	r2, #4294967295
 800ed0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed12:	f10a 0a01 	add.w	sl, sl, #1
 800ed16:	9304      	str	r3, [sp, #16]
 800ed18:	9307      	str	r3, [sp, #28]
 800ed1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ed1e:	931a      	str	r3, [sp, #104]	; 0x68
 800ed20:	4654      	mov	r4, sl
 800ed22:	2205      	movs	r2, #5
 800ed24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed28:	4850      	ldr	r0, [pc, #320]	; (800ee6c <_svfiprintf_r+0x1e8>)
 800ed2a:	f7f1 fad9 	bl	80002e0 <memchr>
 800ed2e:	9a04      	ldr	r2, [sp, #16]
 800ed30:	b9d8      	cbnz	r0, 800ed6a <_svfiprintf_r+0xe6>
 800ed32:	06d0      	lsls	r0, r2, #27
 800ed34:	bf44      	itt	mi
 800ed36:	2320      	movmi	r3, #32
 800ed38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ed3c:	0711      	lsls	r1, r2, #28
 800ed3e:	bf44      	itt	mi
 800ed40:	232b      	movmi	r3, #43	; 0x2b
 800ed42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ed46:	f89a 3000 	ldrb.w	r3, [sl]
 800ed4a:	2b2a      	cmp	r3, #42	; 0x2a
 800ed4c:	d015      	beq.n	800ed7a <_svfiprintf_r+0xf6>
 800ed4e:	9a07      	ldr	r2, [sp, #28]
 800ed50:	4654      	mov	r4, sl
 800ed52:	2000      	movs	r0, #0
 800ed54:	f04f 0c0a 	mov.w	ip, #10
 800ed58:	4621      	mov	r1, r4
 800ed5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ed5e:	3b30      	subs	r3, #48	; 0x30
 800ed60:	2b09      	cmp	r3, #9
 800ed62:	d94d      	bls.n	800ee00 <_svfiprintf_r+0x17c>
 800ed64:	b1b0      	cbz	r0, 800ed94 <_svfiprintf_r+0x110>
 800ed66:	9207      	str	r2, [sp, #28]
 800ed68:	e014      	b.n	800ed94 <_svfiprintf_r+0x110>
 800ed6a:	eba0 0308 	sub.w	r3, r0, r8
 800ed6e:	fa09 f303 	lsl.w	r3, r9, r3
 800ed72:	4313      	orrs	r3, r2
 800ed74:	9304      	str	r3, [sp, #16]
 800ed76:	46a2      	mov	sl, r4
 800ed78:	e7d2      	b.n	800ed20 <_svfiprintf_r+0x9c>
 800ed7a:	9b03      	ldr	r3, [sp, #12]
 800ed7c:	1d19      	adds	r1, r3, #4
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	9103      	str	r1, [sp, #12]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	bfbb      	ittet	lt
 800ed86:	425b      	neglt	r3, r3
 800ed88:	f042 0202 	orrlt.w	r2, r2, #2
 800ed8c:	9307      	strge	r3, [sp, #28]
 800ed8e:	9307      	strlt	r3, [sp, #28]
 800ed90:	bfb8      	it	lt
 800ed92:	9204      	strlt	r2, [sp, #16]
 800ed94:	7823      	ldrb	r3, [r4, #0]
 800ed96:	2b2e      	cmp	r3, #46	; 0x2e
 800ed98:	d10c      	bne.n	800edb4 <_svfiprintf_r+0x130>
 800ed9a:	7863      	ldrb	r3, [r4, #1]
 800ed9c:	2b2a      	cmp	r3, #42	; 0x2a
 800ed9e:	d134      	bne.n	800ee0a <_svfiprintf_r+0x186>
 800eda0:	9b03      	ldr	r3, [sp, #12]
 800eda2:	1d1a      	adds	r2, r3, #4
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	9203      	str	r2, [sp, #12]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	bfb8      	it	lt
 800edac:	f04f 33ff 	movlt.w	r3, #4294967295
 800edb0:	3402      	adds	r4, #2
 800edb2:	9305      	str	r3, [sp, #20]
 800edb4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ee7c <_svfiprintf_r+0x1f8>
 800edb8:	7821      	ldrb	r1, [r4, #0]
 800edba:	2203      	movs	r2, #3
 800edbc:	4650      	mov	r0, sl
 800edbe:	f7f1 fa8f 	bl	80002e0 <memchr>
 800edc2:	b138      	cbz	r0, 800edd4 <_svfiprintf_r+0x150>
 800edc4:	9b04      	ldr	r3, [sp, #16]
 800edc6:	eba0 000a 	sub.w	r0, r0, sl
 800edca:	2240      	movs	r2, #64	; 0x40
 800edcc:	4082      	lsls	r2, r0
 800edce:	4313      	orrs	r3, r2
 800edd0:	3401      	adds	r4, #1
 800edd2:	9304      	str	r3, [sp, #16]
 800edd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edd8:	4825      	ldr	r0, [pc, #148]	; (800ee70 <_svfiprintf_r+0x1ec>)
 800edda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800edde:	2206      	movs	r2, #6
 800ede0:	f7f1 fa7e 	bl	80002e0 <memchr>
 800ede4:	2800      	cmp	r0, #0
 800ede6:	d038      	beq.n	800ee5a <_svfiprintf_r+0x1d6>
 800ede8:	4b22      	ldr	r3, [pc, #136]	; (800ee74 <_svfiprintf_r+0x1f0>)
 800edea:	bb1b      	cbnz	r3, 800ee34 <_svfiprintf_r+0x1b0>
 800edec:	9b03      	ldr	r3, [sp, #12]
 800edee:	3307      	adds	r3, #7
 800edf0:	f023 0307 	bic.w	r3, r3, #7
 800edf4:	3308      	adds	r3, #8
 800edf6:	9303      	str	r3, [sp, #12]
 800edf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edfa:	4433      	add	r3, r6
 800edfc:	9309      	str	r3, [sp, #36]	; 0x24
 800edfe:	e768      	b.n	800ecd2 <_svfiprintf_r+0x4e>
 800ee00:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee04:	460c      	mov	r4, r1
 800ee06:	2001      	movs	r0, #1
 800ee08:	e7a6      	b.n	800ed58 <_svfiprintf_r+0xd4>
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	3401      	adds	r4, #1
 800ee0e:	9305      	str	r3, [sp, #20]
 800ee10:	4619      	mov	r1, r3
 800ee12:	f04f 0c0a 	mov.w	ip, #10
 800ee16:	4620      	mov	r0, r4
 800ee18:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee1c:	3a30      	subs	r2, #48	; 0x30
 800ee1e:	2a09      	cmp	r2, #9
 800ee20:	d903      	bls.n	800ee2a <_svfiprintf_r+0x1a6>
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d0c6      	beq.n	800edb4 <_svfiprintf_r+0x130>
 800ee26:	9105      	str	r1, [sp, #20]
 800ee28:	e7c4      	b.n	800edb4 <_svfiprintf_r+0x130>
 800ee2a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ee2e:	4604      	mov	r4, r0
 800ee30:	2301      	movs	r3, #1
 800ee32:	e7f0      	b.n	800ee16 <_svfiprintf_r+0x192>
 800ee34:	ab03      	add	r3, sp, #12
 800ee36:	9300      	str	r3, [sp, #0]
 800ee38:	462a      	mov	r2, r5
 800ee3a:	4b0f      	ldr	r3, [pc, #60]	; (800ee78 <_svfiprintf_r+0x1f4>)
 800ee3c:	a904      	add	r1, sp, #16
 800ee3e:	4638      	mov	r0, r7
 800ee40:	f7fd ff92 	bl	800cd68 <_printf_float>
 800ee44:	1c42      	adds	r2, r0, #1
 800ee46:	4606      	mov	r6, r0
 800ee48:	d1d6      	bne.n	800edf8 <_svfiprintf_r+0x174>
 800ee4a:	89ab      	ldrh	r3, [r5, #12]
 800ee4c:	065b      	lsls	r3, r3, #25
 800ee4e:	f53f af2d 	bmi.w	800ecac <_svfiprintf_r+0x28>
 800ee52:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ee54:	b01d      	add	sp, #116	; 0x74
 800ee56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee5a:	ab03      	add	r3, sp, #12
 800ee5c:	9300      	str	r3, [sp, #0]
 800ee5e:	462a      	mov	r2, r5
 800ee60:	4b05      	ldr	r3, [pc, #20]	; (800ee78 <_svfiprintf_r+0x1f4>)
 800ee62:	a904      	add	r1, sp, #16
 800ee64:	4638      	mov	r0, r7
 800ee66:	f7fe fa07 	bl	800d278 <_printf_i>
 800ee6a:	e7eb      	b.n	800ee44 <_svfiprintf_r+0x1c0>
 800ee6c:	0800f97c 	.word	0x0800f97c
 800ee70:	0800f986 	.word	0x0800f986
 800ee74:	0800cd69 	.word	0x0800cd69
 800ee78:	0800ebd1 	.word	0x0800ebd1
 800ee7c:	0800f982 	.word	0x0800f982

0800ee80 <__sflush_r>:
 800ee80:	898a      	ldrh	r2, [r1, #12]
 800ee82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee86:	4605      	mov	r5, r0
 800ee88:	0710      	lsls	r0, r2, #28
 800ee8a:	460c      	mov	r4, r1
 800ee8c:	d458      	bmi.n	800ef40 <__sflush_r+0xc0>
 800ee8e:	684b      	ldr	r3, [r1, #4]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	dc05      	bgt.n	800eea0 <__sflush_r+0x20>
 800ee94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	dc02      	bgt.n	800eea0 <__sflush_r+0x20>
 800ee9a:	2000      	movs	r0, #0
 800ee9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eea0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eea2:	2e00      	cmp	r6, #0
 800eea4:	d0f9      	beq.n	800ee9a <__sflush_r+0x1a>
 800eea6:	2300      	movs	r3, #0
 800eea8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eeac:	682f      	ldr	r7, [r5, #0]
 800eeae:	6a21      	ldr	r1, [r4, #32]
 800eeb0:	602b      	str	r3, [r5, #0]
 800eeb2:	d032      	beq.n	800ef1a <__sflush_r+0x9a>
 800eeb4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eeb6:	89a3      	ldrh	r3, [r4, #12]
 800eeb8:	075a      	lsls	r2, r3, #29
 800eeba:	d505      	bpl.n	800eec8 <__sflush_r+0x48>
 800eebc:	6863      	ldr	r3, [r4, #4]
 800eebe:	1ac0      	subs	r0, r0, r3
 800eec0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eec2:	b10b      	cbz	r3, 800eec8 <__sflush_r+0x48>
 800eec4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eec6:	1ac0      	subs	r0, r0, r3
 800eec8:	2300      	movs	r3, #0
 800eeca:	4602      	mov	r2, r0
 800eecc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eece:	6a21      	ldr	r1, [r4, #32]
 800eed0:	4628      	mov	r0, r5
 800eed2:	47b0      	blx	r6
 800eed4:	1c43      	adds	r3, r0, #1
 800eed6:	89a3      	ldrh	r3, [r4, #12]
 800eed8:	d106      	bne.n	800eee8 <__sflush_r+0x68>
 800eeda:	6829      	ldr	r1, [r5, #0]
 800eedc:	291d      	cmp	r1, #29
 800eede:	d82b      	bhi.n	800ef38 <__sflush_r+0xb8>
 800eee0:	4a29      	ldr	r2, [pc, #164]	; (800ef88 <__sflush_r+0x108>)
 800eee2:	410a      	asrs	r2, r1
 800eee4:	07d6      	lsls	r6, r2, #31
 800eee6:	d427      	bmi.n	800ef38 <__sflush_r+0xb8>
 800eee8:	2200      	movs	r2, #0
 800eeea:	6062      	str	r2, [r4, #4]
 800eeec:	04d9      	lsls	r1, r3, #19
 800eeee:	6922      	ldr	r2, [r4, #16]
 800eef0:	6022      	str	r2, [r4, #0]
 800eef2:	d504      	bpl.n	800eefe <__sflush_r+0x7e>
 800eef4:	1c42      	adds	r2, r0, #1
 800eef6:	d101      	bne.n	800eefc <__sflush_r+0x7c>
 800eef8:	682b      	ldr	r3, [r5, #0]
 800eefa:	b903      	cbnz	r3, 800eefe <__sflush_r+0x7e>
 800eefc:	6560      	str	r0, [r4, #84]	; 0x54
 800eefe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ef00:	602f      	str	r7, [r5, #0]
 800ef02:	2900      	cmp	r1, #0
 800ef04:	d0c9      	beq.n	800ee9a <__sflush_r+0x1a>
 800ef06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ef0a:	4299      	cmp	r1, r3
 800ef0c:	d002      	beq.n	800ef14 <__sflush_r+0x94>
 800ef0e:	4628      	mov	r0, r5
 800ef10:	f7ff fa96 	bl	800e440 <_free_r>
 800ef14:	2000      	movs	r0, #0
 800ef16:	6360      	str	r0, [r4, #52]	; 0x34
 800ef18:	e7c0      	b.n	800ee9c <__sflush_r+0x1c>
 800ef1a:	2301      	movs	r3, #1
 800ef1c:	4628      	mov	r0, r5
 800ef1e:	47b0      	blx	r6
 800ef20:	1c41      	adds	r1, r0, #1
 800ef22:	d1c8      	bne.n	800eeb6 <__sflush_r+0x36>
 800ef24:	682b      	ldr	r3, [r5, #0]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d0c5      	beq.n	800eeb6 <__sflush_r+0x36>
 800ef2a:	2b1d      	cmp	r3, #29
 800ef2c:	d001      	beq.n	800ef32 <__sflush_r+0xb2>
 800ef2e:	2b16      	cmp	r3, #22
 800ef30:	d101      	bne.n	800ef36 <__sflush_r+0xb6>
 800ef32:	602f      	str	r7, [r5, #0]
 800ef34:	e7b1      	b.n	800ee9a <__sflush_r+0x1a>
 800ef36:	89a3      	ldrh	r3, [r4, #12]
 800ef38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef3c:	81a3      	strh	r3, [r4, #12]
 800ef3e:	e7ad      	b.n	800ee9c <__sflush_r+0x1c>
 800ef40:	690f      	ldr	r7, [r1, #16]
 800ef42:	2f00      	cmp	r7, #0
 800ef44:	d0a9      	beq.n	800ee9a <__sflush_r+0x1a>
 800ef46:	0793      	lsls	r3, r2, #30
 800ef48:	680e      	ldr	r6, [r1, #0]
 800ef4a:	bf08      	it	eq
 800ef4c:	694b      	ldreq	r3, [r1, #20]
 800ef4e:	600f      	str	r7, [r1, #0]
 800ef50:	bf18      	it	ne
 800ef52:	2300      	movne	r3, #0
 800ef54:	eba6 0807 	sub.w	r8, r6, r7
 800ef58:	608b      	str	r3, [r1, #8]
 800ef5a:	f1b8 0f00 	cmp.w	r8, #0
 800ef5e:	dd9c      	ble.n	800ee9a <__sflush_r+0x1a>
 800ef60:	6a21      	ldr	r1, [r4, #32]
 800ef62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ef64:	4643      	mov	r3, r8
 800ef66:	463a      	mov	r2, r7
 800ef68:	4628      	mov	r0, r5
 800ef6a:	47b0      	blx	r6
 800ef6c:	2800      	cmp	r0, #0
 800ef6e:	dc06      	bgt.n	800ef7e <__sflush_r+0xfe>
 800ef70:	89a3      	ldrh	r3, [r4, #12]
 800ef72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef76:	81a3      	strh	r3, [r4, #12]
 800ef78:	f04f 30ff 	mov.w	r0, #4294967295
 800ef7c:	e78e      	b.n	800ee9c <__sflush_r+0x1c>
 800ef7e:	4407      	add	r7, r0
 800ef80:	eba8 0800 	sub.w	r8, r8, r0
 800ef84:	e7e9      	b.n	800ef5a <__sflush_r+0xda>
 800ef86:	bf00      	nop
 800ef88:	dfbffffe 	.word	0xdfbffffe

0800ef8c <_fflush_r>:
 800ef8c:	b538      	push	{r3, r4, r5, lr}
 800ef8e:	690b      	ldr	r3, [r1, #16]
 800ef90:	4605      	mov	r5, r0
 800ef92:	460c      	mov	r4, r1
 800ef94:	b913      	cbnz	r3, 800ef9c <_fflush_r+0x10>
 800ef96:	2500      	movs	r5, #0
 800ef98:	4628      	mov	r0, r5
 800ef9a:	bd38      	pop	{r3, r4, r5, pc}
 800ef9c:	b118      	cbz	r0, 800efa6 <_fflush_r+0x1a>
 800ef9e:	6a03      	ldr	r3, [r0, #32]
 800efa0:	b90b      	cbnz	r3, 800efa6 <_fflush_r+0x1a>
 800efa2:	f7fe fb17 	bl	800d5d4 <__sinit>
 800efa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d0f3      	beq.n	800ef96 <_fflush_r+0xa>
 800efae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800efb0:	07d0      	lsls	r0, r2, #31
 800efb2:	d404      	bmi.n	800efbe <_fflush_r+0x32>
 800efb4:	0599      	lsls	r1, r3, #22
 800efb6:	d402      	bmi.n	800efbe <_fflush_r+0x32>
 800efb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800efba:	f7fe fc32 	bl	800d822 <__retarget_lock_acquire_recursive>
 800efbe:	4628      	mov	r0, r5
 800efc0:	4621      	mov	r1, r4
 800efc2:	f7ff ff5d 	bl	800ee80 <__sflush_r>
 800efc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800efc8:	07da      	lsls	r2, r3, #31
 800efca:	4605      	mov	r5, r0
 800efcc:	d4e4      	bmi.n	800ef98 <_fflush_r+0xc>
 800efce:	89a3      	ldrh	r3, [r4, #12]
 800efd0:	059b      	lsls	r3, r3, #22
 800efd2:	d4e1      	bmi.n	800ef98 <_fflush_r+0xc>
 800efd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800efd6:	f7fe fc25 	bl	800d824 <__retarget_lock_release_recursive>
 800efda:	e7dd      	b.n	800ef98 <_fflush_r+0xc>

0800efdc <memmove>:
 800efdc:	4288      	cmp	r0, r1
 800efde:	b510      	push	{r4, lr}
 800efe0:	eb01 0402 	add.w	r4, r1, r2
 800efe4:	d902      	bls.n	800efec <memmove+0x10>
 800efe6:	4284      	cmp	r4, r0
 800efe8:	4623      	mov	r3, r4
 800efea:	d807      	bhi.n	800effc <memmove+0x20>
 800efec:	1e43      	subs	r3, r0, #1
 800efee:	42a1      	cmp	r1, r4
 800eff0:	d008      	beq.n	800f004 <memmove+0x28>
 800eff2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eff6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800effa:	e7f8      	b.n	800efee <memmove+0x12>
 800effc:	4402      	add	r2, r0
 800effe:	4601      	mov	r1, r0
 800f000:	428a      	cmp	r2, r1
 800f002:	d100      	bne.n	800f006 <memmove+0x2a>
 800f004:	bd10      	pop	{r4, pc}
 800f006:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f00a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f00e:	e7f7      	b.n	800f000 <memmove+0x24>

0800f010 <__assert_func>:
 800f010:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f012:	4614      	mov	r4, r2
 800f014:	461a      	mov	r2, r3
 800f016:	4b09      	ldr	r3, [pc, #36]	; (800f03c <__assert_func+0x2c>)
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	4605      	mov	r5, r0
 800f01c:	68d8      	ldr	r0, [r3, #12]
 800f01e:	b14c      	cbz	r4, 800f034 <__assert_func+0x24>
 800f020:	4b07      	ldr	r3, [pc, #28]	; (800f040 <__assert_func+0x30>)
 800f022:	9100      	str	r1, [sp, #0]
 800f024:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f028:	4906      	ldr	r1, [pc, #24]	; (800f044 <__assert_func+0x34>)
 800f02a:	462b      	mov	r3, r5
 800f02c:	f000 f872 	bl	800f114 <fiprintf>
 800f030:	f000 f882 	bl	800f138 <abort>
 800f034:	4b04      	ldr	r3, [pc, #16]	; (800f048 <__assert_func+0x38>)
 800f036:	461c      	mov	r4, r3
 800f038:	e7f3      	b.n	800f022 <__assert_func+0x12>
 800f03a:	bf00      	nop
 800f03c:	2400019c 	.word	0x2400019c
 800f040:	0800f997 	.word	0x0800f997
 800f044:	0800f9a4 	.word	0x0800f9a4
 800f048:	0800f9d2 	.word	0x0800f9d2

0800f04c <_calloc_r>:
 800f04c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f04e:	fba1 2402 	umull	r2, r4, r1, r2
 800f052:	b94c      	cbnz	r4, 800f068 <_calloc_r+0x1c>
 800f054:	4611      	mov	r1, r2
 800f056:	9201      	str	r2, [sp, #4]
 800f058:	f7fd fd68 	bl	800cb2c <_malloc_r>
 800f05c:	9a01      	ldr	r2, [sp, #4]
 800f05e:	4605      	mov	r5, r0
 800f060:	b930      	cbnz	r0, 800f070 <_calloc_r+0x24>
 800f062:	4628      	mov	r0, r5
 800f064:	b003      	add	sp, #12
 800f066:	bd30      	pop	{r4, r5, pc}
 800f068:	220c      	movs	r2, #12
 800f06a:	6002      	str	r2, [r0, #0]
 800f06c:	2500      	movs	r5, #0
 800f06e:	e7f8      	b.n	800f062 <_calloc_r+0x16>
 800f070:	4621      	mov	r1, r4
 800f072:	f7fe fb48 	bl	800d706 <memset>
 800f076:	e7f4      	b.n	800f062 <_calloc_r+0x16>

0800f078 <__ascii_mbtowc>:
 800f078:	b082      	sub	sp, #8
 800f07a:	b901      	cbnz	r1, 800f07e <__ascii_mbtowc+0x6>
 800f07c:	a901      	add	r1, sp, #4
 800f07e:	b142      	cbz	r2, 800f092 <__ascii_mbtowc+0x1a>
 800f080:	b14b      	cbz	r3, 800f096 <__ascii_mbtowc+0x1e>
 800f082:	7813      	ldrb	r3, [r2, #0]
 800f084:	600b      	str	r3, [r1, #0]
 800f086:	7812      	ldrb	r2, [r2, #0]
 800f088:	1e10      	subs	r0, r2, #0
 800f08a:	bf18      	it	ne
 800f08c:	2001      	movne	r0, #1
 800f08e:	b002      	add	sp, #8
 800f090:	4770      	bx	lr
 800f092:	4610      	mov	r0, r2
 800f094:	e7fb      	b.n	800f08e <__ascii_mbtowc+0x16>
 800f096:	f06f 0001 	mvn.w	r0, #1
 800f09a:	e7f8      	b.n	800f08e <__ascii_mbtowc+0x16>

0800f09c <_realloc_r>:
 800f09c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0a0:	4680      	mov	r8, r0
 800f0a2:	4614      	mov	r4, r2
 800f0a4:	460e      	mov	r6, r1
 800f0a6:	b921      	cbnz	r1, 800f0b2 <_realloc_r+0x16>
 800f0a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f0ac:	4611      	mov	r1, r2
 800f0ae:	f7fd bd3d 	b.w	800cb2c <_malloc_r>
 800f0b2:	b92a      	cbnz	r2, 800f0c0 <_realloc_r+0x24>
 800f0b4:	f7ff f9c4 	bl	800e440 <_free_r>
 800f0b8:	4625      	mov	r5, r4
 800f0ba:	4628      	mov	r0, r5
 800f0bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0c0:	f000 f841 	bl	800f146 <_malloc_usable_size_r>
 800f0c4:	4284      	cmp	r4, r0
 800f0c6:	4607      	mov	r7, r0
 800f0c8:	d802      	bhi.n	800f0d0 <_realloc_r+0x34>
 800f0ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f0ce:	d812      	bhi.n	800f0f6 <_realloc_r+0x5a>
 800f0d0:	4621      	mov	r1, r4
 800f0d2:	4640      	mov	r0, r8
 800f0d4:	f7fd fd2a 	bl	800cb2c <_malloc_r>
 800f0d8:	4605      	mov	r5, r0
 800f0da:	2800      	cmp	r0, #0
 800f0dc:	d0ed      	beq.n	800f0ba <_realloc_r+0x1e>
 800f0de:	42bc      	cmp	r4, r7
 800f0e0:	4622      	mov	r2, r4
 800f0e2:	4631      	mov	r1, r6
 800f0e4:	bf28      	it	cs
 800f0e6:	463a      	movcs	r2, r7
 800f0e8:	f7fe fba5 	bl	800d836 <memcpy>
 800f0ec:	4631      	mov	r1, r6
 800f0ee:	4640      	mov	r0, r8
 800f0f0:	f7ff f9a6 	bl	800e440 <_free_r>
 800f0f4:	e7e1      	b.n	800f0ba <_realloc_r+0x1e>
 800f0f6:	4635      	mov	r5, r6
 800f0f8:	e7df      	b.n	800f0ba <_realloc_r+0x1e>

0800f0fa <__ascii_wctomb>:
 800f0fa:	b149      	cbz	r1, 800f110 <__ascii_wctomb+0x16>
 800f0fc:	2aff      	cmp	r2, #255	; 0xff
 800f0fe:	bf85      	ittet	hi
 800f100:	238a      	movhi	r3, #138	; 0x8a
 800f102:	6003      	strhi	r3, [r0, #0]
 800f104:	700a      	strbls	r2, [r1, #0]
 800f106:	f04f 30ff 	movhi.w	r0, #4294967295
 800f10a:	bf98      	it	ls
 800f10c:	2001      	movls	r0, #1
 800f10e:	4770      	bx	lr
 800f110:	4608      	mov	r0, r1
 800f112:	4770      	bx	lr

0800f114 <fiprintf>:
 800f114:	b40e      	push	{r1, r2, r3}
 800f116:	b503      	push	{r0, r1, lr}
 800f118:	4601      	mov	r1, r0
 800f11a:	ab03      	add	r3, sp, #12
 800f11c:	4805      	ldr	r0, [pc, #20]	; (800f134 <fiprintf+0x20>)
 800f11e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f122:	6800      	ldr	r0, [r0, #0]
 800f124:	9301      	str	r3, [sp, #4]
 800f126:	f000 f83f 	bl	800f1a8 <_vfiprintf_r>
 800f12a:	b002      	add	sp, #8
 800f12c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f130:	b003      	add	sp, #12
 800f132:	4770      	bx	lr
 800f134:	2400019c 	.word	0x2400019c

0800f138 <abort>:
 800f138:	b508      	push	{r3, lr}
 800f13a:	2006      	movs	r0, #6
 800f13c:	f000 fa0c 	bl	800f558 <raise>
 800f140:	2001      	movs	r0, #1
 800f142:	f7f2 fee3 	bl	8001f0c <_exit>

0800f146 <_malloc_usable_size_r>:
 800f146:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f14a:	1f18      	subs	r0, r3, #4
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	bfbc      	itt	lt
 800f150:	580b      	ldrlt	r3, [r1, r0]
 800f152:	18c0      	addlt	r0, r0, r3
 800f154:	4770      	bx	lr

0800f156 <__sfputc_r>:
 800f156:	6893      	ldr	r3, [r2, #8]
 800f158:	3b01      	subs	r3, #1
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	b410      	push	{r4}
 800f15e:	6093      	str	r3, [r2, #8]
 800f160:	da08      	bge.n	800f174 <__sfputc_r+0x1e>
 800f162:	6994      	ldr	r4, [r2, #24]
 800f164:	42a3      	cmp	r3, r4
 800f166:	db01      	blt.n	800f16c <__sfputc_r+0x16>
 800f168:	290a      	cmp	r1, #10
 800f16a:	d103      	bne.n	800f174 <__sfputc_r+0x1e>
 800f16c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f170:	f000 b934 	b.w	800f3dc <__swbuf_r>
 800f174:	6813      	ldr	r3, [r2, #0]
 800f176:	1c58      	adds	r0, r3, #1
 800f178:	6010      	str	r0, [r2, #0]
 800f17a:	7019      	strb	r1, [r3, #0]
 800f17c:	4608      	mov	r0, r1
 800f17e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f182:	4770      	bx	lr

0800f184 <__sfputs_r>:
 800f184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f186:	4606      	mov	r6, r0
 800f188:	460f      	mov	r7, r1
 800f18a:	4614      	mov	r4, r2
 800f18c:	18d5      	adds	r5, r2, r3
 800f18e:	42ac      	cmp	r4, r5
 800f190:	d101      	bne.n	800f196 <__sfputs_r+0x12>
 800f192:	2000      	movs	r0, #0
 800f194:	e007      	b.n	800f1a6 <__sfputs_r+0x22>
 800f196:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f19a:	463a      	mov	r2, r7
 800f19c:	4630      	mov	r0, r6
 800f19e:	f7ff ffda 	bl	800f156 <__sfputc_r>
 800f1a2:	1c43      	adds	r3, r0, #1
 800f1a4:	d1f3      	bne.n	800f18e <__sfputs_r+0xa>
 800f1a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f1a8 <_vfiprintf_r>:
 800f1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1ac:	460d      	mov	r5, r1
 800f1ae:	b09d      	sub	sp, #116	; 0x74
 800f1b0:	4614      	mov	r4, r2
 800f1b2:	4698      	mov	r8, r3
 800f1b4:	4606      	mov	r6, r0
 800f1b6:	b118      	cbz	r0, 800f1c0 <_vfiprintf_r+0x18>
 800f1b8:	6a03      	ldr	r3, [r0, #32]
 800f1ba:	b90b      	cbnz	r3, 800f1c0 <_vfiprintf_r+0x18>
 800f1bc:	f7fe fa0a 	bl	800d5d4 <__sinit>
 800f1c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f1c2:	07d9      	lsls	r1, r3, #31
 800f1c4:	d405      	bmi.n	800f1d2 <_vfiprintf_r+0x2a>
 800f1c6:	89ab      	ldrh	r3, [r5, #12]
 800f1c8:	059a      	lsls	r2, r3, #22
 800f1ca:	d402      	bmi.n	800f1d2 <_vfiprintf_r+0x2a>
 800f1cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f1ce:	f7fe fb28 	bl	800d822 <__retarget_lock_acquire_recursive>
 800f1d2:	89ab      	ldrh	r3, [r5, #12]
 800f1d4:	071b      	lsls	r3, r3, #28
 800f1d6:	d501      	bpl.n	800f1dc <_vfiprintf_r+0x34>
 800f1d8:	692b      	ldr	r3, [r5, #16]
 800f1da:	b99b      	cbnz	r3, 800f204 <_vfiprintf_r+0x5c>
 800f1dc:	4629      	mov	r1, r5
 800f1de:	4630      	mov	r0, r6
 800f1e0:	f000 f93a 	bl	800f458 <__swsetup_r>
 800f1e4:	b170      	cbz	r0, 800f204 <_vfiprintf_r+0x5c>
 800f1e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f1e8:	07dc      	lsls	r4, r3, #31
 800f1ea:	d504      	bpl.n	800f1f6 <_vfiprintf_r+0x4e>
 800f1ec:	f04f 30ff 	mov.w	r0, #4294967295
 800f1f0:	b01d      	add	sp, #116	; 0x74
 800f1f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1f6:	89ab      	ldrh	r3, [r5, #12]
 800f1f8:	0598      	lsls	r0, r3, #22
 800f1fa:	d4f7      	bmi.n	800f1ec <_vfiprintf_r+0x44>
 800f1fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f1fe:	f7fe fb11 	bl	800d824 <__retarget_lock_release_recursive>
 800f202:	e7f3      	b.n	800f1ec <_vfiprintf_r+0x44>
 800f204:	2300      	movs	r3, #0
 800f206:	9309      	str	r3, [sp, #36]	; 0x24
 800f208:	2320      	movs	r3, #32
 800f20a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f20e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f212:	2330      	movs	r3, #48	; 0x30
 800f214:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f3c8 <_vfiprintf_r+0x220>
 800f218:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f21c:	f04f 0901 	mov.w	r9, #1
 800f220:	4623      	mov	r3, r4
 800f222:	469a      	mov	sl, r3
 800f224:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f228:	b10a      	cbz	r2, 800f22e <_vfiprintf_r+0x86>
 800f22a:	2a25      	cmp	r2, #37	; 0x25
 800f22c:	d1f9      	bne.n	800f222 <_vfiprintf_r+0x7a>
 800f22e:	ebba 0b04 	subs.w	fp, sl, r4
 800f232:	d00b      	beq.n	800f24c <_vfiprintf_r+0xa4>
 800f234:	465b      	mov	r3, fp
 800f236:	4622      	mov	r2, r4
 800f238:	4629      	mov	r1, r5
 800f23a:	4630      	mov	r0, r6
 800f23c:	f7ff ffa2 	bl	800f184 <__sfputs_r>
 800f240:	3001      	adds	r0, #1
 800f242:	f000 80a9 	beq.w	800f398 <_vfiprintf_r+0x1f0>
 800f246:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f248:	445a      	add	r2, fp
 800f24a:	9209      	str	r2, [sp, #36]	; 0x24
 800f24c:	f89a 3000 	ldrb.w	r3, [sl]
 800f250:	2b00      	cmp	r3, #0
 800f252:	f000 80a1 	beq.w	800f398 <_vfiprintf_r+0x1f0>
 800f256:	2300      	movs	r3, #0
 800f258:	f04f 32ff 	mov.w	r2, #4294967295
 800f25c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f260:	f10a 0a01 	add.w	sl, sl, #1
 800f264:	9304      	str	r3, [sp, #16]
 800f266:	9307      	str	r3, [sp, #28]
 800f268:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f26c:	931a      	str	r3, [sp, #104]	; 0x68
 800f26e:	4654      	mov	r4, sl
 800f270:	2205      	movs	r2, #5
 800f272:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f276:	4854      	ldr	r0, [pc, #336]	; (800f3c8 <_vfiprintf_r+0x220>)
 800f278:	f7f1 f832 	bl	80002e0 <memchr>
 800f27c:	9a04      	ldr	r2, [sp, #16]
 800f27e:	b9d8      	cbnz	r0, 800f2b8 <_vfiprintf_r+0x110>
 800f280:	06d1      	lsls	r1, r2, #27
 800f282:	bf44      	itt	mi
 800f284:	2320      	movmi	r3, #32
 800f286:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f28a:	0713      	lsls	r3, r2, #28
 800f28c:	bf44      	itt	mi
 800f28e:	232b      	movmi	r3, #43	; 0x2b
 800f290:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f294:	f89a 3000 	ldrb.w	r3, [sl]
 800f298:	2b2a      	cmp	r3, #42	; 0x2a
 800f29a:	d015      	beq.n	800f2c8 <_vfiprintf_r+0x120>
 800f29c:	9a07      	ldr	r2, [sp, #28]
 800f29e:	4654      	mov	r4, sl
 800f2a0:	2000      	movs	r0, #0
 800f2a2:	f04f 0c0a 	mov.w	ip, #10
 800f2a6:	4621      	mov	r1, r4
 800f2a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f2ac:	3b30      	subs	r3, #48	; 0x30
 800f2ae:	2b09      	cmp	r3, #9
 800f2b0:	d94d      	bls.n	800f34e <_vfiprintf_r+0x1a6>
 800f2b2:	b1b0      	cbz	r0, 800f2e2 <_vfiprintf_r+0x13a>
 800f2b4:	9207      	str	r2, [sp, #28]
 800f2b6:	e014      	b.n	800f2e2 <_vfiprintf_r+0x13a>
 800f2b8:	eba0 0308 	sub.w	r3, r0, r8
 800f2bc:	fa09 f303 	lsl.w	r3, r9, r3
 800f2c0:	4313      	orrs	r3, r2
 800f2c2:	9304      	str	r3, [sp, #16]
 800f2c4:	46a2      	mov	sl, r4
 800f2c6:	e7d2      	b.n	800f26e <_vfiprintf_r+0xc6>
 800f2c8:	9b03      	ldr	r3, [sp, #12]
 800f2ca:	1d19      	adds	r1, r3, #4
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	9103      	str	r1, [sp, #12]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	bfbb      	ittet	lt
 800f2d4:	425b      	neglt	r3, r3
 800f2d6:	f042 0202 	orrlt.w	r2, r2, #2
 800f2da:	9307      	strge	r3, [sp, #28]
 800f2dc:	9307      	strlt	r3, [sp, #28]
 800f2de:	bfb8      	it	lt
 800f2e0:	9204      	strlt	r2, [sp, #16]
 800f2e2:	7823      	ldrb	r3, [r4, #0]
 800f2e4:	2b2e      	cmp	r3, #46	; 0x2e
 800f2e6:	d10c      	bne.n	800f302 <_vfiprintf_r+0x15a>
 800f2e8:	7863      	ldrb	r3, [r4, #1]
 800f2ea:	2b2a      	cmp	r3, #42	; 0x2a
 800f2ec:	d134      	bne.n	800f358 <_vfiprintf_r+0x1b0>
 800f2ee:	9b03      	ldr	r3, [sp, #12]
 800f2f0:	1d1a      	adds	r2, r3, #4
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	9203      	str	r2, [sp, #12]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	bfb8      	it	lt
 800f2fa:	f04f 33ff 	movlt.w	r3, #4294967295
 800f2fe:	3402      	adds	r4, #2
 800f300:	9305      	str	r3, [sp, #20]
 800f302:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f3d8 <_vfiprintf_r+0x230>
 800f306:	7821      	ldrb	r1, [r4, #0]
 800f308:	2203      	movs	r2, #3
 800f30a:	4650      	mov	r0, sl
 800f30c:	f7f0 ffe8 	bl	80002e0 <memchr>
 800f310:	b138      	cbz	r0, 800f322 <_vfiprintf_r+0x17a>
 800f312:	9b04      	ldr	r3, [sp, #16]
 800f314:	eba0 000a 	sub.w	r0, r0, sl
 800f318:	2240      	movs	r2, #64	; 0x40
 800f31a:	4082      	lsls	r2, r0
 800f31c:	4313      	orrs	r3, r2
 800f31e:	3401      	adds	r4, #1
 800f320:	9304      	str	r3, [sp, #16]
 800f322:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f326:	4829      	ldr	r0, [pc, #164]	; (800f3cc <_vfiprintf_r+0x224>)
 800f328:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f32c:	2206      	movs	r2, #6
 800f32e:	f7f0 ffd7 	bl	80002e0 <memchr>
 800f332:	2800      	cmp	r0, #0
 800f334:	d03f      	beq.n	800f3b6 <_vfiprintf_r+0x20e>
 800f336:	4b26      	ldr	r3, [pc, #152]	; (800f3d0 <_vfiprintf_r+0x228>)
 800f338:	bb1b      	cbnz	r3, 800f382 <_vfiprintf_r+0x1da>
 800f33a:	9b03      	ldr	r3, [sp, #12]
 800f33c:	3307      	adds	r3, #7
 800f33e:	f023 0307 	bic.w	r3, r3, #7
 800f342:	3308      	adds	r3, #8
 800f344:	9303      	str	r3, [sp, #12]
 800f346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f348:	443b      	add	r3, r7
 800f34a:	9309      	str	r3, [sp, #36]	; 0x24
 800f34c:	e768      	b.n	800f220 <_vfiprintf_r+0x78>
 800f34e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f352:	460c      	mov	r4, r1
 800f354:	2001      	movs	r0, #1
 800f356:	e7a6      	b.n	800f2a6 <_vfiprintf_r+0xfe>
 800f358:	2300      	movs	r3, #0
 800f35a:	3401      	adds	r4, #1
 800f35c:	9305      	str	r3, [sp, #20]
 800f35e:	4619      	mov	r1, r3
 800f360:	f04f 0c0a 	mov.w	ip, #10
 800f364:	4620      	mov	r0, r4
 800f366:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f36a:	3a30      	subs	r2, #48	; 0x30
 800f36c:	2a09      	cmp	r2, #9
 800f36e:	d903      	bls.n	800f378 <_vfiprintf_r+0x1d0>
 800f370:	2b00      	cmp	r3, #0
 800f372:	d0c6      	beq.n	800f302 <_vfiprintf_r+0x15a>
 800f374:	9105      	str	r1, [sp, #20]
 800f376:	e7c4      	b.n	800f302 <_vfiprintf_r+0x15a>
 800f378:	fb0c 2101 	mla	r1, ip, r1, r2
 800f37c:	4604      	mov	r4, r0
 800f37e:	2301      	movs	r3, #1
 800f380:	e7f0      	b.n	800f364 <_vfiprintf_r+0x1bc>
 800f382:	ab03      	add	r3, sp, #12
 800f384:	9300      	str	r3, [sp, #0]
 800f386:	462a      	mov	r2, r5
 800f388:	4b12      	ldr	r3, [pc, #72]	; (800f3d4 <_vfiprintf_r+0x22c>)
 800f38a:	a904      	add	r1, sp, #16
 800f38c:	4630      	mov	r0, r6
 800f38e:	f7fd fceb 	bl	800cd68 <_printf_float>
 800f392:	4607      	mov	r7, r0
 800f394:	1c78      	adds	r0, r7, #1
 800f396:	d1d6      	bne.n	800f346 <_vfiprintf_r+0x19e>
 800f398:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f39a:	07d9      	lsls	r1, r3, #31
 800f39c:	d405      	bmi.n	800f3aa <_vfiprintf_r+0x202>
 800f39e:	89ab      	ldrh	r3, [r5, #12]
 800f3a0:	059a      	lsls	r2, r3, #22
 800f3a2:	d402      	bmi.n	800f3aa <_vfiprintf_r+0x202>
 800f3a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f3a6:	f7fe fa3d 	bl	800d824 <__retarget_lock_release_recursive>
 800f3aa:	89ab      	ldrh	r3, [r5, #12]
 800f3ac:	065b      	lsls	r3, r3, #25
 800f3ae:	f53f af1d 	bmi.w	800f1ec <_vfiprintf_r+0x44>
 800f3b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f3b4:	e71c      	b.n	800f1f0 <_vfiprintf_r+0x48>
 800f3b6:	ab03      	add	r3, sp, #12
 800f3b8:	9300      	str	r3, [sp, #0]
 800f3ba:	462a      	mov	r2, r5
 800f3bc:	4b05      	ldr	r3, [pc, #20]	; (800f3d4 <_vfiprintf_r+0x22c>)
 800f3be:	a904      	add	r1, sp, #16
 800f3c0:	4630      	mov	r0, r6
 800f3c2:	f7fd ff59 	bl	800d278 <_printf_i>
 800f3c6:	e7e4      	b.n	800f392 <_vfiprintf_r+0x1ea>
 800f3c8:	0800f97c 	.word	0x0800f97c
 800f3cc:	0800f986 	.word	0x0800f986
 800f3d0:	0800cd69 	.word	0x0800cd69
 800f3d4:	0800f185 	.word	0x0800f185
 800f3d8:	0800f982 	.word	0x0800f982

0800f3dc <__swbuf_r>:
 800f3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3de:	460e      	mov	r6, r1
 800f3e0:	4614      	mov	r4, r2
 800f3e2:	4605      	mov	r5, r0
 800f3e4:	b118      	cbz	r0, 800f3ee <__swbuf_r+0x12>
 800f3e6:	6a03      	ldr	r3, [r0, #32]
 800f3e8:	b90b      	cbnz	r3, 800f3ee <__swbuf_r+0x12>
 800f3ea:	f7fe f8f3 	bl	800d5d4 <__sinit>
 800f3ee:	69a3      	ldr	r3, [r4, #24]
 800f3f0:	60a3      	str	r3, [r4, #8]
 800f3f2:	89a3      	ldrh	r3, [r4, #12]
 800f3f4:	071a      	lsls	r2, r3, #28
 800f3f6:	d525      	bpl.n	800f444 <__swbuf_r+0x68>
 800f3f8:	6923      	ldr	r3, [r4, #16]
 800f3fa:	b31b      	cbz	r3, 800f444 <__swbuf_r+0x68>
 800f3fc:	6823      	ldr	r3, [r4, #0]
 800f3fe:	6922      	ldr	r2, [r4, #16]
 800f400:	1a98      	subs	r0, r3, r2
 800f402:	6963      	ldr	r3, [r4, #20]
 800f404:	b2f6      	uxtb	r6, r6
 800f406:	4283      	cmp	r3, r0
 800f408:	4637      	mov	r7, r6
 800f40a:	dc04      	bgt.n	800f416 <__swbuf_r+0x3a>
 800f40c:	4621      	mov	r1, r4
 800f40e:	4628      	mov	r0, r5
 800f410:	f7ff fdbc 	bl	800ef8c <_fflush_r>
 800f414:	b9e0      	cbnz	r0, 800f450 <__swbuf_r+0x74>
 800f416:	68a3      	ldr	r3, [r4, #8]
 800f418:	3b01      	subs	r3, #1
 800f41a:	60a3      	str	r3, [r4, #8]
 800f41c:	6823      	ldr	r3, [r4, #0]
 800f41e:	1c5a      	adds	r2, r3, #1
 800f420:	6022      	str	r2, [r4, #0]
 800f422:	701e      	strb	r6, [r3, #0]
 800f424:	6962      	ldr	r2, [r4, #20]
 800f426:	1c43      	adds	r3, r0, #1
 800f428:	429a      	cmp	r2, r3
 800f42a:	d004      	beq.n	800f436 <__swbuf_r+0x5a>
 800f42c:	89a3      	ldrh	r3, [r4, #12]
 800f42e:	07db      	lsls	r3, r3, #31
 800f430:	d506      	bpl.n	800f440 <__swbuf_r+0x64>
 800f432:	2e0a      	cmp	r6, #10
 800f434:	d104      	bne.n	800f440 <__swbuf_r+0x64>
 800f436:	4621      	mov	r1, r4
 800f438:	4628      	mov	r0, r5
 800f43a:	f7ff fda7 	bl	800ef8c <_fflush_r>
 800f43e:	b938      	cbnz	r0, 800f450 <__swbuf_r+0x74>
 800f440:	4638      	mov	r0, r7
 800f442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f444:	4621      	mov	r1, r4
 800f446:	4628      	mov	r0, r5
 800f448:	f000 f806 	bl	800f458 <__swsetup_r>
 800f44c:	2800      	cmp	r0, #0
 800f44e:	d0d5      	beq.n	800f3fc <__swbuf_r+0x20>
 800f450:	f04f 37ff 	mov.w	r7, #4294967295
 800f454:	e7f4      	b.n	800f440 <__swbuf_r+0x64>
	...

0800f458 <__swsetup_r>:
 800f458:	b538      	push	{r3, r4, r5, lr}
 800f45a:	4b2a      	ldr	r3, [pc, #168]	; (800f504 <__swsetup_r+0xac>)
 800f45c:	4605      	mov	r5, r0
 800f45e:	6818      	ldr	r0, [r3, #0]
 800f460:	460c      	mov	r4, r1
 800f462:	b118      	cbz	r0, 800f46c <__swsetup_r+0x14>
 800f464:	6a03      	ldr	r3, [r0, #32]
 800f466:	b90b      	cbnz	r3, 800f46c <__swsetup_r+0x14>
 800f468:	f7fe f8b4 	bl	800d5d4 <__sinit>
 800f46c:	89a3      	ldrh	r3, [r4, #12]
 800f46e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f472:	0718      	lsls	r0, r3, #28
 800f474:	d422      	bmi.n	800f4bc <__swsetup_r+0x64>
 800f476:	06d9      	lsls	r1, r3, #27
 800f478:	d407      	bmi.n	800f48a <__swsetup_r+0x32>
 800f47a:	2309      	movs	r3, #9
 800f47c:	602b      	str	r3, [r5, #0]
 800f47e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f482:	81a3      	strh	r3, [r4, #12]
 800f484:	f04f 30ff 	mov.w	r0, #4294967295
 800f488:	e034      	b.n	800f4f4 <__swsetup_r+0x9c>
 800f48a:	0758      	lsls	r0, r3, #29
 800f48c:	d512      	bpl.n	800f4b4 <__swsetup_r+0x5c>
 800f48e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f490:	b141      	cbz	r1, 800f4a4 <__swsetup_r+0x4c>
 800f492:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f496:	4299      	cmp	r1, r3
 800f498:	d002      	beq.n	800f4a0 <__swsetup_r+0x48>
 800f49a:	4628      	mov	r0, r5
 800f49c:	f7fe ffd0 	bl	800e440 <_free_r>
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	6363      	str	r3, [r4, #52]	; 0x34
 800f4a4:	89a3      	ldrh	r3, [r4, #12]
 800f4a6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f4aa:	81a3      	strh	r3, [r4, #12]
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	6063      	str	r3, [r4, #4]
 800f4b0:	6923      	ldr	r3, [r4, #16]
 800f4b2:	6023      	str	r3, [r4, #0]
 800f4b4:	89a3      	ldrh	r3, [r4, #12]
 800f4b6:	f043 0308 	orr.w	r3, r3, #8
 800f4ba:	81a3      	strh	r3, [r4, #12]
 800f4bc:	6923      	ldr	r3, [r4, #16]
 800f4be:	b94b      	cbnz	r3, 800f4d4 <__swsetup_r+0x7c>
 800f4c0:	89a3      	ldrh	r3, [r4, #12]
 800f4c2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f4c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f4ca:	d003      	beq.n	800f4d4 <__swsetup_r+0x7c>
 800f4cc:	4621      	mov	r1, r4
 800f4ce:	4628      	mov	r0, r5
 800f4d0:	f000 f884 	bl	800f5dc <__smakebuf_r>
 800f4d4:	89a0      	ldrh	r0, [r4, #12]
 800f4d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f4da:	f010 0301 	ands.w	r3, r0, #1
 800f4de:	d00a      	beq.n	800f4f6 <__swsetup_r+0x9e>
 800f4e0:	2300      	movs	r3, #0
 800f4e2:	60a3      	str	r3, [r4, #8]
 800f4e4:	6963      	ldr	r3, [r4, #20]
 800f4e6:	425b      	negs	r3, r3
 800f4e8:	61a3      	str	r3, [r4, #24]
 800f4ea:	6923      	ldr	r3, [r4, #16]
 800f4ec:	b943      	cbnz	r3, 800f500 <__swsetup_r+0xa8>
 800f4ee:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f4f2:	d1c4      	bne.n	800f47e <__swsetup_r+0x26>
 800f4f4:	bd38      	pop	{r3, r4, r5, pc}
 800f4f6:	0781      	lsls	r1, r0, #30
 800f4f8:	bf58      	it	pl
 800f4fa:	6963      	ldrpl	r3, [r4, #20]
 800f4fc:	60a3      	str	r3, [r4, #8]
 800f4fe:	e7f4      	b.n	800f4ea <__swsetup_r+0x92>
 800f500:	2000      	movs	r0, #0
 800f502:	e7f7      	b.n	800f4f4 <__swsetup_r+0x9c>
 800f504:	2400019c 	.word	0x2400019c

0800f508 <_raise_r>:
 800f508:	291f      	cmp	r1, #31
 800f50a:	b538      	push	{r3, r4, r5, lr}
 800f50c:	4604      	mov	r4, r0
 800f50e:	460d      	mov	r5, r1
 800f510:	d904      	bls.n	800f51c <_raise_r+0x14>
 800f512:	2316      	movs	r3, #22
 800f514:	6003      	str	r3, [r0, #0]
 800f516:	f04f 30ff 	mov.w	r0, #4294967295
 800f51a:	bd38      	pop	{r3, r4, r5, pc}
 800f51c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f51e:	b112      	cbz	r2, 800f526 <_raise_r+0x1e>
 800f520:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f524:	b94b      	cbnz	r3, 800f53a <_raise_r+0x32>
 800f526:	4620      	mov	r0, r4
 800f528:	f000 f830 	bl	800f58c <_getpid_r>
 800f52c:	462a      	mov	r2, r5
 800f52e:	4601      	mov	r1, r0
 800f530:	4620      	mov	r0, r4
 800f532:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f536:	f000 b817 	b.w	800f568 <_kill_r>
 800f53a:	2b01      	cmp	r3, #1
 800f53c:	d00a      	beq.n	800f554 <_raise_r+0x4c>
 800f53e:	1c59      	adds	r1, r3, #1
 800f540:	d103      	bne.n	800f54a <_raise_r+0x42>
 800f542:	2316      	movs	r3, #22
 800f544:	6003      	str	r3, [r0, #0]
 800f546:	2001      	movs	r0, #1
 800f548:	e7e7      	b.n	800f51a <_raise_r+0x12>
 800f54a:	2400      	movs	r4, #0
 800f54c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f550:	4628      	mov	r0, r5
 800f552:	4798      	blx	r3
 800f554:	2000      	movs	r0, #0
 800f556:	e7e0      	b.n	800f51a <_raise_r+0x12>

0800f558 <raise>:
 800f558:	4b02      	ldr	r3, [pc, #8]	; (800f564 <raise+0xc>)
 800f55a:	4601      	mov	r1, r0
 800f55c:	6818      	ldr	r0, [r3, #0]
 800f55e:	f7ff bfd3 	b.w	800f508 <_raise_r>
 800f562:	bf00      	nop
 800f564:	2400019c 	.word	0x2400019c

0800f568 <_kill_r>:
 800f568:	b538      	push	{r3, r4, r5, lr}
 800f56a:	4d07      	ldr	r5, [pc, #28]	; (800f588 <_kill_r+0x20>)
 800f56c:	2300      	movs	r3, #0
 800f56e:	4604      	mov	r4, r0
 800f570:	4608      	mov	r0, r1
 800f572:	4611      	mov	r1, r2
 800f574:	602b      	str	r3, [r5, #0]
 800f576:	f7f2 fcb9 	bl	8001eec <_kill>
 800f57a:	1c43      	adds	r3, r0, #1
 800f57c:	d102      	bne.n	800f584 <_kill_r+0x1c>
 800f57e:	682b      	ldr	r3, [r5, #0]
 800f580:	b103      	cbz	r3, 800f584 <_kill_r+0x1c>
 800f582:	6023      	str	r3, [r4, #0]
 800f584:	bd38      	pop	{r3, r4, r5, pc}
 800f586:	bf00      	nop
 800f588:	24010f48 	.word	0x24010f48

0800f58c <_getpid_r>:
 800f58c:	f7f2 bca6 	b.w	8001edc <_getpid>

0800f590 <__swhatbuf_r>:
 800f590:	b570      	push	{r4, r5, r6, lr}
 800f592:	460c      	mov	r4, r1
 800f594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f598:	2900      	cmp	r1, #0
 800f59a:	b096      	sub	sp, #88	; 0x58
 800f59c:	4615      	mov	r5, r2
 800f59e:	461e      	mov	r6, r3
 800f5a0:	da0d      	bge.n	800f5be <__swhatbuf_r+0x2e>
 800f5a2:	89a3      	ldrh	r3, [r4, #12]
 800f5a4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f5a8:	f04f 0100 	mov.w	r1, #0
 800f5ac:	bf0c      	ite	eq
 800f5ae:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f5b2:	2340      	movne	r3, #64	; 0x40
 800f5b4:	2000      	movs	r0, #0
 800f5b6:	6031      	str	r1, [r6, #0]
 800f5b8:	602b      	str	r3, [r5, #0]
 800f5ba:	b016      	add	sp, #88	; 0x58
 800f5bc:	bd70      	pop	{r4, r5, r6, pc}
 800f5be:	466a      	mov	r2, sp
 800f5c0:	f000 f848 	bl	800f654 <_fstat_r>
 800f5c4:	2800      	cmp	r0, #0
 800f5c6:	dbec      	blt.n	800f5a2 <__swhatbuf_r+0x12>
 800f5c8:	9901      	ldr	r1, [sp, #4]
 800f5ca:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f5ce:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f5d2:	4259      	negs	r1, r3
 800f5d4:	4159      	adcs	r1, r3
 800f5d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f5da:	e7eb      	b.n	800f5b4 <__swhatbuf_r+0x24>

0800f5dc <__smakebuf_r>:
 800f5dc:	898b      	ldrh	r3, [r1, #12]
 800f5de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f5e0:	079d      	lsls	r5, r3, #30
 800f5e2:	4606      	mov	r6, r0
 800f5e4:	460c      	mov	r4, r1
 800f5e6:	d507      	bpl.n	800f5f8 <__smakebuf_r+0x1c>
 800f5e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f5ec:	6023      	str	r3, [r4, #0]
 800f5ee:	6123      	str	r3, [r4, #16]
 800f5f0:	2301      	movs	r3, #1
 800f5f2:	6163      	str	r3, [r4, #20]
 800f5f4:	b002      	add	sp, #8
 800f5f6:	bd70      	pop	{r4, r5, r6, pc}
 800f5f8:	ab01      	add	r3, sp, #4
 800f5fa:	466a      	mov	r2, sp
 800f5fc:	f7ff ffc8 	bl	800f590 <__swhatbuf_r>
 800f600:	9900      	ldr	r1, [sp, #0]
 800f602:	4605      	mov	r5, r0
 800f604:	4630      	mov	r0, r6
 800f606:	f7fd fa91 	bl	800cb2c <_malloc_r>
 800f60a:	b948      	cbnz	r0, 800f620 <__smakebuf_r+0x44>
 800f60c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f610:	059a      	lsls	r2, r3, #22
 800f612:	d4ef      	bmi.n	800f5f4 <__smakebuf_r+0x18>
 800f614:	f023 0303 	bic.w	r3, r3, #3
 800f618:	f043 0302 	orr.w	r3, r3, #2
 800f61c:	81a3      	strh	r3, [r4, #12]
 800f61e:	e7e3      	b.n	800f5e8 <__smakebuf_r+0xc>
 800f620:	89a3      	ldrh	r3, [r4, #12]
 800f622:	6020      	str	r0, [r4, #0]
 800f624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f628:	81a3      	strh	r3, [r4, #12]
 800f62a:	9b00      	ldr	r3, [sp, #0]
 800f62c:	6163      	str	r3, [r4, #20]
 800f62e:	9b01      	ldr	r3, [sp, #4]
 800f630:	6120      	str	r0, [r4, #16]
 800f632:	b15b      	cbz	r3, 800f64c <__smakebuf_r+0x70>
 800f634:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f638:	4630      	mov	r0, r6
 800f63a:	f000 f81d 	bl	800f678 <_isatty_r>
 800f63e:	b128      	cbz	r0, 800f64c <__smakebuf_r+0x70>
 800f640:	89a3      	ldrh	r3, [r4, #12]
 800f642:	f023 0303 	bic.w	r3, r3, #3
 800f646:	f043 0301 	orr.w	r3, r3, #1
 800f64a:	81a3      	strh	r3, [r4, #12]
 800f64c:	89a3      	ldrh	r3, [r4, #12]
 800f64e:	431d      	orrs	r5, r3
 800f650:	81a5      	strh	r5, [r4, #12]
 800f652:	e7cf      	b.n	800f5f4 <__smakebuf_r+0x18>

0800f654 <_fstat_r>:
 800f654:	b538      	push	{r3, r4, r5, lr}
 800f656:	4d07      	ldr	r5, [pc, #28]	; (800f674 <_fstat_r+0x20>)
 800f658:	2300      	movs	r3, #0
 800f65a:	4604      	mov	r4, r0
 800f65c:	4608      	mov	r0, r1
 800f65e:	4611      	mov	r1, r2
 800f660:	602b      	str	r3, [r5, #0]
 800f662:	f7f2 fca2 	bl	8001faa <_fstat>
 800f666:	1c43      	adds	r3, r0, #1
 800f668:	d102      	bne.n	800f670 <_fstat_r+0x1c>
 800f66a:	682b      	ldr	r3, [r5, #0]
 800f66c:	b103      	cbz	r3, 800f670 <_fstat_r+0x1c>
 800f66e:	6023      	str	r3, [r4, #0]
 800f670:	bd38      	pop	{r3, r4, r5, pc}
 800f672:	bf00      	nop
 800f674:	24010f48 	.word	0x24010f48

0800f678 <_isatty_r>:
 800f678:	b538      	push	{r3, r4, r5, lr}
 800f67a:	4d06      	ldr	r5, [pc, #24]	; (800f694 <_isatty_r+0x1c>)
 800f67c:	2300      	movs	r3, #0
 800f67e:	4604      	mov	r4, r0
 800f680:	4608      	mov	r0, r1
 800f682:	602b      	str	r3, [r5, #0]
 800f684:	f7f2 fca1 	bl	8001fca <_isatty>
 800f688:	1c43      	adds	r3, r0, #1
 800f68a:	d102      	bne.n	800f692 <_isatty_r+0x1a>
 800f68c:	682b      	ldr	r3, [r5, #0]
 800f68e:	b103      	cbz	r3, 800f692 <_isatty_r+0x1a>
 800f690:	6023      	str	r3, [r4, #0]
 800f692:	bd38      	pop	{r3, r4, r5, pc}
 800f694:	24010f48 	.word	0x24010f48

0800f698 <_init>:
 800f698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f69a:	bf00      	nop
 800f69c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f69e:	bc08      	pop	{r3}
 800f6a0:	469e      	mov	lr, r3
 800f6a2:	4770      	bx	lr

0800f6a4 <_fini>:
 800f6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6a6:	bf00      	nop
 800f6a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f6aa:	bc08      	pop	{r3}
 800f6ac:	469e      	mov	lr, r3
 800f6ae:	4770      	bx	lr
