
H750_Signalanalyzer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e514  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  0800e7b8  0800e7b8  0001e7b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800ebac  0800ebac  0001ebac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800ebb0  0800ebb0  0001ebb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000030c  24000000  0800ebb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001f68  2400030c  0800eec0  0002030c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24002274  0800eec0  00022274  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002030c  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002033a  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018eb0  00000000  00000000  0002037d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003c21  00000000  00000000  0003922d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000013f0  00000000  00000000  0003ce50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000eeb  00000000  00000000  0003e240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b700  00000000  00000000  0003f12b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00019d34  00000000  00000000  0007a82b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016b3bc  00000000  00000000  0009455f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000061e0  00000000  00000000  001ff91c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000004b  00000000  00000000  00205afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400030c 	.word	0x2400030c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800e79c 	.word	0x0800e79c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000310 	.word	0x24000310
 80002dc:	0800e79c 	.word	0x0800e79c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <CubeM_DefChNamesInit>:
uint8_t EOLlen = 0;

uint8_t channelnames[CUBEMONMAXSIGNALS][CUBEMONSMALLBUFSIZE];
uint8_t chnamelen[CUBEMONMAXSIGNALS];

void CubeM_DefChNamesInit() {
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
	for(uint8_t i=0; i<CUBEMONMAXSIGNALS; i++) {
 8000396:	2300      	movs	r3, #0
 8000398:	71fb      	strb	r3, [r7, #7]
 800039a:	e01d      	b.n	80003d8 <CubeM_DefChNamesInit+0x48>
		sprintf((char*)channelnames[i], "Ch%d", i);
 800039c:	79fa      	ldrb	r2, [r7, #7]
 800039e:	4613      	mov	r3, r2
 80003a0:	009b      	lsls	r3, r3, #2
 80003a2:	4413      	add	r3, r2
 80003a4:	009b      	lsls	r3, r3, #2
 80003a6:	4a10      	ldr	r2, [pc, #64]	; (80003e8 <CubeM_DefChNamesInit+0x58>)
 80003a8:	4413      	add	r3, r2
 80003aa:	79fa      	ldrb	r2, [r7, #7]
 80003ac:	490f      	ldr	r1, [pc, #60]	; (80003ec <CubeM_DefChNamesInit+0x5c>)
 80003ae:	4618      	mov	r0, r3
 80003b0:	f00c f9ca 	bl	800c748 <siprintf>
		chnamelen[i] = strlen((char*)channelnames[i]);
 80003b4:	79fa      	ldrb	r2, [r7, #7]
 80003b6:	4613      	mov	r3, r2
 80003b8:	009b      	lsls	r3, r3, #2
 80003ba:	4413      	add	r3, r2
 80003bc:	009b      	lsls	r3, r3, #2
 80003be:	4a0a      	ldr	r2, [pc, #40]	; (80003e8 <CubeM_DefChNamesInit+0x58>)
 80003c0:	4413      	add	r3, r2
 80003c2:	4618      	mov	r0, r3
 80003c4:	f7ff ffdc 	bl	8000380 <strlen>
 80003c8:	4602      	mov	r2, r0
 80003ca:	79fb      	ldrb	r3, [r7, #7]
 80003cc:	b2d1      	uxtb	r1, r2
 80003ce:	4a08      	ldr	r2, [pc, #32]	; (80003f0 <CubeM_DefChNamesInit+0x60>)
 80003d0:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0; i<CUBEMONMAXSIGNALS; i++) {
 80003d2:	79fb      	ldrb	r3, [r7, #7]
 80003d4:	3301      	adds	r3, #1
 80003d6:	71fb      	strb	r3, [r7, #7]
 80003d8:	79fb      	ldrb	r3, [r7, #7]
 80003da:	2b07      	cmp	r3, #7
 80003dc:	d9de      	bls.n	800039c <CubeM_DefChNamesInit+0xc>
	}
}
 80003de:	bf00      	nop
 80003e0:	bf00      	nop
 80003e2:	3708      	adds	r7, #8
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	2400033c 	.word	0x2400033c
 80003ec:	0800e7b8 	.word	0x0800e7b8
 80003f0:	240003dc 	.word	0x240003dc

080003f4 <CubeM_getStrLengths>:

void CubeM_getStrLengths() {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
	dellen = strlen((char*)delimiter);
 80003f8:	480b      	ldr	r0, [pc, #44]	; (8000428 <CubeM_getStrLengths+0x34>)
 80003fa:	f7ff ffc1 	bl	8000380 <strlen>
 80003fe:	4603      	mov	r3, r0
 8000400:	b2da      	uxtb	r2, r3
 8000402:	4b0a      	ldr	r3, [pc, #40]	; (800042c <CubeM_getStrLengths+0x38>)
 8000404:	701a      	strb	r2, [r3, #0]
	conlen = strlen((char*)connector);
 8000406:	480a      	ldr	r0, [pc, #40]	; (8000430 <CubeM_getStrLengths+0x3c>)
 8000408:	f7ff ffba 	bl	8000380 <strlen>
 800040c:	4603      	mov	r3, r0
 800040e:	b2da      	uxtb	r2, r3
 8000410:	4b08      	ldr	r3, [pc, #32]	; (8000434 <CubeM_getStrLengths+0x40>)
 8000412:	701a      	strb	r2, [r3, #0]
	EOLlen = strlen((char*)EOL);
 8000414:	4808      	ldr	r0, [pc, #32]	; (8000438 <CubeM_getStrLengths+0x44>)
 8000416:	f7ff ffb3 	bl	8000380 <strlen>
 800041a:	4603      	mov	r3, r0
 800041c:	b2da      	uxtb	r2, r3
 800041e:	4b07      	ldr	r3, [pc, #28]	; (800043c <CubeM_getStrLengths+0x48>)
 8000420:	701a      	strb	r2, [r3, #0]
}
 8000422:	bf00      	nop
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	24000004 	.word	0x24000004
 800042c:	24000338 	.word	0x24000338
 8000430:	24000018 	.word	0x24000018
 8000434:	24000339 	.word	0x24000339
 8000438:	2400002c 	.word	0x2400002c
 800043c:	2400033a 	.word	0x2400033a

08000440 <CubeM_Init>:
	isInit = 1;

	return tempsize;
}

uint32_t CubeM_Init(uint32_t bufsize) {
 8000440:	b580      	push	{r7, lr}
 8000442:	b084      	sub	sp, #16
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
	CubeM_DefChNamesInit();
 8000448:	f7ff ffa2 	bl	8000390 <CubeM_DefChNamesInit>

	uint32_t tempsize = CubeM_setBufferSize(bufsize);
 800044c:	6878      	ldr	r0, [r7, #4]
 800044e:	f000 f819 	bl	8000484 <CubeM_setBufferSize>
 8000452:	60f8      	str	r0, [r7, #12]

	if(tempsize == 0 || tempsize!=bufsize) {
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	2b00      	cmp	r3, #0
 8000458:	d003      	beq.n	8000462 <CubeM_Init+0x22>
 800045a:	68fa      	ldr	r2, [r7, #12]
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	429a      	cmp	r2, r3
 8000460:	d003      	beq.n	800046a <CubeM_Init+0x2a>
		tempsize = CubeM_setBufferSize(50);
 8000462:	2032      	movs	r0, #50	; 0x32
 8000464:	f000 f80e 	bl	8000484 <CubeM_setBufferSize>
 8000468:	60f8      	str	r0, [r7, #12]
	}

	CubeM_getStrLengths();
 800046a:	f7ff ffc3 	bl	80003f4 <CubeM_getStrLengths>
	isInit = 1;
 800046e:	4b04      	ldr	r3, [pc, #16]	; (8000480 <CubeM_Init+0x40>)
 8000470:	2201      	movs	r2, #1
 8000472:	701a      	strb	r2, [r3, #0]

	return tempsize;
 8000474:	68fb      	ldr	r3, [r7, #12]
}
 8000476:	4618      	mov	r0, r3
 8000478:	3710      	adds	r7, #16
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	24000328 	.word	0x24000328

08000484 <CubeM_setBufferSize>:
//Currently not used
void CubeM_setUART() {

}

uint32_t CubeM_setBufferSize(uint32_t sizeb) {
 8000484:	b580      	push	{r7, lr}
 8000486:	b084      	sub	sp, #16
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
	if(sizeb != buffersize) {
 800048c:	4b13      	ldr	r3, [pc, #76]	; (80004dc <CubeM_setBufferSize+0x58>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	687a      	ldr	r2, [r7, #4]
 8000492:	429a      	cmp	r2, r3
 8000494:	d01c      	beq.n	80004d0 <CubeM_setBufferSize+0x4c>
		uint8_t *temppointer = malloc(sizeb);
 8000496:	6878      	ldr	r0, [r7, #4]
 8000498:	f00b fb9c 	bl	800bbd4 <malloc>
 800049c:	4603      	mov	r3, r0
 800049e:	60fb      	str	r3, [r7, #12]
		if(temppointer != NULL) {
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d014      	beq.n	80004d0 <CubeM_setBufferSize+0x4c>
			free(buffer);
 80004a6:	4b0e      	ldr	r3, [pc, #56]	; (80004e0 <CubeM_setBufferSize+0x5c>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4618      	mov	r0, r3
 80004ac:	f00b fb9a 	bl	800bbe4 <free>
			buffer = temppointer;
 80004b0:	4a0b      	ldr	r2, [pc, #44]	; (80004e0 <CubeM_setBufferSize+0x5c>)
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	6013      	str	r3, [r2, #0]
			buffer[0] = '\0';
 80004b6:	4b0a      	ldr	r3, [pc, #40]	; (80004e0 <CubeM_setBufferSize+0x5c>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	2200      	movs	r2, #0
 80004bc:	701a      	strb	r2, [r3, #0]

			buffersize = sizeb;
 80004be:	4a07      	ldr	r2, [pc, #28]	; (80004dc <CubeM_setBufferSize+0x58>)
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	6013      	str	r3, [r2, #0]
			emptybuffer = 1;
 80004c4:	4b07      	ldr	r3, [pc, #28]	; (80004e4 <CubeM_setBufferSize+0x60>)
 80004c6:	2201      	movs	r2, #1
 80004c8:	701a      	strb	r2, [r3, #0]
			usedbuffer = 0;
 80004ca:	4b07      	ldr	r3, [pc, #28]	; (80004e8 <CubeM_setBufferSize+0x64>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
		}
	}
	return buffersize;
 80004d0:	4b02      	ldr	r3, [pc, #8]	; (80004dc <CubeM_setBufferSize+0x58>)
 80004d2:	681b      	ldr	r3, [r3, #0]
}
 80004d4:	4618      	mov	r0, r3
 80004d6:	3710      	adds	r7, #16
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	2400032c 	.word	0x2400032c
 80004e0:	24000334 	.word	0x24000334
 80004e4:	24000000 	.word	0x24000000
 80004e8:	24000330 	.word	0x24000330

080004ec <CubeM_setChannelname>:

uint8_t CubeM_setChannelname(uint8_t channel, uint8_t *newname) {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	6039      	str	r1, [r7, #0]
 80004f6:	71fb      	strb	r3, [r7, #7]
	uint32_t templen = strlen((char*)newname);
 80004f8:	6838      	ldr	r0, [r7, #0]
 80004fa:	f7ff ff41 	bl	8000380 <strlen>
 80004fe:	60f8      	str	r0, [r7, #12]
	if((templen < CUBEMONSMALLBUFSIZE && templen > 0) && (channel >= 0 && channel < CUBEMONMAXSIGNALS)) {
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	2b13      	cmp	r3, #19
 8000504:	d821      	bhi.n	800054a <CubeM_setChannelname+0x5e>
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d01e      	beq.n	800054a <CubeM_setChannelname+0x5e>
 800050c:	79fb      	ldrb	r3, [r7, #7]
 800050e:	2b07      	cmp	r3, #7
 8000510:	d81b      	bhi.n	800054a <CubeM_setChannelname+0x5e>
		strcpy((char*)channelnames[channel], (char*)newname);
 8000512:	79fa      	ldrb	r2, [r7, #7]
 8000514:	4613      	mov	r3, r2
 8000516:	009b      	lsls	r3, r3, #2
 8000518:	4413      	add	r3, r2
 800051a:	009b      	lsls	r3, r3, #2
 800051c:	4a0d      	ldr	r2, [pc, #52]	; (8000554 <CubeM_setChannelname+0x68>)
 800051e:	4413      	add	r3, r2
 8000520:	6839      	ldr	r1, [r7, #0]
 8000522:	4618      	mov	r0, r3
 8000524:	f00c fa03 	bl	800c92e <strcpy>
		chnamelen[channel] = strlen((char*)channelnames[channel]);
 8000528:	79fa      	ldrb	r2, [r7, #7]
 800052a:	4613      	mov	r3, r2
 800052c:	009b      	lsls	r3, r3, #2
 800052e:	4413      	add	r3, r2
 8000530:	009b      	lsls	r3, r3, #2
 8000532:	4a08      	ldr	r2, [pc, #32]	; (8000554 <CubeM_setChannelname+0x68>)
 8000534:	4413      	add	r3, r2
 8000536:	4618      	mov	r0, r3
 8000538:	f7ff ff22 	bl	8000380 <strlen>
 800053c:	4602      	mov	r2, r0
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	b2d1      	uxtb	r1, r2
 8000542:	4a05      	ldr	r2, [pc, #20]	; (8000558 <CubeM_setChannelname+0x6c>)
 8000544:	54d1      	strb	r1, [r2, r3]

		return 0;
 8000546:	2300      	movs	r3, #0
 8000548:	e000      	b.n	800054c <CubeM_setChannelname+0x60>
	}
	return 1;
 800054a:	2301      	movs	r3, #1
}
 800054c:	4618      	mov	r0, r3
 800054e:	3710      	adds	r7, #16
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	2400033c 	.word	0x2400033c
 8000558:	240003dc 	.word	0x240003dc

0800055c <CubeM_attendUIntValue>:
//		}
//	}
//	return 1;
//}

uint8_t CubeM_attendUIntValue(uint8_t channel, uint32_t value) {
 800055c:	b580      	push	{r7, lr}
 800055e:	b09a      	sub	sp, #104	; 0x68
 8000560:	af02      	add	r7, sp, #8
 8000562:	4603      	mov	r3, r0
 8000564:	6039      	str	r1, [r7, #0]
 8000566:	71fb      	strb	r3, [r7, #7]
	if(channel >= 0 && channel < CUBEMONMAXSIGNALS) {
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	2b07      	cmp	r3, #7
 800056c:	d844      	bhi.n	80005f8 <CubeM_attendUIntValue+0x9c>
		char tempstring[CUBEMONSMALLBUFSIZE*4];

		uint32_t tempsize;
		sprintf(tempstring, "%s%s%s%ld", delimiter, channelnames[channel], connector, value);
 800056e:	79fa      	ldrb	r2, [r7, #7]
 8000570:	4613      	mov	r3, r2
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	4413      	add	r3, r2
 8000576:	009b      	lsls	r3, r3, #2
 8000578:	4a22      	ldr	r2, [pc, #136]	; (8000604 <CubeM_attendUIntValue+0xa8>)
 800057a:	441a      	add	r2, r3
 800057c:	f107 000c 	add.w	r0, r7, #12
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	9301      	str	r3, [sp, #4]
 8000584:	4b20      	ldr	r3, [pc, #128]	; (8000608 <CubeM_attendUIntValue+0xac>)
 8000586:	9300      	str	r3, [sp, #0]
 8000588:	4613      	mov	r3, r2
 800058a:	4a20      	ldr	r2, [pc, #128]	; (800060c <CubeM_attendUIntValue+0xb0>)
 800058c:	4920      	ldr	r1, [pc, #128]	; (8000610 <CubeM_attendUIntValue+0xb4>)
 800058e:	f00c f8db 	bl	800c748 <siprintf>
		tempsize = usedbuffer + strlen((char*)tempstring) - (emptybuffer * dellen);
 8000592:	f107 030c 	add.w	r3, r7, #12
 8000596:	4618      	mov	r0, r3
 8000598:	f7ff fef2 	bl	8000380 <strlen>
 800059c:	4602      	mov	r2, r0
 800059e:	4b1d      	ldr	r3, [pc, #116]	; (8000614 <CubeM_attendUIntValue+0xb8>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4413      	add	r3, r2
 80005a4:	4a1c      	ldr	r2, [pc, #112]	; (8000618 <CubeM_attendUIntValue+0xbc>)
 80005a6:	7812      	ldrb	r2, [r2, #0]
 80005a8:	4611      	mov	r1, r2
 80005aa:	4a1c      	ldr	r2, [pc, #112]	; (800061c <CubeM_attendUIntValue+0xc0>)
 80005ac:	7812      	ldrb	r2, [r2, #0]
 80005ae:	fb01 f202 	mul.w	r2, r1, r2
 80005b2:	1a9b      	subs	r3, r3, r2
 80005b4:	65fb      	str	r3, [r7, #92]	; 0x5c

		if(tempsize < buffersize) {
 80005b6:	4b1a      	ldr	r3, [pc, #104]	; (8000620 <CubeM_attendUIntValue+0xc4>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80005bc:	429a      	cmp	r2, r3
 80005be:	d21b      	bcs.n	80005f8 <CubeM_attendUIntValue+0x9c>
			strcpy((char*)(buffer + (usedbuffer)), (char*)(tempstring + (emptybuffer * dellen)));
 80005c0:	4b18      	ldr	r3, [pc, #96]	; (8000624 <CubeM_attendUIntValue+0xc8>)
 80005c2:	681a      	ldr	r2, [r3, #0]
 80005c4:	4b13      	ldr	r3, [pc, #76]	; (8000614 <CubeM_attendUIntValue+0xb8>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	441a      	add	r2, r3
 80005ca:	4b13      	ldr	r3, [pc, #76]	; (8000618 <CubeM_attendUIntValue+0xbc>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	4619      	mov	r1, r3
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <CubeM_attendUIntValue+0xc0>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	fb01 f303 	mul.w	r3, r1, r3
 80005d8:	4619      	mov	r1, r3
 80005da:	f107 030c 	add.w	r3, r7, #12
 80005de:	440b      	add	r3, r1
 80005e0:	4619      	mov	r1, r3
 80005e2:	4610      	mov	r0, r2
 80005e4:	f00c f9a3 	bl	800c92e <strcpy>
			usedbuffer = tempsize;
 80005e8:	4a0a      	ldr	r2, [pc, #40]	; (8000614 <CubeM_attendUIntValue+0xb8>)
 80005ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80005ec:	6013      	str	r3, [r2, #0]
			emptybuffer = 0;
 80005ee:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <CubeM_attendUIntValue+0xbc>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	701a      	strb	r2, [r3, #0]
			return 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	e000      	b.n	80005fa <CubeM_attendUIntValue+0x9e>
		}
	}
	return 1;
 80005f8:	2301      	movs	r3, #1
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	3760      	adds	r7, #96	; 0x60
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	2400033c 	.word	0x2400033c
 8000608:	24000018 	.word	0x24000018
 800060c:	24000004 	.word	0x24000004
 8000610:	0800e7c0 	.word	0x0800e7c0
 8000614:	24000330 	.word	0x24000330
 8000618:	24000000 	.word	0x24000000
 800061c:	24000338 	.word	0x24000338
 8000620:	2400032c 	.word	0x2400032c
 8000624:	24000334 	.word	0x24000334

08000628 <CubeM_attendIntValue>:

uint8_t CubeM_attendIntValue(uint8_t channel, int32_t value) {
 8000628:	b580      	push	{r7, lr}
 800062a:	b09a      	sub	sp, #104	; 0x68
 800062c:	af02      	add	r7, sp, #8
 800062e:	4603      	mov	r3, r0
 8000630:	6039      	str	r1, [r7, #0]
 8000632:	71fb      	strb	r3, [r7, #7]
	if(channel > 0 && channel < CUBEMONMAXSIGNALS) {
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d047      	beq.n	80006ca <CubeM_attendIntValue+0xa2>
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	2b07      	cmp	r3, #7
 800063e:	d844      	bhi.n	80006ca <CubeM_attendIntValue+0xa2>
		char tempstring[CUBEMONSMALLBUFSIZE*4];

		uint32_t tempsize;
		sprintf(tempstring, "%s%s%s%ld", delimiter, channelnames[channel], connector, value);
 8000640:	79fa      	ldrb	r2, [r7, #7]
 8000642:	4613      	mov	r3, r2
 8000644:	009b      	lsls	r3, r3, #2
 8000646:	4413      	add	r3, r2
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	4a22      	ldr	r2, [pc, #136]	; (80006d4 <CubeM_attendIntValue+0xac>)
 800064c:	441a      	add	r2, r3
 800064e:	f107 000c 	add.w	r0, r7, #12
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	9301      	str	r3, [sp, #4]
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <CubeM_attendIntValue+0xb0>)
 8000658:	9300      	str	r3, [sp, #0]
 800065a:	4613      	mov	r3, r2
 800065c:	4a1f      	ldr	r2, [pc, #124]	; (80006dc <CubeM_attendIntValue+0xb4>)
 800065e:	4920      	ldr	r1, [pc, #128]	; (80006e0 <CubeM_attendIntValue+0xb8>)
 8000660:	f00c f872 	bl	800c748 <siprintf>
		tempsize = usedbuffer + strlen((char*)tempstring) - (emptybuffer * dellen);
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff fe89 	bl	8000380 <strlen>
 800066e:	4602      	mov	r2, r0
 8000670:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <CubeM_attendIntValue+0xbc>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4413      	add	r3, r2
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <CubeM_attendIntValue+0xc0>)
 8000678:	7812      	ldrb	r2, [r2, #0]
 800067a:	4611      	mov	r1, r2
 800067c:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <CubeM_attendIntValue+0xc4>)
 800067e:	7812      	ldrb	r2, [r2, #0]
 8000680:	fb01 f202 	mul.w	r2, r1, r2
 8000684:	1a9b      	subs	r3, r3, r2
 8000686:	65fb      	str	r3, [r7, #92]	; 0x5c

		if(tempsize < buffersize) {
 8000688:	4b19      	ldr	r3, [pc, #100]	; (80006f0 <CubeM_attendIntValue+0xc8>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800068e:	429a      	cmp	r2, r3
 8000690:	d21b      	bcs.n	80006ca <CubeM_attendIntValue+0xa2>
			strcpy((char*)(buffer + (usedbuffer)), (char*)(tempstring + (emptybuffer * dellen)));
 8000692:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <CubeM_attendIntValue+0xcc>)
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <CubeM_attendIntValue+0xbc>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	441a      	add	r2, r3
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <CubeM_attendIntValue+0xc0>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	4619      	mov	r1, r3
 80006a2:	4b12      	ldr	r3, [pc, #72]	; (80006ec <CubeM_attendIntValue+0xc4>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	fb01 f303 	mul.w	r3, r1, r3
 80006aa:	4619      	mov	r1, r3
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	440b      	add	r3, r1
 80006b2:	4619      	mov	r1, r3
 80006b4:	4610      	mov	r0, r2
 80006b6:	f00c f93a 	bl	800c92e <strcpy>
			usedbuffer = tempsize;
 80006ba:	4a0a      	ldr	r2, [pc, #40]	; (80006e4 <CubeM_attendIntValue+0xbc>)
 80006bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80006be:	6013      	str	r3, [r2, #0]
			emptybuffer = 0;
 80006c0:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <CubeM_attendIntValue+0xc0>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	701a      	strb	r2, [r3, #0]
			return 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	e000      	b.n	80006cc <CubeM_attendIntValue+0xa4>
		}
	}
	return 1;
 80006ca:	2301      	movs	r3, #1
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3760      	adds	r7, #96	; 0x60
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	2400033c 	.word	0x2400033c
 80006d8:	24000018 	.word	0x24000018
 80006dc:	24000004 	.word	0x24000004
 80006e0:	0800e7c0 	.word	0x0800e7c0
 80006e4:	24000330 	.word	0x24000330
 80006e8:	24000000 	.word	0x24000000
 80006ec:	24000338 	.word	0x24000338
 80006f0:	2400032c 	.word	0x2400032c
 80006f4:	24000334 	.word	0x24000334

080006f8 <CubeM_attendFloatValue>:

uint8_t CubeM_attendFloatValue(uint8_t channel, float value, uint8_t precision) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b09c      	sub	sp, #112	; 0x70
 80006fc:	af04      	add	r7, sp, #16
 80006fe:	4603      	mov	r3, r0
 8000700:	ed87 0a00 	vstr	s0, [r7]
 8000704:	460a      	mov	r2, r1
 8000706:	71fb      	strb	r3, [r7, #7]
 8000708:	4613      	mov	r3, r2
 800070a:	71bb      	strb	r3, [r7, #6]
	if(channel > 0 && channel < CUBEMONMAXSIGNALS) {
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d04d      	beq.n	80007ae <CubeM_attendFloatValue+0xb6>
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	2b07      	cmp	r3, #7
 8000716:	d84a      	bhi.n	80007ae <CubeM_attendFloatValue+0xb6>
		char tempstring[CUBEMONSMALLBUFSIZE*4];

		uint32_t tempsize;
		sprintf(tempstring, "%s%s%s%.*f", delimiter, channelnames[channel], connector, precision, value);
 8000718:	79fa      	ldrb	r2, [r7, #7]
 800071a:	4613      	mov	r3, r2
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	4413      	add	r3, r2
 8000720:	009b      	lsls	r3, r3, #2
 8000722:	4a25      	ldr	r2, [pc, #148]	; (80007b8 <CubeM_attendFloatValue+0xc0>)
 8000724:	441a      	add	r2, r3
 8000726:	79bb      	ldrb	r3, [r7, #6]
 8000728:	edd7 7a00 	vldr	s15, [r7]
 800072c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000730:	f107 000c 	add.w	r0, r7, #12
 8000734:	ed8d 7b02 	vstr	d7, [sp, #8]
 8000738:	9301      	str	r3, [sp, #4]
 800073a:	4b20      	ldr	r3, [pc, #128]	; (80007bc <CubeM_attendFloatValue+0xc4>)
 800073c:	9300      	str	r3, [sp, #0]
 800073e:	4613      	mov	r3, r2
 8000740:	4a1f      	ldr	r2, [pc, #124]	; (80007c0 <CubeM_attendFloatValue+0xc8>)
 8000742:	4920      	ldr	r1, [pc, #128]	; (80007c4 <CubeM_attendFloatValue+0xcc>)
 8000744:	f00c f800 	bl	800c748 <siprintf>
		tempsize = usedbuffer + strlen((char*)tempstring) - (emptybuffer * dellen);
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff fe17 	bl	8000380 <strlen>
 8000752:	4602      	mov	r2, r0
 8000754:	4b1c      	ldr	r3, [pc, #112]	; (80007c8 <CubeM_attendFloatValue+0xd0>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4413      	add	r3, r2
 800075a:	4a1c      	ldr	r2, [pc, #112]	; (80007cc <CubeM_attendFloatValue+0xd4>)
 800075c:	7812      	ldrb	r2, [r2, #0]
 800075e:	4611      	mov	r1, r2
 8000760:	4a1b      	ldr	r2, [pc, #108]	; (80007d0 <CubeM_attendFloatValue+0xd8>)
 8000762:	7812      	ldrb	r2, [r2, #0]
 8000764:	fb01 f202 	mul.w	r2, r1, r2
 8000768:	1a9b      	subs	r3, r3, r2
 800076a:	65fb      	str	r3, [r7, #92]	; 0x5c

		if(tempsize < buffersize) {
 800076c:	4b19      	ldr	r3, [pc, #100]	; (80007d4 <CubeM_attendFloatValue+0xdc>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000772:	429a      	cmp	r2, r3
 8000774:	d21b      	bcs.n	80007ae <CubeM_attendFloatValue+0xb6>
			strcpy((char*)(buffer + (usedbuffer)), (char*)(tempstring + (emptybuffer * dellen)));
 8000776:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <CubeM_attendFloatValue+0xe0>)
 8000778:	681a      	ldr	r2, [r3, #0]
 800077a:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <CubeM_attendFloatValue+0xd0>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	441a      	add	r2, r3
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <CubeM_attendFloatValue+0xd4>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	4619      	mov	r1, r3
 8000786:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <CubeM_attendFloatValue+0xd8>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	fb01 f303 	mul.w	r3, r1, r3
 800078e:	4619      	mov	r1, r3
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	440b      	add	r3, r1
 8000796:	4619      	mov	r1, r3
 8000798:	4610      	mov	r0, r2
 800079a:	f00c f8c8 	bl	800c92e <strcpy>
			usedbuffer = tempsize;
 800079e:	4a0a      	ldr	r2, [pc, #40]	; (80007c8 <CubeM_attendFloatValue+0xd0>)
 80007a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80007a2:	6013      	str	r3, [r2, #0]
			emptybuffer = 0;
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <CubeM_attendFloatValue+0xd4>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	701a      	strb	r2, [r3, #0]
			return 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	e000      	b.n	80007b0 <CubeM_attendFloatValue+0xb8>
		}
	}
	return 1;
 80007ae:	2301      	movs	r3, #1
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3760      	adds	r7, #96	; 0x60
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	2400033c 	.word	0x2400033c
 80007bc:	24000018 	.word	0x24000018
 80007c0:	24000004 	.word	0x24000004
 80007c4:	0800e7cc 	.word	0x0800e7cc
 80007c8:	24000330 	.word	0x24000330
 80007cc:	24000000 	.word	0x24000000
 80007d0:	24000338 	.word	0x24000338
 80007d4:	2400032c 	.word	0x2400032c
 80007d8:	24000334 	.word	0x24000334

080007dc <CubeM_sendBuffer>:
	strcpy((char*)EOL, (char*)string);

	return 0;
}

uint8_t CubeM_sendBuffer() {
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0

	strcpy((char*)&buffer[usedbuffer], (char*)EOL);
 80007e0:	4b0a      	ldr	r3, [pc, #40]	; (800080c <CubeM_sendBuffer+0x30>)
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <CubeM_sendBuffer+0x34>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4413      	add	r3, r2
 80007ea:	490a      	ldr	r1, [pc, #40]	; (8000814 <CubeM_sendBuffer+0x38>)
 80007ec:	4618      	mov	r0, r3
 80007ee:	f00c f89e 	bl	800c92e <strcpy>
	CDC_Transmit_FS(buffer, usedbuffer);
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <CubeM_sendBuffer+0x30>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a06      	ldr	r2, [pc, #24]	; (8000810 <CubeM_sendBuffer+0x34>)
 80007f8:	6812      	ldr	r2, [r2, #0]
 80007fa:	b292      	uxth	r2, r2
 80007fc:	4611      	mov	r1, r2
 80007fe:	4618      	mov	r0, r3
 8000800:	f00a fd68 	bl	800b2d4 <CDC_Transmit_FS>

	return 0;
 8000804:	2300      	movs	r3, #0
}
 8000806:	4618      	mov	r0, r3
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	24000334 	.word	0x24000334
 8000810:	24000330 	.word	0x24000330
 8000814:	2400002c 	.word	0x2400002c

08000818 <CubeM_runDebugTests>:

#if CUBEMDEBUG
uint8_t CubeM_runDebugTests() {
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
	CubeM_Init(100);
 800081e:	2064      	movs	r0, #100	; 0x64
 8000820:	f7ff fe0e 	bl	8000440 <CubeM_Init>

	CubeM_setChannelname(0, (uint8_t*)"Test0");
 8000824:	4928      	ldr	r1, [pc, #160]	; (80008c8 <CubeM_runDebugTests+0xb0>)
 8000826:	2000      	movs	r0, #0
 8000828:	f7ff fe60 	bl	80004ec <CubeM_setChannelname>
	CubeM_attendUIntValue(0, 123);
 800082c:	217b      	movs	r1, #123	; 0x7b
 800082e:	2000      	movs	r0, #0
 8000830:	f7ff fe94 	bl	800055c <CubeM_attendUIntValue>
	CubeM_attendUIntValue(0, 234);
 8000834:	21ea      	movs	r1, #234	; 0xea
 8000836:	2000      	movs	r0, #0
 8000838:	f7ff fe90 	bl	800055c <CubeM_attendUIntValue>
	CubeM_attendUIntValue(1, 123);
 800083c:	217b      	movs	r1, #123	; 0x7b
 800083e:	2001      	movs	r0, #1
 8000840:	f7ff fe8c 	bl	800055c <CubeM_attendUIntValue>
	CubeM_attendUIntValue(1, 234);
 8000844:	21ea      	movs	r1, #234	; 0xea
 8000846:	2001      	movs	r0, #1
 8000848:	f7ff fe88 	bl	800055c <CubeM_attendUIntValue>
	CubeM_attendIntValue(1, -123);
 800084c:	f06f 017a 	mvn.w	r1, #122	; 0x7a
 8000850:	2001      	movs	r0, #1
 8000852:	f7ff fee9 	bl	8000628 <CubeM_attendIntValue>
	CubeM_attendFloatValue(2, 0.123, 3);
 8000856:	2103      	movs	r1, #3
 8000858:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 80008cc <CubeM_runDebugTests+0xb4>
 800085c:	2002      	movs	r0, #2
 800085e:	f7ff ff4b 	bl	80006f8 <CubeM_attendFloatValue>
	CubeM_attendFloatValue(2, 0.123, 2);
 8000862:	2102      	movs	r1, #2
 8000864:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80008cc <CubeM_runDebugTests+0xb4>
 8000868:	2002      	movs	r0, #2
 800086a:	f7ff ff45 	bl	80006f8 <CubeM_attendFloatValue>

	uint8_t tempstatus = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	71fb      	strb	r3, [r7, #7]
	uint32_t tempcounter = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	603b      	str	r3, [r7, #0]
	while(tempstatus == 0) {
 8000876:	e015      	b.n	80008a4 <CubeM_runDebugTests+0x8c>
		tempstatus = CubeM_attendFloatValue(2, 0.123+tempcounter, 2);
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	ee07 3a90 	vmov	s15, r3
 800087e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000882:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 80008c0 <CubeM_runDebugTests+0xa8>
 8000886:	ee37 7b06 	vadd.f64	d7, d7, d6
 800088a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800088e:	2102      	movs	r1, #2
 8000890:	eeb0 0a67 	vmov.f32	s0, s15
 8000894:	2002      	movs	r0, #2
 8000896:	f7ff ff2f 	bl	80006f8 <CubeM_attendFloatValue>
 800089a:	4603      	mov	r3, r0
 800089c:	71fb      	strb	r3, [r7, #7]
		tempcounter++;
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	3301      	adds	r3, #1
 80008a2:	603b      	str	r3, [r7, #0]
	while(tempstatus == 0) {
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d0e6      	beq.n	8000878 <CubeM_runDebugTests+0x60>
	}

	HAL_Delay(3000);
 80008aa:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80008ae:	f000 fda3 	bl	80013f8 <HAL_Delay>
	CubeM_sendBuffer();
 80008b2:	f7ff ff93 	bl	80007dc <CubeM_sendBuffer>

	return 0;
 80008b6:	2300      	movs	r3, #0
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	916872b0 	.word	0x916872b0
 80008c4:	3fbf7ced 	.word	0x3fbf7ced
 80008c8:	0800e7d8 	.word	0x0800e7d8
 80008cc:	3dfbe76d 	.word	0x3dfbe76d

080008d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d4:	f000 fcfe 	bl	80012d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008d8:	f000 f810 	bl	80008fc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80008dc:	f000 f8bc 	bl	8000a58 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e0:	f000 fa34 	bl	8000d4c <MX_GPIO_Init>
  MX_ADC1_Init();
 80008e4:	f000 f8e8 	bl	8000ab8 <MX_ADC1_Init>
  MX_ADC2_Init();
 80008e8:	f000 f960 	bl	8000bac <MX_ADC2_Init>
  MX_ADC3_Init();
 80008ec:	f000 f9c6 	bl	8000c7c <MX_ADC3_Init>
  MX_USB_DEVICE_Init();
 80008f0:	f00a fc30 	bl	800b154 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

#ifdef CUBEMDEBUG
  CubeM_runDebugTests();
 80008f4:	f7ff ff90 	bl	8000818 <CubeM_runDebugTests>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <main+0x28>
	...

080008fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b09e      	sub	sp, #120	; 0x78
 8000900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000902:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000906:	224c      	movs	r2, #76	; 0x4c
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f00b ff7f 	bl	800c80e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000910:	f107 030c 	add.w	r3, r7, #12
 8000914:	2220      	movs	r2, #32
 8000916:	2100      	movs	r1, #0
 8000918:	4618      	mov	r0, r3
 800091a:	f00b ff78 	bl	800c80e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800091e:	2002      	movs	r0, #2
 8000920:	f003 fbb8 	bl	8004094 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000924:	2300      	movs	r3, #0
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	4b48      	ldr	r3, [pc, #288]	; (8000a4c <SystemClock_Config+0x150>)
 800092a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800092c:	4a47      	ldr	r2, [pc, #284]	; (8000a4c <SystemClock_Config+0x150>)
 800092e:	f023 0301 	bic.w	r3, r3, #1
 8000932:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000934:	4b45      	ldr	r3, [pc, #276]	; (8000a4c <SystemClock_Config+0x150>)
 8000936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000938:	f003 0301 	and.w	r3, r3, #1
 800093c:	60bb      	str	r3, [r7, #8]
 800093e:	4b44      	ldr	r3, [pc, #272]	; (8000a50 <SystemClock_Config+0x154>)
 8000940:	699b      	ldr	r3, [r3, #24]
 8000942:	4a43      	ldr	r2, [pc, #268]	; (8000a50 <SystemClock_Config+0x154>)
 8000944:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000948:	6193      	str	r3, [r2, #24]
 800094a:	4b41      	ldr	r3, [pc, #260]	; (8000a50 <SystemClock_Config+0x154>)
 800094c:	699b      	ldr	r3, [r3, #24]
 800094e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000956:	bf00      	nop
 8000958:	4b3d      	ldr	r3, [pc, #244]	; (8000a50 <SystemClock_Config+0x154>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000960:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000964:	d1f8      	bne.n	8000958 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000966:	4b3b      	ldr	r3, [pc, #236]	; (8000a54 <SystemClock_Config+0x158>)
 8000968:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800096c:	4a39      	ldr	r2, [pc, #228]	; (8000a54 <SystemClock_Config+0x158>)
 800096e:	f043 0302 	orr.w	r3, r3, #2
 8000972:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000976:	4b37      	ldr	r3, [pc, #220]	; (8000a54 <SystemClock_Config+0x158>)
 8000978:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800097c:	f003 0302 	and.w	r3, r3, #2
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000984:	2300      	movs	r3, #0
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	4b31      	ldr	r3, [pc, #196]	; (8000a50 <SystemClock_Config+0x154>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	4a30      	ldr	r2, [pc, #192]	; (8000a50 <SystemClock_Config+0x154>)
 800098e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000992:	6193      	str	r3, [r2, #24]
 8000994:	4b2e      	ldr	r3, [pc, #184]	; (8000a50 <SystemClock_Config+0x154>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	4b2b      	ldr	r3, [pc, #172]	; (8000a4c <SystemClock_Config+0x150>)
 80009a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009a2:	4a2a      	ldr	r2, [pc, #168]	; (8000a4c <SystemClock_Config+0x150>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80009aa:	4b28      	ldr	r3, [pc, #160]	; (8000a4c <SystemClock_Config+0x150>)
 80009ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009b6:	bf00      	nop
 80009b8:	4b25      	ldr	r3, [pc, #148]	; (8000a50 <SystemClock_Config+0x154>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009c4:	d1f8      	bne.n	80009b8 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009c6:	2301      	movs	r3, #1
 80009c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d0:	2302      	movs	r3, #2
 80009d2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009d4:	2302      	movs	r3, #2
 80009d6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 80009d8:	2305      	movs	r3, #5
 80009da:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 80009dc:	23c0      	movs	r3, #192	; 0xc0
 80009de:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009e0:	2302      	movs	r3, #2
 80009e2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 15;
 80009e4:	230f      	movs	r3, #15
 80009e6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009e8:	2302      	movs	r3, #2
 80009ea:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80009ec:	2308      	movs	r3, #8
 80009ee:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009f0:	2300      	movs	r3, #0
 80009f2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009fc:	4618      	mov	r0, r3
 80009fe:	f003 fb93 	bl	8004128 <HAL_RCC_OscConfig>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000a08:	f000 f9d8 	bl	8000dbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a0c:	233f      	movs	r3, #63	; 0x3f
 8000a0e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a10:	2303      	movs	r3, #3
 8000a12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a18:	2308      	movs	r3, #8
 8000a1a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a1c:	2340      	movs	r3, #64	; 0x40
 8000a1e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a20:	2340      	movs	r3, #64	; 0x40
 8000a22:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a2a:	2340      	movs	r3, #64	; 0x40
 8000a2c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a2e:	f107 030c 	add.w	r3, r7, #12
 8000a32:	2104      	movs	r1, #4
 8000a34:	4618      	mov	r0, r3
 8000a36:	f003 ffd1 	bl	80049dc <HAL_RCC_ClockConfig>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000a40:	f000 f9bc 	bl	8000dbc <Error_Handler>
  }
}
 8000a44:	bf00      	nop
 8000a46:	3778      	adds	r7, #120	; 0x78
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	58000400 	.word	0x58000400
 8000a50:	58024800 	.word	0x58024800
 8000a54:	58024400 	.word	0x58024400

08000a58 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b0b0      	sub	sp, #192	; 0xc0
 8000a5c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a5e:	463b      	mov	r3, r7
 8000a60:	22c0      	movs	r2, #192	; 0xc0
 8000a62:	2100      	movs	r1, #0
 8000a64:	4618      	mov	r0, r3
 8000a66:	f00b fed2 	bl	800c80e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a6a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000a6e:	f04f 0300 	mov.w	r3, #0
 8000a72:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000a76:	2302      	movs	r3, #2
 8000a78:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000a7a:	230c      	movs	r3, #12
 8000a7c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000a82:	2302      	movs	r3, #2
 8000a84:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000a86:	2302      	movs	r3, #2
 8000a88:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000a8a:	23c0      	movs	r3, #192	; 0xc0
 8000a8c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000a8e:	2320      	movs	r3, #32
 8000a90:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000a96:	2300      	movs	r3, #0
 8000a98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a9c:	463b      	mov	r3, r7
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f004 fb12 	bl	80050c8 <HAL_RCCEx_PeriphCLKConfig>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000aaa:	f000 f987 	bl	8000dbc <Error_Handler>
  }
}
 8000aae:	bf00      	nop
 8000ab0:	37c0      	adds	r7, #192	; 0xc0
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
	...

08000ab8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08a      	sub	sp, #40	; 0x28
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000abe:	f107 031c 	add.w	r3, r7, #28
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000aca:	463b      	mov	r3, r7
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
 8000ad8:	615a      	str	r2, [r3, #20]
 8000ada:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000adc:	4b2f      	ldr	r3, [pc, #188]	; (8000b9c <MX_ADC1_Init+0xe4>)
 8000ade:	4a30      	ldr	r2, [pc, #192]	; (8000ba0 <MX_ADC1_Init+0xe8>)
 8000ae0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000ae2:	4b2e      	ldr	r3, [pc, #184]	; (8000b9c <MX_ADC1_Init+0xe4>)
 8000ae4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000ae8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000aea:	4b2c      	ldr	r3, [pc, #176]	; (8000b9c <MX_ADC1_Init+0xe4>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000af0:	4b2a      	ldr	r3, [pc, #168]	; (8000b9c <MX_ADC1_Init+0xe4>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000af6:	4b29      	ldr	r3, [pc, #164]	; (8000b9c <MX_ADC1_Init+0xe4>)
 8000af8:	2204      	movs	r2, #4
 8000afa:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000afc:	4b27      	ldr	r3, [pc, #156]	; (8000b9c <MX_ADC1_Init+0xe4>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b02:	4b26      	ldr	r3, [pc, #152]	; (8000b9c <MX_ADC1_Init+0xe4>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000b08:	4b24      	ldr	r3, [pc, #144]	; (8000b9c <MX_ADC1_Init+0xe4>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b0e:	4b23      	ldr	r3, [pc, #140]	; (8000b9c <MX_ADC1_Init+0xe4>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b14:	4b21      	ldr	r3, [pc, #132]	; (8000b9c <MX_ADC1_Init+0xe4>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b1a:	4b20      	ldr	r3, [pc, #128]	; (8000b9c <MX_ADC1_Init+0xe4>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b20:	4b1e      	ldr	r3, [pc, #120]	; (8000b9c <MX_ADC1_Init+0xe4>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b26:	4b1d      	ldr	r3, [pc, #116]	; (8000b9c <MX_ADC1_Init+0xe4>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b2c:	4b1b      	ldr	r3, [pc, #108]	; (8000b9c <MX_ADC1_Init+0xe4>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000b32:	4b1a      	ldr	r3, [pc, #104]	; (8000b9c <MX_ADC1_Init+0xe4>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b3a:	4818      	ldr	r0, [pc, #96]	; (8000b9c <MX_ADC1_Init+0xe4>)
 8000b3c:	f000 fe2e 	bl	800179c <HAL_ADC_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000b46:	f000 f939 	bl	8000dbc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b4e:	f107 031c 	add.w	r3, r7, #28
 8000b52:	4619      	mov	r1, r3
 8000b54:	4811      	ldr	r0, [pc, #68]	; (8000b9c <MX_ADC1_Init+0xe4>)
 8000b56:	f001 fc45 	bl	80023e4 <HAL_ADCEx_MultiModeConfigChannel>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000b60:	f000 f92c 	bl	8000dbc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b64:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <MX_ADC1_Init+0xec>)
 8000b66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b68:	2306      	movs	r3, #6
 8000b6a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000b70:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <MX_ADC1_Init+0xf0>)
 8000b72:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b74:	2304      	movs	r3, #4
 8000b76:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b80:	463b      	mov	r3, r7
 8000b82:	4619      	mov	r1, r3
 8000b84:	4805      	ldr	r0, [pc, #20]	; (8000b9c <MX_ADC1_Init+0xe4>)
 8000b86:	f000 ffab 	bl	8001ae0 <HAL_ADC_ConfigChannel>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000b90:	f000 f914 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b94:	bf00      	nop
 8000b96:	3728      	adds	r7, #40	; 0x28
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	240003e4 	.word	0x240003e4
 8000ba0:	40022000 	.word	0x40022000
 8000ba4:	0c900008 	.word	0x0c900008
 8000ba8:	47ff0000 	.word	0x47ff0000

08000bac <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b088      	sub	sp, #32
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
 8000bc0:	615a      	str	r2, [r3, #20]
 8000bc2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000bc4:	4b29      	ldr	r3, [pc, #164]	; (8000c6c <MX_ADC2_Init+0xc0>)
 8000bc6:	4a2a      	ldr	r2, [pc, #168]	; (8000c70 <MX_ADC2_Init+0xc4>)
 8000bc8:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000bca:	4b28      	ldr	r3, [pc, #160]	; (8000c6c <MX_ADC2_Init+0xc0>)
 8000bcc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000bd0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000bd2:	4b26      	ldr	r3, [pc, #152]	; (8000c6c <MX_ADC2_Init+0xc0>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bd8:	4b24      	ldr	r3, [pc, #144]	; (8000c6c <MX_ADC2_Init+0xc0>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bde:	4b23      	ldr	r3, [pc, #140]	; (8000c6c <MX_ADC2_Init+0xc0>)
 8000be0:	2204      	movs	r2, #4
 8000be2:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000be4:	4b21      	ldr	r3, [pc, #132]	; (8000c6c <MX_ADC2_Init+0xc0>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000bea:	4b20      	ldr	r3, [pc, #128]	; (8000c6c <MX_ADC2_Init+0xc0>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000bf0:	4b1e      	ldr	r3, [pc, #120]	; (8000c6c <MX_ADC2_Init+0xc0>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000bf6:	4b1d      	ldr	r3, [pc, #116]	; (8000c6c <MX_ADC2_Init+0xc0>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bfc:	4b1b      	ldr	r3, [pc, #108]	; (8000c6c <MX_ADC2_Init+0xc0>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c02:	4b1a      	ldr	r3, [pc, #104]	; (8000c6c <MX_ADC2_Init+0xc0>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c08:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <MX_ADC2_Init+0xc0>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c0e:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <MX_ADC2_Init+0xc0>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c14:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <MX_ADC2_Init+0xc0>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000c1a:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <MX_ADC2_Init+0xc0>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000c22:	4812      	ldr	r0, [pc, #72]	; (8000c6c <MX_ADC2_Init+0xc0>)
 8000c24:	f000 fdba 	bl	800179c <HAL_ADC_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000c2e:	f000 f8c5 	bl	8000dbc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000c32:	4b10      	ldr	r3, [pc, #64]	; (8000c74 <MX_ADC2_Init+0xc8>)
 8000c34:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c36:	2306      	movs	r3, #6
 8000c38:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <MX_ADC2_Init+0xcc>)
 8000c40:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c42:	2304      	movs	r3, #4
 8000c44:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	4619      	mov	r1, r3
 8000c52:	4806      	ldr	r0, [pc, #24]	; (8000c6c <MX_ADC2_Init+0xc0>)
 8000c54:	f000 ff44 	bl	8001ae0 <HAL_ADC_ConfigChannel>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000c5e:	f000 f8ad 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000c62:	bf00      	nop
 8000c64:	3720      	adds	r7, #32
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	24000448 	.word	0x24000448
 8000c70:	40022100 	.word	0x40022100
 8000c74:	10c00010 	.word	0x10c00010
 8000c78:	47ff0000 	.word	0x47ff0000

08000c7c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b088      	sub	sp, #32
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
 8000c90:	615a      	str	r2, [r3, #20]
 8000c92:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000c94:	4b29      	ldr	r3, [pc, #164]	; (8000d3c <MX_ADC3_Init+0xc0>)
 8000c96:	4a2a      	ldr	r2, [pc, #168]	; (8000d40 <MX_ADC3_Init+0xc4>)
 8000c98:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000c9a:	4b28      	ldr	r3, [pc, #160]	; (8000d3c <MX_ADC3_Init+0xc0>)
 8000c9c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000ca0:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000ca2:	4b26      	ldr	r3, [pc, #152]	; (8000d3c <MX_ADC3_Init+0xc0>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ca8:	4b24      	ldr	r3, [pc, #144]	; (8000d3c <MX_ADC3_Init+0xc0>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cae:	4b23      	ldr	r3, [pc, #140]	; (8000d3c <MX_ADC3_Init+0xc0>)
 8000cb0:	2204      	movs	r2, #4
 8000cb2:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000cb4:	4b21      	ldr	r3, [pc, #132]	; (8000d3c <MX_ADC3_Init+0xc0>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000cba:	4b20      	ldr	r3, [pc, #128]	; (8000d3c <MX_ADC3_Init+0xc0>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000cc0:	4b1e      	ldr	r3, [pc, #120]	; (8000d3c <MX_ADC3_Init+0xc0>)
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000cc6:	4b1d      	ldr	r3, [pc, #116]	; (8000d3c <MX_ADC3_Init+0xc0>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ccc:	4b1b      	ldr	r3, [pc, #108]	; (8000d3c <MX_ADC3_Init+0xc0>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cd2:	4b1a      	ldr	r3, [pc, #104]	; (8000d3c <MX_ADC3_Init+0xc0>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000cd8:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <MX_ADC3_Init+0xc0>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cde:	4b17      	ldr	r3, [pc, #92]	; (8000d3c <MX_ADC3_Init+0xc0>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ce4:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <MX_ADC3_Init+0xc0>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000cea:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <MX_ADC3_Init+0xc0>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000cf2:	4812      	ldr	r0, [pc, #72]	; (8000d3c <MX_ADC3_Init+0xc0>)
 8000cf4:	f000 fd52 	bl	800179c <HAL_ADC_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8000cfe:	f000 f85d 	bl	8000dbc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d02:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <MX_ADC3_Init+0xc8>)
 8000d04:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d06:	2306      	movs	r3, #6
 8000d08:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <MX_ADC3_Init+0xcc>)
 8000d10:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d12:	2304      	movs	r3, #4
 8000d14:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000d1e:	1d3b      	adds	r3, r7, #4
 8000d20:	4619      	mov	r1, r3
 8000d22:	4806      	ldr	r0, [pc, #24]	; (8000d3c <MX_ADC3_Init+0xc0>)
 8000d24:	f000 fedc 	bl	8001ae0 <HAL_ADC_ConfigChannel>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_ADC3_Init+0xb6>
  {
    Error_Handler();
 8000d2e:	f000 f845 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000d32:	bf00      	nop
 8000d34:	3720      	adds	r7, #32
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	240004ac 	.word	0x240004ac
 8000d40:	58026000 	.word	0x58026000
 8000d44:	04300002 	.word	0x04300002
 8000d48:	47ff0000 	.word	0x47ff0000

08000d4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d52:	4b19      	ldr	r3, [pc, #100]	; (8000db8 <MX_GPIO_Init+0x6c>)
 8000d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d58:	4a17      	ldr	r2, [pc, #92]	; (8000db8 <MX_GPIO_Init+0x6c>)
 8000d5a:	f043 0304 	orr.w	r3, r3, #4
 8000d5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d62:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <MX_GPIO_Init+0x6c>)
 8000d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d68:	f003 0304 	and.w	r3, r3, #4
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d70:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <MX_GPIO_Init+0x6c>)
 8000d72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d76:	4a10      	ldr	r2, [pc, #64]	; (8000db8 <MX_GPIO_Init+0x6c>)
 8000d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d80:	4b0d      	ldr	r3, [pc, #52]	; (8000db8 <MX_GPIO_Init+0x6c>)
 8000d82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d8a:	60bb      	str	r3, [r7, #8]
 8000d8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8e:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <MX_GPIO_Init+0x6c>)
 8000d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d94:	4a08      	ldr	r2, [pc, #32]	; (8000db8 <MX_GPIO_Init+0x6c>)
 8000d96:	f043 0301 	orr.w	r3, r3, #1
 8000d9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d9e:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <MX_GPIO_Init+0x6c>)
 8000da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	607b      	str	r3, [r7, #4]
 8000daa:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dac:	bf00      	nop
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	58024400 	.word	0x58024400

08000dbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc0:	b672      	cpsid	i
}
 8000dc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <Error_Handler+0x8>
	...

08000dc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dce:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <HAL_MspInit+0x30>)
 8000dd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000dd4:	4a08      	ldr	r2, [pc, #32]	; (8000df8 <HAL_MspInit+0x30>)
 8000dd6:	f043 0302 	orr.w	r3, r3, #2
 8000dda:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000dde:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <HAL_MspInit+0x30>)
 8000de0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000de4:	f003 0302 	and.w	r3, r3, #2
 8000de8:	607b      	str	r3, [r7, #4]
 8000dea:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	58024400 	.word	0x58024400

08000dfc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08e      	sub	sp, #56	; 0x38
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a51      	ldr	r2, [pc, #324]	; (8000f60 <HAL_ADC_MspInit+0x164>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d133      	bne.n	8000e86 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000e1e:	4b51      	ldr	r3, [pc, #324]	; (8000f64 <HAL_ADC_MspInit+0x168>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	3301      	adds	r3, #1
 8000e24:	4a4f      	ldr	r2, [pc, #316]	; (8000f64 <HAL_ADC_MspInit+0x168>)
 8000e26:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000e28:	4b4e      	ldr	r3, [pc, #312]	; (8000f64 <HAL_ADC_MspInit+0x168>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d10e      	bne.n	8000e4e <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000e30:	4b4d      	ldr	r3, [pc, #308]	; (8000f68 <HAL_ADC_MspInit+0x16c>)
 8000e32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e36:	4a4c      	ldr	r2, [pc, #304]	; (8000f68 <HAL_ADC_MspInit+0x16c>)
 8000e38:	f043 0320 	orr.w	r3, r3, #32
 8000e3c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e40:	4b49      	ldr	r3, [pc, #292]	; (8000f68 <HAL_ADC_MspInit+0x16c>)
 8000e42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e46:	f003 0320 	and.w	r3, r3, #32
 8000e4a:	623b      	str	r3, [r7, #32]
 8000e4c:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4e:	4b46      	ldr	r3, [pc, #280]	; (8000f68 <HAL_ADC_MspInit+0x16c>)
 8000e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e54:	4a44      	ldr	r2, [pc, #272]	; (8000f68 <HAL_ADC_MspInit+0x16c>)
 8000e56:	f043 0301 	orr.w	r3, r3, #1
 8000e5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e5e:	4b42      	ldr	r3, [pc, #264]	; (8000f68 <HAL_ADC_MspInit+0x16c>)
 8000e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e64:	f003 0301 	and.w	r3, r3, #1
 8000e68:	61fb      	str	r3, [r7, #28]
 8000e6a:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PA7     ------> ADC1_INN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e6c:	23c0      	movs	r3, #192	; 0xc0
 8000e6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e70:	2303      	movs	r3, #3
 8000e72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	483b      	ldr	r0, [pc, #236]	; (8000f6c <HAL_ADC_MspInit+0x170>)
 8000e80:	f001 fc9e 	bl	80027c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000e84:	e067      	b.n	8000f56 <HAL_ADC_MspInit+0x15a>
  else if(hadc->Instance==ADC2)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a39      	ldr	r2, [pc, #228]	; (8000f70 <HAL_ADC_MspInit+0x174>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d133      	bne.n	8000ef8 <HAL_ADC_MspInit+0xfc>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000e90:	4b34      	ldr	r3, [pc, #208]	; (8000f64 <HAL_ADC_MspInit+0x168>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	3301      	adds	r3, #1
 8000e96:	4a33      	ldr	r2, [pc, #204]	; (8000f64 <HAL_ADC_MspInit+0x168>)
 8000e98:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000e9a:	4b32      	ldr	r3, [pc, #200]	; (8000f64 <HAL_ADC_MspInit+0x168>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d10e      	bne.n	8000ec0 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000ea2:	4b31      	ldr	r3, [pc, #196]	; (8000f68 <HAL_ADC_MspInit+0x16c>)
 8000ea4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ea8:	4a2f      	ldr	r2, [pc, #188]	; (8000f68 <HAL_ADC_MspInit+0x16c>)
 8000eaa:	f043 0320 	orr.w	r3, r3, #32
 8000eae:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000eb2:	4b2d      	ldr	r3, [pc, #180]	; (8000f68 <HAL_ADC_MspInit+0x16c>)
 8000eb4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000eb8:	f003 0320 	and.w	r3, r3, #32
 8000ebc:	61bb      	str	r3, [r7, #24]
 8000ebe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec0:	4b29      	ldr	r3, [pc, #164]	; (8000f68 <HAL_ADC_MspInit+0x16c>)
 8000ec2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec6:	4a28      	ldr	r2, [pc, #160]	; (8000f68 <HAL_ADC_MspInit+0x16c>)
 8000ec8:	f043 0304 	orr.w	r3, r3, #4
 8000ecc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ed0:	4b25      	ldr	r3, [pc, #148]	; (8000f68 <HAL_ADC_MspInit+0x16c>)
 8000ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed6:	f003 0304 	and.w	r3, r3, #4
 8000eda:	617b      	str	r3, [r7, #20]
 8000edc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000ede:	2330      	movs	r3, #48	; 0x30
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4820      	ldr	r0, [pc, #128]	; (8000f74 <HAL_ADC_MspInit+0x178>)
 8000ef2:	f001 fc65 	bl	80027c0 <HAL_GPIO_Init>
}
 8000ef6:	e02e      	b.n	8000f56 <HAL_ADC_MspInit+0x15a>
  else if(hadc->Instance==ADC3)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a1e      	ldr	r2, [pc, #120]	; (8000f78 <HAL_ADC_MspInit+0x17c>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d129      	bne.n	8000f56 <HAL_ADC_MspInit+0x15a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000f02:	4b19      	ldr	r3, [pc, #100]	; (8000f68 <HAL_ADC_MspInit+0x16c>)
 8000f04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f08:	4a17      	ldr	r2, [pc, #92]	; (8000f68 <HAL_ADC_MspInit+0x16c>)
 8000f0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f12:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <HAL_ADC_MspInit+0x16c>)
 8000f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f20:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <HAL_ADC_MspInit+0x16c>)
 8000f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f26:	4a10      	ldr	r2, [pc, #64]	; (8000f68 <HAL_ADC_MspInit+0x16c>)
 8000f28:	f043 0304 	orr.w	r3, r3, #4
 8000f2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f30:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <HAL_ADC_MspInit+0x16c>)
 8000f32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f36:	f003 0304 	and.w	r3, r3, #4
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000f3e:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000f42:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000f46:	f000 fa87 	bl	8001458 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000f4a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000f4e:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000f52:	f000 fa81 	bl	8001458 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8000f56:	bf00      	nop
 8000f58:	3738      	adds	r7, #56	; 0x38
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40022000 	.word	0x40022000
 8000f64:	24000510 	.word	0x24000510
 8000f68:	58024400 	.word	0x58024400
 8000f6c:	58020000 	.word	0x58020000
 8000f70:	40022100 	.word	0x40022100
 8000f74:	58020800 	.word	0x58020800
 8000f78:	58026000 	.word	0x58026000

08000f7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f80:	e7fe      	b.n	8000f80 <NMI_Handler+0x4>

08000f82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f86:	e7fe      	b.n	8000f86 <HardFault_Handler+0x4>

08000f88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <MemManage_Handler+0x4>

08000f8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f92:	e7fe      	b.n	8000f92 <BusFault_Handler+0x4>

08000f94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <UsageFault_Handler+0x4>

08000f9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc8:	f000 f9f6 	bl	80013b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000fd4:	4802      	ldr	r0, [pc, #8]	; (8000fe0 <OTG_FS_IRQHandler+0x10>)
 8000fd6:	f001 fefc 	bl	8002dd2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	240019fc 	.word	0x240019fc

08000fe4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return 1;
 8000fe8:	2301      	movs	r3, #1
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <_kill>:

int _kill(int pid, int sig)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000ffe:	f00b fc69 	bl	800c8d4 <__errno>
 8001002:	4603      	mov	r3, r0
 8001004:	2216      	movs	r2, #22
 8001006:	601a      	str	r2, [r3, #0]
  return -1;
 8001008:	f04f 33ff 	mov.w	r3, #4294967295
}
 800100c:	4618      	mov	r0, r3
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <_exit>:

void _exit (int status)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800101c:	f04f 31ff 	mov.w	r1, #4294967295
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f7ff ffe7 	bl	8000ff4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001026:	e7fe      	b.n	8001026 <_exit+0x12>

08001028 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
 8001038:	e00a      	b.n	8001050 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800103a:	f3af 8000 	nop.w
 800103e:	4601      	mov	r1, r0
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	1c5a      	adds	r2, r3, #1
 8001044:	60ba      	str	r2, [r7, #8]
 8001046:	b2ca      	uxtb	r2, r1
 8001048:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	3301      	adds	r3, #1
 800104e:	617b      	str	r3, [r7, #20]
 8001050:	697a      	ldr	r2, [r7, #20]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	429a      	cmp	r2, r3
 8001056:	dbf0      	blt.n	800103a <_read+0x12>
  }

  return len;
 8001058:	687b      	ldr	r3, [r7, #4]
}
 800105a:	4618      	mov	r0, r3
 800105c:	3718      	adds	r7, #24
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b086      	sub	sp, #24
 8001066:	af00      	add	r7, sp, #0
 8001068:	60f8      	str	r0, [r7, #12]
 800106a:	60b9      	str	r1, [r7, #8]
 800106c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
 8001072:	e009      	b.n	8001088 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	1c5a      	adds	r2, r3, #1
 8001078:	60ba      	str	r2, [r7, #8]
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	4618      	mov	r0, r3
 800107e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	3301      	adds	r3, #1
 8001086:	617b      	str	r3, [r7, #20]
 8001088:	697a      	ldr	r2, [r7, #20]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	429a      	cmp	r2, r3
 800108e:	dbf1      	blt.n	8001074 <_write+0x12>
  }
  return len;
 8001090:	687b      	ldr	r3, [r7, #4]
}
 8001092:	4618      	mov	r0, r3
 8001094:	3718      	adds	r7, #24
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <_close>:

int _close(int file)
{
 800109a:	b480      	push	{r7}
 800109c:	b083      	sub	sp, #12
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010b2:	b480      	push	{r7}
 80010b4:	b083      	sub	sp, #12
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
 80010ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010c2:	605a      	str	r2, [r3, #4]
  return 0;
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <_isatty>:

int _isatty(int file)
{
 80010d2:	b480      	push	{r7}
 80010d4:	b083      	sub	sp, #12
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010da:	2301      	movs	r3, #1
}
 80010dc:	4618      	mov	r0, r3
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
	...

08001104 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800110c:	4a14      	ldr	r2, [pc, #80]	; (8001160 <_sbrk+0x5c>)
 800110e:	4b15      	ldr	r3, [pc, #84]	; (8001164 <_sbrk+0x60>)
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001118:	4b13      	ldr	r3, [pc, #76]	; (8001168 <_sbrk+0x64>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d102      	bne.n	8001126 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001120:	4b11      	ldr	r3, [pc, #68]	; (8001168 <_sbrk+0x64>)
 8001122:	4a12      	ldr	r2, [pc, #72]	; (800116c <_sbrk+0x68>)
 8001124:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001126:	4b10      	ldr	r3, [pc, #64]	; (8001168 <_sbrk+0x64>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4413      	add	r3, r2
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	429a      	cmp	r2, r3
 8001132:	d207      	bcs.n	8001144 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001134:	f00b fbce 	bl	800c8d4 <__errno>
 8001138:	4603      	mov	r3, r0
 800113a:	220c      	movs	r2, #12
 800113c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800113e:	f04f 33ff 	mov.w	r3, #4294967295
 8001142:	e009      	b.n	8001158 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001144:	4b08      	ldr	r3, [pc, #32]	; (8001168 <_sbrk+0x64>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800114a:	4b07      	ldr	r3, [pc, #28]	; (8001168 <_sbrk+0x64>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4413      	add	r3, r2
 8001152:	4a05      	ldr	r2, [pc, #20]	; (8001168 <_sbrk+0x64>)
 8001154:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001156:	68fb      	ldr	r3, [r7, #12]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3718      	adds	r7, #24
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	24080000 	.word	0x24080000
 8001164:	00000400 	.word	0x00000400
 8001168:	24000514 	.word	0x24000514
 800116c:	24002278 	.word	0x24002278

08001170 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001174:	4b37      	ldr	r3, [pc, #220]	; (8001254 <SystemInit+0xe4>)
 8001176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800117a:	4a36      	ldr	r2, [pc, #216]	; (8001254 <SystemInit+0xe4>)
 800117c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001180:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001184:	4b34      	ldr	r3, [pc, #208]	; (8001258 <SystemInit+0xe8>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 030f 	and.w	r3, r3, #15
 800118c:	2b06      	cmp	r3, #6
 800118e:	d807      	bhi.n	80011a0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001190:	4b31      	ldr	r3, [pc, #196]	; (8001258 <SystemInit+0xe8>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f023 030f 	bic.w	r3, r3, #15
 8001198:	4a2f      	ldr	r2, [pc, #188]	; (8001258 <SystemInit+0xe8>)
 800119a:	f043 0307 	orr.w	r3, r3, #7
 800119e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80011a0:	4b2e      	ldr	r3, [pc, #184]	; (800125c <SystemInit+0xec>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a2d      	ldr	r2, [pc, #180]	; (800125c <SystemInit+0xec>)
 80011a6:	f043 0301 	orr.w	r3, r3, #1
 80011aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011ac:	4b2b      	ldr	r3, [pc, #172]	; (800125c <SystemInit+0xec>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011b2:	4b2a      	ldr	r3, [pc, #168]	; (800125c <SystemInit+0xec>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	4929      	ldr	r1, [pc, #164]	; (800125c <SystemInit+0xec>)
 80011b8:	4b29      	ldr	r3, [pc, #164]	; (8001260 <SystemInit+0xf0>)
 80011ba:	4013      	ands	r3, r2
 80011bc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011be:	4b26      	ldr	r3, [pc, #152]	; (8001258 <SystemInit+0xe8>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0308 	and.w	r3, r3, #8
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d007      	beq.n	80011da <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011ca:	4b23      	ldr	r3, [pc, #140]	; (8001258 <SystemInit+0xe8>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f023 030f 	bic.w	r3, r3, #15
 80011d2:	4a21      	ldr	r2, [pc, #132]	; (8001258 <SystemInit+0xe8>)
 80011d4:	f043 0307 	orr.w	r3, r3, #7
 80011d8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80011da:	4b20      	ldr	r3, [pc, #128]	; (800125c <SystemInit+0xec>)
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80011e0:	4b1e      	ldr	r3, [pc, #120]	; (800125c <SystemInit+0xec>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80011e6:	4b1d      	ldr	r3, [pc, #116]	; (800125c <SystemInit+0xec>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80011ec:	4b1b      	ldr	r3, [pc, #108]	; (800125c <SystemInit+0xec>)
 80011ee:	4a1d      	ldr	r2, [pc, #116]	; (8001264 <SystemInit+0xf4>)
 80011f0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80011f2:	4b1a      	ldr	r3, [pc, #104]	; (800125c <SystemInit+0xec>)
 80011f4:	4a1c      	ldr	r2, [pc, #112]	; (8001268 <SystemInit+0xf8>)
 80011f6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80011f8:	4b18      	ldr	r3, [pc, #96]	; (800125c <SystemInit+0xec>)
 80011fa:	4a1c      	ldr	r2, [pc, #112]	; (800126c <SystemInit+0xfc>)
 80011fc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80011fe:	4b17      	ldr	r3, [pc, #92]	; (800125c <SystemInit+0xec>)
 8001200:	2200      	movs	r2, #0
 8001202:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001204:	4b15      	ldr	r3, [pc, #84]	; (800125c <SystemInit+0xec>)
 8001206:	4a19      	ldr	r2, [pc, #100]	; (800126c <SystemInit+0xfc>)
 8001208:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800120a:	4b14      	ldr	r3, [pc, #80]	; (800125c <SystemInit+0xec>)
 800120c:	2200      	movs	r2, #0
 800120e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <SystemInit+0xec>)
 8001212:	4a16      	ldr	r2, [pc, #88]	; (800126c <SystemInit+0xfc>)
 8001214:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001216:	4b11      	ldr	r3, [pc, #68]	; (800125c <SystemInit+0xec>)
 8001218:	2200      	movs	r2, #0
 800121a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800121c:	4b0f      	ldr	r3, [pc, #60]	; (800125c <SystemInit+0xec>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a0e      	ldr	r2, [pc, #56]	; (800125c <SystemInit+0xec>)
 8001222:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001226:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <SystemInit+0xec>)
 800122a:	2200      	movs	r2, #0
 800122c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800122e:	4b10      	ldr	r3, [pc, #64]	; (8001270 <SystemInit+0x100>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	4b10      	ldr	r3, [pc, #64]	; (8001274 <SystemInit+0x104>)
 8001234:	4013      	ands	r3, r2
 8001236:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800123a:	d202      	bcs.n	8001242 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800123c:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <SystemInit+0x108>)
 800123e:	2201      	movs	r2, #1
 8001240:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001242:	4b0e      	ldr	r3, [pc, #56]	; (800127c <SystemInit+0x10c>)
 8001244:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001248:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	e000ed00 	.word	0xe000ed00
 8001258:	52002000 	.word	0x52002000
 800125c:	58024400 	.word	0x58024400
 8001260:	eaf6ed7f 	.word	0xeaf6ed7f
 8001264:	02020200 	.word	0x02020200
 8001268:	01ff0000 	.word	0x01ff0000
 800126c:	01010280 	.word	0x01010280
 8001270:	5c001000 	.word	0x5c001000
 8001274:	ffff0000 	.word	0xffff0000
 8001278:	51008108 	.word	0x51008108
 800127c:	52004000 	.word	0x52004000

08001280 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001280:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001284:	f7ff ff74 	bl	8001170 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001288:	480c      	ldr	r0, [pc, #48]	; (80012bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800128a:	490d      	ldr	r1, [pc, #52]	; (80012c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800128c:	4a0d      	ldr	r2, [pc, #52]	; (80012c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800128e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001290:	e002      	b.n	8001298 <LoopCopyDataInit>

08001292 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001292:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001294:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001296:	3304      	adds	r3, #4

08001298 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001298:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800129a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800129c:	d3f9      	bcc.n	8001292 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800129e:	4a0a      	ldr	r2, [pc, #40]	; (80012c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012a0:	4c0a      	ldr	r4, [pc, #40]	; (80012cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80012a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a4:	e001      	b.n	80012aa <LoopFillZerobss>

080012a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a8:	3204      	adds	r2, #4

080012aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012ac:	d3fb      	bcc.n	80012a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012ae:	f00b fb17 	bl	800c8e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012b2:	f7ff fb0d 	bl	80008d0 <main>
  bx  lr
 80012b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012b8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80012bc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012c0:	2400030c 	.word	0x2400030c
  ldr r2, =_sidata
 80012c4:	0800ebb4 	.word	0x0800ebb4
  ldr r2, =_sbss
 80012c8:	2400030c 	.word	0x2400030c
  ldr r4, =_ebss
 80012cc:	24002274 	.word	0x24002274

080012d0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012d0:	e7fe      	b.n	80012d0 <ADC3_IRQHandler>
	...

080012d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012da:	2003      	movs	r0, #3
 80012dc:	f001 fa30 	bl	8002740 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012e0:	f003 fd32 	bl	8004d48 <HAL_RCC_GetSysClockFreq>
 80012e4:	4602      	mov	r2, r0
 80012e6:	4b15      	ldr	r3, [pc, #84]	; (800133c <HAL_Init+0x68>)
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	0a1b      	lsrs	r3, r3, #8
 80012ec:	f003 030f 	and.w	r3, r3, #15
 80012f0:	4913      	ldr	r1, [pc, #76]	; (8001340 <HAL_Init+0x6c>)
 80012f2:	5ccb      	ldrb	r3, [r1, r3]
 80012f4:	f003 031f 	and.w	r3, r3, #31
 80012f8:	fa22 f303 	lsr.w	r3, r2, r3
 80012fc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012fe:	4b0f      	ldr	r3, [pc, #60]	; (800133c <HAL_Init+0x68>)
 8001300:	699b      	ldr	r3, [r3, #24]
 8001302:	f003 030f 	and.w	r3, r3, #15
 8001306:	4a0e      	ldr	r2, [pc, #56]	; (8001340 <HAL_Init+0x6c>)
 8001308:	5cd3      	ldrb	r3, [r2, r3]
 800130a:	f003 031f 	and.w	r3, r3, #31
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	fa22 f303 	lsr.w	r3, r2, r3
 8001314:	4a0b      	ldr	r2, [pc, #44]	; (8001344 <HAL_Init+0x70>)
 8001316:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001318:	4a0b      	ldr	r2, [pc, #44]	; (8001348 <HAL_Init+0x74>)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800131e:	200f      	movs	r0, #15
 8001320:	f000 f814 	bl	800134c <HAL_InitTick>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e002      	b.n	8001334 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800132e:	f7ff fd4b 	bl	8000dc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001332:	2300      	movs	r3, #0
}
 8001334:	4618      	mov	r0, r3
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	58024400 	.word	0x58024400
 8001340:	0800e828 	.word	0x0800e828
 8001344:	24000044 	.word	0x24000044
 8001348:	24000040 	.word	0x24000040

0800134c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001354:	4b15      	ldr	r3, [pc, #84]	; (80013ac <HAL_InitTick+0x60>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d101      	bne.n	8001360 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e021      	b.n	80013a4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001360:	4b13      	ldr	r3, [pc, #76]	; (80013b0 <HAL_InitTick+0x64>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	4b11      	ldr	r3, [pc, #68]	; (80013ac <HAL_InitTick+0x60>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	4619      	mov	r1, r3
 800136a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001372:	fbb2 f3f3 	udiv	r3, r2, r3
 8001376:	4618      	mov	r0, r3
 8001378:	f001 fa15 	bl	80027a6 <HAL_SYSTICK_Config>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e00e      	b.n	80013a4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2b0f      	cmp	r3, #15
 800138a:	d80a      	bhi.n	80013a2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800138c:	2200      	movs	r2, #0
 800138e:	6879      	ldr	r1, [r7, #4]
 8001390:	f04f 30ff 	mov.w	r0, #4294967295
 8001394:	f001 f9df 	bl	8002756 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001398:	4a06      	ldr	r2, [pc, #24]	; (80013b4 <HAL_InitTick+0x68>)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800139e:	2300      	movs	r3, #0
 80013a0:	e000      	b.n	80013a4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	2400004c 	.word	0x2400004c
 80013b0:	24000040 	.word	0x24000040
 80013b4:	24000048 	.word	0x24000048

080013b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <HAL_IncTick+0x20>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	461a      	mov	r2, r3
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <HAL_IncTick+0x24>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4413      	add	r3, r2
 80013c8:	4a04      	ldr	r2, [pc, #16]	; (80013dc <HAL_IncTick+0x24>)
 80013ca:	6013      	str	r3, [r2, #0]
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	2400004c 	.word	0x2400004c
 80013dc:	24000518 	.word	0x24000518

080013e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  return uwTick;
 80013e4:	4b03      	ldr	r3, [pc, #12]	; (80013f4 <HAL_GetTick+0x14>)
 80013e6:	681b      	ldr	r3, [r3, #0]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	24000518 	.word	0x24000518

080013f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001400:	f7ff ffee 	bl	80013e0 <HAL_GetTick>
 8001404:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001410:	d005      	beq.n	800141e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001412:	4b0a      	ldr	r3, [pc, #40]	; (800143c <HAL_Delay+0x44>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	461a      	mov	r2, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	4413      	add	r3, r2
 800141c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800141e:	bf00      	nop
 8001420:	f7ff ffde 	bl	80013e0 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	68fa      	ldr	r2, [r7, #12]
 800142c:	429a      	cmp	r2, r3
 800142e:	d8f7      	bhi.n	8001420 <HAL_Delay+0x28>
  {
  }
}
 8001430:	bf00      	nop
 8001432:	bf00      	nop
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	2400004c 	.word	0x2400004c

08001440 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001444:	4b03      	ldr	r3, [pc, #12]	; (8001454 <HAL_GetREVID+0x14>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	0c1b      	lsrs	r3, r3, #16
}
 800144a:	4618      	mov	r0, r3
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	5c001000 	.word	0x5c001000

08001458 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001462:	4b07      	ldr	r3, [pc, #28]	; (8001480 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001464:	685a      	ldr	r2, [r3, #4]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	43db      	mvns	r3, r3
 800146a:	401a      	ands	r2, r3
 800146c:	4904      	ldr	r1, [pc, #16]	; (8001480 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	4313      	orrs	r3, r2
 8001472:	604b      	str	r3, [r1, #4]
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	58000400 	.word	0x58000400

08001484 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	431a      	orrs	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	609a      	str	r2, [r3, #8]
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80014aa:	b480      	push	{r7}
 80014ac:	b083      	sub	sp, #12
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
 80014b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	431a      	orrs	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	609a      	str	r2, [r3, #8]
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b087      	sub	sp, #28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
 80014f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	3360      	adds	r3, #96	; 0x60
 80014fe:	461a      	mov	r2, r3
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	4413      	add	r3, r2
 8001506:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	430b      	orrs	r3, r1
 800151a:	431a      	orrs	r2, r3
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001520:	bf00      	nop
 8001522:	371c      	adds	r7, #28
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	f003 031f 	and.w	r3, r3, #31
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	fa01 f303 	lsl.w	r3, r1, r3
 800154c:	431a      	orrs	r2, r3
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	611a      	str	r2, [r3, #16]
}
 8001552:	bf00      	nop
 8001554:	3714      	adds	r7, #20
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800155e:	b480      	push	{r7}
 8001560:	b087      	sub	sp, #28
 8001562:	af00      	add	r7, sp, #0
 8001564:	60f8      	str	r0, [r7, #12]
 8001566:	60b9      	str	r1, [r7, #8]
 8001568:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	3360      	adds	r3, #96	; 0x60
 800156e:	461a      	mov	r2, r3
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	431a      	orrs	r2, r3
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	601a      	str	r2, [r3, #0]
  }
}
 8001588:	bf00      	nop
 800158a:	371c      	adds	r7, #28
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001594:	b480      	push	{r7}
 8001596:	b087      	sub	sp, #28
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	3330      	adds	r3, #48	; 0x30
 80015a4:	461a      	mov	r2, r3
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	0a1b      	lsrs	r3, r3, #8
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	f003 030c 	and.w	r3, r3, #12
 80015b0:	4413      	add	r3, r2
 80015b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	f003 031f 	and.w	r3, r3, #31
 80015be:	211f      	movs	r1, #31
 80015c0:	fa01 f303 	lsl.w	r3, r1, r3
 80015c4:	43db      	mvns	r3, r3
 80015c6:	401a      	ands	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	0e9b      	lsrs	r3, r3, #26
 80015cc:	f003 011f 	and.w	r1, r3, #31
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	f003 031f 	and.w	r3, r3, #31
 80015d6:	fa01 f303 	lsl.w	r3, r1, r3
 80015da:	431a      	orrs	r2, r3
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80015e0:	bf00      	nop
 80015e2:	371c      	adds	r7, #28
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b087      	sub	sp, #28
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	3314      	adds	r3, #20
 80015fc:	461a      	mov	r2, r3
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	0e5b      	lsrs	r3, r3, #25
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	f003 0304 	and.w	r3, r3, #4
 8001608:	4413      	add	r3, r2
 800160a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	0d1b      	lsrs	r3, r3, #20
 8001614:	f003 031f 	and.w	r3, r3, #31
 8001618:	2107      	movs	r1, #7
 800161a:	fa01 f303 	lsl.w	r3, r1, r3
 800161e:	43db      	mvns	r3, r3
 8001620:	401a      	ands	r2, r3
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	0d1b      	lsrs	r3, r3, #20
 8001626:	f003 031f 	and.w	r3, r3, #31
 800162a:	6879      	ldr	r1, [r7, #4]
 800162c:	fa01 f303 	lsl.w	r3, r1, r3
 8001630:	431a      	orrs	r2, r3
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001636:	bf00      	nop
 8001638:	371c      	adds	r7, #28
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
	...

08001644 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800165c:	43db      	mvns	r3, r3
 800165e:	401a      	ands	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f003 0318 	and.w	r3, r3, #24
 8001666:	4908      	ldr	r1, [pc, #32]	; (8001688 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001668:	40d9      	lsrs	r1, r3
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	400b      	ands	r3, r1
 800166e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001672:	431a      	orrs	r2, r3
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800167a:	bf00      	nop
 800167c:	3714      	adds	r7, #20
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	000fffff 	.word	0x000fffff

0800168c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689a      	ldr	r2, [r3, #8]
 8001698:	4b04      	ldr	r3, [pc, #16]	; (80016ac <LL_ADC_DisableDeepPowerDown+0x20>)
 800169a:	4013      	ands	r3, r2
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	6093      	str	r3, [r2, #8]
}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	5fffffc0 	.word	0x5fffffc0

080016b0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80016c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80016c4:	d101      	bne.n	80016ca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80016c6:	2301      	movs	r3, #1
 80016c8:	e000      	b.n	80016cc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689a      	ldr	r2, [r3, #8]
 80016e4:	4b05      	ldr	r3, [pc, #20]	; (80016fc <LL_ADC_EnableInternalRegulator+0x24>)
 80016e6:	4013      	ands	r3, r2
 80016e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	6fffffc0 	.word	0x6fffffc0

08001700 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001710:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001714:	d101      	bne.n	800171a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001716:	2301      	movs	r3, #1
 8001718:	e000      	b.n	800171c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800171a:	2300      	movs	r3, #0
}
 800171c:	4618      	mov	r0, r3
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f003 0301 	and.w	r3, r3, #1
 8001738:	2b01      	cmp	r3, #1
 800173a:	d101      	bne.n	8001740 <LL_ADC_IsEnabled+0x18>
 800173c:	2301      	movs	r3, #1
 800173e:	e000      	b.n	8001742 <LL_ADC_IsEnabled+0x1a>
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800174e:	b480      	push	{r7}
 8001750:	b083      	sub	sp, #12
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f003 0304 	and.w	r3, r3, #4
 800175e:	2b04      	cmp	r3, #4
 8001760:	d101      	bne.n	8001766 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001762:	2301      	movs	r3, #1
 8001764:	e000      	b.n	8001768 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001766:	2300      	movs	r3, #0
}
 8001768:	4618      	mov	r0, r3
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f003 0308 	and.w	r3, r3, #8
 8001784:	2b08      	cmp	r3, #8
 8001786:	d101      	bne.n	800178c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001788:	2301      	movs	r3, #1
 800178a:	e000      	b.n	800178e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
	...

0800179c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800179c:	b590      	push	{r4, r7, lr}
 800179e:	b089      	sub	sp, #36	; 0x24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017a4:	2300      	movs	r3, #0
 80017a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d101      	bne.n	80017b6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e18f      	b.n	8001ad6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d109      	bne.n	80017d8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f7ff fb19 	bl	8000dfc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff67 	bl	80016b0 <LL_ADC_IsDeepPowerDownEnabled>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d004      	beq.n	80017f2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff ff4d 	bl	800168c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff ff82 	bl	8001700 <LL_ADC_IsInternalRegulatorEnabled>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d114      	bne.n	800182c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff ff66 	bl	80016d8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800180c:	4b87      	ldr	r3, [pc, #540]	; (8001a2c <HAL_ADC_Init+0x290>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	099b      	lsrs	r3, r3, #6
 8001812:	4a87      	ldr	r2, [pc, #540]	; (8001a30 <HAL_ADC_Init+0x294>)
 8001814:	fba2 2303 	umull	r2, r3, r2, r3
 8001818:	099b      	lsrs	r3, r3, #6
 800181a:	3301      	adds	r3, #1
 800181c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800181e:	e002      	b.n	8001826 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	3b01      	subs	r3, #1
 8001824:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d1f9      	bne.n	8001820 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff ff65 	bl	8001700 <LL_ADC_IsInternalRegulatorEnabled>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d10d      	bne.n	8001858 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001840:	f043 0210 	orr.w	r2, r3, #16
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184c:	f043 0201 	orr.w	r2, r3, #1
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff ff76 	bl	800174e <LL_ADC_REG_IsConversionOngoing>
 8001862:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001868:	f003 0310 	and.w	r3, r3, #16
 800186c:	2b00      	cmp	r3, #0
 800186e:	f040 8129 	bne.w	8001ac4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	2b00      	cmp	r3, #0
 8001876:	f040 8125 	bne.w	8001ac4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800187e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001882:	f043 0202 	orr.w	r2, r3, #2
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff ff4a 	bl	8001728 <LL_ADC_IsEnabled>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d136      	bne.n	8001908 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a65      	ldr	r2, [pc, #404]	; (8001a34 <HAL_ADC_Init+0x298>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d004      	beq.n	80018ae <HAL_ADC_Init+0x112>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a63      	ldr	r2, [pc, #396]	; (8001a38 <HAL_ADC_Init+0x29c>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d10e      	bne.n	80018cc <HAL_ADC_Init+0x130>
 80018ae:	4861      	ldr	r0, [pc, #388]	; (8001a34 <HAL_ADC_Init+0x298>)
 80018b0:	f7ff ff3a 	bl	8001728 <LL_ADC_IsEnabled>
 80018b4:	4604      	mov	r4, r0
 80018b6:	4860      	ldr	r0, [pc, #384]	; (8001a38 <HAL_ADC_Init+0x29c>)
 80018b8:	f7ff ff36 	bl	8001728 <LL_ADC_IsEnabled>
 80018bc:	4603      	mov	r3, r0
 80018be:	4323      	orrs	r3, r4
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	bf0c      	ite	eq
 80018c4:	2301      	moveq	r3, #1
 80018c6:	2300      	movne	r3, #0
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	e008      	b.n	80018de <HAL_ADC_Init+0x142>
 80018cc:	485b      	ldr	r0, [pc, #364]	; (8001a3c <HAL_ADC_Init+0x2a0>)
 80018ce:	f7ff ff2b 	bl	8001728 <LL_ADC_IsEnabled>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	bf0c      	ite	eq
 80018d8:	2301      	moveq	r3, #1
 80018da:	2300      	movne	r3, #0
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d012      	beq.n	8001908 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a53      	ldr	r2, [pc, #332]	; (8001a34 <HAL_ADC_Init+0x298>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d004      	beq.n	80018f6 <HAL_ADC_Init+0x15a>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a51      	ldr	r2, [pc, #324]	; (8001a38 <HAL_ADC_Init+0x29c>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d101      	bne.n	80018fa <HAL_ADC_Init+0x15e>
 80018f6:	4a52      	ldr	r2, [pc, #328]	; (8001a40 <HAL_ADC_Init+0x2a4>)
 80018f8:	e000      	b.n	80018fc <HAL_ADC_Init+0x160>
 80018fa:	4a52      	ldr	r2, [pc, #328]	; (8001a44 <HAL_ADC_Init+0x2a8>)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	4619      	mov	r1, r3
 8001902:	4610      	mov	r0, r2
 8001904:	f7ff fdbe 	bl	8001484 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001908:	f7ff fd9a 	bl	8001440 <HAL_GetREVID>
 800190c:	4603      	mov	r3, r0
 800190e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001912:	4293      	cmp	r3, r2
 8001914:	d914      	bls.n	8001940 <HAL_ADC_Init+0x1a4>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	2b10      	cmp	r3, #16
 800191c:	d110      	bne.n	8001940 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	7d5b      	ldrb	r3, [r3, #21]
 8001922:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001928:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800192e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	7f1b      	ldrb	r3, [r3, #28]
 8001934:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001936:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001938:	f043 030c 	orr.w	r3, r3, #12
 800193c:	61bb      	str	r3, [r7, #24]
 800193e:	e00d      	b.n	800195c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	7d5b      	ldrb	r3, [r3, #21]
 8001944:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800194a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001950:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	7f1b      	ldrb	r3, [r3, #28]
 8001956:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001958:	4313      	orrs	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	7f1b      	ldrb	r3, [r3, #28]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d106      	bne.n	8001972 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a1b      	ldr	r3, [r3, #32]
 8001968:	3b01      	subs	r3, #1
 800196a:	045b      	lsls	r3, r3, #17
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	4313      	orrs	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001976:	2b00      	cmp	r3, #0
 8001978:	d009      	beq.n	800198e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001986:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4313      	orrs	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	68da      	ldr	r2, [r3, #12]
 8001994:	4b2c      	ldr	r3, [pc, #176]	; (8001a48 <HAL_ADC_Init+0x2ac>)
 8001996:	4013      	ands	r3, r2
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	6812      	ldr	r2, [r2, #0]
 800199c:	69b9      	ldr	r1, [r7, #24]
 800199e:	430b      	orrs	r3, r1
 80019a0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff fed1 	bl	800174e <LL_ADC_REG_IsConversionOngoing>
 80019ac:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff fede 	bl	8001774 <LL_ADC_INJ_IsConversionOngoing>
 80019b8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d15f      	bne.n	8001a80 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d15c      	bne.n	8001a80 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	7d1b      	ldrb	r3, [r3, #20]
 80019ca:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80019d0:	4313      	orrs	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68da      	ldr	r2, [r3, #12]
 80019da:	4b1c      	ldr	r3, [pc, #112]	; (8001a4c <HAL_ADC_Init+0x2b0>)
 80019dc:	4013      	ands	r3, r2
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	6812      	ldr	r2, [r2, #0]
 80019e2:	69b9      	ldr	r1, [r7, #24]
 80019e4:	430b      	orrs	r3, r1
 80019e6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d130      	bne.n	8001a54 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	691a      	ldr	r2, [r3, #16]
 80019fe:	4b14      	ldr	r3, [pc, #80]	; (8001a50 <HAL_ADC_Init+0x2b4>)
 8001a00:	4013      	ands	r3, r2
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a06:	3a01      	subs	r2, #1
 8001a08:	0411      	lsls	r1, r2, #16
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a0e:	4311      	orrs	r1, r2
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001a14:	4311      	orrs	r1, r2
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	431a      	orrs	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f042 0201 	orr.w	r2, r2, #1
 8001a26:	611a      	str	r2, [r3, #16]
 8001a28:	e01c      	b.n	8001a64 <HAL_ADC_Init+0x2c8>
 8001a2a:	bf00      	nop
 8001a2c:	24000040 	.word	0x24000040
 8001a30:	053e2d63 	.word	0x053e2d63
 8001a34:	40022000 	.word	0x40022000
 8001a38:	40022100 	.word	0x40022100
 8001a3c:	58026000 	.word	0x58026000
 8001a40:	40022300 	.word	0x40022300
 8001a44:	58026300 	.word	0x58026300
 8001a48:	fff0c003 	.word	0xfff0c003
 8001a4c:	ffffbffc 	.word	0xffffbffc
 8001a50:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	691a      	ldr	r2, [r3, #16]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f022 0201 	bic.w	r2, r2, #1
 8001a62:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	430a      	orrs	r2, r1
 8001a78:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 fb80 	bl	8002180 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d10c      	bne.n	8001aa2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	f023 010f 	bic.w	r1, r3, #15
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	1e5a      	subs	r2, r3, #1
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	631a      	str	r2, [r3, #48]	; 0x30
 8001aa0:	e007      	b.n	8001ab2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f022 020f 	bic.w	r2, r2, #15
 8001ab0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab6:	f023 0303 	bic.w	r3, r3, #3
 8001aba:	f043 0201 	orr.w	r2, r3, #1
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	655a      	str	r2, [r3, #84]	; 0x54
 8001ac2:	e007      	b.n	8001ad4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac8:	f043 0210 	orr.w	r2, r3, #16
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ad4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3724      	adds	r7, #36	; 0x24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd90      	pop	{r4, r7, pc}
 8001ade:	bf00      	nop

08001ae0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ae0:	b590      	push	{r4, r7, lr}
 8001ae2:	b0a1      	sub	sp, #132	; 0x84
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aea:	2300      	movs	r3, #0
 8001aec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	4a9d      	ldr	r2, [pc, #628]	; (8001d70 <HAL_ADC_ConfigChannel+0x290>)
 8001afa:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d101      	bne.n	8001b0a <HAL_ADC_ConfigChannel+0x2a>
 8001b06:	2302      	movs	r3, #2
 8001b08:	e321      	b.n	800214e <HAL_ADC_ConfigChannel+0x66e>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff fe19 	bl	800174e <LL_ADC_REG_IsConversionOngoing>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f040 8306 	bne.w	8002130 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d108      	bne.n	8001b42 <HAL_ADC_ConfigChannel+0x62>
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	0e9b      	lsrs	r3, r3, #26
 8001b36:	f003 031f 	and.w	r3, r3, #31
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	e016      	b.n	8001b70 <HAL_ADC_ConfigChannel+0x90>
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b4a:	fa93 f3a3 	rbit	r3, r3
 8001b4e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b52:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001b5a:	2320      	movs	r3, #32
 8001b5c:	e003      	b.n	8001b66 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001b5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b60:	fab3 f383 	clz	r3, r3
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	f003 031f 	and.w	r3, r3, #31
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	6812      	ldr	r2, [r2, #0]
 8001b74:	69d1      	ldr	r1, [r2, #28]
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	6812      	ldr	r2, [r2, #0]
 8001b7a:	430b      	orrs	r3, r1
 8001b7c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6818      	ldr	r0, [r3, #0]
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	6859      	ldr	r1, [r3, #4]
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	f7ff fd02 	bl	8001594 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff fdda 	bl	800174e <LL_ADC_REG_IsConversionOngoing>
 8001b9a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff fde7 	bl	8001774 <LL_ADC_INJ_IsConversionOngoing>
 8001ba6:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ba8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f040 80b3 	bne.w	8001d16 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001bb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f040 80af 	bne.w	8001d16 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6818      	ldr	r0, [r3, #0]
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	6819      	ldr	r1, [r3, #0]
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	f7ff fd11 	bl	80015ec <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001bca:	4b6a      	ldr	r3, [pc, #424]	; (8001d74 <HAL_ADC_ConfigChannel+0x294>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001bd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001bd6:	d10b      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x110>
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	695a      	ldr	r2, [r3, #20]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	089b      	lsrs	r3, r3, #2
 8001be4:	f003 0307 	and.w	r3, r3, #7
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	e01d      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x14c>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	f003 0310 	and.w	r3, r3, #16
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d10b      	bne.n	8001c16 <HAL_ADC_ConfigChannel+0x136>
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	695a      	ldr	r2, [r3, #20]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	089b      	lsrs	r3, r3, #2
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	e00a      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x14c>
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	695a      	ldr	r2, [r3, #20]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	089b      	lsrs	r3, r3, #2
 8001c22:	f003 0304 	and.w	r3, r3, #4
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	d027      	beq.n	8001c86 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6818      	ldr	r0, [r3, #0]
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	6919      	ldr	r1, [r3, #16]
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c44:	f7ff fc52 	bl	80014ec <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6818      	ldr	r0, [r3, #0]
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	6919      	ldr	r1, [r3, #16]
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	7e5b      	ldrb	r3, [r3, #25]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d102      	bne.n	8001c5e <HAL_ADC_ConfigChannel+0x17e>
 8001c58:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001c5c:	e000      	b.n	8001c60 <HAL_ADC_ConfigChannel+0x180>
 8001c5e:	2300      	movs	r3, #0
 8001c60:	461a      	mov	r2, r3
 8001c62:	f7ff fc7c 	bl	800155e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6818      	ldr	r0, [r3, #0]
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	6919      	ldr	r1, [r3, #16]
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	7e1b      	ldrb	r3, [r3, #24]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d102      	bne.n	8001c7c <HAL_ADC_ConfigChannel+0x19c>
 8001c76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c7a:	e000      	b.n	8001c7e <HAL_ADC_ConfigChannel+0x19e>
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	461a      	mov	r2, r3
 8001c80:	f7ff fc54 	bl	800152c <LL_ADC_SetDataRightShift>
 8001c84:	e047      	b.n	8001d16 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c8c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	069b      	lsls	r3, r3, #26
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d107      	bne.n	8001caa <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ca8:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001cb0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	069b      	lsls	r3, r3, #26
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d107      	bne.n	8001cce <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ccc:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001cd4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	069b      	lsls	r3, r3, #26
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d107      	bne.n	8001cf2 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001cf0:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cf8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	069b      	lsls	r3, r3, #26
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d107      	bne.n	8001d16 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d14:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff fd04 	bl	8001728 <LL_ADC_IsEnabled>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f040 820d 	bne.w	8002142 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6818      	ldr	r0, [r3, #0]
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	6819      	ldr	r1, [r3, #0]
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	461a      	mov	r2, r3
 8001d36:	f7ff fc85 	bl	8001644 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	4a0c      	ldr	r2, [pc, #48]	; (8001d70 <HAL_ADC_ConfigChannel+0x290>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	f040 8133 	bne.w	8001fac <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d110      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x298>
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	0e9b      	lsrs	r3, r3, #26
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	f003 031f 	and.w	r3, r3, #31
 8001d62:	2b09      	cmp	r3, #9
 8001d64:	bf94      	ite	ls
 8001d66:	2301      	movls	r3, #1
 8001d68:	2300      	movhi	r3, #0
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	e01e      	b.n	8001dac <HAL_ADC_ConfigChannel+0x2cc>
 8001d6e:	bf00      	nop
 8001d70:	47ff0000 	.word	0x47ff0000
 8001d74:	5c001000 	.word	0x5c001000
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d80:	fa93 f3a3 	rbit	r3, r3
 8001d84:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001d86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d88:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001d8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d101      	bne.n	8001d94 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8001d90:	2320      	movs	r3, #32
 8001d92:	e003      	b.n	8001d9c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8001d94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d96:	fab3 f383 	clz	r3, r3
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	f003 031f 	and.w	r3, r3, #31
 8001da2:	2b09      	cmp	r3, #9
 8001da4:	bf94      	ite	ls
 8001da6:	2301      	movls	r3, #1
 8001da8:	2300      	movhi	r3, #0
 8001daa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d079      	beq.n	8001ea4 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d107      	bne.n	8001dcc <HAL_ADC_ConfigChannel+0x2ec>
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	0e9b      	lsrs	r3, r3, #26
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	069b      	lsls	r3, r3, #26
 8001dc6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dca:	e015      	b.n	8001df8 <HAL_ADC_ConfigChannel+0x318>
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dd4:	fa93 f3a3 	rbit	r3, r3
 8001dd8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001dda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ddc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001dde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d101      	bne.n	8001de8 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8001de4:	2320      	movs	r3, #32
 8001de6:	e003      	b.n	8001df0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001de8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dea:	fab3 f383 	clz	r3, r3
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	3301      	adds	r3, #1
 8001df2:	069b      	lsls	r3, r3, #26
 8001df4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d109      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x338>
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	0e9b      	lsrs	r3, r3, #26
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	f003 031f 	and.w	r3, r3, #31
 8001e10:	2101      	movs	r1, #1
 8001e12:	fa01 f303 	lsl.w	r3, r1, r3
 8001e16:	e017      	b.n	8001e48 <HAL_ADC_ConfigChannel+0x368>
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e20:	fa93 f3a3 	rbit	r3, r3
 8001e24:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e28:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001e2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d101      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8001e30:	2320      	movs	r3, #32
 8001e32:	e003      	b.n	8001e3c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8001e34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e36:	fab3 f383 	clz	r3, r3
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	f003 031f 	and.w	r3, r3, #31
 8001e42:	2101      	movs	r1, #1
 8001e44:	fa01 f303 	lsl.w	r3, r1, r3
 8001e48:	ea42 0103 	orr.w	r1, r2, r3
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d10a      	bne.n	8001e6e <HAL_ADC_ConfigChannel+0x38e>
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	0e9b      	lsrs	r3, r3, #26
 8001e5e:	3301      	adds	r3, #1
 8001e60:	f003 021f 	and.w	r2, r3, #31
 8001e64:	4613      	mov	r3, r2
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	4413      	add	r3, r2
 8001e6a:	051b      	lsls	r3, r3, #20
 8001e6c:	e018      	b.n	8001ea0 <HAL_ADC_ConfigChannel+0x3c0>
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e76:	fa93 f3a3 	rbit	r3, r3
 8001e7a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e7e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8001e86:	2320      	movs	r3, #32
 8001e88:	e003      	b.n	8001e92 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8001e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e8c:	fab3 f383 	clz	r3, r3
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	3301      	adds	r3, #1
 8001e94:	f003 021f 	and.w	r2, r3, #31
 8001e98:	4613      	mov	r3, r2
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	4413      	add	r3, r2
 8001e9e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ea0:	430b      	orrs	r3, r1
 8001ea2:	e07e      	b.n	8001fa2 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d107      	bne.n	8001ec0 <HAL_ADC_ConfigChannel+0x3e0>
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	0e9b      	lsrs	r3, r3, #26
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	069b      	lsls	r3, r3, #26
 8001eba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ebe:	e015      	b.n	8001eec <HAL_ADC_ConfigChannel+0x40c>
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec8:	fa93 f3a3 	rbit	r3, r3
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d101      	bne.n	8001edc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001ed8:	2320      	movs	r3, #32
 8001eda:	e003      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ede:	fab3 f383 	clz	r3, r3
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	069b      	lsls	r3, r3, #26
 8001ee8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d109      	bne.n	8001f0c <HAL_ADC_ConfigChannel+0x42c>
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	0e9b      	lsrs	r3, r3, #26
 8001efe:	3301      	adds	r3, #1
 8001f00:	f003 031f 	and.w	r3, r3, #31
 8001f04:	2101      	movs	r1, #1
 8001f06:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0a:	e017      	b.n	8001f3c <HAL_ADC_ConfigChannel+0x45c>
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	fa93 f3a3 	rbit	r3, r3
 8001f18:	61bb      	str	r3, [r7, #24]
  return result;
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001f1e:	6a3b      	ldr	r3, [r7, #32]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8001f24:	2320      	movs	r3, #32
 8001f26:	e003      	b.n	8001f30 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8001f28:	6a3b      	ldr	r3, [r7, #32]
 8001f2a:	fab3 f383 	clz	r3, r3
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	3301      	adds	r3, #1
 8001f32:	f003 031f 	and.w	r3, r3, #31
 8001f36:	2101      	movs	r1, #1
 8001f38:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3c:	ea42 0103 	orr.w	r1, r2, r3
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d10d      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x488>
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	0e9b      	lsrs	r3, r3, #26
 8001f52:	3301      	adds	r3, #1
 8001f54:	f003 021f 	and.w	r2, r3, #31
 8001f58:	4613      	mov	r3, r2
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	4413      	add	r3, r2
 8001f5e:	3b1e      	subs	r3, #30
 8001f60:	051b      	lsls	r3, r3, #20
 8001f62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f66:	e01b      	b.n	8001fa0 <HAL_ADC_ConfigChannel+0x4c0>
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	fa93 f3a3 	rbit	r3, r3
 8001f74:	60fb      	str	r3, [r7, #12]
  return result;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8001f80:	2320      	movs	r3, #32
 8001f82:	e003      	b.n	8001f8c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	fab3 f383 	clz	r3, r3
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	f003 021f 	and.w	r2, r3, #31
 8001f92:	4613      	mov	r3, r2
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	4413      	add	r3, r2
 8001f98:	3b1e      	subs	r3, #30
 8001f9a:	051b      	lsls	r3, r3, #20
 8001f9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fa0:	430b      	orrs	r3, r1
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	6892      	ldr	r2, [r2, #8]
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	f7ff fb20 	bl	80015ec <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f280 80c6 	bge.w	8002142 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a67      	ldr	r2, [pc, #412]	; (8002158 <HAL_ADC_ConfigChannel+0x678>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d004      	beq.n	8001fca <HAL_ADC_ConfigChannel+0x4ea>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a65      	ldr	r2, [pc, #404]	; (800215c <HAL_ADC_ConfigChannel+0x67c>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d101      	bne.n	8001fce <HAL_ADC_ConfigChannel+0x4ee>
 8001fca:	4b65      	ldr	r3, [pc, #404]	; (8002160 <HAL_ADC_ConfigChannel+0x680>)
 8001fcc:	e000      	b.n	8001fd0 <HAL_ADC_ConfigChannel+0x4f0>
 8001fce:	4b65      	ldr	r3, [pc, #404]	; (8002164 <HAL_ADC_ConfigChannel+0x684>)
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff fa7d 	bl	80014d0 <LL_ADC_GetCommonPathInternalCh>
 8001fd6:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a5e      	ldr	r2, [pc, #376]	; (8002158 <HAL_ADC_ConfigChannel+0x678>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d004      	beq.n	8001fec <HAL_ADC_ConfigChannel+0x50c>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a5d      	ldr	r2, [pc, #372]	; (800215c <HAL_ADC_ConfigChannel+0x67c>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d10e      	bne.n	800200a <HAL_ADC_ConfigChannel+0x52a>
 8001fec:	485a      	ldr	r0, [pc, #360]	; (8002158 <HAL_ADC_ConfigChannel+0x678>)
 8001fee:	f7ff fb9b 	bl	8001728 <LL_ADC_IsEnabled>
 8001ff2:	4604      	mov	r4, r0
 8001ff4:	4859      	ldr	r0, [pc, #356]	; (800215c <HAL_ADC_ConfigChannel+0x67c>)
 8001ff6:	f7ff fb97 	bl	8001728 <LL_ADC_IsEnabled>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	4323      	orrs	r3, r4
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	bf0c      	ite	eq
 8002002:	2301      	moveq	r3, #1
 8002004:	2300      	movne	r3, #0
 8002006:	b2db      	uxtb	r3, r3
 8002008:	e008      	b.n	800201c <HAL_ADC_ConfigChannel+0x53c>
 800200a:	4857      	ldr	r0, [pc, #348]	; (8002168 <HAL_ADC_ConfigChannel+0x688>)
 800200c:	f7ff fb8c 	bl	8001728 <LL_ADC_IsEnabled>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	bf0c      	ite	eq
 8002016:	2301      	moveq	r3, #1
 8002018:	2300      	movne	r3, #0
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b00      	cmp	r3, #0
 800201e:	d07d      	beq.n	800211c <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a51      	ldr	r2, [pc, #324]	; (800216c <HAL_ADC_ConfigChannel+0x68c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d130      	bne.n	800208c <HAL_ADC_ConfigChannel+0x5ac>
 800202a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800202c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d12b      	bne.n	800208c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a4b      	ldr	r2, [pc, #300]	; (8002168 <HAL_ADC_ConfigChannel+0x688>)
 800203a:	4293      	cmp	r3, r2
 800203c:	f040 8081 	bne.w	8002142 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a44      	ldr	r2, [pc, #272]	; (8002158 <HAL_ADC_ConfigChannel+0x678>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d004      	beq.n	8002054 <HAL_ADC_ConfigChannel+0x574>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a43      	ldr	r2, [pc, #268]	; (800215c <HAL_ADC_ConfigChannel+0x67c>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d101      	bne.n	8002058 <HAL_ADC_ConfigChannel+0x578>
 8002054:	4a42      	ldr	r2, [pc, #264]	; (8002160 <HAL_ADC_ConfigChannel+0x680>)
 8002056:	e000      	b.n	800205a <HAL_ADC_ConfigChannel+0x57a>
 8002058:	4a42      	ldr	r2, [pc, #264]	; (8002164 <HAL_ADC_ConfigChannel+0x684>)
 800205a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800205c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002060:	4619      	mov	r1, r3
 8002062:	4610      	mov	r0, r2
 8002064:	f7ff fa21 	bl	80014aa <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002068:	4b41      	ldr	r3, [pc, #260]	; (8002170 <HAL_ADC_ConfigChannel+0x690>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	099b      	lsrs	r3, r3, #6
 800206e:	4a41      	ldr	r2, [pc, #260]	; (8002174 <HAL_ADC_ConfigChannel+0x694>)
 8002070:	fba2 2303 	umull	r2, r3, r2, r3
 8002074:	099b      	lsrs	r3, r3, #6
 8002076:	3301      	adds	r3, #1
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800207c:	e002      	b.n	8002084 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	3b01      	subs	r3, #1
 8002082:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1f9      	bne.n	800207e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800208a:	e05a      	b.n	8002142 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a39      	ldr	r2, [pc, #228]	; (8002178 <HAL_ADC_ConfigChannel+0x698>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d11e      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x5f4>
 8002096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002098:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d119      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a30      	ldr	r2, [pc, #192]	; (8002168 <HAL_ADC_ConfigChannel+0x688>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d14b      	bne.n	8002142 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a2a      	ldr	r2, [pc, #168]	; (8002158 <HAL_ADC_ConfigChannel+0x678>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d004      	beq.n	80020be <HAL_ADC_ConfigChannel+0x5de>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a28      	ldr	r2, [pc, #160]	; (800215c <HAL_ADC_ConfigChannel+0x67c>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d101      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x5e2>
 80020be:	4a28      	ldr	r2, [pc, #160]	; (8002160 <HAL_ADC_ConfigChannel+0x680>)
 80020c0:	e000      	b.n	80020c4 <HAL_ADC_ConfigChannel+0x5e4>
 80020c2:	4a28      	ldr	r2, [pc, #160]	; (8002164 <HAL_ADC_ConfigChannel+0x684>)
 80020c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ca:	4619      	mov	r1, r3
 80020cc:	4610      	mov	r0, r2
 80020ce:	f7ff f9ec 	bl	80014aa <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020d2:	e036      	b.n	8002142 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a28      	ldr	r2, [pc, #160]	; (800217c <HAL_ADC_ConfigChannel+0x69c>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d131      	bne.n	8002142 <HAL_ADC_ConfigChannel+0x662>
 80020de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d12c      	bne.n	8002142 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a1e      	ldr	r2, [pc, #120]	; (8002168 <HAL_ADC_ConfigChannel+0x688>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d127      	bne.n	8002142 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a18      	ldr	r2, [pc, #96]	; (8002158 <HAL_ADC_ConfigChannel+0x678>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d004      	beq.n	8002106 <HAL_ADC_ConfigChannel+0x626>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a16      	ldr	r2, [pc, #88]	; (800215c <HAL_ADC_ConfigChannel+0x67c>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d101      	bne.n	800210a <HAL_ADC_ConfigChannel+0x62a>
 8002106:	4a16      	ldr	r2, [pc, #88]	; (8002160 <HAL_ADC_ConfigChannel+0x680>)
 8002108:	e000      	b.n	800210c <HAL_ADC_ConfigChannel+0x62c>
 800210a:	4a16      	ldr	r2, [pc, #88]	; (8002164 <HAL_ADC_ConfigChannel+0x684>)
 800210c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800210e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002112:	4619      	mov	r1, r3
 8002114:	4610      	mov	r0, r2
 8002116:	f7ff f9c8 	bl	80014aa <LL_ADC_SetCommonPathInternalCh>
 800211a:	e012      	b.n	8002142 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002120:	f043 0220 	orr.w	r2, r3, #32
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800212e:	e008      	b.n	8002142 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002134:	f043 0220 	orr.w	r2, r3, #32
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800214a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800214e:	4618      	mov	r0, r3
 8002150:	3784      	adds	r7, #132	; 0x84
 8002152:	46bd      	mov	sp, r7
 8002154:	bd90      	pop	{r4, r7, pc}
 8002156:	bf00      	nop
 8002158:	40022000 	.word	0x40022000
 800215c:	40022100 	.word	0x40022100
 8002160:	40022300 	.word	0x40022300
 8002164:	58026300 	.word	0x58026300
 8002168:	58026000 	.word	0x58026000
 800216c:	cb840000 	.word	0xcb840000
 8002170:	24000040 	.word	0x24000040
 8002174:	053e2d63 	.word	0x053e2d63
 8002178:	c7520000 	.word	0xc7520000
 800217c:	cfb80000 	.word	0xcfb80000

08002180 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a7a      	ldr	r2, [pc, #488]	; (8002378 <ADC_ConfigureBoostMode+0x1f8>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d004      	beq.n	800219c <ADC_ConfigureBoostMode+0x1c>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a79      	ldr	r2, [pc, #484]	; (800237c <ADC_ConfigureBoostMode+0x1fc>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d109      	bne.n	80021b0 <ADC_ConfigureBoostMode+0x30>
 800219c:	4b78      	ldr	r3, [pc, #480]	; (8002380 <ADC_ConfigureBoostMode+0x200>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	bf14      	ite	ne
 80021a8:	2301      	movne	r3, #1
 80021aa:	2300      	moveq	r3, #0
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	e008      	b.n	80021c2 <ADC_ConfigureBoostMode+0x42>
 80021b0:	4b74      	ldr	r3, [pc, #464]	; (8002384 <ADC_ConfigureBoostMode+0x204>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	bf14      	ite	ne
 80021bc:	2301      	movne	r3, #1
 80021be:	2300      	moveq	r3, #0
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d01c      	beq.n	8002200 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80021c6:	f002 ff39 	bl	800503c <HAL_RCC_GetHCLKFreq>
 80021ca:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80021d4:	d010      	beq.n	80021f8 <ADC_ConfigureBoostMode+0x78>
 80021d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80021da:	d873      	bhi.n	80022c4 <ADC_ConfigureBoostMode+0x144>
 80021dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021e0:	d002      	beq.n	80021e8 <ADC_ConfigureBoostMode+0x68>
 80021e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80021e6:	d16d      	bne.n	80022c4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	0c1b      	lsrs	r3, r3, #16
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f4:	60fb      	str	r3, [r7, #12]
        break;
 80021f6:	e068      	b.n	80022ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	089b      	lsrs	r3, r3, #2
 80021fc:	60fb      	str	r3, [r7, #12]
        break;
 80021fe:	e064      	b.n	80022ca <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002200:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002204:	f04f 0100 	mov.w	r1, #0
 8002208:	f004 f968 	bl	80064dc <HAL_RCCEx_GetPeriphCLKFreq>
 800220c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002216:	d051      	beq.n	80022bc <ADC_ConfigureBoostMode+0x13c>
 8002218:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800221c:	d854      	bhi.n	80022c8 <ADC_ConfigureBoostMode+0x148>
 800221e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002222:	d047      	beq.n	80022b4 <ADC_ConfigureBoostMode+0x134>
 8002224:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002228:	d84e      	bhi.n	80022c8 <ADC_ConfigureBoostMode+0x148>
 800222a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800222e:	d03d      	beq.n	80022ac <ADC_ConfigureBoostMode+0x12c>
 8002230:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002234:	d848      	bhi.n	80022c8 <ADC_ConfigureBoostMode+0x148>
 8002236:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800223a:	d033      	beq.n	80022a4 <ADC_ConfigureBoostMode+0x124>
 800223c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002240:	d842      	bhi.n	80022c8 <ADC_ConfigureBoostMode+0x148>
 8002242:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002246:	d029      	beq.n	800229c <ADC_ConfigureBoostMode+0x11c>
 8002248:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800224c:	d83c      	bhi.n	80022c8 <ADC_ConfigureBoostMode+0x148>
 800224e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002252:	d01a      	beq.n	800228a <ADC_ConfigureBoostMode+0x10a>
 8002254:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002258:	d836      	bhi.n	80022c8 <ADC_ConfigureBoostMode+0x148>
 800225a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800225e:	d014      	beq.n	800228a <ADC_ConfigureBoostMode+0x10a>
 8002260:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002264:	d830      	bhi.n	80022c8 <ADC_ConfigureBoostMode+0x148>
 8002266:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800226a:	d00e      	beq.n	800228a <ADC_ConfigureBoostMode+0x10a>
 800226c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002270:	d82a      	bhi.n	80022c8 <ADC_ConfigureBoostMode+0x148>
 8002272:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002276:	d008      	beq.n	800228a <ADC_ConfigureBoostMode+0x10a>
 8002278:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800227c:	d824      	bhi.n	80022c8 <ADC_ConfigureBoostMode+0x148>
 800227e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002282:	d002      	beq.n	800228a <ADC_ConfigureBoostMode+0x10a>
 8002284:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002288:	d11e      	bne.n	80022c8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	0c9b      	lsrs	r3, r3, #18
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	fbb2 f3f3 	udiv	r3, r2, r3
 8002298:	60fb      	str	r3, [r7, #12]
        break;
 800229a:	e016      	b.n	80022ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	091b      	lsrs	r3, r3, #4
 80022a0:	60fb      	str	r3, [r7, #12]
        break;
 80022a2:	e012      	b.n	80022ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	095b      	lsrs	r3, r3, #5
 80022a8:	60fb      	str	r3, [r7, #12]
        break;
 80022aa:	e00e      	b.n	80022ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	099b      	lsrs	r3, r3, #6
 80022b0:	60fb      	str	r3, [r7, #12]
        break;
 80022b2:	e00a      	b.n	80022ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	09db      	lsrs	r3, r3, #7
 80022b8:	60fb      	str	r3, [r7, #12]
        break;
 80022ba:	e006      	b.n	80022ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	0a1b      	lsrs	r3, r3, #8
 80022c0:	60fb      	str	r3, [r7, #12]
        break;
 80022c2:	e002      	b.n	80022ca <ADC_ConfigureBoostMode+0x14a>
        break;
 80022c4:	bf00      	nop
 80022c6:	e000      	b.n	80022ca <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80022c8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80022ca:	f7ff f8b9 	bl	8001440 <HAL_GetREVID>
 80022ce:	4603      	mov	r3, r0
 80022d0:	f241 0203 	movw	r2, #4099	; 0x1003
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d815      	bhi.n	8002304 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	4a2b      	ldr	r2, [pc, #172]	; (8002388 <ADC_ConfigureBoostMode+0x208>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d908      	bls.n	80022f2 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689a      	ldr	r2, [r3, #8]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022ee:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80022f0:	e03e      	b.n	8002370 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002300:	609a      	str	r2, [r3, #8]
}
 8002302:	e035      	b.n	8002370 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	085b      	lsrs	r3, r3, #1
 8002308:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	4a1f      	ldr	r2, [pc, #124]	; (800238c <ADC_ConfigureBoostMode+0x20c>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d808      	bhi.n	8002324 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002320:	609a      	str	r2, [r3, #8]
}
 8002322:	e025      	b.n	8002370 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4a1a      	ldr	r2, [pc, #104]	; (8002390 <ADC_ConfigureBoostMode+0x210>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d80a      	bhi.n	8002342 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800233e:	609a      	str	r2, [r3, #8]
}
 8002340:	e016      	b.n	8002370 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	4a13      	ldr	r2, [pc, #76]	; (8002394 <ADC_ConfigureBoostMode+0x214>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d80a      	bhi.n	8002360 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800235c:	609a      	str	r2, [r3, #8]
}
 800235e:	e007      	b.n	8002370 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689a      	ldr	r2, [r3, #8]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800236e:	609a      	str	r2, [r3, #8]
}
 8002370:	bf00      	nop
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40022000 	.word	0x40022000
 800237c:	40022100 	.word	0x40022100
 8002380:	40022300 	.word	0x40022300
 8002384:	58026300 	.word	0x58026300
 8002388:	01312d00 	.word	0x01312d00
 800238c:	005f5e10 	.word	0x005f5e10
 8002390:	00bebc20 	.word	0x00bebc20
 8002394:	017d7840 	.word	0x017d7840

08002398 <LL_ADC_IsEnabled>:
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d101      	bne.n	80023b0 <LL_ADC_IsEnabled+0x18>
 80023ac:	2301      	movs	r3, #1
 80023ae:	e000      	b.n	80023b2 <LL_ADC_IsEnabled+0x1a>
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <LL_ADC_REG_IsConversionOngoing>:
{
 80023be:	b480      	push	{r7}
 80023c0:	b083      	sub	sp, #12
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 0304 	and.w	r3, r3, #4
 80023ce:	2b04      	cmp	r3, #4
 80023d0:	d101      	bne.n	80023d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80023d2:	2301      	movs	r3, #1
 80023d4:	e000      	b.n	80023d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80023e4:	b590      	push	{r4, r7, lr}
 80023e6:	b09f      	sub	sp, #124	; 0x7c
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023ee:	2300      	movs	r3, #0
 80023f0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d101      	bne.n	8002402 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80023fe:	2302      	movs	r3, #2
 8002400:	e0be      	b.n	8002580 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2201      	movs	r2, #1
 8002406:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800240a:	2300      	movs	r3, #0
 800240c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800240e:	2300      	movs	r3, #0
 8002410:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a5c      	ldr	r2, [pc, #368]	; (8002588 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d102      	bne.n	8002422 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800241c:	4b5b      	ldr	r3, [pc, #364]	; (800258c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800241e:	60bb      	str	r3, [r7, #8]
 8002420:	e001      	b.n	8002426 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002422:	2300      	movs	r3, #0
 8002424:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10b      	bne.n	8002444 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002430:	f043 0220 	orr.w	r2, r3, #32
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e09d      	b.n	8002580 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff ffb9 	bl	80023be <LL_ADC_REG_IsConversionOngoing>
 800244c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff ffb3 	bl	80023be <LL_ADC_REG_IsConversionOngoing>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d17f      	bne.n	800255e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800245e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002460:	2b00      	cmp	r3, #0
 8002462:	d17c      	bne.n	800255e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a47      	ldr	r2, [pc, #284]	; (8002588 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d004      	beq.n	8002478 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a46      	ldr	r2, [pc, #280]	; (800258c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d101      	bne.n	800247c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002478:	4b45      	ldr	r3, [pc, #276]	; (8002590 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800247a:	e000      	b.n	800247e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800247c:	4b45      	ldr	r3, [pc, #276]	; (8002594 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800247e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d039      	beq.n	80024fc <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	431a      	orrs	r2, r3
 8002496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002498:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a3a      	ldr	r2, [pc, #232]	; (8002588 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d004      	beq.n	80024ae <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a38      	ldr	r2, [pc, #224]	; (800258c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d10e      	bne.n	80024cc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80024ae:	4836      	ldr	r0, [pc, #216]	; (8002588 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80024b0:	f7ff ff72 	bl	8002398 <LL_ADC_IsEnabled>
 80024b4:	4604      	mov	r4, r0
 80024b6:	4835      	ldr	r0, [pc, #212]	; (800258c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80024b8:	f7ff ff6e 	bl	8002398 <LL_ADC_IsEnabled>
 80024bc:	4603      	mov	r3, r0
 80024be:	4323      	orrs	r3, r4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	bf0c      	ite	eq
 80024c4:	2301      	moveq	r3, #1
 80024c6:	2300      	movne	r3, #0
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	e008      	b.n	80024de <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80024cc:	4832      	ldr	r0, [pc, #200]	; (8002598 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80024ce:	f7ff ff63 	bl	8002398 <LL_ADC_IsEnabled>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	bf0c      	ite	eq
 80024d8:	2301      	moveq	r3, #1
 80024da:	2300      	movne	r3, #0
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d047      	beq.n	8002572 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80024e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024e4:	689a      	ldr	r2, [r3, #8]
 80024e6:	4b2d      	ldr	r3, [pc, #180]	; (800259c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80024e8:	4013      	ands	r3, r2
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	6811      	ldr	r1, [r2, #0]
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	6892      	ldr	r2, [r2, #8]
 80024f2:	430a      	orrs	r2, r1
 80024f4:	431a      	orrs	r2, r3
 80024f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024f8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80024fa:	e03a      	b.n	8002572 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80024fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002506:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a1e      	ldr	r2, [pc, #120]	; (8002588 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d004      	beq.n	800251c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a1d      	ldr	r2, [pc, #116]	; (800258c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d10e      	bne.n	800253a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 800251c:	481a      	ldr	r0, [pc, #104]	; (8002588 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800251e:	f7ff ff3b 	bl	8002398 <LL_ADC_IsEnabled>
 8002522:	4604      	mov	r4, r0
 8002524:	4819      	ldr	r0, [pc, #100]	; (800258c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002526:	f7ff ff37 	bl	8002398 <LL_ADC_IsEnabled>
 800252a:	4603      	mov	r3, r0
 800252c:	4323      	orrs	r3, r4
 800252e:	2b00      	cmp	r3, #0
 8002530:	bf0c      	ite	eq
 8002532:	2301      	moveq	r3, #1
 8002534:	2300      	movne	r3, #0
 8002536:	b2db      	uxtb	r3, r3
 8002538:	e008      	b.n	800254c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800253a:	4817      	ldr	r0, [pc, #92]	; (8002598 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800253c:	f7ff ff2c 	bl	8002398 <LL_ADC_IsEnabled>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	bf0c      	ite	eq
 8002546:	2301      	moveq	r3, #1
 8002548:	2300      	movne	r3, #0
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b00      	cmp	r3, #0
 800254e:	d010      	beq.n	8002572 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	4b11      	ldr	r3, [pc, #68]	; (800259c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002556:	4013      	ands	r3, r2
 8002558:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800255a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800255c:	e009      	b.n	8002572 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002562:	f043 0220 	orr.w	r2, r3, #32
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002570:	e000      	b.n	8002574 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002572:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800257c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002580:	4618      	mov	r0, r3
 8002582:	377c      	adds	r7, #124	; 0x7c
 8002584:	46bd      	mov	sp, r7
 8002586:	bd90      	pop	{r4, r7, pc}
 8002588:	40022000 	.word	0x40022000
 800258c:	40022100 	.word	0x40022100
 8002590:	40022300 	.word	0x40022300
 8002594:	58026300 	.word	0x58026300
 8002598:	58026000 	.word	0x58026000
 800259c:	fffff0e0 	.word	0xfffff0e0

080025a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025b0:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <__NVIC_SetPriorityGrouping+0x40>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025b6:	68ba      	ldr	r2, [r7, #8]
 80025b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025bc:	4013      	ands	r3, r2
 80025be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80025c8:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <__NVIC_SetPriorityGrouping+0x44>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ce:	4a04      	ldr	r2, [pc, #16]	; (80025e0 <__NVIC_SetPriorityGrouping+0x40>)
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	60d3      	str	r3, [r2, #12]
}
 80025d4:	bf00      	nop
 80025d6:	3714      	adds	r7, #20
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	e000ed00 	.word	0xe000ed00
 80025e4:	05fa0000 	.word	0x05fa0000

080025e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025ec:	4b04      	ldr	r3, [pc, #16]	; (8002600 <__NVIC_GetPriorityGrouping+0x18>)
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	0a1b      	lsrs	r3, r3, #8
 80025f2:	f003 0307 	and.w	r3, r3, #7
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	e000ed00 	.word	0xe000ed00

08002604 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800260e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002612:	2b00      	cmp	r3, #0
 8002614:	db0b      	blt.n	800262e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002616:	88fb      	ldrh	r3, [r7, #6]
 8002618:	f003 021f 	and.w	r2, r3, #31
 800261c:	4907      	ldr	r1, [pc, #28]	; (800263c <__NVIC_EnableIRQ+0x38>)
 800261e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002622:	095b      	lsrs	r3, r3, #5
 8002624:	2001      	movs	r0, #1
 8002626:	fa00 f202 	lsl.w	r2, r0, r2
 800262a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	e000e100 	.word	0xe000e100

08002640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	4603      	mov	r3, r0
 8002648:	6039      	str	r1, [r7, #0]
 800264a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800264c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002650:	2b00      	cmp	r3, #0
 8002652:	db0a      	blt.n	800266a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	b2da      	uxtb	r2, r3
 8002658:	490c      	ldr	r1, [pc, #48]	; (800268c <__NVIC_SetPriority+0x4c>)
 800265a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800265e:	0112      	lsls	r2, r2, #4
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	440b      	add	r3, r1
 8002664:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002668:	e00a      	b.n	8002680 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	b2da      	uxtb	r2, r3
 800266e:	4908      	ldr	r1, [pc, #32]	; (8002690 <__NVIC_SetPriority+0x50>)
 8002670:	88fb      	ldrh	r3, [r7, #6]
 8002672:	f003 030f 	and.w	r3, r3, #15
 8002676:	3b04      	subs	r3, #4
 8002678:	0112      	lsls	r2, r2, #4
 800267a:	b2d2      	uxtb	r2, r2
 800267c:	440b      	add	r3, r1
 800267e:	761a      	strb	r2, [r3, #24]
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr
 800268c:	e000e100 	.word	0xe000e100
 8002690:	e000ed00 	.word	0xe000ed00

08002694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002694:	b480      	push	{r7}
 8002696:	b089      	sub	sp, #36	; 0x24
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f003 0307 	and.w	r3, r3, #7
 80026a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	f1c3 0307 	rsb	r3, r3, #7
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	bf28      	it	cs
 80026b2:	2304      	movcs	r3, #4
 80026b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	3304      	adds	r3, #4
 80026ba:	2b06      	cmp	r3, #6
 80026bc:	d902      	bls.n	80026c4 <NVIC_EncodePriority+0x30>
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	3b03      	subs	r3, #3
 80026c2:	e000      	b.n	80026c6 <NVIC_EncodePriority+0x32>
 80026c4:	2300      	movs	r3, #0
 80026c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c8:	f04f 32ff 	mov.w	r2, #4294967295
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	43da      	mvns	r2, r3
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	401a      	ands	r2, r3
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026dc:	f04f 31ff 	mov.w	r1, #4294967295
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	fa01 f303 	lsl.w	r3, r1, r3
 80026e6:	43d9      	mvns	r1, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026ec:	4313      	orrs	r3, r2
         );
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3724      	adds	r7, #36	; 0x24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
	...

080026fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	3b01      	subs	r3, #1
 8002708:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800270c:	d301      	bcc.n	8002712 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800270e:	2301      	movs	r3, #1
 8002710:	e00f      	b.n	8002732 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002712:	4a0a      	ldr	r2, [pc, #40]	; (800273c <SysTick_Config+0x40>)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	3b01      	subs	r3, #1
 8002718:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800271a:	210f      	movs	r1, #15
 800271c:	f04f 30ff 	mov.w	r0, #4294967295
 8002720:	f7ff ff8e 	bl	8002640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002724:	4b05      	ldr	r3, [pc, #20]	; (800273c <SysTick_Config+0x40>)
 8002726:	2200      	movs	r2, #0
 8002728:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800272a:	4b04      	ldr	r3, [pc, #16]	; (800273c <SysTick_Config+0x40>)
 800272c:	2207      	movs	r2, #7
 800272e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	e000e010 	.word	0xe000e010

08002740 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f7ff ff29 	bl	80025a0 <__NVIC_SetPriorityGrouping>
}
 800274e:	bf00      	nop
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b086      	sub	sp, #24
 800275a:	af00      	add	r7, sp, #0
 800275c:	4603      	mov	r3, r0
 800275e:	60b9      	str	r1, [r7, #8]
 8002760:	607a      	str	r2, [r7, #4]
 8002762:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002764:	f7ff ff40 	bl	80025e8 <__NVIC_GetPriorityGrouping>
 8002768:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	68b9      	ldr	r1, [r7, #8]
 800276e:	6978      	ldr	r0, [r7, #20]
 8002770:	f7ff ff90 	bl	8002694 <NVIC_EncodePriority>
 8002774:	4602      	mov	r2, r0
 8002776:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800277a:	4611      	mov	r1, r2
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff ff5f 	bl	8002640 <__NVIC_SetPriority>
}
 8002782:	bf00      	nop
 8002784:	3718      	adds	r7, #24
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b082      	sub	sp, #8
 800278e:	af00      	add	r7, sp, #0
 8002790:	4603      	mov	r3, r0
 8002792:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002794:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff ff33 	bl	8002604 <__NVIC_EnableIRQ>
}
 800279e:	bf00      	nop
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b082      	sub	sp, #8
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7ff ffa4 	bl	80026fc <SysTick_Config>
 80027b4:	4603      	mov	r3, r0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
	...

080027c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b089      	sub	sp, #36	; 0x24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80027ca:	2300      	movs	r3, #0
 80027cc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80027ce:	4b89      	ldr	r3, [pc, #548]	; (80029f4 <HAL_GPIO_Init+0x234>)
 80027d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80027d2:	e194      	b.n	8002afe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	2101      	movs	r1, #1
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	fa01 f303 	lsl.w	r3, r1, r3
 80027e0:	4013      	ands	r3, r2
 80027e2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f000 8186 	beq.w	8002af8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f003 0303 	and.w	r3, r3, #3
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d005      	beq.n	8002804 <HAL_GPIO_Init+0x44>
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f003 0303 	and.w	r3, r3, #3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d130      	bne.n	8002866 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	2203      	movs	r2, #3
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	43db      	mvns	r3, r3
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4013      	ands	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	68da      	ldr	r2, [r3, #12]
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	4313      	orrs	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800283a:	2201      	movs	r2, #1
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	fa02 f303 	lsl.w	r3, r2, r3
 8002842:	43db      	mvns	r3, r3
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	4013      	ands	r3, r2
 8002848:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	091b      	lsrs	r3, r3, #4
 8002850:	f003 0201 	and.w	r2, r3, #1
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	4313      	orrs	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f003 0303 	and.w	r3, r3, #3
 800286e:	2b03      	cmp	r3, #3
 8002870:	d017      	beq.n	80028a2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	2203      	movs	r2, #3
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	43db      	mvns	r3, r3
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	4013      	ands	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	689a      	ldr	r2, [r3, #8]
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4313      	orrs	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f003 0303 	and.w	r3, r3, #3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d123      	bne.n	80028f6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	08da      	lsrs	r2, r3, #3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	3208      	adds	r2, #8
 80028b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	f003 0307 	and.w	r3, r3, #7
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	220f      	movs	r2, #15
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	43db      	mvns	r3, r3
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	4013      	ands	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	691a      	ldr	r2, [r3, #16]
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	f003 0307 	and.w	r3, r3, #7
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	08da      	lsrs	r2, r3, #3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3208      	adds	r2, #8
 80028f0:	69b9      	ldr	r1, [r7, #24]
 80028f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	2203      	movs	r2, #3
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	43db      	mvns	r3, r3
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	4013      	ands	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f003 0203 	and.w	r2, r3, #3
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4313      	orrs	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002932:	2b00      	cmp	r3, #0
 8002934:	f000 80e0 	beq.w	8002af8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002938:	4b2f      	ldr	r3, [pc, #188]	; (80029f8 <HAL_GPIO_Init+0x238>)
 800293a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800293e:	4a2e      	ldr	r2, [pc, #184]	; (80029f8 <HAL_GPIO_Init+0x238>)
 8002940:	f043 0302 	orr.w	r3, r3, #2
 8002944:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002948:	4b2b      	ldr	r3, [pc, #172]	; (80029f8 <HAL_GPIO_Init+0x238>)
 800294a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	60fb      	str	r3, [r7, #12]
 8002954:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002956:	4a29      	ldr	r2, [pc, #164]	; (80029fc <HAL_GPIO_Init+0x23c>)
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	089b      	lsrs	r3, r3, #2
 800295c:	3302      	adds	r3, #2
 800295e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002962:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	f003 0303 	and.w	r3, r3, #3
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	220f      	movs	r2, #15
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	43db      	mvns	r3, r3
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	4013      	ands	r3, r2
 8002978:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a20      	ldr	r2, [pc, #128]	; (8002a00 <HAL_GPIO_Init+0x240>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d052      	beq.n	8002a28 <HAL_GPIO_Init+0x268>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a1f      	ldr	r2, [pc, #124]	; (8002a04 <HAL_GPIO_Init+0x244>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d031      	beq.n	80029ee <HAL_GPIO_Init+0x22e>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a1e      	ldr	r2, [pc, #120]	; (8002a08 <HAL_GPIO_Init+0x248>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d02b      	beq.n	80029ea <HAL_GPIO_Init+0x22a>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a1d      	ldr	r2, [pc, #116]	; (8002a0c <HAL_GPIO_Init+0x24c>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d025      	beq.n	80029e6 <HAL_GPIO_Init+0x226>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a1c      	ldr	r2, [pc, #112]	; (8002a10 <HAL_GPIO_Init+0x250>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d01f      	beq.n	80029e2 <HAL_GPIO_Init+0x222>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a1b      	ldr	r2, [pc, #108]	; (8002a14 <HAL_GPIO_Init+0x254>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d019      	beq.n	80029de <HAL_GPIO_Init+0x21e>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a1a      	ldr	r2, [pc, #104]	; (8002a18 <HAL_GPIO_Init+0x258>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d013      	beq.n	80029da <HAL_GPIO_Init+0x21a>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a19      	ldr	r2, [pc, #100]	; (8002a1c <HAL_GPIO_Init+0x25c>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d00d      	beq.n	80029d6 <HAL_GPIO_Init+0x216>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a18      	ldr	r2, [pc, #96]	; (8002a20 <HAL_GPIO_Init+0x260>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d007      	beq.n	80029d2 <HAL_GPIO_Init+0x212>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a17      	ldr	r2, [pc, #92]	; (8002a24 <HAL_GPIO_Init+0x264>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d101      	bne.n	80029ce <HAL_GPIO_Init+0x20e>
 80029ca:	2309      	movs	r3, #9
 80029cc:	e02d      	b.n	8002a2a <HAL_GPIO_Init+0x26a>
 80029ce:	230a      	movs	r3, #10
 80029d0:	e02b      	b.n	8002a2a <HAL_GPIO_Init+0x26a>
 80029d2:	2308      	movs	r3, #8
 80029d4:	e029      	b.n	8002a2a <HAL_GPIO_Init+0x26a>
 80029d6:	2307      	movs	r3, #7
 80029d8:	e027      	b.n	8002a2a <HAL_GPIO_Init+0x26a>
 80029da:	2306      	movs	r3, #6
 80029dc:	e025      	b.n	8002a2a <HAL_GPIO_Init+0x26a>
 80029de:	2305      	movs	r3, #5
 80029e0:	e023      	b.n	8002a2a <HAL_GPIO_Init+0x26a>
 80029e2:	2304      	movs	r3, #4
 80029e4:	e021      	b.n	8002a2a <HAL_GPIO_Init+0x26a>
 80029e6:	2303      	movs	r3, #3
 80029e8:	e01f      	b.n	8002a2a <HAL_GPIO_Init+0x26a>
 80029ea:	2302      	movs	r3, #2
 80029ec:	e01d      	b.n	8002a2a <HAL_GPIO_Init+0x26a>
 80029ee:	2301      	movs	r3, #1
 80029f0:	e01b      	b.n	8002a2a <HAL_GPIO_Init+0x26a>
 80029f2:	bf00      	nop
 80029f4:	58000080 	.word	0x58000080
 80029f8:	58024400 	.word	0x58024400
 80029fc:	58000400 	.word	0x58000400
 8002a00:	58020000 	.word	0x58020000
 8002a04:	58020400 	.word	0x58020400
 8002a08:	58020800 	.word	0x58020800
 8002a0c:	58020c00 	.word	0x58020c00
 8002a10:	58021000 	.word	0x58021000
 8002a14:	58021400 	.word	0x58021400
 8002a18:	58021800 	.word	0x58021800
 8002a1c:	58021c00 	.word	0x58021c00
 8002a20:	58022000 	.word	0x58022000
 8002a24:	58022400 	.word	0x58022400
 8002a28:	2300      	movs	r3, #0
 8002a2a:	69fa      	ldr	r2, [r7, #28]
 8002a2c:	f002 0203 	and.w	r2, r2, #3
 8002a30:	0092      	lsls	r2, r2, #2
 8002a32:	4093      	lsls	r3, r2
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a3a:	4938      	ldr	r1, [pc, #224]	; (8002b1c <HAL_GPIO_Init+0x35c>)
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	089b      	lsrs	r3, r3, #2
 8002a40:	3302      	adds	r3, #2
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	43db      	mvns	r3, r3
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	4013      	ands	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002a6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002a76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	43db      	mvns	r3, r3
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4013      	ands	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d003      	beq.n	8002a9c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002a9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	43db      	mvns	r3, r3
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d003      	beq.n	8002ac8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	4013      	ands	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	3301      	adds	r3, #1
 8002afc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	fa22 f303 	lsr.w	r3, r2, r3
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f47f ae63 	bne.w	80027d4 <HAL_GPIO_Init+0x14>
  }
}
 8002b0e:	bf00      	nop
 8002b10:	bf00      	nop
 8002b12:	3724      	adds	r7, #36	; 0x24
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	58000400 	.word	0x58000400

08002b20 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b22:	b08f      	sub	sp, #60	; 0x3c
 8002b24:	af0a      	add	r7, sp, #40	; 0x28
 8002b26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e116      	b.n	8002d60 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d106      	bne.n	8002b52 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f008 fd09 	bl	800b564 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2203      	movs	r2, #3
 8002b56:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d102      	bne.n	8002b6c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f005 f8c8 	bl	8007d06 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	603b      	str	r3, [r7, #0]
 8002b7c:	687e      	ldr	r6, [r7, #4]
 8002b7e:	466d      	mov	r5, sp
 8002b80:	f106 0410 	add.w	r4, r6, #16
 8002b84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b8c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b90:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b94:	1d33      	adds	r3, r6, #4
 8002b96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b98:	6838      	ldr	r0, [r7, #0]
 8002b9a:	f004 ff93 	bl	8007ac4 <USB_CoreInit>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d005      	beq.n	8002bb0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e0d7      	b.n	8002d60 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f005 f8b6 	bl	8007d28 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	73fb      	strb	r3, [r7, #15]
 8002bc0:	e04a      	b.n	8002c58 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002bc2:	7bfa      	ldrb	r2, [r7, #15]
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	4413      	add	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	440b      	add	r3, r1
 8002bd0:	333d      	adds	r3, #61	; 0x3d
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002bd6:	7bfa      	ldrb	r2, [r7, #15]
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	00db      	lsls	r3, r3, #3
 8002bde:	4413      	add	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	440b      	add	r3, r1
 8002be4:	333c      	adds	r3, #60	; 0x3c
 8002be6:	7bfa      	ldrb	r2, [r7, #15]
 8002be8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002bea:	7bfa      	ldrb	r2, [r7, #15]
 8002bec:	7bfb      	ldrb	r3, [r7, #15]
 8002bee:	b298      	uxth	r0, r3
 8002bf0:	6879      	ldr	r1, [r7, #4]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	4413      	add	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	440b      	add	r3, r1
 8002bfc:	3356      	adds	r3, #86	; 0x56
 8002bfe:	4602      	mov	r2, r0
 8002c00:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c02:	7bfa      	ldrb	r2, [r7, #15]
 8002c04:	6879      	ldr	r1, [r7, #4]
 8002c06:	4613      	mov	r3, r2
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	4413      	add	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	440b      	add	r3, r1
 8002c10:	3340      	adds	r3, #64	; 0x40
 8002c12:	2200      	movs	r2, #0
 8002c14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c16:	7bfa      	ldrb	r2, [r7, #15]
 8002c18:	6879      	ldr	r1, [r7, #4]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	4413      	add	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	440b      	add	r3, r1
 8002c24:	3344      	adds	r3, #68	; 0x44
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c2a:	7bfa      	ldrb	r2, [r7, #15]
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	4413      	add	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	440b      	add	r3, r1
 8002c38:	3348      	adds	r3, #72	; 0x48
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c3e:	7bfa      	ldrb	r2, [r7, #15]
 8002c40:	6879      	ldr	r1, [r7, #4]
 8002c42:	4613      	mov	r3, r2
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	4413      	add	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	440b      	add	r3, r1
 8002c4c:	334c      	adds	r3, #76	; 0x4c
 8002c4e:	2200      	movs	r2, #0
 8002c50:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c52:	7bfb      	ldrb	r3, [r7, #15]
 8002c54:	3301      	adds	r3, #1
 8002c56:	73fb      	strb	r3, [r7, #15]
 8002c58:	7bfa      	ldrb	r2, [r7, #15]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d3af      	bcc.n	8002bc2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c62:	2300      	movs	r3, #0
 8002c64:	73fb      	strb	r3, [r7, #15]
 8002c66:	e044      	b.n	8002cf2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c68:	7bfa      	ldrb	r2, [r7, #15]
 8002c6a:	6879      	ldr	r1, [r7, #4]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	4413      	add	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	440b      	add	r3, r1
 8002c76:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c7e:	7bfa      	ldrb	r2, [r7, #15]
 8002c80:	6879      	ldr	r1, [r7, #4]
 8002c82:	4613      	mov	r3, r2
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	4413      	add	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	440b      	add	r3, r1
 8002c8c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002c90:	7bfa      	ldrb	r2, [r7, #15]
 8002c92:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c94:	7bfa      	ldrb	r2, [r7, #15]
 8002c96:	6879      	ldr	r1, [r7, #4]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	4413      	add	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002caa:	7bfa      	ldrb	r2, [r7, #15]
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	440b      	add	r3, r1
 8002cb8:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002cc0:	7bfa      	ldrb	r2, [r7, #15]
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	4413      	add	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	440b      	add	r3, r1
 8002cce:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002cd6:	7bfa      	ldrb	r2, [r7, #15]
 8002cd8:	6879      	ldr	r1, [r7, #4]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	4413      	add	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	440b      	add	r3, r1
 8002ce4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cec:	7bfb      	ldrb	r3, [r7, #15]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	73fb      	strb	r3, [r7, #15]
 8002cf2:	7bfa      	ldrb	r2, [r7, #15]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d3b5      	bcc.n	8002c68 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	603b      	str	r3, [r7, #0]
 8002d02:	687e      	ldr	r6, [r7, #4]
 8002d04:	466d      	mov	r5, sp
 8002d06:	f106 0410 	add.w	r4, r6, #16
 8002d0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d12:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d16:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d1a:	1d33      	adds	r3, r6, #4
 8002d1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d1e:	6838      	ldr	r0, [r7, #0]
 8002d20:	f005 f84e 	bl	8007dc0 <USB_DevInit>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d005      	beq.n	8002d36 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e014      	b.n	8002d60 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d102      	bne.n	8002d54 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f001 f970 	bl	8004034 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f006 f890 	bl	8008e7e <USB_DevDisconnect>

  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d68 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d101      	bne.n	8002d84 <HAL_PCD_Start+0x1c>
 8002d80:	2302      	movs	r3, #2
 8002d82:	e022      	b.n	8002dca <HAL_PCD_Start+0x62>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d109      	bne.n	8002dac <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d105      	bne.n	8002dac <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f004 ff97 	bl	8007ce4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f006 f83e 	bl	8008e3c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002dd2:	b590      	push	{r4, r7, lr}
 8002dd4:	b08d      	sub	sp, #52	; 0x34
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002de0:	6a3b      	ldr	r3, [r7, #32]
 8002de2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f006 f8fc 	bl	8008fe6 <USB_GetMode>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f040 84b7 	bne.w	8003764 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f006 f860 	bl	8008ec0 <USB_ReadInterrupts>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f000 84ad 	beq.w	8003762 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	0a1b      	lsrs	r3, r3, #8
 8002e12:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f006 f84d 	bl	8008ec0 <USB_ReadInterrupts>
 8002e26:	4603      	mov	r3, r0
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d107      	bne.n	8002e40 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	695a      	ldr	r2, [r3, #20]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f002 0202 	and.w	r2, r2, #2
 8002e3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f006 f83b 	bl	8008ec0 <USB_ReadInterrupts>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	f003 0310 	and.w	r3, r3, #16
 8002e50:	2b10      	cmp	r3, #16
 8002e52:	d161      	bne.n	8002f18 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	699a      	ldr	r2, [r3, #24]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 0210 	bic.w	r2, r2, #16
 8002e62:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002e64:	6a3b      	ldr	r3, [r7, #32]
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	f003 020f 	and.w	r2, r3, #15
 8002e70:	4613      	mov	r3, r2
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	4413      	add	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	4413      	add	r3, r2
 8002e80:	3304      	adds	r3, #4
 8002e82:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	0c5b      	lsrs	r3, r3, #17
 8002e88:	f003 030f 	and.w	r3, r3, #15
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d124      	bne.n	8002eda <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002e96:	4013      	ands	r3, r2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d035      	beq.n	8002f08 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	091b      	lsrs	r3, r3, #4
 8002ea4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ea6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	461a      	mov	r2, r3
 8002eae:	6a38      	ldr	r0, [r7, #32]
 8002eb0:	f005 fe72 	bl	8008b98 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	68da      	ldr	r2, [r3, #12]
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	091b      	lsrs	r3, r3, #4
 8002ebc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ec0:	441a      	add	r2, r3
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	695a      	ldr	r2, [r3, #20]
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	091b      	lsrs	r3, r3, #4
 8002ece:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ed2:	441a      	add	r2, r3
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	615a      	str	r2, [r3, #20]
 8002ed8:	e016      	b.n	8002f08 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	0c5b      	lsrs	r3, r3, #17
 8002ede:	f003 030f 	and.w	r3, r3, #15
 8002ee2:	2b06      	cmp	r3, #6
 8002ee4:	d110      	bne.n	8002f08 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002eec:	2208      	movs	r2, #8
 8002eee:	4619      	mov	r1, r3
 8002ef0:	6a38      	ldr	r0, [r7, #32]
 8002ef2:	f005 fe51 	bl	8008b98 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	695a      	ldr	r2, [r3, #20]
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	091b      	lsrs	r3, r3, #4
 8002efe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f02:	441a      	add	r2, r3
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	699a      	ldr	r2, [r3, #24]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f042 0210 	orr.w	r2, r2, #16
 8002f16:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f005 ffcf 	bl	8008ec0 <USB_ReadInterrupts>
 8002f22:	4603      	mov	r3, r0
 8002f24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f28:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f2c:	f040 80a7 	bne.w	800307e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002f30:	2300      	movs	r3, #0
 8002f32:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f005 ffd4 	bl	8008ee6 <USB_ReadDevAllOutEpInterrupt>
 8002f3e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002f40:	e099      	b.n	8003076 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 808e 	beq.w	800306a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	4611      	mov	r1, r2
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f005 fff8 	bl	8008f4e <USB_ReadDevOutEPInterrupt>
 8002f5e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00c      	beq.n	8002f84 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6c:	015a      	lsls	r2, r3, #5
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	4413      	add	r3, r2
 8002f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f76:	461a      	mov	r2, r3
 8002f78:	2301      	movs	r3, #1
 8002f7a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002f7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 fed2 	bl	8003d28 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	f003 0308 	and.w	r3, r3, #8
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00c      	beq.n	8002fa8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	015a      	lsls	r2, r3, #5
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	4413      	add	r3, r2
 8002f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	2308      	movs	r3, #8
 8002f9e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002fa0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 ffa8 	bl	8003ef8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	f003 0310 	and.w	r3, r3, #16
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d008      	beq.n	8002fc4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb4:	015a      	lsls	r2, r3, #5
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	4413      	add	r3, r2
 8002fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	2310      	movs	r3, #16
 8002fc2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d030      	beq.n	8003030 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002fce:	6a3b      	ldr	r3, [r7, #32]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fd6:	2b80      	cmp	r3, #128	; 0x80
 8002fd8:	d109      	bne.n	8002fee <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	69fa      	ldr	r2, [r7, #28]
 8002fe4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fe8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fec:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	4413      	add	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	4413      	add	r3, r2
 8003000:	3304      	adds	r3, #4
 8003002:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	78db      	ldrb	r3, [r3, #3]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d108      	bne.n	800301e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	2200      	movs	r2, #0
 8003010:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003014:	b2db      	uxtb	r3, r3
 8003016:	4619      	mov	r1, r3
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f008 fbc9 	bl	800b7b0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800301e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003020:	015a      	lsls	r2, r3, #5
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	4413      	add	r3, r2
 8003026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800302a:	461a      	mov	r2, r3
 800302c:	2302      	movs	r3, #2
 800302e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	f003 0320 	and.w	r3, r3, #32
 8003036:	2b00      	cmp	r3, #0
 8003038:	d008      	beq.n	800304c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800303a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303c:	015a      	lsls	r2, r3, #5
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	4413      	add	r3, r2
 8003042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003046:	461a      	mov	r2, r3
 8003048:	2320      	movs	r3, #32
 800304a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d009      	beq.n	800306a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	015a      	lsls	r2, r3, #5
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	4413      	add	r3, r2
 800305e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003062:	461a      	mov	r2, r3
 8003064:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003068:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800306a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306c:	3301      	adds	r3, #1
 800306e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003072:	085b      	lsrs	r3, r3, #1
 8003074:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003078:	2b00      	cmp	r3, #0
 800307a:	f47f af62 	bne.w	8002f42 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4618      	mov	r0, r3
 8003084:	f005 ff1c 	bl	8008ec0 <USB_ReadInterrupts>
 8003088:	4603      	mov	r3, r0
 800308a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800308e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003092:	f040 80db 	bne.w	800324c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4618      	mov	r0, r3
 800309c:	f005 ff3d 	bl	8008f1a <USB_ReadDevAllInEpInterrupt>
 80030a0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80030a2:	2300      	movs	r3, #0
 80030a4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80030a6:	e0cd      	b.n	8003244 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80030a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f000 80c2 	beq.w	8003238 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ba:	b2d2      	uxtb	r2, r2
 80030bc:	4611      	mov	r1, r2
 80030be:	4618      	mov	r0, r3
 80030c0:	f005 ff63 	bl	8008f8a <USB_ReadDevInEPInterrupt>
 80030c4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d057      	beq.n	8003180 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80030d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d2:	f003 030f 	and.w	r3, r3, #15
 80030d6:	2201      	movs	r2, #1
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	43db      	mvns	r3, r3
 80030ea:	69f9      	ldr	r1, [r7, #28]
 80030ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80030f0:	4013      	ands	r3, r2
 80030f2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80030f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f6:	015a      	lsls	r2, r3, #5
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	4413      	add	r3, r2
 80030fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003100:	461a      	mov	r2, r3
 8003102:	2301      	movs	r3, #1
 8003104:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d132      	bne.n	8003174 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003112:	4613      	mov	r3, r2
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	4413      	add	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	440b      	add	r3, r1
 800311c:	3348      	adds	r3, #72	; 0x48
 800311e:	6819      	ldr	r1, [r3, #0]
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003124:	4613      	mov	r3, r2
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	4413      	add	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4403      	add	r3, r0
 800312e:	3344      	adds	r3, #68	; 0x44
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4419      	add	r1, r3
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003138:	4613      	mov	r3, r2
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	4413      	add	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4403      	add	r3, r0
 8003142:	3348      	adds	r3, #72	; 0x48
 8003144:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003148:	2b00      	cmp	r3, #0
 800314a:	d113      	bne.n	8003174 <HAL_PCD_IRQHandler+0x3a2>
 800314c:	6879      	ldr	r1, [r7, #4]
 800314e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003150:	4613      	mov	r3, r2
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	4413      	add	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	440b      	add	r3, r1
 800315a:	334c      	adds	r3, #76	; 0x4c
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d108      	bne.n	8003174 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6818      	ldr	r0, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800316c:	461a      	mov	r2, r3
 800316e:	2101      	movs	r1, #1
 8003170:	f005 ff6c 	bl	800904c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003176:	b2db      	uxtb	r3, r3
 8003178:	4619      	mov	r1, r3
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f008 fa93 	bl	800b6a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	f003 0308 	and.w	r3, r3, #8
 8003186:	2b00      	cmp	r3, #0
 8003188:	d008      	beq.n	800319c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	015a      	lsls	r2, r3, #5
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	4413      	add	r3, r2
 8003192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003196:	461a      	mov	r2, r3
 8003198:	2308      	movs	r3, #8
 800319a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	f003 0310 	and.w	r3, r3, #16
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d008      	beq.n	80031b8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80031a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a8:	015a      	lsls	r2, r3, #5
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	4413      	add	r3, r2
 80031ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031b2:	461a      	mov	r2, r3
 80031b4:	2310      	movs	r3, #16
 80031b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d008      	beq.n	80031d4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	015a      	lsls	r2, r3, #5
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	4413      	add	r3, r2
 80031ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031ce:	461a      	mov	r2, r3
 80031d0:	2340      	movs	r3, #64	; 0x40
 80031d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d023      	beq.n	8003226 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80031de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031e0:	6a38      	ldr	r0, [r7, #32]
 80031e2:	f004 ff4b 	bl	800807c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80031e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e8:	4613      	mov	r3, r2
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	4413      	add	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	3338      	adds	r3, #56	; 0x38
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	4413      	add	r3, r2
 80031f6:	3304      	adds	r3, #4
 80031f8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	78db      	ldrb	r3, [r3, #3]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d108      	bne.n	8003214 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	2200      	movs	r2, #0
 8003206:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320a:	b2db      	uxtb	r3, r3
 800320c:	4619      	mov	r1, r3
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f008 fae0 	bl	800b7d4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003216:	015a      	lsls	r2, r3, #5
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	4413      	add	r3, r2
 800321c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003220:	461a      	mov	r2, r3
 8003222:	2302      	movs	r3, #2
 8003224:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800322c:	2b00      	cmp	r3, #0
 800322e:	d003      	beq.n	8003238 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003230:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 fcea 	bl	8003c0c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323a:	3301      	adds	r3, #1
 800323c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800323e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003240:	085b      	lsrs	r3, r3, #1
 8003242:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003246:	2b00      	cmp	r3, #0
 8003248:	f47f af2e 	bne.w	80030a8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4618      	mov	r0, r3
 8003252:	f005 fe35 	bl	8008ec0 <USB_ReadInterrupts>
 8003256:	4603      	mov	r3, r0
 8003258:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800325c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003260:	d122      	bne.n	80032a8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	69fa      	ldr	r2, [r7, #28]
 800326c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003270:	f023 0301 	bic.w	r3, r3, #1
 8003274:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800327c:	2b01      	cmp	r3, #1
 800327e:	d108      	bne.n	8003292 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003288:	2100      	movs	r1, #0
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 fef6 	bl	800407c <HAL_PCDEx_LPM_Callback>
 8003290:	e002      	b.n	8003298 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f008 fa7e 	bl	800b794 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	695a      	ldr	r2, [r3, #20]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80032a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f005 fe07 	bl	8008ec0 <USB_ReadInterrupts>
 80032b2:	4603      	mov	r3, r0
 80032b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032bc:	d112      	bne.n	80032e4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d102      	bne.n	80032d4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f008 fa3a 	bl	800b748 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	695a      	ldr	r2, [r3, #20]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80032e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f005 fde9 	bl	8008ec0 <USB_ReadInterrupts>
 80032ee:	4603      	mov	r3, r0
 80032f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032f8:	d121      	bne.n	800333e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	695a      	ldr	r2, [r3, #20]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003308:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003310:	2b00      	cmp	r3, #0
 8003312:	d111      	bne.n	8003338 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003322:	089b      	lsrs	r3, r3, #2
 8003324:	f003 020f 	and.w	r2, r3, #15
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800332e:	2101      	movs	r1, #1
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 fea3 	bl	800407c <HAL_PCDEx_LPM_Callback>
 8003336:	e002      	b.n	800333e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f008 fa05 	bl	800b748 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4618      	mov	r0, r3
 8003344:	f005 fdbc 	bl	8008ec0 <USB_ReadInterrupts>
 8003348:	4603      	mov	r3, r0
 800334a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800334e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003352:	f040 80b7 	bne.w	80034c4 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	69fa      	ldr	r2, [r7, #28]
 8003360:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003364:	f023 0301 	bic.w	r3, r3, #1
 8003368:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2110      	movs	r1, #16
 8003370:	4618      	mov	r0, r3
 8003372:	f004 fe83 	bl	800807c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003376:	2300      	movs	r3, #0
 8003378:	62fb      	str	r3, [r7, #44]	; 0x2c
 800337a:	e046      	b.n	800340a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800337c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800337e:	015a      	lsls	r2, r3, #5
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	4413      	add	r3, r2
 8003384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003388:	461a      	mov	r2, r3
 800338a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800338e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003392:	015a      	lsls	r2, r3, #5
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	4413      	add	r3, r2
 8003398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033a0:	0151      	lsls	r1, r2, #5
 80033a2:	69fa      	ldr	r2, [r7, #28]
 80033a4:	440a      	add	r2, r1
 80033a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80033ae:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80033b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b2:	015a      	lsls	r2, r3, #5
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	4413      	add	r3, r2
 80033b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033bc:	461a      	mov	r2, r3
 80033be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80033c2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80033c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c6:	015a      	lsls	r2, r3, #5
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	4413      	add	r3, r2
 80033cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033d4:	0151      	lsls	r1, r2, #5
 80033d6:	69fa      	ldr	r2, [r7, #28]
 80033d8:	440a      	add	r2, r1
 80033da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80033de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80033e2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80033e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e6:	015a      	lsls	r2, r3, #5
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	4413      	add	r3, r2
 80033ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033f4:	0151      	lsls	r1, r2, #5
 80033f6:	69fa      	ldr	r2, [r7, #28]
 80033f8:	440a      	add	r2, r1
 80033fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80033fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003402:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003406:	3301      	adds	r3, #1
 8003408:	62fb      	str	r3, [r7, #44]	; 0x2c
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003410:	429a      	cmp	r2, r3
 8003412:	d3b3      	bcc.n	800337c <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800341a:	69db      	ldr	r3, [r3, #28]
 800341c:	69fa      	ldr	r2, [r7, #28]
 800341e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003422:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003426:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342c:	2b00      	cmp	r3, #0
 800342e:	d016      	beq.n	800345e <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003436:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800343a:	69fa      	ldr	r2, [r7, #28]
 800343c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003440:	f043 030b 	orr.w	r3, r3, #11
 8003444:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800344e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003450:	69fa      	ldr	r2, [r7, #28]
 8003452:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003456:	f043 030b 	orr.w	r3, r3, #11
 800345a:	6453      	str	r3, [r2, #68]	; 0x44
 800345c:	e015      	b.n	800348a <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003464:	695a      	ldr	r2, [r3, #20]
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800346c:	4619      	mov	r1, r3
 800346e:	f242 032b 	movw	r3, #8235	; 0x202b
 8003472:	4313      	orrs	r3, r2
 8003474:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	69fa      	ldr	r2, [r7, #28]
 8003480:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003484:	f043 030b 	orr.w	r3, r3, #11
 8003488:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	69fa      	ldr	r2, [r7, #28]
 8003494:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003498:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800349c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6818      	ldr	r0, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80034ae:	461a      	mov	r2, r3
 80034b0:	f005 fdcc 	bl	800904c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	695a      	ldr	r2, [r3, #20]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80034c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f005 fcf9 	bl	8008ec0 <USB_ReadInterrupts>
 80034ce:	4603      	mov	r3, r0
 80034d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034d8:	d124      	bne.n	8003524 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4618      	mov	r0, r3
 80034e0:	f005 fd90 	bl	8009004 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f004 fe44 	bl	8008176 <USB_GetDevSpeed>
 80034ee:	4603      	mov	r3, r0
 80034f0:	461a      	mov	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681c      	ldr	r4, [r3, #0]
 80034fa:	f001 fd9f 	bl	800503c <HAL_RCC_GetHCLKFreq>
 80034fe:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003504:	b2db      	uxtb	r3, r3
 8003506:	461a      	mov	r2, r3
 8003508:	4620      	mov	r0, r4
 800350a:	f004 fb49 	bl	8007ba0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f008 f8f1 	bl	800b6f6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	695a      	ldr	r2, [r3, #20]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003522:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4618      	mov	r0, r3
 800352a:	f005 fcc9 	bl	8008ec0 <USB_ReadInterrupts>
 800352e:	4603      	mov	r3, r0
 8003530:	f003 0308 	and.w	r3, r3, #8
 8003534:	2b08      	cmp	r3, #8
 8003536:	d10a      	bne.n	800354e <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f008 f8ce 	bl	800b6da <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	695a      	ldr	r2, [r3, #20]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f002 0208 	and.w	r2, r2, #8
 800354c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4618      	mov	r0, r3
 8003554:	f005 fcb4 	bl	8008ec0 <USB_ReadInterrupts>
 8003558:	4603      	mov	r3, r0
 800355a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800355e:	2b80      	cmp	r3, #128	; 0x80
 8003560:	d122      	bne.n	80035a8 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003562:	6a3b      	ldr	r3, [r7, #32]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800356a:	6a3b      	ldr	r3, [r7, #32]
 800356c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800356e:	2301      	movs	r3, #1
 8003570:	627b      	str	r3, [r7, #36]	; 0x24
 8003572:	e014      	b.n	800359e <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003578:	4613      	mov	r3, r2
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	4413      	add	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	440b      	add	r3, r1
 8003582:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d105      	bne.n	8003598 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800358c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358e:	b2db      	uxtb	r3, r3
 8003590:	4619      	mov	r1, r3
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 fb09 	bl	8003baa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359a:	3301      	adds	r3, #1
 800359c:	627b      	str	r3, [r7, #36]	; 0x24
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d3e5      	bcc.n	8003574 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f005 fc87 	bl	8008ec0 <USB_ReadInterrupts>
 80035b2:	4603      	mov	r3, r0
 80035b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035bc:	d13b      	bne.n	8003636 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035be:	2301      	movs	r3, #1
 80035c0:	627b      	str	r3, [r7, #36]	; 0x24
 80035c2:	e02b      	b.n	800361c <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80035c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c6:	015a      	lsls	r2, r3, #5
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	4413      	add	r3, r2
 80035cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d8:	4613      	mov	r3, r2
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	4413      	add	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	3340      	adds	r3, #64	; 0x40
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d115      	bne.n	8003616 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80035ea:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	da12      	bge.n	8003616 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80035f0:	6879      	ldr	r1, [r7, #4]
 80035f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035f4:	4613      	mov	r3, r2
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	4413      	add	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	440b      	add	r3, r1
 80035fe:	333f      	adds	r3, #63	; 0x3f
 8003600:	2201      	movs	r2, #1
 8003602:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003606:	b2db      	uxtb	r3, r3
 8003608:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800360c:	b2db      	uxtb	r3, r3
 800360e:	4619      	mov	r1, r3
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 faca 	bl	8003baa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003618:	3301      	adds	r3, #1
 800361a:	627b      	str	r3, [r7, #36]	; 0x24
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003622:	429a      	cmp	r2, r3
 8003624:	d3ce      	bcc.n	80035c4 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	695a      	ldr	r2, [r3, #20]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003634:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4618      	mov	r0, r3
 800363c:	f005 fc40 	bl	8008ec0 <USB_ReadInterrupts>
 8003640:	4603      	mov	r3, r0
 8003642:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003646:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800364a:	d155      	bne.n	80036f8 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800364c:	2301      	movs	r3, #1
 800364e:	627b      	str	r3, [r7, #36]	; 0x24
 8003650:	e045      	b.n	80036de <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	015a      	lsls	r2, r3, #5
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	4413      	add	r3, r2
 800365a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003662:	6879      	ldr	r1, [r7, #4]
 8003664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003666:	4613      	mov	r3, r2
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	4413      	add	r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	440b      	add	r3, r1
 8003670:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d12e      	bne.n	80036d8 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800367a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800367c:	2b00      	cmp	r3, #0
 800367e:	da2b      	bge.n	80036d8 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800368c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003690:	429a      	cmp	r2, r3
 8003692:	d121      	bne.n	80036d8 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003694:	6879      	ldr	r1, [r7, #4]
 8003696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003698:	4613      	mov	r3, r2
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	4413      	add	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	440b      	add	r3, r1
 80036a2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80036a6:	2201      	movs	r2, #1
 80036a8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80036aa:	6a3b      	ldr	r3, [r7, #32]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80036b2:	6a3b      	ldr	r3, [r7, #32]
 80036b4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80036b6:	6a3b      	ldr	r3, [r7, #32]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10a      	bne.n	80036d8 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	69fa      	ldr	r2, [r7, #28]
 80036cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036d4:	6053      	str	r3, [r2, #4]
            break;
 80036d6:	e007      	b.n	80036e8 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036da:	3301      	adds	r3, #1
 80036dc:	627b      	str	r3, [r7, #36]	; 0x24
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d3b4      	bcc.n	8003652 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	695a      	ldr	r2, [r3, #20]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80036f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f005 fbdf 	bl	8008ec0 <USB_ReadInterrupts>
 8003702:	4603      	mov	r3, r0
 8003704:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800370c:	d10a      	bne.n	8003724 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f008 f872 	bl	800b7f8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	695a      	ldr	r2, [r3, #20]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003722:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4618      	mov	r0, r3
 800372a:	f005 fbc9 	bl	8008ec0 <USB_ReadInterrupts>
 800372e:	4603      	mov	r3, r0
 8003730:	f003 0304 	and.w	r3, r3, #4
 8003734:	2b04      	cmp	r3, #4
 8003736:	d115      	bne.n	8003764 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	f003 0304 	and.w	r3, r3, #4
 8003746:	2b00      	cmp	r3, #0
 8003748:	d002      	beq.n	8003750 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f008 f862 	bl	800b814 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6859      	ldr	r1, [r3, #4]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	430a      	orrs	r2, r1
 800375e:	605a      	str	r2, [r3, #4]
 8003760:	e000      	b.n	8003764 <HAL_PCD_IRQHandler+0x992>
      return;
 8003762:	bf00      	nop
    }
  }
}
 8003764:	3734      	adds	r7, #52	; 0x34
 8003766:	46bd      	mov	sp, r7
 8003768:	bd90      	pop	{r4, r7, pc}

0800376a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b082      	sub	sp, #8
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
 8003772:	460b      	mov	r3, r1
 8003774:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800377c:	2b01      	cmp	r3, #1
 800377e:	d101      	bne.n	8003784 <HAL_PCD_SetAddress+0x1a>
 8003780:	2302      	movs	r3, #2
 8003782:	e013      	b.n	80037ac <HAL_PCD_SetAddress+0x42>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	78fa      	ldrb	r2, [r7, #3]
 8003790:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	78fa      	ldrb	r2, [r7, #3]
 800379a:	4611      	mov	r1, r2
 800379c:	4618      	mov	r0, r3
 800379e:	f005 fb27 	bl	8008df0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3708      	adds	r7, #8
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	4608      	mov	r0, r1
 80037be:	4611      	mov	r1, r2
 80037c0:	461a      	mov	r2, r3
 80037c2:	4603      	mov	r3, r0
 80037c4:	70fb      	strb	r3, [r7, #3]
 80037c6:	460b      	mov	r3, r1
 80037c8:	803b      	strh	r3, [r7, #0]
 80037ca:	4613      	mov	r3, r2
 80037cc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80037ce:	2300      	movs	r3, #0
 80037d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	da0f      	bge.n	80037fa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037da:	78fb      	ldrb	r3, [r7, #3]
 80037dc:	f003 020f 	and.w	r2, r3, #15
 80037e0:	4613      	mov	r3, r2
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	4413      	add	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	3338      	adds	r3, #56	; 0x38
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	4413      	add	r3, r2
 80037ee:	3304      	adds	r3, #4
 80037f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2201      	movs	r2, #1
 80037f6:	705a      	strb	r2, [r3, #1]
 80037f8:	e00f      	b.n	800381a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037fa:	78fb      	ldrb	r3, [r7, #3]
 80037fc:	f003 020f 	and.w	r2, r3, #15
 8003800:	4613      	mov	r3, r2
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	4413      	add	r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	4413      	add	r3, r2
 8003810:	3304      	adds	r3, #4
 8003812:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800381a:	78fb      	ldrb	r3, [r7, #3]
 800381c:	f003 030f 	and.w	r3, r3, #15
 8003820:	b2da      	uxtb	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003826:	883a      	ldrh	r2, [r7, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	78ba      	ldrb	r2, [r7, #2]
 8003830:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	785b      	ldrb	r3, [r3, #1]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d004      	beq.n	8003844 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	b29a      	uxth	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003844:	78bb      	ldrb	r3, [r7, #2]
 8003846:	2b02      	cmp	r3, #2
 8003848:	d102      	bne.n	8003850 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003856:	2b01      	cmp	r3, #1
 8003858:	d101      	bne.n	800385e <HAL_PCD_EP_Open+0xaa>
 800385a:	2302      	movs	r3, #2
 800385c:	e00e      	b.n	800387c <HAL_PCD_EP_Open+0xc8>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68f9      	ldr	r1, [r7, #12]
 800386c:	4618      	mov	r0, r3
 800386e:	f004 fca7 	bl	80081c0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800387a:	7afb      	ldrb	r3, [r7, #11]
}
 800387c:	4618      	mov	r0, r3
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	460b      	mov	r3, r1
 800388e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003890:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003894:	2b00      	cmp	r3, #0
 8003896:	da0f      	bge.n	80038b8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003898:	78fb      	ldrb	r3, [r7, #3]
 800389a:	f003 020f 	and.w	r2, r3, #15
 800389e:	4613      	mov	r3, r2
 80038a0:	00db      	lsls	r3, r3, #3
 80038a2:	4413      	add	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	3338      	adds	r3, #56	; 0x38
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	4413      	add	r3, r2
 80038ac:	3304      	adds	r3, #4
 80038ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2201      	movs	r2, #1
 80038b4:	705a      	strb	r2, [r3, #1]
 80038b6:	e00f      	b.n	80038d8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038b8:	78fb      	ldrb	r3, [r7, #3]
 80038ba:	f003 020f 	and.w	r2, r3, #15
 80038be:	4613      	mov	r3, r2
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	4413      	add	r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	4413      	add	r3, r2
 80038ce:	3304      	adds	r3, #4
 80038d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80038d8:	78fb      	ldrb	r3, [r7, #3]
 80038da:	f003 030f 	and.w	r3, r3, #15
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d101      	bne.n	80038f2 <HAL_PCD_EP_Close+0x6e>
 80038ee:	2302      	movs	r3, #2
 80038f0:	e00e      	b.n	8003910 <HAL_PCD_EP_Close+0x8c>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68f9      	ldr	r1, [r7, #12]
 8003900:	4618      	mov	r0, r3
 8003902:	f004 fce5 	bl	80082d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	607a      	str	r2, [r7, #4]
 8003922:	603b      	str	r3, [r7, #0]
 8003924:	460b      	mov	r3, r1
 8003926:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003928:	7afb      	ldrb	r3, [r7, #11]
 800392a:	f003 020f 	and.w	r2, r3, #15
 800392e:	4613      	mov	r3, r2
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	4413      	add	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	4413      	add	r3, r2
 800393e:	3304      	adds	r3, #4
 8003940:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	2200      	movs	r2, #0
 8003952:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	2200      	movs	r2, #0
 8003958:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800395a:	7afb      	ldrb	r3, [r7, #11]
 800395c:	f003 030f 	and.w	r3, r3, #15
 8003960:	b2da      	uxtb	r2, r3
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d102      	bne.n	8003974 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6818      	ldr	r0, [r3, #0]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	b2db      	uxtb	r3, r3
 800397e:	461a      	mov	r2, r3
 8003980:	6979      	ldr	r1, [r7, #20]
 8003982:	f004 fd81 	bl	8008488 <USB_EPStartXfer>

  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3718      	adds	r7, #24
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	460b      	mov	r3, r1
 800399a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800399c:	78fb      	ldrb	r3, [r7, #3]
 800399e:	f003 020f 	and.w	r2, r3, #15
 80039a2:	6879      	ldr	r1, [r7, #4]
 80039a4:	4613      	mov	r3, r2
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	4413      	add	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	440b      	add	r3, r1
 80039ae:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80039b2:	681b      	ldr	r3, [r3, #0]
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	607a      	str	r2, [r7, #4]
 80039ca:	603b      	str	r3, [r7, #0]
 80039cc:	460b      	mov	r3, r1
 80039ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039d0:	7afb      	ldrb	r3, [r7, #11]
 80039d2:	f003 020f 	and.w	r2, r3, #15
 80039d6:	4613      	mov	r3, r2
 80039d8:	00db      	lsls	r3, r3, #3
 80039da:	4413      	add	r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	3338      	adds	r3, #56	; 0x38
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	4413      	add	r3, r2
 80039e4:	3304      	adds	r3, #4
 80039e6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	2200      	movs	r2, #0
 80039f8:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	2201      	movs	r2, #1
 80039fe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a00:	7afb      	ldrb	r3, [r7, #11]
 8003a02:	f003 030f 	and.w	r3, r3, #15
 8003a06:	b2da      	uxtb	r2, r3
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d102      	bne.n	8003a1a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6818      	ldr	r0, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	461a      	mov	r2, r3
 8003a26:	6979      	ldr	r1, [r7, #20]
 8003a28:	f004 fd2e 	bl	8008488 <USB_EPStartXfer>

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3718      	adds	r7, #24
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b084      	sub	sp, #16
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
 8003a3e:	460b      	mov	r3, r1
 8003a40:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003a42:	78fb      	ldrb	r3, [r7, #3]
 8003a44:	f003 020f 	and.w	r2, r3, #15
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d901      	bls.n	8003a54 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e050      	b.n	8003af6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	da0f      	bge.n	8003a7c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a5c:	78fb      	ldrb	r3, [r7, #3]
 8003a5e:	f003 020f 	and.w	r2, r3, #15
 8003a62:	4613      	mov	r3, r2
 8003a64:	00db      	lsls	r3, r3, #3
 8003a66:	4413      	add	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	3338      	adds	r3, #56	; 0x38
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	4413      	add	r3, r2
 8003a70:	3304      	adds	r3, #4
 8003a72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2201      	movs	r2, #1
 8003a78:	705a      	strb	r2, [r3, #1]
 8003a7a:	e00d      	b.n	8003a98 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a7c:	78fa      	ldrb	r2, [r7, #3]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	00db      	lsls	r3, r3, #3
 8003a82:	4413      	add	r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	3304      	adds	r3, #4
 8003a90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a9e:	78fb      	ldrb	r3, [r7, #3]
 8003aa0:	f003 030f 	and.w	r3, r3, #15
 8003aa4:	b2da      	uxtb	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d101      	bne.n	8003ab8 <HAL_PCD_EP_SetStall+0x82>
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	e01e      	b.n	8003af6 <HAL_PCD_EP_SetStall+0xc0>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68f9      	ldr	r1, [r7, #12]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f005 f8be 	bl	8008c48 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003acc:	78fb      	ldrb	r3, [r7, #3]
 8003ace:	f003 030f 	and.w	r3, r3, #15
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10a      	bne.n	8003aec <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6818      	ldr	r0, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	b2d9      	uxtb	r1, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	f005 fab0 	bl	800904c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b084      	sub	sp, #16
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
 8003b06:	460b      	mov	r3, r1
 8003b08:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003b0a:	78fb      	ldrb	r3, [r7, #3]
 8003b0c:	f003 020f 	and.w	r2, r3, #15
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d901      	bls.n	8003b1c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e042      	b.n	8003ba2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	da0f      	bge.n	8003b44 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b24:	78fb      	ldrb	r3, [r7, #3]
 8003b26:	f003 020f 	and.w	r2, r3, #15
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	4413      	add	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	3338      	adds	r3, #56	; 0x38
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	4413      	add	r3, r2
 8003b38:	3304      	adds	r3, #4
 8003b3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	705a      	strb	r2, [r3, #1]
 8003b42:	e00f      	b.n	8003b64 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b44:	78fb      	ldrb	r3, [r7, #3]
 8003b46:	f003 020f 	and.w	r2, r3, #15
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	4413      	add	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	4413      	add	r3, r2
 8003b5a:	3304      	adds	r3, #4
 8003b5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b6a:	78fb      	ldrb	r3, [r7, #3]
 8003b6c:	f003 030f 	and.w	r3, r3, #15
 8003b70:	b2da      	uxtb	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d101      	bne.n	8003b84 <HAL_PCD_EP_ClrStall+0x86>
 8003b80:	2302      	movs	r3, #2
 8003b82:	e00e      	b.n	8003ba2 <HAL_PCD_EP_ClrStall+0xa4>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68f9      	ldr	r1, [r7, #12]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f005 f8c6 	bl	8008d24 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b084      	sub	sp, #16
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003bb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	da0c      	bge.n	8003bd8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bbe:	78fb      	ldrb	r3, [r7, #3]
 8003bc0:	f003 020f 	and.w	r2, r3, #15
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	4413      	add	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	3338      	adds	r3, #56	; 0x38
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	3304      	adds	r3, #4
 8003bd4:	60fb      	str	r3, [r7, #12]
 8003bd6:	e00c      	b.n	8003bf2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bd8:	78fb      	ldrb	r3, [r7, #3]
 8003bda:	f003 020f 	and.w	r2, r3, #15
 8003bde:	4613      	mov	r3, r2
 8003be0:	00db      	lsls	r3, r3, #3
 8003be2:	4413      	add	r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	4413      	add	r3, r2
 8003bee:	3304      	adds	r3, #4
 8003bf0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68f9      	ldr	r1, [r7, #12]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f004 fee5 	bl	80089c8 <USB_EPStopXfer>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003c02:	7afb      	ldrb	r3, [r7, #11]
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3710      	adds	r7, #16
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b08a      	sub	sp, #40	; 0x28
 8003c10:	af02      	add	r7, sp, #8
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	4613      	mov	r3, r2
 8003c24:	00db      	lsls	r3, r3, #3
 8003c26:	4413      	add	r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	3338      	adds	r3, #56	; 0x38
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	4413      	add	r3, r2
 8003c30:	3304      	adds	r3, #4
 8003c32:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	695a      	ldr	r2, [r3, #20]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d901      	bls.n	8003c44 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e06c      	b.n	8003d1e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	691a      	ldr	r2, [r3, #16]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	695b      	ldr	r3, [r3, #20]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	69fa      	ldr	r2, [r7, #28]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d902      	bls.n	8003c60 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	3303      	adds	r3, #3
 8003c64:	089b      	lsrs	r3, r3, #2
 8003c66:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c68:	e02b      	b.n	8003cc2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	691a      	ldr	r2, [r3, #16]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	69fa      	ldr	r2, [r7, #28]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d902      	bls.n	8003c86 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	3303      	adds	r3, #3
 8003c8a:	089b      	lsrs	r3, r3, #2
 8003c8c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	68d9      	ldr	r1, [r3, #12]
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	b2da      	uxtb	r2, r3
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	9300      	str	r3, [sp, #0]
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	6978      	ldr	r0, [r7, #20]
 8003ca6:	f004 ff39 	bl	8008b1c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	68da      	ldr	r2, [r3, #12]
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	441a      	add	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	695a      	ldr	r2, [r3, #20]
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	441a      	add	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	015a      	lsls	r2, r3, #5
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	4413      	add	r3, r2
 8003cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003cd2:	69ba      	ldr	r2, [r7, #24]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d809      	bhi.n	8003cec <PCD_WriteEmptyTxFifo+0xe0>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	695a      	ldr	r2, [r3, #20]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d203      	bcs.n	8003cec <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1be      	bne.n	8003c6a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	691a      	ldr	r2, [r3, #16]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d811      	bhi.n	8003d1c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	f003 030f 	and.w	r3, r3, #15
 8003cfe:	2201      	movs	r2, #1
 8003d00:	fa02 f303 	lsl.w	r3, r2, r3
 8003d04:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	43db      	mvns	r3, r3
 8003d12:	6939      	ldr	r1, [r7, #16]
 8003d14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d18:	4013      	ands	r3, r2
 8003d1a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3720      	adds	r7, #32
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
	...

08003d28 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b088      	sub	sp, #32
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	333c      	adds	r3, #60	; 0x3c
 8003d40:	3304      	adds	r3, #4
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	015a      	lsls	r2, r3, #5
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d17b      	bne.n	8003e56 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	f003 0308 	and.w	r3, r3, #8
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d015      	beq.n	8003d94 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	4a61      	ldr	r2, [pc, #388]	; (8003ef0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	f240 80b9 	bls.w	8003ee4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f000 80b3 	beq.w	8003ee4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	015a      	lsls	r2, r3, #5
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	4413      	add	r3, r2
 8003d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d90:	6093      	str	r3, [r2, #8]
 8003d92:	e0a7      	b.n	8003ee4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	f003 0320 	and.w	r3, r3, #32
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d009      	beq.n	8003db2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	015a      	lsls	r2, r3, #5
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	4413      	add	r3, r2
 8003da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003daa:	461a      	mov	r2, r3
 8003dac:	2320      	movs	r3, #32
 8003dae:	6093      	str	r3, [r2, #8]
 8003db0:	e098      	b.n	8003ee4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f040 8093 	bne.w	8003ee4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	4a4b      	ldr	r2, [pc, #300]	; (8003ef0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d90f      	bls.n	8003de6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00a      	beq.n	8003de6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	015a      	lsls	r2, r3, #5
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ddc:	461a      	mov	r2, r3
 8003dde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003de2:	6093      	str	r3, [r2, #8]
 8003de4:	e07e      	b.n	8003ee4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	4613      	mov	r3, r2
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	4413      	add	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	4413      	add	r3, r2
 8003df8:	3304      	adds	r3, #4
 8003dfa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6a1a      	ldr	r2, [r3, #32]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	0159      	lsls	r1, r3, #5
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	440b      	add	r3, r1
 8003e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e12:	1ad2      	subs	r2, r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d114      	bne.n	8003e48 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d109      	bne.n	8003e3a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6818      	ldr	r0, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e30:	461a      	mov	r2, r3
 8003e32:	2101      	movs	r1, #1
 8003e34:	f005 f90a 	bl	800904c <USB_EP0_OutStart>
 8003e38:	e006      	b.n	8003e48 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	68da      	ldr	r2, [r3, #12]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	441a      	add	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f007 fc0e 	bl	800b670 <HAL_PCD_DataOutStageCallback>
 8003e54:	e046      	b.n	8003ee4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	4a26      	ldr	r2, [pc, #152]	; (8003ef4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d124      	bne.n	8003ea8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00a      	beq.n	8003e7e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	015a      	lsls	r2, r3, #5
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	4413      	add	r3, r2
 8003e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e74:	461a      	mov	r2, r3
 8003e76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e7a:	6093      	str	r3, [r2, #8]
 8003e7c:	e032      	b.n	8003ee4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	f003 0320 	and.w	r3, r3, #32
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d008      	beq.n	8003e9a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	015a      	lsls	r2, r3, #5
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	4413      	add	r3, r2
 8003e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e94:	461a      	mov	r2, r3
 8003e96:	2320      	movs	r3, #32
 8003e98:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f007 fbe5 	bl	800b670 <HAL_PCD_DataOutStageCallback>
 8003ea6:	e01d      	b.n	8003ee4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d114      	bne.n	8003ed8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003eae:	6879      	ldr	r1, [r7, #4]
 8003eb0:	683a      	ldr	r2, [r7, #0]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	4413      	add	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	440b      	add	r3, r1
 8003ebc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d108      	bne.n	8003ed8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6818      	ldr	r0, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	f005 f8ba 	bl	800904c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	4619      	mov	r1, r3
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f007 fbc6 	bl	800b670 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3720      	adds	r7, #32
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	4f54300a 	.word	0x4f54300a
 8003ef4:	4f54310a 	.word	0x4f54310a

08003ef8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	333c      	adds	r3, #60	; 0x3c
 8003f10:	3304      	adds	r3, #4
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	015a      	lsls	r2, r3, #5
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	4a15      	ldr	r2, [pc, #84]	; (8003f80 <PCD_EP_OutSetupPacket_int+0x88>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d90e      	bls.n	8003f4c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d009      	beq.n	8003f4c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	015a      	lsls	r2, r3, #5
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	4413      	add	r3, r2
 8003f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f44:	461a      	mov	r2, r3
 8003f46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f4a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f007 fb7d 	bl	800b64c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	4a0a      	ldr	r2, [pc, #40]	; (8003f80 <PCD_EP_OutSetupPacket_int+0x88>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d90c      	bls.n	8003f74 <PCD_EP_OutSetupPacket_int+0x7c>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d108      	bne.n	8003f74 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6818      	ldr	r0, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	2101      	movs	r1, #1
 8003f70:	f005 f86c 	bl	800904c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3718      	adds	r7, #24
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	4f54300a 	.word	0x4f54300a

08003f84 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	70fb      	strb	r3, [r7, #3]
 8003f90:	4613      	mov	r3, r2
 8003f92:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003f9c:	78fb      	ldrb	r3, [r7, #3]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d107      	bne.n	8003fb2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003fa2:	883b      	ldrh	r3, [r7, #0]
 8003fa4:	0419      	lsls	r1, r3, #16
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68ba      	ldr	r2, [r7, #8]
 8003fac:	430a      	orrs	r2, r1
 8003fae:	629a      	str	r2, [r3, #40]	; 0x28
 8003fb0:	e028      	b.n	8004004 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb8:	0c1b      	lsrs	r3, r3, #16
 8003fba:	68ba      	ldr	r2, [r7, #8]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	73fb      	strb	r3, [r7, #15]
 8003fc4:	e00d      	b.n	8003fe2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	7bfb      	ldrb	r3, [r7, #15]
 8003fcc:	3340      	adds	r3, #64	; 0x40
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4413      	add	r3, r2
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	0c1b      	lsrs	r3, r3, #16
 8003fd6:	68ba      	ldr	r2, [r7, #8]
 8003fd8:	4413      	add	r3, r2
 8003fda:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003fdc:	7bfb      	ldrb	r3, [r7, #15]
 8003fde:	3301      	adds	r3, #1
 8003fe0:	73fb      	strb	r3, [r7, #15]
 8003fe2:	7bfa      	ldrb	r2, [r7, #15]
 8003fe4:	78fb      	ldrb	r3, [r7, #3]
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d3ec      	bcc.n	8003fc6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003fec:	883b      	ldrh	r3, [r7, #0]
 8003fee:	0418      	lsls	r0, r3, #16
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6819      	ldr	r1, [r3, #0]
 8003ff4:	78fb      	ldrb	r3, [r7, #3]
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	68ba      	ldr	r2, [r7, #8]
 8003ffa:	4302      	orrs	r2, r0
 8003ffc:	3340      	adds	r3, #64	; 0x40
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	440b      	add	r3, r1
 8004002:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3714      	adds	r7, #20
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr

08004012 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004012:	b480      	push	{r7}
 8004014:	b083      	sub	sp, #12
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
 800401a:	460b      	mov	r3, r1
 800401c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	887a      	ldrh	r2, [r7, #2]
 8004024:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004062:	4b05      	ldr	r3, [pc, #20]	; (8004078 <HAL_PCDEx_ActivateLPM+0x44>)
 8004064:	4313      	orrs	r3, r2
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	3714      	adds	r7, #20
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr
 8004078:	10000003 	.word	0x10000003

0800407c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	460b      	mov	r3, r1
 8004086:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800409c:	4b19      	ldr	r3, [pc, #100]	; (8004104 <HAL_PWREx_ConfigSupply+0x70>)
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	f003 0304 	and.w	r3, r3, #4
 80040a4:	2b04      	cmp	r3, #4
 80040a6:	d00a      	beq.n	80040be <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80040a8:	4b16      	ldr	r3, [pc, #88]	; (8004104 <HAL_PWREx_ConfigSupply+0x70>)
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	f003 0307 	and.w	r3, r3, #7
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d001      	beq.n	80040ba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e01f      	b.n	80040fa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80040ba:	2300      	movs	r3, #0
 80040bc:	e01d      	b.n	80040fa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80040be:	4b11      	ldr	r3, [pc, #68]	; (8004104 <HAL_PWREx_ConfigSupply+0x70>)
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	f023 0207 	bic.w	r2, r3, #7
 80040c6:	490f      	ldr	r1, [pc, #60]	; (8004104 <HAL_PWREx_ConfigSupply+0x70>)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80040ce:	f7fd f987 	bl	80013e0 <HAL_GetTick>
 80040d2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80040d4:	e009      	b.n	80040ea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80040d6:	f7fd f983 	bl	80013e0 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040e4:	d901      	bls.n	80040ea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e007      	b.n	80040fa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80040ea:	4b06      	ldr	r3, [pc, #24]	; (8004104 <HAL_PWREx_ConfigSupply+0x70>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040f6:	d1ee      	bne.n	80040d6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	58024800 	.word	0x58024800

08004108 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004108:	b480      	push	{r7}
 800410a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800410c:	4b05      	ldr	r3, [pc, #20]	; (8004124 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	4a04      	ldr	r2, [pc, #16]	; (8004124 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004112:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004116:	60d3      	str	r3, [r2, #12]
}
 8004118:	bf00      	nop
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	58024800 	.word	0x58024800

08004128 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b08c      	sub	sp, #48	; 0x30
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d102      	bne.n	800413c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	f000 bc48 	b.w	80049cc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 8088 	beq.w	800425a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800414a:	4b99      	ldr	r3, [pc, #612]	; (80043b0 <HAL_RCC_OscConfig+0x288>)
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004152:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004154:	4b96      	ldr	r3, [pc, #600]	; (80043b0 <HAL_RCC_OscConfig+0x288>)
 8004156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004158:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800415a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800415c:	2b10      	cmp	r3, #16
 800415e:	d007      	beq.n	8004170 <HAL_RCC_OscConfig+0x48>
 8004160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004162:	2b18      	cmp	r3, #24
 8004164:	d111      	bne.n	800418a <HAL_RCC_OscConfig+0x62>
 8004166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004168:	f003 0303 	and.w	r3, r3, #3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d10c      	bne.n	800418a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004170:	4b8f      	ldr	r3, [pc, #572]	; (80043b0 <HAL_RCC_OscConfig+0x288>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d06d      	beq.n	8004258 <HAL_RCC_OscConfig+0x130>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d169      	bne.n	8004258 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	f000 bc21 	b.w	80049cc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004192:	d106      	bne.n	80041a2 <HAL_RCC_OscConfig+0x7a>
 8004194:	4b86      	ldr	r3, [pc, #536]	; (80043b0 <HAL_RCC_OscConfig+0x288>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a85      	ldr	r2, [pc, #532]	; (80043b0 <HAL_RCC_OscConfig+0x288>)
 800419a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800419e:	6013      	str	r3, [r2, #0]
 80041a0:	e02e      	b.n	8004200 <HAL_RCC_OscConfig+0xd8>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10c      	bne.n	80041c4 <HAL_RCC_OscConfig+0x9c>
 80041aa:	4b81      	ldr	r3, [pc, #516]	; (80043b0 <HAL_RCC_OscConfig+0x288>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a80      	ldr	r2, [pc, #512]	; (80043b0 <HAL_RCC_OscConfig+0x288>)
 80041b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041b4:	6013      	str	r3, [r2, #0]
 80041b6:	4b7e      	ldr	r3, [pc, #504]	; (80043b0 <HAL_RCC_OscConfig+0x288>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a7d      	ldr	r2, [pc, #500]	; (80043b0 <HAL_RCC_OscConfig+0x288>)
 80041bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041c0:	6013      	str	r3, [r2, #0]
 80041c2:	e01d      	b.n	8004200 <HAL_RCC_OscConfig+0xd8>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041cc:	d10c      	bne.n	80041e8 <HAL_RCC_OscConfig+0xc0>
 80041ce:	4b78      	ldr	r3, [pc, #480]	; (80043b0 <HAL_RCC_OscConfig+0x288>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a77      	ldr	r2, [pc, #476]	; (80043b0 <HAL_RCC_OscConfig+0x288>)
 80041d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041d8:	6013      	str	r3, [r2, #0]
 80041da:	4b75      	ldr	r3, [pc, #468]	; (80043b0 <HAL_RCC_OscConfig+0x288>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a74      	ldr	r2, [pc, #464]	; (80043b0 <HAL_RCC_OscConfig+0x288>)
 80041e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041e4:	6013      	str	r3, [r2, #0]
 80041e6:	e00b      	b.n	8004200 <HAL_RCC_OscConfig+0xd8>
 80041e8:	4b71      	ldr	r3, [pc, #452]	; (80043b0 <HAL_RCC_OscConfig+0x288>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a70      	ldr	r2, [pc, #448]	; (80043b0 <HAL_RCC_OscConfig+0x288>)
 80041ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041f2:	6013      	str	r3, [r2, #0]
 80041f4:	4b6e      	ldr	r3, [pc, #440]	; (80043b0 <HAL_RCC_OscConfig+0x288>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a6d      	ldr	r2, [pc, #436]	; (80043b0 <HAL_RCC_OscConfig+0x288>)
 80041fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d013      	beq.n	8004230 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004208:	f7fd f8ea 	bl	80013e0 <HAL_GetTick>
 800420c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800420e:	e008      	b.n	8004222 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004210:	f7fd f8e6 	bl	80013e0 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b64      	cmp	r3, #100	; 0x64
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e3d4      	b.n	80049cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004222:	4b63      	ldr	r3, [pc, #396]	; (80043b0 <HAL_RCC_OscConfig+0x288>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d0f0      	beq.n	8004210 <HAL_RCC_OscConfig+0xe8>
 800422e:	e014      	b.n	800425a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004230:	f7fd f8d6 	bl	80013e0 <HAL_GetTick>
 8004234:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004236:	e008      	b.n	800424a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004238:	f7fd f8d2 	bl	80013e0 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b64      	cmp	r3, #100	; 0x64
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e3c0      	b.n	80049cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800424a:	4b59      	ldr	r3, [pc, #356]	; (80043b0 <HAL_RCC_OscConfig+0x288>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1f0      	bne.n	8004238 <HAL_RCC_OscConfig+0x110>
 8004256:	e000      	b.n	800425a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004258:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b00      	cmp	r3, #0
 8004264:	f000 80ca 	beq.w	80043fc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004268:	4b51      	ldr	r3, [pc, #324]	; (80043b0 <HAL_RCC_OscConfig+0x288>)
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004270:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004272:	4b4f      	ldr	r3, [pc, #316]	; (80043b0 <HAL_RCC_OscConfig+0x288>)
 8004274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004276:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004278:	6a3b      	ldr	r3, [r7, #32]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d007      	beq.n	800428e <HAL_RCC_OscConfig+0x166>
 800427e:	6a3b      	ldr	r3, [r7, #32]
 8004280:	2b18      	cmp	r3, #24
 8004282:	d156      	bne.n	8004332 <HAL_RCC_OscConfig+0x20a>
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	f003 0303 	and.w	r3, r3, #3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d151      	bne.n	8004332 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800428e:	4b48      	ldr	r3, [pc, #288]	; (80043b0 <HAL_RCC_OscConfig+0x288>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0304 	and.w	r3, r3, #4
 8004296:	2b00      	cmp	r3, #0
 8004298:	d005      	beq.n	80042a6 <HAL_RCC_OscConfig+0x17e>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d101      	bne.n	80042a6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e392      	b.n	80049cc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80042a6:	4b42      	ldr	r3, [pc, #264]	; (80043b0 <HAL_RCC_OscConfig+0x288>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f023 0219 	bic.w	r2, r3, #25
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	493f      	ldr	r1, [pc, #252]	; (80043b0 <HAL_RCC_OscConfig+0x288>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b8:	f7fd f892 	bl	80013e0 <HAL_GetTick>
 80042bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042be:	e008      	b.n	80042d2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042c0:	f7fd f88e 	bl	80013e0 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e37c      	b.n	80049cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042d2:	4b37      	ldr	r3, [pc, #220]	; (80043b0 <HAL_RCC_OscConfig+0x288>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0304 	and.w	r3, r3, #4
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d0f0      	beq.n	80042c0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042de:	f7fd f8af 	bl	8001440 <HAL_GetREVID>
 80042e2:	4603      	mov	r3, r0
 80042e4:	f241 0203 	movw	r2, #4099	; 0x1003
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d817      	bhi.n	800431c <HAL_RCC_OscConfig+0x1f4>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	2b40      	cmp	r3, #64	; 0x40
 80042f2:	d108      	bne.n	8004306 <HAL_RCC_OscConfig+0x1de>
 80042f4:	4b2e      	ldr	r3, [pc, #184]	; (80043b0 <HAL_RCC_OscConfig+0x288>)
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80042fc:	4a2c      	ldr	r2, [pc, #176]	; (80043b0 <HAL_RCC_OscConfig+0x288>)
 80042fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004302:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004304:	e07a      	b.n	80043fc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004306:	4b2a      	ldr	r3, [pc, #168]	; (80043b0 <HAL_RCC_OscConfig+0x288>)
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	031b      	lsls	r3, r3, #12
 8004314:	4926      	ldr	r1, [pc, #152]	; (80043b0 <HAL_RCC_OscConfig+0x288>)
 8004316:	4313      	orrs	r3, r2
 8004318:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800431a:	e06f      	b.n	80043fc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800431c:	4b24      	ldr	r3, [pc, #144]	; (80043b0 <HAL_RCC_OscConfig+0x288>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	061b      	lsls	r3, r3, #24
 800432a:	4921      	ldr	r1, [pc, #132]	; (80043b0 <HAL_RCC_OscConfig+0x288>)
 800432c:	4313      	orrs	r3, r2
 800432e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004330:	e064      	b.n	80043fc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d047      	beq.n	80043ca <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800433a:	4b1d      	ldr	r3, [pc, #116]	; (80043b0 <HAL_RCC_OscConfig+0x288>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f023 0219 	bic.w	r2, r3, #25
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	491a      	ldr	r1, [pc, #104]	; (80043b0 <HAL_RCC_OscConfig+0x288>)
 8004348:	4313      	orrs	r3, r2
 800434a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434c:	f7fd f848 	bl	80013e0 <HAL_GetTick>
 8004350:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004352:	e008      	b.n	8004366 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004354:	f7fd f844 	bl	80013e0 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	2b02      	cmp	r3, #2
 8004360:	d901      	bls.n	8004366 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e332      	b.n	80049cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004366:	4b12      	ldr	r3, [pc, #72]	; (80043b0 <HAL_RCC_OscConfig+0x288>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0304 	and.w	r3, r3, #4
 800436e:	2b00      	cmp	r3, #0
 8004370:	d0f0      	beq.n	8004354 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004372:	f7fd f865 	bl	8001440 <HAL_GetREVID>
 8004376:	4603      	mov	r3, r0
 8004378:	f241 0203 	movw	r2, #4099	; 0x1003
 800437c:	4293      	cmp	r3, r2
 800437e:	d819      	bhi.n	80043b4 <HAL_RCC_OscConfig+0x28c>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	2b40      	cmp	r3, #64	; 0x40
 8004386:	d108      	bne.n	800439a <HAL_RCC_OscConfig+0x272>
 8004388:	4b09      	ldr	r3, [pc, #36]	; (80043b0 <HAL_RCC_OscConfig+0x288>)
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004390:	4a07      	ldr	r2, [pc, #28]	; (80043b0 <HAL_RCC_OscConfig+0x288>)
 8004392:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004396:	6053      	str	r3, [r2, #4]
 8004398:	e030      	b.n	80043fc <HAL_RCC_OscConfig+0x2d4>
 800439a:	4b05      	ldr	r3, [pc, #20]	; (80043b0 <HAL_RCC_OscConfig+0x288>)
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	031b      	lsls	r3, r3, #12
 80043a8:	4901      	ldr	r1, [pc, #4]	; (80043b0 <HAL_RCC_OscConfig+0x288>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	604b      	str	r3, [r1, #4]
 80043ae:	e025      	b.n	80043fc <HAL_RCC_OscConfig+0x2d4>
 80043b0:	58024400 	.word	0x58024400
 80043b4:	4b9a      	ldr	r3, [pc, #616]	; (8004620 <HAL_RCC_OscConfig+0x4f8>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	061b      	lsls	r3, r3, #24
 80043c2:	4997      	ldr	r1, [pc, #604]	; (8004620 <HAL_RCC_OscConfig+0x4f8>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	604b      	str	r3, [r1, #4]
 80043c8:	e018      	b.n	80043fc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043ca:	4b95      	ldr	r3, [pc, #596]	; (8004620 <HAL_RCC_OscConfig+0x4f8>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a94      	ldr	r2, [pc, #592]	; (8004620 <HAL_RCC_OscConfig+0x4f8>)
 80043d0:	f023 0301 	bic.w	r3, r3, #1
 80043d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d6:	f7fd f803 	bl	80013e0 <HAL_GetTick>
 80043da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80043dc:	e008      	b.n	80043f0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043de:	f7fc ffff 	bl	80013e0 <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d901      	bls.n	80043f0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e2ed      	b.n	80049cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80043f0:	4b8b      	ldr	r3, [pc, #556]	; (8004620 <HAL_RCC_OscConfig+0x4f8>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0304 	and.w	r3, r3, #4
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1f0      	bne.n	80043de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0310 	and.w	r3, r3, #16
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 80a9 	beq.w	800455c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800440a:	4b85      	ldr	r3, [pc, #532]	; (8004620 <HAL_RCC_OscConfig+0x4f8>)
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004412:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004414:	4b82      	ldr	r3, [pc, #520]	; (8004620 <HAL_RCC_OscConfig+0x4f8>)
 8004416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004418:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	2b08      	cmp	r3, #8
 800441e:	d007      	beq.n	8004430 <HAL_RCC_OscConfig+0x308>
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	2b18      	cmp	r3, #24
 8004424:	d13a      	bne.n	800449c <HAL_RCC_OscConfig+0x374>
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	f003 0303 	and.w	r3, r3, #3
 800442c:	2b01      	cmp	r3, #1
 800442e:	d135      	bne.n	800449c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004430:	4b7b      	ldr	r3, [pc, #492]	; (8004620 <HAL_RCC_OscConfig+0x4f8>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004438:	2b00      	cmp	r3, #0
 800443a:	d005      	beq.n	8004448 <HAL_RCC_OscConfig+0x320>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	69db      	ldr	r3, [r3, #28]
 8004440:	2b80      	cmp	r3, #128	; 0x80
 8004442:	d001      	beq.n	8004448 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e2c1      	b.n	80049cc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004448:	f7fc fffa 	bl	8001440 <HAL_GetREVID>
 800444c:	4603      	mov	r3, r0
 800444e:	f241 0203 	movw	r2, #4099	; 0x1003
 8004452:	4293      	cmp	r3, r2
 8004454:	d817      	bhi.n	8004486 <HAL_RCC_OscConfig+0x35e>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a1b      	ldr	r3, [r3, #32]
 800445a:	2b20      	cmp	r3, #32
 800445c:	d108      	bne.n	8004470 <HAL_RCC_OscConfig+0x348>
 800445e:	4b70      	ldr	r3, [pc, #448]	; (8004620 <HAL_RCC_OscConfig+0x4f8>)
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004466:	4a6e      	ldr	r2, [pc, #440]	; (8004620 <HAL_RCC_OscConfig+0x4f8>)
 8004468:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800446c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800446e:	e075      	b.n	800455c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004470:	4b6b      	ldr	r3, [pc, #428]	; (8004620 <HAL_RCC_OscConfig+0x4f8>)
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a1b      	ldr	r3, [r3, #32]
 800447c:	069b      	lsls	r3, r3, #26
 800447e:	4968      	ldr	r1, [pc, #416]	; (8004620 <HAL_RCC_OscConfig+0x4f8>)
 8004480:	4313      	orrs	r3, r2
 8004482:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004484:	e06a      	b.n	800455c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004486:	4b66      	ldr	r3, [pc, #408]	; (8004620 <HAL_RCC_OscConfig+0x4f8>)
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	061b      	lsls	r3, r3, #24
 8004494:	4962      	ldr	r1, [pc, #392]	; (8004620 <HAL_RCC_OscConfig+0x4f8>)
 8004496:	4313      	orrs	r3, r2
 8004498:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800449a:	e05f      	b.n	800455c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	69db      	ldr	r3, [r3, #28]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d042      	beq.n	800452a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80044a4:	4b5e      	ldr	r3, [pc, #376]	; (8004620 <HAL_RCC_OscConfig+0x4f8>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a5d      	ldr	r2, [pc, #372]	; (8004620 <HAL_RCC_OscConfig+0x4f8>)
 80044aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b0:	f7fc ff96 	bl	80013e0 <HAL_GetTick>
 80044b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80044b6:	e008      	b.n	80044ca <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80044b8:	f7fc ff92 	bl	80013e0 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d901      	bls.n	80044ca <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e280      	b.n	80049cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80044ca:	4b55      	ldr	r3, [pc, #340]	; (8004620 <HAL_RCC_OscConfig+0x4f8>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d0f0      	beq.n	80044b8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80044d6:	f7fc ffb3 	bl	8001440 <HAL_GetREVID>
 80044da:	4603      	mov	r3, r0
 80044dc:	f241 0203 	movw	r2, #4099	; 0x1003
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d817      	bhi.n	8004514 <HAL_RCC_OscConfig+0x3ec>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a1b      	ldr	r3, [r3, #32]
 80044e8:	2b20      	cmp	r3, #32
 80044ea:	d108      	bne.n	80044fe <HAL_RCC_OscConfig+0x3d6>
 80044ec:	4b4c      	ldr	r3, [pc, #304]	; (8004620 <HAL_RCC_OscConfig+0x4f8>)
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80044f4:	4a4a      	ldr	r2, [pc, #296]	; (8004620 <HAL_RCC_OscConfig+0x4f8>)
 80044f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044fa:	6053      	str	r3, [r2, #4]
 80044fc:	e02e      	b.n	800455c <HAL_RCC_OscConfig+0x434>
 80044fe:	4b48      	ldr	r3, [pc, #288]	; (8004620 <HAL_RCC_OscConfig+0x4f8>)
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	069b      	lsls	r3, r3, #26
 800450c:	4944      	ldr	r1, [pc, #272]	; (8004620 <HAL_RCC_OscConfig+0x4f8>)
 800450e:	4313      	orrs	r3, r2
 8004510:	604b      	str	r3, [r1, #4]
 8004512:	e023      	b.n	800455c <HAL_RCC_OscConfig+0x434>
 8004514:	4b42      	ldr	r3, [pc, #264]	; (8004620 <HAL_RCC_OscConfig+0x4f8>)
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a1b      	ldr	r3, [r3, #32]
 8004520:	061b      	lsls	r3, r3, #24
 8004522:	493f      	ldr	r1, [pc, #252]	; (8004620 <HAL_RCC_OscConfig+0x4f8>)
 8004524:	4313      	orrs	r3, r2
 8004526:	60cb      	str	r3, [r1, #12]
 8004528:	e018      	b.n	800455c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800452a:	4b3d      	ldr	r3, [pc, #244]	; (8004620 <HAL_RCC_OscConfig+0x4f8>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a3c      	ldr	r2, [pc, #240]	; (8004620 <HAL_RCC_OscConfig+0x4f8>)
 8004530:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004534:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004536:	f7fc ff53 	bl	80013e0 <HAL_GetTick>
 800453a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800453c:	e008      	b.n	8004550 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800453e:	f7fc ff4f 	bl	80013e0 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	2b02      	cmp	r3, #2
 800454a:	d901      	bls.n	8004550 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e23d      	b.n	80049cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004550:	4b33      	ldr	r3, [pc, #204]	; (8004620 <HAL_RCC_OscConfig+0x4f8>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1f0      	bne.n	800453e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0308 	and.w	r3, r3, #8
 8004564:	2b00      	cmp	r3, #0
 8004566:	d036      	beq.n	80045d6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d019      	beq.n	80045a4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004570:	4b2b      	ldr	r3, [pc, #172]	; (8004620 <HAL_RCC_OscConfig+0x4f8>)
 8004572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004574:	4a2a      	ldr	r2, [pc, #168]	; (8004620 <HAL_RCC_OscConfig+0x4f8>)
 8004576:	f043 0301 	orr.w	r3, r3, #1
 800457a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800457c:	f7fc ff30 	bl	80013e0 <HAL_GetTick>
 8004580:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004584:	f7fc ff2c 	bl	80013e0 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b02      	cmp	r3, #2
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e21a      	b.n	80049cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004596:	4b22      	ldr	r3, [pc, #136]	; (8004620 <HAL_RCC_OscConfig+0x4f8>)
 8004598:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d0f0      	beq.n	8004584 <HAL_RCC_OscConfig+0x45c>
 80045a2:	e018      	b.n	80045d6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045a4:	4b1e      	ldr	r3, [pc, #120]	; (8004620 <HAL_RCC_OscConfig+0x4f8>)
 80045a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045a8:	4a1d      	ldr	r2, [pc, #116]	; (8004620 <HAL_RCC_OscConfig+0x4f8>)
 80045aa:	f023 0301 	bic.w	r3, r3, #1
 80045ae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b0:	f7fc ff16 	bl	80013e0 <HAL_GetTick>
 80045b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80045b6:	e008      	b.n	80045ca <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045b8:	f7fc ff12 	bl	80013e0 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e200      	b.n	80049cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80045ca:	4b15      	ldr	r3, [pc, #84]	; (8004620 <HAL_RCC_OscConfig+0x4f8>)
 80045cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1f0      	bne.n	80045b8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0320 	and.w	r3, r3, #32
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d039      	beq.n	8004656 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d01c      	beq.n	8004624 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80045ea:	4b0d      	ldr	r3, [pc, #52]	; (8004620 <HAL_RCC_OscConfig+0x4f8>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a0c      	ldr	r2, [pc, #48]	; (8004620 <HAL_RCC_OscConfig+0x4f8>)
 80045f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80045f4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80045f6:	f7fc fef3 	bl	80013e0 <HAL_GetTick>
 80045fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80045fc:	e008      	b.n	8004610 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045fe:	f7fc feef 	bl	80013e0 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2b02      	cmp	r3, #2
 800460a:	d901      	bls.n	8004610 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e1dd      	b.n	80049cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004610:	4b03      	ldr	r3, [pc, #12]	; (8004620 <HAL_RCC_OscConfig+0x4f8>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d0f0      	beq.n	80045fe <HAL_RCC_OscConfig+0x4d6>
 800461c:	e01b      	b.n	8004656 <HAL_RCC_OscConfig+0x52e>
 800461e:	bf00      	nop
 8004620:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004624:	4b9b      	ldr	r3, [pc, #620]	; (8004894 <HAL_RCC_OscConfig+0x76c>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a9a      	ldr	r2, [pc, #616]	; (8004894 <HAL_RCC_OscConfig+0x76c>)
 800462a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800462e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004630:	f7fc fed6 	bl	80013e0 <HAL_GetTick>
 8004634:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004636:	e008      	b.n	800464a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004638:	f7fc fed2 	bl	80013e0 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b02      	cmp	r3, #2
 8004644:	d901      	bls.n	800464a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e1c0      	b.n	80049cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800464a:	4b92      	ldr	r3, [pc, #584]	; (8004894 <HAL_RCC_OscConfig+0x76c>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1f0      	bne.n	8004638 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0304 	and.w	r3, r3, #4
 800465e:	2b00      	cmp	r3, #0
 8004660:	f000 8081 	beq.w	8004766 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004664:	4b8c      	ldr	r3, [pc, #560]	; (8004898 <HAL_RCC_OscConfig+0x770>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a8b      	ldr	r2, [pc, #556]	; (8004898 <HAL_RCC_OscConfig+0x770>)
 800466a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800466e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004670:	f7fc feb6 	bl	80013e0 <HAL_GetTick>
 8004674:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004676:	e008      	b.n	800468a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004678:	f7fc feb2 	bl	80013e0 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b64      	cmp	r3, #100	; 0x64
 8004684:	d901      	bls.n	800468a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e1a0      	b.n	80049cc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800468a:	4b83      	ldr	r3, [pc, #524]	; (8004898 <HAL_RCC_OscConfig+0x770>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004692:	2b00      	cmp	r3, #0
 8004694:	d0f0      	beq.n	8004678 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d106      	bne.n	80046ac <HAL_RCC_OscConfig+0x584>
 800469e:	4b7d      	ldr	r3, [pc, #500]	; (8004894 <HAL_RCC_OscConfig+0x76c>)
 80046a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a2:	4a7c      	ldr	r2, [pc, #496]	; (8004894 <HAL_RCC_OscConfig+0x76c>)
 80046a4:	f043 0301 	orr.w	r3, r3, #1
 80046a8:	6713      	str	r3, [r2, #112]	; 0x70
 80046aa:	e02d      	b.n	8004708 <HAL_RCC_OscConfig+0x5e0>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d10c      	bne.n	80046ce <HAL_RCC_OscConfig+0x5a6>
 80046b4:	4b77      	ldr	r3, [pc, #476]	; (8004894 <HAL_RCC_OscConfig+0x76c>)
 80046b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b8:	4a76      	ldr	r2, [pc, #472]	; (8004894 <HAL_RCC_OscConfig+0x76c>)
 80046ba:	f023 0301 	bic.w	r3, r3, #1
 80046be:	6713      	str	r3, [r2, #112]	; 0x70
 80046c0:	4b74      	ldr	r3, [pc, #464]	; (8004894 <HAL_RCC_OscConfig+0x76c>)
 80046c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c4:	4a73      	ldr	r2, [pc, #460]	; (8004894 <HAL_RCC_OscConfig+0x76c>)
 80046c6:	f023 0304 	bic.w	r3, r3, #4
 80046ca:	6713      	str	r3, [r2, #112]	; 0x70
 80046cc:	e01c      	b.n	8004708 <HAL_RCC_OscConfig+0x5e0>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	2b05      	cmp	r3, #5
 80046d4:	d10c      	bne.n	80046f0 <HAL_RCC_OscConfig+0x5c8>
 80046d6:	4b6f      	ldr	r3, [pc, #444]	; (8004894 <HAL_RCC_OscConfig+0x76c>)
 80046d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046da:	4a6e      	ldr	r2, [pc, #440]	; (8004894 <HAL_RCC_OscConfig+0x76c>)
 80046dc:	f043 0304 	orr.w	r3, r3, #4
 80046e0:	6713      	str	r3, [r2, #112]	; 0x70
 80046e2:	4b6c      	ldr	r3, [pc, #432]	; (8004894 <HAL_RCC_OscConfig+0x76c>)
 80046e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e6:	4a6b      	ldr	r2, [pc, #428]	; (8004894 <HAL_RCC_OscConfig+0x76c>)
 80046e8:	f043 0301 	orr.w	r3, r3, #1
 80046ec:	6713      	str	r3, [r2, #112]	; 0x70
 80046ee:	e00b      	b.n	8004708 <HAL_RCC_OscConfig+0x5e0>
 80046f0:	4b68      	ldr	r3, [pc, #416]	; (8004894 <HAL_RCC_OscConfig+0x76c>)
 80046f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f4:	4a67      	ldr	r2, [pc, #412]	; (8004894 <HAL_RCC_OscConfig+0x76c>)
 80046f6:	f023 0301 	bic.w	r3, r3, #1
 80046fa:	6713      	str	r3, [r2, #112]	; 0x70
 80046fc:	4b65      	ldr	r3, [pc, #404]	; (8004894 <HAL_RCC_OscConfig+0x76c>)
 80046fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004700:	4a64      	ldr	r2, [pc, #400]	; (8004894 <HAL_RCC_OscConfig+0x76c>)
 8004702:	f023 0304 	bic.w	r3, r3, #4
 8004706:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d015      	beq.n	800473c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004710:	f7fc fe66 	bl	80013e0 <HAL_GetTick>
 8004714:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004716:	e00a      	b.n	800472e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004718:	f7fc fe62 	bl	80013e0 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	f241 3288 	movw	r2, #5000	; 0x1388
 8004726:	4293      	cmp	r3, r2
 8004728:	d901      	bls.n	800472e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e14e      	b.n	80049cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800472e:	4b59      	ldr	r3, [pc, #356]	; (8004894 <HAL_RCC_OscConfig+0x76c>)
 8004730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004732:	f003 0302 	and.w	r3, r3, #2
 8004736:	2b00      	cmp	r3, #0
 8004738:	d0ee      	beq.n	8004718 <HAL_RCC_OscConfig+0x5f0>
 800473a:	e014      	b.n	8004766 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800473c:	f7fc fe50 	bl	80013e0 <HAL_GetTick>
 8004740:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004742:	e00a      	b.n	800475a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004744:	f7fc fe4c 	bl	80013e0 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004752:	4293      	cmp	r3, r2
 8004754:	d901      	bls.n	800475a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e138      	b.n	80049cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800475a:	4b4e      	ldr	r3, [pc, #312]	; (8004894 <HAL_RCC_OscConfig+0x76c>)
 800475c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1ee      	bne.n	8004744 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476a:	2b00      	cmp	r3, #0
 800476c:	f000 812d 	beq.w	80049ca <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004770:	4b48      	ldr	r3, [pc, #288]	; (8004894 <HAL_RCC_OscConfig+0x76c>)
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004778:	2b18      	cmp	r3, #24
 800477a:	f000 80bd 	beq.w	80048f8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004782:	2b02      	cmp	r3, #2
 8004784:	f040 809e 	bne.w	80048c4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004788:	4b42      	ldr	r3, [pc, #264]	; (8004894 <HAL_RCC_OscConfig+0x76c>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a41      	ldr	r2, [pc, #260]	; (8004894 <HAL_RCC_OscConfig+0x76c>)
 800478e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004792:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004794:	f7fc fe24 	bl	80013e0 <HAL_GetTick>
 8004798:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800479c:	f7fc fe20 	bl	80013e0 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e10e      	b.n	80049cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047ae:	4b39      	ldr	r3, [pc, #228]	; (8004894 <HAL_RCC_OscConfig+0x76c>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1f0      	bne.n	800479c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047ba:	4b36      	ldr	r3, [pc, #216]	; (8004894 <HAL_RCC_OscConfig+0x76c>)
 80047bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047be:	4b37      	ldr	r3, [pc, #220]	; (800489c <HAL_RCC_OscConfig+0x774>)
 80047c0:	4013      	ands	r3, r2
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80047ca:	0112      	lsls	r2, r2, #4
 80047cc:	430a      	orrs	r2, r1
 80047ce:	4931      	ldr	r1, [pc, #196]	; (8004894 <HAL_RCC_OscConfig+0x76c>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	628b      	str	r3, [r1, #40]	; 0x28
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d8:	3b01      	subs	r3, #1
 80047da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e2:	3b01      	subs	r3, #1
 80047e4:	025b      	lsls	r3, r3, #9
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	431a      	orrs	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ee:	3b01      	subs	r3, #1
 80047f0:	041b      	lsls	r3, r3, #16
 80047f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80047f6:	431a      	orrs	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047fc:	3b01      	subs	r3, #1
 80047fe:	061b      	lsls	r3, r3, #24
 8004800:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004804:	4923      	ldr	r1, [pc, #140]	; (8004894 <HAL_RCC_OscConfig+0x76c>)
 8004806:	4313      	orrs	r3, r2
 8004808:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800480a:	4b22      	ldr	r3, [pc, #136]	; (8004894 <HAL_RCC_OscConfig+0x76c>)
 800480c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480e:	4a21      	ldr	r2, [pc, #132]	; (8004894 <HAL_RCC_OscConfig+0x76c>)
 8004810:	f023 0301 	bic.w	r3, r3, #1
 8004814:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004816:	4b1f      	ldr	r3, [pc, #124]	; (8004894 <HAL_RCC_OscConfig+0x76c>)
 8004818:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800481a:	4b21      	ldr	r3, [pc, #132]	; (80048a0 <HAL_RCC_OscConfig+0x778>)
 800481c:	4013      	ands	r3, r2
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004822:	00d2      	lsls	r2, r2, #3
 8004824:	491b      	ldr	r1, [pc, #108]	; (8004894 <HAL_RCC_OscConfig+0x76c>)
 8004826:	4313      	orrs	r3, r2
 8004828:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800482a:	4b1a      	ldr	r3, [pc, #104]	; (8004894 <HAL_RCC_OscConfig+0x76c>)
 800482c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482e:	f023 020c 	bic.w	r2, r3, #12
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004836:	4917      	ldr	r1, [pc, #92]	; (8004894 <HAL_RCC_OscConfig+0x76c>)
 8004838:	4313      	orrs	r3, r2
 800483a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800483c:	4b15      	ldr	r3, [pc, #84]	; (8004894 <HAL_RCC_OscConfig+0x76c>)
 800483e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004840:	f023 0202 	bic.w	r2, r3, #2
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004848:	4912      	ldr	r1, [pc, #72]	; (8004894 <HAL_RCC_OscConfig+0x76c>)
 800484a:	4313      	orrs	r3, r2
 800484c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800484e:	4b11      	ldr	r3, [pc, #68]	; (8004894 <HAL_RCC_OscConfig+0x76c>)
 8004850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004852:	4a10      	ldr	r2, [pc, #64]	; (8004894 <HAL_RCC_OscConfig+0x76c>)
 8004854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004858:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800485a:	4b0e      	ldr	r3, [pc, #56]	; (8004894 <HAL_RCC_OscConfig+0x76c>)
 800485c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485e:	4a0d      	ldr	r2, [pc, #52]	; (8004894 <HAL_RCC_OscConfig+0x76c>)
 8004860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004864:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004866:	4b0b      	ldr	r3, [pc, #44]	; (8004894 <HAL_RCC_OscConfig+0x76c>)
 8004868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486a:	4a0a      	ldr	r2, [pc, #40]	; (8004894 <HAL_RCC_OscConfig+0x76c>)
 800486c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004870:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004872:	4b08      	ldr	r3, [pc, #32]	; (8004894 <HAL_RCC_OscConfig+0x76c>)
 8004874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004876:	4a07      	ldr	r2, [pc, #28]	; (8004894 <HAL_RCC_OscConfig+0x76c>)
 8004878:	f043 0301 	orr.w	r3, r3, #1
 800487c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800487e:	4b05      	ldr	r3, [pc, #20]	; (8004894 <HAL_RCC_OscConfig+0x76c>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a04      	ldr	r2, [pc, #16]	; (8004894 <HAL_RCC_OscConfig+0x76c>)
 8004884:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004888:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800488a:	f7fc fda9 	bl	80013e0 <HAL_GetTick>
 800488e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004890:	e011      	b.n	80048b6 <HAL_RCC_OscConfig+0x78e>
 8004892:	bf00      	nop
 8004894:	58024400 	.word	0x58024400
 8004898:	58024800 	.word	0x58024800
 800489c:	fffffc0c 	.word	0xfffffc0c
 80048a0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048a4:	f7fc fd9c 	bl	80013e0 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d901      	bls.n	80048b6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e08a      	b.n	80049cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80048b6:	4b47      	ldr	r3, [pc, #284]	; (80049d4 <HAL_RCC_OscConfig+0x8ac>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d0f0      	beq.n	80048a4 <HAL_RCC_OscConfig+0x77c>
 80048c2:	e082      	b.n	80049ca <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048c4:	4b43      	ldr	r3, [pc, #268]	; (80049d4 <HAL_RCC_OscConfig+0x8ac>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a42      	ldr	r2, [pc, #264]	; (80049d4 <HAL_RCC_OscConfig+0x8ac>)
 80048ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d0:	f7fc fd86 	bl	80013e0 <HAL_GetTick>
 80048d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048d6:	e008      	b.n	80048ea <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048d8:	f7fc fd82 	bl	80013e0 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e070      	b.n	80049cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048ea:	4b3a      	ldr	r3, [pc, #232]	; (80049d4 <HAL_RCC_OscConfig+0x8ac>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1f0      	bne.n	80048d8 <HAL_RCC_OscConfig+0x7b0>
 80048f6:	e068      	b.n	80049ca <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80048f8:	4b36      	ldr	r3, [pc, #216]	; (80049d4 <HAL_RCC_OscConfig+0x8ac>)
 80048fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80048fe:	4b35      	ldr	r3, [pc, #212]	; (80049d4 <HAL_RCC_OscConfig+0x8ac>)
 8004900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004902:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004908:	2b01      	cmp	r3, #1
 800490a:	d031      	beq.n	8004970 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	f003 0203 	and.w	r2, r3, #3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004916:	429a      	cmp	r2, r3
 8004918:	d12a      	bne.n	8004970 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	091b      	lsrs	r3, r3, #4
 800491e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004926:	429a      	cmp	r2, r3
 8004928:	d122      	bne.n	8004970 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004934:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004936:	429a      	cmp	r2, r3
 8004938:	d11a      	bne.n	8004970 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	0a5b      	lsrs	r3, r3, #9
 800493e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004946:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004948:	429a      	cmp	r2, r3
 800494a:	d111      	bne.n	8004970 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	0c1b      	lsrs	r3, r3, #16
 8004950:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004958:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800495a:	429a      	cmp	r2, r3
 800495c:	d108      	bne.n	8004970 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	0e1b      	lsrs	r3, r3, #24
 8004962:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800496a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800496c:	429a      	cmp	r2, r3
 800496e:	d001      	beq.n	8004974 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e02b      	b.n	80049cc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004974:	4b17      	ldr	r3, [pc, #92]	; (80049d4 <HAL_RCC_OscConfig+0x8ac>)
 8004976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004978:	08db      	lsrs	r3, r3, #3
 800497a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800497e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004984:	693a      	ldr	r2, [r7, #16]
 8004986:	429a      	cmp	r2, r3
 8004988:	d01f      	beq.n	80049ca <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800498a:	4b12      	ldr	r3, [pc, #72]	; (80049d4 <HAL_RCC_OscConfig+0x8ac>)
 800498c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498e:	4a11      	ldr	r2, [pc, #68]	; (80049d4 <HAL_RCC_OscConfig+0x8ac>)
 8004990:	f023 0301 	bic.w	r3, r3, #1
 8004994:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004996:	f7fc fd23 	bl	80013e0 <HAL_GetTick>
 800499a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800499c:	bf00      	nop
 800499e:	f7fc fd1f 	bl	80013e0 <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d0f9      	beq.n	800499e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80049aa:	4b0a      	ldr	r3, [pc, #40]	; (80049d4 <HAL_RCC_OscConfig+0x8ac>)
 80049ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049ae:	4b0a      	ldr	r3, [pc, #40]	; (80049d8 <HAL_RCC_OscConfig+0x8b0>)
 80049b0:	4013      	ands	r3, r2
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80049b6:	00d2      	lsls	r2, r2, #3
 80049b8:	4906      	ldr	r1, [pc, #24]	; (80049d4 <HAL_RCC_OscConfig+0x8ac>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80049be:	4b05      	ldr	r3, [pc, #20]	; (80049d4 <HAL_RCC_OscConfig+0x8ac>)
 80049c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c2:	4a04      	ldr	r2, [pc, #16]	; (80049d4 <HAL_RCC_OscConfig+0x8ac>)
 80049c4:	f043 0301 	orr.w	r3, r3, #1
 80049c8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3730      	adds	r7, #48	; 0x30
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	58024400 	.word	0x58024400
 80049d8:	ffff0007 	.word	0xffff0007

080049dc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b086      	sub	sp, #24
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d101      	bne.n	80049f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e19c      	b.n	8004d2a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049f0:	4b8a      	ldr	r3, [pc, #552]	; (8004c1c <HAL_RCC_ClockConfig+0x240>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 030f 	and.w	r3, r3, #15
 80049f8:	683a      	ldr	r2, [r7, #0]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d910      	bls.n	8004a20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049fe:	4b87      	ldr	r3, [pc, #540]	; (8004c1c <HAL_RCC_ClockConfig+0x240>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f023 020f 	bic.w	r2, r3, #15
 8004a06:	4985      	ldr	r1, [pc, #532]	; (8004c1c <HAL_RCC_ClockConfig+0x240>)
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a0e:	4b83      	ldr	r3, [pc, #524]	; (8004c1c <HAL_RCC_ClockConfig+0x240>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 030f 	and.w	r3, r3, #15
 8004a16:	683a      	ldr	r2, [r7, #0]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d001      	beq.n	8004a20 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e184      	b.n	8004d2a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0304 	and.w	r3, r3, #4
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d010      	beq.n	8004a4e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	691a      	ldr	r2, [r3, #16]
 8004a30:	4b7b      	ldr	r3, [pc, #492]	; (8004c20 <HAL_RCC_ClockConfig+0x244>)
 8004a32:	699b      	ldr	r3, [r3, #24]
 8004a34:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d908      	bls.n	8004a4e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004a3c:	4b78      	ldr	r3, [pc, #480]	; (8004c20 <HAL_RCC_ClockConfig+0x244>)
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	4975      	ldr	r1, [pc, #468]	; (8004c20 <HAL_RCC_ClockConfig+0x244>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0308 	and.w	r3, r3, #8
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d010      	beq.n	8004a7c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	695a      	ldr	r2, [r3, #20]
 8004a5e:	4b70      	ldr	r3, [pc, #448]	; (8004c20 <HAL_RCC_ClockConfig+0x244>)
 8004a60:	69db      	ldr	r3, [r3, #28]
 8004a62:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d908      	bls.n	8004a7c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004a6a:	4b6d      	ldr	r3, [pc, #436]	; (8004c20 <HAL_RCC_ClockConfig+0x244>)
 8004a6c:	69db      	ldr	r3, [r3, #28]
 8004a6e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	496a      	ldr	r1, [pc, #424]	; (8004c20 <HAL_RCC_ClockConfig+0x244>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0310 	and.w	r3, r3, #16
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d010      	beq.n	8004aaa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	699a      	ldr	r2, [r3, #24]
 8004a8c:	4b64      	ldr	r3, [pc, #400]	; (8004c20 <HAL_RCC_ClockConfig+0x244>)
 8004a8e:	69db      	ldr	r3, [r3, #28]
 8004a90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d908      	bls.n	8004aaa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004a98:	4b61      	ldr	r3, [pc, #388]	; (8004c20 <HAL_RCC_ClockConfig+0x244>)
 8004a9a:	69db      	ldr	r3, [r3, #28]
 8004a9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	495e      	ldr	r1, [pc, #376]	; (8004c20 <HAL_RCC_ClockConfig+0x244>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0320 	and.w	r3, r3, #32
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d010      	beq.n	8004ad8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	69da      	ldr	r2, [r3, #28]
 8004aba:	4b59      	ldr	r3, [pc, #356]	; (8004c20 <HAL_RCC_ClockConfig+0x244>)
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d908      	bls.n	8004ad8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004ac6:	4b56      	ldr	r3, [pc, #344]	; (8004c20 <HAL_RCC_ClockConfig+0x244>)
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	69db      	ldr	r3, [r3, #28]
 8004ad2:	4953      	ldr	r1, [pc, #332]	; (8004c20 <HAL_RCC_ClockConfig+0x244>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d010      	beq.n	8004b06 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	68da      	ldr	r2, [r3, #12]
 8004ae8:	4b4d      	ldr	r3, [pc, #308]	; (8004c20 <HAL_RCC_ClockConfig+0x244>)
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	f003 030f 	and.w	r3, r3, #15
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d908      	bls.n	8004b06 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004af4:	4b4a      	ldr	r3, [pc, #296]	; (8004c20 <HAL_RCC_ClockConfig+0x244>)
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	f023 020f 	bic.w	r2, r3, #15
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	4947      	ldr	r1, [pc, #284]	; (8004c20 <HAL_RCC_ClockConfig+0x244>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d055      	beq.n	8004bbe <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004b12:	4b43      	ldr	r3, [pc, #268]	; (8004c20 <HAL_RCC_ClockConfig+0x244>)
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	4940      	ldr	r1, [pc, #256]	; (8004c20 <HAL_RCC_ClockConfig+0x244>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d107      	bne.n	8004b3c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b2c:	4b3c      	ldr	r3, [pc, #240]	; (8004c20 <HAL_RCC_ClockConfig+0x244>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d121      	bne.n	8004b7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e0f6      	b.n	8004d2a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	2b03      	cmp	r3, #3
 8004b42:	d107      	bne.n	8004b54 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b44:	4b36      	ldr	r3, [pc, #216]	; (8004c20 <HAL_RCC_ClockConfig+0x244>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d115      	bne.n	8004b7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e0ea      	b.n	8004d2a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d107      	bne.n	8004b6c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004b5c:	4b30      	ldr	r3, [pc, #192]	; (8004c20 <HAL_RCC_ClockConfig+0x244>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d109      	bne.n	8004b7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e0de      	b.n	8004d2a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b6c:	4b2c      	ldr	r3, [pc, #176]	; (8004c20 <HAL_RCC_ClockConfig+0x244>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0304 	and.w	r3, r3, #4
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d101      	bne.n	8004b7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e0d6      	b.n	8004d2a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b7c:	4b28      	ldr	r3, [pc, #160]	; (8004c20 <HAL_RCC_ClockConfig+0x244>)
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	f023 0207 	bic.w	r2, r3, #7
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	4925      	ldr	r1, [pc, #148]	; (8004c20 <HAL_RCC_ClockConfig+0x244>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b8e:	f7fc fc27 	bl	80013e0 <HAL_GetTick>
 8004b92:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b94:	e00a      	b.n	8004bac <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b96:	f7fc fc23 	bl	80013e0 <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d901      	bls.n	8004bac <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e0be      	b.n	8004d2a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bac:	4b1c      	ldr	r3, [pc, #112]	; (8004c20 <HAL_RCC_ClockConfig+0x244>)
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	00db      	lsls	r3, r3, #3
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d1eb      	bne.n	8004b96 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d010      	beq.n	8004bec <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	68da      	ldr	r2, [r3, #12]
 8004bce:	4b14      	ldr	r3, [pc, #80]	; (8004c20 <HAL_RCC_ClockConfig+0x244>)
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	f003 030f 	and.w	r3, r3, #15
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d208      	bcs.n	8004bec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bda:	4b11      	ldr	r3, [pc, #68]	; (8004c20 <HAL_RCC_ClockConfig+0x244>)
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	f023 020f 	bic.w	r2, r3, #15
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	490e      	ldr	r1, [pc, #56]	; (8004c20 <HAL_RCC_ClockConfig+0x244>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bec:	4b0b      	ldr	r3, [pc, #44]	; (8004c1c <HAL_RCC_ClockConfig+0x240>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 030f 	and.w	r3, r3, #15
 8004bf4:	683a      	ldr	r2, [r7, #0]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d214      	bcs.n	8004c24 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bfa:	4b08      	ldr	r3, [pc, #32]	; (8004c1c <HAL_RCC_ClockConfig+0x240>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f023 020f 	bic.w	r2, r3, #15
 8004c02:	4906      	ldr	r1, [pc, #24]	; (8004c1c <HAL_RCC_ClockConfig+0x240>)
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c0a:	4b04      	ldr	r3, [pc, #16]	; (8004c1c <HAL_RCC_ClockConfig+0x240>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 030f 	and.w	r3, r3, #15
 8004c12:	683a      	ldr	r2, [r7, #0]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d005      	beq.n	8004c24 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e086      	b.n	8004d2a <HAL_RCC_ClockConfig+0x34e>
 8004c1c:	52002000 	.word	0x52002000
 8004c20:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0304 	and.w	r3, r3, #4
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d010      	beq.n	8004c52 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	691a      	ldr	r2, [r3, #16]
 8004c34:	4b3f      	ldr	r3, [pc, #252]	; (8004d34 <HAL_RCC_ClockConfig+0x358>)
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d208      	bcs.n	8004c52 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004c40:	4b3c      	ldr	r3, [pc, #240]	; (8004d34 <HAL_RCC_ClockConfig+0x358>)
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	4939      	ldr	r1, [pc, #228]	; (8004d34 <HAL_RCC_ClockConfig+0x358>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0308 	and.w	r3, r3, #8
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d010      	beq.n	8004c80 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	695a      	ldr	r2, [r3, #20]
 8004c62:	4b34      	ldr	r3, [pc, #208]	; (8004d34 <HAL_RCC_ClockConfig+0x358>)
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d208      	bcs.n	8004c80 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004c6e:	4b31      	ldr	r3, [pc, #196]	; (8004d34 <HAL_RCC_ClockConfig+0x358>)
 8004c70:	69db      	ldr	r3, [r3, #28]
 8004c72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	492e      	ldr	r1, [pc, #184]	; (8004d34 <HAL_RCC_ClockConfig+0x358>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0310 	and.w	r3, r3, #16
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d010      	beq.n	8004cae <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	699a      	ldr	r2, [r3, #24]
 8004c90:	4b28      	ldr	r3, [pc, #160]	; (8004d34 <HAL_RCC_ClockConfig+0x358>)
 8004c92:	69db      	ldr	r3, [r3, #28]
 8004c94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d208      	bcs.n	8004cae <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004c9c:	4b25      	ldr	r3, [pc, #148]	; (8004d34 <HAL_RCC_ClockConfig+0x358>)
 8004c9e:	69db      	ldr	r3, [r3, #28]
 8004ca0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	4922      	ldr	r1, [pc, #136]	; (8004d34 <HAL_RCC_ClockConfig+0x358>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0320 	and.w	r3, r3, #32
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d010      	beq.n	8004cdc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	69da      	ldr	r2, [r3, #28]
 8004cbe:	4b1d      	ldr	r3, [pc, #116]	; (8004d34 <HAL_RCC_ClockConfig+0x358>)
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d208      	bcs.n	8004cdc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004cca:	4b1a      	ldr	r3, [pc, #104]	; (8004d34 <HAL_RCC_ClockConfig+0x358>)
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	69db      	ldr	r3, [r3, #28]
 8004cd6:	4917      	ldr	r1, [pc, #92]	; (8004d34 <HAL_RCC_ClockConfig+0x358>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004cdc:	f000 f834 	bl	8004d48 <HAL_RCC_GetSysClockFreq>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	4b14      	ldr	r3, [pc, #80]	; (8004d34 <HAL_RCC_ClockConfig+0x358>)
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	0a1b      	lsrs	r3, r3, #8
 8004ce8:	f003 030f 	and.w	r3, r3, #15
 8004cec:	4912      	ldr	r1, [pc, #72]	; (8004d38 <HAL_RCC_ClockConfig+0x35c>)
 8004cee:	5ccb      	ldrb	r3, [r1, r3]
 8004cf0:	f003 031f 	and.w	r3, r3, #31
 8004cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8004cf8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004cfa:	4b0e      	ldr	r3, [pc, #56]	; (8004d34 <HAL_RCC_ClockConfig+0x358>)
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	f003 030f 	and.w	r3, r3, #15
 8004d02:	4a0d      	ldr	r2, [pc, #52]	; (8004d38 <HAL_RCC_ClockConfig+0x35c>)
 8004d04:	5cd3      	ldrb	r3, [r2, r3]
 8004d06:	f003 031f 	and.w	r3, r3, #31
 8004d0a:	693a      	ldr	r2, [r7, #16]
 8004d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d10:	4a0a      	ldr	r2, [pc, #40]	; (8004d3c <HAL_RCC_ClockConfig+0x360>)
 8004d12:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004d14:	4a0a      	ldr	r2, [pc, #40]	; (8004d40 <HAL_RCC_ClockConfig+0x364>)
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004d1a:	4b0a      	ldr	r3, [pc, #40]	; (8004d44 <HAL_RCC_ClockConfig+0x368>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7fc fb14 	bl	800134c <HAL_InitTick>
 8004d24:	4603      	mov	r3, r0
 8004d26:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3718      	adds	r7, #24
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	58024400 	.word	0x58024400
 8004d38:	0800e828 	.word	0x0800e828
 8004d3c:	24000044 	.word	0x24000044
 8004d40:	24000040 	.word	0x24000040
 8004d44:	24000048 	.word	0x24000048

08004d48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b089      	sub	sp, #36	; 0x24
 8004d4c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d4e:	4bb3      	ldr	r3, [pc, #716]	; (800501c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d56:	2b18      	cmp	r3, #24
 8004d58:	f200 8155 	bhi.w	8005006 <HAL_RCC_GetSysClockFreq+0x2be>
 8004d5c:	a201      	add	r2, pc, #4	; (adr r2, 8004d64 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d62:	bf00      	nop
 8004d64:	08004dc9 	.word	0x08004dc9
 8004d68:	08005007 	.word	0x08005007
 8004d6c:	08005007 	.word	0x08005007
 8004d70:	08005007 	.word	0x08005007
 8004d74:	08005007 	.word	0x08005007
 8004d78:	08005007 	.word	0x08005007
 8004d7c:	08005007 	.word	0x08005007
 8004d80:	08005007 	.word	0x08005007
 8004d84:	08004def 	.word	0x08004def
 8004d88:	08005007 	.word	0x08005007
 8004d8c:	08005007 	.word	0x08005007
 8004d90:	08005007 	.word	0x08005007
 8004d94:	08005007 	.word	0x08005007
 8004d98:	08005007 	.word	0x08005007
 8004d9c:	08005007 	.word	0x08005007
 8004da0:	08005007 	.word	0x08005007
 8004da4:	08004df5 	.word	0x08004df5
 8004da8:	08005007 	.word	0x08005007
 8004dac:	08005007 	.word	0x08005007
 8004db0:	08005007 	.word	0x08005007
 8004db4:	08005007 	.word	0x08005007
 8004db8:	08005007 	.word	0x08005007
 8004dbc:	08005007 	.word	0x08005007
 8004dc0:	08005007 	.word	0x08005007
 8004dc4:	08004dfb 	.word	0x08004dfb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004dc8:	4b94      	ldr	r3, [pc, #592]	; (800501c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0320 	and.w	r3, r3, #32
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d009      	beq.n	8004de8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004dd4:	4b91      	ldr	r3, [pc, #580]	; (800501c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	08db      	lsrs	r3, r3, #3
 8004dda:	f003 0303 	and.w	r3, r3, #3
 8004dde:	4a90      	ldr	r2, [pc, #576]	; (8005020 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004de0:	fa22 f303 	lsr.w	r3, r2, r3
 8004de4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004de6:	e111      	b.n	800500c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004de8:	4b8d      	ldr	r3, [pc, #564]	; (8005020 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004dea:	61bb      	str	r3, [r7, #24]
      break;
 8004dec:	e10e      	b.n	800500c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004dee:	4b8d      	ldr	r3, [pc, #564]	; (8005024 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004df0:	61bb      	str	r3, [r7, #24]
      break;
 8004df2:	e10b      	b.n	800500c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004df4:	4b8c      	ldr	r3, [pc, #560]	; (8005028 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004df6:	61bb      	str	r3, [r7, #24]
      break;
 8004df8:	e108      	b.n	800500c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004dfa:	4b88      	ldr	r3, [pc, #544]	; (800501c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfe:	f003 0303 	and.w	r3, r3, #3
 8004e02:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004e04:	4b85      	ldr	r3, [pc, #532]	; (800501c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e08:	091b      	lsrs	r3, r3, #4
 8004e0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e0e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004e10:	4b82      	ldr	r3, [pc, #520]	; (800501c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e14:	f003 0301 	and.w	r3, r3, #1
 8004e18:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004e1a:	4b80      	ldr	r3, [pc, #512]	; (800501c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e1e:	08db      	lsrs	r3, r3, #3
 8004e20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	fb02 f303 	mul.w	r3, r2, r3
 8004e2a:	ee07 3a90 	vmov	s15, r3
 8004e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e32:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f000 80e1 	beq.w	8005000 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	f000 8083 	beq.w	8004f4c <HAL_RCC_GetSysClockFreq+0x204>
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	f200 80a1 	bhi.w	8004f90 <HAL_RCC_GetSysClockFreq+0x248>
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d003      	beq.n	8004e5c <HAL_RCC_GetSysClockFreq+0x114>
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d056      	beq.n	8004f08 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004e5a:	e099      	b.n	8004f90 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e5c:	4b6f      	ldr	r3, [pc, #444]	; (800501c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0320 	and.w	r3, r3, #32
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d02d      	beq.n	8004ec4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e68:	4b6c      	ldr	r3, [pc, #432]	; (800501c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	08db      	lsrs	r3, r3, #3
 8004e6e:	f003 0303 	and.w	r3, r3, #3
 8004e72:	4a6b      	ldr	r2, [pc, #428]	; (8005020 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004e74:	fa22 f303 	lsr.w	r3, r2, r3
 8004e78:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	ee07 3a90 	vmov	s15, r3
 8004e80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	ee07 3a90 	vmov	s15, r3
 8004e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e92:	4b62      	ldr	r3, [pc, #392]	; (800501c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e9a:	ee07 3a90 	vmov	s15, r3
 8004e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ea2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ea6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800502c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004eaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ebe:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004ec2:	e087      	b.n	8004fd4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	ee07 3a90 	vmov	s15, r3
 8004eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ece:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005030 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ed6:	4b51      	ldr	r3, [pc, #324]	; (800501c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ede:	ee07 3a90 	vmov	s15, r3
 8004ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ee6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004eea:	eddf 5a50 	vldr	s11, [pc, #320]	; 800502c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ef6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004f06:	e065      	b.n	8004fd4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	ee07 3a90 	vmov	s15, r3
 8004f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f12:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005034 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f1a:	4b40      	ldr	r3, [pc, #256]	; (800501c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f22:	ee07 3a90 	vmov	s15, r3
 8004f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f2e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800502c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004f4a:	e043      	b.n	8004fd4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	ee07 3a90 	vmov	s15, r3
 8004f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f56:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005038 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f5e:	4b2f      	ldr	r3, [pc, #188]	; (800501c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f66:	ee07 3a90 	vmov	s15, r3
 8004f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f72:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800502c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f8a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004f8e:	e021      	b.n	8004fd4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	ee07 3a90 	vmov	s15, r3
 8004f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f9a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005034 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004f9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fa2:	4b1e      	ldr	r3, [pc, #120]	; (800501c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004faa:	ee07 3a90 	vmov	s15, r3
 8004fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004fb6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800502c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004fba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004fd2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004fd4:	4b11      	ldr	r3, [pc, #68]	; (800501c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd8:	0a5b      	lsrs	r3, r3, #9
 8004fda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fde:	3301      	adds	r3, #1
 8004fe0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	ee07 3a90 	vmov	s15, r3
 8004fe8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004fec:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ff0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ff4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ff8:	ee17 3a90 	vmov	r3, s15
 8004ffc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004ffe:	e005      	b.n	800500c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005000:	2300      	movs	r3, #0
 8005002:	61bb      	str	r3, [r7, #24]
      break;
 8005004:	e002      	b.n	800500c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005006:	4b07      	ldr	r3, [pc, #28]	; (8005024 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005008:	61bb      	str	r3, [r7, #24]
      break;
 800500a:	bf00      	nop
  }

  return sysclockfreq;
 800500c:	69bb      	ldr	r3, [r7, #24]
}
 800500e:	4618      	mov	r0, r3
 8005010:	3724      	adds	r7, #36	; 0x24
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	58024400 	.word	0x58024400
 8005020:	03d09000 	.word	0x03d09000
 8005024:	003d0900 	.word	0x003d0900
 8005028:	017d7840 	.word	0x017d7840
 800502c:	46000000 	.word	0x46000000
 8005030:	4c742400 	.word	0x4c742400
 8005034:	4a742400 	.word	0x4a742400
 8005038:	4bbebc20 	.word	0x4bbebc20

0800503c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005042:	f7ff fe81 	bl	8004d48 <HAL_RCC_GetSysClockFreq>
 8005046:	4602      	mov	r2, r0
 8005048:	4b10      	ldr	r3, [pc, #64]	; (800508c <HAL_RCC_GetHCLKFreq+0x50>)
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	0a1b      	lsrs	r3, r3, #8
 800504e:	f003 030f 	and.w	r3, r3, #15
 8005052:	490f      	ldr	r1, [pc, #60]	; (8005090 <HAL_RCC_GetHCLKFreq+0x54>)
 8005054:	5ccb      	ldrb	r3, [r1, r3]
 8005056:	f003 031f 	and.w	r3, r3, #31
 800505a:	fa22 f303 	lsr.w	r3, r2, r3
 800505e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005060:	4b0a      	ldr	r3, [pc, #40]	; (800508c <HAL_RCC_GetHCLKFreq+0x50>)
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	f003 030f 	and.w	r3, r3, #15
 8005068:	4a09      	ldr	r2, [pc, #36]	; (8005090 <HAL_RCC_GetHCLKFreq+0x54>)
 800506a:	5cd3      	ldrb	r3, [r2, r3]
 800506c:	f003 031f 	and.w	r3, r3, #31
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	fa22 f303 	lsr.w	r3, r2, r3
 8005076:	4a07      	ldr	r2, [pc, #28]	; (8005094 <HAL_RCC_GetHCLKFreq+0x58>)
 8005078:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800507a:	4a07      	ldr	r2, [pc, #28]	; (8005098 <HAL_RCC_GetHCLKFreq+0x5c>)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005080:	4b04      	ldr	r3, [pc, #16]	; (8005094 <HAL_RCC_GetHCLKFreq+0x58>)
 8005082:	681b      	ldr	r3, [r3, #0]
}
 8005084:	4618      	mov	r0, r3
 8005086:	3708      	adds	r7, #8
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	58024400 	.word	0x58024400
 8005090:	0800e828 	.word	0x0800e828
 8005094:	24000044 	.word	0x24000044
 8005098:	24000040 	.word	0x24000040

0800509c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80050a0:	f7ff ffcc 	bl	800503c <HAL_RCC_GetHCLKFreq>
 80050a4:	4602      	mov	r2, r0
 80050a6:	4b06      	ldr	r3, [pc, #24]	; (80050c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050a8:	69db      	ldr	r3, [r3, #28]
 80050aa:	091b      	lsrs	r3, r3, #4
 80050ac:	f003 0307 	and.w	r3, r3, #7
 80050b0:	4904      	ldr	r1, [pc, #16]	; (80050c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80050b2:	5ccb      	ldrb	r3, [r1, r3]
 80050b4:	f003 031f 	and.w	r3, r3, #31
 80050b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80050bc:	4618      	mov	r0, r3
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	58024400 	.word	0x58024400
 80050c4:	0800e828 	.word	0x0800e828

080050c8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050cc:	b0ca      	sub	sp, #296	; 0x128
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80050d4:	2300      	movs	r3, #0
 80050d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80050da:	2300      	movs	r3, #0
 80050dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80050e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80050ec:	2500      	movs	r5, #0
 80050ee:	ea54 0305 	orrs.w	r3, r4, r5
 80050f2:	d049      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80050f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80050fe:	d02f      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005100:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005104:	d828      	bhi.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005106:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800510a:	d01a      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800510c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005110:	d822      	bhi.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005112:	2b00      	cmp	r3, #0
 8005114:	d003      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005116:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800511a:	d007      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800511c:	e01c      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800511e:	4bb8      	ldr	r3, [pc, #736]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005122:	4ab7      	ldr	r2, [pc, #732]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005128:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800512a:	e01a      	b.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800512c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005130:	3308      	adds	r3, #8
 8005132:	2102      	movs	r1, #2
 8005134:	4618      	mov	r0, r3
 8005136:	f002 fb61 	bl	80077fc <RCCEx_PLL2_Config>
 800513a:	4603      	mov	r3, r0
 800513c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005140:	e00f      	b.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005142:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005146:	3328      	adds	r3, #40	; 0x28
 8005148:	2102      	movs	r1, #2
 800514a:	4618      	mov	r0, r3
 800514c:	f002 fc08 	bl	8007960 <RCCEx_PLL3_Config>
 8005150:	4603      	mov	r3, r0
 8005152:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005156:	e004      	b.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800515e:	e000      	b.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005160:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005162:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10a      	bne.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800516a:	4ba5      	ldr	r3, [pc, #660]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800516c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800516e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005172:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005176:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005178:	4aa1      	ldr	r2, [pc, #644]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800517a:	430b      	orrs	r3, r1
 800517c:	6513      	str	r3, [r2, #80]	; 0x50
 800517e:	e003      	b.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005180:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005184:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005188:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800518c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005190:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005194:	f04f 0900 	mov.w	r9, #0
 8005198:	ea58 0309 	orrs.w	r3, r8, r9
 800519c:	d047      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800519e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051a4:	2b04      	cmp	r3, #4
 80051a6:	d82a      	bhi.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x136>
 80051a8:	a201      	add	r2, pc, #4	; (adr r2, 80051b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80051aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ae:	bf00      	nop
 80051b0:	080051c5 	.word	0x080051c5
 80051b4:	080051d3 	.word	0x080051d3
 80051b8:	080051e9 	.word	0x080051e9
 80051bc:	08005207 	.word	0x08005207
 80051c0:	08005207 	.word	0x08005207
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051c4:	4b8e      	ldr	r3, [pc, #568]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c8:	4a8d      	ldr	r2, [pc, #564]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80051d0:	e01a      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80051d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051d6:	3308      	adds	r3, #8
 80051d8:	2100      	movs	r1, #0
 80051da:	4618      	mov	r0, r3
 80051dc:	f002 fb0e 	bl	80077fc <RCCEx_PLL2_Config>
 80051e0:	4603      	mov	r3, r0
 80051e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80051e6:	e00f      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80051e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051ec:	3328      	adds	r3, #40	; 0x28
 80051ee:	2100      	movs	r1, #0
 80051f0:	4618      	mov	r0, r3
 80051f2:	f002 fbb5 	bl	8007960 <RCCEx_PLL3_Config>
 80051f6:	4603      	mov	r3, r0
 80051f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80051fc:	e004      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005204:	e000      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005206:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005208:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800520c:	2b00      	cmp	r3, #0
 800520e:	d10a      	bne.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005210:	4b7b      	ldr	r3, [pc, #492]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005214:	f023 0107 	bic.w	r1, r3, #7
 8005218:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800521c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800521e:	4a78      	ldr	r2, [pc, #480]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005220:	430b      	orrs	r3, r1
 8005222:	6513      	str	r3, [r2, #80]	; 0x50
 8005224:	e003      	b.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005226:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800522a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800522e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005236:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800523a:	f04f 0b00 	mov.w	fp, #0
 800523e:	ea5a 030b 	orrs.w	r3, sl, fp
 8005242:	d04c      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005244:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800524a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800524e:	d030      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005250:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005254:	d829      	bhi.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005256:	2bc0      	cmp	r3, #192	; 0xc0
 8005258:	d02d      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800525a:	2bc0      	cmp	r3, #192	; 0xc0
 800525c:	d825      	bhi.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800525e:	2b80      	cmp	r3, #128	; 0x80
 8005260:	d018      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005262:	2b80      	cmp	r3, #128	; 0x80
 8005264:	d821      	bhi.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005266:	2b00      	cmp	r3, #0
 8005268:	d002      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800526a:	2b40      	cmp	r3, #64	; 0x40
 800526c:	d007      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800526e:	e01c      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005270:	4b63      	ldr	r3, [pc, #396]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005274:	4a62      	ldr	r2, [pc, #392]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005276:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800527a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800527c:	e01c      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800527e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005282:	3308      	adds	r3, #8
 8005284:	2100      	movs	r1, #0
 8005286:	4618      	mov	r0, r3
 8005288:	f002 fab8 	bl	80077fc <RCCEx_PLL2_Config>
 800528c:	4603      	mov	r3, r0
 800528e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005292:	e011      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005294:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005298:	3328      	adds	r3, #40	; 0x28
 800529a:	2100      	movs	r1, #0
 800529c:	4618      	mov	r0, r3
 800529e:	f002 fb5f 	bl	8007960 <RCCEx_PLL3_Config>
 80052a2:	4603      	mov	r3, r0
 80052a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80052a8:	e006      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80052b0:	e002      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80052b2:	bf00      	nop
 80052b4:	e000      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80052b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d10a      	bne.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80052c0:	4b4f      	ldr	r3, [pc, #316]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052c4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80052c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052ce:	4a4c      	ldr	r2, [pc, #304]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052d0:	430b      	orrs	r3, r1
 80052d2:	6513      	str	r3, [r2, #80]	; 0x50
 80052d4:	e003      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80052de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80052ea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80052ee:	2300      	movs	r3, #0
 80052f0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80052f4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80052f8:	460b      	mov	r3, r1
 80052fa:	4313      	orrs	r3, r2
 80052fc:	d053      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80052fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005302:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005306:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800530a:	d035      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800530c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005310:	d82e      	bhi.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005312:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005316:	d031      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005318:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800531c:	d828      	bhi.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800531e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005322:	d01a      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005324:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005328:	d822      	bhi.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800532a:	2b00      	cmp	r3, #0
 800532c:	d003      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800532e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005332:	d007      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005334:	e01c      	b.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005336:	4b32      	ldr	r3, [pc, #200]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533a:	4a31      	ldr	r2, [pc, #196]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800533c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005340:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005342:	e01c      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005344:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005348:	3308      	adds	r3, #8
 800534a:	2100      	movs	r1, #0
 800534c:	4618      	mov	r0, r3
 800534e:	f002 fa55 	bl	80077fc <RCCEx_PLL2_Config>
 8005352:	4603      	mov	r3, r0
 8005354:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005358:	e011      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800535a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800535e:	3328      	adds	r3, #40	; 0x28
 8005360:	2100      	movs	r1, #0
 8005362:	4618      	mov	r0, r3
 8005364:	f002 fafc 	bl	8007960 <RCCEx_PLL3_Config>
 8005368:	4603      	mov	r3, r0
 800536a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800536e:	e006      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005376:	e002      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005378:	bf00      	nop
 800537a:	e000      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800537c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800537e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10b      	bne.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005386:	4b1e      	ldr	r3, [pc, #120]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800538a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800538e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005392:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005396:	4a1a      	ldr	r2, [pc, #104]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005398:	430b      	orrs	r3, r1
 800539a:	6593      	str	r3, [r2, #88]	; 0x58
 800539c:	e003      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800539e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80053a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ae:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80053b2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80053b6:	2300      	movs	r3, #0
 80053b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80053bc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80053c0:	460b      	mov	r3, r1
 80053c2:	4313      	orrs	r3, r2
 80053c4:	d056      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80053c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80053ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053d2:	d038      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80053d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053d8:	d831      	bhi.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80053da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80053de:	d034      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80053e0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80053e4:	d82b      	bhi.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80053e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053ea:	d01d      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80053ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053f0:	d825      	bhi.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d006      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80053f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80053fa:	d00a      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80053fc:	e01f      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80053fe:	bf00      	nop
 8005400:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005404:	4ba2      	ldr	r3, [pc, #648]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005408:	4aa1      	ldr	r2, [pc, #644]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800540a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800540e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005410:	e01c      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005412:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005416:	3308      	adds	r3, #8
 8005418:	2100      	movs	r1, #0
 800541a:	4618      	mov	r0, r3
 800541c:	f002 f9ee 	bl	80077fc <RCCEx_PLL2_Config>
 8005420:	4603      	mov	r3, r0
 8005422:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005426:	e011      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005428:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800542c:	3328      	adds	r3, #40	; 0x28
 800542e:	2100      	movs	r1, #0
 8005430:	4618      	mov	r0, r3
 8005432:	f002 fa95 	bl	8007960 <RCCEx_PLL3_Config>
 8005436:	4603      	mov	r3, r0
 8005438:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800543c:	e006      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005444:	e002      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005446:	bf00      	nop
 8005448:	e000      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800544a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800544c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005450:	2b00      	cmp	r3, #0
 8005452:	d10b      	bne.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005454:	4b8e      	ldr	r3, [pc, #568]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005458:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800545c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005460:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005464:	4a8a      	ldr	r2, [pc, #552]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005466:	430b      	orrs	r3, r1
 8005468:	6593      	str	r3, [r2, #88]	; 0x58
 800546a:	e003      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800546c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005470:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005474:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005480:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005484:	2300      	movs	r3, #0
 8005486:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800548a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800548e:	460b      	mov	r3, r1
 8005490:	4313      	orrs	r3, r2
 8005492:	d03a      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005494:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800549a:	2b30      	cmp	r3, #48	; 0x30
 800549c:	d01f      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x416>
 800549e:	2b30      	cmp	r3, #48	; 0x30
 80054a0:	d819      	bhi.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80054a2:	2b20      	cmp	r3, #32
 80054a4:	d00c      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80054a6:	2b20      	cmp	r3, #32
 80054a8:	d815      	bhi.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d019      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80054ae:	2b10      	cmp	r3, #16
 80054b0:	d111      	bne.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054b2:	4b77      	ldr	r3, [pc, #476]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b6:	4a76      	ldr	r2, [pc, #472]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80054be:	e011      	b.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80054c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054c4:	3308      	adds	r3, #8
 80054c6:	2102      	movs	r1, #2
 80054c8:	4618      	mov	r0, r3
 80054ca:	f002 f997 	bl	80077fc <RCCEx_PLL2_Config>
 80054ce:	4603      	mov	r3, r0
 80054d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80054d4:	e006      	b.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80054dc:	e002      	b.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80054de:	bf00      	nop
 80054e0:	e000      	b.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80054e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d10a      	bne.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80054ec:	4b68      	ldr	r3, [pc, #416]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054f0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80054f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054fa:	4a65      	ldr	r2, [pc, #404]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054fc:	430b      	orrs	r3, r1
 80054fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005500:	e003      	b.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005502:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005506:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800550a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800550e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005512:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005516:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800551a:	2300      	movs	r3, #0
 800551c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005520:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005524:	460b      	mov	r3, r1
 8005526:	4313      	orrs	r3, r2
 8005528:	d051      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800552a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800552e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005530:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005534:	d035      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005536:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800553a:	d82e      	bhi.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800553c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005540:	d031      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005542:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005546:	d828      	bhi.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005548:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800554c:	d01a      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800554e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005552:	d822      	bhi.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005554:	2b00      	cmp	r3, #0
 8005556:	d003      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005558:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800555c:	d007      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800555e:	e01c      	b.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005560:	4b4b      	ldr	r3, [pc, #300]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005564:	4a4a      	ldr	r2, [pc, #296]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800556a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800556c:	e01c      	b.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800556e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005572:	3308      	adds	r3, #8
 8005574:	2100      	movs	r1, #0
 8005576:	4618      	mov	r0, r3
 8005578:	f002 f940 	bl	80077fc <RCCEx_PLL2_Config>
 800557c:	4603      	mov	r3, r0
 800557e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005582:	e011      	b.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005584:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005588:	3328      	adds	r3, #40	; 0x28
 800558a:	2100      	movs	r1, #0
 800558c:	4618      	mov	r0, r3
 800558e:	f002 f9e7 	bl	8007960 <RCCEx_PLL3_Config>
 8005592:	4603      	mov	r3, r0
 8005594:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005598:	e006      	b.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80055a0:	e002      	b.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80055a2:	bf00      	nop
 80055a4:	e000      	b.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80055a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d10a      	bne.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80055b0:	4b37      	ldr	r3, [pc, #220]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055b4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80055b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055be:	4a34      	ldr	r2, [pc, #208]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055c0:	430b      	orrs	r3, r1
 80055c2:	6513      	str	r3, [r2, #80]	; 0x50
 80055c4:	e003      	b.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80055ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80055da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80055de:	2300      	movs	r3, #0
 80055e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80055e4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80055e8:	460b      	mov	r3, r1
 80055ea:	4313      	orrs	r3, r2
 80055ec:	d056      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80055ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055f8:	d033      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80055fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055fe:	d82c      	bhi.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005600:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005604:	d02f      	beq.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005606:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800560a:	d826      	bhi.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800560c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005610:	d02b      	beq.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005612:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005616:	d820      	bhi.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005618:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800561c:	d012      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800561e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005622:	d81a      	bhi.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005624:	2b00      	cmp	r3, #0
 8005626:	d022      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800562c:	d115      	bne.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800562e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005632:	3308      	adds	r3, #8
 8005634:	2101      	movs	r1, #1
 8005636:	4618      	mov	r0, r3
 8005638:	f002 f8e0 	bl	80077fc <RCCEx_PLL2_Config>
 800563c:	4603      	mov	r3, r0
 800563e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005642:	e015      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005644:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005648:	3328      	adds	r3, #40	; 0x28
 800564a:	2101      	movs	r1, #1
 800564c:	4618      	mov	r0, r3
 800564e:	f002 f987 	bl	8007960 <RCCEx_PLL3_Config>
 8005652:	4603      	mov	r3, r0
 8005654:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005658:	e00a      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005660:	e006      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005662:	bf00      	nop
 8005664:	e004      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005666:	bf00      	nop
 8005668:	e002      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800566a:	bf00      	nop
 800566c:	e000      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800566e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005670:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005674:	2b00      	cmp	r3, #0
 8005676:	d10d      	bne.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005678:	4b05      	ldr	r3, [pc, #20]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800567a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800567c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005680:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005684:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005686:	4a02      	ldr	r2, [pc, #8]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005688:	430b      	orrs	r3, r1
 800568a:	6513      	str	r3, [r2, #80]	; 0x50
 800568c:	e006      	b.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800568e:	bf00      	nop
 8005690:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005694:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005698:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800569c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a4:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80056a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80056ac:	2300      	movs	r3, #0
 80056ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80056b2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80056b6:	460b      	mov	r3, r1
 80056b8:	4313      	orrs	r3, r2
 80056ba:	d055      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80056bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80056c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80056c8:	d033      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80056ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80056ce:	d82c      	bhi.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80056d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056d4:	d02f      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80056d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056da:	d826      	bhi.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80056dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80056e0:	d02b      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x672>
 80056e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80056e6:	d820      	bhi.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80056e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056ec:	d012      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80056ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056f2:	d81a      	bhi.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d022      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x676>
 80056f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056fc:	d115      	bne.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80056fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005702:	3308      	adds	r3, #8
 8005704:	2101      	movs	r1, #1
 8005706:	4618      	mov	r0, r3
 8005708:	f002 f878 	bl	80077fc <RCCEx_PLL2_Config>
 800570c:	4603      	mov	r3, r0
 800570e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005712:	e015      	b.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005714:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005718:	3328      	adds	r3, #40	; 0x28
 800571a:	2101      	movs	r1, #1
 800571c:	4618      	mov	r0, r3
 800571e:	f002 f91f 	bl	8007960 <RCCEx_PLL3_Config>
 8005722:	4603      	mov	r3, r0
 8005724:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005728:	e00a      	b.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005730:	e006      	b.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005732:	bf00      	nop
 8005734:	e004      	b.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005736:	bf00      	nop
 8005738:	e002      	b.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800573a:	bf00      	nop
 800573c:	e000      	b.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800573e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005740:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005744:	2b00      	cmp	r3, #0
 8005746:	d10b      	bne.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005748:	4ba3      	ldr	r3, [pc, #652]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800574a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800574c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005750:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005754:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005758:	4a9f      	ldr	r2, [pc, #636]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800575a:	430b      	orrs	r3, r1
 800575c:	6593      	str	r3, [r2, #88]	; 0x58
 800575e:	e003      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005760:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005764:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005768:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800576c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005770:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005774:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005778:	2300      	movs	r3, #0
 800577a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800577e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005782:	460b      	mov	r3, r1
 8005784:	4313      	orrs	r3, r2
 8005786:	d037      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005788:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800578c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800578e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005792:	d00e      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005794:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005798:	d816      	bhi.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800579a:	2b00      	cmp	r3, #0
 800579c:	d018      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800579e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057a2:	d111      	bne.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057a4:	4b8c      	ldr	r3, [pc, #560]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a8:	4a8b      	ldr	r2, [pc, #556]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80057b0:	e00f      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80057b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057b6:	3308      	adds	r3, #8
 80057b8:	2101      	movs	r1, #1
 80057ba:	4618      	mov	r0, r3
 80057bc:	f002 f81e 	bl	80077fc <RCCEx_PLL2_Config>
 80057c0:	4603      	mov	r3, r0
 80057c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80057c6:	e004      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80057ce:	e000      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80057d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d10a      	bne.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80057da:	4b7f      	ldr	r3, [pc, #508]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057de:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80057e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e8:	4a7b      	ldr	r2, [pc, #492]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057ea:	430b      	orrs	r3, r1
 80057ec:	6513      	str	r3, [r2, #80]	; 0x50
 80057ee:	e003      	b.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80057f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005800:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005804:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005808:	2300      	movs	r3, #0
 800580a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800580e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005812:	460b      	mov	r3, r1
 8005814:	4313      	orrs	r3, r2
 8005816:	d039      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005818:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800581c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800581e:	2b03      	cmp	r3, #3
 8005820:	d81c      	bhi.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005822:	a201      	add	r2, pc, #4	; (adr r2, 8005828 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005828:	08005865 	.word	0x08005865
 800582c:	08005839 	.word	0x08005839
 8005830:	08005847 	.word	0x08005847
 8005834:	08005865 	.word	0x08005865
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005838:	4b67      	ldr	r3, [pc, #412]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800583a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583c:	4a66      	ldr	r2, [pc, #408]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800583e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005842:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005844:	e00f      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005846:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800584a:	3308      	adds	r3, #8
 800584c:	2102      	movs	r1, #2
 800584e:	4618      	mov	r0, r3
 8005850:	f001 ffd4 	bl	80077fc <RCCEx_PLL2_Config>
 8005854:	4603      	mov	r3, r0
 8005856:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800585a:	e004      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005862:	e000      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005864:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005866:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800586a:	2b00      	cmp	r3, #0
 800586c:	d10a      	bne.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800586e:	4b5a      	ldr	r3, [pc, #360]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005872:	f023 0103 	bic.w	r1, r3, #3
 8005876:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800587a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800587c:	4a56      	ldr	r2, [pc, #344]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800587e:	430b      	orrs	r3, r1
 8005880:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005882:	e003      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005884:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005888:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800588c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005894:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005898:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800589c:	2300      	movs	r3, #0
 800589e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80058a2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80058a6:	460b      	mov	r3, r1
 80058a8:	4313      	orrs	r3, r2
 80058aa:	f000 809f 	beq.w	80059ec <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058ae:	4b4b      	ldr	r3, [pc, #300]	; (80059dc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a4a      	ldr	r2, [pc, #296]	; (80059dc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80058b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80058ba:	f7fb fd91 	bl	80013e0 <HAL_GetTick>
 80058be:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058c2:	e00b      	b.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058c4:	f7fb fd8c 	bl	80013e0 <HAL_GetTick>
 80058c8:	4602      	mov	r2, r0
 80058ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	2b64      	cmp	r3, #100	; 0x64
 80058d2:	d903      	bls.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80058da:	e005      	b.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058dc:	4b3f      	ldr	r3, [pc, #252]	; (80059dc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d0ed      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80058e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d179      	bne.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80058f0:	4b39      	ldr	r3, [pc, #228]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80058f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80058fc:	4053      	eors	r3, r2
 80058fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005902:	2b00      	cmp	r3, #0
 8005904:	d015      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005906:	4b34      	ldr	r3, [pc, #208]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800590a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800590e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005912:	4b31      	ldr	r3, [pc, #196]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005916:	4a30      	ldr	r2, [pc, #192]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800591c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800591e:	4b2e      	ldr	r3, [pc, #184]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005922:	4a2d      	ldr	r2, [pc, #180]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005924:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005928:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800592a:	4a2b      	ldr	r2, [pc, #172]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800592c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005930:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005932:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005936:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800593a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800593e:	d118      	bne.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005940:	f7fb fd4e 	bl	80013e0 <HAL_GetTick>
 8005944:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005948:	e00d      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800594a:	f7fb fd49 	bl	80013e0 <HAL_GetTick>
 800594e:	4602      	mov	r2, r0
 8005950:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005954:	1ad2      	subs	r2, r2, r3
 8005956:	f241 3388 	movw	r3, #5000	; 0x1388
 800595a:	429a      	cmp	r2, r3
 800595c:	d903      	bls.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8005964:	e005      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005966:	4b1c      	ldr	r3, [pc, #112]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800596a:	f003 0302 	and.w	r3, r3, #2
 800596e:	2b00      	cmp	r3, #0
 8005970:	d0eb      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005972:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005976:	2b00      	cmp	r3, #0
 8005978:	d129      	bne.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800597a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800597e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005982:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005986:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800598a:	d10e      	bne.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800598c:	4b12      	ldr	r3, [pc, #72]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005994:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005998:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800599c:	091a      	lsrs	r2, r3, #4
 800599e:	4b10      	ldr	r3, [pc, #64]	; (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80059a0:	4013      	ands	r3, r2
 80059a2:	4a0d      	ldr	r2, [pc, #52]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059a4:	430b      	orrs	r3, r1
 80059a6:	6113      	str	r3, [r2, #16]
 80059a8:	e005      	b.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80059aa:	4b0b      	ldr	r3, [pc, #44]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	4a0a      	ldr	r2, [pc, #40]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059b0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80059b4:	6113      	str	r3, [r2, #16]
 80059b6:	4b08      	ldr	r3, [pc, #32]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059b8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80059ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80059c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059c6:	4a04      	ldr	r2, [pc, #16]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059c8:	430b      	orrs	r3, r1
 80059ca:	6713      	str	r3, [r2, #112]	; 0x70
 80059cc:	e00e      	b.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80059ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80059d6:	e009      	b.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x924>
 80059d8:	58024400 	.word	0x58024400
 80059dc:	58024800 	.word	0x58024800
 80059e0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80059ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f4:	f002 0301 	and.w	r3, r2, #1
 80059f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059fc:	2300      	movs	r3, #0
 80059fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005a02:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005a06:	460b      	mov	r3, r1
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	f000 8089 	beq.w	8005b20 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a14:	2b28      	cmp	r3, #40	; 0x28
 8005a16:	d86b      	bhi.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005a18:	a201      	add	r2, pc, #4	; (adr r2, 8005a20 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a1e:	bf00      	nop
 8005a20:	08005af9 	.word	0x08005af9
 8005a24:	08005af1 	.word	0x08005af1
 8005a28:	08005af1 	.word	0x08005af1
 8005a2c:	08005af1 	.word	0x08005af1
 8005a30:	08005af1 	.word	0x08005af1
 8005a34:	08005af1 	.word	0x08005af1
 8005a38:	08005af1 	.word	0x08005af1
 8005a3c:	08005af1 	.word	0x08005af1
 8005a40:	08005ac5 	.word	0x08005ac5
 8005a44:	08005af1 	.word	0x08005af1
 8005a48:	08005af1 	.word	0x08005af1
 8005a4c:	08005af1 	.word	0x08005af1
 8005a50:	08005af1 	.word	0x08005af1
 8005a54:	08005af1 	.word	0x08005af1
 8005a58:	08005af1 	.word	0x08005af1
 8005a5c:	08005af1 	.word	0x08005af1
 8005a60:	08005adb 	.word	0x08005adb
 8005a64:	08005af1 	.word	0x08005af1
 8005a68:	08005af1 	.word	0x08005af1
 8005a6c:	08005af1 	.word	0x08005af1
 8005a70:	08005af1 	.word	0x08005af1
 8005a74:	08005af1 	.word	0x08005af1
 8005a78:	08005af1 	.word	0x08005af1
 8005a7c:	08005af1 	.word	0x08005af1
 8005a80:	08005af9 	.word	0x08005af9
 8005a84:	08005af1 	.word	0x08005af1
 8005a88:	08005af1 	.word	0x08005af1
 8005a8c:	08005af1 	.word	0x08005af1
 8005a90:	08005af1 	.word	0x08005af1
 8005a94:	08005af1 	.word	0x08005af1
 8005a98:	08005af1 	.word	0x08005af1
 8005a9c:	08005af1 	.word	0x08005af1
 8005aa0:	08005af9 	.word	0x08005af9
 8005aa4:	08005af1 	.word	0x08005af1
 8005aa8:	08005af1 	.word	0x08005af1
 8005aac:	08005af1 	.word	0x08005af1
 8005ab0:	08005af1 	.word	0x08005af1
 8005ab4:	08005af1 	.word	0x08005af1
 8005ab8:	08005af1 	.word	0x08005af1
 8005abc:	08005af1 	.word	0x08005af1
 8005ac0:	08005af9 	.word	0x08005af9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ac8:	3308      	adds	r3, #8
 8005aca:	2101      	movs	r1, #1
 8005acc:	4618      	mov	r0, r3
 8005ace:	f001 fe95 	bl	80077fc <RCCEx_PLL2_Config>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005ad8:	e00f      	b.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ade:	3328      	adds	r3, #40	; 0x28
 8005ae0:	2101      	movs	r1, #1
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f001 ff3c 	bl	8007960 <RCCEx_PLL3_Config>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005aee:	e004      	b.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005af6:	e000      	b.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005af8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005afa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d10a      	bne.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005b02:	4bbf      	ldr	r3, [pc, #764]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b06:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b10:	4abb      	ldr	r2, [pc, #748]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b12:	430b      	orrs	r3, r1
 8005b14:	6553      	str	r3, [r2, #84]	; 0x54
 8005b16:	e003      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b1c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b28:	f002 0302 	and.w	r3, r2, #2
 8005b2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b30:	2300      	movs	r3, #0
 8005b32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005b36:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	d041      	beq.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b46:	2b05      	cmp	r3, #5
 8005b48:	d824      	bhi.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005b4a:	a201      	add	r2, pc, #4	; (adr r2, 8005b50 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b50:	08005b9d 	.word	0x08005b9d
 8005b54:	08005b69 	.word	0x08005b69
 8005b58:	08005b7f 	.word	0x08005b7f
 8005b5c:	08005b9d 	.word	0x08005b9d
 8005b60:	08005b9d 	.word	0x08005b9d
 8005b64:	08005b9d 	.word	0x08005b9d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b6c:	3308      	adds	r3, #8
 8005b6e:	2101      	movs	r1, #1
 8005b70:	4618      	mov	r0, r3
 8005b72:	f001 fe43 	bl	80077fc <RCCEx_PLL2_Config>
 8005b76:	4603      	mov	r3, r0
 8005b78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005b7c:	e00f      	b.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b82:	3328      	adds	r3, #40	; 0x28
 8005b84:	2101      	movs	r1, #1
 8005b86:	4618      	mov	r0, r3
 8005b88:	f001 feea 	bl	8007960 <RCCEx_PLL3_Config>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005b92:	e004      	b.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b9a:	e000      	b.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005b9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d10a      	bne.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005ba6:	4b96      	ldr	r3, [pc, #600]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005baa:	f023 0107 	bic.w	r1, r3, #7
 8005bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bb4:	4a92      	ldr	r2, [pc, #584]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005bb6:	430b      	orrs	r3, r1
 8005bb8:	6553      	str	r3, [r2, #84]	; 0x54
 8005bba:	e003      	b.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bbc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bc0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bcc:	f002 0304 	and.w	r3, r2, #4
 8005bd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005bda:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005bde:	460b      	mov	r3, r1
 8005be0:	4313      	orrs	r3, r2
 8005be2:	d044      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005be8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bec:	2b05      	cmp	r3, #5
 8005bee:	d825      	bhi.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005bf0:	a201      	add	r2, pc, #4	; (adr r2, 8005bf8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf6:	bf00      	nop
 8005bf8:	08005c45 	.word	0x08005c45
 8005bfc:	08005c11 	.word	0x08005c11
 8005c00:	08005c27 	.word	0x08005c27
 8005c04:	08005c45 	.word	0x08005c45
 8005c08:	08005c45 	.word	0x08005c45
 8005c0c:	08005c45 	.word	0x08005c45
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c14:	3308      	adds	r3, #8
 8005c16:	2101      	movs	r1, #1
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f001 fdef 	bl	80077fc <RCCEx_PLL2_Config>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005c24:	e00f      	b.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c2a:	3328      	adds	r3, #40	; 0x28
 8005c2c:	2101      	movs	r1, #1
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f001 fe96 	bl	8007960 <RCCEx_PLL3_Config>
 8005c34:	4603      	mov	r3, r0
 8005c36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005c3a:	e004      	b.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005c42:	e000      	b.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005c44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d10b      	bne.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c4e:	4b6c      	ldr	r3, [pc, #432]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c52:	f023 0107 	bic.w	r1, r3, #7
 8005c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c5e:	4a68      	ldr	r2, [pc, #416]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c60:	430b      	orrs	r3, r1
 8005c62:	6593      	str	r3, [r2, #88]	; 0x58
 8005c64:	e003      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c76:	f002 0320 	and.w	r3, r2, #32
 8005c7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005c7e:	2300      	movs	r3, #0
 8005c80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005c88:	460b      	mov	r3, r1
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	d055      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c9a:	d033      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005c9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ca0:	d82c      	bhi.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ca6:	d02f      	beq.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cac:	d826      	bhi.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005cae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005cb2:	d02b      	beq.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005cb4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005cb8:	d820      	bhi.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005cba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cbe:	d012      	beq.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005cc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cc4:	d81a      	bhi.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d022      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005cca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cce:	d115      	bne.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cd4:	3308      	adds	r3, #8
 8005cd6:	2100      	movs	r1, #0
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f001 fd8f 	bl	80077fc <RCCEx_PLL2_Config>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005ce4:	e015      	b.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cea:	3328      	adds	r3, #40	; 0x28
 8005cec:	2102      	movs	r1, #2
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f001 fe36 	bl	8007960 <RCCEx_PLL3_Config>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005cfa:	e00a      	b.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005d02:	e006      	b.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005d04:	bf00      	nop
 8005d06:	e004      	b.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005d08:	bf00      	nop
 8005d0a:	e002      	b.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005d0c:	bf00      	nop
 8005d0e:	e000      	b.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005d10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d10b      	bne.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d1a:	4b39      	ldr	r3, [pc, #228]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d1e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d2a:	4a35      	ldr	r2, [pc, #212]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d2c:	430b      	orrs	r3, r1
 8005d2e:	6553      	str	r3, [r2, #84]	; 0x54
 8005d30:	e003      	b.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d42:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005d46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005d50:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005d54:	460b      	mov	r3, r1
 8005d56:	4313      	orrs	r3, r2
 8005d58:	d058      	beq.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d62:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005d66:	d033      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005d68:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005d6c:	d82c      	bhi.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d72:	d02f      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005d74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d78:	d826      	bhi.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005d7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d7e:	d02b      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005d80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d84:	d820      	bhi.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005d86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d8a:	d012      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005d8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d90:	d81a      	bhi.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d022      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005d96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d9a:	d115      	bne.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005da0:	3308      	adds	r3, #8
 8005da2:	2100      	movs	r1, #0
 8005da4:	4618      	mov	r0, r3
 8005da6:	f001 fd29 	bl	80077fc <RCCEx_PLL2_Config>
 8005daa:	4603      	mov	r3, r0
 8005dac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005db0:	e015      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005db6:	3328      	adds	r3, #40	; 0x28
 8005db8:	2102      	movs	r1, #2
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f001 fdd0 	bl	8007960 <RCCEx_PLL3_Config>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005dc6:	e00a      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005dce:	e006      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005dd0:	bf00      	nop
 8005dd2:	e004      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005dd4:	bf00      	nop
 8005dd6:	e002      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005dd8:	bf00      	nop
 8005dda:	e000      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005ddc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d10e      	bne.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005de6:	4b06      	ldr	r3, [pc, #24]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dea:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8005dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005df2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005df6:	4a02      	ldr	r2, [pc, #8]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005df8:	430b      	orrs	r3, r1
 8005dfa:	6593      	str	r3, [r2, #88]	; 0x58
 8005dfc:	e006      	b.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005dfe:	bf00      	nop
 8005e00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e08:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e14:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005e18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005e22:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005e26:	460b      	mov	r3, r1
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	d055      	beq.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e30:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005e34:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005e38:	d033      	beq.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005e3a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005e3e:	d82c      	bhi.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005e40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e44:	d02f      	beq.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005e46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e4a:	d826      	bhi.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005e4c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005e50:	d02b      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005e52:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005e56:	d820      	bhi.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005e58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e5c:	d012      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005e5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e62:	d81a      	bhi.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d022      	beq.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005e68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e6c:	d115      	bne.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e72:	3308      	adds	r3, #8
 8005e74:	2100      	movs	r1, #0
 8005e76:	4618      	mov	r0, r3
 8005e78:	f001 fcc0 	bl	80077fc <RCCEx_PLL2_Config>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005e82:	e015      	b.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e88:	3328      	adds	r3, #40	; 0x28
 8005e8a:	2102      	movs	r1, #2
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f001 fd67 	bl	8007960 <RCCEx_PLL3_Config>
 8005e92:	4603      	mov	r3, r0
 8005e94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005e98:	e00a      	b.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005ea0:	e006      	b.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005ea2:	bf00      	nop
 8005ea4:	e004      	b.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005ea6:	bf00      	nop
 8005ea8:	e002      	b.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005eaa:	bf00      	nop
 8005eac:	e000      	b.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005eae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005eb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d10b      	bne.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005eb8:	4ba1      	ldr	r3, [pc, #644]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ebc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ec4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005ec8:	4a9d      	ldr	r2, [pc, #628]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005eca:	430b      	orrs	r3, r1
 8005ecc:	6593      	str	r3, [r2, #88]	; 0x58
 8005ece:	e003      	b.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ed0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ed4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee0:	f002 0308 	and.w	r3, r2, #8
 8005ee4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ee8:	2300      	movs	r3, #0
 8005eea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005eee:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005ef2:	460b      	mov	r3, r1
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	d01e      	beq.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005efc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f04:	d10c      	bne.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f0a:	3328      	adds	r3, #40	; 0x28
 8005f0c:	2102      	movs	r1, #2
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f001 fd26 	bl	8007960 <RCCEx_PLL3_Config>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d002      	beq.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005f20:	4b87      	ldr	r3, [pc, #540]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f24:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f30:	4a83      	ldr	r2, [pc, #524]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f32:	430b      	orrs	r3, r1
 8005f34:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3e:	f002 0310 	and.w	r3, r2, #16
 8005f42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005f46:	2300      	movs	r3, #0
 8005f48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005f4c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005f50:	460b      	mov	r3, r1
 8005f52:	4313      	orrs	r3, r2
 8005f54:	d01e      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f62:	d10c      	bne.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f68:	3328      	adds	r3, #40	; 0x28
 8005f6a:	2102      	movs	r1, #2
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f001 fcf7 	bl	8007960 <RCCEx_PLL3_Config>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d002      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005f7e:	4b70      	ldr	r3, [pc, #448]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f82:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f8e:	4a6c      	ldr	r2, [pc, #432]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f90:	430b      	orrs	r3, r1
 8005f92:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005fa0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005faa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005fae:	460b      	mov	r3, r1
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	d03e      	beq.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fb8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005fbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fc0:	d022      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005fc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fc6:	d81b      	bhi.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d003      	beq.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fd0:	d00b      	beq.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005fd2:	e015      	b.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fd8:	3308      	adds	r3, #8
 8005fda:	2100      	movs	r1, #0
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f001 fc0d 	bl	80077fc <RCCEx_PLL2_Config>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005fe8:	e00f      	b.n	800600a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fee:	3328      	adds	r3, #40	; 0x28
 8005ff0:	2102      	movs	r1, #2
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f001 fcb4 	bl	8007960 <RCCEx_PLL3_Config>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005ffe:	e004      	b.n	800600a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006006:	e000      	b.n	800600a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006008:	bf00      	nop
    }

    if (ret == HAL_OK)
 800600a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800600e:	2b00      	cmp	r3, #0
 8006010:	d10b      	bne.n	800602a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006012:	4b4b      	ldr	r3, [pc, #300]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006016:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800601a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800601e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006022:	4a47      	ldr	r2, [pc, #284]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006024:	430b      	orrs	r3, r1
 8006026:	6593      	str	r3, [r2, #88]	; 0x58
 8006028:	e003      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800602a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800602e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006032:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800603e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006040:	2300      	movs	r3, #0
 8006042:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006044:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006048:	460b      	mov	r3, r1
 800604a:	4313      	orrs	r3, r2
 800604c:	d03b      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800604e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006056:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800605a:	d01f      	beq.n	800609c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800605c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006060:	d818      	bhi.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006062:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006066:	d003      	beq.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006068:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800606c:	d007      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800606e:	e011      	b.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006070:	4b33      	ldr	r3, [pc, #204]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006074:	4a32      	ldr	r2, [pc, #200]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006076:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800607a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800607c:	e00f      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800607e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006082:	3328      	adds	r3, #40	; 0x28
 8006084:	2101      	movs	r1, #1
 8006086:	4618      	mov	r0, r3
 8006088:	f001 fc6a 	bl	8007960 <RCCEx_PLL3_Config>
 800608c:	4603      	mov	r3, r0
 800608e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006092:	e004      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800609a:	e000      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800609c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800609e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d10b      	bne.n	80060be <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80060a6:	4b26      	ldr	r3, [pc, #152]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80060a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060aa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80060ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060b6:	4a22      	ldr	r2, [pc, #136]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80060b8:	430b      	orrs	r3, r1
 80060ba:	6553      	str	r3, [r2, #84]	; 0x54
 80060bc:	e003      	b.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80060c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80060c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ce:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80060d2:	673b      	str	r3, [r7, #112]	; 0x70
 80060d4:	2300      	movs	r3, #0
 80060d6:	677b      	str	r3, [r7, #116]	; 0x74
 80060d8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80060dc:	460b      	mov	r3, r1
 80060de:	4313      	orrs	r3, r2
 80060e0:	d034      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80060e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d003      	beq.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80060ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060f0:	d007      	beq.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80060f2:	e011      	b.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060f4:	4b12      	ldr	r3, [pc, #72]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80060f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f8:	4a11      	ldr	r2, [pc, #68]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80060fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006100:	e00e      	b.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006102:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006106:	3308      	adds	r3, #8
 8006108:	2102      	movs	r1, #2
 800610a:	4618      	mov	r0, r3
 800610c:	f001 fb76 	bl	80077fc <RCCEx_PLL2_Config>
 8006110:	4603      	mov	r3, r0
 8006112:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006116:	e003      	b.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800611e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006120:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006124:	2b00      	cmp	r3, #0
 8006126:	d10d      	bne.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006128:	4b05      	ldr	r3, [pc, #20]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800612a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800612c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006130:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006136:	4a02      	ldr	r2, [pc, #8]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006138:	430b      	orrs	r3, r1
 800613a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800613c:	e006      	b.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800613e:	bf00      	nop
 8006140:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006144:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006148:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800614c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006154:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006158:	66bb      	str	r3, [r7, #104]	; 0x68
 800615a:	2300      	movs	r3, #0
 800615c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800615e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006162:	460b      	mov	r3, r1
 8006164:	4313      	orrs	r3, r2
 8006166:	d00c      	beq.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006168:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800616c:	3328      	adds	r3, #40	; 0x28
 800616e:	2102      	movs	r1, #2
 8006170:	4618      	mov	r0, r3
 8006172:	f001 fbf5 	bl	8007960 <RCCEx_PLL3_Config>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d002      	beq.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006182:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800618a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800618e:	663b      	str	r3, [r7, #96]	; 0x60
 8006190:	2300      	movs	r3, #0
 8006192:	667b      	str	r3, [r7, #100]	; 0x64
 8006194:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006198:	460b      	mov	r3, r1
 800619a:	4313      	orrs	r3, r2
 800619c:	d038      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800619e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061aa:	d018      	beq.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80061ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061b0:	d811      	bhi.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80061b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061b6:	d014      	beq.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80061b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061bc:	d80b      	bhi.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d011      	beq.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80061c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061c6:	d106      	bne.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061c8:	4bc3      	ldr	r3, [pc, #780]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061cc:	4ac2      	ldr	r2, [pc, #776]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80061d4:	e008      	b.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80061dc:	e004      	b.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80061de:	bf00      	nop
 80061e0:	e002      	b.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80061e2:	bf00      	nop
 80061e4:	e000      	b.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80061e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d10b      	bne.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80061f0:	4bb9      	ldr	r3, [pc, #740]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061f4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80061f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006200:	4ab5      	ldr	r2, [pc, #724]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006202:	430b      	orrs	r3, r1
 8006204:	6553      	str	r3, [r2, #84]	; 0x54
 8006206:	e003      	b.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006208:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800620c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006210:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006218:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800621c:	65bb      	str	r3, [r7, #88]	; 0x58
 800621e:	2300      	movs	r3, #0
 8006220:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006222:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006226:	460b      	mov	r3, r1
 8006228:	4313      	orrs	r3, r2
 800622a:	d009      	beq.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800622c:	4baa      	ldr	r3, [pc, #680]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800622e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006230:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006234:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006238:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800623a:	4aa7      	ldr	r2, [pc, #668]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800623c:	430b      	orrs	r3, r1
 800623e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006240:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006248:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800624c:	653b      	str	r3, [r7, #80]	; 0x50
 800624e:	2300      	movs	r3, #0
 8006250:	657b      	str	r3, [r7, #84]	; 0x54
 8006252:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006256:	460b      	mov	r3, r1
 8006258:	4313      	orrs	r3, r2
 800625a:	d00a      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800625c:	4b9e      	ldr	r3, [pc, #632]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8006264:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006268:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800626c:	4a9a      	ldr	r2, [pc, #616]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800626e:	430b      	orrs	r3, r1
 8006270:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006272:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800627e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006280:	2300      	movs	r3, #0
 8006282:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006284:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006288:	460b      	mov	r3, r1
 800628a:	4313      	orrs	r3, r2
 800628c:	d009      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800628e:	4b92      	ldr	r3, [pc, #584]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006292:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006296:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800629a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800629c:	4a8e      	ldr	r2, [pc, #568]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800629e:	430b      	orrs	r3, r1
 80062a0:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80062a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062aa:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80062ae:	643b      	str	r3, [r7, #64]	; 0x40
 80062b0:	2300      	movs	r3, #0
 80062b2:	647b      	str	r3, [r7, #68]	; 0x44
 80062b4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80062b8:	460b      	mov	r3, r1
 80062ba:	4313      	orrs	r3, r2
 80062bc:	d00e      	beq.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80062be:	4b86      	ldr	r3, [pc, #536]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	4a85      	ldr	r2, [pc, #532]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80062c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80062c8:	6113      	str	r3, [r2, #16]
 80062ca:	4b83      	ldr	r3, [pc, #524]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80062cc:	6919      	ldr	r1, [r3, #16]
 80062ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062d2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80062d6:	4a80      	ldr	r2, [pc, #512]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80062d8:	430b      	orrs	r3, r1
 80062da:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80062dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e4:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80062e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80062ea:	2300      	movs	r3, #0
 80062ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062ee:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80062f2:	460b      	mov	r3, r1
 80062f4:	4313      	orrs	r3, r2
 80062f6:	d009      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80062f8:	4b77      	ldr	r3, [pc, #476]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80062fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062fc:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006300:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006306:	4a74      	ldr	r2, [pc, #464]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006308:	430b      	orrs	r3, r1
 800630a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800630c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006314:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006318:	633b      	str	r3, [r7, #48]	; 0x30
 800631a:	2300      	movs	r3, #0
 800631c:	637b      	str	r3, [r7, #52]	; 0x34
 800631e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006322:	460b      	mov	r3, r1
 8006324:	4313      	orrs	r3, r2
 8006326:	d00a      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006328:	4b6b      	ldr	r3, [pc, #428]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800632a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800632c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006330:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006334:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006338:	4a67      	ldr	r2, [pc, #412]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800633a:	430b      	orrs	r3, r1
 800633c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800633e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006346:	2100      	movs	r1, #0
 8006348:	62b9      	str	r1, [r7, #40]	; 0x28
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006350:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006354:	460b      	mov	r3, r1
 8006356:	4313      	orrs	r3, r2
 8006358:	d011      	beq.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800635a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800635e:	3308      	adds	r3, #8
 8006360:	2100      	movs	r1, #0
 8006362:	4618      	mov	r0, r3
 8006364:	f001 fa4a 	bl	80077fc <RCCEx_PLL2_Config>
 8006368:	4603      	mov	r3, r0
 800636a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800636e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006372:	2b00      	cmp	r3, #0
 8006374:	d003      	beq.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006376:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800637a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800637e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006386:	2100      	movs	r1, #0
 8006388:	6239      	str	r1, [r7, #32]
 800638a:	f003 0302 	and.w	r3, r3, #2
 800638e:	627b      	str	r3, [r7, #36]	; 0x24
 8006390:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006394:	460b      	mov	r3, r1
 8006396:	4313      	orrs	r3, r2
 8006398:	d011      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800639a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800639e:	3308      	adds	r3, #8
 80063a0:	2101      	movs	r1, #1
 80063a2:	4618      	mov	r0, r3
 80063a4:	f001 fa2a 	bl	80077fc <RCCEx_PLL2_Config>
 80063a8:	4603      	mov	r3, r0
 80063aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80063ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d003      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80063be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c6:	2100      	movs	r1, #0
 80063c8:	61b9      	str	r1, [r7, #24]
 80063ca:	f003 0304 	and.w	r3, r3, #4
 80063ce:	61fb      	str	r3, [r7, #28]
 80063d0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80063d4:	460b      	mov	r3, r1
 80063d6:	4313      	orrs	r3, r2
 80063d8:	d011      	beq.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80063da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063de:	3308      	adds	r3, #8
 80063e0:	2102      	movs	r1, #2
 80063e2:	4618      	mov	r0, r3
 80063e4:	f001 fa0a 	bl	80077fc <RCCEx_PLL2_Config>
 80063e8:	4603      	mov	r3, r0
 80063ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80063ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d003      	beq.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80063fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006406:	2100      	movs	r1, #0
 8006408:	6139      	str	r1, [r7, #16]
 800640a:	f003 0308 	and.w	r3, r3, #8
 800640e:	617b      	str	r3, [r7, #20]
 8006410:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006414:	460b      	mov	r3, r1
 8006416:	4313      	orrs	r3, r2
 8006418:	d011      	beq.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800641a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800641e:	3328      	adds	r3, #40	; 0x28
 8006420:	2100      	movs	r1, #0
 8006422:	4618      	mov	r0, r3
 8006424:	f001 fa9c 	bl	8007960 <RCCEx_PLL3_Config>
 8006428:	4603      	mov	r3, r0
 800642a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800642e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006432:	2b00      	cmp	r3, #0
 8006434:	d003      	beq.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006436:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800643a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800643e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006446:	2100      	movs	r1, #0
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	f003 0310 	and.w	r3, r3, #16
 800644e:	60fb      	str	r3, [r7, #12]
 8006450:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006454:	460b      	mov	r3, r1
 8006456:	4313      	orrs	r3, r2
 8006458:	d011      	beq.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800645a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800645e:	3328      	adds	r3, #40	; 0x28
 8006460:	2101      	movs	r1, #1
 8006462:	4618      	mov	r0, r3
 8006464:	f001 fa7c 	bl	8007960 <RCCEx_PLL3_Config>
 8006468:	4603      	mov	r3, r0
 800646a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800646e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006472:	2b00      	cmp	r3, #0
 8006474:	d003      	beq.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006476:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800647a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800647e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006486:	2100      	movs	r1, #0
 8006488:	6039      	str	r1, [r7, #0]
 800648a:	f003 0320 	and.w	r3, r3, #32
 800648e:	607b      	str	r3, [r7, #4]
 8006490:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006494:	460b      	mov	r3, r1
 8006496:	4313      	orrs	r3, r2
 8006498:	d011      	beq.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800649a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800649e:	3328      	adds	r3, #40	; 0x28
 80064a0:	2102      	movs	r1, #2
 80064a2:	4618      	mov	r0, r3
 80064a4:	f001 fa5c 	bl	8007960 <RCCEx_PLL3_Config>
 80064a8:	4603      	mov	r3, r0
 80064aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80064ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d003      	beq.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80064be:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d101      	bne.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80064c6:	2300      	movs	r3, #0
 80064c8:	e000      	b.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80064d2:	46bd      	mov	sp, r7
 80064d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064d8:	58024400 	.word	0x58024400

080064dc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b090      	sub	sp, #64	; 0x40
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80064e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064ea:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80064ee:	430b      	orrs	r3, r1
 80064f0:	f040 8094 	bne.w	800661c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80064f4:	4b9e      	ldr	r3, [pc, #632]	; (8006770 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80064f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064f8:	f003 0307 	and.w	r3, r3, #7
 80064fc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80064fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006500:	2b04      	cmp	r3, #4
 8006502:	f200 8087 	bhi.w	8006614 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006506:	a201      	add	r2, pc, #4	; (adr r2, 800650c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800650c:	08006521 	.word	0x08006521
 8006510:	08006549 	.word	0x08006549
 8006514:	08006571 	.word	0x08006571
 8006518:	0800660d 	.word	0x0800660d
 800651c:	08006599 	.word	0x08006599
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006520:	4b93      	ldr	r3, [pc, #588]	; (8006770 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006528:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800652c:	d108      	bne.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800652e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006532:	4618      	mov	r0, r3
 8006534:	f001 f810 	bl	8007558 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800653c:	f000 bd45 	b.w	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006540:	2300      	movs	r3, #0
 8006542:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006544:	f000 bd41 	b.w	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006548:	4b89      	ldr	r3, [pc, #548]	; (8006770 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006550:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006554:	d108      	bne.n	8006568 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006556:	f107 0318 	add.w	r3, r7, #24
 800655a:	4618      	mov	r0, r3
 800655c:	f000 fd54 	bl	8007008 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006564:	f000 bd31 	b.w	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006568:	2300      	movs	r3, #0
 800656a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800656c:	f000 bd2d 	b.w	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006570:	4b7f      	ldr	r3, [pc, #508]	; (8006770 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006578:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800657c:	d108      	bne.n	8006590 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800657e:	f107 030c 	add.w	r3, r7, #12
 8006582:	4618      	mov	r0, r3
 8006584:	f000 fe94 	bl	80072b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800658c:	f000 bd1d 	b.w	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006590:	2300      	movs	r3, #0
 8006592:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006594:	f000 bd19 	b.w	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006598:	4b75      	ldr	r3, [pc, #468]	; (8006770 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800659a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800659c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80065a0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80065a2:	4b73      	ldr	r3, [pc, #460]	; (8006770 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 0304 	and.w	r3, r3, #4
 80065aa:	2b04      	cmp	r3, #4
 80065ac:	d10c      	bne.n	80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80065ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d109      	bne.n	80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80065b4:	4b6e      	ldr	r3, [pc, #440]	; (8006770 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	08db      	lsrs	r3, r3, #3
 80065ba:	f003 0303 	and.w	r3, r3, #3
 80065be:	4a6d      	ldr	r2, [pc, #436]	; (8006774 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80065c0:	fa22 f303 	lsr.w	r3, r2, r3
 80065c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065c6:	e01f      	b.n	8006608 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80065c8:	4b69      	ldr	r3, [pc, #420]	; (8006770 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065d4:	d106      	bne.n	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80065d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065dc:	d102      	bne.n	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80065de:	4b66      	ldr	r3, [pc, #408]	; (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80065e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065e2:	e011      	b.n	8006608 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80065e4:	4b62      	ldr	r3, [pc, #392]	; (8006770 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065f0:	d106      	bne.n	8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80065f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065f8:	d102      	bne.n	8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80065fa:	4b60      	ldr	r3, [pc, #384]	; (800677c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80065fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065fe:	e003      	b.n	8006608 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006600:	2300      	movs	r3, #0
 8006602:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006604:	f000 bce1 	b.w	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006608:	f000 bcdf 	b.w	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800660c:	4b5c      	ldr	r3, [pc, #368]	; (8006780 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800660e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006610:	f000 bcdb 	b.w	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006614:	2300      	movs	r3, #0
 8006616:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006618:	f000 bcd7 	b.w	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800661c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006620:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8006624:	430b      	orrs	r3, r1
 8006626:	f040 80ad 	bne.w	8006784 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800662a:	4b51      	ldr	r3, [pc, #324]	; (8006770 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800662c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800662e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006632:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006636:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800663a:	d056      	beq.n	80066ea <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800663c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006642:	f200 8090 	bhi.w	8006766 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006648:	2bc0      	cmp	r3, #192	; 0xc0
 800664a:	f000 8088 	beq.w	800675e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800664e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006650:	2bc0      	cmp	r3, #192	; 0xc0
 8006652:	f200 8088 	bhi.w	8006766 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006658:	2b80      	cmp	r3, #128	; 0x80
 800665a:	d032      	beq.n	80066c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800665c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665e:	2b80      	cmp	r3, #128	; 0x80
 8006660:	f200 8081 	bhi.w	8006766 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006666:	2b00      	cmp	r3, #0
 8006668:	d003      	beq.n	8006672 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800666a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666c:	2b40      	cmp	r3, #64	; 0x40
 800666e:	d014      	beq.n	800669a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006670:	e079      	b.n	8006766 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006672:	4b3f      	ldr	r3, [pc, #252]	; (8006770 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800667a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800667e:	d108      	bne.n	8006692 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006680:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006684:	4618      	mov	r0, r3
 8006686:	f000 ff67 	bl	8007558 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800668a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800668e:	f000 bc9c 	b.w	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006692:	2300      	movs	r3, #0
 8006694:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006696:	f000 bc98 	b.w	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800669a:	4b35      	ldr	r3, [pc, #212]	; (8006770 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066a6:	d108      	bne.n	80066ba <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066a8:	f107 0318 	add.w	r3, r7, #24
 80066ac:	4618      	mov	r0, r3
 80066ae:	f000 fcab 	bl	8007008 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80066b6:	f000 bc88 	b.w	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80066ba:	2300      	movs	r3, #0
 80066bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066be:	f000 bc84 	b.w	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80066c2:	4b2b      	ldr	r3, [pc, #172]	; (8006770 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066ce:	d108      	bne.n	80066e2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066d0:	f107 030c 	add.w	r3, r7, #12
 80066d4:	4618      	mov	r0, r3
 80066d6:	f000 fdeb 	bl	80072b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80066de:	f000 bc74 	b.w	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80066e2:	2300      	movs	r3, #0
 80066e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066e6:	f000 bc70 	b.w	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80066ea:	4b21      	ldr	r3, [pc, #132]	; (8006770 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80066f2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80066f4:	4b1e      	ldr	r3, [pc, #120]	; (8006770 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 0304 	and.w	r3, r3, #4
 80066fc:	2b04      	cmp	r3, #4
 80066fe:	d10c      	bne.n	800671a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006702:	2b00      	cmp	r3, #0
 8006704:	d109      	bne.n	800671a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006706:	4b1a      	ldr	r3, [pc, #104]	; (8006770 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	08db      	lsrs	r3, r3, #3
 800670c:	f003 0303 	and.w	r3, r3, #3
 8006710:	4a18      	ldr	r2, [pc, #96]	; (8006774 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006712:	fa22 f303 	lsr.w	r3, r2, r3
 8006716:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006718:	e01f      	b.n	800675a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800671a:	4b15      	ldr	r3, [pc, #84]	; (8006770 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006726:	d106      	bne.n	8006736 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800672a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800672e:	d102      	bne.n	8006736 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006730:	4b11      	ldr	r3, [pc, #68]	; (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006732:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006734:	e011      	b.n	800675a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006736:	4b0e      	ldr	r3, [pc, #56]	; (8006770 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800673e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006742:	d106      	bne.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8006744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006746:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800674a:	d102      	bne.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800674c:	4b0b      	ldr	r3, [pc, #44]	; (800677c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800674e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006750:	e003      	b.n	800675a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006752:	2300      	movs	r3, #0
 8006754:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006756:	f000 bc38 	b.w	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800675a:	f000 bc36 	b.w	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800675e:	4b08      	ldr	r3, [pc, #32]	; (8006780 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006760:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006762:	f000 bc32 	b.w	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006766:	2300      	movs	r3, #0
 8006768:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800676a:	f000 bc2e 	b.w	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800676e:	bf00      	nop
 8006770:	58024400 	.word	0x58024400
 8006774:	03d09000 	.word	0x03d09000
 8006778:	003d0900 	.word	0x003d0900
 800677c:	017d7840 	.word	0x017d7840
 8006780:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006784:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006788:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800678c:	430b      	orrs	r3, r1
 800678e:	f040 809c 	bne.w	80068ca <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006792:	4b9e      	ldr	r3, [pc, #632]	; (8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006796:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800679a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800679c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80067a2:	d054      	beq.n	800684e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80067a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80067aa:	f200 808b 	bhi.w	80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80067ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80067b4:	f000 8083 	beq.w	80068be <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80067b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ba:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80067be:	f200 8081 	bhi.w	80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80067c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067c8:	d02f      	beq.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80067ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067d0:	d878      	bhi.n	80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80067d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d004      	beq.n	80067e2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80067d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067de:	d012      	beq.n	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80067e0:	e070      	b.n	80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80067e2:	4b8a      	ldr	r3, [pc, #552]	; (8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067ee:	d107      	bne.n	8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80067f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067f4:	4618      	mov	r0, r3
 80067f6:	f000 feaf 	bl	8007558 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80067fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067fe:	e3e4      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006800:	2300      	movs	r3, #0
 8006802:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006804:	e3e1      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006806:	4b81      	ldr	r3, [pc, #516]	; (8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800680e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006812:	d107      	bne.n	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006814:	f107 0318 	add.w	r3, r7, #24
 8006818:	4618      	mov	r0, r3
 800681a:	f000 fbf5 	bl	8007008 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006822:	e3d2      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006824:	2300      	movs	r3, #0
 8006826:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006828:	e3cf      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800682a:	4b78      	ldr	r3, [pc, #480]	; (8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006832:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006836:	d107      	bne.n	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006838:	f107 030c 	add.w	r3, r7, #12
 800683c:	4618      	mov	r0, r3
 800683e:	f000 fd37 	bl	80072b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006846:	e3c0      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006848:	2300      	movs	r3, #0
 800684a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800684c:	e3bd      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800684e:	4b6f      	ldr	r3, [pc, #444]	; (8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006852:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006856:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006858:	4b6c      	ldr	r3, [pc, #432]	; (8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 0304 	and.w	r3, r3, #4
 8006860:	2b04      	cmp	r3, #4
 8006862:	d10c      	bne.n	800687e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006866:	2b00      	cmp	r3, #0
 8006868:	d109      	bne.n	800687e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800686a:	4b68      	ldr	r3, [pc, #416]	; (8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	08db      	lsrs	r3, r3, #3
 8006870:	f003 0303 	and.w	r3, r3, #3
 8006874:	4a66      	ldr	r2, [pc, #408]	; (8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006876:	fa22 f303 	lsr.w	r3, r2, r3
 800687a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800687c:	e01e      	b.n	80068bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800687e:	4b63      	ldr	r3, [pc, #396]	; (8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006886:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800688a:	d106      	bne.n	800689a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800688c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800688e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006892:	d102      	bne.n	800689a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006894:	4b5f      	ldr	r3, [pc, #380]	; (8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006896:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006898:	e010      	b.n	80068bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800689a:	4b5c      	ldr	r3, [pc, #368]	; (8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068a6:	d106      	bne.n	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80068a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068ae:	d102      	bne.n	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80068b0:	4b59      	ldr	r3, [pc, #356]	; (8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80068b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068b4:	e002      	b.n	80068bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80068b6:	2300      	movs	r3, #0
 80068b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80068ba:	e386      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80068bc:	e385      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80068be:	4b57      	ldr	r3, [pc, #348]	; (8006a1c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80068c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068c2:	e382      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80068c4:	2300      	movs	r3, #0
 80068c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068c8:	e37f      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80068ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068ce:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80068d2:	430b      	orrs	r3, r1
 80068d4:	f040 80a7 	bne.w	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80068d8:	4b4c      	ldr	r3, [pc, #304]	; (8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80068da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068dc:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80068e0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80068e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80068e8:	d055      	beq.n	8006996 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80068ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80068f0:	f200 8096 	bhi.w	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80068f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80068fa:	f000 8084 	beq.w	8006a06 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80068fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006900:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006904:	f200 808c 	bhi.w	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800690e:	d030      	beq.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8006910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006912:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006916:	f200 8083 	bhi.w	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800691a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691c:	2b00      	cmp	r3, #0
 800691e:	d004      	beq.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006922:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006926:	d012      	beq.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006928:	e07a      	b.n	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800692a:	4b38      	ldr	r3, [pc, #224]	; (8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006932:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006936:	d107      	bne.n	8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006938:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800693c:	4618      	mov	r0, r3
 800693e:	f000 fe0b 	bl	8007558 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006944:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006946:	e340      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006948:	2300      	movs	r3, #0
 800694a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800694c:	e33d      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800694e:	4b2f      	ldr	r3, [pc, #188]	; (8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006956:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800695a:	d107      	bne.n	800696c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800695c:	f107 0318 	add.w	r3, r7, #24
 8006960:	4618      	mov	r0, r3
 8006962:	f000 fb51 	bl	8007008 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800696a:	e32e      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800696c:	2300      	movs	r3, #0
 800696e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006970:	e32b      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006972:	4b26      	ldr	r3, [pc, #152]	; (8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800697a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800697e:	d107      	bne.n	8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006980:	f107 030c 	add.w	r3, r7, #12
 8006984:	4618      	mov	r0, r3
 8006986:	f000 fc93 	bl	80072b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800698e:	e31c      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006990:	2300      	movs	r3, #0
 8006992:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006994:	e319      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006996:	4b1d      	ldr	r3, [pc, #116]	; (8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800699a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800699e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80069a0:	4b1a      	ldr	r3, [pc, #104]	; (8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 0304 	and.w	r3, r3, #4
 80069a8:	2b04      	cmp	r3, #4
 80069aa:	d10c      	bne.n	80069c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80069ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d109      	bne.n	80069c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80069b2:	4b16      	ldr	r3, [pc, #88]	; (8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	08db      	lsrs	r3, r3, #3
 80069b8:	f003 0303 	and.w	r3, r3, #3
 80069bc:	4a14      	ldr	r2, [pc, #80]	; (8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80069be:	fa22 f303 	lsr.w	r3, r2, r3
 80069c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069c4:	e01e      	b.n	8006a04 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80069c6:	4b11      	ldr	r3, [pc, #68]	; (8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069d2:	d106      	bne.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80069d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069da:	d102      	bne.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80069dc:	4b0d      	ldr	r3, [pc, #52]	; (8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80069de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069e0:	e010      	b.n	8006a04 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80069e2:	4b0a      	ldr	r3, [pc, #40]	; (8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069ee:	d106      	bne.n	80069fe <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80069f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069f6:	d102      	bne.n	80069fe <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80069f8:	4b07      	ldr	r3, [pc, #28]	; (8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80069fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069fc:	e002      	b.n	8006a04 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80069fe:	2300      	movs	r3, #0
 8006a00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006a02:	e2e2      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006a04:	e2e1      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006a06:	4b05      	ldr	r3, [pc, #20]	; (8006a1c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006a08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a0a:	e2de      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006a0c:	58024400 	.word	0x58024400
 8006a10:	03d09000 	.word	0x03d09000
 8006a14:	003d0900 	.word	0x003d0900
 8006a18:	017d7840 	.word	0x017d7840
 8006a1c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8006a20:	2300      	movs	r3, #0
 8006a22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a24:	e2d1      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006a26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a2a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8006a2e:	430b      	orrs	r3, r1
 8006a30:	f040 809c 	bne.w	8006b6c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006a34:	4b93      	ldr	r3, [pc, #588]	; (8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a38:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006a3c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a44:	d054      	beq.n	8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a4c:	f200 808b 	bhi.w	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a52:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a56:	f000 8083 	beq.w	8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a5c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a60:	f200 8081 	bhi.w	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a6a:	d02f      	beq.n	8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a72:	d878      	bhi.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d004      	beq.n	8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a80:	d012      	beq.n	8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006a82:	e070      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006a84:	4b7f      	ldr	r3, [pc, #508]	; (8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a90:	d107      	bne.n	8006aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a96:	4618      	mov	r0, r3
 8006a98:	f000 fd5e 	bl	8007558 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006aa0:	e293      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006aa6:	e290      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006aa8:	4b76      	ldr	r3, [pc, #472]	; (8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ab0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ab4:	d107      	bne.n	8006ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ab6:	f107 0318 	add.w	r3, r7, #24
 8006aba:	4618      	mov	r0, r3
 8006abc:	f000 faa4 	bl	8007008 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006ac0:	69bb      	ldr	r3, [r7, #24]
 8006ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ac4:	e281      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006aca:	e27e      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006acc:	4b6d      	ldr	r3, [pc, #436]	; (8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ad4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ad8:	d107      	bne.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ada:	f107 030c 	add.w	r3, r7, #12
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f000 fbe6 	bl	80072b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ae8:	e26f      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006aea:	2300      	movs	r3, #0
 8006aec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006aee:	e26c      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006af0:	4b64      	ldr	r3, [pc, #400]	; (8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006af4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006af8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006afa:	4b62      	ldr	r3, [pc, #392]	; (8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f003 0304 	and.w	r3, r3, #4
 8006b02:	2b04      	cmp	r3, #4
 8006b04:	d10c      	bne.n	8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d109      	bne.n	8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b0c:	4b5d      	ldr	r3, [pc, #372]	; (8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	08db      	lsrs	r3, r3, #3
 8006b12:	f003 0303 	and.w	r3, r3, #3
 8006b16:	4a5c      	ldr	r2, [pc, #368]	; (8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006b18:	fa22 f303 	lsr.w	r3, r2, r3
 8006b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b1e:	e01e      	b.n	8006b5e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006b20:	4b58      	ldr	r3, [pc, #352]	; (8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b2c:	d106      	bne.n	8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b34:	d102      	bne.n	8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006b36:	4b55      	ldr	r3, [pc, #340]	; (8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006b38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b3a:	e010      	b.n	8006b5e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006b3c:	4b51      	ldr	r3, [pc, #324]	; (8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b48:	d106      	bne.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b50:	d102      	bne.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006b52:	4b4f      	ldr	r3, [pc, #316]	; (8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006b54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b56:	e002      	b.n	8006b5e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006b5c:	e235      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006b5e:	e234      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006b60:	4b4c      	ldr	r3, [pc, #304]	; (8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006b62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b64:	e231      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006b66:	2300      	movs	r3, #0
 8006b68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b6a:	e22e      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006b6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b70:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8006b74:	430b      	orrs	r3, r1
 8006b76:	f040 808f 	bne.w	8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006b7a:	4b42      	ldr	r3, [pc, #264]	; (8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b7e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006b82:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8006b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b86:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b8a:	d06b      	beq.n	8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b92:	d874      	bhi.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b96:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006b9a:	d056      	beq.n	8006c4a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b9e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ba2:	d86c      	bhi.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006baa:	d03b      	beq.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006bb2:	d864      	bhi.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bba:	d021      	beq.n	8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bc2:	d85c      	bhi.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d004      	beq.n	8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bd0:	d004      	beq.n	8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006bd2:	e054      	b.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006bd4:	f7fe fa62 	bl	800509c <HAL_RCC_GetPCLK1Freq>
 8006bd8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006bda:	e1f6      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006bdc:	4b29      	ldr	r3, [pc, #164]	; (8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006be4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006be8:	d107      	bne.n	8006bfa <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bea:	f107 0318 	add.w	r3, r7, #24
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f000 fa0a 	bl	8007008 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bf8:	e1e7      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bfe:	e1e4      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006c00:	4b20      	ldr	r3, [pc, #128]	; (8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c0c:	d107      	bne.n	8006c1e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c0e:	f107 030c 	add.w	r3, r7, #12
 8006c12:	4618      	mov	r0, r3
 8006c14:	f000 fb4c 	bl	80072b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c1c:	e1d5      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c22:	e1d2      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006c24:	4b17      	ldr	r3, [pc, #92]	; (8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 0304 	and.w	r3, r3, #4
 8006c2c:	2b04      	cmp	r3, #4
 8006c2e:	d109      	bne.n	8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c30:	4b14      	ldr	r3, [pc, #80]	; (8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	08db      	lsrs	r3, r3, #3
 8006c36:	f003 0303 	and.w	r3, r3, #3
 8006c3a:	4a13      	ldr	r2, [pc, #76]	; (8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8006c40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c42:	e1c2      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c44:	2300      	movs	r3, #0
 8006c46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c48:	e1bf      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006c4a:	4b0e      	ldr	r3, [pc, #56]	; (8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c56:	d102      	bne.n	8006c5e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8006c58:	4b0c      	ldr	r3, [pc, #48]	; (8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c5c:	e1b5      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c62:	e1b2      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006c64:	4b07      	ldr	r3, [pc, #28]	; (8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c70:	d102      	bne.n	8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8006c72:	4b07      	ldr	r3, [pc, #28]	; (8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006c74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c76:	e1a8      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c7c:	e1a5      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c82:	e1a2      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006c84:	58024400 	.word	0x58024400
 8006c88:	03d09000 	.word	0x03d09000
 8006c8c:	003d0900 	.word	0x003d0900
 8006c90:	017d7840 	.word	0x017d7840
 8006c94:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006c98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c9c:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8006ca0:	430b      	orrs	r3, r1
 8006ca2:	d173      	bne.n	8006d8c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006ca4:	4b9c      	ldr	r3, [pc, #624]	; (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ca8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006cac:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cb4:	d02f      	beq.n	8006d16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cbc:	d863      	bhi.n	8006d86 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8006cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d004      	beq.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8006cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cca:	d012      	beq.n	8006cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006ccc:	e05b      	b.n	8006d86 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006cce:	4b92      	ldr	r3, [pc, #584]	; (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cda:	d107      	bne.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cdc:	f107 0318 	add.w	r3, r7, #24
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f000 f991 	bl	8007008 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cea:	e16e      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cec:	2300      	movs	r3, #0
 8006cee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cf0:	e16b      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006cf2:	4b89      	ldr	r3, [pc, #548]	; (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cfe:	d107      	bne.n	8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d00:	f107 030c 	add.w	r3, r7, #12
 8006d04:	4618      	mov	r0, r3
 8006d06:	f000 fad3 	bl	80072b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d0e:	e15c      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d10:	2300      	movs	r3, #0
 8006d12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d14:	e159      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006d16:	4b80      	ldr	r3, [pc, #512]	; (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006d1e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006d20:	4b7d      	ldr	r3, [pc, #500]	; (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 0304 	and.w	r3, r3, #4
 8006d28:	2b04      	cmp	r3, #4
 8006d2a:	d10c      	bne.n	8006d46 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d109      	bne.n	8006d46 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d32:	4b79      	ldr	r3, [pc, #484]	; (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	08db      	lsrs	r3, r3, #3
 8006d38:	f003 0303 	and.w	r3, r3, #3
 8006d3c:	4a77      	ldr	r2, [pc, #476]	; (8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d44:	e01e      	b.n	8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006d46:	4b74      	ldr	r3, [pc, #464]	; (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d52:	d106      	bne.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8006d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d5a:	d102      	bne.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006d5c:	4b70      	ldr	r3, [pc, #448]	; (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d60:	e010      	b.n	8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d62:	4b6d      	ldr	r3, [pc, #436]	; (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d6e:	d106      	bne.n	8006d7e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8006d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d76:	d102      	bne.n	8006d7e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006d78:	4b6a      	ldr	r3, [pc, #424]	; (8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d7c:	e002      	b.n	8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006d82:	e122      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006d84:	e121      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006d86:	2300      	movs	r3, #0
 8006d88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d8a:	e11e      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006d8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d90:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8006d94:	430b      	orrs	r3, r1
 8006d96:	d133      	bne.n	8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006d98:	4b5f      	ldr	r3, [pc, #380]	; (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006da0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d004      	beq.n	8006db2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006daa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dae:	d012      	beq.n	8006dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8006db0:	e023      	b.n	8006dfa <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006db2:	4b59      	ldr	r3, [pc, #356]	; (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006dbe:	d107      	bne.n	8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006dc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f000 fbc7 	bl	8007558 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006dce:	e0fc      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006dd4:	e0f9      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006dd6:	4b50      	ldr	r3, [pc, #320]	; (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006de2:	d107      	bne.n	8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006de4:	f107 0318 	add.w	r3, r7, #24
 8006de8:	4618      	mov	r0, r3
 8006dea:	f000 f90d 	bl	8007008 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006dee:	6a3b      	ldr	r3, [r7, #32]
 8006df0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006df2:	e0ea      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006df4:	2300      	movs	r3, #0
 8006df6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006df8:	e0e7      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006dfe:	e0e4      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006e00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e04:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8006e08:	430b      	orrs	r3, r1
 8006e0a:	f040 808d 	bne.w	8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006e0e:	4b42      	ldr	r3, [pc, #264]	; (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e12:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006e16:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e1e:	d06b      	beq.n	8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8006e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e26:	d874      	bhi.n	8006f12 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e2e:	d056      	beq.n	8006ede <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8006e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e36:	d86c      	bhi.n	8006f12 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006e3e:	d03b      	beq.n	8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8006e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e42:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006e46:	d864      	bhi.n	8006f12 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e4e:	d021      	beq.n	8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8006e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e56:	d85c      	bhi.n	8006f12 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d004      	beq.n	8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8006e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e64:	d004      	beq.n	8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8006e66:	e054      	b.n	8006f12 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006e68:	f000 f8b8 	bl	8006fdc <HAL_RCCEx_GetD3PCLK1Freq>
 8006e6c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006e6e:	e0ac      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e70:	4b29      	ldr	r3, [pc, #164]	; (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e7c:	d107      	bne.n	8006e8e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e7e:	f107 0318 	add.w	r3, r7, #24
 8006e82:	4618      	mov	r0, r3
 8006e84:	f000 f8c0 	bl	8007008 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006e88:	69fb      	ldr	r3, [r7, #28]
 8006e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e8c:	e09d      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e92:	e09a      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e94:	4b20      	ldr	r3, [pc, #128]	; (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ea0:	d107      	bne.n	8006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ea2:	f107 030c 	add.w	r3, r7, #12
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f000 fa02 	bl	80072b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006eb0:	e08b      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006eb6:	e088      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006eb8:	4b17      	ldr	r3, [pc, #92]	; (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 0304 	and.w	r3, r3, #4
 8006ec0:	2b04      	cmp	r3, #4
 8006ec2:	d109      	bne.n	8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ec4:	4b14      	ldr	r3, [pc, #80]	; (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	08db      	lsrs	r3, r3, #3
 8006eca:	f003 0303 	and.w	r3, r3, #3
 8006ece:	4a13      	ldr	r2, [pc, #76]	; (8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ed6:	e078      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006edc:	e075      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006ede:	4b0e      	ldr	r3, [pc, #56]	; (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ee6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006eea:	d102      	bne.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8006eec:	4b0c      	ldr	r3, [pc, #48]	; (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006eee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ef0:	e06b      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ef6:	e068      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006ef8:	4b07      	ldr	r3, [pc, #28]	; (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f04:	d102      	bne.n	8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8006f06:	4b07      	ldr	r3, [pc, #28]	; (8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006f08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f0a:	e05e      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f10:	e05b      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006f12:	2300      	movs	r3, #0
 8006f14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f16:	e058      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006f18:	58024400 	.word	0x58024400
 8006f1c:	03d09000 	.word	0x03d09000
 8006f20:	003d0900 	.word	0x003d0900
 8006f24:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006f28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f2c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8006f30:	430b      	orrs	r3, r1
 8006f32:	d148      	bne.n	8006fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006f34:	4b27      	ldr	r3, [pc, #156]	; (8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006f3c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f44:	d02a      	beq.n	8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8006f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f4c:	d838      	bhi.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8006f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d004      	beq.n	8006f5e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8006f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f5a:	d00d      	beq.n	8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8006f5c:	e030      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006f5e:	4b1d      	ldr	r3, [pc, #116]	; (8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f6a:	d102      	bne.n	8006f72 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8006f6c:	4b1a      	ldr	r3, [pc, #104]	; (8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f70:	e02b      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f72:	2300      	movs	r3, #0
 8006f74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f76:	e028      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f78:	4b16      	ldr	r3, [pc, #88]	; (8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f84:	d107      	bne.n	8006f96 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f000 fae4 	bl	8007558 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f94:	e019      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f96:	2300      	movs	r3, #0
 8006f98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f9a:	e016      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f9c:	4b0d      	ldr	r3, [pc, #52]	; (8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fa4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fa8:	d107      	bne.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006faa:	f107 0318 	add.w	r3, r7, #24
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f000 f82a 	bl	8007008 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fb8:	e007      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fbe:	e004      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fc4:	e001      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8006fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3740      	adds	r7, #64	; 0x40
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}
 8006fd4:	58024400 	.word	0x58024400
 8006fd8:	017d7840 	.word	0x017d7840

08006fdc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006fe0:	f7fe f82c 	bl	800503c <HAL_RCC_GetHCLKFreq>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	4b06      	ldr	r3, [pc, #24]	; (8007000 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006fe8:	6a1b      	ldr	r3, [r3, #32]
 8006fea:	091b      	lsrs	r3, r3, #4
 8006fec:	f003 0307 	and.w	r3, r3, #7
 8006ff0:	4904      	ldr	r1, [pc, #16]	; (8007004 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006ff2:	5ccb      	ldrb	r3, [r1, r3]
 8006ff4:	f003 031f 	and.w	r3, r3, #31
 8006ff8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	58024400 	.word	0x58024400
 8007004:	0800e828 	.word	0x0800e828

08007008 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007008:	b480      	push	{r7}
 800700a:	b089      	sub	sp, #36	; 0x24
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007010:	4ba1      	ldr	r3, [pc, #644]	; (8007298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007014:	f003 0303 	and.w	r3, r3, #3
 8007018:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800701a:	4b9f      	ldr	r3, [pc, #636]	; (8007298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800701c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800701e:	0b1b      	lsrs	r3, r3, #12
 8007020:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007024:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007026:	4b9c      	ldr	r3, [pc, #624]	; (8007298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800702a:	091b      	lsrs	r3, r3, #4
 800702c:	f003 0301 	and.w	r3, r3, #1
 8007030:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007032:	4b99      	ldr	r3, [pc, #612]	; (8007298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007036:	08db      	lsrs	r3, r3, #3
 8007038:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800703c:	693a      	ldr	r2, [r7, #16]
 800703e:	fb02 f303 	mul.w	r3, r2, r3
 8007042:	ee07 3a90 	vmov	s15, r3
 8007046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800704a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	2b00      	cmp	r3, #0
 8007052:	f000 8111 	beq.w	8007278 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	2b02      	cmp	r3, #2
 800705a:	f000 8083 	beq.w	8007164 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	2b02      	cmp	r3, #2
 8007062:	f200 80a1 	bhi.w	80071a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d003      	beq.n	8007074 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	2b01      	cmp	r3, #1
 8007070:	d056      	beq.n	8007120 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007072:	e099      	b.n	80071a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007074:	4b88      	ldr	r3, [pc, #544]	; (8007298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 0320 	and.w	r3, r3, #32
 800707c:	2b00      	cmp	r3, #0
 800707e:	d02d      	beq.n	80070dc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007080:	4b85      	ldr	r3, [pc, #532]	; (8007298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	08db      	lsrs	r3, r3, #3
 8007086:	f003 0303 	and.w	r3, r3, #3
 800708a:	4a84      	ldr	r2, [pc, #528]	; (800729c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800708c:	fa22 f303 	lsr.w	r3, r2, r3
 8007090:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	ee07 3a90 	vmov	s15, r3
 8007098:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	ee07 3a90 	vmov	s15, r3
 80070a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070aa:	4b7b      	ldr	r3, [pc, #492]	; (8007298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070b2:	ee07 3a90 	vmov	s15, r3
 80070b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80070be:	eddf 5a78 	vldr	s11, [pc, #480]	; 80072a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80070da:	e087      	b.n	80071ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	ee07 3a90 	vmov	s15, r3
 80070e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070e6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80072a4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80070ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070ee:	4b6a      	ldr	r3, [pc, #424]	; (8007298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070f6:	ee07 3a90 	vmov	s15, r3
 80070fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007102:	eddf 5a67 	vldr	s11, [pc, #412]	; 80072a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800710a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800710e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800711a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800711e:	e065      	b.n	80071ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	ee07 3a90 	vmov	s15, r3
 8007126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800712a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80072a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800712e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007132:	4b59      	ldr	r3, [pc, #356]	; (8007298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800713a:	ee07 3a90 	vmov	s15, r3
 800713e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007142:	ed97 6a03 	vldr	s12, [r7, #12]
 8007146:	eddf 5a56 	vldr	s11, [pc, #344]	; 80072a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800714a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800714e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007152:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800715a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800715e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007162:	e043      	b.n	80071ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	ee07 3a90 	vmov	s15, r3
 800716a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800716e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80072ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007176:	4b48      	ldr	r3, [pc, #288]	; (8007298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800717a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800717e:	ee07 3a90 	vmov	s15, r3
 8007182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007186:	ed97 6a03 	vldr	s12, [r7, #12]
 800718a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80072a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800718e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007196:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800719a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800719e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071a6:	e021      	b.n	80071ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	ee07 3a90 	vmov	s15, r3
 80071ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071b2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80072a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80071b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071ba:	4b37      	ldr	r3, [pc, #220]	; (8007298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071c2:	ee07 3a90 	vmov	s15, r3
 80071c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80071ce:	eddf 5a34 	vldr	s11, [pc, #208]	; 80072a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071ea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80071ec:	4b2a      	ldr	r3, [pc, #168]	; (8007298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f0:	0a5b      	lsrs	r3, r3, #9
 80071f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071f6:	ee07 3a90 	vmov	s15, r3
 80071fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007202:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007206:	edd7 6a07 	vldr	s13, [r7, #28]
 800720a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800720e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007212:	ee17 2a90 	vmov	r2, s15
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800721a:	4b1f      	ldr	r3, [pc, #124]	; (8007298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800721c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800721e:	0c1b      	lsrs	r3, r3, #16
 8007220:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007224:	ee07 3a90 	vmov	s15, r3
 8007228:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800722c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007230:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007234:	edd7 6a07 	vldr	s13, [r7, #28]
 8007238:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800723c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007240:	ee17 2a90 	vmov	r2, s15
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007248:	4b13      	ldr	r3, [pc, #76]	; (8007298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800724a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800724c:	0e1b      	lsrs	r3, r3, #24
 800724e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007252:	ee07 3a90 	vmov	s15, r3
 8007256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800725a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800725e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007262:	edd7 6a07 	vldr	s13, [r7, #28]
 8007266:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800726a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800726e:	ee17 2a90 	vmov	r2, s15
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007276:	e008      	b.n	800728a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	609a      	str	r2, [r3, #8]
}
 800728a:	bf00      	nop
 800728c:	3724      	adds	r7, #36	; 0x24
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr
 8007296:	bf00      	nop
 8007298:	58024400 	.word	0x58024400
 800729c:	03d09000 	.word	0x03d09000
 80072a0:	46000000 	.word	0x46000000
 80072a4:	4c742400 	.word	0x4c742400
 80072a8:	4a742400 	.word	0x4a742400
 80072ac:	4bbebc20 	.word	0x4bbebc20

080072b0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b089      	sub	sp, #36	; 0x24
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80072b8:	4ba1      	ldr	r3, [pc, #644]	; (8007540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072bc:	f003 0303 	and.w	r3, r3, #3
 80072c0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80072c2:	4b9f      	ldr	r3, [pc, #636]	; (8007540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c6:	0d1b      	lsrs	r3, r3, #20
 80072c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072cc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80072ce:	4b9c      	ldr	r3, [pc, #624]	; (8007540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d2:	0a1b      	lsrs	r3, r3, #8
 80072d4:	f003 0301 	and.w	r3, r3, #1
 80072d8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80072da:	4b99      	ldr	r3, [pc, #612]	; (8007540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072de:	08db      	lsrs	r3, r3, #3
 80072e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80072e4:	693a      	ldr	r2, [r7, #16]
 80072e6:	fb02 f303 	mul.w	r3, r2, r3
 80072ea:	ee07 3a90 	vmov	s15, r3
 80072ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	f000 8111 	beq.w	8007520 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	2b02      	cmp	r3, #2
 8007302:	f000 8083 	beq.w	800740c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007306:	69bb      	ldr	r3, [r7, #24]
 8007308:	2b02      	cmp	r3, #2
 800730a:	f200 80a1 	bhi.w	8007450 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800730e:	69bb      	ldr	r3, [r7, #24]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d003      	beq.n	800731c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007314:	69bb      	ldr	r3, [r7, #24]
 8007316:	2b01      	cmp	r3, #1
 8007318:	d056      	beq.n	80073c8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800731a:	e099      	b.n	8007450 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800731c:	4b88      	ldr	r3, [pc, #544]	; (8007540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f003 0320 	and.w	r3, r3, #32
 8007324:	2b00      	cmp	r3, #0
 8007326:	d02d      	beq.n	8007384 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007328:	4b85      	ldr	r3, [pc, #532]	; (8007540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	08db      	lsrs	r3, r3, #3
 800732e:	f003 0303 	and.w	r3, r3, #3
 8007332:	4a84      	ldr	r2, [pc, #528]	; (8007544 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007334:	fa22 f303 	lsr.w	r3, r2, r3
 8007338:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	ee07 3a90 	vmov	s15, r3
 8007340:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	ee07 3a90 	vmov	s15, r3
 800734a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800734e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007352:	4b7b      	ldr	r3, [pc, #492]	; (8007540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800735a:	ee07 3a90 	vmov	s15, r3
 800735e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007362:	ed97 6a03 	vldr	s12, [r7, #12]
 8007366:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007548 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800736a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800736e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007372:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800737a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800737e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007382:	e087      	b.n	8007494 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	ee07 3a90 	vmov	s15, r3
 800738a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800738e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800754c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007396:	4b6a      	ldr	r3, [pc, #424]	; (8007540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800739e:	ee07 3a90 	vmov	s15, r3
 80073a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80073aa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007548 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073c6:	e065      	b.n	8007494 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	ee07 3a90 	vmov	s15, r3
 80073ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073d2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007550 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80073d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073da:	4b59      	ldr	r3, [pc, #356]	; (8007540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073e2:	ee07 3a90 	vmov	s15, r3
 80073e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80073ee:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007548 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007406:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800740a:	e043      	b.n	8007494 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	ee07 3a90 	vmov	s15, r3
 8007412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007416:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007554 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800741a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800741e:	4b48      	ldr	r3, [pc, #288]	; (8007540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007426:	ee07 3a90 	vmov	s15, r3
 800742a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800742e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007432:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007548 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800743a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800743e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800744a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800744e:	e021      	b.n	8007494 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	ee07 3a90 	vmov	s15, r3
 8007456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800745a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007550 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800745e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007462:	4b37      	ldr	r3, [pc, #220]	; (8007540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800746a:	ee07 3a90 	vmov	s15, r3
 800746e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007472:	ed97 6a03 	vldr	s12, [r7, #12]
 8007476:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007548 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800747a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800747e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007482:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800748a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800748e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007492:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007494:	4b2a      	ldr	r3, [pc, #168]	; (8007540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007498:	0a5b      	lsrs	r3, r3, #9
 800749a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800749e:	ee07 3a90 	vmov	s15, r3
 80074a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80074b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074ba:	ee17 2a90 	vmov	r2, s15
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80074c2:	4b1f      	ldr	r3, [pc, #124]	; (8007540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c6:	0c1b      	lsrs	r3, r3, #16
 80074c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074cc:	ee07 3a90 	vmov	s15, r3
 80074d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80074e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074e8:	ee17 2a90 	vmov	r2, s15
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80074f0:	4b13      	ldr	r3, [pc, #76]	; (8007540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f4:	0e1b      	lsrs	r3, r3, #24
 80074f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074fa:	ee07 3a90 	vmov	s15, r3
 80074fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007502:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007506:	ee37 7a87 	vadd.f32	s14, s15, s14
 800750a:	edd7 6a07 	vldr	s13, [r7, #28]
 800750e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007512:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007516:	ee17 2a90 	vmov	r2, s15
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800751e:	e008      	b.n	8007532 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2200      	movs	r2, #0
 8007524:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2200      	movs	r2, #0
 8007530:	609a      	str	r2, [r3, #8]
}
 8007532:	bf00      	nop
 8007534:	3724      	adds	r7, #36	; 0x24
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr
 800753e:	bf00      	nop
 8007540:	58024400 	.word	0x58024400
 8007544:	03d09000 	.word	0x03d09000
 8007548:	46000000 	.word	0x46000000
 800754c:	4c742400 	.word	0x4c742400
 8007550:	4a742400 	.word	0x4a742400
 8007554:	4bbebc20 	.word	0x4bbebc20

08007558 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007558:	b480      	push	{r7}
 800755a:	b089      	sub	sp, #36	; 0x24
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007560:	4ba0      	ldr	r3, [pc, #640]	; (80077e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007564:	f003 0303 	and.w	r3, r3, #3
 8007568:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800756a:	4b9e      	ldr	r3, [pc, #632]	; (80077e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800756c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800756e:	091b      	lsrs	r3, r3, #4
 8007570:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007574:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007576:	4b9b      	ldr	r3, [pc, #620]	; (80077e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800757a:	f003 0301 	and.w	r3, r3, #1
 800757e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007580:	4b98      	ldr	r3, [pc, #608]	; (80077e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007584:	08db      	lsrs	r3, r3, #3
 8007586:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800758a:	693a      	ldr	r2, [r7, #16]
 800758c:	fb02 f303 	mul.w	r3, r2, r3
 8007590:	ee07 3a90 	vmov	s15, r3
 8007594:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007598:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	f000 8111 	beq.w	80077c6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80075a4:	69bb      	ldr	r3, [r7, #24]
 80075a6:	2b02      	cmp	r3, #2
 80075a8:	f000 8083 	beq.w	80076b2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	f200 80a1 	bhi.w	80076f6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80075b4:	69bb      	ldr	r3, [r7, #24]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d003      	beq.n	80075c2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d056      	beq.n	800766e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80075c0:	e099      	b.n	80076f6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075c2:	4b88      	ldr	r3, [pc, #544]	; (80077e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f003 0320 	and.w	r3, r3, #32
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d02d      	beq.n	800762a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80075ce:	4b85      	ldr	r3, [pc, #532]	; (80077e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	08db      	lsrs	r3, r3, #3
 80075d4:	f003 0303 	and.w	r3, r3, #3
 80075d8:	4a83      	ldr	r2, [pc, #524]	; (80077e8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80075da:	fa22 f303 	lsr.w	r3, r2, r3
 80075de:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	ee07 3a90 	vmov	s15, r3
 80075e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	ee07 3a90 	vmov	s15, r3
 80075f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075f8:	4b7a      	ldr	r3, [pc, #488]	; (80077e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007600:	ee07 3a90 	vmov	s15, r3
 8007604:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007608:	ed97 6a03 	vldr	s12, [r7, #12]
 800760c:	eddf 5a77 	vldr	s11, [pc, #476]	; 80077ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007610:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007614:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007618:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800761c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007620:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007624:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007628:	e087      	b.n	800773a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	ee07 3a90 	vmov	s15, r3
 8007630:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007634:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80077f0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007638:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800763c:	4b69      	ldr	r3, [pc, #420]	; (80077e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800763e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007644:	ee07 3a90 	vmov	s15, r3
 8007648:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800764c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007650:	eddf 5a66 	vldr	s11, [pc, #408]	; 80077ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007654:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007658:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800765c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007660:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007664:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007668:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800766c:	e065      	b.n	800773a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	ee07 3a90 	vmov	s15, r3
 8007674:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007678:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80077f4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800767c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007680:	4b58      	ldr	r3, [pc, #352]	; (80077e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007688:	ee07 3a90 	vmov	s15, r3
 800768c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007690:	ed97 6a03 	vldr	s12, [r7, #12]
 8007694:	eddf 5a55 	vldr	s11, [pc, #340]	; 80077ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007698:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800769c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076b0:	e043      	b.n	800773a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	ee07 3a90 	vmov	s15, r3
 80076b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076bc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80077f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80076c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076c4:	4b47      	ldr	r3, [pc, #284]	; (80077e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076cc:	ee07 3a90 	vmov	s15, r3
 80076d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80076d8:	eddf 5a44 	vldr	s11, [pc, #272]	; 80077ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80076dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076f4:	e021      	b.n	800773a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	ee07 3a90 	vmov	s15, r3
 80076fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007700:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80077f0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007704:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007708:	4b36      	ldr	r3, [pc, #216]	; (80077e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800770a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800770c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007710:	ee07 3a90 	vmov	s15, r3
 8007714:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007718:	ed97 6a03 	vldr	s12, [r7, #12]
 800771c:	eddf 5a33 	vldr	s11, [pc, #204]	; 80077ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007720:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007724:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007728:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800772c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007730:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007734:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007738:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800773a:	4b2a      	ldr	r3, [pc, #168]	; (80077e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800773c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800773e:	0a5b      	lsrs	r3, r3, #9
 8007740:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007744:	ee07 3a90 	vmov	s15, r3
 8007748:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800774c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007750:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007754:	edd7 6a07 	vldr	s13, [r7, #28]
 8007758:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800775c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007760:	ee17 2a90 	vmov	r2, s15
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007768:	4b1e      	ldr	r3, [pc, #120]	; (80077e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800776a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800776c:	0c1b      	lsrs	r3, r3, #16
 800776e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007772:	ee07 3a90 	vmov	s15, r3
 8007776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800777a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800777e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007782:	edd7 6a07 	vldr	s13, [r7, #28]
 8007786:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800778a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800778e:	ee17 2a90 	vmov	r2, s15
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007796:	4b13      	ldr	r3, [pc, #76]	; (80077e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800779a:	0e1b      	lsrs	r3, r3, #24
 800779c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077a0:	ee07 3a90 	vmov	s15, r3
 80077a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80077b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077bc:	ee17 2a90 	vmov	r2, s15
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80077c4:	e008      	b.n	80077d8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2200      	movs	r2, #0
 80077ca:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	609a      	str	r2, [r3, #8]
}
 80077d8:	bf00      	nop
 80077da:	3724      	adds	r7, #36	; 0x24
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr
 80077e4:	58024400 	.word	0x58024400
 80077e8:	03d09000 	.word	0x03d09000
 80077ec:	46000000 	.word	0x46000000
 80077f0:	4c742400 	.word	0x4c742400
 80077f4:	4a742400 	.word	0x4a742400
 80077f8:	4bbebc20 	.word	0x4bbebc20

080077fc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007806:	2300      	movs	r3, #0
 8007808:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800780a:	4b53      	ldr	r3, [pc, #332]	; (8007958 <RCCEx_PLL2_Config+0x15c>)
 800780c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800780e:	f003 0303 	and.w	r3, r3, #3
 8007812:	2b03      	cmp	r3, #3
 8007814:	d101      	bne.n	800781a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	e099      	b.n	800794e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800781a:	4b4f      	ldr	r3, [pc, #316]	; (8007958 <RCCEx_PLL2_Config+0x15c>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a4e      	ldr	r2, [pc, #312]	; (8007958 <RCCEx_PLL2_Config+0x15c>)
 8007820:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007824:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007826:	f7f9 fddb 	bl	80013e0 <HAL_GetTick>
 800782a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800782c:	e008      	b.n	8007840 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800782e:	f7f9 fdd7 	bl	80013e0 <HAL_GetTick>
 8007832:	4602      	mov	r2, r0
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	1ad3      	subs	r3, r2, r3
 8007838:	2b02      	cmp	r3, #2
 800783a:	d901      	bls.n	8007840 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800783c:	2303      	movs	r3, #3
 800783e:	e086      	b.n	800794e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007840:	4b45      	ldr	r3, [pc, #276]	; (8007958 <RCCEx_PLL2_Config+0x15c>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007848:	2b00      	cmp	r3, #0
 800784a:	d1f0      	bne.n	800782e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800784c:	4b42      	ldr	r3, [pc, #264]	; (8007958 <RCCEx_PLL2_Config+0x15c>)
 800784e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007850:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	031b      	lsls	r3, r3, #12
 800785a:	493f      	ldr	r1, [pc, #252]	; (8007958 <RCCEx_PLL2_Config+0x15c>)
 800785c:	4313      	orrs	r3, r2
 800785e:	628b      	str	r3, [r1, #40]	; 0x28
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	3b01      	subs	r3, #1
 8007866:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	3b01      	subs	r3, #1
 8007870:	025b      	lsls	r3, r3, #9
 8007872:	b29b      	uxth	r3, r3
 8007874:	431a      	orrs	r2, r3
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	68db      	ldr	r3, [r3, #12]
 800787a:	3b01      	subs	r3, #1
 800787c:	041b      	lsls	r3, r3, #16
 800787e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007882:	431a      	orrs	r2, r3
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	691b      	ldr	r3, [r3, #16]
 8007888:	3b01      	subs	r3, #1
 800788a:	061b      	lsls	r3, r3, #24
 800788c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007890:	4931      	ldr	r1, [pc, #196]	; (8007958 <RCCEx_PLL2_Config+0x15c>)
 8007892:	4313      	orrs	r3, r2
 8007894:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007896:	4b30      	ldr	r3, [pc, #192]	; (8007958 <RCCEx_PLL2_Config+0x15c>)
 8007898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800789a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	695b      	ldr	r3, [r3, #20]
 80078a2:	492d      	ldr	r1, [pc, #180]	; (8007958 <RCCEx_PLL2_Config+0x15c>)
 80078a4:	4313      	orrs	r3, r2
 80078a6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80078a8:	4b2b      	ldr	r3, [pc, #172]	; (8007958 <RCCEx_PLL2_Config+0x15c>)
 80078aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ac:	f023 0220 	bic.w	r2, r3, #32
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	699b      	ldr	r3, [r3, #24]
 80078b4:	4928      	ldr	r1, [pc, #160]	; (8007958 <RCCEx_PLL2_Config+0x15c>)
 80078b6:	4313      	orrs	r3, r2
 80078b8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80078ba:	4b27      	ldr	r3, [pc, #156]	; (8007958 <RCCEx_PLL2_Config+0x15c>)
 80078bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078be:	4a26      	ldr	r2, [pc, #152]	; (8007958 <RCCEx_PLL2_Config+0x15c>)
 80078c0:	f023 0310 	bic.w	r3, r3, #16
 80078c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80078c6:	4b24      	ldr	r3, [pc, #144]	; (8007958 <RCCEx_PLL2_Config+0x15c>)
 80078c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078ca:	4b24      	ldr	r3, [pc, #144]	; (800795c <RCCEx_PLL2_Config+0x160>)
 80078cc:	4013      	ands	r3, r2
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	69d2      	ldr	r2, [r2, #28]
 80078d2:	00d2      	lsls	r2, r2, #3
 80078d4:	4920      	ldr	r1, [pc, #128]	; (8007958 <RCCEx_PLL2_Config+0x15c>)
 80078d6:	4313      	orrs	r3, r2
 80078d8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80078da:	4b1f      	ldr	r3, [pc, #124]	; (8007958 <RCCEx_PLL2_Config+0x15c>)
 80078dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078de:	4a1e      	ldr	r2, [pc, #120]	; (8007958 <RCCEx_PLL2_Config+0x15c>)
 80078e0:	f043 0310 	orr.w	r3, r3, #16
 80078e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d106      	bne.n	80078fa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80078ec:	4b1a      	ldr	r3, [pc, #104]	; (8007958 <RCCEx_PLL2_Config+0x15c>)
 80078ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f0:	4a19      	ldr	r2, [pc, #100]	; (8007958 <RCCEx_PLL2_Config+0x15c>)
 80078f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80078f8:	e00f      	b.n	800791a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d106      	bne.n	800790e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007900:	4b15      	ldr	r3, [pc, #84]	; (8007958 <RCCEx_PLL2_Config+0x15c>)
 8007902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007904:	4a14      	ldr	r2, [pc, #80]	; (8007958 <RCCEx_PLL2_Config+0x15c>)
 8007906:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800790a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800790c:	e005      	b.n	800791a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800790e:	4b12      	ldr	r3, [pc, #72]	; (8007958 <RCCEx_PLL2_Config+0x15c>)
 8007910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007912:	4a11      	ldr	r2, [pc, #68]	; (8007958 <RCCEx_PLL2_Config+0x15c>)
 8007914:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007918:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800791a:	4b0f      	ldr	r3, [pc, #60]	; (8007958 <RCCEx_PLL2_Config+0x15c>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a0e      	ldr	r2, [pc, #56]	; (8007958 <RCCEx_PLL2_Config+0x15c>)
 8007920:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007924:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007926:	f7f9 fd5b 	bl	80013e0 <HAL_GetTick>
 800792a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800792c:	e008      	b.n	8007940 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800792e:	f7f9 fd57 	bl	80013e0 <HAL_GetTick>
 8007932:	4602      	mov	r2, r0
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	1ad3      	subs	r3, r2, r3
 8007938:	2b02      	cmp	r3, #2
 800793a:	d901      	bls.n	8007940 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800793c:	2303      	movs	r3, #3
 800793e:	e006      	b.n	800794e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007940:	4b05      	ldr	r3, [pc, #20]	; (8007958 <RCCEx_PLL2_Config+0x15c>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007948:	2b00      	cmp	r3, #0
 800794a:	d0f0      	beq.n	800792e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800794c:	7bfb      	ldrb	r3, [r7, #15]
}
 800794e:	4618      	mov	r0, r3
 8007950:	3710      	adds	r7, #16
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
 8007956:	bf00      	nop
 8007958:	58024400 	.word	0x58024400
 800795c:	ffff0007 	.word	0xffff0007

08007960 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800796a:	2300      	movs	r3, #0
 800796c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800796e:	4b53      	ldr	r3, [pc, #332]	; (8007abc <RCCEx_PLL3_Config+0x15c>)
 8007970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007972:	f003 0303 	and.w	r3, r3, #3
 8007976:	2b03      	cmp	r3, #3
 8007978:	d101      	bne.n	800797e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800797a:	2301      	movs	r3, #1
 800797c:	e099      	b.n	8007ab2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800797e:	4b4f      	ldr	r3, [pc, #316]	; (8007abc <RCCEx_PLL3_Config+0x15c>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a4e      	ldr	r2, [pc, #312]	; (8007abc <RCCEx_PLL3_Config+0x15c>)
 8007984:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007988:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800798a:	f7f9 fd29 	bl	80013e0 <HAL_GetTick>
 800798e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007990:	e008      	b.n	80079a4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007992:	f7f9 fd25 	bl	80013e0 <HAL_GetTick>
 8007996:	4602      	mov	r2, r0
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	1ad3      	subs	r3, r2, r3
 800799c:	2b02      	cmp	r3, #2
 800799e:	d901      	bls.n	80079a4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80079a0:	2303      	movs	r3, #3
 80079a2:	e086      	b.n	8007ab2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80079a4:	4b45      	ldr	r3, [pc, #276]	; (8007abc <RCCEx_PLL3_Config+0x15c>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d1f0      	bne.n	8007992 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80079b0:	4b42      	ldr	r3, [pc, #264]	; (8007abc <RCCEx_PLL3_Config+0x15c>)
 80079b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	051b      	lsls	r3, r3, #20
 80079be:	493f      	ldr	r1, [pc, #252]	; (8007abc <RCCEx_PLL3_Config+0x15c>)
 80079c0:	4313      	orrs	r3, r2
 80079c2:	628b      	str	r3, [r1, #40]	; 0x28
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	3b01      	subs	r3, #1
 80079ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	3b01      	subs	r3, #1
 80079d4:	025b      	lsls	r3, r3, #9
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	431a      	orrs	r2, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	68db      	ldr	r3, [r3, #12]
 80079de:	3b01      	subs	r3, #1
 80079e0:	041b      	lsls	r3, r3, #16
 80079e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80079e6:	431a      	orrs	r2, r3
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	691b      	ldr	r3, [r3, #16]
 80079ec:	3b01      	subs	r3, #1
 80079ee:	061b      	lsls	r3, r3, #24
 80079f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80079f4:	4931      	ldr	r1, [pc, #196]	; (8007abc <RCCEx_PLL3_Config+0x15c>)
 80079f6:	4313      	orrs	r3, r2
 80079f8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80079fa:	4b30      	ldr	r3, [pc, #192]	; (8007abc <RCCEx_PLL3_Config+0x15c>)
 80079fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	695b      	ldr	r3, [r3, #20]
 8007a06:	492d      	ldr	r1, [pc, #180]	; (8007abc <RCCEx_PLL3_Config+0x15c>)
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007a0c:	4b2b      	ldr	r3, [pc, #172]	; (8007abc <RCCEx_PLL3_Config+0x15c>)
 8007a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a10:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	699b      	ldr	r3, [r3, #24]
 8007a18:	4928      	ldr	r1, [pc, #160]	; (8007abc <RCCEx_PLL3_Config+0x15c>)
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007a1e:	4b27      	ldr	r3, [pc, #156]	; (8007abc <RCCEx_PLL3_Config+0x15c>)
 8007a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a22:	4a26      	ldr	r2, [pc, #152]	; (8007abc <RCCEx_PLL3_Config+0x15c>)
 8007a24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007a2a:	4b24      	ldr	r3, [pc, #144]	; (8007abc <RCCEx_PLL3_Config+0x15c>)
 8007a2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a2e:	4b24      	ldr	r3, [pc, #144]	; (8007ac0 <RCCEx_PLL3_Config+0x160>)
 8007a30:	4013      	ands	r3, r2
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	69d2      	ldr	r2, [r2, #28]
 8007a36:	00d2      	lsls	r2, r2, #3
 8007a38:	4920      	ldr	r1, [pc, #128]	; (8007abc <RCCEx_PLL3_Config+0x15c>)
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007a3e:	4b1f      	ldr	r3, [pc, #124]	; (8007abc <RCCEx_PLL3_Config+0x15c>)
 8007a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a42:	4a1e      	ldr	r2, [pc, #120]	; (8007abc <RCCEx_PLL3_Config+0x15c>)
 8007a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d106      	bne.n	8007a5e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007a50:	4b1a      	ldr	r3, [pc, #104]	; (8007abc <RCCEx_PLL3_Config+0x15c>)
 8007a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a54:	4a19      	ldr	r2, [pc, #100]	; (8007abc <RCCEx_PLL3_Config+0x15c>)
 8007a56:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007a5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007a5c:	e00f      	b.n	8007a7e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d106      	bne.n	8007a72 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007a64:	4b15      	ldr	r3, [pc, #84]	; (8007abc <RCCEx_PLL3_Config+0x15c>)
 8007a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a68:	4a14      	ldr	r2, [pc, #80]	; (8007abc <RCCEx_PLL3_Config+0x15c>)
 8007a6a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007a6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007a70:	e005      	b.n	8007a7e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007a72:	4b12      	ldr	r3, [pc, #72]	; (8007abc <RCCEx_PLL3_Config+0x15c>)
 8007a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a76:	4a11      	ldr	r2, [pc, #68]	; (8007abc <RCCEx_PLL3_Config+0x15c>)
 8007a78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a7c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007a7e:	4b0f      	ldr	r3, [pc, #60]	; (8007abc <RCCEx_PLL3_Config+0x15c>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a0e      	ldr	r2, [pc, #56]	; (8007abc <RCCEx_PLL3_Config+0x15c>)
 8007a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a8a:	f7f9 fca9 	bl	80013e0 <HAL_GetTick>
 8007a8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007a90:	e008      	b.n	8007aa4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007a92:	f7f9 fca5 	bl	80013e0 <HAL_GetTick>
 8007a96:	4602      	mov	r2, r0
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	1ad3      	subs	r3, r2, r3
 8007a9c:	2b02      	cmp	r3, #2
 8007a9e:	d901      	bls.n	8007aa4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007aa0:	2303      	movs	r3, #3
 8007aa2:	e006      	b.n	8007ab2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007aa4:	4b05      	ldr	r3, [pc, #20]	; (8007abc <RCCEx_PLL3_Config+0x15c>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d0f0      	beq.n	8007a92 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3710      	adds	r7, #16
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	58024400 	.word	0x58024400
 8007ac0:	ffff0007 	.word	0xffff0007

08007ac4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ac4:	b084      	sub	sp, #16
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b084      	sub	sp, #16
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
 8007ace:	f107 001c 	add.w	r0, r7, #28
 8007ad2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d120      	bne.n	8007b1e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	68da      	ldr	r2, [r3, #12]
 8007aec:	4b2a      	ldr	r3, [pc, #168]	; (8007b98 <USB_CoreInit+0xd4>)
 8007aee:	4013      	ands	r3, r2
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007b00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d105      	bne.n	8007b12 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	68db      	ldr	r3, [r3, #12]
 8007b0a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f001 faf8 	bl	8009108 <USB_CoreReset>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	73fb      	strb	r3, [r7, #15]
 8007b1c:	e01a      	b.n	8007b54 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f001 faec 	bl	8009108 <USB_CoreReset>
 8007b30:	4603      	mov	r3, r0
 8007b32:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007b34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d106      	bne.n	8007b48 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b3e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	639a      	str	r2, [r3, #56]	; 0x38
 8007b46:	e005      	b.n	8007b54 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d116      	bne.n	8007b88 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b5e:	b29a      	uxth	r2, r3
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007b68:	4b0c      	ldr	r3, [pc, #48]	; (8007b9c <USB_CoreInit+0xd8>)
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	f043 0206 	orr.w	r2, r3, #6
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	f043 0220 	orr.w	r2, r3, #32
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3710      	adds	r7, #16
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b94:	b004      	add	sp, #16
 8007b96:	4770      	bx	lr
 8007b98:	ffbdffbf 	.word	0xffbdffbf
 8007b9c:	03ee0000 	.word	0x03ee0000

08007ba0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b087      	sub	sp, #28
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	60b9      	str	r1, [r7, #8]
 8007baa:	4613      	mov	r3, r2
 8007bac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007bae:	79fb      	ldrb	r3, [r7, #7]
 8007bb0:	2b02      	cmp	r3, #2
 8007bb2:	d165      	bne.n	8007c80 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	4a41      	ldr	r2, [pc, #260]	; (8007cbc <USB_SetTurnaroundTime+0x11c>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d906      	bls.n	8007bca <USB_SetTurnaroundTime+0x2a>
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	4a40      	ldr	r2, [pc, #256]	; (8007cc0 <USB_SetTurnaroundTime+0x120>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d202      	bcs.n	8007bca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007bc4:	230f      	movs	r3, #15
 8007bc6:	617b      	str	r3, [r7, #20]
 8007bc8:	e062      	b.n	8007c90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	4a3c      	ldr	r2, [pc, #240]	; (8007cc0 <USB_SetTurnaroundTime+0x120>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d306      	bcc.n	8007be0 <USB_SetTurnaroundTime+0x40>
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	4a3b      	ldr	r2, [pc, #236]	; (8007cc4 <USB_SetTurnaroundTime+0x124>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d202      	bcs.n	8007be0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007bda:	230e      	movs	r3, #14
 8007bdc:	617b      	str	r3, [r7, #20]
 8007bde:	e057      	b.n	8007c90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	4a38      	ldr	r2, [pc, #224]	; (8007cc4 <USB_SetTurnaroundTime+0x124>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d306      	bcc.n	8007bf6 <USB_SetTurnaroundTime+0x56>
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	4a37      	ldr	r2, [pc, #220]	; (8007cc8 <USB_SetTurnaroundTime+0x128>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d202      	bcs.n	8007bf6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007bf0:	230d      	movs	r3, #13
 8007bf2:	617b      	str	r3, [r7, #20]
 8007bf4:	e04c      	b.n	8007c90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	4a33      	ldr	r2, [pc, #204]	; (8007cc8 <USB_SetTurnaroundTime+0x128>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d306      	bcc.n	8007c0c <USB_SetTurnaroundTime+0x6c>
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	4a32      	ldr	r2, [pc, #200]	; (8007ccc <USB_SetTurnaroundTime+0x12c>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d802      	bhi.n	8007c0c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007c06:	230c      	movs	r3, #12
 8007c08:	617b      	str	r3, [r7, #20]
 8007c0a:	e041      	b.n	8007c90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	4a2f      	ldr	r2, [pc, #188]	; (8007ccc <USB_SetTurnaroundTime+0x12c>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d906      	bls.n	8007c22 <USB_SetTurnaroundTime+0x82>
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	4a2e      	ldr	r2, [pc, #184]	; (8007cd0 <USB_SetTurnaroundTime+0x130>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d802      	bhi.n	8007c22 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007c1c:	230b      	movs	r3, #11
 8007c1e:	617b      	str	r3, [r7, #20]
 8007c20:	e036      	b.n	8007c90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	4a2a      	ldr	r2, [pc, #168]	; (8007cd0 <USB_SetTurnaroundTime+0x130>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d906      	bls.n	8007c38 <USB_SetTurnaroundTime+0x98>
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	4a29      	ldr	r2, [pc, #164]	; (8007cd4 <USB_SetTurnaroundTime+0x134>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d802      	bhi.n	8007c38 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007c32:	230a      	movs	r3, #10
 8007c34:	617b      	str	r3, [r7, #20]
 8007c36:	e02b      	b.n	8007c90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	4a26      	ldr	r2, [pc, #152]	; (8007cd4 <USB_SetTurnaroundTime+0x134>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d906      	bls.n	8007c4e <USB_SetTurnaroundTime+0xae>
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	4a25      	ldr	r2, [pc, #148]	; (8007cd8 <USB_SetTurnaroundTime+0x138>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d202      	bcs.n	8007c4e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007c48:	2309      	movs	r3, #9
 8007c4a:	617b      	str	r3, [r7, #20]
 8007c4c:	e020      	b.n	8007c90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	4a21      	ldr	r2, [pc, #132]	; (8007cd8 <USB_SetTurnaroundTime+0x138>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d306      	bcc.n	8007c64 <USB_SetTurnaroundTime+0xc4>
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	4a20      	ldr	r2, [pc, #128]	; (8007cdc <USB_SetTurnaroundTime+0x13c>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d802      	bhi.n	8007c64 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007c5e:	2308      	movs	r3, #8
 8007c60:	617b      	str	r3, [r7, #20]
 8007c62:	e015      	b.n	8007c90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	4a1d      	ldr	r2, [pc, #116]	; (8007cdc <USB_SetTurnaroundTime+0x13c>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d906      	bls.n	8007c7a <USB_SetTurnaroundTime+0xda>
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	4a1c      	ldr	r2, [pc, #112]	; (8007ce0 <USB_SetTurnaroundTime+0x140>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d202      	bcs.n	8007c7a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007c74:	2307      	movs	r3, #7
 8007c76:	617b      	str	r3, [r7, #20]
 8007c78:	e00a      	b.n	8007c90 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007c7a:	2306      	movs	r3, #6
 8007c7c:	617b      	str	r3, [r7, #20]
 8007c7e:	e007      	b.n	8007c90 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007c80:	79fb      	ldrb	r3, [r7, #7]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d102      	bne.n	8007c8c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007c86:	2309      	movs	r3, #9
 8007c88:	617b      	str	r3, [r7, #20]
 8007c8a:	e001      	b.n	8007c90 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007c8c:	2309      	movs	r3, #9
 8007c8e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	68da      	ldr	r2, [r3, #12]
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	029b      	lsls	r3, r3, #10
 8007ca4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007ca8:	431a      	orrs	r2, r3
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007cae:	2300      	movs	r3, #0
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	371c      	adds	r7, #28
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr
 8007cbc:	00d8acbf 	.word	0x00d8acbf
 8007cc0:	00e4e1c0 	.word	0x00e4e1c0
 8007cc4:	00f42400 	.word	0x00f42400
 8007cc8:	01067380 	.word	0x01067380
 8007ccc:	011a499f 	.word	0x011a499f
 8007cd0:	01312cff 	.word	0x01312cff
 8007cd4:	014ca43f 	.word	0x014ca43f
 8007cd8:	016e3600 	.word	0x016e3600
 8007cdc:	01a6ab1f 	.word	0x01a6ab1f
 8007ce0:	01e84800 	.word	0x01e84800

08007ce4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b083      	sub	sp, #12
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	f043 0201 	orr.w	r2, r3, #1
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007cf8:	2300      	movs	r3, #0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	370c      	adds	r7, #12
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr

08007d06 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d06:	b480      	push	{r7}
 8007d08:	b083      	sub	sp, #12
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	f023 0201 	bic.w	r2, r3, #1
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d1a:	2300      	movs	r3, #0
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	370c      	adds	r7, #12
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	460b      	mov	r3, r1
 8007d32:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007d34:	2300      	movs	r3, #0
 8007d36:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007d44:	78fb      	ldrb	r3, [r7, #3]
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d115      	bne.n	8007d76 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007d56:	2001      	movs	r0, #1
 8007d58:	f7f9 fb4e 	bl	80013f8 <HAL_Delay>
      ms++;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	3301      	adds	r3, #1
 8007d60:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f001 f93f 	bl	8008fe6 <USB_GetMode>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d01e      	beq.n	8007dac <USB_SetCurrentMode+0x84>
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2b31      	cmp	r3, #49	; 0x31
 8007d72:	d9f0      	bls.n	8007d56 <USB_SetCurrentMode+0x2e>
 8007d74:	e01a      	b.n	8007dac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007d76:	78fb      	ldrb	r3, [r7, #3]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d115      	bne.n	8007da8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007d88:	2001      	movs	r0, #1
 8007d8a:	f7f9 fb35 	bl	80013f8 <HAL_Delay>
      ms++;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	3301      	adds	r3, #1
 8007d92:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f001 f926 	bl	8008fe6 <USB_GetMode>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d005      	beq.n	8007dac <USB_SetCurrentMode+0x84>
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2b31      	cmp	r3, #49	; 0x31
 8007da4:	d9f0      	bls.n	8007d88 <USB_SetCurrentMode+0x60>
 8007da6:	e001      	b.n	8007dac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	e005      	b.n	8007db8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2b32      	cmp	r3, #50	; 0x32
 8007db0:	d101      	bne.n	8007db6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	e000      	b.n	8007db8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3710      	adds	r7, #16
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007dc0:	b084      	sub	sp, #16
 8007dc2:	b580      	push	{r7, lr}
 8007dc4:	b086      	sub	sp, #24
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
 8007dca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007dce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007dda:	2300      	movs	r3, #0
 8007ddc:	613b      	str	r3, [r7, #16]
 8007dde:	e009      	b.n	8007df4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	3340      	adds	r3, #64	; 0x40
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	4413      	add	r3, r2
 8007dea:	2200      	movs	r2, #0
 8007dec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	3301      	adds	r3, #1
 8007df2:	613b      	str	r3, [r7, #16]
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	2b0e      	cmp	r3, #14
 8007df8:	d9f2      	bls.n	8007de0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007dfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d11c      	bne.n	8007e3a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	68fa      	ldr	r2, [r7, #12]
 8007e0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e0e:	f043 0302 	orr.w	r3, r3, #2
 8007e12:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e18:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	601a      	str	r2, [r3, #0]
 8007e38:	e005      	b.n	8007e46 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e3e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	2300      	movs	r3, #0
 8007e50:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e58:	4619      	mov	r1, r3
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e60:	461a      	mov	r2, r3
 8007e62:	680b      	ldr	r3, [r1, #0]
 8007e64:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d10c      	bne.n	8007e86 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d104      	bne.n	8007e7c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007e72:	2100      	movs	r1, #0
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 f965 	bl	8008144 <USB_SetDevSpeed>
 8007e7a:	e008      	b.n	8007e8e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007e7c:	2101      	movs	r1, #1
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 f960 	bl	8008144 <USB_SetDevSpeed>
 8007e84:	e003      	b.n	8007e8e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007e86:	2103      	movs	r1, #3
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 f95b 	bl	8008144 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007e8e:	2110      	movs	r1, #16
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 f8f3 	bl	800807c <USB_FlushTxFifo>
 8007e96:	4603      	mov	r3, r0
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d001      	beq.n	8007ea0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f000 f91f 	bl	80080e4 <USB_FlushRxFifo>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d001      	beq.n	8007eb0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007eac:	2301      	movs	r3, #1
 8007eae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	2300      	movs	r3, #0
 8007eba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ece:	461a      	mov	r2, r3
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	613b      	str	r3, [r7, #16]
 8007ed8:	e043      	b.n	8007f62 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	015a      	lsls	r2, r3, #5
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007eec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ef0:	d118      	bne.n	8007f24 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d10a      	bne.n	8007f0e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	015a      	lsls	r2, r3, #5
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	4413      	add	r3, r2
 8007f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f04:	461a      	mov	r2, r3
 8007f06:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007f0a:	6013      	str	r3, [r2, #0]
 8007f0c:	e013      	b.n	8007f36 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	015a      	lsls	r2, r3, #5
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	4413      	add	r3, r2
 8007f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007f20:	6013      	str	r3, [r2, #0]
 8007f22:	e008      	b.n	8007f36 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	015a      	lsls	r2, r3, #5
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	4413      	add	r3, r2
 8007f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f30:	461a      	mov	r2, r3
 8007f32:	2300      	movs	r3, #0
 8007f34:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	015a      	lsls	r2, r3, #5
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	4413      	add	r3, r2
 8007f3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f42:	461a      	mov	r2, r3
 8007f44:	2300      	movs	r3, #0
 8007f46:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	015a      	lsls	r2, r3, #5
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	4413      	add	r3, r2
 8007f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f54:	461a      	mov	r2, r3
 8007f56:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007f5a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	3301      	adds	r3, #1
 8007f60:	613b      	str	r3, [r7, #16]
 8007f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f64:	693a      	ldr	r2, [r7, #16]
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d3b7      	bcc.n	8007eda <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	613b      	str	r3, [r7, #16]
 8007f6e:	e043      	b.n	8007ff8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	015a      	lsls	r2, r3, #5
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	4413      	add	r3, r2
 8007f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f86:	d118      	bne.n	8007fba <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d10a      	bne.n	8007fa4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	015a      	lsls	r2, r3, #5
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	4413      	add	r3, r2
 8007f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007fa0:	6013      	str	r3, [r2, #0]
 8007fa2:	e013      	b.n	8007fcc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	015a      	lsls	r2, r3, #5
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	4413      	add	r3, r2
 8007fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007fb6:	6013      	str	r3, [r2, #0]
 8007fb8:	e008      	b.n	8007fcc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	015a      	lsls	r2, r3, #5
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	4413      	add	r3, r2
 8007fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	2300      	movs	r3, #0
 8007fca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	015a      	lsls	r2, r3, #5
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	4413      	add	r3, r2
 8007fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fd8:	461a      	mov	r2, r3
 8007fda:	2300      	movs	r3, #0
 8007fdc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	015a      	lsls	r2, r3, #5
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	4413      	add	r3, r2
 8007fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fea:	461a      	mov	r2, r3
 8007fec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007ff0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	3301      	adds	r3, #1
 8007ff6:	613b      	str	r3, [r7, #16]
 8007ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffa:	693a      	ldr	r2, [r7, #16]
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d3b7      	bcc.n	8007f70 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008006:	691b      	ldr	r3, [r3, #16]
 8008008:	68fa      	ldr	r2, [r7, #12]
 800800a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800800e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008012:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2200      	movs	r2, #0
 8008018:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008020:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008024:	2b00      	cmp	r3, #0
 8008026:	d105      	bne.n	8008034 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	699b      	ldr	r3, [r3, #24]
 800802c:	f043 0210 	orr.w	r2, r3, #16
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	699a      	ldr	r2, [r3, #24]
 8008038:	4b0e      	ldr	r3, [pc, #56]	; (8008074 <USB_DevInit+0x2b4>)
 800803a:	4313      	orrs	r3, r2
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008042:	2b00      	cmp	r3, #0
 8008044:	d005      	beq.n	8008052 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	699b      	ldr	r3, [r3, #24]
 800804a:	f043 0208 	orr.w	r2, r3, #8
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008054:	2b01      	cmp	r3, #1
 8008056:	d105      	bne.n	8008064 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	699a      	ldr	r2, [r3, #24]
 800805c:	4b06      	ldr	r3, [pc, #24]	; (8008078 <USB_DevInit+0x2b8>)
 800805e:	4313      	orrs	r3, r2
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008064:	7dfb      	ldrb	r3, [r7, #23]
}
 8008066:	4618      	mov	r0, r3
 8008068:	3718      	adds	r7, #24
 800806a:	46bd      	mov	sp, r7
 800806c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008070:	b004      	add	sp, #16
 8008072:	4770      	bx	lr
 8008074:	803c3800 	.word	0x803c3800
 8008078:	40000004 	.word	0x40000004

0800807c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800807c:	b480      	push	{r7}
 800807e:	b085      	sub	sp, #20
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008086:	2300      	movs	r3, #0
 8008088:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	3301      	adds	r3, #1
 800808e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	4a13      	ldr	r2, [pc, #76]	; (80080e0 <USB_FlushTxFifo+0x64>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d901      	bls.n	800809c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008098:	2303      	movs	r3, #3
 800809a:	e01b      	b.n	80080d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	691b      	ldr	r3, [r3, #16]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	daf2      	bge.n	800808a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80080a4:	2300      	movs	r3, #0
 80080a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	019b      	lsls	r3, r3, #6
 80080ac:	f043 0220 	orr.w	r2, r3, #32
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	3301      	adds	r3, #1
 80080b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	4a08      	ldr	r2, [pc, #32]	; (80080e0 <USB_FlushTxFifo+0x64>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d901      	bls.n	80080c6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80080c2:	2303      	movs	r3, #3
 80080c4:	e006      	b.n	80080d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	691b      	ldr	r3, [r3, #16]
 80080ca:	f003 0320 	and.w	r3, r3, #32
 80080ce:	2b20      	cmp	r3, #32
 80080d0:	d0f0      	beq.n	80080b4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80080d2:	2300      	movs	r3, #0
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3714      	adds	r7, #20
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr
 80080e0:	00030d40 	.word	0x00030d40

080080e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b085      	sub	sp, #20
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80080ec:	2300      	movs	r3, #0
 80080ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	3301      	adds	r3, #1
 80080f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	4a11      	ldr	r2, [pc, #68]	; (8008140 <USB_FlushRxFifo+0x5c>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d901      	bls.n	8008102 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80080fe:	2303      	movs	r3, #3
 8008100:	e018      	b.n	8008134 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	691b      	ldr	r3, [r3, #16]
 8008106:	2b00      	cmp	r3, #0
 8008108:	daf2      	bge.n	80080f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800810a:	2300      	movs	r3, #0
 800810c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2210      	movs	r2, #16
 8008112:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	3301      	adds	r3, #1
 8008118:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	4a08      	ldr	r2, [pc, #32]	; (8008140 <USB_FlushRxFifo+0x5c>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d901      	bls.n	8008126 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008122:	2303      	movs	r3, #3
 8008124:	e006      	b.n	8008134 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	f003 0310 	and.w	r3, r3, #16
 800812e:	2b10      	cmp	r3, #16
 8008130:	d0f0      	beq.n	8008114 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008132:	2300      	movs	r3, #0
}
 8008134:	4618      	mov	r0, r3
 8008136:	3714      	adds	r7, #20
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr
 8008140:	00030d40 	.word	0x00030d40

08008144 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008144:	b480      	push	{r7}
 8008146:	b085      	sub	sp, #20
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	460b      	mov	r3, r1
 800814e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	78fb      	ldrb	r3, [r7, #3]
 800815e:	68f9      	ldr	r1, [r7, #12]
 8008160:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008164:	4313      	orrs	r3, r2
 8008166:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008168:	2300      	movs	r3, #0
}
 800816a:	4618      	mov	r0, r3
 800816c:	3714      	adds	r7, #20
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr

08008176 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008176:	b480      	push	{r7}
 8008178:	b087      	sub	sp, #28
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	f003 0306 	and.w	r3, r3, #6
 800818e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d102      	bne.n	800819c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008196:	2300      	movs	r3, #0
 8008198:	75fb      	strb	r3, [r7, #23]
 800819a:	e00a      	b.n	80081b2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2b02      	cmp	r3, #2
 80081a0:	d002      	beq.n	80081a8 <USB_GetDevSpeed+0x32>
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2b06      	cmp	r3, #6
 80081a6:	d102      	bne.n	80081ae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80081a8:	2302      	movs	r3, #2
 80081aa:	75fb      	strb	r3, [r7, #23]
 80081ac:	e001      	b.n	80081b2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80081ae:	230f      	movs	r3, #15
 80081b0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80081b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	371c      	adds	r7, #28
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr

080081c0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b085      	sub	sp, #20
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	785b      	ldrb	r3, [r3, #1]
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d139      	bne.n	8008250 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081e2:	69da      	ldr	r2, [r3, #28]
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	f003 030f 	and.w	r3, r3, #15
 80081ec:	2101      	movs	r1, #1
 80081ee:	fa01 f303 	lsl.w	r3, r1, r3
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	68f9      	ldr	r1, [r7, #12]
 80081f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80081fa:	4313      	orrs	r3, r2
 80081fc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	015a      	lsls	r2, r3, #5
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	4413      	add	r3, r2
 8008206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008210:	2b00      	cmp	r3, #0
 8008212:	d153      	bne.n	80082bc <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	015a      	lsls	r2, r3, #5
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	4413      	add	r3, r2
 800821c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	791b      	ldrb	r3, [r3, #4]
 800822e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008230:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	059b      	lsls	r3, r3, #22
 8008236:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008238:	431a      	orrs	r2, r3
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	0159      	lsls	r1, r3, #5
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	440b      	add	r3, r1
 8008242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008246:	4619      	mov	r1, r3
 8008248:	4b20      	ldr	r3, [pc, #128]	; (80082cc <USB_ActivateEndpoint+0x10c>)
 800824a:	4313      	orrs	r3, r2
 800824c:	600b      	str	r3, [r1, #0]
 800824e:	e035      	b.n	80082bc <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008256:	69da      	ldr	r2, [r3, #28]
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	f003 030f 	and.w	r3, r3, #15
 8008260:	2101      	movs	r1, #1
 8008262:	fa01 f303 	lsl.w	r3, r1, r3
 8008266:	041b      	lsls	r3, r3, #16
 8008268:	68f9      	ldr	r1, [r7, #12]
 800826a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800826e:	4313      	orrs	r3, r2
 8008270:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	015a      	lsls	r2, r3, #5
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	4413      	add	r3, r2
 800827a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008284:	2b00      	cmp	r3, #0
 8008286:	d119      	bne.n	80082bc <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	015a      	lsls	r2, r3, #5
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	4413      	add	r3, r2
 8008290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008294:	681a      	ldr	r2, [r3, #0]
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	791b      	ldrb	r3, [r3, #4]
 80082a2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80082a4:	430b      	orrs	r3, r1
 80082a6:	431a      	orrs	r2, r3
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	0159      	lsls	r1, r3, #5
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	440b      	add	r3, r1
 80082b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082b4:	4619      	mov	r1, r3
 80082b6:	4b05      	ldr	r3, [pc, #20]	; (80082cc <USB_ActivateEndpoint+0x10c>)
 80082b8:	4313      	orrs	r3, r2
 80082ba:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80082bc:	2300      	movs	r3, #0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3714      	adds	r7, #20
 80082c2:	46bd      	mov	sp, r7
 80082c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c8:	4770      	bx	lr
 80082ca:	bf00      	nop
 80082cc:	10008000 	.word	0x10008000

080082d0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b085      	sub	sp, #20
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	785b      	ldrb	r3, [r3, #1]
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d161      	bne.n	80083b0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	015a      	lsls	r2, r3, #5
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	4413      	add	r3, r2
 80082f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80082fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008302:	d11f      	bne.n	8008344 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	015a      	lsls	r2, r3, #5
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	4413      	add	r3, r2
 800830c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	68ba      	ldr	r2, [r7, #8]
 8008314:	0151      	lsls	r1, r2, #5
 8008316:	68fa      	ldr	r2, [r7, #12]
 8008318:	440a      	add	r2, r1
 800831a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800831e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008322:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	015a      	lsls	r2, r3, #5
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	4413      	add	r3, r2
 800832c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	68ba      	ldr	r2, [r7, #8]
 8008334:	0151      	lsls	r1, r2, #5
 8008336:	68fa      	ldr	r2, [r7, #12]
 8008338:	440a      	add	r2, r1
 800833a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800833e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008342:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800834a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	f003 030f 	and.w	r3, r3, #15
 8008354:	2101      	movs	r1, #1
 8008356:	fa01 f303 	lsl.w	r3, r1, r3
 800835a:	b29b      	uxth	r3, r3
 800835c:	43db      	mvns	r3, r3
 800835e:	68f9      	ldr	r1, [r7, #12]
 8008360:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008364:	4013      	ands	r3, r2
 8008366:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800836e:	69da      	ldr	r2, [r3, #28]
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	f003 030f 	and.w	r3, r3, #15
 8008378:	2101      	movs	r1, #1
 800837a:	fa01 f303 	lsl.w	r3, r1, r3
 800837e:	b29b      	uxth	r3, r3
 8008380:	43db      	mvns	r3, r3
 8008382:	68f9      	ldr	r1, [r7, #12]
 8008384:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008388:	4013      	ands	r3, r2
 800838a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	015a      	lsls	r2, r3, #5
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	4413      	add	r3, r2
 8008394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	0159      	lsls	r1, r3, #5
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	440b      	add	r3, r1
 80083a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083a6:	4619      	mov	r1, r3
 80083a8:	4b35      	ldr	r3, [pc, #212]	; (8008480 <USB_DeactivateEndpoint+0x1b0>)
 80083aa:	4013      	ands	r3, r2
 80083ac:	600b      	str	r3, [r1, #0]
 80083ae:	e060      	b.n	8008472 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	015a      	lsls	r2, r3, #5
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	4413      	add	r3, r2
 80083b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083c6:	d11f      	bne.n	8008408 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	015a      	lsls	r2, r3, #5
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	4413      	add	r3, r2
 80083d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	68ba      	ldr	r2, [r7, #8]
 80083d8:	0151      	lsls	r1, r2, #5
 80083da:	68fa      	ldr	r2, [r7, #12]
 80083dc:	440a      	add	r2, r1
 80083de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80083e6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	015a      	lsls	r2, r3, #5
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	4413      	add	r3, r2
 80083f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	68ba      	ldr	r2, [r7, #8]
 80083f8:	0151      	lsls	r1, r2, #5
 80083fa:	68fa      	ldr	r2, [r7, #12]
 80083fc:	440a      	add	r2, r1
 80083fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008402:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008406:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800840e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	f003 030f 	and.w	r3, r3, #15
 8008418:	2101      	movs	r1, #1
 800841a:	fa01 f303 	lsl.w	r3, r1, r3
 800841e:	041b      	lsls	r3, r3, #16
 8008420:	43db      	mvns	r3, r3
 8008422:	68f9      	ldr	r1, [r7, #12]
 8008424:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008428:	4013      	ands	r3, r2
 800842a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008432:	69da      	ldr	r2, [r3, #28]
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	f003 030f 	and.w	r3, r3, #15
 800843c:	2101      	movs	r1, #1
 800843e:	fa01 f303 	lsl.w	r3, r1, r3
 8008442:	041b      	lsls	r3, r3, #16
 8008444:	43db      	mvns	r3, r3
 8008446:	68f9      	ldr	r1, [r7, #12]
 8008448:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800844c:	4013      	ands	r3, r2
 800844e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	015a      	lsls	r2, r3, #5
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	4413      	add	r3, r2
 8008458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	0159      	lsls	r1, r3, #5
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	440b      	add	r3, r1
 8008466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800846a:	4619      	mov	r1, r3
 800846c:	4b05      	ldr	r3, [pc, #20]	; (8008484 <USB_DeactivateEndpoint+0x1b4>)
 800846e:	4013      	ands	r3, r2
 8008470:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008472:	2300      	movs	r3, #0
}
 8008474:	4618      	mov	r0, r3
 8008476:	3714      	adds	r7, #20
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr
 8008480:	ec337800 	.word	0xec337800
 8008484:	eff37800 	.word	0xeff37800

08008488 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b08a      	sub	sp, #40	; 0x28
 800848c:	af02      	add	r7, sp, #8
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	60b9      	str	r1, [r7, #8]
 8008492:	4613      	mov	r3, r2
 8008494:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	785b      	ldrb	r3, [r3, #1]
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	f040 8181 	bne.w	80087ac <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	691b      	ldr	r3, [r3, #16]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d132      	bne.n	8008518 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80084b2:	69bb      	ldr	r3, [r7, #24]
 80084b4:	015a      	lsls	r2, r3, #5
 80084b6:	69fb      	ldr	r3, [r7, #28]
 80084b8:	4413      	add	r3, r2
 80084ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084be:	691a      	ldr	r2, [r3, #16]
 80084c0:	69bb      	ldr	r3, [r7, #24]
 80084c2:	0159      	lsls	r1, r3, #5
 80084c4:	69fb      	ldr	r3, [r7, #28]
 80084c6:	440b      	add	r3, r1
 80084c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084cc:	4619      	mov	r1, r3
 80084ce:	4ba5      	ldr	r3, [pc, #660]	; (8008764 <USB_EPStartXfer+0x2dc>)
 80084d0:	4013      	ands	r3, r2
 80084d2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	015a      	lsls	r2, r3, #5
 80084d8:	69fb      	ldr	r3, [r7, #28]
 80084da:	4413      	add	r3, r2
 80084dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	69ba      	ldr	r2, [r7, #24]
 80084e4:	0151      	lsls	r1, r2, #5
 80084e6:	69fa      	ldr	r2, [r7, #28]
 80084e8:	440a      	add	r2, r1
 80084ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80084f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80084f4:	69bb      	ldr	r3, [r7, #24]
 80084f6:	015a      	lsls	r2, r3, #5
 80084f8:	69fb      	ldr	r3, [r7, #28]
 80084fa:	4413      	add	r3, r2
 80084fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008500:	691a      	ldr	r2, [r3, #16]
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	0159      	lsls	r1, r3, #5
 8008506:	69fb      	ldr	r3, [r7, #28]
 8008508:	440b      	add	r3, r1
 800850a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800850e:	4619      	mov	r1, r3
 8008510:	4b95      	ldr	r3, [pc, #596]	; (8008768 <USB_EPStartXfer+0x2e0>)
 8008512:	4013      	ands	r3, r2
 8008514:	610b      	str	r3, [r1, #16]
 8008516:	e092      	b.n	800863e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008518:	69bb      	ldr	r3, [r7, #24]
 800851a:	015a      	lsls	r2, r3, #5
 800851c:	69fb      	ldr	r3, [r7, #28]
 800851e:	4413      	add	r3, r2
 8008520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008524:	691a      	ldr	r2, [r3, #16]
 8008526:	69bb      	ldr	r3, [r7, #24]
 8008528:	0159      	lsls	r1, r3, #5
 800852a:	69fb      	ldr	r3, [r7, #28]
 800852c:	440b      	add	r3, r1
 800852e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008532:	4619      	mov	r1, r3
 8008534:	4b8c      	ldr	r3, [pc, #560]	; (8008768 <USB_EPStartXfer+0x2e0>)
 8008536:	4013      	ands	r3, r2
 8008538:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800853a:	69bb      	ldr	r3, [r7, #24]
 800853c:	015a      	lsls	r2, r3, #5
 800853e:	69fb      	ldr	r3, [r7, #28]
 8008540:	4413      	add	r3, r2
 8008542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008546:	691a      	ldr	r2, [r3, #16]
 8008548:	69bb      	ldr	r3, [r7, #24]
 800854a:	0159      	lsls	r1, r3, #5
 800854c:	69fb      	ldr	r3, [r7, #28]
 800854e:	440b      	add	r3, r1
 8008550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008554:	4619      	mov	r1, r3
 8008556:	4b83      	ldr	r3, [pc, #524]	; (8008764 <USB_EPStartXfer+0x2dc>)
 8008558:	4013      	ands	r3, r2
 800855a:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800855c:	69bb      	ldr	r3, [r7, #24]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d11a      	bne.n	8008598 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	691a      	ldr	r2, [r3, #16]
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	429a      	cmp	r2, r3
 800856c:	d903      	bls.n	8008576 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	689a      	ldr	r2, [r3, #8]
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008576:	69bb      	ldr	r3, [r7, #24]
 8008578:	015a      	lsls	r2, r3, #5
 800857a:	69fb      	ldr	r3, [r7, #28]
 800857c:	4413      	add	r3, r2
 800857e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008582:	691b      	ldr	r3, [r3, #16]
 8008584:	69ba      	ldr	r2, [r7, #24]
 8008586:	0151      	lsls	r1, r2, #5
 8008588:	69fa      	ldr	r2, [r7, #28]
 800858a:	440a      	add	r2, r1
 800858c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008590:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008594:	6113      	str	r3, [r2, #16]
 8008596:	e01b      	b.n	80085d0 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008598:	69bb      	ldr	r3, [r7, #24]
 800859a:	015a      	lsls	r2, r3, #5
 800859c:	69fb      	ldr	r3, [r7, #28]
 800859e:	4413      	add	r3, r2
 80085a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085a4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	6919      	ldr	r1, [r3, #16]
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	689b      	ldr	r3, [r3, #8]
 80085ae:	440b      	add	r3, r1
 80085b0:	1e59      	subs	r1, r3, #1
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80085ba:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80085bc:	4b6b      	ldr	r3, [pc, #428]	; (800876c <USB_EPStartXfer+0x2e4>)
 80085be:	400b      	ands	r3, r1
 80085c0:	69b9      	ldr	r1, [r7, #24]
 80085c2:	0148      	lsls	r0, r1, #5
 80085c4:	69f9      	ldr	r1, [r7, #28]
 80085c6:	4401      	add	r1, r0
 80085c8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80085cc:	4313      	orrs	r3, r2
 80085ce:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80085d0:	69bb      	ldr	r3, [r7, #24]
 80085d2:	015a      	lsls	r2, r3, #5
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	4413      	add	r3, r2
 80085d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085dc:	691a      	ldr	r2, [r3, #16]
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	691b      	ldr	r3, [r3, #16]
 80085e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085e6:	69b9      	ldr	r1, [r7, #24]
 80085e8:	0148      	lsls	r0, r1, #5
 80085ea:	69f9      	ldr	r1, [r7, #28]
 80085ec:	4401      	add	r1, r0
 80085ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80085f2:	4313      	orrs	r3, r2
 80085f4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	791b      	ldrb	r3, [r3, #4]
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d11f      	bne.n	800863e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80085fe:	69bb      	ldr	r3, [r7, #24]
 8008600:	015a      	lsls	r2, r3, #5
 8008602:	69fb      	ldr	r3, [r7, #28]
 8008604:	4413      	add	r3, r2
 8008606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800860a:	691b      	ldr	r3, [r3, #16]
 800860c:	69ba      	ldr	r2, [r7, #24]
 800860e:	0151      	lsls	r1, r2, #5
 8008610:	69fa      	ldr	r2, [r7, #28]
 8008612:	440a      	add	r2, r1
 8008614:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008618:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800861c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800861e:	69bb      	ldr	r3, [r7, #24]
 8008620:	015a      	lsls	r2, r3, #5
 8008622:	69fb      	ldr	r3, [r7, #28]
 8008624:	4413      	add	r3, r2
 8008626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800862a:	691b      	ldr	r3, [r3, #16]
 800862c:	69ba      	ldr	r2, [r7, #24]
 800862e:	0151      	lsls	r1, r2, #5
 8008630:	69fa      	ldr	r2, [r7, #28]
 8008632:	440a      	add	r2, r1
 8008634:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008638:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800863c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800863e:	79fb      	ldrb	r3, [r7, #7]
 8008640:	2b01      	cmp	r3, #1
 8008642:	d14b      	bne.n	80086dc <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	69db      	ldr	r3, [r3, #28]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d009      	beq.n	8008660 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800864c:	69bb      	ldr	r3, [r7, #24]
 800864e:	015a      	lsls	r2, r3, #5
 8008650:	69fb      	ldr	r3, [r7, #28]
 8008652:	4413      	add	r3, r2
 8008654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008658:	461a      	mov	r2, r3
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	69db      	ldr	r3, [r3, #28]
 800865e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	791b      	ldrb	r3, [r3, #4]
 8008664:	2b01      	cmp	r3, #1
 8008666:	d128      	bne.n	80086ba <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008668:	69fb      	ldr	r3, [r7, #28]
 800866a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008674:	2b00      	cmp	r3, #0
 8008676:	d110      	bne.n	800869a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008678:	69bb      	ldr	r3, [r7, #24]
 800867a:	015a      	lsls	r2, r3, #5
 800867c:	69fb      	ldr	r3, [r7, #28]
 800867e:	4413      	add	r3, r2
 8008680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	69ba      	ldr	r2, [r7, #24]
 8008688:	0151      	lsls	r1, r2, #5
 800868a:	69fa      	ldr	r2, [r7, #28]
 800868c:	440a      	add	r2, r1
 800868e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008692:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008696:	6013      	str	r3, [r2, #0]
 8008698:	e00f      	b.n	80086ba <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800869a:	69bb      	ldr	r3, [r7, #24]
 800869c:	015a      	lsls	r2, r3, #5
 800869e:	69fb      	ldr	r3, [r7, #28]
 80086a0:	4413      	add	r3, r2
 80086a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	69ba      	ldr	r2, [r7, #24]
 80086aa:	0151      	lsls	r1, r2, #5
 80086ac:	69fa      	ldr	r2, [r7, #28]
 80086ae:	440a      	add	r2, r1
 80086b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086b8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80086ba:	69bb      	ldr	r3, [r7, #24]
 80086bc:	015a      	lsls	r2, r3, #5
 80086be:	69fb      	ldr	r3, [r7, #28]
 80086c0:	4413      	add	r3, r2
 80086c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	69ba      	ldr	r2, [r7, #24]
 80086ca:	0151      	lsls	r1, r2, #5
 80086cc:	69fa      	ldr	r2, [r7, #28]
 80086ce:	440a      	add	r2, r1
 80086d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80086d8:	6013      	str	r3, [r2, #0]
 80086da:	e16a      	b.n	80089b2 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80086dc:	69bb      	ldr	r3, [r7, #24]
 80086de:	015a      	lsls	r2, r3, #5
 80086e0:	69fb      	ldr	r3, [r7, #28]
 80086e2:	4413      	add	r3, r2
 80086e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	69ba      	ldr	r2, [r7, #24]
 80086ec:	0151      	lsls	r1, r2, #5
 80086ee:	69fa      	ldr	r2, [r7, #28]
 80086f0:	440a      	add	r2, r1
 80086f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80086fa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	791b      	ldrb	r3, [r3, #4]
 8008700:	2b01      	cmp	r3, #1
 8008702:	d015      	beq.n	8008730 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	691b      	ldr	r3, [r3, #16]
 8008708:	2b00      	cmp	r3, #0
 800870a:	f000 8152 	beq.w	80089b2 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800870e:	69fb      	ldr	r3, [r7, #28]
 8008710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008714:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	f003 030f 	and.w	r3, r3, #15
 800871e:	2101      	movs	r1, #1
 8008720:	fa01 f303 	lsl.w	r3, r1, r3
 8008724:	69f9      	ldr	r1, [r7, #28]
 8008726:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800872a:	4313      	orrs	r3, r2
 800872c:	634b      	str	r3, [r1, #52]	; 0x34
 800872e:	e140      	b.n	80089b2 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008736:	689b      	ldr	r3, [r3, #8]
 8008738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800873c:	2b00      	cmp	r3, #0
 800873e:	d117      	bne.n	8008770 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008740:	69bb      	ldr	r3, [r7, #24]
 8008742:	015a      	lsls	r2, r3, #5
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	4413      	add	r3, r2
 8008748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	69ba      	ldr	r2, [r7, #24]
 8008750:	0151      	lsls	r1, r2, #5
 8008752:	69fa      	ldr	r2, [r7, #28]
 8008754:	440a      	add	r2, r1
 8008756:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800875a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800875e:	6013      	str	r3, [r2, #0]
 8008760:	e016      	b.n	8008790 <USB_EPStartXfer+0x308>
 8008762:	bf00      	nop
 8008764:	e007ffff 	.word	0xe007ffff
 8008768:	fff80000 	.word	0xfff80000
 800876c:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008770:	69bb      	ldr	r3, [r7, #24]
 8008772:	015a      	lsls	r2, r3, #5
 8008774:	69fb      	ldr	r3, [r7, #28]
 8008776:	4413      	add	r3, r2
 8008778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	69ba      	ldr	r2, [r7, #24]
 8008780:	0151      	lsls	r1, r2, #5
 8008782:	69fa      	ldr	r2, [r7, #28]
 8008784:	440a      	add	r2, r1
 8008786:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800878a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800878e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	68d9      	ldr	r1, [r3, #12]
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	781a      	ldrb	r2, [r3, #0]
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	691b      	ldr	r3, [r3, #16]
 800879c:	b298      	uxth	r0, r3
 800879e:	79fb      	ldrb	r3, [r7, #7]
 80087a0:	9300      	str	r3, [sp, #0]
 80087a2:	4603      	mov	r3, r0
 80087a4:	68f8      	ldr	r0, [r7, #12]
 80087a6:	f000 f9b9 	bl	8008b1c <USB_WritePacket>
 80087aa:	e102      	b.n	80089b2 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80087ac:	69bb      	ldr	r3, [r7, #24]
 80087ae:	015a      	lsls	r2, r3, #5
 80087b0:	69fb      	ldr	r3, [r7, #28]
 80087b2:	4413      	add	r3, r2
 80087b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087b8:	691a      	ldr	r2, [r3, #16]
 80087ba:	69bb      	ldr	r3, [r7, #24]
 80087bc:	0159      	lsls	r1, r3, #5
 80087be:	69fb      	ldr	r3, [r7, #28]
 80087c0:	440b      	add	r3, r1
 80087c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087c6:	4619      	mov	r1, r3
 80087c8:	4b7c      	ldr	r3, [pc, #496]	; (80089bc <USB_EPStartXfer+0x534>)
 80087ca:	4013      	ands	r3, r2
 80087cc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80087ce:	69bb      	ldr	r3, [r7, #24]
 80087d0:	015a      	lsls	r2, r3, #5
 80087d2:	69fb      	ldr	r3, [r7, #28]
 80087d4:	4413      	add	r3, r2
 80087d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087da:	691a      	ldr	r2, [r3, #16]
 80087dc:	69bb      	ldr	r3, [r7, #24]
 80087de:	0159      	lsls	r1, r3, #5
 80087e0:	69fb      	ldr	r3, [r7, #28]
 80087e2:	440b      	add	r3, r1
 80087e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087e8:	4619      	mov	r1, r3
 80087ea:	4b75      	ldr	r3, [pc, #468]	; (80089c0 <USB_EPStartXfer+0x538>)
 80087ec:	4013      	ands	r3, r2
 80087ee:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80087f0:	69bb      	ldr	r3, [r7, #24]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d12f      	bne.n	8008856 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	691b      	ldr	r3, [r3, #16]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d003      	beq.n	8008806 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	689a      	ldr	r2, [r3, #8]
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	689a      	ldr	r2, [r3, #8]
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800880e:	69bb      	ldr	r3, [r7, #24]
 8008810:	015a      	lsls	r2, r3, #5
 8008812:	69fb      	ldr	r3, [r7, #28]
 8008814:	4413      	add	r3, r2
 8008816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800881a:	691a      	ldr	r2, [r3, #16]
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	6a1b      	ldr	r3, [r3, #32]
 8008820:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008824:	69b9      	ldr	r1, [r7, #24]
 8008826:	0148      	lsls	r0, r1, #5
 8008828:	69f9      	ldr	r1, [r7, #28]
 800882a:	4401      	add	r1, r0
 800882c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008830:	4313      	orrs	r3, r2
 8008832:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008834:	69bb      	ldr	r3, [r7, #24]
 8008836:	015a      	lsls	r2, r3, #5
 8008838:	69fb      	ldr	r3, [r7, #28]
 800883a:	4413      	add	r3, r2
 800883c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008840:	691b      	ldr	r3, [r3, #16]
 8008842:	69ba      	ldr	r2, [r7, #24]
 8008844:	0151      	lsls	r1, r2, #5
 8008846:	69fa      	ldr	r2, [r7, #28]
 8008848:	440a      	add	r2, r1
 800884a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800884e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008852:	6113      	str	r3, [r2, #16]
 8008854:	e05f      	b.n	8008916 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	691b      	ldr	r3, [r3, #16]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d123      	bne.n	80088a6 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800885e:	69bb      	ldr	r3, [r7, #24]
 8008860:	015a      	lsls	r2, r3, #5
 8008862:	69fb      	ldr	r3, [r7, #28]
 8008864:	4413      	add	r3, r2
 8008866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800886a:	691a      	ldr	r2, [r3, #16]
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	689b      	ldr	r3, [r3, #8]
 8008870:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008874:	69b9      	ldr	r1, [r7, #24]
 8008876:	0148      	lsls	r0, r1, #5
 8008878:	69f9      	ldr	r1, [r7, #28]
 800887a:	4401      	add	r1, r0
 800887c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008880:	4313      	orrs	r3, r2
 8008882:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008884:	69bb      	ldr	r3, [r7, #24]
 8008886:	015a      	lsls	r2, r3, #5
 8008888:	69fb      	ldr	r3, [r7, #28]
 800888a:	4413      	add	r3, r2
 800888c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008890:	691b      	ldr	r3, [r3, #16]
 8008892:	69ba      	ldr	r2, [r7, #24]
 8008894:	0151      	lsls	r1, r2, #5
 8008896:	69fa      	ldr	r2, [r7, #28]
 8008898:	440a      	add	r2, r1
 800889a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800889e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80088a2:	6113      	str	r3, [r2, #16]
 80088a4:	e037      	b.n	8008916 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	691a      	ldr	r2, [r3, #16]
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	689b      	ldr	r3, [r3, #8]
 80088ae:	4413      	add	r3, r2
 80088b0:	1e5a      	subs	r2, r3, #1
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80088ba:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	689b      	ldr	r3, [r3, #8]
 80088c0:	8afa      	ldrh	r2, [r7, #22]
 80088c2:	fb03 f202 	mul.w	r2, r3, r2
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80088ca:	69bb      	ldr	r3, [r7, #24]
 80088cc:	015a      	lsls	r2, r3, #5
 80088ce:	69fb      	ldr	r3, [r7, #28]
 80088d0:	4413      	add	r3, r2
 80088d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088d6:	691a      	ldr	r2, [r3, #16]
 80088d8:	8afb      	ldrh	r3, [r7, #22]
 80088da:	04d9      	lsls	r1, r3, #19
 80088dc:	4b39      	ldr	r3, [pc, #228]	; (80089c4 <USB_EPStartXfer+0x53c>)
 80088de:	400b      	ands	r3, r1
 80088e0:	69b9      	ldr	r1, [r7, #24]
 80088e2:	0148      	lsls	r0, r1, #5
 80088e4:	69f9      	ldr	r1, [r7, #28]
 80088e6:	4401      	add	r1, r0
 80088e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80088ec:	4313      	orrs	r3, r2
 80088ee:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80088f0:	69bb      	ldr	r3, [r7, #24]
 80088f2:	015a      	lsls	r2, r3, #5
 80088f4:	69fb      	ldr	r3, [r7, #28]
 80088f6:	4413      	add	r3, r2
 80088f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088fc:	691a      	ldr	r2, [r3, #16]
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	6a1b      	ldr	r3, [r3, #32]
 8008902:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008906:	69b9      	ldr	r1, [r7, #24]
 8008908:	0148      	lsls	r0, r1, #5
 800890a:	69f9      	ldr	r1, [r7, #28]
 800890c:	4401      	add	r1, r0
 800890e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008912:	4313      	orrs	r3, r2
 8008914:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008916:	79fb      	ldrb	r3, [r7, #7]
 8008918:	2b01      	cmp	r3, #1
 800891a:	d10d      	bne.n	8008938 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	68db      	ldr	r3, [r3, #12]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d009      	beq.n	8008938 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	68d9      	ldr	r1, [r3, #12]
 8008928:	69bb      	ldr	r3, [r7, #24]
 800892a:	015a      	lsls	r2, r3, #5
 800892c:	69fb      	ldr	r3, [r7, #28]
 800892e:	4413      	add	r3, r2
 8008930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008934:	460a      	mov	r2, r1
 8008936:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	791b      	ldrb	r3, [r3, #4]
 800893c:	2b01      	cmp	r3, #1
 800893e:	d128      	bne.n	8008992 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008940:	69fb      	ldr	r3, [r7, #28]
 8008942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800894c:	2b00      	cmp	r3, #0
 800894e:	d110      	bne.n	8008972 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008950:	69bb      	ldr	r3, [r7, #24]
 8008952:	015a      	lsls	r2, r3, #5
 8008954:	69fb      	ldr	r3, [r7, #28]
 8008956:	4413      	add	r3, r2
 8008958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	69ba      	ldr	r2, [r7, #24]
 8008960:	0151      	lsls	r1, r2, #5
 8008962:	69fa      	ldr	r2, [r7, #28]
 8008964:	440a      	add	r2, r1
 8008966:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800896a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800896e:	6013      	str	r3, [r2, #0]
 8008970:	e00f      	b.n	8008992 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008972:	69bb      	ldr	r3, [r7, #24]
 8008974:	015a      	lsls	r2, r3, #5
 8008976:	69fb      	ldr	r3, [r7, #28]
 8008978:	4413      	add	r3, r2
 800897a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	69ba      	ldr	r2, [r7, #24]
 8008982:	0151      	lsls	r1, r2, #5
 8008984:	69fa      	ldr	r2, [r7, #28]
 8008986:	440a      	add	r2, r1
 8008988:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800898c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008990:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008992:	69bb      	ldr	r3, [r7, #24]
 8008994:	015a      	lsls	r2, r3, #5
 8008996:	69fb      	ldr	r3, [r7, #28]
 8008998:	4413      	add	r3, r2
 800899a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	69ba      	ldr	r2, [r7, #24]
 80089a2:	0151      	lsls	r1, r2, #5
 80089a4:	69fa      	ldr	r2, [r7, #28]
 80089a6:	440a      	add	r2, r1
 80089a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80089b0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80089b2:	2300      	movs	r3, #0
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3720      	adds	r7, #32
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}
 80089bc:	fff80000 	.word	0xfff80000
 80089c0:	e007ffff 	.word	0xe007ffff
 80089c4:	1ff80000 	.word	0x1ff80000

080089c8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b087      	sub	sp, #28
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80089d2:	2300      	movs	r3, #0
 80089d4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80089d6:	2300      	movs	r3, #0
 80089d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	785b      	ldrb	r3, [r3, #1]
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	d14a      	bne.n	8008a7c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	781b      	ldrb	r3, [r3, #0]
 80089ea:	015a      	lsls	r2, r3, #5
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	4413      	add	r3, r2
 80089f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80089fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80089fe:	f040 8086 	bne.w	8008b0e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	015a      	lsls	r2, r3, #5
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	4413      	add	r3, r2
 8008a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	683a      	ldr	r2, [r7, #0]
 8008a14:	7812      	ldrb	r2, [r2, #0]
 8008a16:	0151      	lsls	r1, r2, #5
 8008a18:	693a      	ldr	r2, [r7, #16]
 8008a1a:	440a      	add	r2, r1
 8008a1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a20:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008a24:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	015a      	lsls	r2, r3, #5
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	4413      	add	r3, r2
 8008a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	683a      	ldr	r2, [r7, #0]
 8008a38:	7812      	ldrb	r2, [r2, #0]
 8008a3a:	0151      	lsls	r1, r2, #5
 8008a3c:	693a      	ldr	r2, [r7, #16]
 8008a3e:	440a      	add	r2, r1
 8008a40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a48:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f242 7210 	movw	r2, #10000	; 0x2710
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d902      	bls.n	8008a60 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	75fb      	strb	r3, [r7, #23]
          break;
 8008a5e:	e056      	b.n	8008b0e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	015a      	lsls	r2, r3, #5
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	4413      	add	r3, r2
 8008a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a78:	d0e7      	beq.n	8008a4a <USB_EPStopXfer+0x82>
 8008a7a:	e048      	b.n	8008b0e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	781b      	ldrb	r3, [r3, #0]
 8008a80:	015a      	lsls	r2, r3, #5
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	4413      	add	r3, r2
 8008a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a94:	d13b      	bne.n	8008b0e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	781b      	ldrb	r3, [r3, #0]
 8008a9a:	015a      	lsls	r2, r3, #5
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	4413      	add	r3, r2
 8008aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	683a      	ldr	r2, [r7, #0]
 8008aa8:	7812      	ldrb	r2, [r2, #0]
 8008aaa:	0151      	lsls	r1, r2, #5
 8008aac:	693a      	ldr	r2, [r7, #16]
 8008aae:	440a      	add	r2, r1
 8008ab0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ab4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008ab8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	015a      	lsls	r2, r3, #5
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	4413      	add	r3, r2
 8008ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	683a      	ldr	r2, [r7, #0]
 8008acc:	7812      	ldrb	r2, [r2, #0]
 8008ace:	0151      	lsls	r1, r2, #5
 8008ad0:	693a      	ldr	r2, [r7, #16]
 8008ad2:	440a      	add	r2, r1
 8008ad4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ad8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008adc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	f242 7210 	movw	r2, #10000	; 0x2710
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d902      	bls.n	8008af4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008aee:	2301      	movs	r3, #1
 8008af0:	75fb      	strb	r3, [r7, #23]
          break;
 8008af2:	e00c      	b.n	8008b0e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	781b      	ldrb	r3, [r3, #0]
 8008af8:	015a      	lsls	r2, r3, #5
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	4413      	add	r3, r2
 8008afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b0c:	d0e7      	beq.n	8008ade <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008b0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	371c      	adds	r7, #28
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr

08008b1c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b089      	sub	sp, #36	; 0x24
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	60f8      	str	r0, [r7, #12]
 8008b24:	60b9      	str	r1, [r7, #8]
 8008b26:	4611      	mov	r1, r2
 8008b28:	461a      	mov	r2, r3
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	71fb      	strb	r3, [r7, #7]
 8008b2e:	4613      	mov	r3, r2
 8008b30:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008b3a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d123      	bne.n	8008b8a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008b42:	88bb      	ldrh	r3, [r7, #4]
 8008b44:	3303      	adds	r3, #3
 8008b46:	089b      	lsrs	r3, r3, #2
 8008b48:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	61bb      	str	r3, [r7, #24]
 8008b4e:	e018      	b.n	8008b82 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008b50:	79fb      	ldrb	r3, [r7, #7]
 8008b52:	031a      	lsls	r2, r3, #12
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	4413      	add	r3, r2
 8008b58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	69fb      	ldr	r3, [r7, #28]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008b64:	69fb      	ldr	r3, [r7, #28]
 8008b66:	3301      	adds	r3, #1
 8008b68:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008b6a:	69fb      	ldr	r3, [r7, #28]
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008b70:	69fb      	ldr	r3, [r7, #28]
 8008b72:	3301      	adds	r3, #1
 8008b74:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008b76:	69fb      	ldr	r3, [r7, #28]
 8008b78:	3301      	adds	r3, #1
 8008b7a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008b7c:	69bb      	ldr	r3, [r7, #24]
 8008b7e:	3301      	adds	r3, #1
 8008b80:	61bb      	str	r3, [r7, #24]
 8008b82:	69ba      	ldr	r2, [r7, #24]
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d3e2      	bcc.n	8008b50 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008b8a:	2300      	movs	r3, #0
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3724      	adds	r7, #36	; 0x24
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr

08008b98 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b08b      	sub	sp, #44	; 0x2c
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008bae:	88fb      	ldrh	r3, [r7, #6]
 8008bb0:	089b      	lsrs	r3, r3, #2
 8008bb2:	b29b      	uxth	r3, r3
 8008bb4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008bb6:	88fb      	ldrh	r3, [r7, #6]
 8008bb8:	f003 0303 	and.w	r3, r3, #3
 8008bbc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	623b      	str	r3, [r7, #32]
 8008bc2:	e014      	b.n	8008bee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008bc4:	69bb      	ldr	r3, [r7, #24]
 8008bc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bce:	601a      	str	r2, [r3, #0]
    pDest++;
 8008bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd8:	3301      	adds	r3, #1
 8008bda:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bde:	3301      	adds	r3, #1
 8008be0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be4:	3301      	adds	r3, #1
 8008be6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008be8:	6a3b      	ldr	r3, [r7, #32]
 8008bea:	3301      	adds	r3, #1
 8008bec:	623b      	str	r3, [r7, #32]
 8008bee:	6a3a      	ldr	r2, [r7, #32]
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d3e6      	bcc.n	8008bc4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008bf6:	8bfb      	ldrh	r3, [r7, #30]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d01e      	beq.n	8008c3a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008c00:	69bb      	ldr	r3, [r7, #24]
 8008c02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c06:	461a      	mov	r2, r3
 8008c08:	f107 0310 	add.w	r3, r7, #16
 8008c0c:	6812      	ldr	r2, [r2, #0]
 8008c0e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008c10:	693a      	ldr	r2, [r7, #16]
 8008c12:	6a3b      	ldr	r3, [r7, #32]
 8008c14:	b2db      	uxtb	r3, r3
 8008c16:	00db      	lsls	r3, r3, #3
 8008c18:	fa22 f303 	lsr.w	r3, r2, r3
 8008c1c:	b2da      	uxtb	r2, r3
 8008c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c20:	701a      	strb	r2, [r3, #0]
      i++;
 8008c22:	6a3b      	ldr	r3, [r7, #32]
 8008c24:	3301      	adds	r3, #1
 8008c26:	623b      	str	r3, [r7, #32]
      pDest++;
 8008c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008c2e:	8bfb      	ldrh	r3, [r7, #30]
 8008c30:	3b01      	subs	r3, #1
 8008c32:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008c34:	8bfb      	ldrh	r3, [r7, #30]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d1ea      	bne.n	8008c10 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	372c      	adds	r7, #44	; 0x2c
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr

08008c48 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b085      	sub	sp, #20
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	781b      	ldrb	r3, [r3, #0]
 8008c5a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	785b      	ldrb	r3, [r3, #1]
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	d12c      	bne.n	8008cbe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	015a      	lsls	r2, r3, #5
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	4413      	add	r3, r2
 8008c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	db12      	blt.n	8008c9c <USB_EPSetStall+0x54>
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d00f      	beq.n	8008c9c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	015a      	lsls	r2, r3, #5
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	4413      	add	r3, r2
 8008c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	68ba      	ldr	r2, [r7, #8]
 8008c8c:	0151      	lsls	r1, r2, #5
 8008c8e:	68fa      	ldr	r2, [r7, #12]
 8008c90:	440a      	add	r2, r1
 8008c92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c96:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008c9a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	015a      	lsls	r2, r3, #5
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	4413      	add	r3, r2
 8008ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	68ba      	ldr	r2, [r7, #8]
 8008cac:	0151      	lsls	r1, r2, #5
 8008cae:	68fa      	ldr	r2, [r7, #12]
 8008cb0:	440a      	add	r2, r1
 8008cb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cb6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008cba:	6013      	str	r3, [r2, #0]
 8008cbc:	e02b      	b.n	8008d16 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	015a      	lsls	r2, r3, #5
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	4413      	add	r3, r2
 8008cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	db12      	blt.n	8008cf6 <USB_EPSetStall+0xae>
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d00f      	beq.n	8008cf6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	015a      	lsls	r2, r3, #5
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	4413      	add	r3, r2
 8008cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	68ba      	ldr	r2, [r7, #8]
 8008ce6:	0151      	lsls	r1, r2, #5
 8008ce8:	68fa      	ldr	r2, [r7, #12]
 8008cea:	440a      	add	r2, r1
 8008cec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cf0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008cf4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	015a      	lsls	r2, r3, #5
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	4413      	add	r3, r2
 8008cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	68ba      	ldr	r2, [r7, #8]
 8008d06:	0151      	lsls	r1, r2, #5
 8008d08:	68fa      	ldr	r2, [r7, #12]
 8008d0a:	440a      	add	r2, r1
 8008d0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008d14:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008d16:	2300      	movs	r3, #0
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3714      	adds	r7, #20
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr

08008d24 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b085      	sub	sp, #20
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	785b      	ldrb	r3, [r3, #1]
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d128      	bne.n	8008d92 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	015a      	lsls	r2, r3, #5
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	4413      	add	r3, r2
 8008d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	68ba      	ldr	r2, [r7, #8]
 8008d50:	0151      	lsls	r1, r2, #5
 8008d52:	68fa      	ldr	r2, [r7, #12]
 8008d54:	440a      	add	r2, r1
 8008d56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008d5e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	791b      	ldrb	r3, [r3, #4]
 8008d64:	2b03      	cmp	r3, #3
 8008d66:	d003      	beq.n	8008d70 <USB_EPClearStall+0x4c>
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	791b      	ldrb	r3, [r3, #4]
 8008d6c:	2b02      	cmp	r3, #2
 8008d6e:	d138      	bne.n	8008de2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	015a      	lsls	r2, r3, #5
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	4413      	add	r3, r2
 8008d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	68ba      	ldr	r2, [r7, #8]
 8008d80:	0151      	lsls	r1, r2, #5
 8008d82:	68fa      	ldr	r2, [r7, #12]
 8008d84:	440a      	add	r2, r1
 8008d86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d8e:	6013      	str	r3, [r2, #0]
 8008d90:	e027      	b.n	8008de2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	015a      	lsls	r2, r3, #5
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	4413      	add	r3, r2
 8008d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	68ba      	ldr	r2, [r7, #8]
 8008da2:	0151      	lsls	r1, r2, #5
 8008da4:	68fa      	ldr	r2, [r7, #12]
 8008da6:	440a      	add	r2, r1
 8008da8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008db0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	791b      	ldrb	r3, [r3, #4]
 8008db6:	2b03      	cmp	r3, #3
 8008db8:	d003      	beq.n	8008dc2 <USB_EPClearStall+0x9e>
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	791b      	ldrb	r3, [r3, #4]
 8008dbe:	2b02      	cmp	r3, #2
 8008dc0:	d10f      	bne.n	8008de2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	015a      	lsls	r2, r3, #5
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	4413      	add	r3, r2
 8008dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	68ba      	ldr	r2, [r7, #8]
 8008dd2:	0151      	lsls	r1, r2, #5
 8008dd4:	68fa      	ldr	r2, [r7, #12]
 8008dd6:	440a      	add	r2, r1
 8008dd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008de0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008de2:	2300      	movs	r3, #0
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3714      	adds	r7, #20
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr

08008df0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b085      	sub	sp, #20
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	460b      	mov	r3, r1
 8008dfa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	68fa      	ldr	r2, [r7, #12]
 8008e0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e0e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008e12:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	78fb      	ldrb	r3, [r7, #3]
 8008e1e:	011b      	lsls	r3, r3, #4
 8008e20:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008e24:	68f9      	ldr	r1, [r7, #12]
 8008e26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008e2e:	2300      	movs	r3, #0
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3714      	adds	r7, #20
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr

08008e3c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b085      	sub	sp, #20
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	68fa      	ldr	r2, [r7, #12]
 8008e52:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008e56:	f023 0303 	bic.w	r3, r3, #3
 8008e5a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	68fa      	ldr	r2, [r7, #12]
 8008e66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e6a:	f023 0302 	bic.w	r3, r3, #2
 8008e6e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008e70:	2300      	movs	r3, #0
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3714      	adds	r7, #20
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr

08008e7e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008e7e:	b480      	push	{r7}
 8008e80:	b085      	sub	sp, #20
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	68fa      	ldr	r2, [r7, #12]
 8008e94:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008e98:	f023 0303 	bic.w	r3, r3, #3
 8008e9c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	68fa      	ldr	r2, [r7, #12]
 8008ea8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008eac:	f043 0302 	orr.w	r3, r3, #2
 8008eb0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008eb2:	2300      	movs	r3, #0
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3714      	adds	r7, #20
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr

08008ec0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b085      	sub	sp, #20
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	695b      	ldr	r3, [r3, #20]
 8008ecc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	699b      	ldr	r3, [r3, #24]
 8008ed2:	68fa      	ldr	r2, [r7, #12]
 8008ed4:	4013      	ands	r3, r2
 8008ed6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3714      	adds	r7, #20
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr

08008ee6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ee6:	b480      	push	{r7}
 8008ee8:	b085      	sub	sp, #20
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ef8:	699b      	ldr	r3, [r3, #24]
 8008efa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f02:	69db      	ldr	r3, [r3, #28]
 8008f04:	68ba      	ldr	r2, [r7, #8]
 8008f06:	4013      	ands	r3, r2
 8008f08:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	0c1b      	lsrs	r3, r3, #16
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3714      	adds	r7, #20
 8008f12:	46bd      	mov	sp, r7
 8008f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f18:	4770      	bx	lr

08008f1a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f1a:	b480      	push	{r7}
 8008f1c:	b085      	sub	sp, #20
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f2c:	699b      	ldr	r3, [r3, #24]
 8008f2e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f36:	69db      	ldr	r3, [r3, #28]
 8008f38:	68ba      	ldr	r2, [r7, #8]
 8008f3a:	4013      	ands	r3, r2
 8008f3c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	b29b      	uxth	r3, r3
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3714      	adds	r7, #20
 8008f46:	46bd      	mov	sp, r7
 8008f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4c:	4770      	bx	lr

08008f4e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008f4e:	b480      	push	{r7}
 8008f50:	b085      	sub	sp, #20
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	6078      	str	r0, [r7, #4]
 8008f56:	460b      	mov	r3, r1
 8008f58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008f5e:	78fb      	ldrb	r3, [r7, #3]
 8008f60:	015a      	lsls	r2, r3, #5
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	4413      	add	r3, r2
 8008f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f74:	695b      	ldr	r3, [r3, #20]
 8008f76:	68ba      	ldr	r2, [r7, #8]
 8008f78:	4013      	ands	r3, r2
 8008f7a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008f7c:	68bb      	ldr	r3, [r7, #8]
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3714      	adds	r7, #20
 8008f82:	46bd      	mov	sp, r7
 8008f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f88:	4770      	bx	lr

08008f8a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008f8a:	b480      	push	{r7}
 8008f8c:	b087      	sub	sp, #28
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]
 8008f92:	460b      	mov	r3, r1
 8008f94:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fa0:	691b      	ldr	r3, [r3, #16]
 8008fa2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fac:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008fae:	78fb      	ldrb	r3, [r7, #3]
 8008fb0:	f003 030f 	and.w	r3, r3, #15
 8008fb4:	68fa      	ldr	r2, [r7, #12]
 8008fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8008fba:	01db      	lsls	r3, r3, #7
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	693a      	ldr	r2, [r7, #16]
 8008fc0:	4313      	orrs	r3, r2
 8008fc2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008fc4:	78fb      	ldrb	r3, [r7, #3]
 8008fc6:	015a      	lsls	r2, r3, #5
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	4413      	add	r3, r2
 8008fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fd0:	689b      	ldr	r3, [r3, #8]
 8008fd2:	693a      	ldr	r2, [r7, #16]
 8008fd4:	4013      	ands	r3, r2
 8008fd6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008fd8:	68bb      	ldr	r3, [r7, #8]
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	371c      	adds	r7, #28
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe4:	4770      	bx	lr

08008fe6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008fe6:	b480      	push	{r7}
 8008fe8:	b083      	sub	sp, #12
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	695b      	ldr	r3, [r3, #20]
 8008ff2:	f003 0301 	and.w	r3, r3, #1
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	370c      	adds	r7, #12
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr
	...

08009004 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009004:	b480      	push	{r7}
 8009006:	b085      	sub	sp, #20
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009016:	681a      	ldr	r2, [r3, #0]
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800901e:	4619      	mov	r1, r3
 8009020:	4b09      	ldr	r3, [pc, #36]	; (8009048 <USB_ActivateSetup+0x44>)
 8009022:	4013      	ands	r3, r2
 8009024:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	68fa      	ldr	r2, [r7, #12]
 8009030:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009038:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800903a:	2300      	movs	r3, #0
}
 800903c:	4618      	mov	r0, r3
 800903e:	3714      	adds	r7, #20
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr
 8009048:	fffff800 	.word	0xfffff800

0800904c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800904c:	b480      	push	{r7}
 800904e:	b087      	sub	sp, #28
 8009050:	af00      	add	r7, sp, #0
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	460b      	mov	r3, r1
 8009056:	607a      	str	r2, [r7, #4]
 8009058:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	333c      	adds	r3, #60	; 0x3c
 8009062:	3304      	adds	r3, #4
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	4a26      	ldr	r2, [pc, #152]	; (8009104 <USB_EP0_OutStart+0xb8>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d90a      	bls.n	8009086 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800907c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009080:	d101      	bne.n	8009086 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009082:	2300      	movs	r3, #0
 8009084:	e037      	b.n	80090f6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800908c:	461a      	mov	r2, r3
 800908e:	2300      	movs	r3, #0
 8009090:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009098:	691b      	ldr	r3, [r3, #16]
 800909a:	697a      	ldr	r2, [r7, #20]
 800909c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80090a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090ac:	691b      	ldr	r3, [r3, #16]
 80090ae:	697a      	ldr	r2, [r7, #20]
 80090b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090b4:	f043 0318 	orr.w	r3, r3, #24
 80090b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090c0:	691b      	ldr	r3, [r3, #16]
 80090c2:	697a      	ldr	r2, [r7, #20]
 80090c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090c8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80090cc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80090ce:	7afb      	ldrb	r3, [r7, #11]
 80090d0:	2b01      	cmp	r3, #1
 80090d2:	d10f      	bne.n	80090f4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090da:	461a      	mov	r2, r3
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	697a      	ldr	r2, [r7, #20]
 80090ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090ee:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80090f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80090f4:	2300      	movs	r3, #0
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	371c      	adds	r7, #28
 80090fa:	46bd      	mov	sp, r7
 80090fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009100:	4770      	bx	lr
 8009102:	bf00      	nop
 8009104:	4f54300a 	.word	0x4f54300a

08009108 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009108:	b480      	push	{r7}
 800910a:	b085      	sub	sp, #20
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009110:	2300      	movs	r3, #0
 8009112:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	3301      	adds	r3, #1
 8009118:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	4a13      	ldr	r2, [pc, #76]	; (800916c <USB_CoreReset+0x64>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d901      	bls.n	8009126 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009122:	2303      	movs	r3, #3
 8009124:	e01b      	b.n	800915e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	691b      	ldr	r3, [r3, #16]
 800912a:	2b00      	cmp	r3, #0
 800912c:	daf2      	bge.n	8009114 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800912e:	2300      	movs	r3, #0
 8009130:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	691b      	ldr	r3, [r3, #16]
 8009136:	f043 0201 	orr.w	r2, r3, #1
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	3301      	adds	r3, #1
 8009142:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	4a09      	ldr	r2, [pc, #36]	; (800916c <USB_CoreReset+0x64>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d901      	bls.n	8009150 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800914c:	2303      	movs	r3, #3
 800914e:	e006      	b.n	800915e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	691b      	ldr	r3, [r3, #16]
 8009154:	f003 0301 	and.w	r3, r3, #1
 8009158:	2b01      	cmp	r3, #1
 800915a:	d0f0      	beq.n	800913e <USB_CoreReset+0x36>

  return HAL_OK;
 800915c:	2300      	movs	r3, #0
}
 800915e:	4618      	mov	r0, r3
 8009160:	3714      	adds	r7, #20
 8009162:	46bd      	mov	sp, r7
 8009164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009168:	4770      	bx	lr
 800916a:	bf00      	nop
 800916c:	00030d40 	.word	0x00030d40

08009170 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	460b      	mov	r3, r1
 800917a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800917c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009180:	f002 fce4 	bl	800bb4c <USBD_static_malloc>
 8009184:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d109      	bne.n	80091a0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	32b0      	adds	r2, #176	; 0xb0
 8009196:	2100      	movs	r1, #0
 8009198:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800919c:	2302      	movs	r3, #2
 800919e:	e0d4      	b.n	800934a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80091a0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80091a4:	2100      	movs	r1, #0
 80091a6:	68f8      	ldr	r0, [r7, #12]
 80091a8:	f003 fb31 	bl	800c80e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	32b0      	adds	r2, #176	; 0xb0
 80091b6:	68f9      	ldr	r1, [r7, #12]
 80091b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	32b0      	adds	r2, #176	; 0xb0
 80091c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	7c1b      	ldrb	r3, [r3, #16]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d138      	bne.n	800924a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80091d8:	4b5e      	ldr	r3, [pc, #376]	; (8009354 <USBD_CDC_Init+0x1e4>)
 80091da:	7819      	ldrb	r1, [r3, #0]
 80091dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091e0:	2202      	movs	r2, #2
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f002 fb8f 	bl	800b906 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80091e8:	4b5a      	ldr	r3, [pc, #360]	; (8009354 <USBD_CDC_Init+0x1e4>)
 80091ea:	781b      	ldrb	r3, [r3, #0]
 80091ec:	f003 020f 	and.w	r2, r3, #15
 80091f0:	6879      	ldr	r1, [r7, #4]
 80091f2:	4613      	mov	r3, r2
 80091f4:	009b      	lsls	r3, r3, #2
 80091f6:	4413      	add	r3, r2
 80091f8:	009b      	lsls	r3, r3, #2
 80091fa:	440b      	add	r3, r1
 80091fc:	3324      	adds	r3, #36	; 0x24
 80091fe:	2201      	movs	r2, #1
 8009200:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009202:	4b55      	ldr	r3, [pc, #340]	; (8009358 <USBD_CDC_Init+0x1e8>)
 8009204:	7819      	ldrb	r1, [r3, #0]
 8009206:	f44f 7300 	mov.w	r3, #512	; 0x200
 800920a:	2202      	movs	r2, #2
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f002 fb7a 	bl	800b906 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009212:	4b51      	ldr	r3, [pc, #324]	; (8009358 <USBD_CDC_Init+0x1e8>)
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	f003 020f 	and.w	r2, r3, #15
 800921a:	6879      	ldr	r1, [r7, #4]
 800921c:	4613      	mov	r3, r2
 800921e:	009b      	lsls	r3, r3, #2
 8009220:	4413      	add	r3, r2
 8009222:	009b      	lsls	r3, r3, #2
 8009224:	440b      	add	r3, r1
 8009226:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800922a:	2201      	movs	r2, #1
 800922c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800922e:	4b4b      	ldr	r3, [pc, #300]	; (800935c <USBD_CDC_Init+0x1ec>)
 8009230:	781b      	ldrb	r3, [r3, #0]
 8009232:	f003 020f 	and.w	r2, r3, #15
 8009236:	6879      	ldr	r1, [r7, #4]
 8009238:	4613      	mov	r3, r2
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	4413      	add	r3, r2
 800923e:	009b      	lsls	r3, r3, #2
 8009240:	440b      	add	r3, r1
 8009242:	3326      	adds	r3, #38	; 0x26
 8009244:	2210      	movs	r2, #16
 8009246:	801a      	strh	r2, [r3, #0]
 8009248:	e035      	b.n	80092b6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800924a:	4b42      	ldr	r3, [pc, #264]	; (8009354 <USBD_CDC_Init+0x1e4>)
 800924c:	7819      	ldrb	r1, [r3, #0]
 800924e:	2340      	movs	r3, #64	; 0x40
 8009250:	2202      	movs	r2, #2
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f002 fb57 	bl	800b906 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009258:	4b3e      	ldr	r3, [pc, #248]	; (8009354 <USBD_CDC_Init+0x1e4>)
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	f003 020f 	and.w	r2, r3, #15
 8009260:	6879      	ldr	r1, [r7, #4]
 8009262:	4613      	mov	r3, r2
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	4413      	add	r3, r2
 8009268:	009b      	lsls	r3, r3, #2
 800926a:	440b      	add	r3, r1
 800926c:	3324      	adds	r3, #36	; 0x24
 800926e:	2201      	movs	r2, #1
 8009270:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009272:	4b39      	ldr	r3, [pc, #228]	; (8009358 <USBD_CDC_Init+0x1e8>)
 8009274:	7819      	ldrb	r1, [r3, #0]
 8009276:	2340      	movs	r3, #64	; 0x40
 8009278:	2202      	movs	r2, #2
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f002 fb43 	bl	800b906 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009280:	4b35      	ldr	r3, [pc, #212]	; (8009358 <USBD_CDC_Init+0x1e8>)
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	f003 020f 	and.w	r2, r3, #15
 8009288:	6879      	ldr	r1, [r7, #4]
 800928a:	4613      	mov	r3, r2
 800928c:	009b      	lsls	r3, r3, #2
 800928e:	4413      	add	r3, r2
 8009290:	009b      	lsls	r3, r3, #2
 8009292:	440b      	add	r3, r1
 8009294:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009298:	2201      	movs	r2, #1
 800929a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800929c:	4b2f      	ldr	r3, [pc, #188]	; (800935c <USBD_CDC_Init+0x1ec>)
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	f003 020f 	and.w	r2, r3, #15
 80092a4:	6879      	ldr	r1, [r7, #4]
 80092a6:	4613      	mov	r3, r2
 80092a8:	009b      	lsls	r3, r3, #2
 80092aa:	4413      	add	r3, r2
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	440b      	add	r3, r1
 80092b0:	3326      	adds	r3, #38	; 0x26
 80092b2:	2210      	movs	r2, #16
 80092b4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80092b6:	4b29      	ldr	r3, [pc, #164]	; (800935c <USBD_CDC_Init+0x1ec>)
 80092b8:	7819      	ldrb	r1, [r3, #0]
 80092ba:	2308      	movs	r3, #8
 80092bc:	2203      	movs	r2, #3
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f002 fb21 	bl	800b906 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80092c4:	4b25      	ldr	r3, [pc, #148]	; (800935c <USBD_CDC_Init+0x1ec>)
 80092c6:	781b      	ldrb	r3, [r3, #0]
 80092c8:	f003 020f 	and.w	r2, r3, #15
 80092cc:	6879      	ldr	r1, [r7, #4]
 80092ce:	4613      	mov	r3, r2
 80092d0:	009b      	lsls	r3, r3, #2
 80092d2:	4413      	add	r3, r2
 80092d4:	009b      	lsls	r3, r3, #2
 80092d6:	440b      	add	r3, r1
 80092d8:	3324      	adds	r3, #36	; 0x24
 80092da:	2201      	movs	r2, #1
 80092dc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	2200      	movs	r2, #0
 80092e2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	33b0      	adds	r3, #176	; 0xb0
 80092f0:	009b      	lsls	r3, r3, #2
 80092f2:	4413      	add	r3, r2
 80092f4:	685b      	ldr	r3, [r3, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2200      	movs	r2, #0
 80092fe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2200      	movs	r2, #0
 8009306:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009310:	2b00      	cmp	r3, #0
 8009312:	d101      	bne.n	8009318 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009314:	2302      	movs	r3, #2
 8009316:	e018      	b.n	800934a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	7c1b      	ldrb	r3, [r3, #16]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d10a      	bne.n	8009336 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009320:	4b0d      	ldr	r3, [pc, #52]	; (8009358 <USBD_CDC_Init+0x1e8>)
 8009322:	7819      	ldrb	r1, [r3, #0]
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800932a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f002 fbd8 	bl	800bae4 <USBD_LL_PrepareReceive>
 8009334:	e008      	b.n	8009348 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009336:	4b08      	ldr	r3, [pc, #32]	; (8009358 <USBD_CDC_Init+0x1e8>)
 8009338:	7819      	ldrb	r1, [r3, #0]
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009340:	2340      	movs	r3, #64	; 0x40
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f002 fbce 	bl	800bae4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009348:	2300      	movs	r3, #0
}
 800934a:	4618      	mov	r0, r3
 800934c:	3710      	adds	r7, #16
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}
 8009352:	bf00      	nop
 8009354:	240000d7 	.word	0x240000d7
 8009358:	240000d8 	.word	0x240000d8
 800935c:	240000d9 	.word	0x240000d9

08009360 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b082      	sub	sp, #8
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	460b      	mov	r3, r1
 800936a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800936c:	4b3a      	ldr	r3, [pc, #232]	; (8009458 <USBD_CDC_DeInit+0xf8>)
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	4619      	mov	r1, r3
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f002 faed 	bl	800b952 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009378:	4b37      	ldr	r3, [pc, #220]	; (8009458 <USBD_CDC_DeInit+0xf8>)
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	f003 020f 	and.w	r2, r3, #15
 8009380:	6879      	ldr	r1, [r7, #4]
 8009382:	4613      	mov	r3, r2
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	4413      	add	r3, r2
 8009388:	009b      	lsls	r3, r3, #2
 800938a:	440b      	add	r3, r1
 800938c:	3324      	adds	r3, #36	; 0x24
 800938e:	2200      	movs	r2, #0
 8009390:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009392:	4b32      	ldr	r3, [pc, #200]	; (800945c <USBD_CDC_DeInit+0xfc>)
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	4619      	mov	r1, r3
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f002 fada 	bl	800b952 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800939e:	4b2f      	ldr	r3, [pc, #188]	; (800945c <USBD_CDC_DeInit+0xfc>)
 80093a0:	781b      	ldrb	r3, [r3, #0]
 80093a2:	f003 020f 	and.w	r2, r3, #15
 80093a6:	6879      	ldr	r1, [r7, #4]
 80093a8:	4613      	mov	r3, r2
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	4413      	add	r3, r2
 80093ae:	009b      	lsls	r3, r3, #2
 80093b0:	440b      	add	r3, r1
 80093b2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80093b6:	2200      	movs	r2, #0
 80093b8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80093ba:	4b29      	ldr	r3, [pc, #164]	; (8009460 <USBD_CDC_DeInit+0x100>)
 80093bc:	781b      	ldrb	r3, [r3, #0]
 80093be:	4619      	mov	r1, r3
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f002 fac6 	bl	800b952 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80093c6:	4b26      	ldr	r3, [pc, #152]	; (8009460 <USBD_CDC_DeInit+0x100>)
 80093c8:	781b      	ldrb	r3, [r3, #0]
 80093ca:	f003 020f 	and.w	r2, r3, #15
 80093ce:	6879      	ldr	r1, [r7, #4]
 80093d0:	4613      	mov	r3, r2
 80093d2:	009b      	lsls	r3, r3, #2
 80093d4:	4413      	add	r3, r2
 80093d6:	009b      	lsls	r3, r3, #2
 80093d8:	440b      	add	r3, r1
 80093da:	3324      	adds	r3, #36	; 0x24
 80093dc:	2200      	movs	r2, #0
 80093de:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80093e0:	4b1f      	ldr	r3, [pc, #124]	; (8009460 <USBD_CDC_DeInit+0x100>)
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	f003 020f 	and.w	r2, r3, #15
 80093e8:	6879      	ldr	r1, [r7, #4]
 80093ea:	4613      	mov	r3, r2
 80093ec:	009b      	lsls	r3, r3, #2
 80093ee:	4413      	add	r3, r2
 80093f0:	009b      	lsls	r3, r3, #2
 80093f2:	440b      	add	r3, r1
 80093f4:	3326      	adds	r3, #38	; 0x26
 80093f6:	2200      	movs	r2, #0
 80093f8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	32b0      	adds	r2, #176	; 0xb0
 8009404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d01f      	beq.n	800944c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	33b0      	adds	r3, #176	; 0xb0
 8009416:	009b      	lsls	r3, r3, #2
 8009418:	4413      	add	r3, r2
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	32b0      	adds	r2, #176	; 0xb0
 800942a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800942e:	4618      	mov	r0, r3
 8009430:	f002 fb9a 	bl	800bb68 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	32b0      	adds	r2, #176	; 0xb0
 800943e:	2100      	movs	r1, #0
 8009440:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2200      	movs	r2, #0
 8009448:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800944c:	2300      	movs	r3, #0
}
 800944e:	4618      	mov	r0, r3
 8009450:	3708      	adds	r7, #8
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
 8009456:	bf00      	nop
 8009458:	240000d7 	.word	0x240000d7
 800945c:	240000d8 	.word	0x240000d8
 8009460:	240000d9 	.word	0x240000d9

08009464 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b086      	sub	sp, #24
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	32b0      	adds	r2, #176	; 0xb0
 8009478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800947c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800947e:	2300      	movs	r3, #0
 8009480:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009482:	2300      	movs	r3, #0
 8009484:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009486:	2300      	movs	r3, #0
 8009488:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d101      	bne.n	8009494 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009490:	2303      	movs	r3, #3
 8009492:	e0bf      	b.n	8009614 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	781b      	ldrb	r3, [r3, #0]
 8009498:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800949c:	2b00      	cmp	r3, #0
 800949e:	d050      	beq.n	8009542 <USBD_CDC_Setup+0xde>
 80094a0:	2b20      	cmp	r3, #32
 80094a2:	f040 80af 	bne.w	8009604 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	88db      	ldrh	r3, [r3, #6]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d03a      	beq.n	8009524 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	781b      	ldrb	r3, [r3, #0]
 80094b2:	b25b      	sxtb	r3, r3
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	da1b      	bge.n	80094f0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	33b0      	adds	r3, #176	; 0xb0
 80094c2:	009b      	lsls	r3, r3, #2
 80094c4:	4413      	add	r3, r2
 80094c6:	685b      	ldr	r3, [r3, #4]
 80094c8:	689b      	ldr	r3, [r3, #8]
 80094ca:	683a      	ldr	r2, [r7, #0]
 80094cc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80094ce:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80094d0:	683a      	ldr	r2, [r7, #0]
 80094d2:	88d2      	ldrh	r2, [r2, #6]
 80094d4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	88db      	ldrh	r3, [r3, #6]
 80094da:	2b07      	cmp	r3, #7
 80094dc:	bf28      	it	cs
 80094de:	2307      	movcs	r3, #7
 80094e0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	89fa      	ldrh	r2, [r7, #14]
 80094e6:	4619      	mov	r1, r3
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f001 fdb3 	bl	800b054 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80094ee:	e090      	b.n	8009612 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	785a      	ldrb	r2, [r3, #1]
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	88db      	ldrh	r3, [r3, #6]
 80094fe:	2b3f      	cmp	r3, #63	; 0x3f
 8009500:	d803      	bhi.n	800950a <USBD_CDC_Setup+0xa6>
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	88db      	ldrh	r3, [r3, #6]
 8009506:	b2da      	uxtb	r2, r3
 8009508:	e000      	b.n	800950c <USBD_CDC_Setup+0xa8>
 800950a:	2240      	movs	r2, #64	; 0x40
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009512:	6939      	ldr	r1, [r7, #16]
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800951a:	461a      	mov	r2, r3
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f001 fdc5 	bl	800b0ac <USBD_CtlPrepareRx>
      break;
 8009522:	e076      	b.n	8009612 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800952a:	687a      	ldr	r2, [r7, #4]
 800952c:	33b0      	adds	r3, #176	; 0xb0
 800952e:	009b      	lsls	r3, r3, #2
 8009530:	4413      	add	r3, r2
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	689b      	ldr	r3, [r3, #8]
 8009536:	683a      	ldr	r2, [r7, #0]
 8009538:	7850      	ldrb	r0, [r2, #1]
 800953a:	2200      	movs	r2, #0
 800953c:	6839      	ldr	r1, [r7, #0]
 800953e:	4798      	blx	r3
      break;
 8009540:	e067      	b.n	8009612 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	785b      	ldrb	r3, [r3, #1]
 8009546:	2b0b      	cmp	r3, #11
 8009548:	d851      	bhi.n	80095ee <USBD_CDC_Setup+0x18a>
 800954a:	a201      	add	r2, pc, #4	; (adr r2, 8009550 <USBD_CDC_Setup+0xec>)
 800954c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009550:	08009581 	.word	0x08009581
 8009554:	080095fd 	.word	0x080095fd
 8009558:	080095ef 	.word	0x080095ef
 800955c:	080095ef 	.word	0x080095ef
 8009560:	080095ef 	.word	0x080095ef
 8009564:	080095ef 	.word	0x080095ef
 8009568:	080095ef 	.word	0x080095ef
 800956c:	080095ef 	.word	0x080095ef
 8009570:	080095ef 	.word	0x080095ef
 8009574:	080095ef 	.word	0x080095ef
 8009578:	080095ab 	.word	0x080095ab
 800957c:	080095d5 	.word	0x080095d5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009586:	b2db      	uxtb	r3, r3
 8009588:	2b03      	cmp	r3, #3
 800958a:	d107      	bne.n	800959c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800958c:	f107 030a 	add.w	r3, r7, #10
 8009590:	2202      	movs	r2, #2
 8009592:	4619      	mov	r1, r3
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f001 fd5d 	bl	800b054 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800959a:	e032      	b.n	8009602 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800959c:	6839      	ldr	r1, [r7, #0]
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f001 fce7 	bl	800af72 <USBD_CtlError>
            ret = USBD_FAIL;
 80095a4:	2303      	movs	r3, #3
 80095a6:	75fb      	strb	r3, [r7, #23]
          break;
 80095a8:	e02b      	b.n	8009602 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095b0:	b2db      	uxtb	r3, r3
 80095b2:	2b03      	cmp	r3, #3
 80095b4:	d107      	bne.n	80095c6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80095b6:	f107 030d 	add.w	r3, r7, #13
 80095ba:	2201      	movs	r2, #1
 80095bc:	4619      	mov	r1, r3
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f001 fd48 	bl	800b054 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80095c4:	e01d      	b.n	8009602 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80095c6:	6839      	ldr	r1, [r7, #0]
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f001 fcd2 	bl	800af72 <USBD_CtlError>
            ret = USBD_FAIL;
 80095ce:	2303      	movs	r3, #3
 80095d0:	75fb      	strb	r3, [r7, #23]
          break;
 80095d2:	e016      	b.n	8009602 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	2b03      	cmp	r3, #3
 80095de:	d00f      	beq.n	8009600 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80095e0:	6839      	ldr	r1, [r7, #0]
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f001 fcc5 	bl	800af72 <USBD_CtlError>
            ret = USBD_FAIL;
 80095e8:	2303      	movs	r3, #3
 80095ea:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80095ec:	e008      	b.n	8009600 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80095ee:	6839      	ldr	r1, [r7, #0]
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f001 fcbe 	bl	800af72 <USBD_CtlError>
          ret = USBD_FAIL;
 80095f6:	2303      	movs	r3, #3
 80095f8:	75fb      	strb	r3, [r7, #23]
          break;
 80095fa:	e002      	b.n	8009602 <USBD_CDC_Setup+0x19e>
          break;
 80095fc:	bf00      	nop
 80095fe:	e008      	b.n	8009612 <USBD_CDC_Setup+0x1ae>
          break;
 8009600:	bf00      	nop
      }
      break;
 8009602:	e006      	b.n	8009612 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009604:	6839      	ldr	r1, [r7, #0]
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f001 fcb3 	bl	800af72 <USBD_CtlError>
      ret = USBD_FAIL;
 800960c:	2303      	movs	r3, #3
 800960e:	75fb      	strb	r3, [r7, #23]
      break;
 8009610:	bf00      	nop
  }

  return (uint8_t)ret;
 8009612:	7dfb      	ldrb	r3, [r7, #23]
}
 8009614:	4618      	mov	r0, r3
 8009616:	3718      	adds	r7, #24
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b084      	sub	sp, #16
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	460b      	mov	r3, r1
 8009626:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800962e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	32b0      	adds	r2, #176	; 0xb0
 800963a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d101      	bne.n	8009646 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009642:	2303      	movs	r3, #3
 8009644:	e065      	b.n	8009712 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	32b0      	adds	r2, #176	; 0xb0
 8009650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009654:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009656:	78fb      	ldrb	r3, [r7, #3]
 8009658:	f003 020f 	and.w	r2, r3, #15
 800965c:	6879      	ldr	r1, [r7, #4]
 800965e:	4613      	mov	r3, r2
 8009660:	009b      	lsls	r3, r3, #2
 8009662:	4413      	add	r3, r2
 8009664:	009b      	lsls	r3, r3, #2
 8009666:	440b      	add	r3, r1
 8009668:	3318      	adds	r3, #24
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d02f      	beq.n	80096d0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009670:	78fb      	ldrb	r3, [r7, #3]
 8009672:	f003 020f 	and.w	r2, r3, #15
 8009676:	6879      	ldr	r1, [r7, #4]
 8009678:	4613      	mov	r3, r2
 800967a:	009b      	lsls	r3, r3, #2
 800967c:	4413      	add	r3, r2
 800967e:	009b      	lsls	r3, r3, #2
 8009680:	440b      	add	r3, r1
 8009682:	3318      	adds	r3, #24
 8009684:	681a      	ldr	r2, [r3, #0]
 8009686:	78fb      	ldrb	r3, [r7, #3]
 8009688:	f003 010f 	and.w	r1, r3, #15
 800968c:	68f8      	ldr	r0, [r7, #12]
 800968e:	460b      	mov	r3, r1
 8009690:	00db      	lsls	r3, r3, #3
 8009692:	440b      	add	r3, r1
 8009694:	009b      	lsls	r3, r3, #2
 8009696:	4403      	add	r3, r0
 8009698:	3344      	adds	r3, #68	; 0x44
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	fbb2 f1f3 	udiv	r1, r2, r3
 80096a0:	fb01 f303 	mul.w	r3, r1, r3
 80096a4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d112      	bne.n	80096d0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80096aa:	78fb      	ldrb	r3, [r7, #3]
 80096ac:	f003 020f 	and.w	r2, r3, #15
 80096b0:	6879      	ldr	r1, [r7, #4]
 80096b2:	4613      	mov	r3, r2
 80096b4:	009b      	lsls	r3, r3, #2
 80096b6:	4413      	add	r3, r2
 80096b8:	009b      	lsls	r3, r3, #2
 80096ba:	440b      	add	r3, r1
 80096bc:	3318      	adds	r3, #24
 80096be:	2200      	movs	r2, #0
 80096c0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80096c2:	78f9      	ldrb	r1, [r7, #3]
 80096c4:	2300      	movs	r3, #0
 80096c6:	2200      	movs	r2, #0
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f002 f9ea 	bl	800baa2 <USBD_LL_Transmit>
 80096ce:	e01f      	b.n	8009710 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	2200      	movs	r2, #0
 80096d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80096de:	687a      	ldr	r2, [r7, #4]
 80096e0:	33b0      	adds	r3, #176	; 0xb0
 80096e2:	009b      	lsls	r3, r3, #2
 80096e4:	4413      	add	r3, r2
 80096e6:	685b      	ldr	r3, [r3, #4]
 80096e8:	691b      	ldr	r3, [r3, #16]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d010      	beq.n	8009710 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80096f4:	687a      	ldr	r2, [r7, #4]
 80096f6:	33b0      	adds	r3, #176	; 0xb0
 80096f8:	009b      	lsls	r3, r3, #2
 80096fa:	4413      	add	r3, r2
 80096fc:	685b      	ldr	r3, [r3, #4]
 80096fe:	691b      	ldr	r3, [r3, #16]
 8009700:	68ba      	ldr	r2, [r7, #8]
 8009702:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009706:	68ba      	ldr	r2, [r7, #8]
 8009708:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800970c:	78fa      	ldrb	r2, [r7, #3]
 800970e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009710:	2300      	movs	r3, #0
}
 8009712:	4618      	mov	r0, r3
 8009714:	3710      	adds	r7, #16
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}

0800971a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800971a:	b580      	push	{r7, lr}
 800971c:	b084      	sub	sp, #16
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]
 8009722:	460b      	mov	r3, r1
 8009724:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	32b0      	adds	r2, #176	; 0xb0
 8009730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009734:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	32b0      	adds	r2, #176	; 0xb0
 8009740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d101      	bne.n	800974c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009748:	2303      	movs	r3, #3
 800974a:	e01a      	b.n	8009782 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800974c:	78fb      	ldrb	r3, [r7, #3]
 800974e:	4619      	mov	r1, r3
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f002 f9e8 	bl	800bb26 <USBD_LL_GetRxDataSize>
 8009756:	4602      	mov	r2, r0
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	33b0      	adds	r3, #176	; 0xb0
 8009768:	009b      	lsls	r3, r3, #2
 800976a:	4413      	add	r3, r2
 800976c:	685b      	ldr	r3, [r3, #4]
 800976e:	68db      	ldr	r3, [r3, #12]
 8009770:	68fa      	ldr	r2, [r7, #12]
 8009772:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009776:	68fa      	ldr	r2, [r7, #12]
 8009778:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800977c:	4611      	mov	r1, r2
 800977e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009780:	2300      	movs	r3, #0
}
 8009782:	4618      	mov	r0, r3
 8009784:	3710      	adds	r7, #16
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}

0800978a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800978a:	b580      	push	{r7, lr}
 800978c:	b084      	sub	sp, #16
 800978e:	af00      	add	r7, sp, #0
 8009790:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	32b0      	adds	r2, #176	; 0xb0
 800979c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097a0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d101      	bne.n	80097ac <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80097a8:	2303      	movs	r3, #3
 80097aa:	e025      	b.n	80097f8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80097b2:	687a      	ldr	r2, [r7, #4]
 80097b4:	33b0      	adds	r3, #176	; 0xb0
 80097b6:	009b      	lsls	r3, r3, #2
 80097b8:	4413      	add	r3, r2
 80097ba:	685b      	ldr	r3, [r3, #4]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d01a      	beq.n	80097f6 <USBD_CDC_EP0_RxReady+0x6c>
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80097c6:	2bff      	cmp	r3, #255	; 0xff
 80097c8:	d015      	beq.n	80097f6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80097d0:	687a      	ldr	r2, [r7, #4]
 80097d2:	33b0      	adds	r3, #176	; 0xb0
 80097d4:	009b      	lsls	r3, r3, #2
 80097d6:	4413      	add	r3, r2
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	68fa      	ldr	r2, [r7, #12]
 80097de:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80097e2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80097e4:	68fa      	ldr	r2, [r7, #12]
 80097e6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80097ea:	b292      	uxth	r2, r2
 80097ec:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	22ff      	movs	r2, #255	; 0xff
 80097f2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80097f6:	2300      	movs	r3, #0
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3710      	adds	r7, #16
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b086      	sub	sp, #24
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009808:	2182      	movs	r1, #130	; 0x82
 800980a:	4818      	ldr	r0, [pc, #96]	; (800986c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800980c:	f000 fd4f 	bl	800a2ae <USBD_GetEpDesc>
 8009810:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009812:	2101      	movs	r1, #1
 8009814:	4815      	ldr	r0, [pc, #84]	; (800986c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009816:	f000 fd4a 	bl	800a2ae <USBD_GetEpDesc>
 800981a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800981c:	2181      	movs	r1, #129	; 0x81
 800981e:	4813      	ldr	r0, [pc, #76]	; (800986c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009820:	f000 fd45 	bl	800a2ae <USBD_GetEpDesc>
 8009824:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d002      	beq.n	8009832 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	2210      	movs	r2, #16
 8009830:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d006      	beq.n	8009846 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	2200      	movs	r2, #0
 800983c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009840:	711a      	strb	r2, [r3, #4]
 8009842:	2200      	movs	r2, #0
 8009844:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d006      	beq.n	800985a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2200      	movs	r2, #0
 8009850:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009854:	711a      	strb	r2, [r3, #4]
 8009856:	2200      	movs	r2, #0
 8009858:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2243      	movs	r2, #67	; 0x43
 800985e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009860:	4b02      	ldr	r3, [pc, #8]	; (800986c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009862:	4618      	mov	r0, r3
 8009864:	3718      	adds	r7, #24
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
 800986a:	bf00      	nop
 800986c:	24000094 	.word	0x24000094

08009870 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b086      	sub	sp, #24
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009878:	2182      	movs	r1, #130	; 0x82
 800987a:	4818      	ldr	r0, [pc, #96]	; (80098dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800987c:	f000 fd17 	bl	800a2ae <USBD_GetEpDesc>
 8009880:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009882:	2101      	movs	r1, #1
 8009884:	4815      	ldr	r0, [pc, #84]	; (80098dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009886:	f000 fd12 	bl	800a2ae <USBD_GetEpDesc>
 800988a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800988c:	2181      	movs	r1, #129	; 0x81
 800988e:	4813      	ldr	r0, [pc, #76]	; (80098dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009890:	f000 fd0d 	bl	800a2ae <USBD_GetEpDesc>
 8009894:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d002      	beq.n	80098a2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	2210      	movs	r2, #16
 80098a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d006      	beq.n	80098b6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	2200      	movs	r2, #0
 80098ac:	711a      	strb	r2, [r3, #4]
 80098ae:	2200      	movs	r2, #0
 80098b0:	f042 0202 	orr.w	r2, r2, #2
 80098b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d006      	beq.n	80098ca <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	2200      	movs	r2, #0
 80098c0:	711a      	strb	r2, [r3, #4]
 80098c2:	2200      	movs	r2, #0
 80098c4:	f042 0202 	orr.w	r2, r2, #2
 80098c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2243      	movs	r2, #67	; 0x43
 80098ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80098d0:	4b02      	ldr	r3, [pc, #8]	; (80098dc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3718      	adds	r7, #24
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}
 80098da:	bf00      	nop
 80098dc:	24000094 	.word	0x24000094

080098e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b086      	sub	sp, #24
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80098e8:	2182      	movs	r1, #130	; 0x82
 80098ea:	4818      	ldr	r0, [pc, #96]	; (800994c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80098ec:	f000 fcdf 	bl	800a2ae <USBD_GetEpDesc>
 80098f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80098f2:	2101      	movs	r1, #1
 80098f4:	4815      	ldr	r0, [pc, #84]	; (800994c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80098f6:	f000 fcda 	bl	800a2ae <USBD_GetEpDesc>
 80098fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80098fc:	2181      	movs	r1, #129	; 0x81
 80098fe:	4813      	ldr	r0, [pc, #76]	; (800994c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009900:	f000 fcd5 	bl	800a2ae <USBD_GetEpDesc>
 8009904:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d002      	beq.n	8009912 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	2210      	movs	r2, #16
 8009910:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d006      	beq.n	8009926 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	2200      	movs	r2, #0
 800991c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009920:	711a      	strb	r2, [r3, #4]
 8009922:	2200      	movs	r2, #0
 8009924:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d006      	beq.n	800993a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	2200      	movs	r2, #0
 8009930:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009934:	711a      	strb	r2, [r3, #4]
 8009936:	2200      	movs	r2, #0
 8009938:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2243      	movs	r2, #67	; 0x43
 800993e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009940:	4b02      	ldr	r3, [pc, #8]	; (800994c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009942:	4618      	mov	r0, r3
 8009944:	3718      	adds	r7, #24
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
 800994a:	bf00      	nop
 800994c:	24000094 	.word	0x24000094

08009950 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009950:	b480      	push	{r7}
 8009952:	b083      	sub	sp, #12
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	220a      	movs	r2, #10
 800995c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800995e:	4b03      	ldr	r3, [pc, #12]	; (800996c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009960:	4618      	mov	r0, r3
 8009962:	370c      	adds	r7, #12
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr
 800996c:	24000050 	.word	0x24000050

08009970 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009970:	b480      	push	{r7}
 8009972:	b083      	sub	sp, #12
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d101      	bne.n	8009984 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009980:	2303      	movs	r3, #3
 8009982:	e009      	b.n	8009998 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800998a:	687a      	ldr	r2, [r7, #4]
 800998c:	33b0      	adds	r3, #176	; 0xb0
 800998e:	009b      	lsls	r3, r3, #2
 8009990:	4413      	add	r3, r2
 8009992:	683a      	ldr	r2, [r7, #0]
 8009994:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009996:	2300      	movs	r3, #0
}
 8009998:	4618      	mov	r0, r3
 800999a:	370c      	adds	r7, #12
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr

080099a4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b087      	sub	sp, #28
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	60f8      	str	r0, [r7, #12]
 80099ac:	60b9      	str	r1, [r7, #8]
 80099ae:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	32b0      	adds	r2, #176	; 0xb0
 80099ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099be:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d101      	bne.n	80099ca <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80099c6:	2303      	movs	r3, #3
 80099c8:	e008      	b.n	80099dc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	68ba      	ldr	r2, [r7, #8]
 80099ce:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	687a      	ldr	r2, [r7, #4]
 80099d6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80099da:	2300      	movs	r3, #0
}
 80099dc:	4618      	mov	r0, r3
 80099de:	371c      	adds	r7, #28
 80099e0:	46bd      	mov	sp, r7
 80099e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e6:	4770      	bx	lr

080099e8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b085      	sub	sp, #20
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	32b0      	adds	r2, #176	; 0xb0
 80099fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a00:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d101      	bne.n	8009a0c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009a08:	2303      	movs	r3, #3
 8009a0a:	e004      	b.n	8009a16 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	683a      	ldr	r2, [r7, #0]
 8009a10:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009a14:	2300      	movs	r3, #0
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3714      	adds	r7, #20
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a20:	4770      	bx	lr
	...

08009a24 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b084      	sub	sp, #16
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	32b0      	adds	r2, #176	; 0xb0
 8009a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a3a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d101      	bne.n	8009a4a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009a46:	2303      	movs	r3, #3
 8009a48:	e025      	b.n	8009a96 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d11f      	bne.n	8009a94 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	2201      	movs	r2, #1
 8009a58:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009a5c:	4b10      	ldr	r3, [pc, #64]	; (8009aa0 <USBD_CDC_TransmitPacket+0x7c>)
 8009a5e:	781b      	ldrb	r3, [r3, #0]
 8009a60:	f003 020f 	and.w	r2, r3, #15
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	4613      	mov	r3, r2
 8009a6e:	009b      	lsls	r3, r3, #2
 8009a70:	4413      	add	r3, r2
 8009a72:	009b      	lsls	r3, r3, #2
 8009a74:	4403      	add	r3, r0
 8009a76:	3318      	adds	r3, #24
 8009a78:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009a7a:	4b09      	ldr	r3, [pc, #36]	; (8009aa0 <USBD_CDC_TransmitPacket+0x7c>)
 8009a7c:	7819      	ldrb	r1, [r3, #0]
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f002 f809 	bl	800baa2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009a90:	2300      	movs	r3, #0
 8009a92:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3710      	adds	r7, #16
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
 8009a9e:	bf00      	nop
 8009aa0:	240000d7 	.word	0x240000d7

08009aa4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b084      	sub	sp, #16
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	32b0      	adds	r2, #176	; 0xb0
 8009ab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009aba:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	32b0      	adds	r2, #176	; 0xb0
 8009ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d101      	bne.n	8009ad2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009ace:	2303      	movs	r3, #3
 8009ad0:	e018      	b.n	8009b04 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	7c1b      	ldrb	r3, [r3, #16]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d10a      	bne.n	8009af0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009ada:	4b0c      	ldr	r3, [pc, #48]	; (8009b0c <USBD_CDC_ReceivePacket+0x68>)
 8009adc:	7819      	ldrb	r1, [r3, #0]
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009ae4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f001 fffb 	bl	800bae4 <USBD_LL_PrepareReceive>
 8009aee:	e008      	b.n	8009b02 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009af0:	4b06      	ldr	r3, [pc, #24]	; (8009b0c <USBD_CDC_ReceivePacket+0x68>)
 8009af2:	7819      	ldrb	r1, [r3, #0]
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009afa:	2340      	movs	r3, #64	; 0x40
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f001 fff1 	bl	800bae4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009b02:	2300      	movs	r3, #0
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3710      	adds	r7, #16
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}
 8009b0c:	240000d8 	.word	0x240000d8

08009b10 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b086      	sub	sp, #24
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	60f8      	str	r0, [r7, #12]
 8009b18:	60b9      	str	r1, [r7, #8]
 8009b1a:	4613      	mov	r3, r2
 8009b1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d101      	bne.n	8009b28 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009b24:	2303      	movs	r3, #3
 8009b26:	e01f      	b.n	8009b68 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	2200      	movs	r2, #0
 8009b34:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d003      	beq.n	8009b4e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	68ba      	ldr	r2, [r7, #8]
 8009b4a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	2201      	movs	r2, #1
 8009b52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	79fa      	ldrb	r2, [r7, #7]
 8009b5a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009b5c:	68f8      	ldr	r0, [r7, #12]
 8009b5e:	f001 fe67 	bl	800b830 <USBD_LL_Init>
 8009b62:	4603      	mov	r3, r0
 8009b64:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009b66:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3718      	adds	r7, #24
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}

08009b70 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b084      	sub	sp, #16
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
 8009b78:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d101      	bne.n	8009b88 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009b84:	2303      	movs	r3, #3
 8009b86:	e025      	b.n	8009bd4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	683a      	ldr	r2, [r7, #0]
 8009b8c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	32ae      	adds	r2, #174	; 0xae
 8009b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d00f      	beq.n	8009bc4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	32ae      	adds	r2, #174	; 0xae
 8009bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bb4:	f107 020e 	add.w	r2, r7, #14
 8009bb8:	4610      	mov	r0, r2
 8009bba:	4798      	blx	r3
 8009bbc:	4602      	mov	r2, r0
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009bca:	1c5a      	adds	r2, r3, #1
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009bd2:	2300      	movs	r3, #0
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3710      	adds	r7, #16
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}

08009bdc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b082      	sub	sp, #8
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f001 fe73 	bl	800b8d0 <USBD_LL_Start>
 8009bea:	4603      	mov	r3, r0
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3708      	adds	r7, #8
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b083      	sub	sp, #12
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009bfc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	370c      	adds	r7, #12
 8009c02:	46bd      	mov	sp, r7
 8009c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c08:	4770      	bx	lr

08009c0a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c0a:	b580      	push	{r7, lr}
 8009c0c:	b084      	sub	sp, #16
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	6078      	str	r0, [r7, #4]
 8009c12:	460b      	mov	r3, r1
 8009c14:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c16:	2300      	movs	r3, #0
 8009c18:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d009      	beq.n	8009c38 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	78fa      	ldrb	r2, [r7, #3]
 8009c2e:	4611      	mov	r1, r2
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	4798      	blx	r3
 8009c34:	4603      	mov	r3, r0
 8009c36:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3710      	adds	r7, #16
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}

08009c42 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c42:	b580      	push	{r7, lr}
 8009c44:	b084      	sub	sp, #16
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
 8009c4a:	460b      	mov	r3, r1
 8009c4c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c58:	685b      	ldr	r3, [r3, #4]
 8009c5a:	78fa      	ldrb	r2, [r7, #3]
 8009c5c:	4611      	mov	r1, r2
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	4798      	blx	r3
 8009c62:	4603      	mov	r3, r0
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d001      	beq.n	8009c6c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009c68:	2303      	movs	r3, #3
 8009c6a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3710      	adds	r7, #16
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}

08009c76 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009c76:	b580      	push	{r7, lr}
 8009c78:	b084      	sub	sp, #16
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	6078      	str	r0, [r7, #4]
 8009c7e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009c86:	6839      	ldr	r1, [r7, #0]
 8009c88:	4618      	mov	r0, r3
 8009c8a:	f001 f938 	bl	800aefe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2201      	movs	r2, #1
 8009c92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009c9c:	461a      	mov	r2, r3
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009caa:	f003 031f 	and.w	r3, r3, #31
 8009cae:	2b02      	cmp	r3, #2
 8009cb0:	d01a      	beq.n	8009ce8 <USBD_LL_SetupStage+0x72>
 8009cb2:	2b02      	cmp	r3, #2
 8009cb4:	d822      	bhi.n	8009cfc <USBD_LL_SetupStage+0x86>
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d002      	beq.n	8009cc0 <USBD_LL_SetupStage+0x4a>
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d00a      	beq.n	8009cd4 <USBD_LL_SetupStage+0x5e>
 8009cbe:	e01d      	b.n	8009cfc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009cc6:	4619      	mov	r1, r3
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f000 fb65 	bl	800a398 <USBD_StdDevReq>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	73fb      	strb	r3, [r7, #15]
      break;
 8009cd2:	e020      	b.n	8009d16 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009cda:	4619      	mov	r1, r3
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 fbcd 	bl	800a47c <USBD_StdItfReq>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	73fb      	strb	r3, [r7, #15]
      break;
 8009ce6:	e016      	b.n	8009d16 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009cee:	4619      	mov	r1, r3
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f000 fc2f 	bl	800a554 <USBD_StdEPReq>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	73fb      	strb	r3, [r7, #15]
      break;
 8009cfa:	e00c      	b.n	8009d16 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009d02:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009d06:	b2db      	uxtb	r3, r3
 8009d08:	4619      	mov	r1, r3
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f001 fe40 	bl	800b990 <USBD_LL_StallEP>
 8009d10:	4603      	mov	r3, r0
 8009d12:	73fb      	strb	r3, [r7, #15]
      break;
 8009d14:	bf00      	nop
  }

  return ret;
 8009d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3710      	adds	r7, #16
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}

08009d20 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b086      	sub	sp, #24
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	60f8      	str	r0, [r7, #12]
 8009d28:	460b      	mov	r3, r1
 8009d2a:	607a      	str	r2, [r7, #4]
 8009d2c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009d32:	7afb      	ldrb	r3, [r7, #11]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d16e      	bne.n	8009e16 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009d3e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009d46:	2b03      	cmp	r3, #3
 8009d48:	f040 8098 	bne.w	8009e7c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	689a      	ldr	r2, [r3, #8]
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	68db      	ldr	r3, [r3, #12]
 8009d54:	429a      	cmp	r2, r3
 8009d56:	d913      	bls.n	8009d80 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	689a      	ldr	r2, [r3, #8]
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	68db      	ldr	r3, [r3, #12]
 8009d60:	1ad2      	subs	r2, r2, r3
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009d66:	693b      	ldr	r3, [r7, #16]
 8009d68:	68da      	ldr	r2, [r3, #12]
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	689b      	ldr	r3, [r3, #8]
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	bf28      	it	cs
 8009d72:	4613      	movcs	r3, r2
 8009d74:	461a      	mov	r2, r3
 8009d76:	6879      	ldr	r1, [r7, #4]
 8009d78:	68f8      	ldr	r0, [r7, #12]
 8009d7a:	f001 f9b4 	bl	800b0e6 <USBD_CtlContinueRx>
 8009d7e:	e07d      	b.n	8009e7c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009d86:	f003 031f 	and.w	r3, r3, #31
 8009d8a:	2b02      	cmp	r3, #2
 8009d8c:	d014      	beq.n	8009db8 <USBD_LL_DataOutStage+0x98>
 8009d8e:	2b02      	cmp	r3, #2
 8009d90:	d81d      	bhi.n	8009dce <USBD_LL_DataOutStage+0xae>
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d002      	beq.n	8009d9c <USBD_LL_DataOutStage+0x7c>
 8009d96:	2b01      	cmp	r3, #1
 8009d98:	d003      	beq.n	8009da2 <USBD_LL_DataOutStage+0x82>
 8009d9a:	e018      	b.n	8009dce <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	75bb      	strb	r3, [r7, #22]
            break;
 8009da0:	e018      	b.n	8009dd4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009da8:	b2db      	uxtb	r3, r3
 8009daa:	4619      	mov	r1, r3
 8009dac:	68f8      	ldr	r0, [r7, #12]
 8009dae:	f000 fa64 	bl	800a27a <USBD_CoreFindIF>
 8009db2:	4603      	mov	r3, r0
 8009db4:	75bb      	strb	r3, [r7, #22]
            break;
 8009db6:	e00d      	b.n	8009dd4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009dbe:	b2db      	uxtb	r3, r3
 8009dc0:	4619      	mov	r1, r3
 8009dc2:	68f8      	ldr	r0, [r7, #12]
 8009dc4:	f000 fa66 	bl	800a294 <USBD_CoreFindEP>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	75bb      	strb	r3, [r7, #22]
            break;
 8009dcc:	e002      	b.n	8009dd4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	75bb      	strb	r3, [r7, #22]
            break;
 8009dd2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009dd4:	7dbb      	ldrb	r3, [r7, #22]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d119      	bne.n	8009e0e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009de0:	b2db      	uxtb	r3, r3
 8009de2:	2b03      	cmp	r3, #3
 8009de4:	d113      	bne.n	8009e0e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009de6:	7dba      	ldrb	r2, [r7, #22]
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	32ae      	adds	r2, #174	; 0xae
 8009dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009df0:	691b      	ldr	r3, [r3, #16]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d00b      	beq.n	8009e0e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009df6:	7dba      	ldrb	r2, [r7, #22]
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009dfe:	7dba      	ldrb	r2, [r7, #22]
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	32ae      	adds	r2, #174	; 0xae
 8009e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e08:	691b      	ldr	r3, [r3, #16]
 8009e0a:	68f8      	ldr	r0, [r7, #12]
 8009e0c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009e0e:	68f8      	ldr	r0, [r7, #12]
 8009e10:	f001 f97a 	bl	800b108 <USBD_CtlSendStatus>
 8009e14:	e032      	b.n	8009e7c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009e16:	7afb      	ldrb	r3, [r7, #11]
 8009e18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e1c:	b2db      	uxtb	r3, r3
 8009e1e:	4619      	mov	r1, r3
 8009e20:	68f8      	ldr	r0, [r7, #12]
 8009e22:	f000 fa37 	bl	800a294 <USBD_CoreFindEP>
 8009e26:	4603      	mov	r3, r0
 8009e28:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009e2a:	7dbb      	ldrb	r3, [r7, #22]
 8009e2c:	2bff      	cmp	r3, #255	; 0xff
 8009e2e:	d025      	beq.n	8009e7c <USBD_LL_DataOutStage+0x15c>
 8009e30:	7dbb      	ldrb	r3, [r7, #22]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d122      	bne.n	8009e7c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e3c:	b2db      	uxtb	r3, r3
 8009e3e:	2b03      	cmp	r3, #3
 8009e40:	d117      	bne.n	8009e72 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009e42:	7dba      	ldrb	r2, [r7, #22]
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	32ae      	adds	r2, #174	; 0xae
 8009e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e4c:	699b      	ldr	r3, [r3, #24]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d00f      	beq.n	8009e72 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009e52:	7dba      	ldrb	r2, [r7, #22]
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009e5a:	7dba      	ldrb	r2, [r7, #22]
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	32ae      	adds	r2, #174	; 0xae
 8009e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e64:	699b      	ldr	r3, [r3, #24]
 8009e66:	7afa      	ldrb	r2, [r7, #11]
 8009e68:	4611      	mov	r1, r2
 8009e6a:	68f8      	ldr	r0, [r7, #12]
 8009e6c:	4798      	blx	r3
 8009e6e:	4603      	mov	r3, r0
 8009e70:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009e72:	7dfb      	ldrb	r3, [r7, #23]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d001      	beq.n	8009e7c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009e78:	7dfb      	ldrb	r3, [r7, #23]
 8009e7a:	e000      	b.n	8009e7e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009e7c:	2300      	movs	r3, #0
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3718      	adds	r7, #24
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}

08009e86 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009e86:	b580      	push	{r7, lr}
 8009e88:	b086      	sub	sp, #24
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	60f8      	str	r0, [r7, #12]
 8009e8e:	460b      	mov	r3, r1
 8009e90:	607a      	str	r2, [r7, #4]
 8009e92:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009e94:	7afb      	ldrb	r3, [r7, #11]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d16f      	bne.n	8009f7a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	3314      	adds	r3, #20
 8009e9e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009ea6:	2b02      	cmp	r3, #2
 8009ea8:	d15a      	bne.n	8009f60 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	689a      	ldr	r2, [r3, #8]
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	68db      	ldr	r3, [r3, #12]
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	d914      	bls.n	8009ee0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	689a      	ldr	r2, [r3, #8]
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	68db      	ldr	r3, [r3, #12]
 8009ebe:	1ad2      	subs	r2, r2, r3
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	689b      	ldr	r3, [r3, #8]
 8009ec8:	461a      	mov	r2, r3
 8009eca:	6879      	ldr	r1, [r7, #4]
 8009ecc:	68f8      	ldr	r0, [r7, #12]
 8009ece:	f001 f8dc 	bl	800b08a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	2100      	movs	r1, #0
 8009ed8:	68f8      	ldr	r0, [r7, #12]
 8009eda:	f001 fe03 	bl	800bae4 <USBD_LL_PrepareReceive>
 8009ede:	e03f      	b.n	8009f60 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	68da      	ldr	r2, [r3, #12]
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	689b      	ldr	r3, [r3, #8]
 8009ee8:	429a      	cmp	r2, r3
 8009eea:	d11c      	bne.n	8009f26 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	685a      	ldr	r2, [r3, #4]
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d316      	bcc.n	8009f26 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	685a      	ldr	r2, [r3, #4]
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d20f      	bcs.n	8009f26 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009f06:	2200      	movs	r2, #0
 8009f08:	2100      	movs	r1, #0
 8009f0a:	68f8      	ldr	r0, [r7, #12]
 8009f0c:	f001 f8bd 	bl	800b08a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	2200      	movs	r2, #0
 8009f14:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f18:	2300      	movs	r3, #0
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	2100      	movs	r1, #0
 8009f1e:	68f8      	ldr	r0, [r7, #12]
 8009f20:	f001 fde0 	bl	800bae4 <USBD_LL_PrepareReceive>
 8009f24:	e01c      	b.n	8009f60 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f2c:	b2db      	uxtb	r3, r3
 8009f2e:	2b03      	cmp	r3, #3
 8009f30:	d10f      	bne.n	8009f52 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f38:	68db      	ldr	r3, [r3, #12]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d009      	beq.n	8009f52 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	2200      	movs	r2, #0
 8009f42:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f4c:	68db      	ldr	r3, [r3, #12]
 8009f4e:	68f8      	ldr	r0, [r7, #12]
 8009f50:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009f52:	2180      	movs	r1, #128	; 0x80
 8009f54:	68f8      	ldr	r0, [r7, #12]
 8009f56:	f001 fd1b 	bl	800b990 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009f5a:	68f8      	ldr	r0, [r7, #12]
 8009f5c:	f001 f8e7 	bl	800b12e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d03a      	beq.n	8009fe0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009f6a:	68f8      	ldr	r0, [r7, #12]
 8009f6c:	f7ff fe42 	bl	8009bf4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	2200      	movs	r2, #0
 8009f74:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009f78:	e032      	b.n	8009fe0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009f7a:	7afb      	ldrb	r3, [r7, #11]
 8009f7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009f80:	b2db      	uxtb	r3, r3
 8009f82:	4619      	mov	r1, r3
 8009f84:	68f8      	ldr	r0, [r7, #12]
 8009f86:	f000 f985 	bl	800a294 <USBD_CoreFindEP>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009f8e:	7dfb      	ldrb	r3, [r7, #23]
 8009f90:	2bff      	cmp	r3, #255	; 0xff
 8009f92:	d025      	beq.n	8009fe0 <USBD_LL_DataInStage+0x15a>
 8009f94:	7dfb      	ldrb	r3, [r7, #23]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d122      	bne.n	8009fe0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fa0:	b2db      	uxtb	r3, r3
 8009fa2:	2b03      	cmp	r3, #3
 8009fa4:	d11c      	bne.n	8009fe0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009fa6:	7dfa      	ldrb	r2, [r7, #23]
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	32ae      	adds	r2, #174	; 0xae
 8009fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fb0:	695b      	ldr	r3, [r3, #20]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d014      	beq.n	8009fe0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009fb6:	7dfa      	ldrb	r2, [r7, #23]
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009fbe:	7dfa      	ldrb	r2, [r7, #23]
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	32ae      	adds	r2, #174	; 0xae
 8009fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fc8:	695b      	ldr	r3, [r3, #20]
 8009fca:	7afa      	ldrb	r2, [r7, #11]
 8009fcc:	4611      	mov	r1, r2
 8009fce:	68f8      	ldr	r0, [r7, #12]
 8009fd0:	4798      	blx	r3
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009fd6:	7dbb      	ldrb	r3, [r7, #22]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d001      	beq.n	8009fe0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009fdc:	7dbb      	ldrb	r3, [r7, #22]
 8009fde:	e000      	b.n	8009fe2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009fe0:	2300      	movs	r3, #0
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3718      	adds	r7, #24
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}

08009fea <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009fea:	b580      	push	{r7, lr}
 8009fec:	b084      	sub	sp, #16
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2200      	movs	r2, #0
 800a002:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2200      	movs	r2, #0
 800a00a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2200      	movs	r2, #0
 800a010:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2200      	movs	r2, #0
 800a018:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a022:	2b00      	cmp	r3, #0
 800a024:	d014      	beq.n	800a050 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a02c:	685b      	ldr	r3, [r3, #4]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d00e      	beq.n	800a050 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a038:	685b      	ldr	r3, [r3, #4]
 800a03a:	687a      	ldr	r2, [r7, #4]
 800a03c:	6852      	ldr	r2, [r2, #4]
 800a03e:	b2d2      	uxtb	r2, r2
 800a040:	4611      	mov	r1, r2
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	4798      	blx	r3
 800a046:	4603      	mov	r3, r0
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d001      	beq.n	800a050 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a04c:	2303      	movs	r3, #3
 800a04e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a050:	2340      	movs	r3, #64	; 0x40
 800a052:	2200      	movs	r2, #0
 800a054:	2100      	movs	r1, #0
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f001 fc55 	bl	800b906 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2201      	movs	r2, #1
 800a060:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2240      	movs	r2, #64	; 0x40
 800a068:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a06c:	2340      	movs	r3, #64	; 0x40
 800a06e:	2200      	movs	r2, #0
 800a070:	2180      	movs	r1, #128	; 0x80
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f001 fc47 	bl	800b906 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2201      	movs	r2, #1
 800a07c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2240      	movs	r2, #64	; 0x40
 800a082:	621a      	str	r2, [r3, #32]

  return ret;
 800a084:	7bfb      	ldrb	r3, [r7, #15]
}
 800a086:	4618      	mov	r0, r3
 800a088:	3710      	adds	r7, #16
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}

0800a08e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a08e:	b480      	push	{r7}
 800a090:	b083      	sub	sp, #12
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
 800a096:	460b      	mov	r3, r1
 800a098:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	78fa      	ldrb	r2, [r7, #3]
 800a09e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a0a0:	2300      	movs	r3, #0
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	370c      	adds	r7, #12
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ac:	4770      	bx	lr

0800a0ae <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a0ae:	b480      	push	{r7}
 800a0b0:	b083      	sub	sp, #12
 800a0b2:	af00      	add	r7, sp, #0
 800a0b4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0bc:	b2db      	uxtb	r3, r3
 800a0be:	2b04      	cmp	r3, #4
 800a0c0:	d006      	beq.n	800a0d0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0c8:	b2da      	uxtb	r2, r3
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2204      	movs	r2, #4
 800a0d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a0d8:	2300      	movs	r3, #0
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	370c      	adds	r7, #12
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e4:	4770      	bx	lr

0800a0e6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a0e6:	b480      	push	{r7}
 800a0e8:	b083      	sub	sp, #12
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0f4:	b2db      	uxtb	r3, r3
 800a0f6:	2b04      	cmp	r3, #4
 800a0f8:	d106      	bne.n	800a108 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a100:	b2da      	uxtb	r2, r3
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a108:	2300      	movs	r3, #0
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	370c      	adds	r7, #12
 800a10e:	46bd      	mov	sp, r7
 800a110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a114:	4770      	bx	lr

0800a116 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a116:	b580      	push	{r7, lr}
 800a118:	b082      	sub	sp, #8
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a124:	b2db      	uxtb	r3, r3
 800a126:	2b03      	cmp	r3, #3
 800a128:	d110      	bne.n	800a14c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a130:	2b00      	cmp	r3, #0
 800a132:	d00b      	beq.n	800a14c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a13a:	69db      	ldr	r3, [r3, #28]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d005      	beq.n	800a14c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a146:	69db      	ldr	r3, [r3, #28]
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a14c:	2300      	movs	r3, #0
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3708      	adds	r7, #8
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}

0800a156 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a156:	b580      	push	{r7, lr}
 800a158:	b082      	sub	sp, #8
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	6078      	str	r0, [r7, #4]
 800a15e:	460b      	mov	r3, r1
 800a160:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	32ae      	adds	r2, #174	; 0xae
 800a16c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d101      	bne.n	800a178 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a174:	2303      	movs	r3, #3
 800a176:	e01c      	b.n	800a1b2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a17e:	b2db      	uxtb	r3, r3
 800a180:	2b03      	cmp	r3, #3
 800a182:	d115      	bne.n	800a1b0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	32ae      	adds	r2, #174	; 0xae
 800a18e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a192:	6a1b      	ldr	r3, [r3, #32]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d00b      	beq.n	800a1b0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	32ae      	adds	r2, #174	; 0xae
 800a1a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1a6:	6a1b      	ldr	r3, [r3, #32]
 800a1a8:	78fa      	ldrb	r2, [r7, #3]
 800a1aa:	4611      	mov	r1, r2
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a1b0:	2300      	movs	r3, #0
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3708      	adds	r7, #8
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}

0800a1ba <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a1ba:	b580      	push	{r7, lr}
 800a1bc:	b082      	sub	sp, #8
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	6078      	str	r0, [r7, #4]
 800a1c2:	460b      	mov	r3, r1
 800a1c4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	32ae      	adds	r2, #174	; 0xae
 800a1d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d101      	bne.n	800a1dc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a1d8:	2303      	movs	r3, #3
 800a1da:	e01c      	b.n	800a216 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1e2:	b2db      	uxtb	r3, r3
 800a1e4:	2b03      	cmp	r3, #3
 800a1e6:	d115      	bne.n	800a214 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	32ae      	adds	r2, #174	; 0xae
 800a1f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d00b      	beq.n	800a214 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	32ae      	adds	r2, #174	; 0xae
 800a206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a20a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a20c:	78fa      	ldrb	r2, [r7, #3]
 800a20e:	4611      	mov	r1, r2
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a214:	2300      	movs	r3, #0
}
 800a216:	4618      	mov	r0, r3
 800a218:	3708      	adds	r7, #8
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}

0800a21e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a21e:	b480      	push	{r7}
 800a220:	b083      	sub	sp, #12
 800a222:	af00      	add	r7, sp, #0
 800a224:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a226:	2300      	movs	r3, #0
}
 800a228:	4618      	mov	r0, r3
 800a22a:	370c      	adds	r7, #12
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr

0800a234 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b084      	sub	sp, #16
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a23c:	2300      	movs	r3, #0
 800a23e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2201      	movs	r2, #1
 800a244:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d00e      	beq.n	800a270 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a258:	685b      	ldr	r3, [r3, #4]
 800a25a:	687a      	ldr	r2, [r7, #4]
 800a25c:	6852      	ldr	r2, [r2, #4]
 800a25e:	b2d2      	uxtb	r2, r2
 800a260:	4611      	mov	r1, r2
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	4798      	blx	r3
 800a266:	4603      	mov	r3, r0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d001      	beq.n	800a270 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a26c:	2303      	movs	r3, #3
 800a26e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a270:	7bfb      	ldrb	r3, [r7, #15]
}
 800a272:	4618      	mov	r0, r3
 800a274:	3710      	adds	r7, #16
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}

0800a27a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a27a:	b480      	push	{r7}
 800a27c:	b083      	sub	sp, #12
 800a27e:	af00      	add	r7, sp, #0
 800a280:	6078      	str	r0, [r7, #4]
 800a282:	460b      	mov	r3, r1
 800a284:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a286:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a288:	4618      	mov	r0, r3
 800a28a:	370c      	adds	r7, #12
 800a28c:	46bd      	mov	sp, r7
 800a28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a292:	4770      	bx	lr

0800a294 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a294:	b480      	push	{r7}
 800a296:	b083      	sub	sp, #12
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
 800a29c:	460b      	mov	r3, r1
 800a29e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a2a0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	370c      	adds	r7, #12
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ac:	4770      	bx	lr

0800a2ae <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a2ae:	b580      	push	{r7, lr}
 800a2b0:	b086      	sub	sp, #24
 800a2b2:	af00      	add	r7, sp, #0
 800a2b4:	6078      	str	r0, [r7, #4]
 800a2b6:	460b      	mov	r3, r1
 800a2b8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	885b      	ldrh	r3, [r3, #2]
 800a2ca:	b29a      	uxth	r2, r3
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	781b      	ldrb	r3, [r3, #0]
 800a2d0:	b29b      	uxth	r3, r3
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	d920      	bls.n	800a318 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	781b      	ldrb	r3, [r3, #0]
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a2de:	e013      	b.n	800a308 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a2e0:	f107 030a 	add.w	r3, r7, #10
 800a2e4:	4619      	mov	r1, r3
 800a2e6:	6978      	ldr	r0, [r7, #20]
 800a2e8:	f000 f81b 	bl	800a322 <USBD_GetNextDesc>
 800a2ec:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	785b      	ldrb	r3, [r3, #1]
 800a2f2:	2b05      	cmp	r3, #5
 800a2f4:	d108      	bne.n	800a308 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	789b      	ldrb	r3, [r3, #2]
 800a2fe:	78fa      	ldrb	r2, [r7, #3]
 800a300:	429a      	cmp	r2, r3
 800a302:	d008      	beq.n	800a316 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a304:	2300      	movs	r3, #0
 800a306:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	885b      	ldrh	r3, [r3, #2]
 800a30c:	b29a      	uxth	r2, r3
 800a30e:	897b      	ldrh	r3, [r7, #10]
 800a310:	429a      	cmp	r2, r3
 800a312:	d8e5      	bhi.n	800a2e0 <USBD_GetEpDesc+0x32>
 800a314:	e000      	b.n	800a318 <USBD_GetEpDesc+0x6a>
          break;
 800a316:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a318:	693b      	ldr	r3, [r7, #16]
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3718      	adds	r7, #24
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}

0800a322 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a322:	b480      	push	{r7}
 800a324:	b085      	sub	sp, #20
 800a326:	af00      	add	r7, sp, #0
 800a328:	6078      	str	r0, [r7, #4]
 800a32a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	881a      	ldrh	r2, [r3, #0]
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	781b      	ldrb	r3, [r3, #0]
 800a338:	b29b      	uxth	r3, r3
 800a33a:	4413      	add	r3, r2
 800a33c:	b29a      	uxth	r2, r3
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	781b      	ldrb	r3, [r3, #0]
 800a346:	461a      	mov	r2, r3
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	4413      	add	r3, r2
 800a34c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a34e:	68fb      	ldr	r3, [r7, #12]
}
 800a350:	4618      	mov	r0, r3
 800a352:	3714      	adds	r7, #20
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr

0800a35c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b087      	sub	sp, #28
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	781b      	ldrb	r3, [r3, #0]
 800a36c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	3301      	adds	r3, #1
 800a372:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a374:	697b      	ldr	r3, [r7, #20]
 800a376:	781b      	ldrb	r3, [r3, #0]
 800a378:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a37a:	8a3b      	ldrh	r3, [r7, #16]
 800a37c:	021b      	lsls	r3, r3, #8
 800a37e:	b21a      	sxth	r2, r3
 800a380:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a384:	4313      	orrs	r3, r2
 800a386:	b21b      	sxth	r3, r3
 800a388:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a38a:	89fb      	ldrh	r3, [r7, #14]
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	371c      	adds	r7, #28
 800a390:	46bd      	mov	sp, r7
 800a392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a396:	4770      	bx	lr

0800a398 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b084      	sub	sp, #16
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
 800a3a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	781b      	ldrb	r3, [r3, #0]
 800a3aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a3ae:	2b40      	cmp	r3, #64	; 0x40
 800a3b0:	d005      	beq.n	800a3be <USBD_StdDevReq+0x26>
 800a3b2:	2b40      	cmp	r3, #64	; 0x40
 800a3b4:	d857      	bhi.n	800a466 <USBD_StdDevReq+0xce>
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d00f      	beq.n	800a3da <USBD_StdDevReq+0x42>
 800a3ba:	2b20      	cmp	r3, #32
 800a3bc:	d153      	bne.n	800a466 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	32ae      	adds	r2, #174	; 0xae
 800a3c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3cc:	689b      	ldr	r3, [r3, #8]
 800a3ce:	6839      	ldr	r1, [r7, #0]
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	4798      	blx	r3
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	73fb      	strb	r3, [r7, #15]
      break;
 800a3d8:	e04a      	b.n	800a470 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	785b      	ldrb	r3, [r3, #1]
 800a3de:	2b09      	cmp	r3, #9
 800a3e0:	d83b      	bhi.n	800a45a <USBD_StdDevReq+0xc2>
 800a3e2:	a201      	add	r2, pc, #4	; (adr r2, 800a3e8 <USBD_StdDevReq+0x50>)
 800a3e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3e8:	0800a43d 	.word	0x0800a43d
 800a3ec:	0800a451 	.word	0x0800a451
 800a3f0:	0800a45b 	.word	0x0800a45b
 800a3f4:	0800a447 	.word	0x0800a447
 800a3f8:	0800a45b 	.word	0x0800a45b
 800a3fc:	0800a41b 	.word	0x0800a41b
 800a400:	0800a411 	.word	0x0800a411
 800a404:	0800a45b 	.word	0x0800a45b
 800a408:	0800a433 	.word	0x0800a433
 800a40c:	0800a425 	.word	0x0800a425
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a410:	6839      	ldr	r1, [r7, #0]
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f000 fa3c 	bl	800a890 <USBD_GetDescriptor>
          break;
 800a418:	e024      	b.n	800a464 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a41a:	6839      	ldr	r1, [r7, #0]
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f000 fbcb 	bl	800abb8 <USBD_SetAddress>
          break;
 800a422:	e01f      	b.n	800a464 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a424:	6839      	ldr	r1, [r7, #0]
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f000 fc0a 	bl	800ac40 <USBD_SetConfig>
 800a42c:	4603      	mov	r3, r0
 800a42e:	73fb      	strb	r3, [r7, #15]
          break;
 800a430:	e018      	b.n	800a464 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a432:	6839      	ldr	r1, [r7, #0]
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f000 fcad 	bl	800ad94 <USBD_GetConfig>
          break;
 800a43a:	e013      	b.n	800a464 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a43c:	6839      	ldr	r1, [r7, #0]
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f000 fcde 	bl	800ae00 <USBD_GetStatus>
          break;
 800a444:	e00e      	b.n	800a464 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a446:	6839      	ldr	r1, [r7, #0]
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f000 fd0d 	bl	800ae68 <USBD_SetFeature>
          break;
 800a44e:	e009      	b.n	800a464 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a450:	6839      	ldr	r1, [r7, #0]
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f000 fd31 	bl	800aeba <USBD_ClrFeature>
          break;
 800a458:	e004      	b.n	800a464 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a45a:	6839      	ldr	r1, [r7, #0]
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f000 fd88 	bl	800af72 <USBD_CtlError>
          break;
 800a462:	bf00      	nop
      }
      break;
 800a464:	e004      	b.n	800a470 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a466:	6839      	ldr	r1, [r7, #0]
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f000 fd82 	bl	800af72 <USBD_CtlError>
      break;
 800a46e:	bf00      	nop
  }

  return ret;
 800a470:	7bfb      	ldrb	r3, [r7, #15]
}
 800a472:	4618      	mov	r0, r3
 800a474:	3710      	adds	r7, #16
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}
 800a47a:	bf00      	nop

0800a47c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b084      	sub	sp, #16
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a486:	2300      	movs	r3, #0
 800a488:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	781b      	ldrb	r3, [r3, #0]
 800a48e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a492:	2b40      	cmp	r3, #64	; 0x40
 800a494:	d005      	beq.n	800a4a2 <USBD_StdItfReq+0x26>
 800a496:	2b40      	cmp	r3, #64	; 0x40
 800a498:	d852      	bhi.n	800a540 <USBD_StdItfReq+0xc4>
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d001      	beq.n	800a4a2 <USBD_StdItfReq+0x26>
 800a49e:	2b20      	cmp	r3, #32
 800a4a0:	d14e      	bne.n	800a540 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4a8:	b2db      	uxtb	r3, r3
 800a4aa:	3b01      	subs	r3, #1
 800a4ac:	2b02      	cmp	r3, #2
 800a4ae:	d840      	bhi.n	800a532 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	889b      	ldrh	r3, [r3, #4]
 800a4b4:	b2db      	uxtb	r3, r3
 800a4b6:	2b01      	cmp	r3, #1
 800a4b8:	d836      	bhi.n	800a528 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	889b      	ldrh	r3, [r3, #4]
 800a4be:	b2db      	uxtb	r3, r3
 800a4c0:	4619      	mov	r1, r3
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f7ff fed9 	bl	800a27a <USBD_CoreFindIF>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a4cc:	7bbb      	ldrb	r3, [r7, #14]
 800a4ce:	2bff      	cmp	r3, #255	; 0xff
 800a4d0:	d01d      	beq.n	800a50e <USBD_StdItfReq+0x92>
 800a4d2:	7bbb      	ldrb	r3, [r7, #14]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d11a      	bne.n	800a50e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a4d8:	7bba      	ldrb	r2, [r7, #14]
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	32ae      	adds	r2, #174	; 0xae
 800a4de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4e2:	689b      	ldr	r3, [r3, #8]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d00f      	beq.n	800a508 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a4e8:	7bba      	ldrb	r2, [r7, #14]
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a4f0:	7bba      	ldrb	r2, [r7, #14]
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	32ae      	adds	r2, #174	; 0xae
 800a4f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4fa:	689b      	ldr	r3, [r3, #8]
 800a4fc:	6839      	ldr	r1, [r7, #0]
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	4798      	blx	r3
 800a502:	4603      	mov	r3, r0
 800a504:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a506:	e004      	b.n	800a512 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a508:	2303      	movs	r3, #3
 800a50a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a50c:	e001      	b.n	800a512 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a50e:	2303      	movs	r3, #3
 800a510:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	88db      	ldrh	r3, [r3, #6]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d110      	bne.n	800a53c <USBD_StdItfReq+0xc0>
 800a51a:	7bfb      	ldrb	r3, [r7, #15]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d10d      	bne.n	800a53c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f000 fdf1 	bl	800b108 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a526:	e009      	b.n	800a53c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a528:	6839      	ldr	r1, [r7, #0]
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f000 fd21 	bl	800af72 <USBD_CtlError>
          break;
 800a530:	e004      	b.n	800a53c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a532:	6839      	ldr	r1, [r7, #0]
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f000 fd1c 	bl	800af72 <USBD_CtlError>
          break;
 800a53a:	e000      	b.n	800a53e <USBD_StdItfReq+0xc2>
          break;
 800a53c:	bf00      	nop
      }
      break;
 800a53e:	e004      	b.n	800a54a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a540:	6839      	ldr	r1, [r7, #0]
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f000 fd15 	bl	800af72 <USBD_CtlError>
      break;
 800a548:	bf00      	nop
  }

  return ret;
 800a54a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3710      	adds	r7, #16
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b084      	sub	sp, #16
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
 800a55c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a55e:	2300      	movs	r3, #0
 800a560:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	889b      	ldrh	r3, [r3, #4]
 800a566:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	781b      	ldrb	r3, [r3, #0]
 800a56c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a570:	2b40      	cmp	r3, #64	; 0x40
 800a572:	d007      	beq.n	800a584 <USBD_StdEPReq+0x30>
 800a574:	2b40      	cmp	r3, #64	; 0x40
 800a576:	f200 817f 	bhi.w	800a878 <USBD_StdEPReq+0x324>
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d02a      	beq.n	800a5d4 <USBD_StdEPReq+0x80>
 800a57e:	2b20      	cmp	r3, #32
 800a580:	f040 817a 	bne.w	800a878 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a584:	7bbb      	ldrb	r3, [r7, #14]
 800a586:	4619      	mov	r1, r3
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f7ff fe83 	bl	800a294 <USBD_CoreFindEP>
 800a58e:	4603      	mov	r3, r0
 800a590:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a592:	7b7b      	ldrb	r3, [r7, #13]
 800a594:	2bff      	cmp	r3, #255	; 0xff
 800a596:	f000 8174 	beq.w	800a882 <USBD_StdEPReq+0x32e>
 800a59a:	7b7b      	ldrb	r3, [r7, #13]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	f040 8170 	bne.w	800a882 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a5a2:	7b7a      	ldrb	r2, [r7, #13]
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a5aa:	7b7a      	ldrb	r2, [r7, #13]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	32ae      	adds	r2, #174	; 0xae
 800a5b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5b4:	689b      	ldr	r3, [r3, #8]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	f000 8163 	beq.w	800a882 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a5bc:	7b7a      	ldrb	r2, [r7, #13]
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	32ae      	adds	r2, #174	; 0xae
 800a5c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5c6:	689b      	ldr	r3, [r3, #8]
 800a5c8:	6839      	ldr	r1, [r7, #0]
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	4798      	blx	r3
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a5d2:	e156      	b.n	800a882 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	785b      	ldrb	r3, [r3, #1]
 800a5d8:	2b03      	cmp	r3, #3
 800a5da:	d008      	beq.n	800a5ee <USBD_StdEPReq+0x9a>
 800a5dc:	2b03      	cmp	r3, #3
 800a5de:	f300 8145 	bgt.w	800a86c <USBD_StdEPReq+0x318>
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	f000 809b 	beq.w	800a71e <USBD_StdEPReq+0x1ca>
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	d03c      	beq.n	800a666 <USBD_StdEPReq+0x112>
 800a5ec:	e13e      	b.n	800a86c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5f4:	b2db      	uxtb	r3, r3
 800a5f6:	2b02      	cmp	r3, #2
 800a5f8:	d002      	beq.n	800a600 <USBD_StdEPReq+0xac>
 800a5fa:	2b03      	cmp	r3, #3
 800a5fc:	d016      	beq.n	800a62c <USBD_StdEPReq+0xd8>
 800a5fe:	e02c      	b.n	800a65a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a600:	7bbb      	ldrb	r3, [r7, #14]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d00d      	beq.n	800a622 <USBD_StdEPReq+0xce>
 800a606:	7bbb      	ldrb	r3, [r7, #14]
 800a608:	2b80      	cmp	r3, #128	; 0x80
 800a60a:	d00a      	beq.n	800a622 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a60c:	7bbb      	ldrb	r3, [r7, #14]
 800a60e:	4619      	mov	r1, r3
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f001 f9bd 	bl	800b990 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a616:	2180      	movs	r1, #128	; 0x80
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f001 f9b9 	bl	800b990 <USBD_LL_StallEP>
 800a61e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a620:	e020      	b.n	800a664 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a622:	6839      	ldr	r1, [r7, #0]
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f000 fca4 	bl	800af72 <USBD_CtlError>
              break;
 800a62a:	e01b      	b.n	800a664 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	885b      	ldrh	r3, [r3, #2]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d10e      	bne.n	800a652 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a634:	7bbb      	ldrb	r3, [r7, #14]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d00b      	beq.n	800a652 <USBD_StdEPReq+0xfe>
 800a63a:	7bbb      	ldrb	r3, [r7, #14]
 800a63c:	2b80      	cmp	r3, #128	; 0x80
 800a63e:	d008      	beq.n	800a652 <USBD_StdEPReq+0xfe>
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	88db      	ldrh	r3, [r3, #6]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d104      	bne.n	800a652 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a648:	7bbb      	ldrb	r3, [r7, #14]
 800a64a:	4619      	mov	r1, r3
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f001 f99f 	bl	800b990 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f000 fd58 	bl	800b108 <USBD_CtlSendStatus>

              break;
 800a658:	e004      	b.n	800a664 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a65a:	6839      	ldr	r1, [r7, #0]
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f000 fc88 	bl	800af72 <USBD_CtlError>
              break;
 800a662:	bf00      	nop
          }
          break;
 800a664:	e107      	b.n	800a876 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a66c:	b2db      	uxtb	r3, r3
 800a66e:	2b02      	cmp	r3, #2
 800a670:	d002      	beq.n	800a678 <USBD_StdEPReq+0x124>
 800a672:	2b03      	cmp	r3, #3
 800a674:	d016      	beq.n	800a6a4 <USBD_StdEPReq+0x150>
 800a676:	e04b      	b.n	800a710 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a678:	7bbb      	ldrb	r3, [r7, #14]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d00d      	beq.n	800a69a <USBD_StdEPReq+0x146>
 800a67e:	7bbb      	ldrb	r3, [r7, #14]
 800a680:	2b80      	cmp	r3, #128	; 0x80
 800a682:	d00a      	beq.n	800a69a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a684:	7bbb      	ldrb	r3, [r7, #14]
 800a686:	4619      	mov	r1, r3
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f001 f981 	bl	800b990 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a68e:	2180      	movs	r1, #128	; 0x80
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f001 f97d 	bl	800b990 <USBD_LL_StallEP>
 800a696:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a698:	e040      	b.n	800a71c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a69a:	6839      	ldr	r1, [r7, #0]
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f000 fc68 	bl	800af72 <USBD_CtlError>
              break;
 800a6a2:	e03b      	b.n	800a71c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	885b      	ldrh	r3, [r3, #2]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d136      	bne.n	800a71a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a6ac:	7bbb      	ldrb	r3, [r7, #14]
 800a6ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d004      	beq.n	800a6c0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a6b6:	7bbb      	ldrb	r3, [r7, #14]
 800a6b8:	4619      	mov	r1, r3
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f001 f987 	bl	800b9ce <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f000 fd21 	bl	800b108 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a6c6:	7bbb      	ldrb	r3, [r7, #14]
 800a6c8:	4619      	mov	r1, r3
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f7ff fde2 	bl	800a294 <USBD_CoreFindEP>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a6d4:	7b7b      	ldrb	r3, [r7, #13]
 800a6d6:	2bff      	cmp	r3, #255	; 0xff
 800a6d8:	d01f      	beq.n	800a71a <USBD_StdEPReq+0x1c6>
 800a6da:	7b7b      	ldrb	r3, [r7, #13]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d11c      	bne.n	800a71a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a6e0:	7b7a      	ldrb	r2, [r7, #13]
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a6e8:	7b7a      	ldrb	r2, [r7, #13]
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	32ae      	adds	r2, #174	; 0xae
 800a6ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6f2:	689b      	ldr	r3, [r3, #8]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d010      	beq.n	800a71a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a6f8:	7b7a      	ldrb	r2, [r7, #13]
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	32ae      	adds	r2, #174	; 0xae
 800a6fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a702:	689b      	ldr	r3, [r3, #8]
 800a704:	6839      	ldr	r1, [r7, #0]
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	4798      	blx	r3
 800a70a:	4603      	mov	r3, r0
 800a70c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a70e:	e004      	b.n	800a71a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a710:	6839      	ldr	r1, [r7, #0]
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f000 fc2d 	bl	800af72 <USBD_CtlError>
              break;
 800a718:	e000      	b.n	800a71c <USBD_StdEPReq+0x1c8>
              break;
 800a71a:	bf00      	nop
          }
          break;
 800a71c:	e0ab      	b.n	800a876 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a724:	b2db      	uxtb	r3, r3
 800a726:	2b02      	cmp	r3, #2
 800a728:	d002      	beq.n	800a730 <USBD_StdEPReq+0x1dc>
 800a72a:	2b03      	cmp	r3, #3
 800a72c:	d032      	beq.n	800a794 <USBD_StdEPReq+0x240>
 800a72e:	e097      	b.n	800a860 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a730:	7bbb      	ldrb	r3, [r7, #14]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d007      	beq.n	800a746 <USBD_StdEPReq+0x1f2>
 800a736:	7bbb      	ldrb	r3, [r7, #14]
 800a738:	2b80      	cmp	r3, #128	; 0x80
 800a73a:	d004      	beq.n	800a746 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a73c:	6839      	ldr	r1, [r7, #0]
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f000 fc17 	bl	800af72 <USBD_CtlError>
                break;
 800a744:	e091      	b.n	800a86a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a746:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	da0b      	bge.n	800a766 <USBD_StdEPReq+0x212>
 800a74e:	7bbb      	ldrb	r3, [r7, #14]
 800a750:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a754:	4613      	mov	r3, r2
 800a756:	009b      	lsls	r3, r3, #2
 800a758:	4413      	add	r3, r2
 800a75a:	009b      	lsls	r3, r3, #2
 800a75c:	3310      	adds	r3, #16
 800a75e:	687a      	ldr	r2, [r7, #4]
 800a760:	4413      	add	r3, r2
 800a762:	3304      	adds	r3, #4
 800a764:	e00b      	b.n	800a77e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a766:	7bbb      	ldrb	r3, [r7, #14]
 800a768:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a76c:	4613      	mov	r3, r2
 800a76e:	009b      	lsls	r3, r3, #2
 800a770:	4413      	add	r3, r2
 800a772:	009b      	lsls	r3, r3, #2
 800a774:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a778:	687a      	ldr	r2, [r7, #4]
 800a77a:	4413      	add	r3, r2
 800a77c:	3304      	adds	r3, #4
 800a77e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	2200      	movs	r2, #0
 800a784:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	2202      	movs	r2, #2
 800a78a:	4619      	mov	r1, r3
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f000 fc61 	bl	800b054 <USBD_CtlSendData>
              break;
 800a792:	e06a      	b.n	800a86a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a794:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	da11      	bge.n	800a7c0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a79c:	7bbb      	ldrb	r3, [r7, #14]
 800a79e:	f003 020f 	and.w	r2, r3, #15
 800a7a2:	6879      	ldr	r1, [r7, #4]
 800a7a4:	4613      	mov	r3, r2
 800a7a6:	009b      	lsls	r3, r3, #2
 800a7a8:	4413      	add	r3, r2
 800a7aa:	009b      	lsls	r3, r3, #2
 800a7ac:	440b      	add	r3, r1
 800a7ae:	3324      	adds	r3, #36	; 0x24
 800a7b0:	881b      	ldrh	r3, [r3, #0]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d117      	bne.n	800a7e6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a7b6:	6839      	ldr	r1, [r7, #0]
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f000 fbda 	bl	800af72 <USBD_CtlError>
                  break;
 800a7be:	e054      	b.n	800a86a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a7c0:	7bbb      	ldrb	r3, [r7, #14]
 800a7c2:	f003 020f 	and.w	r2, r3, #15
 800a7c6:	6879      	ldr	r1, [r7, #4]
 800a7c8:	4613      	mov	r3, r2
 800a7ca:	009b      	lsls	r3, r3, #2
 800a7cc:	4413      	add	r3, r2
 800a7ce:	009b      	lsls	r3, r3, #2
 800a7d0:	440b      	add	r3, r1
 800a7d2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a7d6:	881b      	ldrh	r3, [r3, #0]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d104      	bne.n	800a7e6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a7dc:	6839      	ldr	r1, [r7, #0]
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f000 fbc7 	bl	800af72 <USBD_CtlError>
                  break;
 800a7e4:	e041      	b.n	800a86a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a7e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	da0b      	bge.n	800a806 <USBD_StdEPReq+0x2b2>
 800a7ee:	7bbb      	ldrb	r3, [r7, #14]
 800a7f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a7f4:	4613      	mov	r3, r2
 800a7f6:	009b      	lsls	r3, r3, #2
 800a7f8:	4413      	add	r3, r2
 800a7fa:	009b      	lsls	r3, r3, #2
 800a7fc:	3310      	adds	r3, #16
 800a7fe:	687a      	ldr	r2, [r7, #4]
 800a800:	4413      	add	r3, r2
 800a802:	3304      	adds	r3, #4
 800a804:	e00b      	b.n	800a81e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a806:	7bbb      	ldrb	r3, [r7, #14]
 800a808:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a80c:	4613      	mov	r3, r2
 800a80e:	009b      	lsls	r3, r3, #2
 800a810:	4413      	add	r3, r2
 800a812:	009b      	lsls	r3, r3, #2
 800a814:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a818:	687a      	ldr	r2, [r7, #4]
 800a81a:	4413      	add	r3, r2
 800a81c:	3304      	adds	r3, #4
 800a81e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a820:	7bbb      	ldrb	r3, [r7, #14]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d002      	beq.n	800a82c <USBD_StdEPReq+0x2d8>
 800a826:	7bbb      	ldrb	r3, [r7, #14]
 800a828:	2b80      	cmp	r3, #128	; 0x80
 800a82a:	d103      	bne.n	800a834 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	2200      	movs	r2, #0
 800a830:	601a      	str	r2, [r3, #0]
 800a832:	e00e      	b.n	800a852 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a834:	7bbb      	ldrb	r3, [r7, #14]
 800a836:	4619      	mov	r1, r3
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f001 f8e7 	bl	800ba0c <USBD_LL_IsStallEP>
 800a83e:	4603      	mov	r3, r0
 800a840:	2b00      	cmp	r3, #0
 800a842:	d003      	beq.n	800a84c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	2201      	movs	r2, #1
 800a848:	601a      	str	r2, [r3, #0]
 800a84a:	e002      	b.n	800a852 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	2200      	movs	r2, #0
 800a850:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	2202      	movs	r2, #2
 800a856:	4619      	mov	r1, r3
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f000 fbfb 	bl	800b054 <USBD_CtlSendData>
              break;
 800a85e:	e004      	b.n	800a86a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a860:	6839      	ldr	r1, [r7, #0]
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f000 fb85 	bl	800af72 <USBD_CtlError>
              break;
 800a868:	bf00      	nop
          }
          break;
 800a86a:	e004      	b.n	800a876 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a86c:	6839      	ldr	r1, [r7, #0]
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f000 fb7f 	bl	800af72 <USBD_CtlError>
          break;
 800a874:	bf00      	nop
      }
      break;
 800a876:	e005      	b.n	800a884 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a878:	6839      	ldr	r1, [r7, #0]
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f000 fb79 	bl	800af72 <USBD_CtlError>
      break;
 800a880:	e000      	b.n	800a884 <USBD_StdEPReq+0x330>
      break;
 800a882:	bf00      	nop
  }

  return ret;
 800a884:	7bfb      	ldrb	r3, [r7, #15]
}
 800a886:	4618      	mov	r0, r3
 800a888:	3710      	adds	r7, #16
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
	...

0800a890 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b084      	sub	sp, #16
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
 800a898:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a89a:	2300      	movs	r3, #0
 800a89c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	885b      	ldrh	r3, [r3, #2]
 800a8aa:	0a1b      	lsrs	r3, r3, #8
 800a8ac:	b29b      	uxth	r3, r3
 800a8ae:	3b01      	subs	r3, #1
 800a8b0:	2b0e      	cmp	r3, #14
 800a8b2:	f200 8152 	bhi.w	800ab5a <USBD_GetDescriptor+0x2ca>
 800a8b6:	a201      	add	r2, pc, #4	; (adr r2, 800a8bc <USBD_GetDescriptor+0x2c>)
 800a8b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8bc:	0800a92d 	.word	0x0800a92d
 800a8c0:	0800a945 	.word	0x0800a945
 800a8c4:	0800a985 	.word	0x0800a985
 800a8c8:	0800ab5b 	.word	0x0800ab5b
 800a8cc:	0800ab5b 	.word	0x0800ab5b
 800a8d0:	0800aafb 	.word	0x0800aafb
 800a8d4:	0800ab27 	.word	0x0800ab27
 800a8d8:	0800ab5b 	.word	0x0800ab5b
 800a8dc:	0800ab5b 	.word	0x0800ab5b
 800a8e0:	0800ab5b 	.word	0x0800ab5b
 800a8e4:	0800ab5b 	.word	0x0800ab5b
 800a8e8:	0800ab5b 	.word	0x0800ab5b
 800a8ec:	0800ab5b 	.word	0x0800ab5b
 800a8f0:	0800ab5b 	.word	0x0800ab5b
 800a8f4:	0800a8f9 	.word	0x0800a8f9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8fe:	69db      	ldr	r3, [r3, #28]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d00b      	beq.n	800a91c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a90a:	69db      	ldr	r3, [r3, #28]
 800a90c:	687a      	ldr	r2, [r7, #4]
 800a90e:	7c12      	ldrb	r2, [r2, #16]
 800a910:	f107 0108 	add.w	r1, r7, #8
 800a914:	4610      	mov	r0, r2
 800a916:	4798      	blx	r3
 800a918:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a91a:	e126      	b.n	800ab6a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a91c:	6839      	ldr	r1, [r7, #0]
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f000 fb27 	bl	800af72 <USBD_CtlError>
        err++;
 800a924:	7afb      	ldrb	r3, [r7, #11]
 800a926:	3301      	adds	r3, #1
 800a928:	72fb      	strb	r3, [r7, #11]
      break;
 800a92a:	e11e      	b.n	800ab6a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	687a      	ldr	r2, [r7, #4]
 800a936:	7c12      	ldrb	r2, [r2, #16]
 800a938:	f107 0108 	add.w	r1, r7, #8
 800a93c:	4610      	mov	r0, r2
 800a93e:	4798      	blx	r3
 800a940:	60f8      	str	r0, [r7, #12]
      break;
 800a942:	e112      	b.n	800ab6a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	7c1b      	ldrb	r3, [r3, #16]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d10d      	bne.n	800a968 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a954:	f107 0208 	add.w	r2, r7, #8
 800a958:	4610      	mov	r0, r2
 800a95a:	4798      	blx	r3
 800a95c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	3301      	adds	r3, #1
 800a962:	2202      	movs	r2, #2
 800a964:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a966:	e100      	b.n	800ab6a <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a96e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a970:	f107 0208 	add.w	r2, r7, #8
 800a974:	4610      	mov	r0, r2
 800a976:	4798      	blx	r3
 800a978:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	3301      	adds	r3, #1
 800a97e:	2202      	movs	r2, #2
 800a980:	701a      	strb	r2, [r3, #0]
      break;
 800a982:	e0f2      	b.n	800ab6a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	885b      	ldrh	r3, [r3, #2]
 800a988:	b2db      	uxtb	r3, r3
 800a98a:	2b05      	cmp	r3, #5
 800a98c:	f200 80ac 	bhi.w	800aae8 <USBD_GetDescriptor+0x258>
 800a990:	a201      	add	r2, pc, #4	; (adr r2, 800a998 <USBD_GetDescriptor+0x108>)
 800a992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a996:	bf00      	nop
 800a998:	0800a9b1 	.word	0x0800a9b1
 800a99c:	0800a9e5 	.word	0x0800a9e5
 800a9a0:	0800aa19 	.word	0x0800aa19
 800a9a4:	0800aa4d 	.word	0x0800aa4d
 800a9a8:	0800aa81 	.word	0x0800aa81
 800a9ac:	0800aab5 	.word	0x0800aab5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d00b      	beq.n	800a9d4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9c2:	685b      	ldr	r3, [r3, #4]
 800a9c4:	687a      	ldr	r2, [r7, #4]
 800a9c6:	7c12      	ldrb	r2, [r2, #16]
 800a9c8:	f107 0108 	add.w	r1, r7, #8
 800a9cc:	4610      	mov	r0, r2
 800a9ce:	4798      	blx	r3
 800a9d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a9d2:	e091      	b.n	800aaf8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a9d4:	6839      	ldr	r1, [r7, #0]
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f000 facb 	bl	800af72 <USBD_CtlError>
            err++;
 800a9dc:	7afb      	ldrb	r3, [r7, #11]
 800a9de:	3301      	adds	r3, #1
 800a9e0:	72fb      	strb	r3, [r7, #11]
          break;
 800a9e2:	e089      	b.n	800aaf8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9ea:	689b      	ldr	r3, [r3, #8]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d00b      	beq.n	800aa08 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9f6:	689b      	ldr	r3, [r3, #8]
 800a9f8:	687a      	ldr	r2, [r7, #4]
 800a9fa:	7c12      	ldrb	r2, [r2, #16]
 800a9fc:	f107 0108 	add.w	r1, r7, #8
 800aa00:	4610      	mov	r0, r2
 800aa02:	4798      	blx	r3
 800aa04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa06:	e077      	b.n	800aaf8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aa08:	6839      	ldr	r1, [r7, #0]
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f000 fab1 	bl	800af72 <USBD_CtlError>
            err++;
 800aa10:	7afb      	ldrb	r3, [r7, #11]
 800aa12:	3301      	adds	r3, #1
 800aa14:	72fb      	strb	r3, [r7, #11]
          break;
 800aa16:	e06f      	b.n	800aaf8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa1e:	68db      	ldr	r3, [r3, #12]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d00b      	beq.n	800aa3c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa2a:	68db      	ldr	r3, [r3, #12]
 800aa2c:	687a      	ldr	r2, [r7, #4]
 800aa2e:	7c12      	ldrb	r2, [r2, #16]
 800aa30:	f107 0108 	add.w	r1, r7, #8
 800aa34:	4610      	mov	r0, r2
 800aa36:	4798      	blx	r3
 800aa38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa3a:	e05d      	b.n	800aaf8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aa3c:	6839      	ldr	r1, [r7, #0]
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f000 fa97 	bl	800af72 <USBD_CtlError>
            err++;
 800aa44:	7afb      	ldrb	r3, [r7, #11]
 800aa46:	3301      	adds	r3, #1
 800aa48:	72fb      	strb	r3, [r7, #11]
          break;
 800aa4a:	e055      	b.n	800aaf8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa52:	691b      	ldr	r3, [r3, #16]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d00b      	beq.n	800aa70 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa5e:	691b      	ldr	r3, [r3, #16]
 800aa60:	687a      	ldr	r2, [r7, #4]
 800aa62:	7c12      	ldrb	r2, [r2, #16]
 800aa64:	f107 0108 	add.w	r1, r7, #8
 800aa68:	4610      	mov	r0, r2
 800aa6a:	4798      	blx	r3
 800aa6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa6e:	e043      	b.n	800aaf8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aa70:	6839      	ldr	r1, [r7, #0]
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f000 fa7d 	bl	800af72 <USBD_CtlError>
            err++;
 800aa78:	7afb      	ldrb	r3, [r7, #11]
 800aa7a:	3301      	adds	r3, #1
 800aa7c:	72fb      	strb	r3, [r7, #11]
          break;
 800aa7e:	e03b      	b.n	800aaf8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa86:	695b      	ldr	r3, [r3, #20]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d00b      	beq.n	800aaa4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa92:	695b      	ldr	r3, [r3, #20]
 800aa94:	687a      	ldr	r2, [r7, #4]
 800aa96:	7c12      	ldrb	r2, [r2, #16]
 800aa98:	f107 0108 	add.w	r1, r7, #8
 800aa9c:	4610      	mov	r0, r2
 800aa9e:	4798      	blx	r3
 800aaa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aaa2:	e029      	b.n	800aaf8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aaa4:	6839      	ldr	r1, [r7, #0]
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f000 fa63 	bl	800af72 <USBD_CtlError>
            err++;
 800aaac:	7afb      	ldrb	r3, [r7, #11]
 800aaae:	3301      	adds	r3, #1
 800aab0:	72fb      	strb	r3, [r7, #11]
          break;
 800aab2:	e021      	b.n	800aaf8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aaba:	699b      	ldr	r3, [r3, #24]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d00b      	beq.n	800aad8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aac6:	699b      	ldr	r3, [r3, #24]
 800aac8:	687a      	ldr	r2, [r7, #4]
 800aaca:	7c12      	ldrb	r2, [r2, #16]
 800aacc:	f107 0108 	add.w	r1, r7, #8
 800aad0:	4610      	mov	r0, r2
 800aad2:	4798      	blx	r3
 800aad4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aad6:	e00f      	b.n	800aaf8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aad8:	6839      	ldr	r1, [r7, #0]
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f000 fa49 	bl	800af72 <USBD_CtlError>
            err++;
 800aae0:	7afb      	ldrb	r3, [r7, #11]
 800aae2:	3301      	adds	r3, #1
 800aae4:	72fb      	strb	r3, [r7, #11]
          break;
 800aae6:	e007      	b.n	800aaf8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800aae8:	6839      	ldr	r1, [r7, #0]
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f000 fa41 	bl	800af72 <USBD_CtlError>
          err++;
 800aaf0:	7afb      	ldrb	r3, [r7, #11]
 800aaf2:	3301      	adds	r3, #1
 800aaf4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800aaf6:	bf00      	nop
      }
      break;
 800aaf8:	e037      	b.n	800ab6a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	7c1b      	ldrb	r3, [r3, #16]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d109      	bne.n	800ab16 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab0a:	f107 0208 	add.w	r2, r7, #8
 800ab0e:	4610      	mov	r0, r2
 800ab10:	4798      	blx	r3
 800ab12:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ab14:	e029      	b.n	800ab6a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ab16:	6839      	ldr	r1, [r7, #0]
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f000 fa2a 	bl	800af72 <USBD_CtlError>
        err++;
 800ab1e:	7afb      	ldrb	r3, [r7, #11]
 800ab20:	3301      	adds	r3, #1
 800ab22:	72fb      	strb	r3, [r7, #11]
      break;
 800ab24:	e021      	b.n	800ab6a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	7c1b      	ldrb	r3, [r3, #16]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d10d      	bne.n	800ab4a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab36:	f107 0208 	add.w	r2, r7, #8
 800ab3a:	4610      	mov	r0, r2
 800ab3c:	4798      	blx	r3
 800ab3e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	3301      	adds	r3, #1
 800ab44:	2207      	movs	r2, #7
 800ab46:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ab48:	e00f      	b.n	800ab6a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ab4a:	6839      	ldr	r1, [r7, #0]
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f000 fa10 	bl	800af72 <USBD_CtlError>
        err++;
 800ab52:	7afb      	ldrb	r3, [r7, #11]
 800ab54:	3301      	adds	r3, #1
 800ab56:	72fb      	strb	r3, [r7, #11]
      break;
 800ab58:	e007      	b.n	800ab6a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ab5a:	6839      	ldr	r1, [r7, #0]
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f000 fa08 	bl	800af72 <USBD_CtlError>
      err++;
 800ab62:	7afb      	ldrb	r3, [r7, #11]
 800ab64:	3301      	adds	r3, #1
 800ab66:	72fb      	strb	r3, [r7, #11]
      break;
 800ab68:	bf00      	nop
  }

  if (err != 0U)
 800ab6a:	7afb      	ldrb	r3, [r7, #11]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d11e      	bne.n	800abae <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	88db      	ldrh	r3, [r3, #6]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d016      	beq.n	800aba6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ab78:	893b      	ldrh	r3, [r7, #8]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d00e      	beq.n	800ab9c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	88da      	ldrh	r2, [r3, #6]
 800ab82:	893b      	ldrh	r3, [r7, #8]
 800ab84:	4293      	cmp	r3, r2
 800ab86:	bf28      	it	cs
 800ab88:	4613      	movcs	r3, r2
 800ab8a:	b29b      	uxth	r3, r3
 800ab8c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ab8e:	893b      	ldrh	r3, [r7, #8]
 800ab90:	461a      	mov	r2, r3
 800ab92:	68f9      	ldr	r1, [r7, #12]
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f000 fa5d 	bl	800b054 <USBD_CtlSendData>
 800ab9a:	e009      	b.n	800abb0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ab9c:	6839      	ldr	r1, [r7, #0]
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f000 f9e7 	bl	800af72 <USBD_CtlError>
 800aba4:	e004      	b.n	800abb0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f000 faae 	bl	800b108 <USBD_CtlSendStatus>
 800abac:	e000      	b.n	800abb0 <USBD_GetDescriptor+0x320>
    return;
 800abae:	bf00      	nop
  }
}
 800abb0:	3710      	adds	r7, #16
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}
 800abb6:	bf00      	nop

0800abb8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b084      	sub	sp, #16
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	889b      	ldrh	r3, [r3, #4]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d131      	bne.n	800ac2e <USBD_SetAddress+0x76>
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	88db      	ldrh	r3, [r3, #6]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d12d      	bne.n	800ac2e <USBD_SetAddress+0x76>
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	885b      	ldrh	r3, [r3, #2]
 800abd6:	2b7f      	cmp	r3, #127	; 0x7f
 800abd8:	d829      	bhi.n	800ac2e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	885b      	ldrh	r3, [r3, #2]
 800abde:	b2db      	uxtb	r3, r3
 800abe0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abe4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abec:	b2db      	uxtb	r3, r3
 800abee:	2b03      	cmp	r3, #3
 800abf0:	d104      	bne.n	800abfc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800abf2:	6839      	ldr	r1, [r7, #0]
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	f000 f9bc 	bl	800af72 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abfa:	e01d      	b.n	800ac38 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	7bfa      	ldrb	r2, [r7, #15]
 800ac00:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ac04:	7bfb      	ldrb	r3, [r7, #15]
 800ac06:	4619      	mov	r1, r3
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f000 ff2b 	bl	800ba64 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f000 fa7a 	bl	800b108 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ac14:	7bfb      	ldrb	r3, [r7, #15]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d004      	beq.n	800ac24 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2202      	movs	r2, #2
 800ac1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac22:	e009      	b.n	800ac38 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2201      	movs	r2, #1
 800ac28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac2c:	e004      	b.n	800ac38 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ac2e:	6839      	ldr	r1, [r7, #0]
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f000 f99e 	bl	800af72 <USBD_CtlError>
  }
}
 800ac36:	bf00      	nop
 800ac38:	bf00      	nop
 800ac3a:	3710      	adds	r7, #16
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}

0800ac40 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b084      	sub	sp, #16
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
 800ac48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	885b      	ldrh	r3, [r3, #2]
 800ac52:	b2da      	uxtb	r2, r3
 800ac54:	4b4e      	ldr	r3, [pc, #312]	; (800ad90 <USBD_SetConfig+0x150>)
 800ac56:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ac58:	4b4d      	ldr	r3, [pc, #308]	; (800ad90 <USBD_SetConfig+0x150>)
 800ac5a:	781b      	ldrb	r3, [r3, #0]
 800ac5c:	2b01      	cmp	r3, #1
 800ac5e:	d905      	bls.n	800ac6c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ac60:	6839      	ldr	r1, [r7, #0]
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f000 f985 	bl	800af72 <USBD_CtlError>
    return USBD_FAIL;
 800ac68:	2303      	movs	r3, #3
 800ac6a:	e08c      	b.n	800ad86 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac72:	b2db      	uxtb	r3, r3
 800ac74:	2b02      	cmp	r3, #2
 800ac76:	d002      	beq.n	800ac7e <USBD_SetConfig+0x3e>
 800ac78:	2b03      	cmp	r3, #3
 800ac7a:	d029      	beq.n	800acd0 <USBD_SetConfig+0x90>
 800ac7c:	e075      	b.n	800ad6a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ac7e:	4b44      	ldr	r3, [pc, #272]	; (800ad90 <USBD_SetConfig+0x150>)
 800ac80:	781b      	ldrb	r3, [r3, #0]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d020      	beq.n	800acc8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ac86:	4b42      	ldr	r3, [pc, #264]	; (800ad90 <USBD_SetConfig+0x150>)
 800ac88:	781b      	ldrb	r3, [r3, #0]
 800ac8a:	461a      	mov	r2, r3
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ac90:	4b3f      	ldr	r3, [pc, #252]	; (800ad90 <USBD_SetConfig+0x150>)
 800ac92:	781b      	ldrb	r3, [r3, #0]
 800ac94:	4619      	mov	r1, r3
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f7fe ffb7 	bl	8009c0a <USBD_SetClassConfig>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800aca0:	7bfb      	ldrb	r3, [r7, #15]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d008      	beq.n	800acb8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800aca6:	6839      	ldr	r1, [r7, #0]
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f000 f962 	bl	800af72 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2202      	movs	r2, #2
 800acb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800acb6:	e065      	b.n	800ad84 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f000 fa25 	bl	800b108 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2203      	movs	r2, #3
 800acc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800acc6:	e05d      	b.n	800ad84 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f000 fa1d 	bl	800b108 <USBD_CtlSendStatus>
      break;
 800acce:	e059      	b.n	800ad84 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800acd0:	4b2f      	ldr	r3, [pc, #188]	; (800ad90 <USBD_SetConfig+0x150>)
 800acd2:	781b      	ldrb	r3, [r3, #0]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d112      	bne.n	800acfe <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2202      	movs	r2, #2
 800acdc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ace0:	4b2b      	ldr	r3, [pc, #172]	; (800ad90 <USBD_SetConfig+0x150>)
 800ace2:	781b      	ldrb	r3, [r3, #0]
 800ace4:	461a      	mov	r2, r3
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800acea:	4b29      	ldr	r3, [pc, #164]	; (800ad90 <USBD_SetConfig+0x150>)
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	4619      	mov	r1, r3
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f7fe ffa6 	bl	8009c42 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f000 fa06 	bl	800b108 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800acfc:	e042      	b.n	800ad84 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800acfe:	4b24      	ldr	r3, [pc, #144]	; (800ad90 <USBD_SetConfig+0x150>)
 800ad00:	781b      	ldrb	r3, [r3, #0]
 800ad02:	461a      	mov	r2, r3
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	685b      	ldr	r3, [r3, #4]
 800ad08:	429a      	cmp	r2, r3
 800ad0a:	d02a      	beq.n	800ad62 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	685b      	ldr	r3, [r3, #4]
 800ad10:	b2db      	uxtb	r3, r3
 800ad12:	4619      	mov	r1, r3
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f7fe ff94 	bl	8009c42 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ad1a:	4b1d      	ldr	r3, [pc, #116]	; (800ad90 <USBD_SetConfig+0x150>)
 800ad1c:	781b      	ldrb	r3, [r3, #0]
 800ad1e:	461a      	mov	r2, r3
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ad24:	4b1a      	ldr	r3, [pc, #104]	; (800ad90 <USBD_SetConfig+0x150>)
 800ad26:	781b      	ldrb	r3, [r3, #0]
 800ad28:	4619      	mov	r1, r3
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f7fe ff6d 	bl	8009c0a <USBD_SetClassConfig>
 800ad30:	4603      	mov	r3, r0
 800ad32:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ad34:	7bfb      	ldrb	r3, [r7, #15]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d00f      	beq.n	800ad5a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ad3a:	6839      	ldr	r1, [r7, #0]
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f000 f918 	bl	800af72 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	685b      	ldr	r3, [r3, #4]
 800ad46:	b2db      	uxtb	r3, r3
 800ad48:	4619      	mov	r1, r3
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f7fe ff79 	bl	8009c42 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2202      	movs	r2, #2
 800ad54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ad58:	e014      	b.n	800ad84 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f000 f9d4 	bl	800b108 <USBD_CtlSendStatus>
      break;
 800ad60:	e010      	b.n	800ad84 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f000 f9d0 	bl	800b108 <USBD_CtlSendStatus>
      break;
 800ad68:	e00c      	b.n	800ad84 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ad6a:	6839      	ldr	r1, [r7, #0]
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f000 f900 	bl	800af72 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ad72:	4b07      	ldr	r3, [pc, #28]	; (800ad90 <USBD_SetConfig+0x150>)
 800ad74:	781b      	ldrb	r3, [r3, #0]
 800ad76:	4619      	mov	r1, r3
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f7fe ff62 	bl	8009c42 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ad7e:	2303      	movs	r3, #3
 800ad80:	73fb      	strb	r3, [r7, #15]
      break;
 800ad82:	bf00      	nop
  }

  return ret;
 800ad84:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3710      	adds	r7, #16
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}
 800ad8e:	bf00      	nop
 800ad90:	2400051c 	.word	0x2400051c

0800ad94 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b082      	sub	sp, #8
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
 800ad9c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	88db      	ldrh	r3, [r3, #6]
 800ada2:	2b01      	cmp	r3, #1
 800ada4:	d004      	beq.n	800adb0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ada6:	6839      	ldr	r1, [r7, #0]
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f000 f8e2 	bl	800af72 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800adae:	e023      	b.n	800adf8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adb6:	b2db      	uxtb	r3, r3
 800adb8:	2b02      	cmp	r3, #2
 800adba:	dc02      	bgt.n	800adc2 <USBD_GetConfig+0x2e>
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	dc03      	bgt.n	800adc8 <USBD_GetConfig+0x34>
 800adc0:	e015      	b.n	800adee <USBD_GetConfig+0x5a>
 800adc2:	2b03      	cmp	r3, #3
 800adc4:	d00b      	beq.n	800adde <USBD_GetConfig+0x4a>
 800adc6:	e012      	b.n	800adee <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2200      	movs	r2, #0
 800adcc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	3308      	adds	r3, #8
 800add2:	2201      	movs	r2, #1
 800add4:	4619      	mov	r1, r3
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f000 f93c 	bl	800b054 <USBD_CtlSendData>
        break;
 800addc:	e00c      	b.n	800adf8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	3304      	adds	r3, #4
 800ade2:	2201      	movs	r2, #1
 800ade4:	4619      	mov	r1, r3
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f000 f934 	bl	800b054 <USBD_CtlSendData>
        break;
 800adec:	e004      	b.n	800adf8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800adee:	6839      	ldr	r1, [r7, #0]
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f000 f8be 	bl	800af72 <USBD_CtlError>
        break;
 800adf6:	bf00      	nop
}
 800adf8:	bf00      	nop
 800adfa:	3708      	adds	r7, #8
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b082      	sub	sp, #8
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae10:	b2db      	uxtb	r3, r3
 800ae12:	3b01      	subs	r3, #1
 800ae14:	2b02      	cmp	r3, #2
 800ae16:	d81e      	bhi.n	800ae56 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	88db      	ldrh	r3, [r3, #6]
 800ae1c:	2b02      	cmp	r3, #2
 800ae1e:	d004      	beq.n	800ae2a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ae20:	6839      	ldr	r1, [r7, #0]
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f000 f8a5 	bl	800af72 <USBD_CtlError>
        break;
 800ae28:	e01a      	b.n	800ae60 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2201      	movs	r2, #1
 800ae2e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d005      	beq.n	800ae46 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	68db      	ldr	r3, [r3, #12]
 800ae3e:	f043 0202 	orr.w	r2, r3, #2
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	330c      	adds	r3, #12
 800ae4a:	2202      	movs	r2, #2
 800ae4c:	4619      	mov	r1, r3
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f000 f900 	bl	800b054 <USBD_CtlSendData>
      break;
 800ae54:	e004      	b.n	800ae60 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ae56:	6839      	ldr	r1, [r7, #0]
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f000 f88a 	bl	800af72 <USBD_CtlError>
      break;
 800ae5e:	bf00      	nop
  }
}
 800ae60:	bf00      	nop
 800ae62:	3708      	adds	r7, #8
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}

0800ae68 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b082      	sub	sp, #8
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	885b      	ldrh	r3, [r3, #2]
 800ae76:	2b01      	cmp	r3, #1
 800ae78:	d107      	bne.n	800ae8a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2201      	movs	r2, #1
 800ae7e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f000 f940 	bl	800b108 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ae88:	e013      	b.n	800aeb2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	885b      	ldrh	r3, [r3, #2]
 800ae8e:	2b02      	cmp	r3, #2
 800ae90:	d10b      	bne.n	800aeaa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	889b      	ldrh	r3, [r3, #4]
 800ae96:	0a1b      	lsrs	r3, r3, #8
 800ae98:	b29b      	uxth	r3, r3
 800ae9a:	b2da      	uxtb	r2, r3
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f000 f930 	bl	800b108 <USBD_CtlSendStatus>
}
 800aea8:	e003      	b.n	800aeb2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800aeaa:	6839      	ldr	r1, [r7, #0]
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f000 f860 	bl	800af72 <USBD_CtlError>
}
 800aeb2:	bf00      	nop
 800aeb4:	3708      	adds	r7, #8
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}

0800aeba <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aeba:	b580      	push	{r7, lr}
 800aebc:	b082      	sub	sp, #8
 800aebe:	af00      	add	r7, sp, #0
 800aec0:	6078      	str	r0, [r7, #4]
 800aec2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aeca:	b2db      	uxtb	r3, r3
 800aecc:	3b01      	subs	r3, #1
 800aece:	2b02      	cmp	r3, #2
 800aed0:	d80b      	bhi.n	800aeea <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	885b      	ldrh	r3, [r3, #2]
 800aed6:	2b01      	cmp	r3, #1
 800aed8:	d10c      	bne.n	800aef4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2200      	movs	r2, #0
 800aede:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f000 f910 	bl	800b108 <USBD_CtlSendStatus>
      }
      break;
 800aee8:	e004      	b.n	800aef4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800aeea:	6839      	ldr	r1, [r7, #0]
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f000 f840 	bl	800af72 <USBD_CtlError>
      break;
 800aef2:	e000      	b.n	800aef6 <USBD_ClrFeature+0x3c>
      break;
 800aef4:	bf00      	nop
  }
}
 800aef6:	bf00      	nop
 800aef8:	3708      	adds	r7, #8
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}

0800aefe <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800aefe:	b580      	push	{r7, lr}
 800af00:	b084      	sub	sp, #16
 800af02:	af00      	add	r7, sp, #0
 800af04:	6078      	str	r0, [r7, #4]
 800af06:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	781a      	ldrb	r2, [r3, #0]
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	3301      	adds	r3, #1
 800af18:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	781a      	ldrb	r2, [r3, #0]
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	3301      	adds	r3, #1
 800af26:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800af28:	68f8      	ldr	r0, [r7, #12]
 800af2a:	f7ff fa17 	bl	800a35c <SWAPBYTE>
 800af2e:	4603      	mov	r3, r0
 800af30:	461a      	mov	r2, r3
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	3301      	adds	r3, #1
 800af3a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	3301      	adds	r3, #1
 800af40:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800af42:	68f8      	ldr	r0, [r7, #12]
 800af44:	f7ff fa0a 	bl	800a35c <SWAPBYTE>
 800af48:	4603      	mov	r3, r0
 800af4a:	461a      	mov	r2, r3
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	3301      	adds	r3, #1
 800af54:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	3301      	adds	r3, #1
 800af5a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800af5c:	68f8      	ldr	r0, [r7, #12]
 800af5e:	f7ff f9fd 	bl	800a35c <SWAPBYTE>
 800af62:	4603      	mov	r3, r0
 800af64:	461a      	mov	r2, r3
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	80da      	strh	r2, [r3, #6]
}
 800af6a:	bf00      	nop
 800af6c:	3710      	adds	r7, #16
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}

0800af72 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af72:	b580      	push	{r7, lr}
 800af74:	b082      	sub	sp, #8
 800af76:	af00      	add	r7, sp, #0
 800af78:	6078      	str	r0, [r7, #4]
 800af7a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800af7c:	2180      	movs	r1, #128	; 0x80
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f000 fd06 	bl	800b990 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800af84:	2100      	movs	r1, #0
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f000 fd02 	bl	800b990 <USBD_LL_StallEP>
}
 800af8c:	bf00      	nop
 800af8e:	3708      	adds	r7, #8
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}

0800af94 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b086      	sub	sp, #24
 800af98:	af00      	add	r7, sp, #0
 800af9a:	60f8      	str	r0, [r7, #12]
 800af9c:	60b9      	str	r1, [r7, #8]
 800af9e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800afa0:	2300      	movs	r3, #0
 800afa2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d036      	beq.n	800b018 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800afae:	6938      	ldr	r0, [r7, #16]
 800afb0:	f000 f836 	bl	800b020 <USBD_GetLen>
 800afb4:	4603      	mov	r3, r0
 800afb6:	3301      	adds	r3, #1
 800afb8:	b29b      	uxth	r3, r3
 800afba:	005b      	lsls	r3, r3, #1
 800afbc:	b29a      	uxth	r2, r3
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800afc2:	7dfb      	ldrb	r3, [r7, #23]
 800afc4:	68ba      	ldr	r2, [r7, #8]
 800afc6:	4413      	add	r3, r2
 800afc8:	687a      	ldr	r2, [r7, #4]
 800afca:	7812      	ldrb	r2, [r2, #0]
 800afcc:	701a      	strb	r2, [r3, #0]
  idx++;
 800afce:	7dfb      	ldrb	r3, [r7, #23]
 800afd0:	3301      	adds	r3, #1
 800afd2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800afd4:	7dfb      	ldrb	r3, [r7, #23]
 800afd6:	68ba      	ldr	r2, [r7, #8]
 800afd8:	4413      	add	r3, r2
 800afda:	2203      	movs	r2, #3
 800afdc:	701a      	strb	r2, [r3, #0]
  idx++;
 800afde:	7dfb      	ldrb	r3, [r7, #23]
 800afe0:	3301      	adds	r3, #1
 800afe2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800afe4:	e013      	b.n	800b00e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800afe6:	7dfb      	ldrb	r3, [r7, #23]
 800afe8:	68ba      	ldr	r2, [r7, #8]
 800afea:	4413      	add	r3, r2
 800afec:	693a      	ldr	r2, [r7, #16]
 800afee:	7812      	ldrb	r2, [r2, #0]
 800aff0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	3301      	adds	r3, #1
 800aff6:	613b      	str	r3, [r7, #16]
    idx++;
 800aff8:	7dfb      	ldrb	r3, [r7, #23]
 800affa:	3301      	adds	r3, #1
 800affc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800affe:	7dfb      	ldrb	r3, [r7, #23]
 800b000:	68ba      	ldr	r2, [r7, #8]
 800b002:	4413      	add	r3, r2
 800b004:	2200      	movs	r2, #0
 800b006:	701a      	strb	r2, [r3, #0]
    idx++;
 800b008:	7dfb      	ldrb	r3, [r7, #23]
 800b00a:	3301      	adds	r3, #1
 800b00c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	781b      	ldrb	r3, [r3, #0]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d1e7      	bne.n	800afe6 <USBD_GetString+0x52>
 800b016:	e000      	b.n	800b01a <USBD_GetString+0x86>
    return;
 800b018:	bf00      	nop
  }
}
 800b01a:	3718      	adds	r7, #24
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b020:	b480      	push	{r7}
 800b022:	b085      	sub	sp, #20
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b028:	2300      	movs	r3, #0
 800b02a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b030:	e005      	b.n	800b03e <USBD_GetLen+0x1e>
  {
    len++;
 800b032:	7bfb      	ldrb	r3, [r7, #15]
 800b034:	3301      	adds	r3, #1
 800b036:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	3301      	adds	r3, #1
 800b03c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	781b      	ldrb	r3, [r3, #0]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d1f5      	bne.n	800b032 <USBD_GetLen+0x12>
  }

  return len;
 800b046:	7bfb      	ldrb	r3, [r7, #15]
}
 800b048:	4618      	mov	r0, r3
 800b04a:	3714      	adds	r7, #20
 800b04c:	46bd      	mov	sp, r7
 800b04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b052:	4770      	bx	lr

0800b054 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b084      	sub	sp, #16
 800b058:	af00      	add	r7, sp, #0
 800b05a:	60f8      	str	r0, [r7, #12]
 800b05c:	60b9      	str	r1, [r7, #8]
 800b05e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	2202      	movs	r2, #2
 800b064:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	687a      	ldr	r2, [r7, #4]
 800b06c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	687a      	ldr	r2, [r7, #4]
 800b072:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	68ba      	ldr	r2, [r7, #8]
 800b078:	2100      	movs	r1, #0
 800b07a:	68f8      	ldr	r0, [r7, #12]
 800b07c:	f000 fd11 	bl	800baa2 <USBD_LL_Transmit>

  return USBD_OK;
 800b080:	2300      	movs	r3, #0
}
 800b082:	4618      	mov	r0, r3
 800b084:	3710      	adds	r7, #16
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}

0800b08a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b08a:	b580      	push	{r7, lr}
 800b08c:	b084      	sub	sp, #16
 800b08e:	af00      	add	r7, sp, #0
 800b090:	60f8      	str	r0, [r7, #12]
 800b092:	60b9      	str	r1, [r7, #8]
 800b094:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	68ba      	ldr	r2, [r7, #8]
 800b09a:	2100      	movs	r1, #0
 800b09c:	68f8      	ldr	r0, [r7, #12]
 800b09e:	f000 fd00 	bl	800baa2 <USBD_LL_Transmit>

  return USBD_OK;
 800b0a2:	2300      	movs	r3, #0
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	3710      	adds	r7, #16
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd80      	pop	{r7, pc}

0800b0ac <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b084      	sub	sp, #16
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	60f8      	str	r0, [r7, #12]
 800b0b4:	60b9      	str	r1, [r7, #8]
 800b0b6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	2203      	movs	r2, #3
 800b0bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	687a      	ldr	r2, [r7, #4]
 800b0c4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	687a      	ldr	r2, [r7, #4]
 800b0cc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	68ba      	ldr	r2, [r7, #8]
 800b0d4:	2100      	movs	r1, #0
 800b0d6:	68f8      	ldr	r0, [r7, #12]
 800b0d8:	f000 fd04 	bl	800bae4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b0dc:	2300      	movs	r3, #0
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3710      	adds	r7, #16
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}

0800b0e6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b0e6:	b580      	push	{r7, lr}
 800b0e8:	b084      	sub	sp, #16
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	60f8      	str	r0, [r7, #12]
 800b0ee:	60b9      	str	r1, [r7, #8]
 800b0f0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	68ba      	ldr	r2, [r7, #8]
 800b0f6:	2100      	movs	r1, #0
 800b0f8:	68f8      	ldr	r0, [r7, #12]
 800b0fa:	f000 fcf3 	bl	800bae4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b0fe:	2300      	movs	r3, #0
}
 800b100:	4618      	mov	r0, r3
 800b102:	3710      	adds	r7, #16
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}

0800b108 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b082      	sub	sp, #8
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2204      	movs	r2, #4
 800b114:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b118:	2300      	movs	r3, #0
 800b11a:	2200      	movs	r2, #0
 800b11c:	2100      	movs	r1, #0
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f000 fcbf 	bl	800baa2 <USBD_LL_Transmit>

  return USBD_OK;
 800b124:	2300      	movs	r3, #0
}
 800b126:	4618      	mov	r0, r3
 800b128:	3708      	adds	r7, #8
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}

0800b12e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b12e:	b580      	push	{r7, lr}
 800b130:	b082      	sub	sp, #8
 800b132:	af00      	add	r7, sp, #0
 800b134:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2205      	movs	r2, #5
 800b13a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b13e:	2300      	movs	r3, #0
 800b140:	2200      	movs	r2, #0
 800b142:	2100      	movs	r1, #0
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f000 fccd 	bl	800bae4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b14a:	2300      	movs	r3, #0
}
 800b14c:	4618      	mov	r0, r3
 800b14e:	3708      	adds	r7, #8
 800b150:	46bd      	mov	sp, r7
 800b152:	bd80      	pop	{r7, pc}

0800b154 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b158:	2200      	movs	r2, #0
 800b15a:	4913      	ldr	r1, [pc, #76]	; (800b1a8 <MX_USB_DEVICE_Init+0x54>)
 800b15c:	4813      	ldr	r0, [pc, #76]	; (800b1ac <MX_USB_DEVICE_Init+0x58>)
 800b15e:	f7fe fcd7 	bl	8009b10 <USBD_Init>
 800b162:	4603      	mov	r3, r0
 800b164:	2b00      	cmp	r3, #0
 800b166:	d001      	beq.n	800b16c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b168:	f7f5 fe28 	bl	8000dbc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b16c:	4910      	ldr	r1, [pc, #64]	; (800b1b0 <MX_USB_DEVICE_Init+0x5c>)
 800b16e:	480f      	ldr	r0, [pc, #60]	; (800b1ac <MX_USB_DEVICE_Init+0x58>)
 800b170:	f7fe fcfe 	bl	8009b70 <USBD_RegisterClass>
 800b174:	4603      	mov	r3, r0
 800b176:	2b00      	cmp	r3, #0
 800b178:	d001      	beq.n	800b17e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b17a:	f7f5 fe1f 	bl	8000dbc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b17e:	490d      	ldr	r1, [pc, #52]	; (800b1b4 <MX_USB_DEVICE_Init+0x60>)
 800b180:	480a      	ldr	r0, [pc, #40]	; (800b1ac <MX_USB_DEVICE_Init+0x58>)
 800b182:	f7fe fbf5 	bl	8009970 <USBD_CDC_RegisterInterface>
 800b186:	4603      	mov	r3, r0
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d001      	beq.n	800b190 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b18c:	f7f5 fe16 	bl	8000dbc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b190:	4806      	ldr	r0, [pc, #24]	; (800b1ac <MX_USB_DEVICE_Init+0x58>)
 800b192:	f7fe fd23 	bl	8009bdc <USBD_Start>
 800b196:	4603      	mov	r3, r0
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d001      	beq.n	800b1a0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b19c:	f7f5 fe0e 	bl	8000dbc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800b1a0:	f7f8 ffb2 	bl	8004108 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b1a4:	bf00      	nop
 800b1a6:	bd80      	pop	{r7, pc}
 800b1a8:	240000f0 	.word	0x240000f0
 800b1ac:	24000520 	.word	0x24000520
 800b1b0:	2400005c 	.word	0x2400005c
 800b1b4:	240000dc 	.word	0x240000dc

0800b1b8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b1bc:	2200      	movs	r2, #0
 800b1be:	4905      	ldr	r1, [pc, #20]	; (800b1d4 <CDC_Init_FS+0x1c>)
 800b1c0:	4805      	ldr	r0, [pc, #20]	; (800b1d8 <CDC_Init_FS+0x20>)
 800b1c2:	f7fe fbef 	bl	80099a4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b1c6:	4905      	ldr	r1, [pc, #20]	; (800b1dc <CDC_Init_FS+0x24>)
 800b1c8:	4803      	ldr	r0, [pc, #12]	; (800b1d8 <CDC_Init_FS+0x20>)
 800b1ca:	f7fe fc0d 	bl	80099e8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b1ce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	bd80      	pop	{r7, pc}
 800b1d4:	24000ffc 	.word	0x24000ffc
 800b1d8:	24000520 	.word	0x24000520
 800b1dc:	240007fc 	.word	0x240007fc

0800b1e0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b1e4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ee:	4770      	bx	lr

0800b1f0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b083      	sub	sp, #12
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	6039      	str	r1, [r7, #0]
 800b1fa:	71fb      	strb	r3, [r7, #7]
 800b1fc:	4613      	mov	r3, r2
 800b1fe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b200:	79fb      	ldrb	r3, [r7, #7]
 800b202:	2b23      	cmp	r3, #35	; 0x23
 800b204:	d84a      	bhi.n	800b29c <CDC_Control_FS+0xac>
 800b206:	a201      	add	r2, pc, #4	; (adr r2, 800b20c <CDC_Control_FS+0x1c>)
 800b208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b20c:	0800b29d 	.word	0x0800b29d
 800b210:	0800b29d 	.word	0x0800b29d
 800b214:	0800b29d 	.word	0x0800b29d
 800b218:	0800b29d 	.word	0x0800b29d
 800b21c:	0800b29d 	.word	0x0800b29d
 800b220:	0800b29d 	.word	0x0800b29d
 800b224:	0800b29d 	.word	0x0800b29d
 800b228:	0800b29d 	.word	0x0800b29d
 800b22c:	0800b29d 	.word	0x0800b29d
 800b230:	0800b29d 	.word	0x0800b29d
 800b234:	0800b29d 	.word	0x0800b29d
 800b238:	0800b29d 	.word	0x0800b29d
 800b23c:	0800b29d 	.word	0x0800b29d
 800b240:	0800b29d 	.word	0x0800b29d
 800b244:	0800b29d 	.word	0x0800b29d
 800b248:	0800b29d 	.word	0x0800b29d
 800b24c:	0800b29d 	.word	0x0800b29d
 800b250:	0800b29d 	.word	0x0800b29d
 800b254:	0800b29d 	.word	0x0800b29d
 800b258:	0800b29d 	.word	0x0800b29d
 800b25c:	0800b29d 	.word	0x0800b29d
 800b260:	0800b29d 	.word	0x0800b29d
 800b264:	0800b29d 	.word	0x0800b29d
 800b268:	0800b29d 	.word	0x0800b29d
 800b26c:	0800b29d 	.word	0x0800b29d
 800b270:	0800b29d 	.word	0x0800b29d
 800b274:	0800b29d 	.word	0x0800b29d
 800b278:	0800b29d 	.word	0x0800b29d
 800b27c:	0800b29d 	.word	0x0800b29d
 800b280:	0800b29d 	.word	0x0800b29d
 800b284:	0800b29d 	.word	0x0800b29d
 800b288:	0800b29d 	.word	0x0800b29d
 800b28c:	0800b29d 	.word	0x0800b29d
 800b290:	0800b29d 	.word	0x0800b29d
 800b294:	0800b29d 	.word	0x0800b29d
 800b298:	0800b29d 	.word	0x0800b29d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b29c:	bf00      	nop
  }

  return (USBD_OK);
 800b29e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	370c      	adds	r7, #12
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2aa:	4770      	bx	lr

0800b2ac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b082      	sub	sp, #8
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
 800b2b4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b2b6:	6879      	ldr	r1, [r7, #4]
 800b2b8:	4805      	ldr	r0, [pc, #20]	; (800b2d0 <CDC_Receive_FS+0x24>)
 800b2ba:	f7fe fb95 	bl	80099e8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b2be:	4804      	ldr	r0, [pc, #16]	; (800b2d0 <CDC_Receive_FS+0x24>)
 800b2c0:	f7fe fbf0 	bl	8009aa4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b2c4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3708      	adds	r7, #8
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}
 800b2ce:	bf00      	nop
 800b2d0:	24000520 	.word	0x24000520

0800b2d4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b084      	sub	sp, #16
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
 800b2dc:	460b      	mov	r3, r1
 800b2de:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b2e4:	4b0d      	ldr	r3, [pc, #52]	; (800b31c <CDC_Transmit_FS+0x48>)
 800b2e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b2ea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d001      	beq.n	800b2fa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	e00b      	b.n	800b312 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b2fa:	887b      	ldrh	r3, [r7, #2]
 800b2fc:	461a      	mov	r2, r3
 800b2fe:	6879      	ldr	r1, [r7, #4]
 800b300:	4806      	ldr	r0, [pc, #24]	; (800b31c <CDC_Transmit_FS+0x48>)
 800b302:	f7fe fb4f 	bl	80099a4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b306:	4805      	ldr	r0, [pc, #20]	; (800b31c <CDC_Transmit_FS+0x48>)
 800b308:	f7fe fb8c 	bl	8009a24 <USBD_CDC_TransmitPacket>
 800b30c:	4603      	mov	r3, r0
 800b30e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b310:	7bfb      	ldrb	r3, [r7, #15]
}
 800b312:	4618      	mov	r0, r3
 800b314:	3710      	adds	r7, #16
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}
 800b31a:	bf00      	nop
 800b31c:	24000520 	.word	0x24000520

0800b320 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b320:	b480      	push	{r7}
 800b322:	b087      	sub	sp, #28
 800b324:	af00      	add	r7, sp, #0
 800b326:	60f8      	str	r0, [r7, #12]
 800b328:	60b9      	str	r1, [r7, #8]
 800b32a:	4613      	mov	r3, r2
 800b32c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b32e:	2300      	movs	r3, #0
 800b330:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b332:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b336:	4618      	mov	r0, r3
 800b338:	371c      	adds	r7, #28
 800b33a:	46bd      	mov	sp, r7
 800b33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b340:	4770      	bx	lr
	...

0800b344 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b344:	b480      	push	{r7}
 800b346:	b083      	sub	sp, #12
 800b348:	af00      	add	r7, sp, #0
 800b34a:	4603      	mov	r3, r0
 800b34c:	6039      	str	r1, [r7, #0]
 800b34e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	2212      	movs	r2, #18
 800b354:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b356:	4b03      	ldr	r3, [pc, #12]	; (800b364 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b358:	4618      	mov	r0, r3
 800b35a:	370c      	adds	r7, #12
 800b35c:	46bd      	mov	sp, r7
 800b35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b362:	4770      	bx	lr
 800b364:	24000110 	.word	0x24000110

0800b368 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b368:	b480      	push	{r7}
 800b36a:	b083      	sub	sp, #12
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	4603      	mov	r3, r0
 800b370:	6039      	str	r1, [r7, #0]
 800b372:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	2204      	movs	r2, #4
 800b378:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b37a:	4b03      	ldr	r3, [pc, #12]	; (800b388 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	370c      	adds	r7, #12
 800b380:	46bd      	mov	sp, r7
 800b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b386:	4770      	bx	lr
 800b388:	24000124 	.word	0x24000124

0800b38c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b082      	sub	sp, #8
 800b390:	af00      	add	r7, sp, #0
 800b392:	4603      	mov	r3, r0
 800b394:	6039      	str	r1, [r7, #0]
 800b396:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b398:	79fb      	ldrb	r3, [r7, #7]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d105      	bne.n	800b3aa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b39e:	683a      	ldr	r2, [r7, #0]
 800b3a0:	4907      	ldr	r1, [pc, #28]	; (800b3c0 <USBD_FS_ProductStrDescriptor+0x34>)
 800b3a2:	4808      	ldr	r0, [pc, #32]	; (800b3c4 <USBD_FS_ProductStrDescriptor+0x38>)
 800b3a4:	f7ff fdf6 	bl	800af94 <USBD_GetString>
 800b3a8:	e004      	b.n	800b3b4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b3aa:	683a      	ldr	r2, [r7, #0]
 800b3ac:	4904      	ldr	r1, [pc, #16]	; (800b3c0 <USBD_FS_ProductStrDescriptor+0x34>)
 800b3ae:	4805      	ldr	r0, [pc, #20]	; (800b3c4 <USBD_FS_ProductStrDescriptor+0x38>)
 800b3b0:	f7ff fdf0 	bl	800af94 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b3b4:	4b02      	ldr	r3, [pc, #8]	; (800b3c0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	3708      	adds	r7, #8
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bd80      	pop	{r7, pc}
 800b3be:	bf00      	nop
 800b3c0:	240017fc 	.word	0x240017fc
 800b3c4:	0800e7e0 	.word	0x0800e7e0

0800b3c8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b082      	sub	sp, #8
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	6039      	str	r1, [r7, #0]
 800b3d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b3d4:	683a      	ldr	r2, [r7, #0]
 800b3d6:	4904      	ldr	r1, [pc, #16]	; (800b3e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b3d8:	4804      	ldr	r0, [pc, #16]	; (800b3ec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b3da:	f7ff fddb 	bl	800af94 <USBD_GetString>
  return USBD_StrDesc;
 800b3de:	4b02      	ldr	r3, [pc, #8]	; (800b3e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3708      	adds	r7, #8
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}
 800b3e8:	240017fc 	.word	0x240017fc
 800b3ec:	0800e7f8 	.word	0x0800e7f8

0800b3f0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b082      	sub	sp, #8
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	6039      	str	r1, [r7, #0]
 800b3fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	221a      	movs	r2, #26
 800b400:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b402:	f000 f843 	bl	800b48c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b406:	4b02      	ldr	r3, [pc, #8]	; (800b410 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b408:	4618      	mov	r0, r3
 800b40a:	3708      	adds	r7, #8
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bd80      	pop	{r7, pc}
 800b410:	24000128 	.word	0x24000128

0800b414 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b082      	sub	sp, #8
 800b418:	af00      	add	r7, sp, #0
 800b41a:	4603      	mov	r3, r0
 800b41c:	6039      	str	r1, [r7, #0]
 800b41e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b420:	79fb      	ldrb	r3, [r7, #7]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d105      	bne.n	800b432 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b426:	683a      	ldr	r2, [r7, #0]
 800b428:	4907      	ldr	r1, [pc, #28]	; (800b448 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b42a:	4808      	ldr	r0, [pc, #32]	; (800b44c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b42c:	f7ff fdb2 	bl	800af94 <USBD_GetString>
 800b430:	e004      	b.n	800b43c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b432:	683a      	ldr	r2, [r7, #0]
 800b434:	4904      	ldr	r1, [pc, #16]	; (800b448 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b436:	4805      	ldr	r0, [pc, #20]	; (800b44c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b438:	f7ff fdac 	bl	800af94 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b43c:	4b02      	ldr	r3, [pc, #8]	; (800b448 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b43e:	4618      	mov	r0, r3
 800b440:	3708      	adds	r7, #8
 800b442:	46bd      	mov	sp, r7
 800b444:	bd80      	pop	{r7, pc}
 800b446:	bf00      	nop
 800b448:	240017fc 	.word	0x240017fc
 800b44c:	0800e80c 	.word	0x0800e80c

0800b450 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b082      	sub	sp, #8
 800b454:	af00      	add	r7, sp, #0
 800b456:	4603      	mov	r3, r0
 800b458:	6039      	str	r1, [r7, #0]
 800b45a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b45c:	79fb      	ldrb	r3, [r7, #7]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d105      	bne.n	800b46e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b462:	683a      	ldr	r2, [r7, #0]
 800b464:	4907      	ldr	r1, [pc, #28]	; (800b484 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b466:	4808      	ldr	r0, [pc, #32]	; (800b488 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b468:	f7ff fd94 	bl	800af94 <USBD_GetString>
 800b46c:	e004      	b.n	800b478 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b46e:	683a      	ldr	r2, [r7, #0]
 800b470:	4904      	ldr	r1, [pc, #16]	; (800b484 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b472:	4805      	ldr	r0, [pc, #20]	; (800b488 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b474:	f7ff fd8e 	bl	800af94 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b478:	4b02      	ldr	r3, [pc, #8]	; (800b484 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b47a:	4618      	mov	r0, r3
 800b47c:	3708      	adds	r7, #8
 800b47e:	46bd      	mov	sp, r7
 800b480:	bd80      	pop	{r7, pc}
 800b482:	bf00      	nop
 800b484:	240017fc 	.word	0x240017fc
 800b488:	0800e818 	.word	0x0800e818

0800b48c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b084      	sub	sp, #16
 800b490:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b492:	4b0f      	ldr	r3, [pc, #60]	; (800b4d0 <Get_SerialNum+0x44>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b498:	4b0e      	ldr	r3, [pc, #56]	; (800b4d4 <Get_SerialNum+0x48>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b49e:	4b0e      	ldr	r3, [pc, #56]	; (800b4d8 <Get_SerialNum+0x4c>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b4a4:	68fa      	ldr	r2, [r7, #12]
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	4413      	add	r3, r2
 800b4aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d009      	beq.n	800b4c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b4b2:	2208      	movs	r2, #8
 800b4b4:	4909      	ldr	r1, [pc, #36]	; (800b4dc <Get_SerialNum+0x50>)
 800b4b6:	68f8      	ldr	r0, [r7, #12]
 800b4b8:	f000 f814 	bl	800b4e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b4bc:	2204      	movs	r2, #4
 800b4be:	4908      	ldr	r1, [pc, #32]	; (800b4e0 <Get_SerialNum+0x54>)
 800b4c0:	68b8      	ldr	r0, [r7, #8]
 800b4c2:	f000 f80f 	bl	800b4e4 <IntToUnicode>
  }
}
 800b4c6:	bf00      	nop
 800b4c8:	3710      	adds	r7, #16
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}
 800b4ce:	bf00      	nop
 800b4d0:	1ff1e800 	.word	0x1ff1e800
 800b4d4:	1ff1e804 	.word	0x1ff1e804
 800b4d8:	1ff1e808 	.word	0x1ff1e808
 800b4dc:	2400012a 	.word	0x2400012a
 800b4e0:	2400013a 	.word	0x2400013a

0800b4e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b087      	sub	sp, #28
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	60f8      	str	r0, [r7, #12]
 800b4ec:	60b9      	str	r1, [r7, #8]
 800b4ee:	4613      	mov	r3, r2
 800b4f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	75fb      	strb	r3, [r7, #23]
 800b4fa:	e027      	b.n	800b54c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	0f1b      	lsrs	r3, r3, #28
 800b500:	2b09      	cmp	r3, #9
 800b502:	d80b      	bhi.n	800b51c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	0f1b      	lsrs	r3, r3, #28
 800b508:	b2da      	uxtb	r2, r3
 800b50a:	7dfb      	ldrb	r3, [r7, #23]
 800b50c:	005b      	lsls	r3, r3, #1
 800b50e:	4619      	mov	r1, r3
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	440b      	add	r3, r1
 800b514:	3230      	adds	r2, #48	; 0x30
 800b516:	b2d2      	uxtb	r2, r2
 800b518:	701a      	strb	r2, [r3, #0]
 800b51a:	e00a      	b.n	800b532 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	0f1b      	lsrs	r3, r3, #28
 800b520:	b2da      	uxtb	r2, r3
 800b522:	7dfb      	ldrb	r3, [r7, #23]
 800b524:	005b      	lsls	r3, r3, #1
 800b526:	4619      	mov	r1, r3
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	440b      	add	r3, r1
 800b52c:	3237      	adds	r2, #55	; 0x37
 800b52e:	b2d2      	uxtb	r2, r2
 800b530:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	011b      	lsls	r3, r3, #4
 800b536:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b538:	7dfb      	ldrb	r3, [r7, #23]
 800b53a:	005b      	lsls	r3, r3, #1
 800b53c:	3301      	adds	r3, #1
 800b53e:	68ba      	ldr	r2, [r7, #8]
 800b540:	4413      	add	r3, r2
 800b542:	2200      	movs	r2, #0
 800b544:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b546:	7dfb      	ldrb	r3, [r7, #23]
 800b548:	3301      	adds	r3, #1
 800b54a:	75fb      	strb	r3, [r7, #23]
 800b54c:	7dfa      	ldrb	r2, [r7, #23]
 800b54e:	79fb      	ldrb	r3, [r7, #7]
 800b550:	429a      	cmp	r2, r3
 800b552:	d3d3      	bcc.n	800b4fc <IntToUnicode+0x18>
  }
}
 800b554:	bf00      	nop
 800b556:	bf00      	nop
 800b558:	371c      	adds	r7, #28
 800b55a:	46bd      	mov	sp, r7
 800b55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b560:	4770      	bx	lr
	...

0800b564 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b0ba      	sub	sp, #232	; 0xe8
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b56c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800b570:	2200      	movs	r2, #0
 800b572:	601a      	str	r2, [r3, #0]
 800b574:	605a      	str	r2, [r3, #4]
 800b576:	609a      	str	r2, [r3, #8]
 800b578:	60da      	str	r2, [r3, #12]
 800b57a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b57c:	f107 0310 	add.w	r3, r7, #16
 800b580:	22c0      	movs	r2, #192	; 0xc0
 800b582:	2100      	movs	r1, #0
 800b584:	4618      	mov	r0, r3
 800b586:	f001 f942 	bl	800c80e <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	4a2c      	ldr	r2, [pc, #176]	; (800b640 <HAL_PCD_MspInit+0xdc>)
 800b590:	4293      	cmp	r3, r2
 800b592:	d151      	bne.n	800b638 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b594:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800b598:	f04f 0300 	mov.w	r3, #0
 800b59c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800b5a0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b5a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b5a8:	f107 0310 	add.w	r3, r7, #16
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f7f9 fd8b 	bl	80050c8 <HAL_RCCEx_PeriphCLKConfig>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d001      	beq.n	800b5bc <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800b5b8:	f7f5 fc00 	bl	8000dbc <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800b5bc:	f7f8 fda4 	bl	8004108 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b5c0:	4b20      	ldr	r3, [pc, #128]	; (800b644 <HAL_PCD_MspInit+0xe0>)
 800b5c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b5c6:	4a1f      	ldr	r2, [pc, #124]	; (800b644 <HAL_PCD_MspInit+0xe0>)
 800b5c8:	f043 0301 	orr.w	r3, r3, #1
 800b5cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b5d0:	4b1c      	ldr	r3, [pc, #112]	; (800b644 <HAL_PCD_MspInit+0xe0>)
 800b5d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b5d6:	f003 0301 	and.w	r3, r3, #1
 800b5da:	60fb      	str	r3, [r7, #12]
 800b5dc:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b5de:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b5e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b5e6:	2302      	movs	r3, #2
 800b5e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800b5f8:	230a      	movs	r3, #10
 800b5fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b5fe:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800b602:	4619      	mov	r1, r3
 800b604:	4810      	ldr	r0, [pc, #64]	; (800b648 <HAL_PCD_MspInit+0xe4>)
 800b606:	f7f7 f8db 	bl	80027c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b60a:	4b0e      	ldr	r3, [pc, #56]	; (800b644 <HAL_PCD_MspInit+0xe0>)
 800b60c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b610:	4a0c      	ldr	r2, [pc, #48]	; (800b644 <HAL_PCD_MspInit+0xe0>)
 800b612:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b616:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800b61a:	4b0a      	ldr	r3, [pc, #40]	; (800b644 <HAL_PCD_MspInit+0xe0>)
 800b61c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b620:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b624:	60bb      	str	r3, [r7, #8]
 800b626:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b628:	2200      	movs	r2, #0
 800b62a:	2100      	movs	r1, #0
 800b62c:	2065      	movs	r0, #101	; 0x65
 800b62e:	f7f7 f892 	bl	8002756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b632:	2065      	movs	r0, #101	; 0x65
 800b634:	f7f7 f8a9 	bl	800278a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b638:	bf00      	nop
 800b63a:	37e8      	adds	r7, #232	; 0xe8
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}
 800b640:	40080000 	.word	0x40080000
 800b644:	58024400 	.word	0x58024400
 800b648:	58020000 	.word	0x58020000

0800b64c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b082      	sub	sp, #8
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b660:	4619      	mov	r1, r3
 800b662:	4610      	mov	r0, r2
 800b664:	f7fe fb07 	bl	8009c76 <USBD_LL_SetupStage>
}
 800b668:	bf00      	nop
 800b66a:	3708      	adds	r7, #8
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}

0800b670 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b082      	sub	sp, #8
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
 800b678:	460b      	mov	r3, r1
 800b67a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b682:	78fa      	ldrb	r2, [r7, #3]
 800b684:	6879      	ldr	r1, [r7, #4]
 800b686:	4613      	mov	r3, r2
 800b688:	00db      	lsls	r3, r3, #3
 800b68a:	4413      	add	r3, r2
 800b68c:	009b      	lsls	r3, r3, #2
 800b68e:	440b      	add	r3, r1
 800b690:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800b694:	681a      	ldr	r2, [r3, #0]
 800b696:	78fb      	ldrb	r3, [r7, #3]
 800b698:	4619      	mov	r1, r3
 800b69a:	f7fe fb41 	bl	8009d20 <USBD_LL_DataOutStage>
}
 800b69e:	bf00      	nop
 800b6a0:	3708      	adds	r7, #8
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}

0800b6a6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6a6:	b580      	push	{r7, lr}
 800b6a8:	b082      	sub	sp, #8
 800b6aa:	af00      	add	r7, sp, #0
 800b6ac:	6078      	str	r0, [r7, #4]
 800b6ae:	460b      	mov	r3, r1
 800b6b0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b6b8:	78fa      	ldrb	r2, [r7, #3]
 800b6ba:	6879      	ldr	r1, [r7, #4]
 800b6bc:	4613      	mov	r3, r2
 800b6be:	00db      	lsls	r3, r3, #3
 800b6c0:	4413      	add	r3, r2
 800b6c2:	009b      	lsls	r3, r3, #2
 800b6c4:	440b      	add	r3, r1
 800b6c6:	3348      	adds	r3, #72	; 0x48
 800b6c8:	681a      	ldr	r2, [r3, #0]
 800b6ca:	78fb      	ldrb	r3, [r7, #3]
 800b6cc:	4619      	mov	r1, r3
 800b6ce:	f7fe fbda 	bl	8009e86 <USBD_LL_DataInStage>
}
 800b6d2:	bf00      	nop
 800b6d4:	3708      	adds	r7, #8
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}

0800b6da <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6da:	b580      	push	{r7, lr}
 800b6dc:	b082      	sub	sp, #8
 800b6de:	af00      	add	r7, sp, #0
 800b6e0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f7fe fd14 	bl	800a116 <USBD_LL_SOF>
}
 800b6ee:	bf00      	nop
 800b6f0:	3708      	adds	r7, #8
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}

0800b6f6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6f6:	b580      	push	{r7, lr}
 800b6f8:	b084      	sub	sp, #16
 800b6fa:	af00      	add	r7, sp, #0
 800b6fc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b6fe:	2301      	movs	r3, #1
 800b700:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	691b      	ldr	r3, [r3, #16]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d102      	bne.n	800b710 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b70a:	2300      	movs	r3, #0
 800b70c:	73fb      	strb	r3, [r7, #15]
 800b70e:	e008      	b.n	800b722 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	691b      	ldr	r3, [r3, #16]
 800b714:	2b02      	cmp	r3, #2
 800b716:	d102      	bne.n	800b71e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b718:	2301      	movs	r3, #1
 800b71a:	73fb      	strb	r3, [r7, #15]
 800b71c:	e001      	b.n	800b722 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b71e:	f7f5 fb4d 	bl	8000dbc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b728:	7bfa      	ldrb	r2, [r7, #15]
 800b72a:	4611      	mov	r1, r2
 800b72c:	4618      	mov	r0, r3
 800b72e:	f7fe fcae 	bl	800a08e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b738:	4618      	mov	r0, r3
 800b73a:	f7fe fc56 	bl	8009fea <USBD_LL_Reset>
}
 800b73e:	bf00      	nop
 800b740:	3710      	adds	r7, #16
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}
	...

0800b748 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b082      	sub	sp, #8
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b756:	4618      	mov	r0, r3
 800b758:	f7fe fca9 	bl	800a0ae <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	687a      	ldr	r2, [r7, #4]
 800b768:	6812      	ldr	r2, [r2, #0]
 800b76a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b76e:	f043 0301 	orr.w	r3, r3, #1
 800b772:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	6a1b      	ldr	r3, [r3, #32]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d005      	beq.n	800b788 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b77c:	4b04      	ldr	r3, [pc, #16]	; (800b790 <HAL_PCD_SuspendCallback+0x48>)
 800b77e:	691b      	ldr	r3, [r3, #16]
 800b780:	4a03      	ldr	r2, [pc, #12]	; (800b790 <HAL_PCD_SuspendCallback+0x48>)
 800b782:	f043 0306 	orr.w	r3, r3, #6
 800b786:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b788:	bf00      	nop
 800b78a:	3708      	adds	r7, #8
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd80      	pop	{r7, pc}
 800b790:	e000ed00 	.word	0xe000ed00

0800b794 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b082      	sub	sp, #8
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	f7fe fc9f 	bl	800a0e6 <USBD_LL_Resume>
}
 800b7a8:	bf00      	nop
 800b7aa:	3708      	adds	r7, #8
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}

0800b7b0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b082      	sub	sp, #8
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
 800b7b8:	460b      	mov	r3, r1
 800b7ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b7c2:	78fa      	ldrb	r2, [r7, #3]
 800b7c4:	4611      	mov	r1, r2
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f7fe fcf7 	bl	800a1ba <USBD_LL_IsoOUTIncomplete>
}
 800b7cc:	bf00      	nop
 800b7ce:	3708      	adds	r7, #8
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}

0800b7d4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b082      	sub	sp, #8
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
 800b7dc:	460b      	mov	r3, r1
 800b7de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b7e6:	78fa      	ldrb	r2, [r7, #3]
 800b7e8:	4611      	mov	r1, r2
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f7fe fcb3 	bl	800a156 <USBD_LL_IsoINIncomplete>
}
 800b7f0:	bf00      	nop
 800b7f2:	3708      	adds	r7, #8
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}

0800b7f8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b082      	sub	sp, #8
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b806:	4618      	mov	r0, r3
 800b808:	f7fe fd09 	bl	800a21e <USBD_LL_DevConnected>
}
 800b80c:	bf00      	nop
 800b80e:	3708      	adds	r7, #8
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}

0800b814 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b082      	sub	sp, #8
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b822:	4618      	mov	r0, r3
 800b824:	f7fe fd06 	bl	800a234 <USBD_LL_DevDisconnected>
}
 800b828:	bf00      	nop
 800b82a:	3708      	adds	r7, #8
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}

0800b830 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b082      	sub	sp, #8
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	781b      	ldrb	r3, [r3, #0]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d13e      	bne.n	800b8be <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b840:	4a21      	ldr	r2, [pc, #132]	; (800b8c8 <USBD_LL_Init+0x98>)
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	4a1f      	ldr	r2, [pc, #124]	; (800b8c8 <USBD_LL_Init+0x98>)
 800b84c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b850:	4b1d      	ldr	r3, [pc, #116]	; (800b8c8 <USBD_LL_Init+0x98>)
 800b852:	4a1e      	ldr	r2, [pc, #120]	; (800b8cc <USBD_LL_Init+0x9c>)
 800b854:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800b856:	4b1c      	ldr	r3, [pc, #112]	; (800b8c8 <USBD_LL_Init+0x98>)
 800b858:	2209      	movs	r2, #9
 800b85a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b85c:	4b1a      	ldr	r3, [pc, #104]	; (800b8c8 <USBD_LL_Init+0x98>)
 800b85e:	2202      	movs	r2, #2
 800b860:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b862:	4b19      	ldr	r3, [pc, #100]	; (800b8c8 <USBD_LL_Init+0x98>)
 800b864:	2200      	movs	r2, #0
 800b866:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b868:	4b17      	ldr	r3, [pc, #92]	; (800b8c8 <USBD_LL_Init+0x98>)
 800b86a:	2202      	movs	r2, #2
 800b86c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b86e:	4b16      	ldr	r3, [pc, #88]	; (800b8c8 <USBD_LL_Init+0x98>)
 800b870:	2200      	movs	r2, #0
 800b872:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b874:	4b14      	ldr	r3, [pc, #80]	; (800b8c8 <USBD_LL_Init+0x98>)
 800b876:	2200      	movs	r2, #0
 800b878:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b87a:	4b13      	ldr	r3, [pc, #76]	; (800b8c8 <USBD_LL_Init+0x98>)
 800b87c:	2200      	movs	r2, #0
 800b87e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800b880:	4b11      	ldr	r3, [pc, #68]	; (800b8c8 <USBD_LL_Init+0x98>)
 800b882:	2200      	movs	r2, #0
 800b884:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b886:	4b10      	ldr	r3, [pc, #64]	; (800b8c8 <USBD_LL_Init+0x98>)
 800b888:	2200      	movs	r2, #0
 800b88a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b88c:	4b0e      	ldr	r3, [pc, #56]	; (800b8c8 <USBD_LL_Init+0x98>)
 800b88e:	2200      	movs	r2, #0
 800b890:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b892:	480d      	ldr	r0, [pc, #52]	; (800b8c8 <USBD_LL_Init+0x98>)
 800b894:	f7f7 f944 	bl	8002b20 <HAL_PCD_Init>
 800b898:	4603      	mov	r3, r0
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d001      	beq.n	800b8a2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800b89e:	f7f5 fa8d 	bl	8000dbc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b8a2:	2180      	movs	r1, #128	; 0x80
 800b8a4:	4808      	ldr	r0, [pc, #32]	; (800b8c8 <USBD_LL_Init+0x98>)
 800b8a6:	f7f8 fbb4 	bl	8004012 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b8aa:	2240      	movs	r2, #64	; 0x40
 800b8ac:	2100      	movs	r1, #0
 800b8ae:	4806      	ldr	r0, [pc, #24]	; (800b8c8 <USBD_LL_Init+0x98>)
 800b8b0:	f7f8 fb68 	bl	8003f84 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b8b4:	2280      	movs	r2, #128	; 0x80
 800b8b6:	2101      	movs	r1, #1
 800b8b8:	4803      	ldr	r0, [pc, #12]	; (800b8c8 <USBD_LL_Init+0x98>)
 800b8ba:	f7f8 fb63 	bl	8003f84 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800b8be:	2300      	movs	r3, #0
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	3708      	adds	r7, #8
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}
 800b8c8:	240019fc 	.word	0x240019fc
 800b8cc:	40080000 	.word	0x40080000

0800b8d0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b084      	sub	sp, #16
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8dc:	2300      	movs	r3, #0
 800b8de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f7f7 fa3e 	bl	8002d68 <HAL_PCD_Start>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8f0:	7bfb      	ldrb	r3, [r7, #15]
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f000 f942 	bl	800bb7c <USBD_Get_USB_Status>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	3710      	adds	r7, #16
 800b902:	46bd      	mov	sp, r7
 800b904:	bd80      	pop	{r7, pc}

0800b906 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b906:	b580      	push	{r7, lr}
 800b908:	b084      	sub	sp, #16
 800b90a:	af00      	add	r7, sp, #0
 800b90c:	6078      	str	r0, [r7, #4]
 800b90e:	4608      	mov	r0, r1
 800b910:	4611      	mov	r1, r2
 800b912:	461a      	mov	r2, r3
 800b914:	4603      	mov	r3, r0
 800b916:	70fb      	strb	r3, [r7, #3]
 800b918:	460b      	mov	r3, r1
 800b91a:	70bb      	strb	r3, [r7, #2]
 800b91c:	4613      	mov	r3, r2
 800b91e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b920:	2300      	movs	r3, #0
 800b922:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b924:	2300      	movs	r3, #0
 800b926:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b92e:	78bb      	ldrb	r3, [r7, #2]
 800b930:	883a      	ldrh	r2, [r7, #0]
 800b932:	78f9      	ldrb	r1, [r7, #3]
 800b934:	f7f7 ff3e 	bl	80037b4 <HAL_PCD_EP_Open>
 800b938:	4603      	mov	r3, r0
 800b93a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b93c:	7bfb      	ldrb	r3, [r7, #15]
 800b93e:	4618      	mov	r0, r3
 800b940:	f000 f91c 	bl	800bb7c <USBD_Get_USB_Status>
 800b944:	4603      	mov	r3, r0
 800b946:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b948:	7bbb      	ldrb	r3, [r7, #14]
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	3710      	adds	r7, #16
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}

0800b952 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b952:	b580      	push	{r7, lr}
 800b954:	b084      	sub	sp, #16
 800b956:	af00      	add	r7, sp, #0
 800b958:	6078      	str	r0, [r7, #4]
 800b95a:	460b      	mov	r3, r1
 800b95c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b95e:	2300      	movs	r3, #0
 800b960:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b962:	2300      	movs	r3, #0
 800b964:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b96c:	78fa      	ldrb	r2, [r7, #3]
 800b96e:	4611      	mov	r1, r2
 800b970:	4618      	mov	r0, r3
 800b972:	f7f7 ff87 	bl	8003884 <HAL_PCD_EP_Close>
 800b976:	4603      	mov	r3, r0
 800b978:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b97a:	7bfb      	ldrb	r3, [r7, #15]
 800b97c:	4618      	mov	r0, r3
 800b97e:	f000 f8fd 	bl	800bb7c <USBD_Get_USB_Status>
 800b982:	4603      	mov	r3, r0
 800b984:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b986:	7bbb      	ldrb	r3, [r7, #14]
}
 800b988:	4618      	mov	r0, r3
 800b98a:	3710      	adds	r7, #16
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}

0800b990 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b084      	sub	sp, #16
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
 800b998:	460b      	mov	r3, r1
 800b99a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b99c:	2300      	movs	r3, #0
 800b99e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b9aa:	78fa      	ldrb	r2, [r7, #3]
 800b9ac:	4611      	mov	r1, r2
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f7f8 f841 	bl	8003a36 <HAL_PCD_EP_SetStall>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9b8:	7bfb      	ldrb	r3, [r7, #15]
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f000 f8de 	bl	800bb7c <USBD_Get_USB_Status>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	3710      	adds	r7, #16
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}

0800b9ce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9ce:	b580      	push	{r7, lr}
 800b9d0:	b084      	sub	sp, #16
 800b9d2:	af00      	add	r7, sp, #0
 800b9d4:	6078      	str	r0, [r7, #4]
 800b9d6:	460b      	mov	r3, r1
 800b9d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9da:	2300      	movs	r3, #0
 800b9dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b9e8:	78fa      	ldrb	r2, [r7, #3]
 800b9ea:	4611      	mov	r1, r2
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f7f8 f886 	bl	8003afe <HAL_PCD_EP_ClrStall>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9f6:	7bfb      	ldrb	r3, [r7, #15]
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f000 f8bf 	bl	800bb7c <USBD_Get_USB_Status>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba02:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	3710      	adds	r7, #16
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}

0800ba0c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b085      	sub	sp, #20
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
 800ba14:	460b      	mov	r3, r1
 800ba16:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ba1e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ba20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	da0b      	bge.n	800ba40 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ba28:	78fb      	ldrb	r3, [r7, #3]
 800ba2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba2e:	68f9      	ldr	r1, [r7, #12]
 800ba30:	4613      	mov	r3, r2
 800ba32:	00db      	lsls	r3, r3, #3
 800ba34:	4413      	add	r3, r2
 800ba36:	009b      	lsls	r3, r3, #2
 800ba38:	440b      	add	r3, r1
 800ba3a:	333e      	adds	r3, #62	; 0x3e
 800ba3c:	781b      	ldrb	r3, [r3, #0]
 800ba3e:	e00b      	b.n	800ba58 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ba40:	78fb      	ldrb	r3, [r7, #3]
 800ba42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba46:	68f9      	ldr	r1, [r7, #12]
 800ba48:	4613      	mov	r3, r2
 800ba4a:	00db      	lsls	r3, r3, #3
 800ba4c:	4413      	add	r3, r2
 800ba4e:	009b      	lsls	r3, r3, #2
 800ba50:	440b      	add	r3, r1
 800ba52:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800ba56:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	3714      	adds	r7, #20
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba62:	4770      	bx	lr

0800ba64 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b084      	sub	sp, #16
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
 800ba6c:	460b      	mov	r3, r1
 800ba6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba70:	2300      	movs	r3, #0
 800ba72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba74:	2300      	movs	r3, #0
 800ba76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ba7e:	78fa      	ldrb	r2, [r7, #3]
 800ba80:	4611      	mov	r1, r2
 800ba82:	4618      	mov	r0, r3
 800ba84:	f7f7 fe71 	bl	800376a <HAL_PCD_SetAddress>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba8c:	7bfb      	ldrb	r3, [r7, #15]
 800ba8e:	4618      	mov	r0, r3
 800ba90:	f000 f874 	bl	800bb7c <USBD_Get_USB_Status>
 800ba94:	4603      	mov	r3, r0
 800ba96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba98:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	3710      	adds	r7, #16
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}

0800baa2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800baa2:	b580      	push	{r7, lr}
 800baa4:	b086      	sub	sp, #24
 800baa6:	af00      	add	r7, sp, #0
 800baa8:	60f8      	str	r0, [r7, #12]
 800baaa:	607a      	str	r2, [r7, #4]
 800baac:	603b      	str	r3, [r7, #0]
 800baae:	460b      	mov	r3, r1
 800bab0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bab2:	2300      	movs	r3, #0
 800bab4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bab6:	2300      	movs	r3, #0
 800bab8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bac0:	7af9      	ldrb	r1, [r7, #11]
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	687a      	ldr	r2, [r7, #4]
 800bac6:	f7f7 ff7b 	bl	80039c0 <HAL_PCD_EP_Transmit>
 800baca:	4603      	mov	r3, r0
 800bacc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bace:	7dfb      	ldrb	r3, [r7, #23]
 800bad0:	4618      	mov	r0, r3
 800bad2:	f000 f853 	bl	800bb7c <USBD_Get_USB_Status>
 800bad6:	4603      	mov	r3, r0
 800bad8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bada:	7dbb      	ldrb	r3, [r7, #22]
}
 800badc:	4618      	mov	r0, r3
 800bade:	3718      	adds	r7, #24
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}

0800bae4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b086      	sub	sp, #24
 800bae8:	af00      	add	r7, sp, #0
 800baea:	60f8      	str	r0, [r7, #12]
 800baec:	607a      	str	r2, [r7, #4]
 800baee:	603b      	str	r3, [r7, #0]
 800baf0:	460b      	mov	r3, r1
 800baf2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800baf4:	2300      	movs	r3, #0
 800baf6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800baf8:	2300      	movs	r3, #0
 800bafa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bb02:	7af9      	ldrb	r1, [r7, #11]
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	687a      	ldr	r2, [r7, #4]
 800bb08:	f7f7 ff06 	bl	8003918 <HAL_PCD_EP_Receive>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb10:	7dfb      	ldrb	r3, [r7, #23]
 800bb12:	4618      	mov	r0, r3
 800bb14:	f000 f832 	bl	800bb7c <USBD_Get_USB_Status>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bb1c:	7dbb      	ldrb	r3, [r7, #22]
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3718      	adds	r7, #24
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}

0800bb26 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb26:	b580      	push	{r7, lr}
 800bb28:	b082      	sub	sp, #8
 800bb2a:	af00      	add	r7, sp, #0
 800bb2c:	6078      	str	r0, [r7, #4]
 800bb2e:	460b      	mov	r3, r1
 800bb30:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bb38:	78fa      	ldrb	r2, [r7, #3]
 800bb3a:	4611      	mov	r1, r2
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	f7f7 ff27 	bl	8003990 <HAL_PCD_EP_GetRxCount>
 800bb42:	4603      	mov	r3, r0
}
 800bb44:	4618      	mov	r0, r3
 800bb46:	3708      	adds	r7, #8
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}

0800bb4c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bb4c:	b480      	push	{r7}
 800bb4e:	b083      	sub	sp, #12
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bb54:	4b03      	ldr	r3, [pc, #12]	; (800bb64 <USBD_static_malloc+0x18>)
}
 800bb56:	4618      	mov	r0, r3
 800bb58:	370c      	adds	r7, #12
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb60:	4770      	bx	lr
 800bb62:	bf00      	nop
 800bb64:	24001f08 	.word	0x24001f08

0800bb68 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bb68:	b480      	push	{r7}
 800bb6a:	b083      	sub	sp, #12
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800bb70:	bf00      	nop
 800bb72:	370c      	adds	r7, #12
 800bb74:	46bd      	mov	sp, r7
 800bb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7a:	4770      	bx	lr

0800bb7c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	b085      	sub	sp, #20
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	4603      	mov	r3, r0
 800bb84:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb86:	2300      	movs	r3, #0
 800bb88:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bb8a:	79fb      	ldrb	r3, [r7, #7]
 800bb8c:	2b03      	cmp	r3, #3
 800bb8e:	d817      	bhi.n	800bbc0 <USBD_Get_USB_Status+0x44>
 800bb90:	a201      	add	r2, pc, #4	; (adr r2, 800bb98 <USBD_Get_USB_Status+0x1c>)
 800bb92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb96:	bf00      	nop
 800bb98:	0800bba9 	.word	0x0800bba9
 800bb9c:	0800bbaf 	.word	0x0800bbaf
 800bba0:	0800bbb5 	.word	0x0800bbb5
 800bba4:	0800bbbb 	.word	0x0800bbbb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bba8:	2300      	movs	r3, #0
 800bbaa:	73fb      	strb	r3, [r7, #15]
    break;
 800bbac:	e00b      	b.n	800bbc6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bbae:	2303      	movs	r3, #3
 800bbb0:	73fb      	strb	r3, [r7, #15]
    break;
 800bbb2:	e008      	b.n	800bbc6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bbb4:	2301      	movs	r3, #1
 800bbb6:	73fb      	strb	r3, [r7, #15]
    break;
 800bbb8:	e005      	b.n	800bbc6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bbba:	2303      	movs	r3, #3
 800bbbc:	73fb      	strb	r3, [r7, #15]
    break;
 800bbbe:	e002      	b.n	800bbc6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bbc0:	2303      	movs	r3, #3
 800bbc2:	73fb      	strb	r3, [r7, #15]
    break;
 800bbc4:	bf00      	nop
  }
  return usb_status;
 800bbc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbc8:	4618      	mov	r0, r3
 800bbca:	3714      	adds	r7, #20
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd2:	4770      	bx	lr

0800bbd4 <malloc>:
 800bbd4:	4b02      	ldr	r3, [pc, #8]	; (800bbe0 <malloc+0xc>)
 800bbd6:	4601      	mov	r1, r0
 800bbd8:	6818      	ldr	r0, [r3, #0]
 800bbda:	f000 b82b 	b.w	800bc34 <_malloc_r>
 800bbde:	bf00      	nop
 800bbe0:	2400019c 	.word	0x2400019c

0800bbe4 <free>:
 800bbe4:	4b02      	ldr	r3, [pc, #8]	; (800bbf0 <free+0xc>)
 800bbe6:	4601      	mov	r1, r0
 800bbe8:	6818      	ldr	r0, [r3, #0]
 800bbea:	f001 bc9d 	b.w	800d528 <_free_r>
 800bbee:	bf00      	nop
 800bbf0:	2400019c 	.word	0x2400019c

0800bbf4 <sbrk_aligned>:
 800bbf4:	b570      	push	{r4, r5, r6, lr}
 800bbf6:	4e0e      	ldr	r6, [pc, #56]	; (800bc30 <sbrk_aligned+0x3c>)
 800bbf8:	460c      	mov	r4, r1
 800bbfa:	6831      	ldr	r1, [r6, #0]
 800bbfc:	4605      	mov	r5, r0
 800bbfe:	b911      	cbnz	r1, 800bc06 <sbrk_aligned+0x12>
 800bc00:	f000 fe46 	bl	800c890 <_sbrk_r>
 800bc04:	6030      	str	r0, [r6, #0]
 800bc06:	4621      	mov	r1, r4
 800bc08:	4628      	mov	r0, r5
 800bc0a:	f000 fe41 	bl	800c890 <_sbrk_r>
 800bc0e:	1c43      	adds	r3, r0, #1
 800bc10:	d00a      	beq.n	800bc28 <sbrk_aligned+0x34>
 800bc12:	1cc4      	adds	r4, r0, #3
 800bc14:	f024 0403 	bic.w	r4, r4, #3
 800bc18:	42a0      	cmp	r0, r4
 800bc1a:	d007      	beq.n	800bc2c <sbrk_aligned+0x38>
 800bc1c:	1a21      	subs	r1, r4, r0
 800bc1e:	4628      	mov	r0, r5
 800bc20:	f000 fe36 	bl	800c890 <_sbrk_r>
 800bc24:	3001      	adds	r0, #1
 800bc26:	d101      	bne.n	800bc2c <sbrk_aligned+0x38>
 800bc28:	f04f 34ff 	mov.w	r4, #4294967295
 800bc2c:	4620      	mov	r0, r4
 800bc2e:	bd70      	pop	{r4, r5, r6, pc}
 800bc30:	2400212c 	.word	0x2400212c

0800bc34 <_malloc_r>:
 800bc34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc38:	1ccd      	adds	r5, r1, #3
 800bc3a:	f025 0503 	bic.w	r5, r5, #3
 800bc3e:	3508      	adds	r5, #8
 800bc40:	2d0c      	cmp	r5, #12
 800bc42:	bf38      	it	cc
 800bc44:	250c      	movcc	r5, #12
 800bc46:	2d00      	cmp	r5, #0
 800bc48:	4607      	mov	r7, r0
 800bc4a:	db01      	blt.n	800bc50 <_malloc_r+0x1c>
 800bc4c:	42a9      	cmp	r1, r5
 800bc4e:	d905      	bls.n	800bc5c <_malloc_r+0x28>
 800bc50:	230c      	movs	r3, #12
 800bc52:	603b      	str	r3, [r7, #0]
 800bc54:	2600      	movs	r6, #0
 800bc56:	4630      	mov	r0, r6
 800bc58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc5c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bd30 <_malloc_r+0xfc>
 800bc60:	f000 f868 	bl	800bd34 <__malloc_lock>
 800bc64:	f8d8 3000 	ldr.w	r3, [r8]
 800bc68:	461c      	mov	r4, r3
 800bc6a:	bb5c      	cbnz	r4, 800bcc4 <_malloc_r+0x90>
 800bc6c:	4629      	mov	r1, r5
 800bc6e:	4638      	mov	r0, r7
 800bc70:	f7ff ffc0 	bl	800bbf4 <sbrk_aligned>
 800bc74:	1c43      	adds	r3, r0, #1
 800bc76:	4604      	mov	r4, r0
 800bc78:	d155      	bne.n	800bd26 <_malloc_r+0xf2>
 800bc7a:	f8d8 4000 	ldr.w	r4, [r8]
 800bc7e:	4626      	mov	r6, r4
 800bc80:	2e00      	cmp	r6, #0
 800bc82:	d145      	bne.n	800bd10 <_malloc_r+0xdc>
 800bc84:	2c00      	cmp	r4, #0
 800bc86:	d048      	beq.n	800bd1a <_malloc_r+0xe6>
 800bc88:	6823      	ldr	r3, [r4, #0]
 800bc8a:	4631      	mov	r1, r6
 800bc8c:	4638      	mov	r0, r7
 800bc8e:	eb04 0903 	add.w	r9, r4, r3
 800bc92:	f000 fdfd 	bl	800c890 <_sbrk_r>
 800bc96:	4581      	cmp	r9, r0
 800bc98:	d13f      	bne.n	800bd1a <_malloc_r+0xe6>
 800bc9a:	6821      	ldr	r1, [r4, #0]
 800bc9c:	1a6d      	subs	r5, r5, r1
 800bc9e:	4629      	mov	r1, r5
 800bca0:	4638      	mov	r0, r7
 800bca2:	f7ff ffa7 	bl	800bbf4 <sbrk_aligned>
 800bca6:	3001      	adds	r0, #1
 800bca8:	d037      	beq.n	800bd1a <_malloc_r+0xe6>
 800bcaa:	6823      	ldr	r3, [r4, #0]
 800bcac:	442b      	add	r3, r5
 800bcae:	6023      	str	r3, [r4, #0]
 800bcb0:	f8d8 3000 	ldr.w	r3, [r8]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d038      	beq.n	800bd2a <_malloc_r+0xf6>
 800bcb8:	685a      	ldr	r2, [r3, #4]
 800bcba:	42a2      	cmp	r2, r4
 800bcbc:	d12b      	bne.n	800bd16 <_malloc_r+0xe2>
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	605a      	str	r2, [r3, #4]
 800bcc2:	e00f      	b.n	800bce4 <_malloc_r+0xb0>
 800bcc4:	6822      	ldr	r2, [r4, #0]
 800bcc6:	1b52      	subs	r2, r2, r5
 800bcc8:	d41f      	bmi.n	800bd0a <_malloc_r+0xd6>
 800bcca:	2a0b      	cmp	r2, #11
 800bccc:	d917      	bls.n	800bcfe <_malloc_r+0xca>
 800bcce:	1961      	adds	r1, r4, r5
 800bcd0:	42a3      	cmp	r3, r4
 800bcd2:	6025      	str	r5, [r4, #0]
 800bcd4:	bf18      	it	ne
 800bcd6:	6059      	strne	r1, [r3, #4]
 800bcd8:	6863      	ldr	r3, [r4, #4]
 800bcda:	bf08      	it	eq
 800bcdc:	f8c8 1000 	streq.w	r1, [r8]
 800bce0:	5162      	str	r2, [r4, r5]
 800bce2:	604b      	str	r3, [r1, #4]
 800bce4:	4638      	mov	r0, r7
 800bce6:	f104 060b 	add.w	r6, r4, #11
 800bcea:	f000 f829 	bl	800bd40 <__malloc_unlock>
 800bcee:	f026 0607 	bic.w	r6, r6, #7
 800bcf2:	1d23      	adds	r3, r4, #4
 800bcf4:	1af2      	subs	r2, r6, r3
 800bcf6:	d0ae      	beq.n	800bc56 <_malloc_r+0x22>
 800bcf8:	1b9b      	subs	r3, r3, r6
 800bcfa:	50a3      	str	r3, [r4, r2]
 800bcfc:	e7ab      	b.n	800bc56 <_malloc_r+0x22>
 800bcfe:	42a3      	cmp	r3, r4
 800bd00:	6862      	ldr	r2, [r4, #4]
 800bd02:	d1dd      	bne.n	800bcc0 <_malloc_r+0x8c>
 800bd04:	f8c8 2000 	str.w	r2, [r8]
 800bd08:	e7ec      	b.n	800bce4 <_malloc_r+0xb0>
 800bd0a:	4623      	mov	r3, r4
 800bd0c:	6864      	ldr	r4, [r4, #4]
 800bd0e:	e7ac      	b.n	800bc6a <_malloc_r+0x36>
 800bd10:	4634      	mov	r4, r6
 800bd12:	6876      	ldr	r6, [r6, #4]
 800bd14:	e7b4      	b.n	800bc80 <_malloc_r+0x4c>
 800bd16:	4613      	mov	r3, r2
 800bd18:	e7cc      	b.n	800bcb4 <_malloc_r+0x80>
 800bd1a:	230c      	movs	r3, #12
 800bd1c:	603b      	str	r3, [r7, #0]
 800bd1e:	4638      	mov	r0, r7
 800bd20:	f000 f80e 	bl	800bd40 <__malloc_unlock>
 800bd24:	e797      	b.n	800bc56 <_malloc_r+0x22>
 800bd26:	6025      	str	r5, [r4, #0]
 800bd28:	e7dc      	b.n	800bce4 <_malloc_r+0xb0>
 800bd2a:	605b      	str	r3, [r3, #4]
 800bd2c:	deff      	udf	#255	; 0xff
 800bd2e:	bf00      	nop
 800bd30:	24002128 	.word	0x24002128

0800bd34 <__malloc_lock>:
 800bd34:	4801      	ldr	r0, [pc, #4]	; (800bd3c <__malloc_lock+0x8>)
 800bd36:	f000 bdf8 	b.w	800c92a <__retarget_lock_acquire_recursive>
 800bd3a:	bf00      	nop
 800bd3c:	24002270 	.word	0x24002270

0800bd40 <__malloc_unlock>:
 800bd40:	4801      	ldr	r0, [pc, #4]	; (800bd48 <__malloc_unlock+0x8>)
 800bd42:	f000 bdf3 	b.w	800c92c <__retarget_lock_release_recursive>
 800bd46:	bf00      	nop
 800bd48:	24002270 	.word	0x24002270

0800bd4c <__cvt>:
 800bd4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd4e:	ed2d 8b02 	vpush	{d8}
 800bd52:	eeb0 8b40 	vmov.f64	d8, d0
 800bd56:	b085      	sub	sp, #20
 800bd58:	4617      	mov	r7, r2
 800bd5a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800bd5c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800bd5e:	ee18 2a90 	vmov	r2, s17
 800bd62:	f025 0520 	bic.w	r5, r5, #32
 800bd66:	2a00      	cmp	r2, #0
 800bd68:	bfb6      	itet	lt
 800bd6a:	222d      	movlt	r2, #45	; 0x2d
 800bd6c:	2200      	movge	r2, #0
 800bd6e:	eeb1 8b40 	vneglt.f64	d8, d0
 800bd72:	2d46      	cmp	r5, #70	; 0x46
 800bd74:	460c      	mov	r4, r1
 800bd76:	701a      	strb	r2, [r3, #0]
 800bd78:	d004      	beq.n	800bd84 <__cvt+0x38>
 800bd7a:	2d45      	cmp	r5, #69	; 0x45
 800bd7c:	d100      	bne.n	800bd80 <__cvt+0x34>
 800bd7e:	3401      	adds	r4, #1
 800bd80:	2102      	movs	r1, #2
 800bd82:	e000      	b.n	800bd86 <__cvt+0x3a>
 800bd84:	2103      	movs	r1, #3
 800bd86:	ab03      	add	r3, sp, #12
 800bd88:	9301      	str	r3, [sp, #4]
 800bd8a:	ab02      	add	r3, sp, #8
 800bd8c:	9300      	str	r3, [sp, #0]
 800bd8e:	4622      	mov	r2, r4
 800bd90:	4633      	mov	r3, r6
 800bd92:	eeb0 0b48 	vmov.f64	d0, d8
 800bd96:	f000 fe5b 	bl	800ca50 <_dtoa_r>
 800bd9a:	2d47      	cmp	r5, #71	; 0x47
 800bd9c:	d101      	bne.n	800bda2 <__cvt+0x56>
 800bd9e:	07fb      	lsls	r3, r7, #31
 800bda0:	d51a      	bpl.n	800bdd8 <__cvt+0x8c>
 800bda2:	2d46      	cmp	r5, #70	; 0x46
 800bda4:	eb00 0204 	add.w	r2, r0, r4
 800bda8:	d10c      	bne.n	800bdc4 <__cvt+0x78>
 800bdaa:	7803      	ldrb	r3, [r0, #0]
 800bdac:	2b30      	cmp	r3, #48	; 0x30
 800bdae:	d107      	bne.n	800bdc0 <__cvt+0x74>
 800bdb0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bdb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdb8:	bf1c      	itt	ne
 800bdba:	f1c4 0401 	rsbne	r4, r4, #1
 800bdbe:	6034      	strne	r4, [r6, #0]
 800bdc0:	6833      	ldr	r3, [r6, #0]
 800bdc2:	441a      	add	r2, r3
 800bdc4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bdc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdcc:	bf08      	it	eq
 800bdce:	9203      	streq	r2, [sp, #12]
 800bdd0:	2130      	movs	r1, #48	; 0x30
 800bdd2:	9b03      	ldr	r3, [sp, #12]
 800bdd4:	4293      	cmp	r3, r2
 800bdd6:	d307      	bcc.n	800bde8 <__cvt+0x9c>
 800bdd8:	9b03      	ldr	r3, [sp, #12]
 800bdda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bddc:	1a1b      	subs	r3, r3, r0
 800bdde:	6013      	str	r3, [r2, #0]
 800bde0:	b005      	add	sp, #20
 800bde2:	ecbd 8b02 	vpop	{d8}
 800bde6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bde8:	1c5c      	adds	r4, r3, #1
 800bdea:	9403      	str	r4, [sp, #12]
 800bdec:	7019      	strb	r1, [r3, #0]
 800bdee:	e7f0      	b.n	800bdd2 <__cvt+0x86>

0800bdf0 <__exponent>:
 800bdf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	2900      	cmp	r1, #0
 800bdf6:	bfb8      	it	lt
 800bdf8:	4249      	neglt	r1, r1
 800bdfa:	f803 2b02 	strb.w	r2, [r3], #2
 800bdfe:	bfb4      	ite	lt
 800be00:	222d      	movlt	r2, #45	; 0x2d
 800be02:	222b      	movge	r2, #43	; 0x2b
 800be04:	2909      	cmp	r1, #9
 800be06:	7042      	strb	r2, [r0, #1]
 800be08:	dd2a      	ble.n	800be60 <__exponent+0x70>
 800be0a:	f10d 0207 	add.w	r2, sp, #7
 800be0e:	4617      	mov	r7, r2
 800be10:	260a      	movs	r6, #10
 800be12:	4694      	mov	ip, r2
 800be14:	fb91 f5f6 	sdiv	r5, r1, r6
 800be18:	fb06 1415 	mls	r4, r6, r5, r1
 800be1c:	3430      	adds	r4, #48	; 0x30
 800be1e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800be22:	460c      	mov	r4, r1
 800be24:	2c63      	cmp	r4, #99	; 0x63
 800be26:	f102 32ff 	add.w	r2, r2, #4294967295
 800be2a:	4629      	mov	r1, r5
 800be2c:	dcf1      	bgt.n	800be12 <__exponent+0x22>
 800be2e:	3130      	adds	r1, #48	; 0x30
 800be30:	f1ac 0402 	sub.w	r4, ip, #2
 800be34:	f802 1c01 	strb.w	r1, [r2, #-1]
 800be38:	1c41      	adds	r1, r0, #1
 800be3a:	4622      	mov	r2, r4
 800be3c:	42ba      	cmp	r2, r7
 800be3e:	d30a      	bcc.n	800be56 <__exponent+0x66>
 800be40:	f10d 0209 	add.w	r2, sp, #9
 800be44:	eba2 020c 	sub.w	r2, r2, ip
 800be48:	42bc      	cmp	r4, r7
 800be4a:	bf88      	it	hi
 800be4c:	2200      	movhi	r2, #0
 800be4e:	4413      	add	r3, r2
 800be50:	1a18      	subs	r0, r3, r0
 800be52:	b003      	add	sp, #12
 800be54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be56:	f812 5b01 	ldrb.w	r5, [r2], #1
 800be5a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800be5e:	e7ed      	b.n	800be3c <__exponent+0x4c>
 800be60:	2330      	movs	r3, #48	; 0x30
 800be62:	3130      	adds	r1, #48	; 0x30
 800be64:	7083      	strb	r3, [r0, #2]
 800be66:	70c1      	strb	r1, [r0, #3]
 800be68:	1d03      	adds	r3, r0, #4
 800be6a:	e7f1      	b.n	800be50 <__exponent+0x60>
 800be6c:	0000      	movs	r0, r0
	...

0800be70 <_printf_float>:
 800be70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be74:	b08b      	sub	sp, #44	; 0x2c
 800be76:	460c      	mov	r4, r1
 800be78:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800be7c:	4616      	mov	r6, r2
 800be7e:	461f      	mov	r7, r3
 800be80:	4605      	mov	r5, r0
 800be82:	f000 fccd 	bl	800c820 <_localeconv_r>
 800be86:	f8d0 b000 	ldr.w	fp, [r0]
 800be8a:	4658      	mov	r0, fp
 800be8c:	f7f4 fa78 	bl	8000380 <strlen>
 800be90:	2300      	movs	r3, #0
 800be92:	9308      	str	r3, [sp, #32]
 800be94:	f8d8 3000 	ldr.w	r3, [r8]
 800be98:	f894 9018 	ldrb.w	r9, [r4, #24]
 800be9c:	6822      	ldr	r2, [r4, #0]
 800be9e:	3307      	adds	r3, #7
 800bea0:	f023 0307 	bic.w	r3, r3, #7
 800bea4:	f103 0108 	add.w	r1, r3, #8
 800bea8:	f8c8 1000 	str.w	r1, [r8]
 800beac:	ed93 0b00 	vldr	d0, [r3]
 800beb0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800c110 <_printf_float+0x2a0>
 800beb4:	eeb0 7bc0 	vabs.f64	d7, d0
 800beb8:	eeb4 7b46 	vcmp.f64	d7, d6
 800bebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bec0:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800bec4:	4682      	mov	sl, r0
 800bec6:	dd24      	ble.n	800bf12 <_printf_float+0xa2>
 800bec8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800becc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bed0:	d502      	bpl.n	800bed8 <_printf_float+0x68>
 800bed2:	232d      	movs	r3, #45	; 0x2d
 800bed4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bed8:	498f      	ldr	r1, [pc, #572]	; (800c118 <_printf_float+0x2a8>)
 800beda:	4b90      	ldr	r3, [pc, #576]	; (800c11c <_printf_float+0x2ac>)
 800bedc:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800bee0:	bf94      	ite	ls
 800bee2:	4688      	movls	r8, r1
 800bee4:	4698      	movhi	r8, r3
 800bee6:	2303      	movs	r3, #3
 800bee8:	6123      	str	r3, [r4, #16]
 800beea:	f022 0204 	bic.w	r2, r2, #4
 800beee:	2300      	movs	r3, #0
 800bef0:	6022      	str	r2, [r4, #0]
 800bef2:	9304      	str	r3, [sp, #16]
 800bef4:	9700      	str	r7, [sp, #0]
 800bef6:	4633      	mov	r3, r6
 800bef8:	aa09      	add	r2, sp, #36	; 0x24
 800befa:	4621      	mov	r1, r4
 800befc:	4628      	mov	r0, r5
 800befe:	f000 f9d1 	bl	800c2a4 <_printf_common>
 800bf02:	3001      	adds	r0, #1
 800bf04:	f040 808a 	bne.w	800c01c <_printf_float+0x1ac>
 800bf08:	f04f 30ff 	mov.w	r0, #4294967295
 800bf0c:	b00b      	add	sp, #44	; 0x2c
 800bf0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf12:	eeb4 0b40 	vcmp.f64	d0, d0
 800bf16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf1a:	d709      	bvc.n	800bf30 <_printf_float+0xc0>
 800bf1c:	ee10 3a90 	vmov	r3, s1
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	bfbc      	itt	lt
 800bf24:	232d      	movlt	r3, #45	; 0x2d
 800bf26:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bf2a:	497d      	ldr	r1, [pc, #500]	; (800c120 <_printf_float+0x2b0>)
 800bf2c:	4b7d      	ldr	r3, [pc, #500]	; (800c124 <_printf_float+0x2b4>)
 800bf2e:	e7d5      	b.n	800bedc <_printf_float+0x6c>
 800bf30:	6863      	ldr	r3, [r4, #4]
 800bf32:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800bf36:	9104      	str	r1, [sp, #16]
 800bf38:	1c59      	adds	r1, r3, #1
 800bf3a:	d13c      	bne.n	800bfb6 <_printf_float+0x146>
 800bf3c:	2306      	movs	r3, #6
 800bf3e:	6063      	str	r3, [r4, #4]
 800bf40:	2300      	movs	r3, #0
 800bf42:	9303      	str	r3, [sp, #12]
 800bf44:	ab08      	add	r3, sp, #32
 800bf46:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800bf4a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bf4e:	ab07      	add	r3, sp, #28
 800bf50:	6861      	ldr	r1, [r4, #4]
 800bf52:	9300      	str	r3, [sp, #0]
 800bf54:	6022      	str	r2, [r4, #0]
 800bf56:	f10d 031b 	add.w	r3, sp, #27
 800bf5a:	4628      	mov	r0, r5
 800bf5c:	f7ff fef6 	bl	800bd4c <__cvt>
 800bf60:	9b04      	ldr	r3, [sp, #16]
 800bf62:	9907      	ldr	r1, [sp, #28]
 800bf64:	2b47      	cmp	r3, #71	; 0x47
 800bf66:	4680      	mov	r8, r0
 800bf68:	d108      	bne.n	800bf7c <_printf_float+0x10c>
 800bf6a:	1cc8      	adds	r0, r1, #3
 800bf6c:	db02      	blt.n	800bf74 <_printf_float+0x104>
 800bf6e:	6863      	ldr	r3, [r4, #4]
 800bf70:	4299      	cmp	r1, r3
 800bf72:	dd41      	ble.n	800bff8 <_printf_float+0x188>
 800bf74:	f1a9 0902 	sub.w	r9, r9, #2
 800bf78:	fa5f f989 	uxtb.w	r9, r9
 800bf7c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800bf80:	d820      	bhi.n	800bfc4 <_printf_float+0x154>
 800bf82:	3901      	subs	r1, #1
 800bf84:	464a      	mov	r2, r9
 800bf86:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bf8a:	9107      	str	r1, [sp, #28]
 800bf8c:	f7ff ff30 	bl	800bdf0 <__exponent>
 800bf90:	9a08      	ldr	r2, [sp, #32]
 800bf92:	9004      	str	r0, [sp, #16]
 800bf94:	1813      	adds	r3, r2, r0
 800bf96:	2a01      	cmp	r2, #1
 800bf98:	6123      	str	r3, [r4, #16]
 800bf9a:	dc02      	bgt.n	800bfa2 <_printf_float+0x132>
 800bf9c:	6822      	ldr	r2, [r4, #0]
 800bf9e:	07d2      	lsls	r2, r2, #31
 800bfa0:	d501      	bpl.n	800bfa6 <_printf_float+0x136>
 800bfa2:	3301      	adds	r3, #1
 800bfa4:	6123      	str	r3, [r4, #16]
 800bfa6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d0a2      	beq.n	800bef4 <_printf_float+0x84>
 800bfae:	232d      	movs	r3, #45	; 0x2d
 800bfb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bfb4:	e79e      	b.n	800bef4 <_printf_float+0x84>
 800bfb6:	9904      	ldr	r1, [sp, #16]
 800bfb8:	2947      	cmp	r1, #71	; 0x47
 800bfba:	d1c1      	bne.n	800bf40 <_printf_float+0xd0>
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d1bf      	bne.n	800bf40 <_printf_float+0xd0>
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	e7bc      	b.n	800bf3e <_printf_float+0xce>
 800bfc4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800bfc8:	d118      	bne.n	800bffc <_printf_float+0x18c>
 800bfca:	2900      	cmp	r1, #0
 800bfcc:	6863      	ldr	r3, [r4, #4]
 800bfce:	dd0b      	ble.n	800bfe8 <_printf_float+0x178>
 800bfd0:	6121      	str	r1, [r4, #16]
 800bfd2:	b913      	cbnz	r3, 800bfda <_printf_float+0x16a>
 800bfd4:	6822      	ldr	r2, [r4, #0]
 800bfd6:	07d0      	lsls	r0, r2, #31
 800bfd8:	d502      	bpl.n	800bfe0 <_printf_float+0x170>
 800bfda:	3301      	adds	r3, #1
 800bfdc:	440b      	add	r3, r1
 800bfde:	6123      	str	r3, [r4, #16]
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	65a1      	str	r1, [r4, #88]	; 0x58
 800bfe4:	9304      	str	r3, [sp, #16]
 800bfe6:	e7de      	b.n	800bfa6 <_printf_float+0x136>
 800bfe8:	b913      	cbnz	r3, 800bff0 <_printf_float+0x180>
 800bfea:	6822      	ldr	r2, [r4, #0]
 800bfec:	07d2      	lsls	r2, r2, #31
 800bfee:	d501      	bpl.n	800bff4 <_printf_float+0x184>
 800bff0:	3302      	adds	r3, #2
 800bff2:	e7f4      	b.n	800bfde <_printf_float+0x16e>
 800bff4:	2301      	movs	r3, #1
 800bff6:	e7f2      	b.n	800bfde <_printf_float+0x16e>
 800bff8:	f04f 0967 	mov.w	r9, #103	; 0x67
 800bffc:	9b08      	ldr	r3, [sp, #32]
 800bffe:	4299      	cmp	r1, r3
 800c000:	db05      	blt.n	800c00e <_printf_float+0x19e>
 800c002:	6823      	ldr	r3, [r4, #0]
 800c004:	6121      	str	r1, [r4, #16]
 800c006:	07d8      	lsls	r0, r3, #31
 800c008:	d5ea      	bpl.n	800bfe0 <_printf_float+0x170>
 800c00a:	1c4b      	adds	r3, r1, #1
 800c00c:	e7e7      	b.n	800bfde <_printf_float+0x16e>
 800c00e:	2900      	cmp	r1, #0
 800c010:	bfd4      	ite	le
 800c012:	f1c1 0202 	rsble	r2, r1, #2
 800c016:	2201      	movgt	r2, #1
 800c018:	4413      	add	r3, r2
 800c01a:	e7e0      	b.n	800bfde <_printf_float+0x16e>
 800c01c:	6823      	ldr	r3, [r4, #0]
 800c01e:	055a      	lsls	r2, r3, #21
 800c020:	d407      	bmi.n	800c032 <_printf_float+0x1c2>
 800c022:	6923      	ldr	r3, [r4, #16]
 800c024:	4642      	mov	r2, r8
 800c026:	4631      	mov	r1, r6
 800c028:	4628      	mov	r0, r5
 800c02a:	47b8      	blx	r7
 800c02c:	3001      	adds	r0, #1
 800c02e:	d12a      	bne.n	800c086 <_printf_float+0x216>
 800c030:	e76a      	b.n	800bf08 <_printf_float+0x98>
 800c032:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c036:	f240 80e0 	bls.w	800c1fa <_printf_float+0x38a>
 800c03a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800c03e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c046:	d133      	bne.n	800c0b0 <_printf_float+0x240>
 800c048:	4a37      	ldr	r2, [pc, #220]	; (800c128 <_printf_float+0x2b8>)
 800c04a:	2301      	movs	r3, #1
 800c04c:	4631      	mov	r1, r6
 800c04e:	4628      	mov	r0, r5
 800c050:	47b8      	blx	r7
 800c052:	3001      	adds	r0, #1
 800c054:	f43f af58 	beq.w	800bf08 <_printf_float+0x98>
 800c058:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c05c:	429a      	cmp	r2, r3
 800c05e:	db02      	blt.n	800c066 <_printf_float+0x1f6>
 800c060:	6823      	ldr	r3, [r4, #0]
 800c062:	07d8      	lsls	r0, r3, #31
 800c064:	d50f      	bpl.n	800c086 <_printf_float+0x216>
 800c066:	4653      	mov	r3, sl
 800c068:	465a      	mov	r2, fp
 800c06a:	4631      	mov	r1, r6
 800c06c:	4628      	mov	r0, r5
 800c06e:	47b8      	blx	r7
 800c070:	3001      	adds	r0, #1
 800c072:	f43f af49 	beq.w	800bf08 <_printf_float+0x98>
 800c076:	f04f 0800 	mov.w	r8, #0
 800c07a:	f104 091a 	add.w	r9, r4, #26
 800c07e:	9b08      	ldr	r3, [sp, #32]
 800c080:	3b01      	subs	r3, #1
 800c082:	4543      	cmp	r3, r8
 800c084:	dc09      	bgt.n	800c09a <_printf_float+0x22a>
 800c086:	6823      	ldr	r3, [r4, #0]
 800c088:	079b      	lsls	r3, r3, #30
 800c08a:	f100 8106 	bmi.w	800c29a <_printf_float+0x42a>
 800c08e:	68e0      	ldr	r0, [r4, #12]
 800c090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c092:	4298      	cmp	r0, r3
 800c094:	bfb8      	it	lt
 800c096:	4618      	movlt	r0, r3
 800c098:	e738      	b.n	800bf0c <_printf_float+0x9c>
 800c09a:	2301      	movs	r3, #1
 800c09c:	464a      	mov	r2, r9
 800c09e:	4631      	mov	r1, r6
 800c0a0:	4628      	mov	r0, r5
 800c0a2:	47b8      	blx	r7
 800c0a4:	3001      	adds	r0, #1
 800c0a6:	f43f af2f 	beq.w	800bf08 <_printf_float+0x98>
 800c0aa:	f108 0801 	add.w	r8, r8, #1
 800c0ae:	e7e6      	b.n	800c07e <_printf_float+0x20e>
 800c0b0:	9b07      	ldr	r3, [sp, #28]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	dc3a      	bgt.n	800c12c <_printf_float+0x2bc>
 800c0b6:	4a1c      	ldr	r2, [pc, #112]	; (800c128 <_printf_float+0x2b8>)
 800c0b8:	2301      	movs	r3, #1
 800c0ba:	4631      	mov	r1, r6
 800c0bc:	4628      	mov	r0, r5
 800c0be:	47b8      	blx	r7
 800c0c0:	3001      	adds	r0, #1
 800c0c2:	f43f af21 	beq.w	800bf08 <_printf_float+0x98>
 800c0c6:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800c0ca:	4313      	orrs	r3, r2
 800c0cc:	d102      	bne.n	800c0d4 <_printf_float+0x264>
 800c0ce:	6823      	ldr	r3, [r4, #0]
 800c0d0:	07d9      	lsls	r1, r3, #31
 800c0d2:	d5d8      	bpl.n	800c086 <_printf_float+0x216>
 800c0d4:	4653      	mov	r3, sl
 800c0d6:	465a      	mov	r2, fp
 800c0d8:	4631      	mov	r1, r6
 800c0da:	4628      	mov	r0, r5
 800c0dc:	47b8      	blx	r7
 800c0de:	3001      	adds	r0, #1
 800c0e0:	f43f af12 	beq.w	800bf08 <_printf_float+0x98>
 800c0e4:	f04f 0900 	mov.w	r9, #0
 800c0e8:	f104 0a1a 	add.w	sl, r4, #26
 800c0ec:	9b07      	ldr	r3, [sp, #28]
 800c0ee:	425b      	negs	r3, r3
 800c0f0:	454b      	cmp	r3, r9
 800c0f2:	dc01      	bgt.n	800c0f8 <_printf_float+0x288>
 800c0f4:	9b08      	ldr	r3, [sp, #32]
 800c0f6:	e795      	b.n	800c024 <_printf_float+0x1b4>
 800c0f8:	2301      	movs	r3, #1
 800c0fa:	4652      	mov	r2, sl
 800c0fc:	4631      	mov	r1, r6
 800c0fe:	4628      	mov	r0, r5
 800c100:	47b8      	blx	r7
 800c102:	3001      	adds	r0, #1
 800c104:	f43f af00 	beq.w	800bf08 <_printf_float+0x98>
 800c108:	f109 0901 	add.w	r9, r9, #1
 800c10c:	e7ee      	b.n	800c0ec <_printf_float+0x27c>
 800c10e:	bf00      	nop
 800c110:	ffffffff 	.word	0xffffffff
 800c114:	7fefffff 	.word	0x7fefffff
 800c118:	0800e838 	.word	0x0800e838
 800c11c:	0800e83c 	.word	0x0800e83c
 800c120:	0800e840 	.word	0x0800e840
 800c124:	0800e844 	.word	0x0800e844
 800c128:	0800e848 	.word	0x0800e848
 800c12c:	9a08      	ldr	r2, [sp, #32]
 800c12e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c130:	429a      	cmp	r2, r3
 800c132:	bfa8      	it	ge
 800c134:	461a      	movge	r2, r3
 800c136:	2a00      	cmp	r2, #0
 800c138:	4691      	mov	r9, r2
 800c13a:	dc38      	bgt.n	800c1ae <_printf_float+0x33e>
 800c13c:	2300      	movs	r3, #0
 800c13e:	9305      	str	r3, [sp, #20]
 800c140:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c144:	f104 021a 	add.w	r2, r4, #26
 800c148:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c14a:	9905      	ldr	r1, [sp, #20]
 800c14c:	9304      	str	r3, [sp, #16]
 800c14e:	eba3 0309 	sub.w	r3, r3, r9
 800c152:	428b      	cmp	r3, r1
 800c154:	dc33      	bgt.n	800c1be <_printf_float+0x34e>
 800c156:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c15a:	429a      	cmp	r2, r3
 800c15c:	db3c      	blt.n	800c1d8 <_printf_float+0x368>
 800c15e:	6823      	ldr	r3, [r4, #0]
 800c160:	07da      	lsls	r2, r3, #31
 800c162:	d439      	bmi.n	800c1d8 <_printf_float+0x368>
 800c164:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800c168:	eba2 0903 	sub.w	r9, r2, r3
 800c16c:	9b04      	ldr	r3, [sp, #16]
 800c16e:	1ad2      	subs	r2, r2, r3
 800c170:	4591      	cmp	r9, r2
 800c172:	bfa8      	it	ge
 800c174:	4691      	movge	r9, r2
 800c176:	f1b9 0f00 	cmp.w	r9, #0
 800c17a:	dc35      	bgt.n	800c1e8 <_printf_float+0x378>
 800c17c:	f04f 0800 	mov.w	r8, #0
 800c180:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c184:	f104 0a1a 	add.w	sl, r4, #26
 800c188:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c18c:	1a9b      	subs	r3, r3, r2
 800c18e:	eba3 0309 	sub.w	r3, r3, r9
 800c192:	4543      	cmp	r3, r8
 800c194:	f77f af77 	ble.w	800c086 <_printf_float+0x216>
 800c198:	2301      	movs	r3, #1
 800c19a:	4652      	mov	r2, sl
 800c19c:	4631      	mov	r1, r6
 800c19e:	4628      	mov	r0, r5
 800c1a0:	47b8      	blx	r7
 800c1a2:	3001      	adds	r0, #1
 800c1a4:	f43f aeb0 	beq.w	800bf08 <_printf_float+0x98>
 800c1a8:	f108 0801 	add.w	r8, r8, #1
 800c1ac:	e7ec      	b.n	800c188 <_printf_float+0x318>
 800c1ae:	4613      	mov	r3, r2
 800c1b0:	4631      	mov	r1, r6
 800c1b2:	4642      	mov	r2, r8
 800c1b4:	4628      	mov	r0, r5
 800c1b6:	47b8      	blx	r7
 800c1b8:	3001      	adds	r0, #1
 800c1ba:	d1bf      	bne.n	800c13c <_printf_float+0x2cc>
 800c1bc:	e6a4      	b.n	800bf08 <_printf_float+0x98>
 800c1be:	2301      	movs	r3, #1
 800c1c0:	4631      	mov	r1, r6
 800c1c2:	4628      	mov	r0, r5
 800c1c4:	9204      	str	r2, [sp, #16]
 800c1c6:	47b8      	blx	r7
 800c1c8:	3001      	adds	r0, #1
 800c1ca:	f43f ae9d 	beq.w	800bf08 <_printf_float+0x98>
 800c1ce:	9b05      	ldr	r3, [sp, #20]
 800c1d0:	9a04      	ldr	r2, [sp, #16]
 800c1d2:	3301      	adds	r3, #1
 800c1d4:	9305      	str	r3, [sp, #20]
 800c1d6:	e7b7      	b.n	800c148 <_printf_float+0x2d8>
 800c1d8:	4653      	mov	r3, sl
 800c1da:	465a      	mov	r2, fp
 800c1dc:	4631      	mov	r1, r6
 800c1de:	4628      	mov	r0, r5
 800c1e0:	47b8      	blx	r7
 800c1e2:	3001      	adds	r0, #1
 800c1e4:	d1be      	bne.n	800c164 <_printf_float+0x2f4>
 800c1e6:	e68f      	b.n	800bf08 <_printf_float+0x98>
 800c1e8:	9a04      	ldr	r2, [sp, #16]
 800c1ea:	464b      	mov	r3, r9
 800c1ec:	4442      	add	r2, r8
 800c1ee:	4631      	mov	r1, r6
 800c1f0:	4628      	mov	r0, r5
 800c1f2:	47b8      	blx	r7
 800c1f4:	3001      	adds	r0, #1
 800c1f6:	d1c1      	bne.n	800c17c <_printf_float+0x30c>
 800c1f8:	e686      	b.n	800bf08 <_printf_float+0x98>
 800c1fa:	9a08      	ldr	r2, [sp, #32]
 800c1fc:	2a01      	cmp	r2, #1
 800c1fe:	dc01      	bgt.n	800c204 <_printf_float+0x394>
 800c200:	07db      	lsls	r3, r3, #31
 800c202:	d537      	bpl.n	800c274 <_printf_float+0x404>
 800c204:	2301      	movs	r3, #1
 800c206:	4642      	mov	r2, r8
 800c208:	4631      	mov	r1, r6
 800c20a:	4628      	mov	r0, r5
 800c20c:	47b8      	blx	r7
 800c20e:	3001      	adds	r0, #1
 800c210:	f43f ae7a 	beq.w	800bf08 <_printf_float+0x98>
 800c214:	4653      	mov	r3, sl
 800c216:	465a      	mov	r2, fp
 800c218:	4631      	mov	r1, r6
 800c21a:	4628      	mov	r0, r5
 800c21c:	47b8      	blx	r7
 800c21e:	3001      	adds	r0, #1
 800c220:	f43f ae72 	beq.w	800bf08 <_printf_float+0x98>
 800c224:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800c228:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c22c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c230:	9b08      	ldr	r3, [sp, #32]
 800c232:	d01a      	beq.n	800c26a <_printf_float+0x3fa>
 800c234:	3b01      	subs	r3, #1
 800c236:	f108 0201 	add.w	r2, r8, #1
 800c23a:	4631      	mov	r1, r6
 800c23c:	4628      	mov	r0, r5
 800c23e:	47b8      	blx	r7
 800c240:	3001      	adds	r0, #1
 800c242:	d10e      	bne.n	800c262 <_printf_float+0x3f2>
 800c244:	e660      	b.n	800bf08 <_printf_float+0x98>
 800c246:	2301      	movs	r3, #1
 800c248:	464a      	mov	r2, r9
 800c24a:	4631      	mov	r1, r6
 800c24c:	4628      	mov	r0, r5
 800c24e:	47b8      	blx	r7
 800c250:	3001      	adds	r0, #1
 800c252:	f43f ae59 	beq.w	800bf08 <_printf_float+0x98>
 800c256:	f108 0801 	add.w	r8, r8, #1
 800c25a:	9b08      	ldr	r3, [sp, #32]
 800c25c:	3b01      	subs	r3, #1
 800c25e:	4543      	cmp	r3, r8
 800c260:	dcf1      	bgt.n	800c246 <_printf_float+0x3d6>
 800c262:	9b04      	ldr	r3, [sp, #16]
 800c264:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c268:	e6dd      	b.n	800c026 <_printf_float+0x1b6>
 800c26a:	f04f 0800 	mov.w	r8, #0
 800c26e:	f104 091a 	add.w	r9, r4, #26
 800c272:	e7f2      	b.n	800c25a <_printf_float+0x3ea>
 800c274:	2301      	movs	r3, #1
 800c276:	4642      	mov	r2, r8
 800c278:	e7df      	b.n	800c23a <_printf_float+0x3ca>
 800c27a:	2301      	movs	r3, #1
 800c27c:	464a      	mov	r2, r9
 800c27e:	4631      	mov	r1, r6
 800c280:	4628      	mov	r0, r5
 800c282:	47b8      	blx	r7
 800c284:	3001      	adds	r0, #1
 800c286:	f43f ae3f 	beq.w	800bf08 <_printf_float+0x98>
 800c28a:	f108 0801 	add.w	r8, r8, #1
 800c28e:	68e3      	ldr	r3, [r4, #12]
 800c290:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c292:	1a5b      	subs	r3, r3, r1
 800c294:	4543      	cmp	r3, r8
 800c296:	dcf0      	bgt.n	800c27a <_printf_float+0x40a>
 800c298:	e6f9      	b.n	800c08e <_printf_float+0x21e>
 800c29a:	f04f 0800 	mov.w	r8, #0
 800c29e:	f104 0919 	add.w	r9, r4, #25
 800c2a2:	e7f4      	b.n	800c28e <_printf_float+0x41e>

0800c2a4 <_printf_common>:
 800c2a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2a8:	4616      	mov	r6, r2
 800c2aa:	4699      	mov	r9, r3
 800c2ac:	688a      	ldr	r2, [r1, #8]
 800c2ae:	690b      	ldr	r3, [r1, #16]
 800c2b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c2b4:	4293      	cmp	r3, r2
 800c2b6:	bfb8      	it	lt
 800c2b8:	4613      	movlt	r3, r2
 800c2ba:	6033      	str	r3, [r6, #0]
 800c2bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c2c0:	4607      	mov	r7, r0
 800c2c2:	460c      	mov	r4, r1
 800c2c4:	b10a      	cbz	r2, 800c2ca <_printf_common+0x26>
 800c2c6:	3301      	adds	r3, #1
 800c2c8:	6033      	str	r3, [r6, #0]
 800c2ca:	6823      	ldr	r3, [r4, #0]
 800c2cc:	0699      	lsls	r1, r3, #26
 800c2ce:	bf42      	ittt	mi
 800c2d0:	6833      	ldrmi	r3, [r6, #0]
 800c2d2:	3302      	addmi	r3, #2
 800c2d4:	6033      	strmi	r3, [r6, #0]
 800c2d6:	6825      	ldr	r5, [r4, #0]
 800c2d8:	f015 0506 	ands.w	r5, r5, #6
 800c2dc:	d106      	bne.n	800c2ec <_printf_common+0x48>
 800c2de:	f104 0a19 	add.w	sl, r4, #25
 800c2e2:	68e3      	ldr	r3, [r4, #12]
 800c2e4:	6832      	ldr	r2, [r6, #0]
 800c2e6:	1a9b      	subs	r3, r3, r2
 800c2e8:	42ab      	cmp	r3, r5
 800c2ea:	dc26      	bgt.n	800c33a <_printf_common+0x96>
 800c2ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c2f0:	1e13      	subs	r3, r2, #0
 800c2f2:	6822      	ldr	r2, [r4, #0]
 800c2f4:	bf18      	it	ne
 800c2f6:	2301      	movne	r3, #1
 800c2f8:	0692      	lsls	r2, r2, #26
 800c2fa:	d42b      	bmi.n	800c354 <_printf_common+0xb0>
 800c2fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c300:	4649      	mov	r1, r9
 800c302:	4638      	mov	r0, r7
 800c304:	47c0      	blx	r8
 800c306:	3001      	adds	r0, #1
 800c308:	d01e      	beq.n	800c348 <_printf_common+0xa4>
 800c30a:	6823      	ldr	r3, [r4, #0]
 800c30c:	6922      	ldr	r2, [r4, #16]
 800c30e:	f003 0306 	and.w	r3, r3, #6
 800c312:	2b04      	cmp	r3, #4
 800c314:	bf02      	ittt	eq
 800c316:	68e5      	ldreq	r5, [r4, #12]
 800c318:	6833      	ldreq	r3, [r6, #0]
 800c31a:	1aed      	subeq	r5, r5, r3
 800c31c:	68a3      	ldr	r3, [r4, #8]
 800c31e:	bf0c      	ite	eq
 800c320:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c324:	2500      	movne	r5, #0
 800c326:	4293      	cmp	r3, r2
 800c328:	bfc4      	itt	gt
 800c32a:	1a9b      	subgt	r3, r3, r2
 800c32c:	18ed      	addgt	r5, r5, r3
 800c32e:	2600      	movs	r6, #0
 800c330:	341a      	adds	r4, #26
 800c332:	42b5      	cmp	r5, r6
 800c334:	d11a      	bne.n	800c36c <_printf_common+0xc8>
 800c336:	2000      	movs	r0, #0
 800c338:	e008      	b.n	800c34c <_printf_common+0xa8>
 800c33a:	2301      	movs	r3, #1
 800c33c:	4652      	mov	r2, sl
 800c33e:	4649      	mov	r1, r9
 800c340:	4638      	mov	r0, r7
 800c342:	47c0      	blx	r8
 800c344:	3001      	adds	r0, #1
 800c346:	d103      	bne.n	800c350 <_printf_common+0xac>
 800c348:	f04f 30ff 	mov.w	r0, #4294967295
 800c34c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c350:	3501      	adds	r5, #1
 800c352:	e7c6      	b.n	800c2e2 <_printf_common+0x3e>
 800c354:	18e1      	adds	r1, r4, r3
 800c356:	1c5a      	adds	r2, r3, #1
 800c358:	2030      	movs	r0, #48	; 0x30
 800c35a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c35e:	4422      	add	r2, r4
 800c360:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c364:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c368:	3302      	adds	r3, #2
 800c36a:	e7c7      	b.n	800c2fc <_printf_common+0x58>
 800c36c:	2301      	movs	r3, #1
 800c36e:	4622      	mov	r2, r4
 800c370:	4649      	mov	r1, r9
 800c372:	4638      	mov	r0, r7
 800c374:	47c0      	blx	r8
 800c376:	3001      	adds	r0, #1
 800c378:	d0e6      	beq.n	800c348 <_printf_common+0xa4>
 800c37a:	3601      	adds	r6, #1
 800c37c:	e7d9      	b.n	800c332 <_printf_common+0x8e>
	...

0800c380 <_printf_i>:
 800c380:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c384:	7e0f      	ldrb	r7, [r1, #24]
 800c386:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c388:	2f78      	cmp	r7, #120	; 0x78
 800c38a:	4691      	mov	r9, r2
 800c38c:	4680      	mov	r8, r0
 800c38e:	460c      	mov	r4, r1
 800c390:	469a      	mov	sl, r3
 800c392:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c396:	d807      	bhi.n	800c3a8 <_printf_i+0x28>
 800c398:	2f62      	cmp	r7, #98	; 0x62
 800c39a:	d80a      	bhi.n	800c3b2 <_printf_i+0x32>
 800c39c:	2f00      	cmp	r7, #0
 800c39e:	f000 80d4 	beq.w	800c54a <_printf_i+0x1ca>
 800c3a2:	2f58      	cmp	r7, #88	; 0x58
 800c3a4:	f000 80c0 	beq.w	800c528 <_printf_i+0x1a8>
 800c3a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c3ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c3b0:	e03a      	b.n	800c428 <_printf_i+0xa8>
 800c3b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c3b6:	2b15      	cmp	r3, #21
 800c3b8:	d8f6      	bhi.n	800c3a8 <_printf_i+0x28>
 800c3ba:	a101      	add	r1, pc, #4	; (adr r1, 800c3c0 <_printf_i+0x40>)
 800c3bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c3c0:	0800c419 	.word	0x0800c419
 800c3c4:	0800c42d 	.word	0x0800c42d
 800c3c8:	0800c3a9 	.word	0x0800c3a9
 800c3cc:	0800c3a9 	.word	0x0800c3a9
 800c3d0:	0800c3a9 	.word	0x0800c3a9
 800c3d4:	0800c3a9 	.word	0x0800c3a9
 800c3d8:	0800c42d 	.word	0x0800c42d
 800c3dc:	0800c3a9 	.word	0x0800c3a9
 800c3e0:	0800c3a9 	.word	0x0800c3a9
 800c3e4:	0800c3a9 	.word	0x0800c3a9
 800c3e8:	0800c3a9 	.word	0x0800c3a9
 800c3ec:	0800c531 	.word	0x0800c531
 800c3f0:	0800c459 	.word	0x0800c459
 800c3f4:	0800c4eb 	.word	0x0800c4eb
 800c3f8:	0800c3a9 	.word	0x0800c3a9
 800c3fc:	0800c3a9 	.word	0x0800c3a9
 800c400:	0800c553 	.word	0x0800c553
 800c404:	0800c3a9 	.word	0x0800c3a9
 800c408:	0800c459 	.word	0x0800c459
 800c40c:	0800c3a9 	.word	0x0800c3a9
 800c410:	0800c3a9 	.word	0x0800c3a9
 800c414:	0800c4f3 	.word	0x0800c4f3
 800c418:	682b      	ldr	r3, [r5, #0]
 800c41a:	1d1a      	adds	r2, r3, #4
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	602a      	str	r2, [r5, #0]
 800c420:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c424:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c428:	2301      	movs	r3, #1
 800c42a:	e09f      	b.n	800c56c <_printf_i+0x1ec>
 800c42c:	6820      	ldr	r0, [r4, #0]
 800c42e:	682b      	ldr	r3, [r5, #0]
 800c430:	0607      	lsls	r7, r0, #24
 800c432:	f103 0104 	add.w	r1, r3, #4
 800c436:	6029      	str	r1, [r5, #0]
 800c438:	d501      	bpl.n	800c43e <_printf_i+0xbe>
 800c43a:	681e      	ldr	r6, [r3, #0]
 800c43c:	e003      	b.n	800c446 <_printf_i+0xc6>
 800c43e:	0646      	lsls	r6, r0, #25
 800c440:	d5fb      	bpl.n	800c43a <_printf_i+0xba>
 800c442:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c446:	2e00      	cmp	r6, #0
 800c448:	da03      	bge.n	800c452 <_printf_i+0xd2>
 800c44a:	232d      	movs	r3, #45	; 0x2d
 800c44c:	4276      	negs	r6, r6
 800c44e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c452:	485a      	ldr	r0, [pc, #360]	; (800c5bc <_printf_i+0x23c>)
 800c454:	230a      	movs	r3, #10
 800c456:	e012      	b.n	800c47e <_printf_i+0xfe>
 800c458:	682b      	ldr	r3, [r5, #0]
 800c45a:	6820      	ldr	r0, [r4, #0]
 800c45c:	1d19      	adds	r1, r3, #4
 800c45e:	6029      	str	r1, [r5, #0]
 800c460:	0605      	lsls	r5, r0, #24
 800c462:	d501      	bpl.n	800c468 <_printf_i+0xe8>
 800c464:	681e      	ldr	r6, [r3, #0]
 800c466:	e002      	b.n	800c46e <_printf_i+0xee>
 800c468:	0641      	lsls	r1, r0, #25
 800c46a:	d5fb      	bpl.n	800c464 <_printf_i+0xe4>
 800c46c:	881e      	ldrh	r6, [r3, #0]
 800c46e:	4853      	ldr	r0, [pc, #332]	; (800c5bc <_printf_i+0x23c>)
 800c470:	2f6f      	cmp	r7, #111	; 0x6f
 800c472:	bf0c      	ite	eq
 800c474:	2308      	moveq	r3, #8
 800c476:	230a      	movne	r3, #10
 800c478:	2100      	movs	r1, #0
 800c47a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c47e:	6865      	ldr	r5, [r4, #4]
 800c480:	60a5      	str	r5, [r4, #8]
 800c482:	2d00      	cmp	r5, #0
 800c484:	bfa2      	ittt	ge
 800c486:	6821      	ldrge	r1, [r4, #0]
 800c488:	f021 0104 	bicge.w	r1, r1, #4
 800c48c:	6021      	strge	r1, [r4, #0]
 800c48e:	b90e      	cbnz	r6, 800c494 <_printf_i+0x114>
 800c490:	2d00      	cmp	r5, #0
 800c492:	d04b      	beq.n	800c52c <_printf_i+0x1ac>
 800c494:	4615      	mov	r5, r2
 800c496:	fbb6 f1f3 	udiv	r1, r6, r3
 800c49a:	fb03 6711 	mls	r7, r3, r1, r6
 800c49e:	5dc7      	ldrb	r7, [r0, r7]
 800c4a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c4a4:	4637      	mov	r7, r6
 800c4a6:	42bb      	cmp	r3, r7
 800c4a8:	460e      	mov	r6, r1
 800c4aa:	d9f4      	bls.n	800c496 <_printf_i+0x116>
 800c4ac:	2b08      	cmp	r3, #8
 800c4ae:	d10b      	bne.n	800c4c8 <_printf_i+0x148>
 800c4b0:	6823      	ldr	r3, [r4, #0]
 800c4b2:	07de      	lsls	r6, r3, #31
 800c4b4:	d508      	bpl.n	800c4c8 <_printf_i+0x148>
 800c4b6:	6923      	ldr	r3, [r4, #16]
 800c4b8:	6861      	ldr	r1, [r4, #4]
 800c4ba:	4299      	cmp	r1, r3
 800c4bc:	bfde      	ittt	le
 800c4be:	2330      	movle	r3, #48	; 0x30
 800c4c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c4c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c4c8:	1b52      	subs	r2, r2, r5
 800c4ca:	6122      	str	r2, [r4, #16]
 800c4cc:	f8cd a000 	str.w	sl, [sp]
 800c4d0:	464b      	mov	r3, r9
 800c4d2:	aa03      	add	r2, sp, #12
 800c4d4:	4621      	mov	r1, r4
 800c4d6:	4640      	mov	r0, r8
 800c4d8:	f7ff fee4 	bl	800c2a4 <_printf_common>
 800c4dc:	3001      	adds	r0, #1
 800c4de:	d14a      	bne.n	800c576 <_printf_i+0x1f6>
 800c4e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c4e4:	b004      	add	sp, #16
 800c4e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4ea:	6823      	ldr	r3, [r4, #0]
 800c4ec:	f043 0320 	orr.w	r3, r3, #32
 800c4f0:	6023      	str	r3, [r4, #0]
 800c4f2:	4833      	ldr	r0, [pc, #204]	; (800c5c0 <_printf_i+0x240>)
 800c4f4:	2778      	movs	r7, #120	; 0x78
 800c4f6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c4fa:	6823      	ldr	r3, [r4, #0]
 800c4fc:	6829      	ldr	r1, [r5, #0]
 800c4fe:	061f      	lsls	r7, r3, #24
 800c500:	f851 6b04 	ldr.w	r6, [r1], #4
 800c504:	d402      	bmi.n	800c50c <_printf_i+0x18c>
 800c506:	065f      	lsls	r7, r3, #25
 800c508:	bf48      	it	mi
 800c50a:	b2b6      	uxthmi	r6, r6
 800c50c:	07df      	lsls	r7, r3, #31
 800c50e:	bf48      	it	mi
 800c510:	f043 0320 	orrmi.w	r3, r3, #32
 800c514:	6029      	str	r1, [r5, #0]
 800c516:	bf48      	it	mi
 800c518:	6023      	strmi	r3, [r4, #0]
 800c51a:	b91e      	cbnz	r6, 800c524 <_printf_i+0x1a4>
 800c51c:	6823      	ldr	r3, [r4, #0]
 800c51e:	f023 0320 	bic.w	r3, r3, #32
 800c522:	6023      	str	r3, [r4, #0]
 800c524:	2310      	movs	r3, #16
 800c526:	e7a7      	b.n	800c478 <_printf_i+0xf8>
 800c528:	4824      	ldr	r0, [pc, #144]	; (800c5bc <_printf_i+0x23c>)
 800c52a:	e7e4      	b.n	800c4f6 <_printf_i+0x176>
 800c52c:	4615      	mov	r5, r2
 800c52e:	e7bd      	b.n	800c4ac <_printf_i+0x12c>
 800c530:	682b      	ldr	r3, [r5, #0]
 800c532:	6826      	ldr	r6, [r4, #0]
 800c534:	6961      	ldr	r1, [r4, #20]
 800c536:	1d18      	adds	r0, r3, #4
 800c538:	6028      	str	r0, [r5, #0]
 800c53a:	0635      	lsls	r5, r6, #24
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	d501      	bpl.n	800c544 <_printf_i+0x1c4>
 800c540:	6019      	str	r1, [r3, #0]
 800c542:	e002      	b.n	800c54a <_printf_i+0x1ca>
 800c544:	0670      	lsls	r0, r6, #25
 800c546:	d5fb      	bpl.n	800c540 <_printf_i+0x1c0>
 800c548:	8019      	strh	r1, [r3, #0]
 800c54a:	2300      	movs	r3, #0
 800c54c:	6123      	str	r3, [r4, #16]
 800c54e:	4615      	mov	r5, r2
 800c550:	e7bc      	b.n	800c4cc <_printf_i+0x14c>
 800c552:	682b      	ldr	r3, [r5, #0]
 800c554:	1d1a      	adds	r2, r3, #4
 800c556:	602a      	str	r2, [r5, #0]
 800c558:	681d      	ldr	r5, [r3, #0]
 800c55a:	6862      	ldr	r2, [r4, #4]
 800c55c:	2100      	movs	r1, #0
 800c55e:	4628      	mov	r0, r5
 800c560:	f7f3 febe 	bl	80002e0 <memchr>
 800c564:	b108      	cbz	r0, 800c56a <_printf_i+0x1ea>
 800c566:	1b40      	subs	r0, r0, r5
 800c568:	6060      	str	r0, [r4, #4]
 800c56a:	6863      	ldr	r3, [r4, #4]
 800c56c:	6123      	str	r3, [r4, #16]
 800c56e:	2300      	movs	r3, #0
 800c570:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c574:	e7aa      	b.n	800c4cc <_printf_i+0x14c>
 800c576:	6923      	ldr	r3, [r4, #16]
 800c578:	462a      	mov	r2, r5
 800c57a:	4649      	mov	r1, r9
 800c57c:	4640      	mov	r0, r8
 800c57e:	47d0      	blx	sl
 800c580:	3001      	adds	r0, #1
 800c582:	d0ad      	beq.n	800c4e0 <_printf_i+0x160>
 800c584:	6823      	ldr	r3, [r4, #0]
 800c586:	079b      	lsls	r3, r3, #30
 800c588:	d413      	bmi.n	800c5b2 <_printf_i+0x232>
 800c58a:	68e0      	ldr	r0, [r4, #12]
 800c58c:	9b03      	ldr	r3, [sp, #12]
 800c58e:	4298      	cmp	r0, r3
 800c590:	bfb8      	it	lt
 800c592:	4618      	movlt	r0, r3
 800c594:	e7a6      	b.n	800c4e4 <_printf_i+0x164>
 800c596:	2301      	movs	r3, #1
 800c598:	4632      	mov	r2, r6
 800c59a:	4649      	mov	r1, r9
 800c59c:	4640      	mov	r0, r8
 800c59e:	47d0      	blx	sl
 800c5a0:	3001      	adds	r0, #1
 800c5a2:	d09d      	beq.n	800c4e0 <_printf_i+0x160>
 800c5a4:	3501      	adds	r5, #1
 800c5a6:	68e3      	ldr	r3, [r4, #12]
 800c5a8:	9903      	ldr	r1, [sp, #12]
 800c5aa:	1a5b      	subs	r3, r3, r1
 800c5ac:	42ab      	cmp	r3, r5
 800c5ae:	dcf2      	bgt.n	800c596 <_printf_i+0x216>
 800c5b0:	e7eb      	b.n	800c58a <_printf_i+0x20a>
 800c5b2:	2500      	movs	r5, #0
 800c5b4:	f104 0619 	add.w	r6, r4, #25
 800c5b8:	e7f5      	b.n	800c5a6 <_printf_i+0x226>
 800c5ba:	bf00      	nop
 800c5bc:	0800e84a 	.word	0x0800e84a
 800c5c0:	0800e85b 	.word	0x0800e85b

0800c5c4 <std>:
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	b510      	push	{r4, lr}
 800c5c8:	4604      	mov	r4, r0
 800c5ca:	e9c0 3300 	strd	r3, r3, [r0]
 800c5ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c5d2:	6083      	str	r3, [r0, #8]
 800c5d4:	8181      	strh	r1, [r0, #12]
 800c5d6:	6643      	str	r3, [r0, #100]	; 0x64
 800c5d8:	81c2      	strh	r2, [r0, #14]
 800c5da:	6183      	str	r3, [r0, #24]
 800c5dc:	4619      	mov	r1, r3
 800c5de:	2208      	movs	r2, #8
 800c5e0:	305c      	adds	r0, #92	; 0x5c
 800c5e2:	f000 f914 	bl	800c80e <memset>
 800c5e6:	4b0d      	ldr	r3, [pc, #52]	; (800c61c <std+0x58>)
 800c5e8:	6263      	str	r3, [r4, #36]	; 0x24
 800c5ea:	4b0d      	ldr	r3, [pc, #52]	; (800c620 <std+0x5c>)
 800c5ec:	62a3      	str	r3, [r4, #40]	; 0x28
 800c5ee:	4b0d      	ldr	r3, [pc, #52]	; (800c624 <std+0x60>)
 800c5f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c5f2:	4b0d      	ldr	r3, [pc, #52]	; (800c628 <std+0x64>)
 800c5f4:	6323      	str	r3, [r4, #48]	; 0x30
 800c5f6:	4b0d      	ldr	r3, [pc, #52]	; (800c62c <std+0x68>)
 800c5f8:	6224      	str	r4, [r4, #32]
 800c5fa:	429c      	cmp	r4, r3
 800c5fc:	d006      	beq.n	800c60c <std+0x48>
 800c5fe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c602:	4294      	cmp	r4, r2
 800c604:	d002      	beq.n	800c60c <std+0x48>
 800c606:	33d0      	adds	r3, #208	; 0xd0
 800c608:	429c      	cmp	r4, r3
 800c60a:	d105      	bne.n	800c618 <std+0x54>
 800c60c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c614:	f000 b988 	b.w	800c928 <__retarget_lock_init_recursive>
 800c618:	bd10      	pop	{r4, pc}
 800c61a:	bf00      	nop
 800c61c:	0800c789 	.word	0x0800c789
 800c620:	0800c7ab 	.word	0x0800c7ab
 800c624:	0800c7e3 	.word	0x0800c7e3
 800c628:	0800c807 	.word	0x0800c807
 800c62c:	24002130 	.word	0x24002130

0800c630 <stdio_exit_handler>:
 800c630:	4a02      	ldr	r2, [pc, #8]	; (800c63c <stdio_exit_handler+0xc>)
 800c632:	4903      	ldr	r1, [pc, #12]	; (800c640 <stdio_exit_handler+0x10>)
 800c634:	4803      	ldr	r0, [pc, #12]	; (800c644 <stdio_exit_handler+0x14>)
 800c636:	f000 b869 	b.w	800c70c <_fwalk_sglue>
 800c63a:	bf00      	nop
 800c63c:	24000144 	.word	0x24000144
 800c640:	0800e075 	.word	0x0800e075
 800c644:	24000150 	.word	0x24000150

0800c648 <cleanup_stdio>:
 800c648:	6841      	ldr	r1, [r0, #4]
 800c64a:	4b0c      	ldr	r3, [pc, #48]	; (800c67c <cleanup_stdio+0x34>)
 800c64c:	4299      	cmp	r1, r3
 800c64e:	b510      	push	{r4, lr}
 800c650:	4604      	mov	r4, r0
 800c652:	d001      	beq.n	800c658 <cleanup_stdio+0x10>
 800c654:	f001 fd0e 	bl	800e074 <_fflush_r>
 800c658:	68a1      	ldr	r1, [r4, #8]
 800c65a:	4b09      	ldr	r3, [pc, #36]	; (800c680 <cleanup_stdio+0x38>)
 800c65c:	4299      	cmp	r1, r3
 800c65e:	d002      	beq.n	800c666 <cleanup_stdio+0x1e>
 800c660:	4620      	mov	r0, r4
 800c662:	f001 fd07 	bl	800e074 <_fflush_r>
 800c666:	68e1      	ldr	r1, [r4, #12]
 800c668:	4b06      	ldr	r3, [pc, #24]	; (800c684 <cleanup_stdio+0x3c>)
 800c66a:	4299      	cmp	r1, r3
 800c66c:	d004      	beq.n	800c678 <cleanup_stdio+0x30>
 800c66e:	4620      	mov	r0, r4
 800c670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c674:	f001 bcfe 	b.w	800e074 <_fflush_r>
 800c678:	bd10      	pop	{r4, pc}
 800c67a:	bf00      	nop
 800c67c:	24002130 	.word	0x24002130
 800c680:	24002198 	.word	0x24002198
 800c684:	24002200 	.word	0x24002200

0800c688 <global_stdio_init.part.0>:
 800c688:	b510      	push	{r4, lr}
 800c68a:	4b0b      	ldr	r3, [pc, #44]	; (800c6b8 <global_stdio_init.part.0+0x30>)
 800c68c:	4c0b      	ldr	r4, [pc, #44]	; (800c6bc <global_stdio_init.part.0+0x34>)
 800c68e:	4a0c      	ldr	r2, [pc, #48]	; (800c6c0 <global_stdio_init.part.0+0x38>)
 800c690:	601a      	str	r2, [r3, #0]
 800c692:	4620      	mov	r0, r4
 800c694:	2200      	movs	r2, #0
 800c696:	2104      	movs	r1, #4
 800c698:	f7ff ff94 	bl	800c5c4 <std>
 800c69c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c6a0:	2201      	movs	r2, #1
 800c6a2:	2109      	movs	r1, #9
 800c6a4:	f7ff ff8e 	bl	800c5c4 <std>
 800c6a8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c6ac:	2202      	movs	r2, #2
 800c6ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6b2:	2112      	movs	r1, #18
 800c6b4:	f7ff bf86 	b.w	800c5c4 <std>
 800c6b8:	24002268 	.word	0x24002268
 800c6bc:	24002130 	.word	0x24002130
 800c6c0:	0800c631 	.word	0x0800c631

0800c6c4 <__sfp_lock_acquire>:
 800c6c4:	4801      	ldr	r0, [pc, #4]	; (800c6cc <__sfp_lock_acquire+0x8>)
 800c6c6:	f000 b930 	b.w	800c92a <__retarget_lock_acquire_recursive>
 800c6ca:	bf00      	nop
 800c6cc:	24002271 	.word	0x24002271

0800c6d0 <__sfp_lock_release>:
 800c6d0:	4801      	ldr	r0, [pc, #4]	; (800c6d8 <__sfp_lock_release+0x8>)
 800c6d2:	f000 b92b 	b.w	800c92c <__retarget_lock_release_recursive>
 800c6d6:	bf00      	nop
 800c6d8:	24002271 	.word	0x24002271

0800c6dc <__sinit>:
 800c6dc:	b510      	push	{r4, lr}
 800c6de:	4604      	mov	r4, r0
 800c6e0:	f7ff fff0 	bl	800c6c4 <__sfp_lock_acquire>
 800c6e4:	6a23      	ldr	r3, [r4, #32]
 800c6e6:	b11b      	cbz	r3, 800c6f0 <__sinit+0x14>
 800c6e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6ec:	f7ff bff0 	b.w	800c6d0 <__sfp_lock_release>
 800c6f0:	4b04      	ldr	r3, [pc, #16]	; (800c704 <__sinit+0x28>)
 800c6f2:	6223      	str	r3, [r4, #32]
 800c6f4:	4b04      	ldr	r3, [pc, #16]	; (800c708 <__sinit+0x2c>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d1f5      	bne.n	800c6e8 <__sinit+0xc>
 800c6fc:	f7ff ffc4 	bl	800c688 <global_stdio_init.part.0>
 800c700:	e7f2      	b.n	800c6e8 <__sinit+0xc>
 800c702:	bf00      	nop
 800c704:	0800c649 	.word	0x0800c649
 800c708:	24002268 	.word	0x24002268

0800c70c <_fwalk_sglue>:
 800c70c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c710:	4607      	mov	r7, r0
 800c712:	4688      	mov	r8, r1
 800c714:	4614      	mov	r4, r2
 800c716:	2600      	movs	r6, #0
 800c718:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c71c:	f1b9 0901 	subs.w	r9, r9, #1
 800c720:	d505      	bpl.n	800c72e <_fwalk_sglue+0x22>
 800c722:	6824      	ldr	r4, [r4, #0]
 800c724:	2c00      	cmp	r4, #0
 800c726:	d1f7      	bne.n	800c718 <_fwalk_sglue+0xc>
 800c728:	4630      	mov	r0, r6
 800c72a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c72e:	89ab      	ldrh	r3, [r5, #12]
 800c730:	2b01      	cmp	r3, #1
 800c732:	d907      	bls.n	800c744 <_fwalk_sglue+0x38>
 800c734:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c738:	3301      	adds	r3, #1
 800c73a:	d003      	beq.n	800c744 <_fwalk_sglue+0x38>
 800c73c:	4629      	mov	r1, r5
 800c73e:	4638      	mov	r0, r7
 800c740:	47c0      	blx	r8
 800c742:	4306      	orrs	r6, r0
 800c744:	3568      	adds	r5, #104	; 0x68
 800c746:	e7e9      	b.n	800c71c <_fwalk_sglue+0x10>

0800c748 <siprintf>:
 800c748:	b40e      	push	{r1, r2, r3}
 800c74a:	b500      	push	{lr}
 800c74c:	b09c      	sub	sp, #112	; 0x70
 800c74e:	ab1d      	add	r3, sp, #116	; 0x74
 800c750:	9002      	str	r0, [sp, #8]
 800c752:	9006      	str	r0, [sp, #24]
 800c754:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c758:	4809      	ldr	r0, [pc, #36]	; (800c780 <siprintf+0x38>)
 800c75a:	9107      	str	r1, [sp, #28]
 800c75c:	9104      	str	r1, [sp, #16]
 800c75e:	4909      	ldr	r1, [pc, #36]	; (800c784 <siprintf+0x3c>)
 800c760:	f853 2b04 	ldr.w	r2, [r3], #4
 800c764:	9105      	str	r1, [sp, #20]
 800c766:	6800      	ldr	r0, [r0, #0]
 800c768:	9301      	str	r3, [sp, #4]
 800c76a:	a902      	add	r1, sp, #8
 800c76c:	f001 fafe 	bl	800dd6c <_svfiprintf_r>
 800c770:	9b02      	ldr	r3, [sp, #8]
 800c772:	2200      	movs	r2, #0
 800c774:	701a      	strb	r2, [r3, #0]
 800c776:	b01c      	add	sp, #112	; 0x70
 800c778:	f85d eb04 	ldr.w	lr, [sp], #4
 800c77c:	b003      	add	sp, #12
 800c77e:	4770      	bx	lr
 800c780:	2400019c 	.word	0x2400019c
 800c784:	ffff0208 	.word	0xffff0208

0800c788 <__sread>:
 800c788:	b510      	push	{r4, lr}
 800c78a:	460c      	mov	r4, r1
 800c78c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c790:	f000 f86c 	bl	800c86c <_read_r>
 800c794:	2800      	cmp	r0, #0
 800c796:	bfab      	itete	ge
 800c798:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c79a:	89a3      	ldrhlt	r3, [r4, #12]
 800c79c:	181b      	addge	r3, r3, r0
 800c79e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c7a2:	bfac      	ite	ge
 800c7a4:	6563      	strge	r3, [r4, #84]	; 0x54
 800c7a6:	81a3      	strhlt	r3, [r4, #12]
 800c7a8:	bd10      	pop	{r4, pc}

0800c7aa <__swrite>:
 800c7aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7ae:	461f      	mov	r7, r3
 800c7b0:	898b      	ldrh	r3, [r1, #12]
 800c7b2:	05db      	lsls	r3, r3, #23
 800c7b4:	4605      	mov	r5, r0
 800c7b6:	460c      	mov	r4, r1
 800c7b8:	4616      	mov	r6, r2
 800c7ba:	d505      	bpl.n	800c7c8 <__swrite+0x1e>
 800c7bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7c0:	2302      	movs	r3, #2
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	f000 f840 	bl	800c848 <_lseek_r>
 800c7c8:	89a3      	ldrh	r3, [r4, #12]
 800c7ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c7ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c7d2:	81a3      	strh	r3, [r4, #12]
 800c7d4:	4632      	mov	r2, r6
 800c7d6:	463b      	mov	r3, r7
 800c7d8:	4628      	mov	r0, r5
 800c7da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c7de:	f000 b867 	b.w	800c8b0 <_write_r>

0800c7e2 <__sseek>:
 800c7e2:	b510      	push	{r4, lr}
 800c7e4:	460c      	mov	r4, r1
 800c7e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7ea:	f000 f82d 	bl	800c848 <_lseek_r>
 800c7ee:	1c43      	adds	r3, r0, #1
 800c7f0:	89a3      	ldrh	r3, [r4, #12]
 800c7f2:	bf15      	itete	ne
 800c7f4:	6560      	strne	r0, [r4, #84]	; 0x54
 800c7f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c7fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c7fe:	81a3      	strheq	r3, [r4, #12]
 800c800:	bf18      	it	ne
 800c802:	81a3      	strhne	r3, [r4, #12]
 800c804:	bd10      	pop	{r4, pc}

0800c806 <__sclose>:
 800c806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c80a:	f000 b80d 	b.w	800c828 <_close_r>

0800c80e <memset>:
 800c80e:	4402      	add	r2, r0
 800c810:	4603      	mov	r3, r0
 800c812:	4293      	cmp	r3, r2
 800c814:	d100      	bne.n	800c818 <memset+0xa>
 800c816:	4770      	bx	lr
 800c818:	f803 1b01 	strb.w	r1, [r3], #1
 800c81c:	e7f9      	b.n	800c812 <memset+0x4>
	...

0800c820 <_localeconv_r>:
 800c820:	4800      	ldr	r0, [pc, #0]	; (800c824 <_localeconv_r+0x4>)
 800c822:	4770      	bx	lr
 800c824:	24000290 	.word	0x24000290

0800c828 <_close_r>:
 800c828:	b538      	push	{r3, r4, r5, lr}
 800c82a:	4d06      	ldr	r5, [pc, #24]	; (800c844 <_close_r+0x1c>)
 800c82c:	2300      	movs	r3, #0
 800c82e:	4604      	mov	r4, r0
 800c830:	4608      	mov	r0, r1
 800c832:	602b      	str	r3, [r5, #0]
 800c834:	f7f4 fc31 	bl	800109a <_close>
 800c838:	1c43      	adds	r3, r0, #1
 800c83a:	d102      	bne.n	800c842 <_close_r+0x1a>
 800c83c:	682b      	ldr	r3, [r5, #0]
 800c83e:	b103      	cbz	r3, 800c842 <_close_r+0x1a>
 800c840:	6023      	str	r3, [r4, #0]
 800c842:	bd38      	pop	{r3, r4, r5, pc}
 800c844:	2400226c 	.word	0x2400226c

0800c848 <_lseek_r>:
 800c848:	b538      	push	{r3, r4, r5, lr}
 800c84a:	4d07      	ldr	r5, [pc, #28]	; (800c868 <_lseek_r+0x20>)
 800c84c:	4604      	mov	r4, r0
 800c84e:	4608      	mov	r0, r1
 800c850:	4611      	mov	r1, r2
 800c852:	2200      	movs	r2, #0
 800c854:	602a      	str	r2, [r5, #0]
 800c856:	461a      	mov	r2, r3
 800c858:	f7f4 fc46 	bl	80010e8 <_lseek>
 800c85c:	1c43      	adds	r3, r0, #1
 800c85e:	d102      	bne.n	800c866 <_lseek_r+0x1e>
 800c860:	682b      	ldr	r3, [r5, #0]
 800c862:	b103      	cbz	r3, 800c866 <_lseek_r+0x1e>
 800c864:	6023      	str	r3, [r4, #0]
 800c866:	bd38      	pop	{r3, r4, r5, pc}
 800c868:	2400226c 	.word	0x2400226c

0800c86c <_read_r>:
 800c86c:	b538      	push	{r3, r4, r5, lr}
 800c86e:	4d07      	ldr	r5, [pc, #28]	; (800c88c <_read_r+0x20>)
 800c870:	4604      	mov	r4, r0
 800c872:	4608      	mov	r0, r1
 800c874:	4611      	mov	r1, r2
 800c876:	2200      	movs	r2, #0
 800c878:	602a      	str	r2, [r5, #0]
 800c87a:	461a      	mov	r2, r3
 800c87c:	f7f4 fbd4 	bl	8001028 <_read>
 800c880:	1c43      	adds	r3, r0, #1
 800c882:	d102      	bne.n	800c88a <_read_r+0x1e>
 800c884:	682b      	ldr	r3, [r5, #0]
 800c886:	b103      	cbz	r3, 800c88a <_read_r+0x1e>
 800c888:	6023      	str	r3, [r4, #0]
 800c88a:	bd38      	pop	{r3, r4, r5, pc}
 800c88c:	2400226c 	.word	0x2400226c

0800c890 <_sbrk_r>:
 800c890:	b538      	push	{r3, r4, r5, lr}
 800c892:	4d06      	ldr	r5, [pc, #24]	; (800c8ac <_sbrk_r+0x1c>)
 800c894:	2300      	movs	r3, #0
 800c896:	4604      	mov	r4, r0
 800c898:	4608      	mov	r0, r1
 800c89a:	602b      	str	r3, [r5, #0]
 800c89c:	f7f4 fc32 	bl	8001104 <_sbrk>
 800c8a0:	1c43      	adds	r3, r0, #1
 800c8a2:	d102      	bne.n	800c8aa <_sbrk_r+0x1a>
 800c8a4:	682b      	ldr	r3, [r5, #0]
 800c8a6:	b103      	cbz	r3, 800c8aa <_sbrk_r+0x1a>
 800c8a8:	6023      	str	r3, [r4, #0]
 800c8aa:	bd38      	pop	{r3, r4, r5, pc}
 800c8ac:	2400226c 	.word	0x2400226c

0800c8b0 <_write_r>:
 800c8b0:	b538      	push	{r3, r4, r5, lr}
 800c8b2:	4d07      	ldr	r5, [pc, #28]	; (800c8d0 <_write_r+0x20>)
 800c8b4:	4604      	mov	r4, r0
 800c8b6:	4608      	mov	r0, r1
 800c8b8:	4611      	mov	r1, r2
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	602a      	str	r2, [r5, #0]
 800c8be:	461a      	mov	r2, r3
 800c8c0:	f7f4 fbcf 	bl	8001062 <_write>
 800c8c4:	1c43      	adds	r3, r0, #1
 800c8c6:	d102      	bne.n	800c8ce <_write_r+0x1e>
 800c8c8:	682b      	ldr	r3, [r5, #0]
 800c8ca:	b103      	cbz	r3, 800c8ce <_write_r+0x1e>
 800c8cc:	6023      	str	r3, [r4, #0]
 800c8ce:	bd38      	pop	{r3, r4, r5, pc}
 800c8d0:	2400226c 	.word	0x2400226c

0800c8d4 <__errno>:
 800c8d4:	4b01      	ldr	r3, [pc, #4]	; (800c8dc <__errno+0x8>)
 800c8d6:	6818      	ldr	r0, [r3, #0]
 800c8d8:	4770      	bx	lr
 800c8da:	bf00      	nop
 800c8dc:	2400019c 	.word	0x2400019c

0800c8e0 <__libc_init_array>:
 800c8e0:	b570      	push	{r4, r5, r6, lr}
 800c8e2:	4d0d      	ldr	r5, [pc, #52]	; (800c918 <__libc_init_array+0x38>)
 800c8e4:	4c0d      	ldr	r4, [pc, #52]	; (800c91c <__libc_init_array+0x3c>)
 800c8e6:	1b64      	subs	r4, r4, r5
 800c8e8:	10a4      	asrs	r4, r4, #2
 800c8ea:	2600      	movs	r6, #0
 800c8ec:	42a6      	cmp	r6, r4
 800c8ee:	d109      	bne.n	800c904 <__libc_init_array+0x24>
 800c8f0:	4d0b      	ldr	r5, [pc, #44]	; (800c920 <__libc_init_array+0x40>)
 800c8f2:	4c0c      	ldr	r4, [pc, #48]	; (800c924 <__libc_init_array+0x44>)
 800c8f4:	f001 ff52 	bl	800e79c <_init>
 800c8f8:	1b64      	subs	r4, r4, r5
 800c8fa:	10a4      	asrs	r4, r4, #2
 800c8fc:	2600      	movs	r6, #0
 800c8fe:	42a6      	cmp	r6, r4
 800c900:	d105      	bne.n	800c90e <__libc_init_array+0x2e>
 800c902:	bd70      	pop	{r4, r5, r6, pc}
 800c904:	f855 3b04 	ldr.w	r3, [r5], #4
 800c908:	4798      	blx	r3
 800c90a:	3601      	adds	r6, #1
 800c90c:	e7ee      	b.n	800c8ec <__libc_init_array+0xc>
 800c90e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c912:	4798      	blx	r3
 800c914:	3601      	adds	r6, #1
 800c916:	e7f2      	b.n	800c8fe <__libc_init_array+0x1e>
 800c918:	0800ebac 	.word	0x0800ebac
 800c91c:	0800ebac 	.word	0x0800ebac
 800c920:	0800ebac 	.word	0x0800ebac
 800c924:	0800ebb0 	.word	0x0800ebb0

0800c928 <__retarget_lock_init_recursive>:
 800c928:	4770      	bx	lr

0800c92a <__retarget_lock_acquire_recursive>:
 800c92a:	4770      	bx	lr

0800c92c <__retarget_lock_release_recursive>:
 800c92c:	4770      	bx	lr

0800c92e <strcpy>:
 800c92e:	4603      	mov	r3, r0
 800c930:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c934:	f803 2b01 	strb.w	r2, [r3], #1
 800c938:	2a00      	cmp	r2, #0
 800c93a:	d1f9      	bne.n	800c930 <strcpy+0x2>
 800c93c:	4770      	bx	lr

0800c93e <quorem>:
 800c93e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c942:	6903      	ldr	r3, [r0, #16]
 800c944:	690c      	ldr	r4, [r1, #16]
 800c946:	42a3      	cmp	r3, r4
 800c948:	4607      	mov	r7, r0
 800c94a:	db7e      	blt.n	800ca4a <quorem+0x10c>
 800c94c:	3c01      	subs	r4, #1
 800c94e:	f101 0814 	add.w	r8, r1, #20
 800c952:	f100 0514 	add.w	r5, r0, #20
 800c956:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c95a:	9301      	str	r3, [sp, #4]
 800c95c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c960:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c964:	3301      	adds	r3, #1
 800c966:	429a      	cmp	r2, r3
 800c968:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c96c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c970:	fbb2 f6f3 	udiv	r6, r2, r3
 800c974:	d331      	bcc.n	800c9da <quorem+0x9c>
 800c976:	f04f 0e00 	mov.w	lr, #0
 800c97a:	4640      	mov	r0, r8
 800c97c:	46ac      	mov	ip, r5
 800c97e:	46f2      	mov	sl, lr
 800c980:	f850 2b04 	ldr.w	r2, [r0], #4
 800c984:	b293      	uxth	r3, r2
 800c986:	fb06 e303 	mla	r3, r6, r3, lr
 800c98a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c98e:	0c1a      	lsrs	r2, r3, #16
 800c990:	b29b      	uxth	r3, r3
 800c992:	ebaa 0303 	sub.w	r3, sl, r3
 800c996:	f8dc a000 	ldr.w	sl, [ip]
 800c99a:	fa13 f38a 	uxtah	r3, r3, sl
 800c99e:	fb06 220e 	mla	r2, r6, lr, r2
 800c9a2:	9300      	str	r3, [sp, #0]
 800c9a4:	9b00      	ldr	r3, [sp, #0]
 800c9a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c9aa:	b292      	uxth	r2, r2
 800c9ac:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c9b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c9b4:	f8bd 3000 	ldrh.w	r3, [sp]
 800c9b8:	4581      	cmp	r9, r0
 800c9ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c9be:	f84c 3b04 	str.w	r3, [ip], #4
 800c9c2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c9c6:	d2db      	bcs.n	800c980 <quorem+0x42>
 800c9c8:	f855 300b 	ldr.w	r3, [r5, fp]
 800c9cc:	b92b      	cbnz	r3, 800c9da <quorem+0x9c>
 800c9ce:	9b01      	ldr	r3, [sp, #4]
 800c9d0:	3b04      	subs	r3, #4
 800c9d2:	429d      	cmp	r5, r3
 800c9d4:	461a      	mov	r2, r3
 800c9d6:	d32c      	bcc.n	800ca32 <quorem+0xf4>
 800c9d8:	613c      	str	r4, [r7, #16]
 800c9da:	4638      	mov	r0, r7
 800c9dc:	f001 f86c 	bl	800dab8 <__mcmp>
 800c9e0:	2800      	cmp	r0, #0
 800c9e2:	db22      	blt.n	800ca2a <quorem+0xec>
 800c9e4:	3601      	adds	r6, #1
 800c9e6:	4629      	mov	r1, r5
 800c9e8:	2000      	movs	r0, #0
 800c9ea:	f858 2b04 	ldr.w	r2, [r8], #4
 800c9ee:	f8d1 c000 	ldr.w	ip, [r1]
 800c9f2:	b293      	uxth	r3, r2
 800c9f4:	1ac3      	subs	r3, r0, r3
 800c9f6:	0c12      	lsrs	r2, r2, #16
 800c9f8:	fa13 f38c 	uxtah	r3, r3, ip
 800c9fc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800ca00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ca04:	b29b      	uxth	r3, r3
 800ca06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ca0a:	45c1      	cmp	r9, r8
 800ca0c:	f841 3b04 	str.w	r3, [r1], #4
 800ca10:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ca14:	d2e9      	bcs.n	800c9ea <quorem+0xac>
 800ca16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ca1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ca1e:	b922      	cbnz	r2, 800ca2a <quorem+0xec>
 800ca20:	3b04      	subs	r3, #4
 800ca22:	429d      	cmp	r5, r3
 800ca24:	461a      	mov	r2, r3
 800ca26:	d30a      	bcc.n	800ca3e <quorem+0x100>
 800ca28:	613c      	str	r4, [r7, #16]
 800ca2a:	4630      	mov	r0, r6
 800ca2c:	b003      	add	sp, #12
 800ca2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca32:	6812      	ldr	r2, [r2, #0]
 800ca34:	3b04      	subs	r3, #4
 800ca36:	2a00      	cmp	r2, #0
 800ca38:	d1ce      	bne.n	800c9d8 <quorem+0x9a>
 800ca3a:	3c01      	subs	r4, #1
 800ca3c:	e7c9      	b.n	800c9d2 <quorem+0x94>
 800ca3e:	6812      	ldr	r2, [r2, #0]
 800ca40:	3b04      	subs	r3, #4
 800ca42:	2a00      	cmp	r2, #0
 800ca44:	d1f0      	bne.n	800ca28 <quorem+0xea>
 800ca46:	3c01      	subs	r4, #1
 800ca48:	e7eb      	b.n	800ca22 <quorem+0xe4>
 800ca4a:	2000      	movs	r0, #0
 800ca4c:	e7ee      	b.n	800ca2c <quorem+0xee>
	...

0800ca50 <_dtoa_r>:
 800ca50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca54:	ed2d 8b02 	vpush	{d8}
 800ca58:	69c5      	ldr	r5, [r0, #28]
 800ca5a:	b091      	sub	sp, #68	; 0x44
 800ca5c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ca60:	ec59 8b10 	vmov	r8, r9, d0
 800ca64:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800ca66:	9106      	str	r1, [sp, #24]
 800ca68:	4606      	mov	r6, r0
 800ca6a:	9208      	str	r2, [sp, #32]
 800ca6c:	930c      	str	r3, [sp, #48]	; 0x30
 800ca6e:	b975      	cbnz	r5, 800ca8e <_dtoa_r+0x3e>
 800ca70:	2010      	movs	r0, #16
 800ca72:	f7ff f8af 	bl	800bbd4 <malloc>
 800ca76:	4602      	mov	r2, r0
 800ca78:	61f0      	str	r0, [r6, #28]
 800ca7a:	b920      	cbnz	r0, 800ca86 <_dtoa_r+0x36>
 800ca7c:	4ba6      	ldr	r3, [pc, #664]	; (800cd18 <_dtoa_r+0x2c8>)
 800ca7e:	21ef      	movs	r1, #239	; 0xef
 800ca80:	48a6      	ldr	r0, [pc, #664]	; (800cd1c <_dtoa_r+0x2cc>)
 800ca82:	f001 fb47 	bl	800e114 <__assert_func>
 800ca86:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ca8a:	6005      	str	r5, [r0, #0]
 800ca8c:	60c5      	str	r5, [r0, #12]
 800ca8e:	69f3      	ldr	r3, [r6, #28]
 800ca90:	6819      	ldr	r1, [r3, #0]
 800ca92:	b151      	cbz	r1, 800caaa <_dtoa_r+0x5a>
 800ca94:	685a      	ldr	r2, [r3, #4]
 800ca96:	604a      	str	r2, [r1, #4]
 800ca98:	2301      	movs	r3, #1
 800ca9a:	4093      	lsls	r3, r2
 800ca9c:	608b      	str	r3, [r1, #8]
 800ca9e:	4630      	mov	r0, r6
 800caa0:	f000 fdce 	bl	800d640 <_Bfree>
 800caa4:	69f3      	ldr	r3, [r6, #28]
 800caa6:	2200      	movs	r2, #0
 800caa8:	601a      	str	r2, [r3, #0]
 800caaa:	f1b9 0300 	subs.w	r3, r9, #0
 800caae:	bfbb      	ittet	lt
 800cab0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800cab4:	9303      	strlt	r3, [sp, #12]
 800cab6:	2300      	movge	r3, #0
 800cab8:	2201      	movlt	r2, #1
 800caba:	bfac      	ite	ge
 800cabc:	6023      	strge	r3, [r4, #0]
 800cabe:	6022      	strlt	r2, [r4, #0]
 800cac0:	4b97      	ldr	r3, [pc, #604]	; (800cd20 <_dtoa_r+0x2d0>)
 800cac2:	9c03      	ldr	r4, [sp, #12]
 800cac4:	43a3      	bics	r3, r4
 800cac6:	d11c      	bne.n	800cb02 <_dtoa_r+0xb2>
 800cac8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800caca:	f242 730f 	movw	r3, #9999	; 0x270f
 800cace:	6013      	str	r3, [r2, #0]
 800cad0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800cad4:	ea53 0308 	orrs.w	r3, r3, r8
 800cad8:	f000 84fb 	beq.w	800d4d2 <_dtoa_r+0xa82>
 800cadc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cade:	b963      	cbnz	r3, 800cafa <_dtoa_r+0xaa>
 800cae0:	4b90      	ldr	r3, [pc, #576]	; (800cd24 <_dtoa_r+0x2d4>)
 800cae2:	e020      	b.n	800cb26 <_dtoa_r+0xd6>
 800cae4:	4b90      	ldr	r3, [pc, #576]	; (800cd28 <_dtoa_r+0x2d8>)
 800cae6:	9301      	str	r3, [sp, #4]
 800cae8:	3308      	adds	r3, #8
 800caea:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800caec:	6013      	str	r3, [r2, #0]
 800caee:	9801      	ldr	r0, [sp, #4]
 800caf0:	b011      	add	sp, #68	; 0x44
 800caf2:	ecbd 8b02 	vpop	{d8}
 800caf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cafa:	4b8a      	ldr	r3, [pc, #552]	; (800cd24 <_dtoa_r+0x2d4>)
 800cafc:	9301      	str	r3, [sp, #4]
 800cafe:	3303      	adds	r3, #3
 800cb00:	e7f3      	b.n	800caea <_dtoa_r+0x9a>
 800cb02:	ed9d 8b02 	vldr	d8, [sp, #8]
 800cb06:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800cb0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb0e:	d10c      	bne.n	800cb2a <_dtoa_r+0xda>
 800cb10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cb12:	2301      	movs	r3, #1
 800cb14:	6013      	str	r3, [r2, #0]
 800cb16:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	f000 84d7 	beq.w	800d4cc <_dtoa_r+0xa7c>
 800cb1e:	4b83      	ldr	r3, [pc, #524]	; (800cd2c <_dtoa_r+0x2dc>)
 800cb20:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800cb22:	6013      	str	r3, [r2, #0]
 800cb24:	3b01      	subs	r3, #1
 800cb26:	9301      	str	r3, [sp, #4]
 800cb28:	e7e1      	b.n	800caee <_dtoa_r+0x9e>
 800cb2a:	aa0e      	add	r2, sp, #56	; 0x38
 800cb2c:	a90f      	add	r1, sp, #60	; 0x3c
 800cb2e:	4630      	mov	r0, r6
 800cb30:	eeb0 0b48 	vmov.f64	d0, d8
 800cb34:	f001 f866 	bl	800dc04 <__d2b>
 800cb38:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800cb3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb3e:	4605      	mov	r5, r0
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d046      	beq.n	800cbd2 <_dtoa_r+0x182>
 800cb44:	eeb0 7b48 	vmov.f64	d7, d8
 800cb48:	ee18 1a90 	vmov	r1, s17
 800cb4c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800cb50:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800cb54:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800cb58:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800cb5c:	2000      	movs	r0, #0
 800cb5e:	ee07 1a90 	vmov	s15, r1
 800cb62:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800cb66:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800cd00 <_dtoa_r+0x2b0>
 800cb6a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800cb6e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800cd08 <_dtoa_r+0x2b8>
 800cb72:	eea7 6b05 	vfma.f64	d6, d7, d5
 800cb76:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800cd10 <_dtoa_r+0x2c0>
 800cb7a:	ee07 3a90 	vmov	s15, r3
 800cb7e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800cb82:	eeb0 7b46 	vmov.f64	d7, d6
 800cb86:	eea4 7b05 	vfma.f64	d7, d4, d5
 800cb8a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800cb8e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800cb92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb96:	ee16 ba90 	vmov	fp, s13
 800cb9a:	9009      	str	r0, [sp, #36]	; 0x24
 800cb9c:	d508      	bpl.n	800cbb0 <_dtoa_r+0x160>
 800cb9e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800cba2:	eeb4 6b47 	vcmp.f64	d6, d7
 800cba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbaa:	bf18      	it	ne
 800cbac:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800cbb0:	f1bb 0f16 	cmp.w	fp, #22
 800cbb4:	d82b      	bhi.n	800cc0e <_dtoa_r+0x1be>
 800cbb6:	495e      	ldr	r1, [pc, #376]	; (800cd30 <_dtoa_r+0x2e0>)
 800cbb8:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800cbbc:	ed91 7b00 	vldr	d7, [r1]
 800cbc0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800cbc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbc8:	d501      	bpl.n	800cbce <_dtoa_r+0x17e>
 800cbca:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cbce:	2100      	movs	r1, #0
 800cbd0:	e01e      	b.n	800cc10 <_dtoa_r+0x1c0>
 800cbd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cbd4:	4413      	add	r3, r2
 800cbd6:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800cbda:	2920      	cmp	r1, #32
 800cbdc:	bfc1      	itttt	gt
 800cbde:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800cbe2:	408c      	lslgt	r4, r1
 800cbe4:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800cbe8:	fa28 f101 	lsrgt.w	r1, r8, r1
 800cbec:	bfd6      	itet	le
 800cbee:	f1c1 0120 	rsble	r1, r1, #32
 800cbf2:	4321      	orrgt	r1, r4
 800cbf4:	fa08 f101 	lslle.w	r1, r8, r1
 800cbf8:	ee07 1a90 	vmov	s15, r1
 800cbfc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800cc00:	3b01      	subs	r3, #1
 800cc02:	ee17 1a90 	vmov	r1, s15
 800cc06:	2001      	movs	r0, #1
 800cc08:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800cc0c:	e7a7      	b.n	800cb5e <_dtoa_r+0x10e>
 800cc0e:	2101      	movs	r1, #1
 800cc10:	1ad2      	subs	r2, r2, r3
 800cc12:	1e53      	subs	r3, r2, #1
 800cc14:	9305      	str	r3, [sp, #20]
 800cc16:	bf45      	ittet	mi
 800cc18:	f1c2 0301 	rsbmi	r3, r2, #1
 800cc1c:	9304      	strmi	r3, [sp, #16]
 800cc1e:	2300      	movpl	r3, #0
 800cc20:	2300      	movmi	r3, #0
 800cc22:	bf4c      	ite	mi
 800cc24:	9305      	strmi	r3, [sp, #20]
 800cc26:	9304      	strpl	r3, [sp, #16]
 800cc28:	f1bb 0f00 	cmp.w	fp, #0
 800cc2c:	910b      	str	r1, [sp, #44]	; 0x2c
 800cc2e:	db18      	blt.n	800cc62 <_dtoa_r+0x212>
 800cc30:	9b05      	ldr	r3, [sp, #20]
 800cc32:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800cc36:	445b      	add	r3, fp
 800cc38:	9305      	str	r3, [sp, #20]
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	9a06      	ldr	r2, [sp, #24]
 800cc3e:	2a09      	cmp	r2, #9
 800cc40:	d848      	bhi.n	800ccd4 <_dtoa_r+0x284>
 800cc42:	2a05      	cmp	r2, #5
 800cc44:	bfc4      	itt	gt
 800cc46:	3a04      	subgt	r2, #4
 800cc48:	9206      	strgt	r2, [sp, #24]
 800cc4a:	9a06      	ldr	r2, [sp, #24]
 800cc4c:	f1a2 0202 	sub.w	r2, r2, #2
 800cc50:	bfcc      	ite	gt
 800cc52:	2400      	movgt	r4, #0
 800cc54:	2401      	movle	r4, #1
 800cc56:	2a03      	cmp	r2, #3
 800cc58:	d847      	bhi.n	800ccea <_dtoa_r+0x29a>
 800cc5a:	e8df f002 	tbb	[pc, r2]
 800cc5e:	2d0b      	.short	0x2d0b
 800cc60:	392b      	.short	0x392b
 800cc62:	9b04      	ldr	r3, [sp, #16]
 800cc64:	2200      	movs	r2, #0
 800cc66:	eba3 030b 	sub.w	r3, r3, fp
 800cc6a:	9304      	str	r3, [sp, #16]
 800cc6c:	920a      	str	r2, [sp, #40]	; 0x28
 800cc6e:	f1cb 0300 	rsb	r3, fp, #0
 800cc72:	e7e3      	b.n	800cc3c <_dtoa_r+0x1ec>
 800cc74:	2200      	movs	r2, #0
 800cc76:	9207      	str	r2, [sp, #28]
 800cc78:	9a08      	ldr	r2, [sp, #32]
 800cc7a:	2a00      	cmp	r2, #0
 800cc7c:	dc38      	bgt.n	800ccf0 <_dtoa_r+0x2a0>
 800cc7e:	f04f 0a01 	mov.w	sl, #1
 800cc82:	46d1      	mov	r9, sl
 800cc84:	4652      	mov	r2, sl
 800cc86:	f8cd a020 	str.w	sl, [sp, #32]
 800cc8a:	69f7      	ldr	r7, [r6, #28]
 800cc8c:	2100      	movs	r1, #0
 800cc8e:	2004      	movs	r0, #4
 800cc90:	f100 0c14 	add.w	ip, r0, #20
 800cc94:	4594      	cmp	ip, r2
 800cc96:	d930      	bls.n	800ccfa <_dtoa_r+0x2aa>
 800cc98:	6079      	str	r1, [r7, #4]
 800cc9a:	4630      	mov	r0, r6
 800cc9c:	930d      	str	r3, [sp, #52]	; 0x34
 800cc9e:	f000 fc8f 	bl	800d5c0 <_Balloc>
 800cca2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cca4:	9001      	str	r0, [sp, #4]
 800cca6:	4602      	mov	r2, r0
 800cca8:	2800      	cmp	r0, #0
 800ccaa:	d145      	bne.n	800cd38 <_dtoa_r+0x2e8>
 800ccac:	4b21      	ldr	r3, [pc, #132]	; (800cd34 <_dtoa_r+0x2e4>)
 800ccae:	f240 11af 	movw	r1, #431	; 0x1af
 800ccb2:	e6e5      	b.n	800ca80 <_dtoa_r+0x30>
 800ccb4:	2201      	movs	r2, #1
 800ccb6:	e7de      	b.n	800cc76 <_dtoa_r+0x226>
 800ccb8:	2200      	movs	r2, #0
 800ccba:	9207      	str	r2, [sp, #28]
 800ccbc:	9a08      	ldr	r2, [sp, #32]
 800ccbe:	eb0b 0a02 	add.w	sl, fp, r2
 800ccc2:	f10a 0901 	add.w	r9, sl, #1
 800ccc6:	464a      	mov	r2, r9
 800ccc8:	2a01      	cmp	r2, #1
 800ccca:	bfb8      	it	lt
 800cccc:	2201      	movlt	r2, #1
 800ccce:	e7dc      	b.n	800cc8a <_dtoa_r+0x23a>
 800ccd0:	2201      	movs	r2, #1
 800ccd2:	e7f2      	b.n	800ccba <_dtoa_r+0x26a>
 800ccd4:	2401      	movs	r4, #1
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800ccdc:	f04f 3aff 	mov.w	sl, #4294967295
 800cce0:	2100      	movs	r1, #0
 800cce2:	46d1      	mov	r9, sl
 800cce4:	2212      	movs	r2, #18
 800cce6:	9108      	str	r1, [sp, #32]
 800cce8:	e7cf      	b.n	800cc8a <_dtoa_r+0x23a>
 800ccea:	2201      	movs	r2, #1
 800ccec:	9207      	str	r2, [sp, #28]
 800ccee:	e7f5      	b.n	800ccdc <_dtoa_r+0x28c>
 800ccf0:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ccf4:	46d1      	mov	r9, sl
 800ccf6:	4652      	mov	r2, sl
 800ccf8:	e7c7      	b.n	800cc8a <_dtoa_r+0x23a>
 800ccfa:	3101      	adds	r1, #1
 800ccfc:	0040      	lsls	r0, r0, #1
 800ccfe:	e7c7      	b.n	800cc90 <_dtoa_r+0x240>
 800cd00:	636f4361 	.word	0x636f4361
 800cd04:	3fd287a7 	.word	0x3fd287a7
 800cd08:	8b60c8b3 	.word	0x8b60c8b3
 800cd0c:	3fc68a28 	.word	0x3fc68a28
 800cd10:	509f79fb 	.word	0x509f79fb
 800cd14:	3fd34413 	.word	0x3fd34413
 800cd18:	0800e879 	.word	0x0800e879
 800cd1c:	0800e890 	.word	0x0800e890
 800cd20:	7ff00000 	.word	0x7ff00000
 800cd24:	0800e875 	.word	0x0800e875
 800cd28:	0800e86c 	.word	0x0800e86c
 800cd2c:	0800e849 	.word	0x0800e849
 800cd30:	0800e980 	.word	0x0800e980
 800cd34:	0800e8e8 	.word	0x0800e8e8
 800cd38:	69f2      	ldr	r2, [r6, #28]
 800cd3a:	9901      	ldr	r1, [sp, #4]
 800cd3c:	6011      	str	r1, [r2, #0]
 800cd3e:	f1b9 0f0e 	cmp.w	r9, #14
 800cd42:	d86c      	bhi.n	800ce1e <_dtoa_r+0x3ce>
 800cd44:	2c00      	cmp	r4, #0
 800cd46:	d06a      	beq.n	800ce1e <_dtoa_r+0x3ce>
 800cd48:	f1bb 0f00 	cmp.w	fp, #0
 800cd4c:	f340 80a0 	ble.w	800ce90 <_dtoa_r+0x440>
 800cd50:	4ac1      	ldr	r2, [pc, #772]	; (800d058 <_dtoa_r+0x608>)
 800cd52:	f00b 010f 	and.w	r1, fp, #15
 800cd56:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800cd5a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800cd5e:	ed92 7b00 	vldr	d7, [r2]
 800cd62:	ea4f 122b 	mov.w	r2, fp, asr #4
 800cd66:	f000 8087 	beq.w	800ce78 <_dtoa_r+0x428>
 800cd6a:	49bc      	ldr	r1, [pc, #752]	; (800d05c <_dtoa_r+0x60c>)
 800cd6c:	ed91 6b08 	vldr	d6, [r1, #32]
 800cd70:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800cd74:	ed8d 6b02 	vstr	d6, [sp, #8]
 800cd78:	f002 020f 	and.w	r2, r2, #15
 800cd7c:	2103      	movs	r1, #3
 800cd7e:	48b7      	ldr	r0, [pc, #732]	; (800d05c <_dtoa_r+0x60c>)
 800cd80:	2a00      	cmp	r2, #0
 800cd82:	d17b      	bne.n	800ce7c <_dtoa_r+0x42c>
 800cd84:	ed9d 6b02 	vldr	d6, [sp, #8]
 800cd88:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800cd8c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cd90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cd92:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cd96:	2a00      	cmp	r2, #0
 800cd98:	f000 80a0 	beq.w	800cedc <_dtoa_r+0x48c>
 800cd9c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800cda0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800cda4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cda8:	f140 8098 	bpl.w	800cedc <_dtoa_r+0x48c>
 800cdac:	f1b9 0f00 	cmp.w	r9, #0
 800cdb0:	f000 8094 	beq.w	800cedc <_dtoa_r+0x48c>
 800cdb4:	f1ba 0f00 	cmp.w	sl, #0
 800cdb8:	dd2f      	ble.n	800ce1a <_dtoa_r+0x3ca>
 800cdba:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800cdbe:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cdc2:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cdc6:	f10b 32ff 	add.w	r2, fp, #4294967295
 800cdca:	3101      	adds	r1, #1
 800cdcc:	4654      	mov	r4, sl
 800cdce:	ed9d 6b02 	vldr	d6, [sp, #8]
 800cdd2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800cdd6:	ee07 1a90 	vmov	s15, r1
 800cdda:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800cdde:	eea7 5b06 	vfma.f64	d5, d7, d6
 800cde2:	ee15 7a90 	vmov	r7, s11
 800cde6:	ec51 0b15 	vmov	r0, r1, d5
 800cdea:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800cdee:	2c00      	cmp	r4, #0
 800cdf0:	d177      	bne.n	800cee2 <_dtoa_r+0x492>
 800cdf2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800cdf6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800cdfa:	ec41 0b17 	vmov	d7, r0, r1
 800cdfe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ce02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce06:	f300 826a 	bgt.w	800d2de <_dtoa_r+0x88e>
 800ce0a:	eeb1 7b47 	vneg.f64	d7, d7
 800ce0e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ce12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce16:	f100 8260 	bmi.w	800d2da <_dtoa_r+0x88a>
 800ce1a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ce1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ce20:	2a00      	cmp	r2, #0
 800ce22:	f2c0 811d 	blt.w	800d060 <_dtoa_r+0x610>
 800ce26:	f1bb 0f0e 	cmp.w	fp, #14
 800ce2a:	f300 8119 	bgt.w	800d060 <_dtoa_r+0x610>
 800ce2e:	4b8a      	ldr	r3, [pc, #552]	; (800d058 <_dtoa_r+0x608>)
 800ce30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ce34:	ed93 6b00 	vldr	d6, [r3]
 800ce38:	9b08      	ldr	r3, [sp, #32]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	f280 80b7 	bge.w	800cfae <_dtoa_r+0x55e>
 800ce40:	f1b9 0f00 	cmp.w	r9, #0
 800ce44:	f300 80b3 	bgt.w	800cfae <_dtoa_r+0x55e>
 800ce48:	f040 8246 	bne.w	800d2d8 <_dtoa_r+0x888>
 800ce4c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800ce50:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ce54:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ce58:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ce5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce60:	464c      	mov	r4, r9
 800ce62:	464f      	mov	r7, r9
 800ce64:	f280 821c 	bge.w	800d2a0 <_dtoa_r+0x850>
 800ce68:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ce6c:	2331      	movs	r3, #49	; 0x31
 800ce6e:	f808 3b01 	strb.w	r3, [r8], #1
 800ce72:	f10b 0b01 	add.w	fp, fp, #1
 800ce76:	e218      	b.n	800d2aa <_dtoa_r+0x85a>
 800ce78:	2102      	movs	r1, #2
 800ce7a:	e780      	b.n	800cd7e <_dtoa_r+0x32e>
 800ce7c:	07d4      	lsls	r4, r2, #31
 800ce7e:	d504      	bpl.n	800ce8a <_dtoa_r+0x43a>
 800ce80:	ed90 6b00 	vldr	d6, [r0]
 800ce84:	3101      	adds	r1, #1
 800ce86:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ce8a:	1052      	asrs	r2, r2, #1
 800ce8c:	3008      	adds	r0, #8
 800ce8e:	e777      	b.n	800cd80 <_dtoa_r+0x330>
 800ce90:	d022      	beq.n	800ced8 <_dtoa_r+0x488>
 800ce92:	f1cb 0200 	rsb	r2, fp, #0
 800ce96:	4970      	ldr	r1, [pc, #448]	; (800d058 <_dtoa_r+0x608>)
 800ce98:	f002 000f 	and.w	r0, r2, #15
 800ce9c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800cea0:	ed91 7b00 	vldr	d7, [r1]
 800cea4:	ee28 7b07 	vmul.f64	d7, d8, d7
 800cea8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ceac:	486b      	ldr	r0, [pc, #428]	; (800d05c <_dtoa_r+0x60c>)
 800ceae:	1112      	asrs	r2, r2, #4
 800ceb0:	2400      	movs	r4, #0
 800ceb2:	2102      	movs	r1, #2
 800ceb4:	b92a      	cbnz	r2, 800cec2 <_dtoa_r+0x472>
 800ceb6:	2c00      	cmp	r4, #0
 800ceb8:	f43f af6a 	beq.w	800cd90 <_dtoa_r+0x340>
 800cebc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cec0:	e766      	b.n	800cd90 <_dtoa_r+0x340>
 800cec2:	07d7      	lsls	r7, r2, #31
 800cec4:	d505      	bpl.n	800ced2 <_dtoa_r+0x482>
 800cec6:	ed90 6b00 	vldr	d6, [r0]
 800ceca:	3101      	adds	r1, #1
 800cecc:	2401      	movs	r4, #1
 800cece:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ced2:	1052      	asrs	r2, r2, #1
 800ced4:	3008      	adds	r0, #8
 800ced6:	e7ed      	b.n	800ceb4 <_dtoa_r+0x464>
 800ced8:	2102      	movs	r1, #2
 800ceda:	e759      	b.n	800cd90 <_dtoa_r+0x340>
 800cedc:	465a      	mov	r2, fp
 800cede:	464c      	mov	r4, r9
 800cee0:	e775      	b.n	800cdce <_dtoa_r+0x37e>
 800cee2:	ec41 0b17 	vmov	d7, r0, r1
 800cee6:	495c      	ldr	r1, [pc, #368]	; (800d058 <_dtoa_r+0x608>)
 800cee8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800ceec:	ed11 4b02 	vldr	d4, [r1, #-8]
 800cef0:	9901      	ldr	r1, [sp, #4]
 800cef2:	440c      	add	r4, r1
 800cef4:	9907      	ldr	r1, [sp, #28]
 800cef6:	b351      	cbz	r1, 800cf4e <_dtoa_r+0x4fe>
 800cef8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800cefc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800cf00:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cf04:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800cf08:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800cf0c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800cf10:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800cf14:	ee14 1a90 	vmov	r1, s9
 800cf18:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800cf1c:	3130      	adds	r1, #48	; 0x30
 800cf1e:	ee36 6b45 	vsub.f64	d6, d6, d5
 800cf22:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cf26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf2a:	f808 1b01 	strb.w	r1, [r8], #1
 800cf2e:	d439      	bmi.n	800cfa4 <_dtoa_r+0x554>
 800cf30:	ee32 5b46 	vsub.f64	d5, d2, d6
 800cf34:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800cf38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf3c:	d472      	bmi.n	800d024 <_dtoa_r+0x5d4>
 800cf3e:	45a0      	cmp	r8, r4
 800cf40:	f43f af6b 	beq.w	800ce1a <_dtoa_r+0x3ca>
 800cf44:	ee27 7b03 	vmul.f64	d7, d7, d3
 800cf48:	ee26 6b03 	vmul.f64	d6, d6, d3
 800cf4c:	e7e0      	b.n	800cf10 <_dtoa_r+0x4c0>
 800cf4e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cf52:	ee27 7b04 	vmul.f64	d7, d7, d4
 800cf56:	4620      	mov	r0, r4
 800cf58:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800cf5c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800cf60:	ee14 1a90 	vmov	r1, s9
 800cf64:	3130      	adds	r1, #48	; 0x30
 800cf66:	f808 1b01 	strb.w	r1, [r8], #1
 800cf6a:	45a0      	cmp	r8, r4
 800cf6c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800cf70:	ee36 6b45 	vsub.f64	d6, d6, d5
 800cf74:	d118      	bne.n	800cfa8 <_dtoa_r+0x558>
 800cf76:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800cf7a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800cf7e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800cf82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf86:	dc4d      	bgt.n	800d024 <_dtoa_r+0x5d4>
 800cf88:	ee35 5b47 	vsub.f64	d5, d5, d7
 800cf8c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800cf90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf94:	f57f af41 	bpl.w	800ce1a <_dtoa_r+0x3ca>
 800cf98:	4680      	mov	r8, r0
 800cf9a:	3801      	subs	r0, #1
 800cf9c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800cfa0:	2b30      	cmp	r3, #48	; 0x30
 800cfa2:	d0f9      	beq.n	800cf98 <_dtoa_r+0x548>
 800cfa4:	4693      	mov	fp, r2
 800cfa6:	e02a      	b.n	800cffe <_dtoa_r+0x5ae>
 800cfa8:	ee26 6b03 	vmul.f64	d6, d6, d3
 800cfac:	e7d6      	b.n	800cf5c <_dtoa_r+0x50c>
 800cfae:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cfb2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800cfb6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cfba:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800cfbe:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800cfc2:	ee15 3a10 	vmov	r3, s10
 800cfc6:	3330      	adds	r3, #48	; 0x30
 800cfc8:	f808 3b01 	strb.w	r3, [r8], #1
 800cfcc:	9b01      	ldr	r3, [sp, #4]
 800cfce:	eba8 0303 	sub.w	r3, r8, r3
 800cfd2:	4599      	cmp	r9, r3
 800cfd4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800cfd8:	eea3 7b46 	vfms.f64	d7, d3, d6
 800cfdc:	d133      	bne.n	800d046 <_dtoa_r+0x5f6>
 800cfde:	ee37 7b07 	vadd.f64	d7, d7, d7
 800cfe2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800cfe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfea:	dc1a      	bgt.n	800d022 <_dtoa_r+0x5d2>
 800cfec:	eeb4 7b46 	vcmp.f64	d7, d6
 800cff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cff4:	d103      	bne.n	800cffe <_dtoa_r+0x5ae>
 800cff6:	ee15 3a10 	vmov	r3, s10
 800cffa:	07d9      	lsls	r1, r3, #31
 800cffc:	d411      	bmi.n	800d022 <_dtoa_r+0x5d2>
 800cffe:	4629      	mov	r1, r5
 800d000:	4630      	mov	r0, r6
 800d002:	f000 fb1d 	bl	800d640 <_Bfree>
 800d006:	2300      	movs	r3, #0
 800d008:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d00a:	f888 3000 	strb.w	r3, [r8]
 800d00e:	f10b 0301 	add.w	r3, fp, #1
 800d012:	6013      	str	r3, [r2, #0]
 800d014:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d016:	2b00      	cmp	r3, #0
 800d018:	f43f ad69 	beq.w	800caee <_dtoa_r+0x9e>
 800d01c:	f8c3 8000 	str.w	r8, [r3]
 800d020:	e565      	b.n	800caee <_dtoa_r+0x9e>
 800d022:	465a      	mov	r2, fp
 800d024:	4643      	mov	r3, r8
 800d026:	4698      	mov	r8, r3
 800d028:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800d02c:	2939      	cmp	r1, #57	; 0x39
 800d02e:	d106      	bne.n	800d03e <_dtoa_r+0x5ee>
 800d030:	9901      	ldr	r1, [sp, #4]
 800d032:	4299      	cmp	r1, r3
 800d034:	d1f7      	bne.n	800d026 <_dtoa_r+0x5d6>
 800d036:	9801      	ldr	r0, [sp, #4]
 800d038:	2130      	movs	r1, #48	; 0x30
 800d03a:	3201      	adds	r2, #1
 800d03c:	7001      	strb	r1, [r0, #0]
 800d03e:	7819      	ldrb	r1, [r3, #0]
 800d040:	3101      	adds	r1, #1
 800d042:	7019      	strb	r1, [r3, #0]
 800d044:	e7ae      	b.n	800cfa4 <_dtoa_r+0x554>
 800d046:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d04a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d04e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d052:	d1b2      	bne.n	800cfba <_dtoa_r+0x56a>
 800d054:	e7d3      	b.n	800cffe <_dtoa_r+0x5ae>
 800d056:	bf00      	nop
 800d058:	0800e980 	.word	0x0800e980
 800d05c:	0800e958 	.word	0x0800e958
 800d060:	9907      	ldr	r1, [sp, #28]
 800d062:	2900      	cmp	r1, #0
 800d064:	f000 80d0 	beq.w	800d208 <_dtoa_r+0x7b8>
 800d068:	9906      	ldr	r1, [sp, #24]
 800d06a:	2901      	cmp	r1, #1
 800d06c:	f300 80b4 	bgt.w	800d1d8 <_dtoa_r+0x788>
 800d070:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d072:	2900      	cmp	r1, #0
 800d074:	f000 80ac 	beq.w	800d1d0 <_dtoa_r+0x780>
 800d078:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d07c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d080:	461c      	mov	r4, r3
 800d082:	9309      	str	r3, [sp, #36]	; 0x24
 800d084:	9b04      	ldr	r3, [sp, #16]
 800d086:	4413      	add	r3, r2
 800d088:	9304      	str	r3, [sp, #16]
 800d08a:	9b05      	ldr	r3, [sp, #20]
 800d08c:	2101      	movs	r1, #1
 800d08e:	4413      	add	r3, r2
 800d090:	4630      	mov	r0, r6
 800d092:	9305      	str	r3, [sp, #20]
 800d094:	f000 fb8a 	bl	800d7ac <__i2b>
 800d098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d09a:	4607      	mov	r7, r0
 800d09c:	f1b8 0f00 	cmp.w	r8, #0
 800d0a0:	d00d      	beq.n	800d0be <_dtoa_r+0x66e>
 800d0a2:	9a05      	ldr	r2, [sp, #20]
 800d0a4:	2a00      	cmp	r2, #0
 800d0a6:	dd0a      	ble.n	800d0be <_dtoa_r+0x66e>
 800d0a8:	4542      	cmp	r2, r8
 800d0aa:	9904      	ldr	r1, [sp, #16]
 800d0ac:	bfa8      	it	ge
 800d0ae:	4642      	movge	r2, r8
 800d0b0:	1a89      	subs	r1, r1, r2
 800d0b2:	9104      	str	r1, [sp, #16]
 800d0b4:	9905      	ldr	r1, [sp, #20]
 800d0b6:	eba8 0802 	sub.w	r8, r8, r2
 800d0ba:	1a8a      	subs	r2, r1, r2
 800d0bc:	9205      	str	r2, [sp, #20]
 800d0be:	b303      	cbz	r3, 800d102 <_dtoa_r+0x6b2>
 800d0c0:	9a07      	ldr	r2, [sp, #28]
 800d0c2:	2a00      	cmp	r2, #0
 800d0c4:	f000 80a5 	beq.w	800d212 <_dtoa_r+0x7c2>
 800d0c8:	2c00      	cmp	r4, #0
 800d0ca:	dd13      	ble.n	800d0f4 <_dtoa_r+0x6a4>
 800d0cc:	4639      	mov	r1, r7
 800d0ce:	4622      	mov	r2, r4
 800d0d0:	4630      	mov	r0, r6
 800d0d2:	930d      	str	r3, [sp, #52]	; 0x34
 800d0d4:	f000 fc2a 	bl	800d92c <__pow5mult>
 800d0d8:	462a      	mov	r2, r5
 800d0da:	4601      	mov	r1, r0
 800d0dc:	4607      	mov	r7, r0
 800d0de:	4630      	mov	r0, r6
 800d0e0:	f000 fb7a 	bl	800d7d8 <__multiply>
 800d0e4:	4629      	mov	r1, r5
 800d0e6:	9009      	str	r0, [sp, #36]	; 0x24
 800d0e8:	4630      	mov	r0, r6
 800d0ea:	f000 faa9 	bl	800d640 <_Bfree>
 800d0ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d0f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d0f2:	4615      	mov	r5, r2
 800d0f4:	1b1a      	subs	r2, r3, r4
 800d0f6:	d004      	beq.n	800d102 <_dtoa_r+0x6b2>
 800d0f8:	4629      	mov	r1, r5
 800d0fa:	4630      	mov	r0, r6
 800d0fc:	f000 fc16 	bl	800d92c <__pow5mult>
 800d100:	4605      	mov	r5, r0
 800d102:	2101      	movs	r1, #1
 800d104:	4630      	mov	r0, r6
 800d106:	f000 fb51 	bl	800d7ac <__i2b>
 800d10a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	4604      	mov	r4, r0
 800d110:	f340 8081 	ble.w	800d216 <_dtoa_r+0x7c6>
 800d114:	461a      	mov	r2, r3
 800d116:	4601      	mov	r1, r0
 800d118:	4630      	mov	r0, r6
 800d11a:	f000 fc07 	bl	800d92c <__pow5mult>
 800d11e:	9b06      	ldr	r3, [sp, #24]
 800d120:	2b01      	cmp	r3, #1
 800d122:	4604      	mov	r4, r0
 800d124:	dd7a      	ble.n	800d21c <_dtoa_r+0x7cc>
 800d126:	2300      	movs	r3, #0
 800d128:	9309      	str	r3, [sp, #36]	; 0x24
 800d12a:	6922      	ldr	r2, [r4, #16]
 800d12c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d130:	6910      	ldr	r0, [r2, #16]
 800d132:	f000 faed 	bl	800d710 <__hi0bits>
 800d136:	f1c0 0020 	rsb	r0, r0, #32
 800d13a:	9b05      	ldr	r3, [sp, #20]
 800d13c:	4418      	add	r0, r3
 800d13e:	f010 001f 	ands.w	r0, r0, #31
 800d142:	f000 8093 	beq.w	800d26c <_dtoa_r+0x81c>
 800d146:	f1c0 0220 	rsb	r2, r0, #32
 800d14a:	2a04      	cmp	r2, #4
 800d14c:	f340 8085 	ble.w	800d25a <_dtoa_r+0x80a>
 800d150:	9b04      	ldr	r3, [sp, #16]
 800d152:	f1c0 001c 	rsb	r0, r0, #28
 800d156:	4403      	add	r3, r0
 800d158:	9304      	str	r3, [sp, #16]
 800d15a:	9b05      	ldr	r3, [sp, #20]
 800d15c:	4480      	add	r8, r0
 800d15e:	4403      	add	r3, r0
 800d160:	9305      	str	r3, [sp, #20]
 800d162:	9b04      	ldr	r3, [sp, #16]
 800d164:	2b00      	cmp	r3, #0
 800d166:	dd05      	ble.n	800d174 <_dtoa_r+0x724>
 800d168:	4629      	mov	r1, r5
 800d16a:	461a      	mov	r2, r3
 800d16c:	4630      	mov	r0, r6
 800d16e:	f000 fc37 	bl	800d9e0 <__lshift>
 800d172:	4605      	mov	r5, r0
 800d174:	9b05      	ldr	r3, [sp, #20]
 800d176:	2b00      	cmp	r3, #0
 800d178:	dd05      	ble.n	800d186 <_dtoa_r+0x736>
 800d17a:	4621      	mov	r1, r4
 800d17c:	461a      	mov	r2, r3
 800d17e:	4630      	mov	r0, r6
 800d180:	f000 fc2e 	bl	800d9e0 <__lshift>
 800d184:	4604      	mov	r4, r0
 800d186:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d071      	beq.n	800d270 <_dtoa_r+0x820>
 800d18c:	4621      	mov	r1, r4
 800d18e:	4628      	mov	r0, r5
 800d190:	f000 fc92 	bl	800dab8 <__mcmp>
 800d194:	2800      	cmp	r0, #0
 800d196:	da6b      	bge.n	800d270 <_dtoa_r+0x820>
 800d198:	2300      	movs	r3, #0
 800d19a:	4629      	mov	r1, r5
 800d19c:	220a      	movs	r2, #10
 800d19e:	4630      	mov	r0, r6
 800d1a0:	f000 fa70 	bl	800d684 <__multadd>
 800d1a4:	9b07      	ldr	r3, [sp, #28]
 800d1a6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d1aa:	4605      	mov	r5, r0
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	f000 8197 	beq.w	800d4e0 <_dtoa_r+0xa90>
 800d1b2:	4639      	mov	r1, r7
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	220a      	movs	r2, #10
 800d1b8:	4630      	mov	r0, r6
 800d1ba:	f000 fa63 	bl	800d684 <__multadd>
 800d1be:	f1ba 0f00 	cmp.w	sl, #0
 800d1c2:	4607      	mov	r7, r0
 800d1c4:	f300 8093 	bgt.w	800d2ee <_dtoa_r+0x89e>
 800d1c8:	9b06      	ldr	r3, [sp, #24]
 800d1ca:	2b02      	cmp	r3, #2
 800d1cc:	dc57      	bgt.n	800d27e <_dtoa_r+0x82e>
 800d1ce:	e08e      	b.n	800d2ee <_dtoa_r+0x89e>
 800d1d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d1d2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d1d6:	e751      	b.n	800d07c <_dtoa_r+0x62c>
 800d1d8:	f109 34ff 	add.w	r4, r9, #4294967295
 800d1dc:	42a3      	cmp	r3, r4
 800d1de:	bfbf      	itttt	lt
 800d1e0:	1ae2      	sublt	r2, r4, r3
 800d1e2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d1e4:	189b      	addlt	r3, r3, r2
 800d1e6:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d1e8:	bfae      	itee	ge
 800d1ea:	1b1c      	subge	r4, r3, r4
 800d1ec:	4623      	movlt	r3, r4
 800d1ee:	2400      	movlt	r4, #0
 800d1f0:	f1b9 0f00 	cmp.w	r9, #0
 800d1f4:	bfb5      	itete	lt
 800d1f6:	9a04      	ldrlt	r2, [sp, #16]
 800d1f8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800d1fc:	eba2 0809 	sublt.w	r8, r2, r9
 800d200:	464a      	movge	r2, r9
 800d202:	bfb8      	it	lt
 800d204:	2200      	movlt	r2, #0
 800d206:	e73c      	b.n	800d082 <_dtoa_r+0x632>
 800d208:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d20c:	9f07      	ldr	r7, [sp, #28]
 800d20e:	461c      	mov	r4, r3
 800d210:	e744      	b.n	800d09c <_dtoa_r+0x64c>
 800d212:	461a      	mov	r2, r3
 800d214:	e770      	b.n	800d0f8 <_dtoa_r+0x6a8>
 800d216:	9b06      	ldr	r3, [sp, #24]
 800d218:	2b01      	cmp	r3, #1
 800d21a:	dc18      	bgt.n	800d24e <_dtoa_r+0x7fe>
 800d21c:	9b02      	ldr	r3, [sp, #8]
 800d21e:	b9b3      	cbnz	r3, 800d24e <_dtoa_r+0x7fe>
 800d220:	9b03      	ldr	r3, [sp, #12]
 800d222:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800d226:	b9a2      	cbnz	r2, 800d252 <_dtoa_r+0x802>
 800d228:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d22c:	0d12      	lsrs	r2, r2, #20
 800d22e:	0512      	lsls	r2, r2, #20
 800d230:	b18a      	cbz	r2, 800d256 <_dtoa_r+0x806>
 800d232:	9b04      	ldr	r3, [sp, #16]
 800d234:	3301      	adds	r3, #1
 800d236:	9304      	str	r3, [sp, #16]
 800d238:	9b05      	ldr	r3, [sp, #20]
 800d23a:	3301      	adds	r3, #1
 800d23c:	9305      	str	r3, [sp, #20]
 800d23e:	2301      	movs	r3, #1
 800d240:	9309      	str	r3, [sp, #36]	; 0x24
 800d242:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d244:	2b00      	cmp	r3, #0
 800d246:	f47f af70 	bne.w	800d12a <_dtoa_r+0x6da>
 800d24a:	2001      	movs	r0, #1
 800d24c:	e775      	b.n	800d13a <_dtoa_r+0x6ea>
 800d24e:	2300      	movs	r3, #0
 800d250:	e7f6      	b.n	800d240 <_dtoa_r+0x7f0>
 800d252:	9b02      	ldr	r3, [sp, #8]
 800d254:	e7f4      	b.n	800d240 <_dtoa_r+0x7f0>
 800d256:	9209      	str	r2, [sp, #36]	; 0x24
 800d258:	e7f3      	b.n	800d242 <_dtoa_r+0x7f2>
 800d25a:	d082      	beq.n	800d162 <_dtoa_r+0x712>
 800d25c:	9b04      	ldr	r3, [sp, #16]
 800d25e:	321c      	adds	r2, #28
 800d260:	4413      	add	r3, r2
 800d262:	9304      	str	r3, [sp, #16]
 800d264:	9b05      	ldr	r3, [sp, #20]
 800d266:	4490      	add	r8, r2
 800d268:	4413      	add	r3, r2
 800d26a:	e779      	b.n	800d160 <_dtoa_r+0x710>
 800d26c:	4602      	mov	r2, r0
 800d26e:	e7f5      	b.n	800d25c <_dtoa_r+0x80c>
 800d270:	f1b9 0f00 	cmp.w	r9, #0
 800d274:	dc36      	bgt.n	800d2e4 <_dtoa_r+0x894>
 800d276:	9b06      	ldr	r3, [sp, #24]
 800d278:	2b02      	cmp	r3, #2
 800d27a:	dd33      	ble.n	800d2e4 <_dtoa_r+0x894>
 800d27c:	46ca      	mov	sl, r9
 800d27e:	f1ba 0f00 	cmp.w	sl, #0
 800d282:	d10d      	bne.n	800d2a0 <_dtoa_r+0x850>
 800d284:	4621      	mov	r1, r4
 800d286:	4653      	mov	r3, sl
 800d288:	2205      	movs	r2, #5
 800d28a:	4630      	mov	r0, r6
 800d28c:	f000 f9fa 	bl	800d684 <__multadd>
 800d290:	4601      	mov	r1, r0
 800d292:	4604      	mov	r4, r0
 800d294:	4628      	mov	r0, r5
 800d296:	f000 fc0f 	bl	800dab8 <__mcmp>
 800d29a:	2800      	cmp	r0, #0
 800d29c:	f73f ade4 	bgt.w	800ce68 <_dtoa_r+0x418>
 800d2a0:	9b08      	ldr	r3, [sp, #32]
 800d2a2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d2a6:	ea6f 0b03 	mvn.w	fp, r3
 800d2aa:	f04f 0900 	mov.w	r9, #0
 800d2ae:	4621      	mov	r1, r4
 800d2b0:	4630      	mov	r0, r6
 800d2b2:	f000 f9c5 	bl	800d640 <_Bfree>
 800d2b6:	2f00      	cmp	r7, #0
 800d2b8:	f43f aea1 	beq.w	800cffe <_dtoa_r+0x5ae>
 800d2bc:	f1b9 0f00 	cmp.w	r9, #0
 800d2c0:	d005      	beq.n	800d2ce <_dtoa_r+0x87e>
 800d2c2:	45b9      	cmp	r9, r7
 800d2c4:	d003      	beq.n	800d2ce <_dtoa_r+0x87e>
 800d2c6:	4649      	mov	r1, r9
 800d2c8:	4630      	mov	r0, r6
 800d2ca:	f000 f9b9 	bl	800d640 <_Bfree>
 800d2ce:	4639      	mov	r1, r7
 800d2d0:	4630      	mov	r0, r6
 800d2d2:	f000 f9b5 	bl	800d640 <_Bfree>
 800d2d6:	e692      	b.n	800cffe <_dtoa_r+0x5ae>
 800d2d8:	2400      	movs	r4, #0
 800d2da:	4627      	mov	r7, r4
 800d2dc:	e7e0      	b.n	800d2a0 <_dtoa_r+0x850>
 800d2de:	4693      	mov	fp, r2
 800d2e0:	4627      	mov	r7, r4
 800d2e2:	e5c1      	b.n	800ce68 <_dtoa_r+0x418>
 800d2e4:	9b07      	ldr	r3, [sp, #28]
 800d2e6:	46ca      	mov	sl, r9
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	f000 8100 	beq.w	800d4ee <_dtoa_r+0xa9e>
 800d2ee:	f1b8 0f00 	cmp.w	r8, #0
 800d2f2:	dd05      	ble.n	800d300 <_dtoa_r+0x8b0>
 800d2f4:	4639      	mov	r1, r7
 800d2f6:	4642      	mov	r2, r8
 800d2f8:	4630      	mov	r0, r6
 800d2fa:	f000 fb71 	bl	800d9e0 <__lshift>
 800d2fe:	4607      	mov	r7, r0
 800d300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d302:	2b00      	cmp	r3, #0
 800d304:	d05d      	beq.n	800d3c2 <_dtoa_r+0x972>
 800d306:	6879      	ldr	r1, [r7, #4]
 800d308:	4630      	mov	r0, r6
 800d30a:	f000 f959 	bl	800d5c0 <_Balloc>
 800d30e:	4680      	mov	r8, r0
 800d310:	b928      	cbnz	r0, 800d31e <_dtoa_r+0x8ce>
 800d312:	4b82      	ldr	r3, [pc, #520]	; (800d51c <_dtoa_r+0xacc>)
 800d314:	4602      	mov	r2, r0
 800d316:	f240 21ef 	movw	r1, #751	; 0x2ef
 800d31a:	f7ff bbb1 	b.w	800ca80 <_dtoa_r+0x30>
 800d31e:	693a      	ldr	r2, [r7, #16]
 800d320:	3202      	adds	r2, #2
 800d322:	0092      	lsls	r2, r2, #2
 800d324:	f107 010c 	add.w	r1, r7, #12
 800d328:	300c      	adds	r0, #12
 800d32a:	f000 fee5 	bl	800e0f8 <memcpy>
 800d32e:	2201      	movs	r2, #1
 800d330:	4641      	mov	r1, r8
 800d332:	4630      	mov	r0, r6
 800d334:	f000 fb54 	bl	800d9e0 <__lshift>
 800d338:	9b01      	ldr	r3, [sp, #4]
 800d33a:	3301      	adds	r3, #1
 800d33c:	9304      	str	r3, [sp, #16]
 800d33e:	9b01      	ldr	r3, [sp, #4]
 800d340:	4453      	add	r3, sl
 800d342:	9308      	str	r3, [sp, #32]
 800d344:	9b02      	ldr	r3, [sp, #8]
 800d346:	f003 0301 	and.w	r3, r3, #1
 800d34a:	46b9      	mov	r9, r7
 800d34c:	9307      	str	r3, [sp, #28]
 800d34e:	4607      	mov	r7, r0
 800d350:	9b04      	ldr	r3, [sp, #16]
 800d352:	4621      	mov	r1, r4
 800d354:	3b01      	subs	r3, #1
 800d356:	4628      	mov	r0, r5
 800d358:	9302      	str	r3, [sp, #8]
 800d35a:	f7ff faf0 	bl	800c93e <quorem>
 800d35e:	4603      	mov	r3, r0
 800d360:	3330      	adds	r3, #48	; 0x30
 800d362:	9005      	str	r0, [sp, #20]
 800d364:	4649      	mov	r1, r9
 800d366:	4628      	mov	r0, r5
 800d368:	9309      	str	r3, [sp, #36]	; 0x24
 800d36a:	f000 fba5 	bl	800dab8 <__mcmp>
 800d36e:	463a      	mov	r2, r7
 800d370:	4682      	mov	sl, r0
 800d372:	4621      	mov	r1, r4
 800d374:	4630      	mov	r0, r6
 800d376:	f000 fbbb 	bl	800daf0 <__mdiff>
 800d37a:	68c2      	ldr	r2, [r0, #12]
 800d37c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d37e:	4680      	mov	r8, r0
 800d380:	bb0a      	cbnz	r2, 800d3c6 <_dtoa_r+0x976>
 800d382:	4601      	mov	r1, r0
 800d384:	4628      	mov	r0, r5
 800d386:	f000 fb97 	bl	800dab8 <__mcmp>
 800d38a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d38c:	4602      	mov	r2, r0
 800d38e:	4641      	mov	r1, r8
 800d390:	4630      	mov	r0, r6
 800d392:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800d396:	f000 f953 	bl	800d640 <_Bfree>
 800d39a:	9b06      	ldr	r3, [sp, #24]
 800d39c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d39e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d3a2:	ea43 0102 	orr.w	r1, r3, r2
 800d3a6:	9b07      	ldr	r3, [sp, #28]
 800d3a8:	4319      	orrs	r1, r3
 800d3aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3ac:	d10d      	bne.n	800d3ca <_dtoa_r+0x97a>
 800d3ae:	2b39      	cmp	r3, #57	; 0x39
 800d3b0:	d029      	beq.n	800d406 <_dtoa_r+0x9b6>
 800d3b2:	f1ba 0f00 	cmp.w	sl, #0
 800d3b6:	dd01      	ble.n	800d3bc <_dtoa_r+0x96c>
 800d3b8:	9b05      	ldr	r3, [sp, #20]
 800d3ba:	3331      	adds	r3, #49	; 0x31
 800d3bc:	9a02      	ldr	r2, [sp, #8]
 800d3be:	7013      	strb	r3, [r2, #0]
 800d3c0:	e775      	b.n	800d2ae <_dtoa_r+0x85e>
 800d3c2:	4638      	mov	r0, r7
 800d3c4:	e7b8      	b.n	800d338 <_dtoa_r+0x8e8>
 800d3c6:	2201      	movs	r2, #1
 800d3c8:	e7e1      	b.n	800d38e <_dtoa_r+0x93e>
 800d3ca:	f1ba 0f00 	cmp.w	sl, #0
 800d3ce:	db06      	blt.n	800d3de <_dtoa_r+0x98e>
 800d3d0:	9906      	ldr	r1, [sp, #24]
 800d3d2:	ea41 0a0a 	orr.w	sl, r1, sl
 800d3d6:	9907      	ldr	r1, [sp, #28]
 800d3d8:	ea5a 0a01 	orrs.w	sl, sl, r1
 800d3dc:	d120      	bne.n	800d420 <_dtoa_r+0x9d0>
 800d3de:	2a00      	cmp	r2, #0
 800d3e0:	ddec      	ble.n	800d3bc <_dtoa_r+0x96c>
 800d3e2:	4629      	mov	r1, r5
 800d3e4:	2201      	movs	r2, #1
 800d3e6:	4630      	mov	r0, r6
 800d3e8:	9304      	str	r3, [sp, #16]
 800d3ea:	f000 faf9 	bl	800d9e0 <__lshift>
 800d3ee:	4621      	mov	r1, r4
 800d3f0:	4605      	mov	r5, r0
 800d3f2:	f000 fb61 	bl	800dab8 <__mcmp>
 800d3f6:	2800      	cmp	r0, #0
 800d3f8:	9b04      	ldr	r3, [sp, #16]
 800d3fa:	dc02      	bgt.n	800d402 <_dtoa_r+0x9b2>
 800d3fc:	d1de      	bne.n	800d3bc <_dtoa_r+0x96c>
 800d3fe:	07da      	lsls	r2, r3, #31
 800d400:	d5dc      	bpl.n	800d3bc <_dtoa_r+0x96c>
 800d402:	2b39      	cmp	r3, #57	; 0x39
 800d404:	d1d8      	bne.n	800d3b8 <_dtoa_r+0x968>
 800d406:	9a02      	ldr	r2, [sp, #8]
 800d408:	2339      	movs	r3, #57	; 0x39
 800d40a:	7013      	strb	r3, [r2, #0]
 800d40c:	4643      	mov	r3, r8
 800d40e:	4698      	mov	r8, r3
 800d410:	3b01      	subs	r3, #1
 800d412:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800d416:	2a39      	cmp	r2, #57	; 0x39
 800d418:	d051      	beq.n	800d4be <_dtoa_r+0xa6e>
 800d41a:	3201      	adds	r2, #1
 800d41c:	701a      	strb	r2, [r3, #0]
 800d41e:	e746      	b.n	800d2ae <_dtoa_r+0x85e>
 800d420:	2a00      	cmp	r2, #0
 800d422:	dd03      	ble.n	800d42c <_dtoa_r+0x9dc>
 800d424:	2b39      	cmp	r3, #57	; 0x39
 800d426:	d0ee      	beq.n	800d406 <_dtoa_r+0x9b6>
 800d428:	3301      	adds	r3, #1
 800d42a:	e7c7      	b.n	800d3bc <_dtoa_r+0x96c>
 800d42c:	9a04      	ldr	r2, [sp, #16]
 800d42e:	9908      	ldr	r1, [sp, #32]
 800d430:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d434:	428a      	cmp	r2, r1
 800d436:	d02b      	beq.n	800d490 <_dtoa_r+0xa40>
 800d438:	4629      	mov	r1, r5
 800d43a:	2300      	movs	r3, #0
 800d43c:	220a      	movs	r2, #10
 800d43e:	4630      	mov	r0, r6
 800d440:	f000 f920 	bl	800d684 <__multadd>
 800d444:	45b9      	cmp	r9, r7
 800d446:	4605      	mov	r5, r0
 800d448:	f04f 0300 	mov.w	r3, #0
 800d44c:	f04f 020a 	mov.w	r2, #10
 800d450:	4649      	mov	r1, r9
 800d452:	4630      	mov	r0, r6
 800d454:	d107      	bne.n	800d466 <_dtoa_r+0xa16>
 800d456:	f000 f915 	bl	800d684 <__multadd>
 800d45a:	4681      	mov	r9, r0
 800d45c:	4607      	mov	r7, r0
 800d45e:	9b04      	ldr	r3, [sp, #16]
 800d460:	3301      	adds	r3, #1
 800d462:	9304      	str	r3, [sp, #16]
 800d464:	e774      	b.n	800d350 <_dtoa_r+0x900>
 800d466:	f000 f90d 	bl	800d684 <__multadd>
 800d46a:	4639      	mov	r1, r7
 800d46c:	4681      	mov	r9, r0
 800d46e:	2300      	movs	r3, #0
 800d470:	220a      	movs	r2, #10
 800d472:	4630      	mov	r0, r6
 800d474:	f000 f906 	bl	800d684 <__multadd>
 800d478:	4607      	mov	r7, r0
 800d47a:	e7f0      	b.n	800d45e <_dtoa_r+0xa0e>
 800d47c:	f1ba 0f00 	cmp.w	sl, #0
 800d480:	9a01      	ldr	r2, [sp, #4]
 800d482:	bfcc      	ite	gt
 800d484:	46d0      	movgt	r8, sl
 800d486:	f04f 0801 	movle.w	r8, #1
 800d48a:	4490      	add	r8, r2
 800d48c:	f04f 0900 	mov.w	r9, #0
 800d490:	4629      	mov	r1, r5
 800d492:	2201      	movs	r2, #1
 800d494:	4630      	mov	r0, r6
 800d496:	9302      	str	r3, [sp, #8]
 800d498:	f000 faa2 	bl	800d9e0 <__lshift>
 800d49c:	4621      	mov	r1, r4
 800d49e:	4605      	mov	r5, r0
 800d4a0:	f000 fb0a 	bl	800dab8 <__mcmp>
 800d4a4:	2800      	cmp	r0, #0
 800d4a6:	dcb1      	bgt.n	800d40c <_dtoa_r+0x9bc>
 800d4a8:	d102      	bne.n	800d4b0 <_dtoa_r+0xa60>
 800d4aa:	9b02      	ldr	r3, [sp, #8]
 800d4ac:	07db      	lsls	r3, r3, #31
 800d4ae:	d4ad      	bmi.n	800d40c <_dtoa_r+0x9bc>
 800d4b0:	4643      	mov	r3, r8
 800d4b2:	4698      	mov	r8, r3
 800d4b4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d4b8:	2a30      	cmp	r2, #48	; 0x30
 800d4ba:	d0fa      	beq.n	800d4b2 <_dtoa_r+0xa62>
 800d4bc:	e6f7      	b.n	800d2ae <_dtoa_r+0x85e>
 800d4be:	9a01      	ldr	r2, [sp, #4]
 800d4c0:	429a      	cmp	r2, r3
 800d4c2:	d1a4      	bne.n	800d40e <_dtoa_r+0x9be>
 800d4c4:	f10b 0b01 	add.w	fp, fp, #1
 800d4c8:	2331      	movs	r3, #49	; 0x31
 800d4ca:	e778      	b.n	800d3be <_dtoa_r+0x96e>
 800d4cc:	4b14      	ldr	r3, [pc, #80]	; (800d520 <_dtoa_r+0xad0>)
 800d4ce:	f7ff bb2a 	b.w	800cb26 <_dtoa_r+0xd6>
 800d4d2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	f47f ab05 	bne.w	800cae4 <_dtoa_r+0x94>
 800d4da:	4b12      	ldr	r3, [pc, #72]	; (800d524 <_dtoa_r+0xad4>)
 800d4dc:	f7ff bb23 	b.w	800cb26 <_dtoa_r+0xd6>
 800d4e0:	f1ba 0f00 	cmp.w	sl, #0
 800d4e4:	dc03      	bgt.n	800d4ee <_dtoa_r+0xa9e>
 800d4e6:	9b06      	ldr	r3, [sp, #24]
 800d4e8:	2b02      	cmp	r3, #2
 800d4ea:	f73f aec8 	bgt.w	800d27e <_dtoa_r+0x82e>
 800d4ee:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d4f2:	4621      	mov	r1, r4
 800d4f4:	4628      	mov	r0, r5
 800d4f6:	f7ff fa22 	bl	800c93e <quorem>
 800d4fa:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d4fe:	f808 3b01 	strb.w	r3, [r8], #1
 800d502:	9a01      	ldr	r2, [sp, #4]
 800d504:	eba8 0202 	sub.w	r2, r8, r2
 800d508:	4592      	cmp	sl, r2
 800d50a:	ddb7      	ble.n	800d47c <_dtoa_r+0xa2c>
 800d50c:	4629      	mov	r1, r5
 800d50e:	2300      	movs	r3, #0
 800d510:	220a      	movs	r2, #10
 800d512:	4630      	mov	r0, r6
 800d514:	f000 f8b6 	bl	800d684 <__multadd>
 800d518:	4605      	mov	r5, r0
 800d51a:	e7ea      	b.n	800d4f2 <_dtoa_r+0xaa2>
 800d51c:	0800e8e8 	.word	0x0800e8e8
 800d520:	0800e848 	.word	0x0800e848
 800d524:	0800e86c 	.word	0x0800e86c

0800d528 <_free_r>:
 800d528:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d52a:	2900      	cmp	r1, #0
 800d52c:	d044      	beq.n	800d5b8 <_free_r+0x90>
 800d52e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d532:	9001      	str	r0, [sp, #4]
 800d534:	2b00      	cmp	r3, #0
 800d536:	f1a1 0404 	sub.w	r4, r1, #4
 800d53a:	bfb8      	it	lt
 800d53c:	18e4      	addlt	r4, r4, r3
 800d53e:	f7fe fbf9 	bl	800bd34 <__malloc_lock>
 800d542:	4a1e      	ldr	r2, [pc, #120]	; (800d5bc <_free_r+0x94>)
 800d544:	9801      	ldr	r0, [sp, #4]
 800d546:	6813      	ldr	r3, [r2, #0]
 800d548:	b933      	cbnz	r3, 800d558 <_free_r+0x30>
 800d54a:	6063      	str	r3, [r4, #4]
 800d54c:	6014      	str	r4, [r2, #0]
 800d54e:	b003      	add	sp, #12
 800d550:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d554:	f7fe bbf4 	b.w	800bd40 <__malloc_unlock>
 800d558:	42a3      	cmp	r3, r4
 800d55a:	d908      	bls.n	800d56e <_free_r+0x46>
 800d55c:	6825      	ldr	r5, [r4, #0]
 800d55e:	1961      	adds	r1, r4, r5
 800d560:	428b      	cmp	r3, r1
 800d562:	bf01      	itttt	eq
 800d564:	6819      	ldreq	r1, [r3, #0]
 800d566:	685b      	ldreq	r3, [r3, #4]
 800d568:	1949      	addeq	r1, r1, r5
 800d56a:	6021      	streq	r1, [r4, #0]
 800d56c:	e7ed      	b.n	800d54a <_free_r+0x22>
 800d56e:	461a      	mov	r2, r3
 800d570:	685b      	ldr	r3, [r3, #4]
 800d572:	b10b      	cbz	r3, 800d578 <_free_r+0x50>
 800d574:	42a3      	cmp	r3, r4
 800d576:	d9fa      	bls.n	800d56e <_free_r+0x46>
 800d578:	6811      	ldr	r1, [r2, #0]
 800d57a:	1855      	adds	r5, r2, r1
 800d57c:	42a5      	cmp	r5, r4
 800d57e:	d10b      	bne.n	800d598 <_free_r+0x70>
 800d580:	6824      	ldr	r4, [r4, #0]
 800d582:	4421      	add	r1, r4
 800d584:	1854      	adds	r4, r2, r1
 800d586:	42a3      	cmp	r3, r4
 800d588:	6011      	str	r1, [r2, #0]
 800d58a:	d1e0      	bne.n	800d54e <_free_r+0x26>
 800d58c:	681c      	ldr	r4, [r3, #0]
 800d58e:	685b      	ldr	r3, [r3, #4]
 800d590:	6053      	str	r3, [r2, #4]
 800d592:	440c      	add	r4, r1
 800d594:	6014      	str	r4, [r2, #0]
 800d596:	e7da      	b.n	800d54e <_free_r+0x26>
 800d598:	d902      	bls.n	800d5a0 <_free_r+0x78>
 800d59a:	230c      	movs	r3, #12
 800d59c:	6003      	str	r3, [r0, #0]
 800d59e:	e7d6      	b.n	800d54e <_free_r+0x26>
 800d5a0:	6825      	ldr	r5, [r4, #0]
 800d5a2:	1961      	adds	r1, r4, r5
 800d5a4:	428b      	cmp	r3, r1
 800d5a6:	bf04      	itt	eq
 800d5a8:	6819      	ldreq	r1, [r3, #0]
 800d5aa:	685b      	ldreq	r3, [r3, #4]
 800d5ac:	6063      	str	r3, [r4, #4]
 800d5ae:	bf04      	itt	eq
 800d5b0:	1949      	addeq	r1, r1, r5
 800d5b2:	6021      	streq	r1, [r4, #0]
 800d5b4:	6054      	str	r4, [r2, #4]
 800d5b6:	e7ca      	b.n	800d54e <_free_r+0x26>
 800d5b8:	b003      	add	sp, #12
 800d5ba:	bd30      	pop	{r4, r5, pc}
 800d5bc:	24002128 	.word	0x24002128

0800d5c0 <_Balloc>:
 800d5c0:	b570      	push	{r4, r5, r6, lr}
 800d5c2:	69c6      	ldr	r6, [r0, #28]
 800d5c4:	4604      	mov	r4, r0
 800d5c6:	460d      	mov	r5, r1
 800d5c8:	b976      	cbnz	r6, 800d5e8 <_Balloc+0x28>
 800d5ca:	2010      	movs	r0, #16
 800d5cc:	f7fe fb02 	bl	800bbd4 <malloc>
 800d5d0:	4602      	mov	r2, r0
 800d5d2:	61e0      	str	r0, [r4, #28]
 800d5d4:	b920      	cbnz	r0, 800d5e0 <_Balloc+0x20>
 800d5d6:	4b18      	ldr	r3, [pc, #96]	; (800d638 <_Balloc+0x78>)
 800d5d8:	4818      	ldr	r0, [pc, #96]	; (800d63c <_Balloc+0x7c>)
 800d5da:	216b      	movs	r1, #107	; 0x6b
 800d5dc:	f000 fd9a 	bl	800e114 <__assert_func>
 800d5e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d5e4:	6006      	str	r6, [r0, #0]
 800d5e6:	60c6      	str	r6, [r0, #12]
 800d5e8:	69e6      	ldr	r6, [r4, #28]
 800d5ea:	68f3      	ldr	r3, [r6, #12]
 800d5ec:	b183      	cbz	r3, 800d610 <_Balloc+0x50>
 800d5ee:	69e3      	ldr	r3, [r4, #28]
 800d5f0:	68db      	ldr	r3, [r3, #12]
 800d5f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d5f6:	b9b8      	cbnz	r0, 800d628 <_Balloc+0x68>
 800d5f8:	2101      	movs	r1, #1
 800d5fa:	fa01 f605 	lsl.w	r6, r1, r5
 800d5fe:	1d72      	adds	r2, r6, #5
 800d600:	0092      	lsls	r2, r2, #2
 800d602:	4620      	mov	r0, r4
 800d604:	f000 fda4 	bl	800e150 <_calloc_r>
 800d608:	b160      	cbz	r0, 800d624 <_Balloc+0x64>
 800d60a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d60e:	e00e      	b.n	800d62e <_Balloc+0x6e>
 800d610:	2221      	movs	r2, #33	; 0x21
 800d612:	2104      	movs	r1, #4
 800d614:	4620      	mov	r0, r4
 800d616:	f000 fd9b 	bl	800e150 <_calloc_r>
 800d61a:	69e3      	ldr	r3, [r4, #28]
 800d61c:	60f0      	str	r0, [r6, #12]
 800d61e:	68db      	ldr	r3, [r3, #12]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d1e4      	bne.n	800d5ee <_Balloc+0x2e>
 800d624:	2000      	movs	r0, #0
 800d626:	bd70      	pop	{r4, r5, r6, pc}
 800d628:	6802      	ldr	r2, [r0, #0]
 800d62a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d62e:	2300      	movs	r3, #0
 800d630:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d634:	e7f7      	b.n	800d626 <_Balloc+0x66>
 800d636:	bf00      	nop
 800d638:	0800e879 	.word	0x0800e879
 800d63c:	0800e8f9 	.word	0x0800e8f9

0800d640 <_Bfree>:
 800d640:	b570      	push	{r4, r5, r6, lr}
 800d642:	69c6      	ldr	r6, [r0, #28]
 800d644:	4605      	mov	r5, r0
 800d646:	460c      	mov	r4, r1
 800d648:	b976      	cbnz	r6, 800d668 <_Bfree+0x28>
 800d64a:	2010      	movs	r0, #16
 800d64c:	f7fe fac2 	bl	800bbd4 <malloc>
 800d650:	4602      	mov	r2, r0
 800d652:	61e8      	str	r0, [r5, #28]
 800d654:	b920      	cbnz	r0, 800d660 <_Bfree+0x20>
 800d656:	4b09      	ldr	r3, [pc, #36]	; (800d67c <_Bfree+0x3c>)
 800d658:	4809      	ldr	r0, [pc, #36]	; (800d680 <_Bfree+0x40>)
 800d65a:	218f      	movs	r1, #143	; 0x8f
 800d65c:	f000 fd5a 	bl	800e114 <__assert_func>
 800d660:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d664:	6006      	str	r6, [r0, #0]
 800d666:	60c6      	str	r6, [r0, #12]
 800d668:	b13c      	cbz	r4, 800d67a <_Bfree+0x3a>
 800d66a:	69eb      	ldr	r3, [r5, #28]
 800d66c:	6862      	ldr	r2, [r4, #4]
 800d66e:	68db      	ldr	r3, [r3, #12]
 800d670:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d674:	6021      	str	r1, [r4, #0]
 800d676:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d67a:	bd70      	pop	{r4, r5, r6, pc}
 800d67c:	0800e879 	.word	0x0800e879
 800d680:	0800e8f9 	.word	0x0800e8f9

0800d684 <__multadd>:
 800d684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d688:	690d      	ldr	r5, [r1, #16]
 800d68a:	4607      	mov	r7, r0
 800d68c:	460c      	mov	r4, r1
 800d68e:	461e      	mov	r6, r3
 800d690:	f101 0c14 	add.w	ip, r1, #20
 800d694:	2000      	movs	r0, #0
 800d696:	f8dc 3000 	ldr.w	r3, [ip]
 800d69a:	b299      	uxth	r1, r3
 800d69c:	fb02 6101 	mla	r1, r2, r1, r6
 800d6a0:	0c1e      	lsrs	r6, r3, #16
 800d6a2:	0c0b      	lsrs	r3, r1, #16
 800d6a4:	fb02 3306 	mla	r3, r2, r6, r3
 800d6a8:	b289      	uxth	r1, r1
 800d6aa:	3001      	adds	r0, #1
 800d6ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d6b0:	4285      	cmp	r5, r0
 800d6b2:	f84c 1b04 	str.w	r1, [ip], #4
 800d6b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d6ba:	dcec      	bgt.n	800d696 <__multadd+0x12>
 800d6bc:	b30e      	cbz	r6, 800d702 <__multadd+0x7e>
 800d6be:	68a3      	ldr	r3, [r4, #8]
 800d6c0:	42ab      	cmp	r3, r5
 800d6c2:	dc19      	bgt.n	800d6f8 <__multadd+0x74>
 800d6c4:	6861      	ldr	r1, [r4, #4]
 800d6c6:	4638      	mov	r0, r7
 800d6c8:	3101      	adds	r1, #1
 800d6ca:	f7ff ff79 	bl	800d5c0 <_Balloc>
 800d6ce:	4680      	mov	r8, r0
 800d6d0:	b928      	cbnz	r0, 800d6de <__multadd+0x5a>
 800d6d2:	4602      	mov	r2, r0
 800d6d4:	4b0c      	ldr	r3, [pc, #48]	; (800d708 <__multadd+0x84>)
 800d6d6:	480d      	ldr	r0, [pc, #52]	; (800d70c <__multadd+0x88>)
 800d6d8:	21ba      	movs	r1, #186	; 0xba
 800d6da:	f000 fd1b 	bl	800e114 <__assert_func>
 800d6de:	6922      	ldr	r2, [r4, #16]
 800d6e0:	3202      	adds	r2, #2
 800d6e2:	f104 010c 	add.w	r1, r4, #12
 800d6e6:	0092      	lsls	r2, r2, #2
 800d6e8:	300c      	adds	r0, #12
 800d6ea:	f000 fd05 	bl	800e0f8 <memcpy>
 800d6ee:	4621      	mov	r1, r4
 800d6f0:	4638      	mov	r0, r7
 800d6f2:	f7ff ffa5 	bl	800d640 <_Bfree>
 800d6f6:	4644      	mov	r4, r8
 800d6f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d6fc:	3501      	adds	r5, #1
 800d6fe:	615e      	str	r6, [r3, #20]
 800d700:	6125      	str	r5, [r4, #16]
 800d702:	4620      	mov	r0, r4
 800d704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d708:	0800e8e8 	.word	0x0800e8e8
 800d70c:	0800e8f9 	.word	0x0800e8f9

0800d710 <__hi0bits>:
 800d710:	0c03      	lsrs	r3, r0, #16
 800d712:	041b      	lsls	r3, r3, #16
 800d714:	b9d3      	cbnz	r3, 800d74c <__hi0bits+0x3c>
 800d716:	0400      	lsls	r0, r0, #16
 800d718:	2310      	movs	r3, #16
 800d71a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d71e:	bf04      	itt	eq
 800d720:	0200      	lsleq	r0, r0, #8
 800d722:	3308      	addeq	r3, #8
 800d724:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d728:	bf04      	itt	eq
 800d72a:	0100      	lsleq	r0, r0, #4
 800d72c:	3304      	addeq	r3, #4
 800d72e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d732:	bf04      	itt	eq
 800d734:	0080      	lsleq	r0, r0, #2
 800d736:	3302      	addeq	r3, #2
 800d738:	2800      	cmp	r0, #0
 800d73a:	db05      	blt.n	800d748 <__hi0bits+0x38>
 800d73c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d740:	f103 0301 	add.w	r3, r3, #1
 800d744:	bf08      	it	eq
 800d746:	2320      	moveq	r3, #32
 800d748:	4618      	mov	r0, r3
 800d74a:	4770      	bx	lr
 800d74c:	2300      	movs	r3, #0
 800d74e:	e7e4      	b.n	800d71a <__hi0bits+0xa>

0800d750 <__lo0bits>:
 800d750:	6803      	ldr	r3, [r0, #0]
 800d752:	f013 0207 	ands.w	r2, r3, #7
 800d756:	d00c      	beq.n	800d772 <__lo0bits+0x22>
 800d758:	07d9      	lsls	r1, r3, #31
 800d75a:	d422      	bmi.n	800d7a2 <__lo0bits+0x52>
 800d75c:	079a      	lsls	r2, r3, #30
 800d75e:	bf49      	itett	mi
 800d760:	085b      	lsrmi	r3, r3, #1
 800d762:	089b      	lsrpl	r3, r3, #2
 800d764:	6003      	strmi	r3, [r0, #0]
 800d766:	2201      	movmi	r2, #1
 800d768:	bf5c      	itt	pl
 800d76a:	6003      	strpl	r3, [r0, #0]
 800d76c:	2202      	movpl	r2, #2
 800d76e:	4610      	mov	r0, r2
 800d770:	4770      	bx	lr
 800d772:	b299      	uxth	r1, r3
 800d774:	b909      	cbnz	r1, 800d77a <__lo0bits+0x2a>
 800d776:	0c1b      	lsrs	r3, r3, #16
 800d778:	2210      	movs	r2, #16
 800d77a:	b2d9      	uxtb	r1, r3
 800d77c:	b909      	cbnz	r1, 800d782 <__lo0bits+0x32>
 800d77e:	3208      	adds	r2, #8
 800d780:	0a1b      	lsrs	r3, r3, #8
 800d782:	0719      	lsls	r1, r3, #28
 800d784:	bf04      	itt	eq
 800d786:	091b      	lsreq	r3, r3, #4
 800d788:	3204      	addeq	r2, #4
 800d78a:	0799      	lsls	r1, r3, #30
 800d78c:	bf04      	itt	eq
 800d78e:	089b      	lsreq	r3, r3, #2
 800d790:	3202      	addeq	r2, #2
 800d792:	07d9      	lsls	r1, r3, #31
 800d794:	d403      	bmi.n	800d79e <__lo0bits+0x4e>
 800d796:	085b      	lsrs	r3, r3, #1
 800d798:	f102 0201 	add.w	r2, r2, #1
 800d79c:	d003      	beq.n	800d7a6 <__lo0bits+0x56>
 800d79e:	6003      	str	r3, [r0, #0]
 800d7a0:	e7e5      	b.n	800d76e <__lo0bits+0x1e>
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	e7e3      	b.n	800d76e <__lo0bits+0x1e>
 800d7a6:	2220      	movs	r2, #32
 800d7a8:	e7e1      	b.n	800d76e <__lo0bits+0x1e>
	...

0800d7ac <__i2b>:
 800d7ac:	b510      	push	{r4, lr}
 800d7ae:	460c      	mov	r4, r1
 800d7b0:	2101      	movs	r1, #1
 800d7b2:	f7ff ff05 	bl	800d5c0 <_Balloc>
 800d7b6:	4602      	mov	r2, r0
 800d7b8:	b928      	cbnz	r0, 800d7c6 <__i2b+0x1a>
 800d7ba:	4b05      	ldr	r3, [pc, #20]	; (800d7d0 <__i2b+0x24>)
 800d7bc:	4805      	ldr	r0, [pc, #20]	; (800d7d4 <__i2b+0x28>)
 800d7be:	f240 1145 	movw	r1, #325	; 0x145
 800d7c2:	f000 fca7 	bl	800e114 <__assert_func>
 800d7c6:	2301      	movs	r3, #1
 800d7c8:	6144      	str	r4, [r0, #20]
 800d7ca:	6103      	str	r3, [r0, #16]
 800d7cc:	bd10      	pop	{r4, pc}
 800d7ce:	bf00      	nop
 800d7d0:	0800e8e8 	.word	0x0800e8e8
 800d7d4:	0800e8f9 	.word	0x0800e8f9

0800d7d8 <__multiply>:
 800d7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7dc:	4691      	mov	r9, r2
 800d7de:	690a      	ldr	r2, [r1, #16]
 800d7e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d7e4:	429a      	cmp	r2, r3
 800d7e6:	bfb8      	it	lt
 800d7e8:	460b      	movlt	r3, r1
 800d7ea:	460c      	mov	r4, r1
 800d7ec:	bfbc      	itt	lt
 800d7ee:	464c      	movlt	r4, r9
 800d7f0:	4699      	movlt	r9, r3
 800d7f2:	6927      	ldr	r7, [r4, #16]
 800d7f4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d7f8:	68a3      	ldr	r3, [r4, #8]
 800d7fa:	6861      	ldr	r1, [r4, #4]
 800d7fc:	eb07 060a 	add.w	r6, r7, sl
 800d800:	42b3      	cmp	r3, r6
 800d802:	b085      	sub	sp, #20
 800d804:	bfb8      	it	lt
 800d806:	3101      	addlt	r1, #1
 800d808:	f7ff feda 	bl	800d5c0 <_Balloc>
 800d80c:	b930      	cbnz	r0, 800d81c <__multiply+0x44>
 800d80e:	4602      	mov	r2, r0
 800d810:	4b44      	ldr	r3, [pc, #272]	; (800d924 <__multiply+0x14c>)
 800d812:	4845      	ldr	r0, [pc, #276]	; (800d928 <__multiply+0x150>)
 800d814:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d818:	f000 fc7c 	bl	800e114 <__assert_func>
 800d81c:	f100 0514 	add.w	r5, r0, #20
 800d820:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d824:	462b      	mov	r3, r5
 800d826:	2200      	movs	r2, #0
 800d828:	4543      	cmp	r3, r8
 800d82a:	d321      	bcc.n	800d870 <__multiply+0x98>
 800d82c:	f104 0314 	add.w	r3, r4, #20
 800d830:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d834:	f109 0314 	add.w	r3, r9, #20
 800d838:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d83c:	9202      	str	r2, [sp, #8]
 800d83e:	1b3a      	subs	r2, r7, r4
 800d840:	3a15      	subs	r2, #21
 800d842:	f022 0203 	bic.w	r2, r2, #3
 800d846:	3204      	adds	r2, #4
 800d848:	f104 0115 	add.w	r1, r4, #21
 800d84c:	428f      	cmp	r7, r1
 800d84e:	bf38      	it	cc
 800d850:	2204      	movcc	r2, #4
 800d852:	9201      	str	r2, [sp, #4]
 800d854:	9a02      	ldr	r2, [sp, #8]
 800d856:	9303      	str	r3, [sp, #12]
 800d858:	429a      	cmp	r2, r3
 800d85a:	d80c      	bhi.n	800d876 <__multiply+0x9e>
 800d85c:	2e00      	cmp	r6, #0
 800d85e:	dd03      	ble.n	800d868 <__multiply+0x90>
 800d860:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d864:	2b00      	cmp	r3, #0
 800d866:	d05b      	beq.n	800d920 <__multiply+0x148>
 800d868:	6106      	str	r6, [r0, #16]
 800d86a:	b005      	add	sp, #20
 800d86c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d870:	f843 2b04 	str.w	r2, [r3], #4
 800d874:	e7d8      	b.n	800d828 <__multiply+0x50>
 800d876:	f8b3 a000 	ldrh.w	sl, [r3]
 800d87a:	f1ba 0f00 	cmp.w	sl, #0
 800d87e:	d024      	beq.n	800d8ca <__multiply+0xf2>
 800d880:	f104 0e14 	add.w	lr, r4, #20
 800d884:	46a9      	mov	r9, r5
 800d886:	f04f 0c00 	mov.w	ip, #0
 800d88a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d88e:	f8d9 1000 	ldr.w	r1, [r9]
 800d892:	fa1f fb82 	uxth.w	fp, r2
 800d896:	b289      	uxth	r1, r1
 800d898:	fb0a 110b 	mla	r1, sl, fp, r1
 800d89c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d8a0:	f8d9 2000 	ldr.w	r2, [r9]
 800d8a4:	4461      	add	r1, ip
 800d8a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d8aa:	fb0a c20b 	mla	r2, sl, fp, ip
 800d8ae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d8b2:	b289      	uxth	r1, r1
 800d8b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d8b8:	4577      	cmp	r7, lr
 800d8ba:	f849 1b04 	str.w	r1, [r9], #4
 800d8be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d8c2:	d8e2      	bhi.n	800d88a <__multiply+0xb2>
 800d8c4:	9a01      	ldr	r2, [sp, #4]
 800d8c6:	f845 c002 	str.w	ip, [r5, r2]
 800d8ca:	9a03      	ldr	r2, [sp, #12]
 800d8cc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d8d0:	3304      	adds	r3, #4
 800d8d2:	f1b9 0f00 	cmp.w	r9, #0
 800d8d6:	d021      	beq.n	800d91c <__multiply+0x144>
 800d8d8:	6829      	ldr	r1, [r5, #0]
 800d8da:	f104 0c14 	add.w	ip, r4, #20
 800d8de:	46ae      	mov	lr, r5
 800d8e0:	f04f 0a00 	mov.w	sl, #0
 800d8e4:	f8bc b000 	ldrh.w	fp, [ip]
 800d8e8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d8ec:	fb09 220b 	mla	r2, r9, fp, r2
 800d8f0:	4452      	add	r2, sl
 800d8f2:	b289      	uxth	r1, r1
 800d8f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d8f8:	f84e 1b04 	str.w	r1, [lr], #4
 800d8fc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d900:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d904:	f8be 1000 	ldrh.w	r1, [lr]
 800d908:	fb09 110a 	mla	r1, r9, sl, r1
 800d90c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d910:	4567      	cmp	r7, ip
 800d912:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d916:	d8e5      	bhi.n	800d8e4 <__multiply+0x10c>
 800d918:	9a01      	ldr	r2, [sp, #4]
 800d91a:	50a9      	str	r1, [r5, r2]
 800d91c:	3504      	adds	r5, #4
 800d91e:	e799      	b.n	800d854 <__multiply+0x7c>
 800d920:	3e01      	subs	r6, #1
 800d922:	e79b      	b.n	800d85c <__multiply+0x84>
 800d924:	0800e8e8 	.word	0x0800e8e8
 800d928:	0800e8f9 	.word	0x0800e8f9

0800d92c <__pow5mult>:
 800d92c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d930:	4615      	mov	r5, r2
 800d932:	f012 0203 	ands.w	r2, r2, #3
 800d936:	4606      	mov	r6, r0
 800d938:	460f      	mov	r7, r1
 800d93a:	d007      	beq.n	800d94c <__pow5mult+0x20>
 800d93c:	4c25      	ldr	r4, [pc, #148]	; (800d9d4 <__pow5mult+0xa8>)
 800d93e:	3a01      	subs	r2, #1
 800d940:	2300      	movs	r3, #0
 800d942:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d946:	f7ff fe9d 	bl	800d684 <__multadd>
 800d94a:	4607      	mov	r7, r0
 800d94c:	10ad      	asrs	r5, r5, #2
 800d94e:	d03d      	beq.n	800d9cc <__pow5mult+0xa0>
 800d950:	69f4      	ldr	r4, [r6, #28]
 800d952:	b97c      	cbnz	r4, 800d974 <__pow5mult+0x48>
 800d954:	2010      	movs	r0, #16
 800d956:	f7fe f93d 	bl	800bbd4 <malloc>
 800d95a:	4602      	mov	r2, r0
 800d95c:	61f0      	str	r0, [r6, #28]
 800d95e:	b928      	cbnz	r0, 800d96c <__pow5mult+0x40>
 800d960:	4b1d      	ldr	r3, [pc, #116]	; (800d9d8 <__pow5mult+0xac>)
 800d962:	481e      	ldr	r0, [pc, #120]	; (800d9dc <__pow5mult+0xb0>)
 800d964:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d968:	f000 fbd4 	bl	800e114 <__assert_func>
 800d96c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d970:	6004      	str	r4, [r0, #0]
 800d972:	60c4      	str	r4, [r0, #12]
 800d974:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d978:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d97c:	b94c      	cbnz	r4, 800d992 <__pow5mult+0x66>
 800d97e:	f240 2171 	movw	r1, #625	; 0x271
 800d982:	4630      	mov	r0, r6
 800d984:	f7ff ff12 	bl	800d7ac <__i2b>
 800d988:	2300      	movs	r3, #0
 800d98a:	f8c8 0008 	str.w	r0, [r8, #8]
 800d98e:	4604      	mov	r4, r0
 800d990:	6003      	str	r3, [r0, #0]
 800d992:	f04f 0900 	mov.w	r9, #0
 800d996:	07eb      	lsls	r3, r5, #31
 800d998:	d50a      	bpl.n	800d9b0 <__pow5mult+0x84>
 800d99a:	4639      	mov	r1, r7
 800d99c:	4622      	mov	r2, r4
 800d99e:	4630      	mov	r0, r6
 800d9a0:	f7ff ff1a 	bl	800d7d8 <__multiply>
 800d9a4:	4639      	mov	r1, r7
 800d9a6:	4680      	mov	r8, r0
 800d9a8:	4630      	mov	r0, r6
 800d9aa:	f7ff fe49 	bl	800d640 <_Bfree>
 800d9ae:	4647      	mov	r7, r8
 800d9b0:	106d      	asrs	r5, r5, #1
 800d9b2:	d00b      	beq.n	800d9cc <__pow5mult+0xa0>
 800d9b4:	6820      	ldr	r0, [r4, #0]
 800d9b6:	b938      	cbnz	r0, 800d9c8 <__pow5mult+0x9c>
 800d9b8:	4622      	mov	r2, r4
 800d9ba:	4621      	mov	r1, r4
 800d9bc:	4630      	mov	r0, r6
 800d9be:	f7ff ff0b 	bl	800d7d8 <__multiply>
 800d9c2:	6020      	str	r0, [r4, #0]
 800d9c4:	f8c0 9000 	str.w	r9, [r0]
 800d9c8:	4604      	mov	r4, r0
 800d9ca:	e7e4      	b.n	800d996 <__pow5mult+0x6a>
 800d9cc:	4638      	mov	r0, r7
 800d9ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d9d2:	bf00      	nop
 800d9d4:	0800ea48 	.word	0x0800ea48
 800d9d8:	0800e879 	.word	0x0800e879
 800d9dc:	0800e8f9 	.word	0x0800e8f9

0800d9e0 <__lshift>:
 800d9e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9e4:	460c      	mov	r4, r1
 800d9e6:	6849      	ldr	r1, [r1, #4]
 800d9e8:	6923      	ldr	r3, [r4, #16]
 800d9ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d9ee:	68a3      	ldr	r3, [r4, #8]
 800d9f0:	4607      	mov	r7, r0
 800d9f2:	4691      	mov	r9, r2
 800d9f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d9f8:	f108 0601 	add.w	r6, r8, #1
 800d9fc:	42b3      	cmp	r3, r6
 800d9fe:	db0b      	blt.n	800da18 <__lshift+0x38>
 800da00:	4638      	mov	r0, r7
 800da02:	f7ff fddd 	bl	800d5c0 <_Balloc>
 800da06:	4605      	mov	r5, r0
 800da08:	b948      	cbnz	r0, 800da1e <__lshift+0x3e>
 800da0a:	4602      	mov	r2, r0
 800da0c:	4b28      	ldr	r3, [pc, #160]	; (800dab0 <__lshift+0xd0>)
 800da0e:	4829      	ldr	r0, [pc, #164]	; (800dab4 <__lshift+0xd4>)
 800da10:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800da14:	f000 fb7e 	bl	800e114 <__assert_func>
 800da18:	3101      	adds	r1, #1
 800da1a:	005b      	lsls	r3, r3, #1
 800da1c:	e7ee      	b.n	800d9fc <__lshift+0x1c>
 800da1e:	2300      	movs	r3, #0
 800da20:	f100 0114 	add.w	r1, r0, #20
 800da24:	f100 0210 	add.w	r2, r0, #16
 800da28:	4618      	mov	r0, r3
 800da2a:	4553      	cmp	r3, sl
 800da2c:	db33      	blt.n	800da96 <__lshift+0xb6>
 800da2e:	6920      	ldr	r0, [r4, #16]
 800da30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800da34:	f104 0314 	add.w	r3, r4, #20
 800da38:	f019 091f 	ands.w	r9, r9, #31
 800da3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800da40:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800da44:	d02b      	beq.n	800da9e <__lshift+0xbe>
 800da46:	f1c9 0e20 	rsb	lr, r9, #32
 800da4a:	468a      	mov	sl, r1
 800da4c:	2200      	movs	r2, #0
 800da4e:	6818      	ldr	r0, [r3, #0]
 800da50:	fa00 f009 	lsl.w	r0, r0, r9
 800da54:	4310      	orrs	r0, r2
 800da56:	f84a 0b04 	str.w	r0, [sl], #4
 800da5a:	f853 2b04 	ldr.w	r2, [r3], #4
 800da5e:	459c      	cmp	ip, r3
 800da60:	fa22 f20e 	lsr.w	r2, r2, lr
 800da64:	d8f3      	bhi.n	800da4e <__lshift+0x6e>
 800da66:	ebac 0304 	sub.w	r3, ip, r4
 800da6a:	3b15      	subs	r3, #21
 800da6c:	f023 0303 	bic.w	r3, r3, #3
 800da70:	3304      	adds	r3, #4
 800da72:	f104 0015 	add.w	r0, r4, #21
 800da76:	4584      	cmp	ip, r0
 800da78:	bf38      	it	cc
 800da7a:	2304      	movcc	r3, #4
 800da7c:	50ca      	str	r2, [r1, r3]
 800da7e:	b10a      	cbz	r2, 800da84 <__lshift+0xa4>
 800da80:	f108 0602 	add.w	r6, r8, #2
 800da84:	3e01      	subs	r6, #1
 800da86:	4638      	mov	r0, r7
 800da88:	612e      	str	r6, [r5, #16]
 800da8a:	4621      	mov	r1, r4
 800da8c:	f7ff fdd8 	bl	800d640 <_Bfree>
 800da90:	4628      	mov	r0, r5
 800da92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da96:	f842 0f04 	str.w	r0, [r2, #4]!
 800da9a:	3301      	adds	r3, #1
 800da9c:	e7c5      	b.n	800da2a <__lshift+0x4a>
 800da9e:	3904      	subs	r1, #4
 800daa0:	f853 2b04 	ldr.w	r2, [r3], #4
 800daa4:	f841 2f04 	str.w	r2, [r1, #4]!
 800daa8:	459c      	cmp	ip, r3
 800daaa:	d8f9      	bhi.n	800daa0 <__lshift+0xc0>
 800daac:	e7ea      	b.n	800da84 <__lshift+0xa4>
 800daae:	bf00      	nop
 800dab0:	0800e8e8 	.word	0x0800e8e8
 800dab4:	0800e8f9 	.word	0x0800e8f9

0800dab8 <__mcmp>:
 800dab8:	b530      	push	{r4, r5, lr}
 800daba:	6902      	ldr	r2, [r0, #16]
 800dabc:	690c      	ldr	r4, [r1, #16]
 800dabe:	1b12      	subs	r2, r2, r4
 800dac0:	d10e      	bne.n	800dae0 <__mcmp+0x28>
 800dac2:	f100 0314 	add.w	r3, r0, #20
 800dac6:	3114      	adds	r1, #20
 800dac8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800dacc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800dad0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800dad4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800dad8:	42a5      	cmp	r5, r4
 800dada:	d003      	beq.n	800dae4 <__mcmp+0x2c>
 800dadc:	d305      	bcc.n	800daea <__mcmp+0x32>
 800dade:	2201      	movs	r2, #1
 800dae0:	4610      	mov	r0, r2
 800dae2:	bd30      	pop	{r4, r5, pc}
 800dae4:	4283      	cmp	r3, r0
 800dae6:	d3f3      	bcc.n	800dad0 <__mcmp+0x18>
 800dae8:	e7fa      	b.n	800dae0 <__mcmp+0x28>
 800daea:	f04f 32ff 	mov.w	r2, #4294967295
 800daee:	e7f7      	b.n	800dae0 <__mcmp+0x28>

0800daf0 <__mdiff>:
 800daf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daf4:	460c      	mov	r4, r1
 800daf6:	4606      	mov	r6, r0
 800daf8:	4611      	mov	r1, r2
 800dafa:	4620      	mov	r0, r4
 800dafc:	4690      	mov	r8, r2
 800dafe:	f7ff ffdb 	bl	800dab8 <__mcmp>
 800db02:	1e05      	subs	r5, r0, #0
 800db04:	d110      	bne.n	800db28 <__mdiff+0x38>
 800db06:	4629      	mov	r1, r5
 800db08:	4630      	mov	r0, r6
 800db0a:	f7ff fd59 	bl	800d5c0 <_Balloc>
 800db0e:	b930      	cbnz	r0, 800db1e <__mdiff+0x2e>
 800db10:	4b3a      	ldr	r3, [pc, #232]	; (800dbfc <__mdiff+0x10c>)
 800db12:	4602      	mov	r2, r0
 800db14:	f240 2137 	movw	r1, #567	; 0x237
 800db18:	4839      	ldr	r0, [pc, #228]	; (800dc00 <__mdiff+0x110>)
 800db1a:	f000 fafb 	bl	800e114 <__assert_func>
 800db1e:	2301      	movs	r3, #1
 800db20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800db24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db28:	bfa4      	itt	ge
 800db2a:	4643      	movge	r3, r8
 800db2c:	46a0      	movge	r8, r4
 800db2e:	4630      	mov	r0, r6
 800db30:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800db34:	bfa6      	itte	ge
 800db36:	461c      	movge	r4, r3
 800db38:	2500      	movge	r5, #0
 800db3a:	2501      	movlt	r5, #1
 800db3c:	f7ff fd40 	bl	800d5c0 <_Balloc>
 800db40:	b920      	cbnz	r0, 800db4c <__mdiff+0x5c>
 800db42:	4b2e      	ldr	r3, [pc, #184]	; (800dbfc <__mdiff+0x10c>)
 800db44:	4602      	mov	r2, r0
 800db46:	f240 2145 	movw	r1, #581	; 0x245
 800db4a:	e7e5      	b.n	800db18 <__mdiff+0x28>
 800db4c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800db50:	6926      	ldr	r6, [r4, #16]
 800db52:	60c5      	str	r5, [r0, #12]
 800db54:	f104 0914 	add.w	r9, r4, #20
 800db58:	f108 0514 	add.w	r5, r8, #20
 800db5c:	f100 0e14 	add.w	lr, r0, #20
 800db60:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800db64:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800db68:	f108 0210 	add.w	r2, r8, #16
 800db6c:	46f2      	mov	sl, lr
 800db6e:	2100      	movs	r1, #0
 800db70:	f859 3b04 	ldr.w	r3, [r9], #4
 800db74:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800db78:	fa11 f88b 	uxtah	r8, r1, fp
 800db7c:	b299      	uxth	r1, r3
 800db7e:	0c1b      	lsrs	r3, r3, #16
 800db80:	eba8 0801 	sub.w	r8, r8, r1
 800db84:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800db88:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800db8c:	fa1f f888 	uxth.w	r8, r8
 800db90:	1419      	asrs	r1, r3, #16
 800db92:	454e      	cmp	r6, r9
 800db94:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800db98:	f84a 3b04 	str.w	r3, [sl], #4
 800db9c:	d8e8      	bhi.n	800db70 <__mdiff+0x80>
 800db9e:	1b33      	subs	r3, r6, r4
 800dba0:	3b15      	subs	r3, #21
 800dba2:	f023 0303 	bic.w	r3, r3, #3
 800dba6:	3304      	adds	r3, #4
 800dba8:	3415      	adds	r4, #21
 800dbaa:	42a6      	cmp	r6, r4
 800dbac:	bf38      	it	cc
 800dbae:	2304      	movcc	r3, #4
 800dbb0:	441d      	add	r5, r3
 800dbb2:	4473      	add	r3, lr
 800dbb4:	469e      	mov	lr, r3
 800dbb6:	462e      	mov	r6, r5
 800dbb8:	4566      	cmp	r6, ip
 800dbba:	d30e      	bcc.n	800dbda <__mdiff+0xea>
 800dbbc:	f10c 0203 	add.w	r2, ip, #3
 800dbc0:	1b52      	subs	r2, r2, r5
 800dbc2:	f022 0203 	bic.w	r2, r2, #3
 800dbc6:	3d03      	subs	r5, #3
 800dbc8:	45ac      	cmp	ip, r5
 800dbca:	bf38      	it	cc
 800dbcc:	2200      	movcc	r2, #0
 800dbce:	4413      	add	r3, r2
 800dbd0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800dbd4:	b17a      	cbz	r2, 800dbf6 <__mdiff+0x106>
 800dbd6:	6107      	str	r7, [r0, #16]
 800dbd8:	e7a4      	b.n	800db24 <__mdiff+0x34>
 800dbda:	f856 8b04 	ldr.w	r8, [r6], #4
 800dbde:	fa11 f288 	uxtah	r2, r1, r8
 800dbe2:	1414      	asrs	r4, r2, #16
 800dbe4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800dbe8:	b292      	uxth	r2, r2
 800dbea:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800dbee:	f84e 2b04 	str.w	r2, [lr], #4
 800dbf2:	1421      	asrs	r1, r4, #16
 800dbf4:	e7e0      	b.n	800dbb8 <__mdiff+0xc8>
 800dbf6:	3f01      	subs	r7, #1
 800dbf8:	e7ea      	b.n	800dbd0 <__mdiff+0xe0>
 800dbfa:	bf00      	nop
 800dbfc:	0800e8e8 	.word	0x0800e8e8
 800dc00:	0800e8f9 	.word	0x0800e8f9

0800dc04 <__d2b>:
 800dc04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dc08:	460f      	mov	r7, r1
 800dc0a:	2101      	movs	r1, #1
 800dc0c:	ec59 8b10 	vmov	r8, r9, d0
 800dc10:	4616      	mov	r6, r2
 800dc12:	f7ff fcd5 	bl	800d5c0 <_Balloc>
 800dc16:	4604      	mov	r4, r0
 800dc18:	b930      	cbnz	r0, 800dc28 <__d2b+0x24>
 800dc1a:	4602      	mov	r2, r0
 800dc1c:	4b24      	ldr	r3, [pc, #144]	; (800dcb0 <__d2b+0xac>)
 800dc1e:	4825      	ldr	r0, [pc, #148]	; (800dcb4 <__d2b+0xb0>)
 800dc20:	f240 310f 	movw	r1, #783	; 0x30f
 800dc24:	f000 fa76 	bl	800e114 <__assert_func>
 800dc28:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dc2c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dc30:	bb2d      	cbnz	r5, 800dc7e <__d2b+0x7a>
 800dc32:	9301      	str	r3, [sp, #4]
 800dc34:	f1b8 0300 	subs.w	r3, r8, #0
 800dc38:	d026      	beq.n	800dc88 <__d2b+0x84>
 800dc3a:	4668      	mov	r0, sp
 800dc3c:	9300      	str	r3, [sp, #0]
 800dc3e:	f7ff fd87 	bl	800d750 <__lo0bits>
 800dc42:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dc46:	b1e8      	cbz	r0, 800dc84 <__d2b+0x80>
 800dc48:	f1c0 0320 	rsb	r3, r0, #32
 800dc4c:	fa02 f303 	lsl.w	r3, r2, r3
 800dc50:	430b      	orrs	r3, r1
 800dc52:	40c2      	lsrs	r2, r0
 800dc54:	6163      	str	r3, [r4, #20]
 800dc56:	9201      	str	r2, [sp, #4]
 800dc58:	9b01      	ldr	r3, [sp, #4]
 800dc5a:	61a3      	str	r3, [r4, #24]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	bf14      	ite	ne
 800dc60:	2202      	movne	r2, #2
 800dc62:	2201      	moveq	r2, #1
 800dc64:	6122      	str	r2, [r4, #16]
 800dc66:	b1bd      	cbz	r5, 800dc98 <__d2b+0x94>
 800dc68:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800dc6c:	4405      	add	r5, r0
 800dc6e:	603d      	str	r5, [r7, #0]
 800dc70:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dc74:	6030      	str	r0, [r6, #0]
 800dc76:	4620      	mov	r0, r4
 800dc78:	b003      	add	sp, #12
 800dc7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dc82:	e7d6      	b.n	800dc32 <__d2b+0x2e>
 800dc84:	6161      	str	r1, [r4, #20]
 800dc86:	e7e7      	b.n	800dc58 <__d2b+0x54>
 800dc88:	a801      	add	r0, sp, #4
 800dc8a:	f7ff fd61 	bl	800d750 <__lo0bits>
 800dc8e:	9b01      	ldr	r3, [sp, #4]
 800dc90:	6163      	str	r3, [r4, #20]
 800dc92:	3020      	adds	r0, #32
 800dc94:	2201      	movs	r2, #1
 800dc96:	e7e5      	b.n	800dc64 <__d2b+0x60>
 800dc98:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dc9c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dca0:	6038      	str	r0, [r7, #0]
 800dca2:	6918      	ldr	r0, [r3, #16]
 800dca4:	f7ff fd34 	bl	800d710 <__hi0bits>
 800dca8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dcac:	e7e2      	b.n	800dc74 <__d2b+0x70>
 800dcae:	bf00      	nop
 800dcb0:	0800e8e8 	.word	0x0800e8e8
 800dcb4:	0800e8f9 	.word	0x0800e8f9

0800dcb8 <__ssputs_r>:
 800dcb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dcbc:	688e      	ldr	r6, [r1, #8]
 800dcbe:	461f      	mov	r7, r3
 800dcc0:	42be      	cmp	r6, r7
 800dcc2:	680b      	ldr	r3, [r1, #0]
 800dcc4:	4682      	mov	sl, r0
 800dcc6:	460c      	mov	r4, r1
 800dcc8:	4690      	mov	r8, r2
 800dcca:	d82c      	bhi.n	800dd26 <__ssputs_r+0x6e>
 800dccc:	898a      	ldrh	r2, [r1, #12]
 800dcce:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dcd2:	d026      	beq.n	800dd22 <__ssputs_r+0x6a>
 800dcd4:	6965      	ldr	r5, [r4, #20]
 800dcd6:	6909      	ldr	r1, [r1, #16]
 800dcd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dcdc:	eba3 0901 	sub.w	r9, r3, r1
 800dce0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dce4:	1c7b      	adds	r3, r7, #1
 800dce6:	444b      	add	r3, r9
 800dce8:	106d      	asrs	r5, r5, #1
 800dcea:	429d      	cmp	r5, r3
 800dcec:	bf38      	it	cc
 800dcee:	461d      	movcc	r5, r3
 800dcf0:	0553      	lsls	r3, r2, #21
 800dcf2:	d527      	bpl.n	800dd44 <__ssputs_r+0x8c>
 800dcf4:	4629      	mov	r1, r5
 800dcf6:	f7fd ff9d 	bl	800bc34 <_malloc_r>
 800dcfa:	4606      	mov	r6, r0
 800dcfc:	b360      	cbz	r0, 800dd58 <__ssputs_r+0xa0>
 800dcfe:	6921      	ldr	r1, [r4, #16]
 800dd00:	464a      	mov	r2, r9
 800dd02:	f000 f9f9 	bl	800e0f8 <memcpy>
 800dd06:	89a3      	ldrh	r3, [r4, #12]
 800dd08:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dd0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd10:	81a3      	strh	r3, [r4, #12]
 800dd12:	6126      	str	r6, [r4, #16]
 800dd14:	6165      	str	r5, [r4, #20]
 800dd16:	444e      	add	r6, r9
 800dd18:	eba5 0509 	sub.w	r5, r5, r9
 800dd1c:	6026      	str	r6, [r4, #0]
 800dd1e:	60a5      	str	r5, [r4, #8]
 800dd20:	463e      	mov	r6, r7
 800dd22:	42be      	cmp	r6, r7
 800dd24:	d900      	bls.n	800dd28 <__ssputs_r+0x70>
 800dd26:	463e      	mov	r6, r7
 800dd28:	6820      	ldr	r0, [r4, #0]
 800dd2a:	4632      	mov	r2, r6
 800dd2c:	4641      	mov	r1, r8
 800dd2e:	f000 f9c9 	bl	800e0c4 <memmove>
 800dd32:	68a3      	ldr	r3, [r4, #8]
 800dd34:	1b9b      	subs	r3, r3, r6
 800dd36:	60a3      	str	r3, [r4, #8]
 800dd38:	6823      	ldr	r3, [r4, #0]
 800dd3a:	4433      	add	r3, r6
 800dd3c:	6023      	str	r3, [r4, #0]
 800dd3e:	2000      	movs	r0, #0
 800dd40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd44:	462a      	mov	r2, r5
 800dd46:	f000 fa2b 	bl	800e1a0 <_realloc_r>
 800dd4a:	4606      	mov	r6, r0
 800dd4c:	2800      	cmp	r0, #0
 800dd4e:	d1e0      	bne.n	800dd12 <__ssputs_r+0x5a>
 800dd50:	6921      	ldr	r1, [r4, #16]
 800dd52:	4650      	mov	r0, sl
 800dd54:	f7ff fbe8 	bl	800d528 <_free_r>
 800dd58:	230c      	movs	r3, #12
 800dd5a:	f8ca 3000 	str.w	r3, [sl]
 800dd5e:	89a3      	ldrh	r3, [r4, #12]
 800dd60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd64:	81a3      	strh	r3, [r4, #12]
 800dd66:	f04f 30ff 	mov.w	r0, #4294967295
 800dd6a:	e7e9      	b.n	800dd40 <__ssputs_r+0x88>

0800dd6c <_svfiprintf_r>:
 800dd6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd70:	4698      	mov	r8, r3
 800dd72:	898b      	ldrh	r3, [r1, #12]
 800dd74:	061b      	lsls	r3, r3, #24
 800dd76:	b09d      	sub	sp, #116	; 0x74
 800dd78:	4607      	mov	r7, r0
 800dd7a:	460d      	mov	r5, r1
 800dd7c:	4614      	mov	r4, r2
 800dd7e:	d50e      	bpl.n	800dd9e <_svfiprintf_r+0x32>
 800dd80:	690b      	ldr	r3, [r1, #16]
 800dd82:	b963      	cbnz	r3, 800dd9e <_svfiprintf_r+0x32>
 800dd84:	2140      	movs	r1, #64	; 0x40
 800dd86:	f7fd ff55 	bl	800bc34 <_malloc_r>
 800dd8a:	6028      	str	r0, [r5, #0]
 800dd8c:	6128      	str	r0, [r5, #16]
 800dd8e:	b920      	cbnz	r0, 800dd9a <_svfiprintf_r+0x2e>
 800dd90:	230c      	movs	r3, #12
 800dd92:	603b      	str	r3, [r7, #0]
 800dd94:	f04f 30ff 	mov.w	r0, #4294967295
 800dd98:	e0d0      	b.n	800df3c <_svfiprintf_r+0x1d0>
 800dd9a:	2340      	movs	r3, #64	; 0x40
 800dd9c:	616b      	str	r3, [r5, #20]
 800dd9e:	2300      	movs	r3, #0
 800dda0:	9309      	str	r3, [sp, #36]	; 0x24
 800dda2:	2320      	movs	r3, #32
 800dda4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dda8:	f8cd 800c 	str.w	r8, [sp, #12]
 800ddac:	2330      	movs	r3, #48	; 0x30
 800ddae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800df54 <_svfiprintf_r+0x1e8>
 800ddb2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ddb6:	f04f 0901 	mov.w	r9, #1
 800ddba:	4623      	mov	r3, r4
 800ddbc:	469a      	mov	sl, r3
 800ddbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ddc2:	b10a      	cbz	r2, 800ddc8 <_svfiprintf_r+0x5c>
 800ddc4:	2a25      	cmp	r2, #37	; 0x25
 800ddc6:	d1f9      	bne.n	800ddbc <_svfiprintf_r+0x50>
 800ddc8:	ebba 0b04 	subs.w	fp, sl, r4
 800ddcc:	d00b      	beq.n	800dde6 <_svfiprintf_r+0x7a>
 800ddce:	465b      	mov	r3, fp
 800ddd0:	4622      	mov	r2, r4
 800ddd2:	4629      	mov	r1, r5
 800ddd4:	4638      	mov	r0, r7
 800ddd6:	f7ff ff6f 	bl	800dcb8 <__ssputs_r>
 800ddda:	3001      	adds	r0, #1
 800dddc:	f000 80a9 	beq.w	800df32 <_svfiprintf_r+0x1c6>
 800dde0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dde2:	445a      	add	r2, fp
 800dde4:	9209      	str	r2, [sp, #36]	; 0x24
 800dde6:	f89a 3000 	ldrb.w	r3, [sl]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	f000 80a1 	beq.w	800df32 <_svfiprintf_r+0x1c6>
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	f04f 32ff 	mov.w	r2, #4294967295
 800ddf6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ddfa:	f10a 0a01 	add.w	sl, sl, #1
 800ddfe:	9304      	str	r3, [sp, #16]
 800de00:	9307      	str	r3, [sp, #28]
 800de02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800de06:	931a      	str	r3, [sp, #104]	; 0x68
 800de08:	4654      	mov	r4, sl
 800de0a:	2205      	movs	r2, #5
 800de0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de10:	4850      	ldr	r0, [pc, #320]	; (800df54 <_svfiprintf_r+0x1e8>)
 800de12:	f7f2 fa65 	bl	80002e0 <memchr>
 800de16:	9a04      	ldr	r2, [sp, #16]
 800de18:	b9d8      	cbnz	r0, 800de52 <_svfiprintf_r+0xe6>
 800de1a:	06d0      	lsls	r0, r2, #27
 800de1c:	bf44      	itt	mi
 800de1e:	2320      	movmi	r3, #32
 800de20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de24:	0711      	lsls	r1, r2, #28
 800de26:	bf44      	itt	mi
 800de28:	232b      	movmi	r3, #43	; 0x2b
 800de2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de2e:	f89a 3000 	ldrb.w	r3, [sl]
 800de32:	2b2a      	cmp	r3, #42	; 0x2a
 800de34:	d015      	beq.n	800de62 <_svfiprintf_r+0xf6>
 800de36:	9a07      	ldr	r2, [sp, #28]
 800de38:	4654      	mov	r4, sl
 800de3a:	2000      	movs	r0, #0
 800de3c:	f04f 0c0a 	mov.w	ip, #10
 800de40:	4621      	mov	r1, r4
 800de42:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de46:	3b30      	subs	r3, #48	; 0x30
 800de48:	2b09      	cmp	r3, #9
 800de4a:	d94d      	bls.n	800dee8 <_svfiprintf_r+0x17c>
 800de4c:	b1b0      	cbz	r0, 800de7c <_svfiprintf_r+0x110>
 800de4e:	9207      	str	r2, [sp, #28]
 800de50:	e014      	b.n	800de7c <_svfiprintf_r+0x110>
 800de52:	eba0 0308 	sub.w	r3, r0, r8
 800de56:	fa09 f303 	lsl.w	r3, r9, r3
 800de5a:	4313      	orrs	r3, r2
 800de5c:	9304      	str	r3, [sp, #16]
 800de5e:	46a2      	mov	sl, r4
 800de60:	e7d2      	b.n	800de08 <_svfiprintf_r+0x9c>
 800de62:	9b03      	ldr	r3, [sp, #12]
 800de64:	1d19      	adds	r1, r3, #4
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	9103      	str	r1, [sp, #12]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	bfbb      	ittet	lt
 800de6e:	425b      	neglt	r3, r3
 800de70:	f042 0202 	orrlt.w	r2, r2, #2
 800de74:	9307      	strge	r3, [sp, #28]
 800de76:	9307      	strlt	r3, [sp, #28]
 800de78:	bfb8      	it	lt
 800de7a:	9204      	strlt	r2, [sp, #16]
 800de7c:	7823      	ldrb	r3, [r4, #0]
 800de7e:	2b2e      	cmp	r3, #46	; 0x2e
 800de80:	d10c      	bne.n	800de9c <_svfiprintf_r+0x130>
 800de82:	7863      	ldrb	r3, [r4, #1]
 800de84:	2b2a      	cmp	r3, #42	; 0x2a
 800de86:	d134      	bne.n	800def2 <_svfiprintf_r+0x186>
 800de88:	9b03      	ldr	r3, [sp, #12]
 800de8a:	1d1a      	adds	r2, r3, #4
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	9203      	str	r2, [sp, #12]
 800de90:	2b00      	cmp	r3, #0
 800de92:	bfb8      	it	lt
 800de94:	f04f 33ff 	movlt.w	r3, #4294967295
 800de98:	3402      	adds	r4, #2
 800de9a:	9305      	str	r3, [sp, #20]
 800de9c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800df64 <_svfiprintf_r+0x1f8>
 800dea0:	7821      	ldrb	r1, [r4, #0]
 800dea2:	2203      	movs	r2, #3
 800dea4:	4650      	mov	r0, sl
 800dea6:	f7f2 fa1b 	bl	80002e0 <memchr>
 800deaa:	b138      	cbz	r0, 800debc <_svfiprintf_r+0x150>
 800deac:	9b04      	ldr	r3, [sp, #16]
 800deae:	eba0 000a 	sub.w	r0, r0, sl
 800deb2:	2240      	movs	r2, #64	; 0x40
 800deb4:	4082      	lsls	r2, r0
 800deb6:	4313      	orrs	r3, r2
 800deb8:	3401      	adds	r4, #1
 800deba:	9304      	str	r3, [sp, #16]
 800debc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dec0:	4825      	ldr	r0, [pc, #148]	; (800df58 <_svfiprintf_r+0x1ec>)
 800dec2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dec6:	2206      	movs	r2, #6
 800dec8:	f7f2 fa0a 	bl	80002e0 <memchr>
 800decc:	2800      	cmp	r0, #0
 800dece:	d038      	beq.n	800df42 <_svfiprintf_r+0x1d6>
 800ded0:	4b22      	ldr	r3, [pc, #136]	; (800df5c <_svfiprintf_r+0x1f0>)
 800ded2:	bb1b      	cbnz	r3, 800df1c <_svfiprintf_r+0x1b0>
 800ded4:	9b03      	ldr	r3, [sp, #12]
 800ded6:	3307      	adds	r3, #7
 800ded8:	f023 0307 	bic.w	r3, r3, #7
 800dedc:	3308      	adds	r3, #8
 800dede:	9303      	str	r3, [sp, #12]
 800dee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dee2:	4433      	add	r3, r6
 800dee4:	9309      	str	r3, [sp, #36]	; 0x24
 800dee6:	e768      	b.n	800ddba <_svfiprintf_r+0x4e>
 800dee8:	fb0c 3202 	mla	r2, ip, r2, r3
 800deec:	460c      	mov	r4, r1
 800deee:	2001      	movs	r0, #1
 800def0:	e7a6      	b.n	800de40 <_svfiprintf_r+0xd4>
 800def2:	2300      	movs	r3, #0
 800def4:	3401      	adds	r4, #1
 800def6:	9305      	str	r3, [sp, #20]
 800def8:	4619      	mov	r1, r3
 800defa:	f04f 0c0a 	mov.w	ip, #10
 800defe:	4620      	mov	r0, r4
 800df00:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df04:	3a30      	subs	r2, #48	; 0x30
 800df06:	2a09      	cmp	r2, #9
 800df08:	d903      	bls.n	800df12 <_svfiprintf_r+0x1a6>
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d0c6      	beq.n	800de9c <_svfiprintf_r+0x130>
 800df0e:	9105      	str	r1, [sp, #20]
 800df10:	e7c4      	b.n	800de9c <_svfiprintf_r+0x130>
 800df12:	fb0c 2101 	mla	r1, ip, r1, r2
 800df16:	4604      	mov	r4, r0
 800df18:	2301      	movs	r3, #1
 800df1a:	e7f0      	b.n	800defe <_svfiprintf_r+0x192>
 800df1c:	ab03      	add	r3, sp, #12
 800df1e:	9300      	str	r3, [sp, #0]
 800df20:	462a      	mov	r2, r5
 800df22:	4b0f      	ldr	r3, [pc, #60]	; (800df60 <_svfiprintf_r+0x1f4>)
 800df24:	a904      	add	r1, sp, #16
 800df26:	4638      	mov	r0, r7
 800df28:	f7fd ffa2 	bl	800be70 <_printf_float>
 800df2c:	1c42      	adds	r2, r0, #1
 800df2e:	4606      	mov	r6, r0
 800df30:	d1d6      	bne.n	800dee0 <_svfiprintf_r+0x174>
 800df32:	89ab      	ldrh	r3, [r5, #12]
 800df34:	065b      	lsls	r3, r3, #25
 800df36:	f53f af2d 	bmi.w	800dd94 <_svfiprintf_r+0x28>
 800df3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800df3c:	b01d      	add	sp, #116	; 0x74
 800df3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df42:	ab03      	add	r3, sp, #12
 800df44:	9300      	str	r3, [sp, #0]
 800df46:	462a      	mov	r2, r5
 800df48:	4b05      	ldr	r3, [pc, #20]	; (800df60 <_svfiprintf_r+0x1f4>)
 800df4a:	a904      	add	r1, sp, #16
 800df4c:	4638      	mov	r0, r7
 800df4e:	f7fe fa17 	bl	800c380 <_printf_i>
 800df52:	e7eb      	b.n	800df2c <_svfiprintf_r+0x1c0>
 800df54:	0800ea54 	.word	0x0800ea54
 800df58:	0800ea5e 	.word	0x0800ea5e
 800df5c:	0800be71 	.word	0x0800be71
 800df60:	0800dcb9 	.word	0x0800dcb9
 800df64:	0800ea5a 	.word	0x0800ea5a

0800df68 <__sflush_r>:
 800df68:	898a      	ldrh	r2, [r1, #12]
 800df6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df6e:	4605      	mov	r5, r0
 800df70:	0710      	lsls	r0, r2, #28
 800df72:	460c      	mov	r4, r1
 800df74:	d458      	bmi.n	800e028 <__sflush_r+0xc0>
 800df76:	684b      	ldr	r3, [r1, #4]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	dc05      	bgt.n	800df88 <__sflush_r+0x20>
 800df7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800df7e:	2b00      	cmp	r3, #0
 800df80:	dc02      	bgt.n	800df88 <__sflush_r+0x20>
 800df82:	2000      	movs	r0, #0
 800df84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800df8a:	2e00      	cmp	r6, #0
 800df8c:	d0f9      	beq.n	800df82 <__sflush_r+0x1a>
 800df8e:	2300      	movs	r3, #0
 800df90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800df94:	682f      	ldr	r7, [r5, #0]
 800df96:	6a21      	ldr	r1, [r4, #32]
 800df98:	602b      	str	r3, [r5, #0]
 800df9a:	d032      	beq.n	800e002 <__sflush_r+0x9a>
 800df9c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800df9e:	89a3      	ldrh	r3, [r4, #12]
 800dfa0:	075a      	lsls	r2, r3, #29
 800dfa2:	d505      	bpl.n	800dfb0 <__sflush_r+0x48>
 800dfa4:	6863      	ldr	r3, [r4, #4]
 800dfa6:	1ac0      	subs	r0, r0, r3
 800dfa8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dfaa:	b10b      	cbz	r3, 800dfb0 <__sflush_r+0x48>
 800dfac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dfae:	1ac0      	subs	r0, r0, r3
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	4602      	mov	r2, r0
 800dfb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dfb6:	6a21      	ldr	r1, [r4, #32]
 800dfb8:	4628      	mov	r0, r5
 800dfba:	47b0      	blx	r6
 800dfbc:	1c43      	adds	r3, r0, #1
 800dfbe:	89a3      	ldrh	r3, [r4, #12]
 800dfc0:	d106      	bne.n	800dfd0 <__sflush_r+0x68>
 800dfc2:	6829      	ldr	r1, [r5, #0]
 800dfc4:	291d      	cmp	r1, #29
 800dfc6:	d82b      	bhi.n	800e020 <__sflush_r+0xb8>
 800dfc8:	4a29      	ldr	r2, [pc, #164]	; (800e070 <__sflush_r+0x108>)
 800dfca:	410a      	asrs	r2, r1
 800dfcc:	07d6      	lsls	r6, r2, #31
 800dfce:	d427      	bmi.n	800e020 <__sflush_r+0xb8>
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	6062      	str	r2, [r4, #4]
 800dfd4:	04d9      	lsls	r1, r3, #19
 800dfd6:	6922      	ldr	r2, [r4, #16]
 800dfd8:	6022      	str	r2, [r4, #0]
 800dfda:	d504      	bpl.n	800dfe6 <__sflush_r+0x7e>
 800dfdc:	1c42      	adds	r2, r0, #1
 800dfde:	d101      	bne.n	800dfe4 <__sflush_r+0x7c>
 800dfe0:	682b      	ldr	r3, [r5, #0]
 800dfe2:	b903      	cbnz	r3, 800dfe6 <__sflush_r+0x7e>
 800dfe4:	6560      	str	r0, [r4, #84]	; 0x54
 800dfe6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dfe8:	602f      	str	r7, [r5, #0]
 800dfea:	2900      	cmp	r1, #0
 800dfec:	d0c9      	beq.n	800df82 <__sflush_r+0x1a>
 800dfee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dff2:	4299      	cmp	r1, r3
 800dff4:	d002      	beq.n	800dffc <__sflush_r+0x94>
 800dff6:	4628      	mov	r0, r5
 800dff8:	f7ff fa96 	bl	800d528 <_free_r>
 800dffc:	2000      	movs	r0, #0
 800dffe:	6360      	str	r0, [r4, #52]	; 0x34
 800e000:	e7c0      	b.n	800df84 <__sflush_r+0x1c>
 800e002:	2301      	movs	r3, #1
 800e004:	4628      	mov	r0, r5
 800e006:	47b0      	blx	r6
 800e008:	1c41      	adds	r1, r0, #1
 800e00a:	d1c8      	bne.n	800df9e <__sflush_r+0x36>
 800e00c:	682b      	ldr	r3, [r5, #0]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d0c5      	beq.n	800df9e <__sflush_r+0x36>
 800e012:	2b1d      	cmp	r3, #29
 800e014:	d001      	beq.n	800e01a <__sflush_r+0xb2>
 800e016:	2b16      	cmp	r3, #22
 800e018:	d101      	bne.n	800e01e <__sflush_r+0xb6>
 800e01a:	602f      	str	r7, [r5, #0]
 800e01c:	e7b1      	b.n	800df82 <__sflush_r+0x1a>
 800e01e:	89a3      	ldrh	r3, [r4, #12]
 800e020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e024:	81a3      	strh	r3, [r4, #12]
 800e026:	e7ad      	b.n	800df84 <__sflush_r+0x1c>
 800e028:	690f      	ldr	r7, [r1, #16]
 800e02a:	2f00      	cmp	r7, #0
 800e02c:	d0a9      	beq.n	800df82 <__sflush_r+0x1a>
 800e02e:	0793      	lsls	r3, r2, #30
 800e030:	680e      	ldr	r6, [r1, #0]
 800e032:	bf08      	it	eq
 800e034:	694b      	ldreq	r3, [r1, #20]
 800e036:	600f      	str	r7, [r1, #0]
 800e038:	bf18      	it	ne
 800e03a:	2300      	movne	r3, #0
 800e03c:	eba6 0807 	sub.w	r8, r6, r7
 800e040:	608b      	str	r3, [r1, #8]
 800e042:	f1b8 0f00 	cmp.w	r8, #0
 800e046:	dd9c      	ble.n	800df82 <__sflush_r+0x1a>
 800e048:	6a21      	ldr	r1, [r4, #32]
 800e04a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e04c:	4643      	mov	r3, r8
 800e04e:	463a      	mov	r2, r7
 800e050:	4628      	mov	r0, r5
 800e052:	47b0      	blx	r6
 800e054:	2800      	cmp	r0, #0
 800e056:	dc06      	bgt.n	800e066 <__sflush_r+0xfe>
 800e058:	89a3      	ldrh	r3, [r4, #12]
 800e05a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e05e:	81a3      	strh	r3, [r4, #12]
 800e060:	f04f 30ff 	mov.w	r0, #4294967295
 800e064:	e78e      	b.n	800df84 <__sflush_r+0x1c>
 800e066:	4407      	add	r7, r0
 800e068:	eba8 0800 	sub.w	r8, r8, r0
 800e06c:	e7e9      	b.n	800e042 <__sflush_r+0xda>
 800e06e:	bf00      	nop
 800e070:	dfbffffe 	.word	0xdfbffffe

0800e074 <_fflush_r>:
 800e074:	b538      	push	{r3, r4, r5, lr}
 800e076:	690b      	ldr	r3, [r1, #16]
 800e078:	4605      	mov	r5, r0
 800e07a:	460c      	mov	r4, r1
 800e07c:	b913      	cbnz	r3, 800e084 <_fflush_r+0x10>
 800e07e:	2500      	movs	r5, #0
 800e080:	4628      	mov	r0, r5
 800e082:	bd38      	pop	{r3, r4, r5, pc}
 800e084:	b118      	cbz	r0, 800e08e <_fflush_r+0x1a>
 800e086:	6a03      	ldr	r3, [r0, #32]
 800e088:	b90b      	cbnz	r3, 800e08e <_fflush_r+0x1a>
 800e08a:	f7fe fb27 	bl	800c6dc <__sinit>
 800e08e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d0f3      	beq.n	800e07e <_fflush_r+0xa>
 800e096:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e098:	07d0      	lsls	r0, r2, #31
 800e09a:	d404      	bmi.n	800e0a6 <_fflush_r+0x32>
 800e09c:	0599      	lsls	r1, r3, #22
 800e09e:	d402      	bmi.n	800e0a6 <_fflush_r+0x32>
 800e0a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e0a2:	f7fe fc42 	bl	800c92a <__retarget_lock_acquire_recursive>
 800e0a6:	4628      	mov	r0, r5
 800e0a8:	4621      	mov	r1, r4
 800e0aa:	f7ff ff5d 	bl	800df68 <__sflush_r>
 800e0ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e0b0:	07da      	lsls	r2, r3, #31
 800e0b2:	4605      	mov	r5, r0
 800e0b4:	d4e4      	bmi.n	800e080 <_fflush_r+0xc>
 800e0b6:	89a3      	ldrh	r3, [r4, #12]
 800e0b8:	059b      	lsls	r3, r3, #22
 800e0ba:	d4e1      	bmi.n	800e080 <_fflush_r+0xc>
 800e0bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e0be:	f7fe fc35 	bl	800c92c <__retarget_lock_release_recursive>
 800e0c2:	e7dd      	b.n	800e080 <_fflush_r+0xc>

0800e0c4 <memmove>:
 800e0c4:	4288      	cmp	r0, r1
 800e0c6:	b510      	push	{r4, lr}
 800e0c8:	eb01 0402 	add.w	r4, r1, r2
 800e0cc:	d902      	bls.n	800e0d4 <memmove+0x10>
 800e0ce:	4284      	cmp	r4, r0
 800e0d0:	4623      	mov	r3, r4
 800e0d2:	d807      	bhi.n	800e0e4 <memmove+0x20>
 800e0d4:	1e43      	subs	r3, r0, #1
 800e0d6:	42a1      	cmp	r1, r4
 800e0d8:	d008      	beq.n	800e0ec <memmove+0x28>
 800e0da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e0de:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e0e2:	e7f8      	b.n	800e0d6 <memmove+0x12>
 800e0e4:	4402      	add	r2, r0
 800e0e6:	4601      	mov	r1, r0
 800e0e8:	428a      	cmp	r2, r1
 800e0ea:	d100      	bne.n	800e0ee <memmove+0x2a>
 800e0ec:	bd10      	pop	{r4, pc}
 800e0ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e0f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e0f6:	e7f7      	b.n	800e0e8 <memmove+0x24>

0800e0f8 <memcpy>:
 800e0f8:	440a      	add	r2, r1
 800e0fa:	4291      	cmp	r1, r2
 800e0fc:	f100 33ff 	add.w	r3, r0, #4294967295
 800e100:	d100      	bne.n	800e104 <memcpy+0xc>
 800e102:	4770      	bx	lr
 800e104:	b510      	push	{r4, lr}
 800e106:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e10a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e10e:	4291      	cmp	r1, r2
 800e110:	d1f9      	bne.n	800e106 <memcpy+0xe>
 800e112:	bd10      	pop	{r4, pc}

0800e114 <__assert_func>:
 800e114:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e116:	4614      	mov	r4, r2
 800e118:	461a      	mov	r2, r3
 800e11a:	4b09      	ldr	r3, [pc, #36]	; (800e140 <__assert_func+0x2c>)
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	4605      	mov	r5, r0
 800e120:	68d8      	ldr	r0, [r3, #12]
 800e122:	b14c      	cbz	r4, 800e138 <__assert_func+0x24>
 800e124:	4b07      	ldr	r3, [pc, #28]	; (800e144 <__assert_func+0x30>)
 800e126:	9100      	str	r1, [sp, #0]
 800e128:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e12c:	4906      	ldr	r1, [pc, #24]	; (800e148 <__assert_func+0x34>)
 800e12e:	462b      	mov	r3, r5
 800e130:	f000 f872 	bl	800e218 <fiprintf>
 800e134:	f000 f882 	bl	800e23c <abort>
 800e138:	4b04      	ldr	r3, [pc, #16]	; (800e14c <__assert_func+0x38>)
 800e13a:	461c      	mov	r4, r3
 800e13c:	e7f3      	b.n	800e126 <__assert_func+0x12>
 800e13e:	bf00      	nop
 800e140:	2400019c 	.word	0x2400019c
 800e144:	0800ea6f 	.word	0x0800ea6f
 800e148:	0800ea7c 	.word	0x0800ea7c
 800e14c:	0800eaaa 	.word	0x0800eaaa

0800e150 <_calloc_r>:
 800e150:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e152:	fba1 2402 	umull	r2, r4, r1, r2
 800e156:	b94c      	cbnz	r4, 800e16c <_calloc_r+0x1c>
 800e158:	4611      	mov	r1, r2
 800e15a:	9201      	str	r2, [sp, #4]
 800e15c:	f7fd fd6a 	bl	800bc34 <_malloc_r>
 800e160:	9a01      	ldr	r2, [sp, #4]
 800e162:	4605      	mov	r5, r0
 800e164:	b930      	cbnz	r0, 800e174 <_calloc_r+0x24>
 800e166:	4628      	mov	r0, r5
 800e168:	b003      	add	sp, #12
 800e16a:	bd30      	pop	{r4, r5, pc}
 800e16c:	220c      	movs	r2, #12
 800e16e:	6002      	str	r2, [r0, #0]
 800e170:	2500      	movs	r5, #0
 800e172:	e7f8      	b.n	800e166 <_calloc_r+0x16>
 800e174:	4621      	mov	r1, r4
 800e176:	f7fe fb4a 	bl	800c80e <memset>
 800e17a:	e7f4      	b.n	800e166 <_calloc_r+0x16>

0800e17c <__ascii_mbtowc>:
 800e17c:	b082      	sub	sp, #8
 800e17e:	b901      	cbnz	r1, 800e182 <__ascii_mbtowc+0x6>
 800e180:	a901      	add	r1, sp, #4
 800e182:	b142      	cbz	r2, 800e196 <__ascii_mbtowc+0x1a>
 800e184:	b14b      	cbz	r3, 800e19a <__ascii_mbtowc+0x1e>
 800e186:	7813      	ldrb	r3, [r2, #0]
 800e188:	600b      	str	r3, [r1, #0]
 800e18a:	7812      	ldrb	r2, [r2, #0]
 800e18c:	1e10      	subs	r0, r2, #0
 800e18e:	bf18      	it	ne
 800e190:	2001      	movne	r0, #1
 800e192:	b002      	add	sp, #8
 800e194:	4770      	bx	lr
 800e196:	4610      	mov	r0, r2
 800e198:	e7fb      	b.n	800e192 <__ascii_mbtowc+0x16>
 800e19a:	f06f 0001 	mvn.w	r0, #1
 800e19e:	e7f8      	b.n	800e192 <__ascii_mbtowc+0x16>

0800e1a0 <_realloc_r>:
 800e1a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1a4:	4680      	mov	r8, r0
 800e1a6:	4614      	mov	r4, r2
 800e1a8:	460e      	mov	r6, r1
 800e1aa:	b921      	cbnz	r1, 800e1b6 <_realloc_r+0x16>
 800e1ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e1b0:	4611      	mov	r1, r2
 800e1b2:	f7fd bd3f 	b.w	800bc34 <_malloc_r>
 800e1b6:	b92a      	cbnz	r2, 800e1c4 <_realloc_r+0x24>
 800e1b8:	f7ff f9b6 	bl	800d528 <_free_r>
 800e1bc:	4625      	mov	r5, r4
 800e1be:	4628      	mov	r0, r5
 800e1c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1c4:	f000 f841 	bl	800e24a <_malloc_usable_size_r>
 800e1c8:	4284      	cmp	r4, r0
 800e1ca:	4607      	mov	r7, r0
 800e1cc:	d802      	bhi.n	800e1d4 <_realloc_r+0x34>
 800e1ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e1d2:	d812      	bhi.n	800e1fa <_realloc_r+0x5a>
 800e1d4:	4621      	mov	r1, r4
 800e1d6:	4640      	mov	r0, r8
 800e1d8:	f7fd fd2c 	bl	800bc34 <_malloc_r>
 800e1dc:	4605      	mov	r5, r0
 800e1de:	2800      	cmp	r0, #0
 800e1e0:	d0ed      	beq.n	800e1be <_realloc_r+0x1e>
 800e1e2:	42bc      	cmp	r4, r7
 800e1e4:	4622      	mov	r2, r4
 800e1e6:	4631      	mov	r1, r6
 800e1e8:	bf28      	it	cs
 800e1ea:	463a      	movcs	r2, r7
 800e1ec:	f7ff ff84 	bl	800e0f8 <memcpy>
 800e1f0:	4631      	mov	r1, r6
 800e1f2:	4640      	mov	r0, r8
 800e1f4:	f7ff f998 	bl	800d528 <_free_r>
 800e1f8:	e7e1      	b.n	800e1be <_realloc_r+0x1e>
 800e1fa:	4635      	mov	r5, r6
 800e1fc:	e7df      	b.n	800e1be <_realloc_r+0x1e>

0800e1fe <__ascii_wctomb>:
 800e1fe:	b149      	cbz	r1, 800e214 <__ascii_wctomb+0x16>
 800e200:	2aff      	cmp	r2, #255	; 0xff
 800e202:	bf85      	ittet	hi
 800e204:	238a      	movhi	r3, #138	; 0x8a
 800e206:	6003      	strhi	r3, [r0, #0]
 800e208:	700a      	strbls	r2, [r1, #0]
 800e20a:	f04f 30ff 	movhi.w	r0, #4294967295
 800e20e:	bf98      	it	ls
 800e210:	2001      	movls	r0, #1
 800e212:	4770      	bx	lr
 800e214:	4608      	mov	r0, r1
 800e216:	4770      	bx	lr

0800e218 <fiprintf>:
 800e218:	b40e      	push	{r1, r2, r3}
 800e21a:	b503      	push	{r0, r1, lr}
 800e21c:	4601      	mov	r1, r0
 800e21e:	ab03      	add	r3, sp, #12
 800e220:	4805      	ldr	r0, [pc, #20]	; (800e238 <fiprintf+0x20>)
 800e222:	f853 2b04 	ldr.w	r2, [r3], #4
 800e226:	6800      	ldr	r0, [r0, #0]
 800e228:	9301      	str	r3, [sp, #4]
 800e22a:	f000 f83f 	bl	800e2ac <_vfiprintf_r>
 800e22e:	b002      	add	sp, #8
 800e230:	f85d eb04 	ldr.w	lr, [sp], #4
 800e234:	b003      	add	sp, #12
 800e236:	4770      	bx	lr
 800e238:	2400019c 	.word	0x2400019c

0800e23c <abort>:
 800e23c:	b508      	push	{r3, lr}
 800e23e:	2006      	movs	r0, #6
 800e240:	f000 fa0c 	bl	800e65c <raise>
 800e244:	2001      	movs	r0, #1
 800e246:	f7f2 fee5 	bl	8001014 <_exit>

0800e24a <_malloc_usable_size_r>:
 800e24a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e24e:	1f18      	subs	r0, r3, #4
 800e250:	2b00      	cmp	r3, #0
 800e252:	bfbc      	itt	lt
 800e254:	580b      	ldrlt	r3, [r1, r0]
 800e256:	18c0      	addlt	r0, r0, r3
 800e258:	4770      	bx	lr

0800e25a <__sfputc_r>:
 800e25a:	6893      	ldr	r3, [r2, #8]
 800e25c:	3b01      	subs	r3, #1
 800e25e:	2b00      	cmp	r3, #0
 800e260:	b410      	push	{r4}
 800e262:	6093      	str	r3, [r2, #8]
 800e264:	da08      	bge.n	800e278 <__sfputc_r+0x1e>
 800e266:	6994      	ldr	r4, [r2, #24]
 800e268:	42a3      	cmp	r3, r4
 800e26a:	db01      	blt.n	800e270 <__sfputc_r+0x16>
 800e26c:	290a      	cmp	r1, #10
 800e26e:	d103      	bne.n	800e278 <__sfputc_r+0x1e>
 800e270:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e274:	f000 b934 	b.w	800e4e0 <__swbuf_r>
 800e278:	6813      	ldr	r3, [r2, #0]
 800e27a:	1c58      	adds	r0, r3, #1
 800e27c:	6010      	str	r0, [r2, #0]
 800e27e:	7019      	strb	r1, [r3, #0]
 800e280:	4608      	mov	r0, r1
 800e282:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e286:	4770      	bx	lr

0800e288 <__sfputs_r>:
 800e288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e28a:	4606      	mov	r6, r0
 800e28c:	460f      	mov	r7, r1
 800e28e:	4614      	mov	r4, r2
 800e290:	18d5      	adds	r5, r2, r3
 800e292:	42ac      	cmp	r4, r5
 800e294:	d101      	bne.n	800e29a <__sfputs_r+0x12>
 800e296:	2000      	movs	r0, #0
 800e298:	e007      	b.n	800e2aa <__sfputs_r+0x22>
 800e29a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e29e:	463a      	mov	r2, r7
 800e2a0:	4630      	mov	r0, r6
 800e2a2:	f7ff ffda 	bl	800e25a <__sfputc_r>
 800e2a6:	1c43      	adds	r3, r0, #1
 800e2a8:	d1f3      	bne.n	800e292 <__sfputs_r+0xa>
 800e2aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e2ac <_vfiprintf_r>:
 800e2ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2b0:	460d      	mov	r5, r1
 800e2b2:	b09d      	sub	sp, #116	; 0x74
 800e2b4:	4614      	mov	r4, r2
 800e2b6:	4698      	mov	r8, r3
 800e2b8:	4606      	mov	r6, r0
 800e2ba:	b118      	cbz	r0, 800e2c4 <_vfiprintf_r+0x18>
 800e2bc:	6a03      	ldr	r3, [r0, #32]
 800e2be:	b90b      	cbnz	r3, 800e2c4 <_vfiprintf_r+0x18>
 800e2c0:	f7fe fa0c 	bl	800c6dc <__sinit>
 800e2c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e2c6:	07d9      	lsls	r1, r3, #31
 800e2c8:	d405      	bmi.n	800e2d6 <_vfiprintf_r+0x2a>
 800e2ca:	89ab      	ldrh	r3, [r5, #12]
 800e2cc:	059a      	lsls	r2, r3, #22
 800e2ce:	d402      	bmi.n	800e2d6 <_vfiprintf_r+0x2a>
 800e2d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e2d2:	f7fe fb2a 	bl	800c92a <__retarget_lock_acquire_recursive>
 800e2d6:	89ab      	ldrh	r3, [r5, #12]
 800e2d8:	071b      	lsls	r3, r3, #28
 800e2da:	d501      	bpl.n	800e2e0 <_vfiprintf_r+0x34>
 800e2dc:	692b      	ldr	r3, [r5, #16]
 800e2de:	b99b      	cbnz	r3, 800e308 <_vfiprintf_r+0x5c>
 800e2e0:	4629      	mov	r1, r5
 800e2e2:	4630      	mov	r0, r6
 800e2e4:	f000 f93a 	bl	800e55c <__swsetup_r>
 800e2e8:	b170      	cbz	r0, 800e308 <_vfiprintf_r+0x5c>
 800e2ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e2ec:	07dc      	lsls	r4, r3, #31
 800e2ee:	d504      	bpl.n	800e2fa <_vfiprintf_r+0x4e>
 800e2f0:	f04f 30ff 	mov.w	r0, #4294967295
 800e2f4:	b01d      	add	sp, #116	; 0x74
 800e2f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2fa:	89ab      	ldrh	r3, [r5, #12]
 800e2fc:	0598      	lsls	r0, r3, #22
 800e2fe:	d4f7      	bmi.n	800e2f0 <_vfiprintf_r+0x44>
 800e300:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e302:	f7fe fb13 	bl	800c92c <__retarget_lock_release_recursive>
 800e306:	e7f3      	b.n	800e2f0 <_vfiprintf_r+0x44>
 800e308:	2300      	movs	r3, #0
 800e30a:	9309      	str	r3, [sp, #36]	; 0x24
 800e30c:	2320      	movs	r3, #32
 800e30e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e312:	f8cd 800c 	str.w	r8, [sp, #12]
 800e316:	2330      	movs	r3, #48	; 0x30
 800e318:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e4cc <_vfiprintf_r+0x220>
 800e31c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e320:	f04f 0901 	mov.w	r9, #1
 800e324:	4623      	mov	r3, r4
 800e326:	469a      	mov	sl, r3
 800e328:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e32c:	b10a      	cbz	r2, 800e332 <_vfiprintf_r+0x86>
 800e32e:	2a25      	cmp	r2, #37	; 0x25
 800e330:	d1f9      	bne.n	800e326 <_vfiprintf_r+0x7a>
 800e332:	ebba 0b04 	subs.w	fp, sl, r4
 800e336:	d00b      	beq.n	800e350 <_vfiprintf_r+0xa4>
 800e338:	465b      	mov	r3, fp
 800e33a:	4622      	mov	r2, r4
 800e33c:	4629      	mov	r1, r5
 800e33e:	4630      	mov	r0, r6
 800e340:	f7ff ffa2 	bl	800e288 <__sfputs_r>
 800e344:	3001      	adds	r0, #1
 800e346:	f000 80a9 	beq.w	800e49c <_vfiprintf_r+0x1f0>
 800e34a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e34c:	445a      	add	r2, fp
 800e34e:	9209      	str	r2, [sp, #36]	; 0x24
 800e350:	f89a 3000 	ldrb.w	r3, [sl]
 800e354:	2b00      	cmp	r3, #0
 800e356:	f000 80a1 	beq.w	800e49c <_vfiprintf_r+0x1f0>
 800e35a:	2300      	movs	r3, #0
 800e35c:	f04f 32ff 	mov.w	r2, #4294967295
 800e360:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e364:	f10a 0a01 	add.w	sl, sl, #1
 800e368:	9304      	str	r3, [sp, #16]
 800e36a:	9307      	str	r3, [sp, #28]
 800e36c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e370:	931a      	str	r3, [sp, #104]	; 0x68
 800e372:	4654      	mov	r4, sl
 800e374:	2205      	movs	r2, #5
 800e376:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e37a:	4854      	ldr	r0, [pc, #336]	; (800e4cc <_vfiprintf_r+0x220>)
 800e37c:	f7f1 ffb0 	bl	80002e0 <memchr>
 800e380:	9a04      	ldr	r2, [sp, #16]
 800e382:	b9d8      	cbnz	r0, 800e3bc <_vfiprintf_r+0x110>
 800e384:	06d1      	lsls	r1, r2, #27
 800e386:	bf44      	itt	mi
 800e388:	2320      	movmi	r3, #32
 800e38a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e38e:	0713      	lsls	r3, r2, #28
 800e390:	bf44      	itt	mi
 800e392:	232b      	movmi	r3, #43	; 0x2b
 800e394:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e398:	f89a 3000 	ldrb.w	r3, [sl]
 800e39c:	2b2a      	cmp	r3, #42	; 0x2a
 800e39e:	d015      	beq.n	800e3cc <_vfiprintf_r+0x120>
 800e3a0:	9a07      	ldr	r2, [sp, #28]
 800e3a2:	4654      	mov	r4, sl
 800e3a4:	2000      	movs	r0, #0
 800e3a6:	f04f 0c0a 	mov.w	ip, #10
 800e3aa:	4621      	mov	r1, r4
 800e3ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e3b0:	3b30      	subs	r3, #48	; 0x30
 800e3b2:	2b09      	cmp	r3, #9
 800e3b4:	d94d      	bls.n	800e452 <_vfiprintf_r+0x1a6>
 800e3b6:	b1b0      	cbz	r0, 800e3e6 <_vfiprintf_r+0x13a>
 800e3b8:	9207      	str	r2, [sp, #28]
 800e3ba:	e014      	b.n	800e3e6 <_vfiprintf_r+0x13a>
 800e3bc:	eba0 0308 	sub.w	r3, r0, r8
 800e3c0:	fa09 f303 	lsl.w	r3, r9, r3
 800e3c4:	4313      	orrs	r3, r2
 800e3c6:	9304      	str	r3, [sp, #16]
 800e3c8:	46a2      	mov	sl, r4
 800e3ca:	e7d2      	b.n	800e372 <_vfiprintf_r+0xc6>
 800e3cc:	9b03      	ldr	r3, [sp, #12]
 800e3ce:	1d19      	adds	r1, r3, #4
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	9103      	str	r1, [sp, #12]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	bfbb      	ittet	lt
 800e3d8:	425b      	neglt	r3, r3
 800e3da:	f042 0202 	orrlt.w	r2, r2, #2
 800e3de:	9307      	strge	r3, [sp, #28]
 800e3e0:	9307      	strlt	r3, [sp, #28]
 800e3e2:	bfb8      	it	lt
 800e3e4:	9204      	strlt	r2, [sp, #16]
 800e3e6:	7823      	ldrb	r3, [r4, #0]
 800e3e8:	2b2e      	cmp	r3, #46	; 0x2e
 800e3ea:	d10c      	bne.n	800e406 <_vfiprintf_r+0x15a>
 800e3ec:	7863      	ldrb	r3, [r4, #1]
 800e3ee:	2b2a      	cmp	r3, #42	; 0x2a
 800e3f0:	d134      	bne.n	800e45c <_vfiprintf_r+0x1b0>
 800e3f2:	9b03      	ldr	r3, [sp, #12]
 800e3f4:	1d1a      	adds	r2, r3, #4
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	9203      	str	r2, [sp, #12]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	bfb8      	it	lt
 800e3fe:	f04f 33ff 	movlt.w	r3, #4294967295
 800e402:	3402      	adds	r4, #2
 800e404:	9305      	str	r3, [sp, #20]
 800e406:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e4dc <_vfiprintf_r+0x230>
 800e40a:	7821      	ldrb	r1, [r4, #0]
 800e40c:	2203      	movs	r2, #3
 800e40e:	4650      	mov	r0, sl
 800e410:	f7f1 ff66 	bl	80002e0 <memchr>
 800e414:	b138      	cbz	r0, 800e426 <_vfiprintf_r+0x17a>
 800e416:	9b04      	ldr	r3, [sp, #16]
 800e418:	eba0 000a 	sub.w	r0, r0, sl
 800e41c:	2240      	movs	r2, #64	; 0x40
 800e41e:	4082      	lsls	r2, r0
 800e420:	4313      	orrs	r3, r2
 800e422:	3401      	adds	r4, #1
 800e424:	9304      	str	r3, [sp, #16]
 800e426:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e42a:	4829      	ldr	r0, [pc, #164]	; (800e4d0 <_vfiprintf_r+0x224>)
 800e42c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e430:	2206      	movs	r2, #6
 800e432:	f7f1 ff55 	bl	80002e0 <memchr>
 800e436:	2800      	cmp	r0, #0
 800e438:	d03f      	beq.n	800e4ba <_vfiprintf_r+0x20e>
 800e43a:	4b26      	ldr	r3, [pc, #152]	; (800e4d4 <_vfiprintf_r+0x228>)
 800e43c:	bb1b      	cbnz	r3, 800e486 <_vfiprintf_r+0x1da>
 800e43e:	9b03      	ldr	r3, [sp, #12]
 800e440:	3307      	adds	r3, #7
 800e442:	f023 0307 	bic.w	r3, r3, #7
 800e446:	3308      	adds	r3, #8
 800e448:	9303      	str	r3, [sp, #12]
 800e44a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e44c:	443b      	add	r3, r7
 800e44e:	9309      	str	r3, [sp, #36]	; 0x24
 800e450:	e768      	b.n	800e324 <_vfiprintf_r+0x78>
 800e452:	fb0c 3202 	mla	r2, ip, r2, r3
 800e456:	460c      	mov	r4, r1
 800e458:	2001      	movs	r0, #1
 800e45a:	e7a6      	b.n	800e3aa <_vfiprintf_r+0xfe>
 800e45c:	2300      	movs	r3, #0
 800e45e:	3401      	adds	r4, #1
 800e460:	9305      	str	r3, [sp, #20]
 800e462:	4619      	mov	r1, r3
 800e464:	f04f 0c0a 	mov.w	ip, #10
 800e468:	4620      	mov	r0, r4
 800e46a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e46e:	3a30      	subs	r2, #48	; 0x30
 800e470:	2a09      	cmp	r2, #9
 800e472:	d903      	bls.n	800e47c <_vfiprintf_r+0x1d0>
 800e474:	2b00      	cmp	r3, #0
 800e476:	d0c6      	beq.n	800e406 <_vfiprintf_r+0x15a>
 800e478:	9105      	str	r1, [sp, #20]
 800e47a:	e7c4      	b.n	800e406 <_vfiprintf_r+0x15a>
 800e47c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e480:	4604      	mov	r4, r0
 800e482:	2301      	movs	r3, #1
 800e484:	e7f0      	b.n	800e468 <_vfiprintf_r+0x1bc>
 800e486:	ab03      	add	r3, sp, #12
 800e488:	9300      	str	r3, [sp, #0]
 800e48a:	462a      	mov	r2, r5
 800e48c:	4b12      	ldr	r3, [pc, #72]	; (800e4d8 <_vfiprintf_r+0x22c>)
 800e48e:	a904      	add	r1, sp, #16
 800e490:	4630      	mov	r0, r6
 800e492:	f7fd fced 	bl	800be70 <_printf_float>
 800e496:	4607      	mov	r7, r0
 800e498:	1c78      	adds	r0, r7, #1
 800e49a:	d1d6      	bne.n	800e44a <_vfiprintf_r+0x19e>
 800e49c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e49e:	07d9      	lsls	r1, r3, #31
 800e4a0:	d405      	bmi.n	800e4ae <_vfiprintf_r+0x202>
 800e4a2:	89ab      	ldrh	r3, [r5, #12]
 800e4a4:	059a      	lsls	r2, r3, #22
 800e4a6:	d402      	bmi.n	800e4ae <_vfiprintf_r+0x202>
 800e4a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e4aa:	f7fe fa3f 	bl	800c92c <__retarget_lock_release_recursive>
 800e4ae:	89ab      	ldrh	r3, [r5, #12]
 800e4b0:	065b      	lsls	r3, r3, #25
 800e4b2:	f53f af1d 	bmi.w	800e2f0 <_vfiprintf_r+0x44>
 800e4b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e4b8:	e71c      	b.n	800e2f4 <_vfiprintf_r+0x48>
 800e4ba:	ab03      	add	r3, sp, #12
 800e4bc:	9300      	str	r3, [sp, #0]
 800e4be:	462a      	mov	r2, r5
 800e4c0:	4b05      	ldr	r3, [pc, #20]	; (800e4d8 <_vfiprintf_r+0x22c>)
 800e4c2:	a904      	add	r1, sp, #16
 800e4c4:	4630      	mov	r0, r6
 800e4c6:	f7fd ff5b 	bl	800c380 <_printf_i>
 800e4ca:	e7e4      	b.n	800e496 <_vfiprintf_r+0x1ea>
 800e4cc:	0800ea54 	.word	0x0800ea54
 800e4d0:	0800ea5e 	.word	0x0800ea5e
 800e4d4:	0800be71 	.word	0x0800be71
 800e4d8:	0800e289 	.word	0x0800e289
 800e4dc:	0800ea5a 	.word	0x0800ea5a

0800e4e0 <__swbuf_r>:
 800e4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4e2:	460e      	mov	r6, r1
 800e4e4:	4614      	mov	r4, r2
 800e4e6:	4605      	mov	r5, r0
 800e4e8:	b118      	cbz	r0, 800e4f2 <__swbuf_r+0x12>
 800e4ea:	6a03      	ldr	r3, [r0, #32]
 800e4ec:	b90b      	cbnz	r3, 800e4f2 <__swbuf_r+0x12>
 800e4ee:	f7fe f8f5 	bl	800c6dc <__sinit>
 800e4f2:	69a3      	ldr	r3, [r4, #24]
 800e4f4:	60a3      	str	r3, [r4, #8]
 800e4f6:	89a3      	ldrh	r3, [r4, #12]
 800e4f8:	071a      	lsls	r2, r3, #28
 800e4fa:	d525      	bpl.n	800e548 <__swbuf_r+0x68>
 800e4fc:	6923      	ldr	r3, [r4, #16]
 800e4fe:	b31b      	cbz	r3, 800e548 <__swbuf_r+0x68>
 800e500:	6823      	ldr	r3, [r4, #0]
 800e502:	6922      	ldr	r2, [r4, #16]
 800e504:	1a98      	subs	r0, r3, r2
 800e506:	6963      	ldr	r3, [r4, #20]
 800e508:	b2f6      	uxtb	r6, r6
 800e50a:	4283      	cmp	r3, r0
 800e50c:	4637      	mov	r7, r6
 800e50e:	dc04      	bgt.n	800e51a <__swbuf_r+0x3a>
 800e510:	4621      	mov	r1, r4
 800e512:	4628      	mov	r0, r5
 800e514:	f7ff fdae 	bl	800e074 <_fflush_r>
 800e518:	b9e0      	cbnz	r0, 800e554 <__swbuf_r+0x74>
 800e51a:	68a3      	ldr	r3, [r4, #8]
 800e51c:	3b01      	subs	r3, #1
 800e51e:	60a3      	str	r3, [r4, #8]
 800e520:	6823      	ldr	r3, [r4, #0]
 800e522:	1c5a      	adds	r2, r3, #1
 800e524:	6022      	str	r2, [r4, #0]
 800e526:	701e      	strb	r6, [r3, #0]
 800e528:	6962      	ldr	r2, [r4, #20]
 800e52a:	1c43      	adds	r3, r0, #1
 800e52c:	429a      	cmp	r2, r3
 800e52e:	d004      	beq.n	800e53a <__swbuf_r+0x5a>
 800e530:	89a3      	ldrh	r3, [r4, #12]
 800e532:	07db      	lsls	r3, r3, #31
 800e534:	d506      	bpl.n	800e544 <__swbuf_r+0x64>
 800e536:	2e0a      	cmp	r6, #10
 800e538:	d104      	bne.n	800e544 <__swbuf_r+0x64>
 800e53a:	4621      	mov	r1, r4
 800e53c:	4628      	mov	r0, r5
 800e53e:	f7ff fd99 	bl	800e074 <_fflush_r>
 800e542:	b938      	cbnz	r0, 800e554 <__swbuf_r+0x74>
 800e544:	4638      	mov	r0, r7
 800e546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e548:	4621      	mov	r1, r4
 800e54a:	4628      	mov	r0, r5
 800e54c:	f000 f806 	bl	800e55c <__swsetup_r>
 800e550:	2800      	cmp	r0, #0
 800e552:	d0d5      	beq.n	800e500 <__swbuf_r+0x20>
 800e554:	f04f 37ff 	mov.w	r7, #4294967295
 800e558:	e7f4      	b.n	800e544 <__swbuf_r+0x64>
	...

0800e55c <__swsetup_r>:
 800e55c:	b538      	push	{r3, r4, r5, lr}
 800e55e:	4b2a      	ldr	r3, [pc, #168]	; (800e608 <__swsetup_r+0xac>)
 800e560:	4605      	mov	r5, r0
 800e562:	6818      	ldr	r0, [r3, #0]
 800e564:	460c      	mov	r4, r1
 800e566:	b118      	cbz	r0, 800e570 <__swsetup_r+0x14>
 800e568:	6a03      	ldr	r3, [r0, #32]
 800e56a:	b90b      	cbnz	r3, 800e570 <__swsetup_r+0x14>
 800e56c:	f7fe f8b6 	bl	800c6dc <__sinit>
 800e570:	89a3      	ldrh	r3, [r4, #12]
 800e572:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e576:	0718      	lsls	r0, r3, #28
 800e578:	d422      	bmi.n	800e5c0 <__swsetup_r+0x64>
 800e57a:	06d9      	lsls	r1, r3, #27
 800e57c:	d407      	bmi.n	800e58e <__swsetup_r+0x32>
 800e57e:	2309      	movs	r3, #9
 800e580:	602b      	str	r3, [r5, #0]
 800e582:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e586:	81a3      	strh	r3, [r4, #12]
 800e588:	f04f 30ff 	mov.w	r0, #4294967295
 800e58c:	e034      	b.n	800e5f8 <__swsetup_r+0x9c>
 800e58e:	0758      	lsls	r0, r3, #29
 800e590:	d512      	bpl.n	800e5b8 <__swsetup_r+0x5c>
 800e592:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e594:	b141      	cbz	r1, 800e5a8 <__swsetup_r+0x4c>
 800e596:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e59a:	4299      	cmp	r1, r3
 800e59c:	d002      	beq.n	800e5a4 <__swsetup_r+0x48>
 800e59e:	4628      	mov	r0, r5
 800e5a0:	f7fe ffc2 	bl	800d528 <_free_r>
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	6363      	str	r3, [r4, #52]	; 0x34
 800e5a8:	89a3      	ldrh	r3, [r4, #12]
 800e5aa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e5ae:	81a3      	strh	r3, [r4, #12]
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	6063      	str	r3, [r4, #4]
 800e5b4:	6923      	ldr	r3, [r4, #16]
 800e5b6:	6023      	str	r3, [r4, #0]
 800e5b8:	89a3      	ldrh	r3, [r4, #12]
 800e5ba:	f043 0308 	orr.w	r3, r3, #8
 800e5be:	81a3      	strh	r3, [r4, #12]
 800e5c0:	6923      	ldr	r3, [r4, #16]
 800e5c2:	b94b      	cbnz	r3, 800e5d8 <__swsetup_r+0x7c>
 800e5c4:	89a3      	ldrh	r3, [r4, #12]
 800e5c6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e5ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e5ce:	d003      	beq.n	800e5d8 <__swsetup_r+0x7c>
 800e5d0:	4621      	mov	r1, r4
 800e5d2:	4628      	mov	r0, r5
 800e5d4:	f000 f884 	bl	800e6e0 <__smakebuf_r>
 800e5d8:	89a0      	ldrh	r0, [r4, #12]
 800e5da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e5de:	f010 0301 	ands.w	r3, r0, #1
 800e5e2:	d00a      	beq.n	800e5fa <__swsetup_r+0x9e>
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	60a3      	str	r3, [r4, #8]
 800e5e8:	6963      	ldr	r3, [r4, #20]
 800e5ea:	425b      	negs	r3, r3
 800e5ec:	61a3      	str	r3, [r4, #24]
 800e5ee:	6923      	ldr	r3, [r4, #16]
 800e5f0:	b943      	cbnz	r3, 800e604 <__swsetup_r+0xa8>
 800e5f2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e5f6:	d1c4      	bne.n	800e582 <__swsetup_r+0x26>
 800e5f8:	bd38      	pop	{r3, r4, r5, pc}
 800e5fa:	0781      	lsls	r1, r0, #30
 800e5fc:	bf58      	it	pl
 800e5fe:	6963      	ldrpl	r3, [r4, #20]
 800e600:	60a3      	str	r3, [r4, #8]
 800e602:	e7f4      	b.n	800e5ee <__swsetup_r+0x92>
 800e604:	2000      	movs	r0, #0
 800e606:	e7f7      	b.n	800e5f8 <__swsetup_r+0x9c>
 800e608:	2400019c 	.word	0x2400019c

0800e60c <_raise_r>:
 800e60c:	291f      	cmp	r1, #31
 800e60e:	b538      	push	{r3, r4, r5, lr}
 800e610:	4604      	mov	r4, r0
 800e612:	460d      	mov	r5, r1
 800e614:	d904      	bls.n	800e620 <_raise_r+0x14>
 800e616:	2316      	movs	r3, #22
 800e618:	6003      	str	r3, [r0, #0]
 800e61a:	f04f 30ff 	mov.w	r0, #4294967295
 800e61e:	bd38      	pop	{r3, r4, r5, pc}
 800e620:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e622:	b112      	cbz	r2, 800e62a <_raise_r+0x1e>
 800e624:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e628:	b94b      	cbnz	r3, 800e63e <_raise_r+0x32>
 800e62a:	4620      	mov	r0, r4
 800e62c:	f000 f830 	bl	800e690 <_getpid_r>
 800e630:	462a      	mov	r2, r5
 800e632:	4601      	mov	r1, r0
 800e634:	4620      	mov	r0, r4
 800e636:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e63a:	f000 b817 	b.w	800e66c <_kill_r>
 800e63e:	2b01      	cmp	r3, #1
 800e640:	d00a      	beq.n	800e658 <_raise_r+0x4c>
 800e642:	1c59      	adds	r1, r3, #1
 800e644:	d103      	bne.n	800e64e <_raise_r+0x42>
 800e646:	2316      	movs	r3, #22
 800e648:	6003      	str	r3, [r0, #0]
 800e64a:	2001      	movs	r0, #1
 800e64c:	e7e7      	b.n	800e61e <_raise_r+0x12>
 800e64e:	2400      	movs	r4, #0
 800e650:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e654:	4628      	mov	r0, r5
 800e656:	4798      	blx	r3
 800e658:	2000      	movs	r0, #0
 800e65a:	e7e0      	b.n	800e61e <_raise_r+0x12>

0800e65c <raise>:
 800e65c:	4b02      	ldr	r3, [pc, #8]	; (800e668 <raise+0xc>)
 800e65e:	4601      	mov	r1, r0
 800e660:	6818      	ldr	r0, [r3, #0]
 800e662:	f7ff bfd3 	b.w	800e60c <_raise_r>
 800e666:	bf00      	nop
 800e668:	2400019c 	.word	0x2400019c

0800e66c <_kill_r>:
 800e66c:	b538      	push	{r3, r4, r5, lr}
 800e66e:	4d07      	ldr	r5, [pc, #28]	; (800e68c <_kill_r+0x20>)
 800e670:	2300      	movs	r3, #0
 800e672:	4604      	mov	r4, r0
 800e674:	4608      	mov	r0, r1
 800e676:	4611      	mov	r1, r2
 800e678:	602b      	str	r3, [r5, #0]
 800e67a:	f7f2 fcbb 	bl	8000ff4 <_kill>
 800e67e:	1c43      	adds	r3, r0, #1
 800e680:	d102      	bne.n	800e688 <_kill_r+0x1c>
 800e682:	682b      	ldr	r3, [r5, #0]
 800e684:	b103      	cbz	r3, 800e688 <_kill_r+0x1c>
 800e686:	6023      	str	r3, [r4, #0]
 800e688:	bd38      	pop	{r3, r4, r5, pc}
 800e68a:	bf00      	nop
 800e68c:	2400226c 	.word	0x2400226c

0800e690 <_getpid_r>:
 800e690:	f7f2 bca8 	b.w	8000fe4 <_getpid>

0800e694 <__swhatbuf_r>:
 800e694:	b570      	push	{r4, r5, r6, lr}
 800e696:	460c      	mov	r4, r1
 800e698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e69c:	2900      	cmp	r1, #0
 800e69e:	b096      	sub	sp, #88	; 0x58
 800e6a0:	4615      	mov	r5, r2
 800e6a2:	461e      	mov	r6, r3
 800e6a4:	da0d      	bge.n	800e6c2 <__swhatbuf_r+0x2e>
 800e6a6:	89a3      	ldrh	r3, [r4, #12]
 800e6a8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e6ac:	f04f 0100 	mov.w	r1, #0
 800e6b0:	bf0c      	ite	eq
 800e6b2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e6b6:	2340      	movne	r3, #64	; 0x40
 800e6b8:	2000      	movs	r0, #0
 800e6ba:	6031      	str	r1, [r6, #0]
 800e6bc:	602b      	str	r3, [r5, #0]
 800e6be:	b016      	add	sp, #88	; 0x58
 800e6c0:	bd70      	pop	{r4, r5, r6, pc}
 800e6c2:	466a      	mov	r2, sp
 800e6c4:	f000 f848 	bl	800e758 <_fstat_r>
 800e6c8:	2800      	cmp	r0, #0
 800e6ca:	dbec      	blt.n	800e6a6 <__swhatbuf_r+0x12>
 800e6cc:	9901      	ldr	r1, [sp, #4]
 800e6ce:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e6d2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e6d6:	4259      	negs	r1, r3
 800e6d8:	4159      	adcs	r1, r3
 800e6da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e6de:	e7eb      	b.n	800e6b8 <__swhatbuf_r+0x24>

0800e6e0 <__smakebuf_r>:
 800e6e0:	898b      	ldrh	r3, [r1, #12]
 800e6e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e6e4:	079d      	lsls	r5, r3, #30
 800e6e6:	4606      	mov	r6, r0
 800e6e8:	460c      	mov	r4, r1
 800e6ea:	d507      	bpl.n	800e6fc <__smakebuf_r+0x1c>
 800e6ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e6f0:	6023      	str	r3, [r4, #0]
 800e6f2:	6123      	str	r3, [r4, #16]
 800e6f4:	2301      	movs	r3, #1
 800e6f6:	6163      	str	r3, [r4, #20]
 800e6f8:	b002      	add	sp, #8
 800e6fa:	bd70      	pop	{r4, r5, r6, pc}
 800e6fc:	ab01      	add	r3, sp, #4
 800e6fe:	466a      	mov	r2, sp
 800e700:	f7ff ffc8 	bl	800e694 <__swhatbuf_r>
 800e704:	9900      	ldr	r1, [sp, #0]
 800e706:	4605      	mov	r5, r0
 800e708:	4630      	mov	r0, r6
 800e70a:	f7fd fa93 	bl	800bc34 <_malloc_r>
 800e70e:	b948      	cbnz	r0, 800e724 <__smakebuf_r+0x44>
 800e710:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e714:	059a      	lsls	r2, r3, #22
 800e716:	d4ef      	bmi.n	800e6f8 <__smakebuf_r+0x18>
 800e718:	f023 0303 	bic.w	r3, r3, #3
 800e71c:	f043 0302 	orr.w	r3, r3, #2
 800e720:	81a3      	strh	r3, [r4, #12]
 800e722:	e7e3      	b.n	800e6ec <__smakebuf_r+0xc>
 800e724:	89a3      	ldrh	r3, [r4, #12]
 800e726:	6020      	str	r0, [r4, #0]
 800e728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e72c:	81a3      	strh	r3, [r4, #12]
 800e72e:	9b00      	ldr	r3, [sp, #0]
 800e730:	6163      	str	r3, [r4, #20]
 800e732:	9b01      	ldr	r3, [sp, #4]
 800e734:	6120      	str	r0, [r4, #16]
 800e736:	b15b      	cbz	r3, 800e750 <__smakebuf_r+0x70>
 800e738:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e73c:	4630      	mov	r0, r6
 800e73e:	f000 f81d 	bl	800e77c <_isatty_r>
 800e742:	b128      	cbz	r0, 800e750 <__smakebuf_r+0x70>
 800e744:	89a3      	ldrh	r3, [r4, #12]
 800e746:	f023 0303 	bic.w	r3, r3, #3
 800e74a:	f043 0301 	orr.w	r3, r3, #1
 800e74e:	81a3      	strh	r3, [r4, #12]
 800e750:	89a3      	ldrh	r3, [r4, #12]
 800e752:	431d      	orrs	r5, r3
 800e754:	81a5      	strh	r5, [r4, #12]
 800e756:	e7cf      	b.n	800e6f8 <__smakebuf_r+0x18>

0800e758 <_fstat_r>:
 800e758:	b538      	push	{r3, r4, r5, lr}
 800e75a:	4d07      	ldr	r5, [pc, #28]	; (800e778 <_fstat_r+0x20>)
 800e75c:	2300      	movs	r3, #0
 800e75e:	4604      	mov	r4, r0
 800e760:	4608      	mov	r0, r1
 800e762:	4611      	mov	r1, r2
 800e764:	602b      	str	r3, [r5, #0]
 800e766:	f7f2 fca4 	bl	80010b2 <_fstat>
 800e76a:	1c43      	adds	r3, r0, #1
 800e76c:	d102      	bne.n	800e774 <_fstat_r+0x1c>
 800e76e:	682b      	ldr	r3, [r5, #0]
 800e770:	b103      	cbz	r3, 800e774 <_fstat_r+0x1c>
 800e772:	6023      	str	r3, [r4, #0]
 800e774:	bd38      	pop	{r3, r4, r5, pc}
 800e776:	bf00      	nop
 800e778:	2400226c 	.word	0x2400226c

0800e77c <_isatty_r>:
 800e77c:	b538      	push	{r3, r4, r5, lr}
 800e77e:	4d06      	ldr	r5, [pc, #24]	; (800e798 <_isatty_r+0x1c>)
 800e780:	2300      	movs	r3, #0
 800e782:	4604      	mov	r4, r0
 800e784:	4608      	mov	r0, r1
 800e786:	602b      	str	r3, [r5, #0]
 800e788:	f7f2 fca3 	bl	80010d2 <_isatty>
 800e78c:	1c43      	adds	r3, r0, #1
 800e78e:	d102      	bne.n	800e796 <_isatty_r+0x1a>
 800e790:	682b      	ldr	r3, [r5, #0]
 800e792:	b103      	cbz	r3, 800e796 <_isatty_r+0x1a>
 800e794:	6023      	str	r3, [r4, #0]
 800e796:	bd38      	pop	{r3, r4, r5, pc}
 800e798:	2400226c 	.word	0x2400226c

0800e79c <_init>:
 800e79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e79e:	bf00      	nop
 800e7a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7a2:	bc08      	pop	{r3}
 800e7a4:	469e      	mov	lr, r3
 800e7a6:	4770      	bx	lr

0800e7a8 <_fini>:
 800e7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7aa:	bf00      	nop
 800e7ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7ae:	bc08      	pop	{r3}
 800e7b0:	469e      	mov	lr, r3
 800e7b2:	4770      	bx	lr
