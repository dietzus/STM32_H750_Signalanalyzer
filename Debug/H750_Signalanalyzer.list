
H750_Signalanalyzer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eeb8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  0800f158  0800f158  0001f158  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800f57c  0800f57c  0001f57c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800f580  0800f580  0001f580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000030c  24000000  0800f584  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00010ba4  24000310  0800f890  00020310  2**3
                  ALLOC
  7 ._user_heap_stack 00000604  24010eb4  0800f890  00020eb4  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002030c  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002033a  2**0
                  CONTENTS, READONLY
 10 .debug_info   00019bc4  00000000  00000000  0002037d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003edc  00000000  00000000  00039f41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001488  00000000  00000000  0003de20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000f5a  00000000  00000000  0003f2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003af4f  00000000  00000000  00040202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001ab77  00000000  00000000  0007b151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016b745  00000000  00000000  00095cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00006464  00000000  00000000  00201410  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000004b  00000000  00000000  00207874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000310 	.word	0x24000310
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f140 	.word	0x0800f140

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000314 	.word	0x24000314
 80002dc:	0800f140 	.word	0x0800f140

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <CubeM_DefChInit>:
uint8_t EOL[CUBEMONSMALLBUFSIZE] = "\n";
uint8_t EOLlen = 0;

cubeMchannel_t cubemChannels[CUBEMONMAXSIGNALS];

void CubeM_DefChInit() {
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
	for(uint8_t i=0; i<CUBEMONMAXSIGNALS; i++) {
 8000396:	2300      	movs	r3, #0
 8000398:	71fb      	strb	r3, [r7, #7]
 800039a:	e03b      	b.n	8000414 <CubeM_DefChInit+0x84>
		cubemChannels[i].newvalue = 0;
 800039c:	79fa      	ldrb	r2, [r7, #7]
 800039e:	4921      	ldr	r1, [pc, #132]	; (8000424 <CubeM_DefChInit+0x94>)
 80003a0:	4613      	mov	r3, r2
 80003a2:	009b      	lsls	r3, r3, #2
 80003a4:	4413      	add	r3, r2
 80003a6:	00db      	lsls	r3, r3, #3
 80003a8:	440b      	add	r3, r1
 80003aa:	2200      	movs	r2, #0
 80003ac:	701a      	strb	r2, [r3, #0]
		cubemChannels[i].reuseoldvalue = 0;
 80003ae:	79fa      	ldrb	r2, [r7, #7]
 80003b0:	491c      	ldr	r1, [pc, #112]	; (8000424 <CubeM_DefChInit+0x94>)
 80003b2:	4613      	mov	r3, r2
 80003b4:	009b      	lsls	r3, r3, #2
 80003b6:	4413      	add	r3, r2
 80003b8:	00db      	lsls	r3, r3, #3
 80003ba:	440b      	add	r3, r1
 80003bc:	3301      	adds	r3, #1
 80003be:	2200      	movs	r2, #0
 80003c0:	701a      	strb	r2, [r3, #0]
		cubemChannels[i].datatype = 2;
 80003c2:	79fa      	ldrb	r2, [r7, #7]
 80003c4:	4917      	ldr	r1, [pc, #92]	; (8000424 <CubeM_DefChInit+0x94>)
 80003c6:	4613      	mov	r3, r2
 80003c8:	009b      	lsls	r3, r3, #2
 80003ca:	4413      	add	r3, r2
 80003cc:	00db      	lsls	r3, r3, #3
 80003ce:	440b      	add	r3, r1
 80003d0:	3316      	adds	r3, #22
 80003d2:	2202      	movs	r2, #2
 80003d4:	701a      	strb	r2, [r3, #0]
		sprintf((char*)(cubemChannels[i].name), "Ch%d", i);
 80003d6:	79fa      	ldrb	r2, [r7, #7]
 80003d8:	4613      	mov	r3, r2
 80003da:	009b      	lsls	r3, r3, #2
 80003dc:	4413      	add	r3, r2
 80003de:	00db      	lsls	r3, r3, #3
 80003e0:	4a10      	ldr	r2, [pc, #64]	; (8000424 <CubeM_DefChInit+0x94>)
 80003e2:	4413      	add	r3, r2
 80003e4:	3302      	adds	r3, #2
 80003e6:	79fa      	ldrb	r2, [r7, #7]
 80003e8:	490f      	ldr	r1, [pc, #60]	; (8000428 <CubeM_DefChInit+0x98>)
 80003ea:	4618      	mov	r0, r3
 80003ec:	f00c fe7c 	bl	800d0e8 <siprintf>
		cubemChannels[i].value = 0.f;
 80003f0:	79fa      	ldrb	r2, [r7, #7]
 80003f2:	490c      	ldr	r1, [pc, #48]	; (8000424 <CubeM_DefChInit+0x94>)
 80003f4:	4613      	mov	r3, r2
 80003f6:	009b      	lsls	r3, r3, #2
 80003f8:	4413      	add	r3, r2
 80003fa:	00db      	lsls	r3, r3, #3
 80003fc:	440b      	add	r3, r1
 80003fe:	f103 0118 	add.w	r1, r3, #24
 8000402:	f04f 0200 	mov.w	r2, #0
 8000406:	f04f 0300 	mov.w	r3, #0
 800040a:	e9c1 2300 	strd	r2, r3, [r1]
	for(uint8_t i=0; i<CUBEMONMAXSIGNALS; i++) {
 800040e:	79fb      	ldrb	r3, [r7, #7]
 8000410:	3301      	adds	r3, #1
 8000412:	71fb      	strb	r3, [r7, #7]
 8000414:	79fb      	ldrb	r3, [r7, #7]
 8000416:	2b07      	cmp	r3, #7
 8000418:	d9c0      	bls.n	800039c <CubeM_DefChInit+0xc>
	}
}
 800041a:	bf00      	nop
 800041c:	bf00      	nop
 800041e:	3708      	adds	r7, #8
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	24000340 	.word	0x24000340
 8000428:	0800f158 	.word	0x0800f158

0800042c <CubeM_getStrLengths>:

void CubeM_getStrLengths() {
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
	dellen = strlen((char*)delimiter);
 8000430:	480b      	ldr	r0, [pc, #44]	; (8000460 <CubeM_getStrLengths+0x34>)
 8000432:	f7ff ffa5 	bl	8000380 <strlen>
 8000436:	4603      	mov	r3, r0
 8000438:	b2da      	uxtb	r2, r3
 800043a:	4b0a      	ldr	r3, [pc, #40]	; (8000464 <CubeM_getStrLengths+0x38>)
 800043c:	701a      	strb	r2, [r3, #0]
	conlen = strlen((char*)connector);
 800043e:	480a      	ldr	r0, [pc, #40]	; (8000468 <CubeM_getStrLengths+0x3c>)
 8000440:	f7ff ff9e 	bl	8000380 <strlen>
 8000444:	4603      	mov	r3, r0
 8000446:	b2da      	uxtb	r2, r3
 8000448:	4b08      	ldr	r3, [pc, #32]	; (800046c <CubeM_getStrLengths+0x40>)
 800044a:	701a      	strb	r2, [r3, #0]
	EOLlen = strlen((char*)EOL);
 800044c:	4808      	ldr	r0, [pc, #32]	; (8000470 <CubeM_getStrLengths+0x44>)
 800044e:	f7ff ff97 	bl	8000380 <strlen>
 8000452:	4603      	mov	r3, r0
 8000454:	b2da      	uxtb	r2, r3
 8000456:	4b07      	ldr	r3, [pc, #28]	; (8000474 <CubeM_getStrLengths+0x48>)
 8000458:	701a      	strb	r2, [r3, #0]
}
 800045a:	bf00      	nop
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	24000004 	.word	0x24000004
 8000464:	2400033c 	.word	0x2400033c
 8000468:	24000018 	.word	0x24000018
 800046c:	2400033d 	.word	0x2400033d
 8000470:	2400002c 	.word	0x2400002c
 8000474:	2400033e 	.word	0x2400033e

08000478 <CubeM_Init>:

uint32_t CubeM_defInit() {
	return CubeM_Init(50);
}

uint32_t CubeM_Init(uint32_t bufsize) {
 8000478:	b580      	push	{r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
	CubeM_DefChInit();
 8000480:	f7ff ff86 	bl	8000390 <CubeM_DefChInit>

	uint32_t tempsize = CubeM_setBufferSize(bufsize);
 8000484:	6878      	ldr	r0, [r7, #4]
 8000486:	f000 f819 	bl	80004bc <CubeM_setBufferSize>
 800048a:	60f8      	str	r0, [r7, #12]

	if(tempsize == 0 || tempsize!=bufsize) {
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d003      	beq.n	800049a <CubeM_Init+0x22>
 8000492:	68fa      	ldr	r2, [r7, #12]
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	429a      	cmp	r2, r3
 8000498:	d003      	beq.n	80004a2 <CubeM_Init+0x2a>
		tempsize = CubeM_setBufferSize(50);
 800049a:	2032      	movs	r0, #50	; 0x32
 800049c:	f000 f80e 	bl	80004bc <CubeM_setBufferSize>
 80004a0:	60f8      	str	r0, [r7, #12]
	}

	CubeM_getStrLengths();
 80004a2:	f7ff ffc3 	bl	800042c <CubeM_getStrLengths>
	isInit = 1;
 80004a6:	4b04      	ldr	r3, [pc, #16]	; (80004b8 <CubeM_Init+0x40>)
 80004a8:	2201      	movs	r2, #1
 80004aa:	701a      	strb	r2, [r3, #0]

	return tempsize;
 80004ac:	68fb      	ldr	r3, [r7, #12]
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	3710      	adds	r7, #16
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	2400032c 	.word	0x2400032c

080004bc <CubeM_setBufferSize>:
//Currently not used
void CubeM_setUART() {

}

uint32_t CubeM_setBufferSize(uint32_t sizeb) {
 80004bc:	b580      	push	{r7, lr}
 80004be:	b084      	sub	sp, #16
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
	if(sizeb != buffersize) {
 80004c4:	4b13      	ldr	r3, [pc, #76]	; (8000514 <CubeM_setBufferSize+0x58>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	687a      	ldr	r2, [r7, #4]
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d01c      	beq.n	8000508 <CubeM_setBufferSize+0x4c>
		uint8_t *temppointer = malloc(sizeb);
 80004ce:	6878      	ldr	r0, [r7, #4]
 80004d0:	f00c f850 	bl	800c574 <malloc>
 80004d4:	4603      	mov	r3, r0
 80004d6:	60fb      	str	r3, [r7, #12]
		if(temppointer != NULL) {
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d014      	beq.n	8000508 <CubeM_setBufferSize+0x4c>
			free(buffer);
 80004de:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <CubeM_setBufferSize+0x5c>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4618      	mov	r0, r3
 80004e4:	f00c f84e 	bl	800c584 <free>
			buffer = temppointer;
 80004e8:	4a0b      	ldr	r2, [pc, #44]	; (8000518 <CubeM_setBufferSize+0x5c>)
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	6013      	str	r3, [r2, #0]
			buffer[0] = '\0';
 80004ee:	4b0a      	ldr	r3, [pc, #40]	; (8000518 <CubeM_setBufferSize+0x5c>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	2200      	movs	r2, #0
 80004f4:	701a      	strb	r2, [r3, #0]

			buffersize = sizeb;
 80004f6:	4a07      	ldr	r2, [pc, #28]	; (8000514 <CubeM_setBufferSize+0x58>)
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	6013      	str	r3, [r2, #0]
			emptybuffer = 1;
 80004fc:	4b07      	ldr	r3, [pc, #28]	; (800051c <CubeM_setBufferSize+0x60>)
 80004fe:	2201      	movs	r2, #1
 8000500:	701a      	strb	r2, [r3, #0]
			usedbuffer = 0;
 8000502:	4b07      	ldr	r3, [pc, #28]	; (8000520 <CubeM_setBufferSize+0x64>)
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
		}
	}
	return buffersize;
 8000508:	4b02      	ldr	r3, [pc, #8]	; (8000514 <CubeM_setBufferSize+0x58>)
 800050a:	681b      	ldr	r3, [r3, #0]
}
 800050c:	4618      	mov	r0, r3
 800050e:	3710      	adds	r7, #16
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	24000330 	.word	0x24000330
 8000518:	24000338 	.word	0x24000338
 800051c:	24000000 	.word	0x24000000
 8000520:	24000334 	.word	0x24000334

08000524 <CubeM_clearBuffer>:

uint8_t CubeM_clearBuffer() {
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
	if(emptybuffer == 1 && usedbuffer == 0) return 1;
 8000528:	4b0c      	ldr	r3, [pc, #48]	; (800055c <CubeM_clearBuffer+0x38>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	2b01      	cmp	r3, #1
 800052e:	d105      	bne.n	800053c <CubeM_clearBuffer+0x18>
 8000530:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <CubeM_clearBuffer+0x3c>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d101      	bne.n	800053c <CubeM_clearBuffer+0x18>
 8000538:	2301      	movs	r3, #1
 800053a:	e00a      	b.n	8000552 <CubeM_clearBuffer+0x2e>

	buffer[0] = '\0';
 800053c:	4b09      	ldr	r3, [pc, #36]	; (8000564 <CubeM_clearBuffer+0x40>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2200      	movs	r2, #0
 8000542:	701a      	strb	r2, [r3, #0]
	emptybuffer = 1;
 8000544:	4b05      	ldr	r3, [pc, #20]	; (800055c <CubeM_clearBuffer+0x38>)
 8000546:	2201      	movs	r2, #1
 8000548:	701a      	strb	r2, [r3, #0]
	usedbuffer = 0;
 800054a:	4b05      	ldr	r3, [pc, #20]	; (8000560 <CubeM_clearBuffer+0x3c>)
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
	return 0;
 8000550:	2300      	movs	r3, #0
}
 8000552:	4618      	mov	r0, r3
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr
 800055c:	24000000 	.word	0x24000000
 8000560:	24000334 	.word	0x24000334
 8000564:	24000338 	.word	0x24000338

08000568 <CubeM_setChannelname>:

uint8_t CubeM_setChannelname(uint8_t channel, uint8_t *newname) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	6039      	str	r1, [r7, #0]
 8000572:	71fb      	strb	r3, [r7, #7]
	uint32_t templen = strlen((char*)newname);
 8000574:	6838      	ldr	r0, [r7, #0]
 8000576:	f7ff ff03 	bl	8000380 <strlen>
 800057a:	60f8      	str	r0, [r7, #12]
	if((templen < CUBEMONSMALLBUFSIZE && templen > 0) && (channel >= 0 && channel < CUBEMONMAXSIGNALS)) {
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	2b13      	cmp	r3, #19
 8000580:	d813      	bhi.n	80005aa <CubeM_setChannelname+0x42>
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d010      	beq.n	80005aa <CubeM_setChannelname+0x42>
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	2b07      	cmp	r3, #7
 800058c:	d80d      	bhi.n	80005aa <CubeM_setChannelname+0x42>
		strcpy((char*)(cubemChannels[channel].name), (char*)newname);
 800058e:	79fa      	ldrb	r2, [r7, #7]
 8000590:	4613      	mov	r3, r2
 8000592:	009b      	lsls	r3, r3, #2
 8000594:	4413      	add	r3, r2
 8000596:	00db      	lsls	r3, r3, #3
 8000598:	4a06      	ldr	r2, [pc, #24]	; (80005b4 <CubeM_setChannelname+0x4c>)
 800059a:	4413      	add	r3, r2
 800059c:	3302      	adds	r3, #2
 800059e:	6839      	ldr	r1, [r7, #0]
 80005a0:	4618      	mov	r0, r3
 80005a2:	f00c fe94 	bl	800d2ce <strcpy>

		return 0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	e000      	b.n	80005ac <CubeM_setChannelname+0x44>
	}
	return 1;
 80005aa:	2301      	movs	r3, #1
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3710      	adds	r7, #16
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	24000340 	.word	0x24000340

080005b8 <CubeM_attendUIntValue>:
	}

	return 1;
}

uint8_t CubeM_attendUIntValue(uint8_t channel, uint32_t value) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b09a      	sub	sp, #104	; 0x68
 80005bc:	af02      	add	r7, sp, #8
 80005be:	4603      	mov	r3, r0
 80005c0:	6039      	str	r1, [r7, #0]
 80005c2:	71fb      	strb	r3, [r7, #7]
	if(channel >= 0 && channel < CUBEMONMAXSIGNALS) {
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	2b07      	cmp	r3, #7
 80005c8:	d845      	bhi.n	8000656 <CubeM_attendUIntValue+0x9e>
		char tempstring[CUBEMONSMALLBUFSIZE*4];

		uint32_t tempsize;
		sprintf(tempstring, "%s%s%s%ld", delimiter, cubemChannels[channel].name, connector, value);
 80005ca:	79fa      	ldrb	r2, [r7, #7]
 80005cc:	4613      	mov	r3, r2
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	4413      	add	r3, r2
 80005d2:	00db      	lsls	r3, r3, #3
 80005d4:	4a22      	ldr	r2, [pc, #136]	; (8000660 <CubeM_attendUIntValue+0xa8>)
 80005d6:	4413      	add	r3, r2
 80005d8:	1c9a      	adds	r2, r3, #2
 80005da:	f107 000c 	add.w	r0, r7, #12
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	9301      	str	r3, [sp, #4]
 80005e2:	4b20      	ldr	r3, [pc, #128]	; (8000664 <CubeM_attendUIntValue+0xac>)
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	4613      	mov	r3, r2
 80005e8:	4a1f      	ldr	r2, [pc, #124]	; (8000668 <CubeM_attendUIntValue+0xb0>)
 80005ea:	4920      	ldr	r1, [pc, #128]	; (800066c <CubeM_attendUIntValue+0xb4>)
 80005ec:	f00c fd7c 	bl	800d0e8 <siprintf>
		tempsize = usedbuffer + strlen((char*)tempstring) - (emptybuffer * dellen);
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	4618      	mov	r0, r3
 80005f6:	f7ff fec3 	bl	8000380 <strlen>
 80005fa:	4602      	mov	r2, r0
 80005fc:	4b1c      	ldr	r3, [pc, #112]	; (8000670 <CubeM_attendUIntValue+0xb8>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4413      	add	r3, r2
 8000602:	4a1c      	ldr	r2, [pc, #112]	; (8000674 <CubeM_attendUIntValue+0xbc>)
 8000604:	7812      	ldrb	r2, [r2, #0]
 8000606:	4611      	mov	r1, r2
 8000608:	4a1b      	ldr	r2, [pc, #108]	; (8000678 <CubeM_attendUIntValue+0xc0>)
 800060a:	7812      	ldrb	r2, [r2, #0]
 800060c:	fb01 f202 	mul.w	r2, r1, r2
 8000610:	1a9b      	subs	r3, r3, r2
 8000612:	65fb      	str	r3, [r7, #92]	; 0x5c

		if(tempsize < buffersize) {
 8000614:	4b19      	ldr	r3, [pc, #100]	; (800067c <CubeM_attendUIntValue+0xc4>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800061a:	429a      	cmp	r2, r3
 800061c:	d21b      	bcs.n	8000656 <CubeM_attendUIntValue+0x9e>
			strcpy((char*)(buffer + (usedbuffer)), (char*)(tempstring + (emptybuffer * dellen)));
 800061e:	4b18      	ldr	r3, [pc, #96]	; (8000680 <CubeM_attendUIntValue+0xc8>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	4b13      	ldr	r3, [pc, #76]	; (8000670 <CubeM_attendUIntValue+0xb8>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	441a      	add	r2, r3
 8000628:	4b12      	ldr	r3, [pc, #72]	; (8000674 <CubeM_attendUIntValue+0xbc>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	4619      	mov	r1, r3
 800062e:	4b12      	ldr	r3, [pc, #72]	; (8000678 <CubeM_attendUIntValue+0xc0>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	fb01 f303 	mul.w	r3, r1, r3
 8000636:	4619      	mov	r1, r3
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	440b      	add	r3, r1
 800063e:	4619      	mov	r1, r3
 8000640:	4610      	mov	r0, r2
 8000642:	f00c fe44 	bl	800d2ce <strcpy>
			usedbuffer = tempsize;
 8000646:	4a0a      	ldr	r2, [pc, #40]	; (8000670 <CubeM_attendUIntValue+0xb8>)
 8000648:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800064a:	6013      	str	r3, [r2, #0]
			emptybuffer = 0;
 800064c:	4b09      	ldr	r3, [pc, #36]	; (8000674 <CubeM_attendUIntValue+0xbc>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
			return 0;
 8000652:	2300      	movs	r3, #0
 8000654:	e000      	b.n	8000658 <CubeM_attendUIntValue+0xa0>
		}
	}
	return 1;
 8000656:	2301      	movs	r3, #1
}
 8000658:	4618      	mov	r0, r3
 800065a:	3760      	adds	r7, #96	; 0x60
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	24000340 	.word	0x24000340
 8000664:	24000018 	.word	0x24000018
 8000668:	24000004 	.word	0x24000004
 800066c:	0800f160 	.word	0x0800f160
 8000670:	24000334 	.word	0x24000334
 8000674:	24000000 	.word	0x24000000
 8000678:	2400033c 	.word	0x2400033c
 800067c:	24000330 	.word	0x24000330
 8000680:	24000338 	.word	0x24000338

08000684 <CubeM_attendIntValue>:

uint8_t CubeM_attendIntValue(uint8_t channel, int32_t value) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b09a      	sub	sp, #104	; 0x68
 8000688:	af02      	add	r7, sp, #8
 800068a:	4603      	mov	r3, r0
 800068c:	6039      	str	r1, [r7, #0]
 800068e:	71fb      	strb	r3, [r7, #7]
	if(channel > 0 && channel < CUBEMONMAXSIGNALS) {
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d048      	beq.n	8000728 <CubeM_attendIntValue+0xa4>
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	2b07      	cmp	r3, #7
 800069a:	d845      	bhi.n	8000728 <CubeM_attendIntValue+0xa4>
		char tempstring[CUBEMONSMALLBUFSIZE*4];

		uint32_t tempsize;
		sprintf(tempstring, "%s%s%s%ld", delimiter, cubemChannels[channel].name, connector, value);
 800069c:	79fa      	ldrb	r2, [r7, #7]
 800069e:	4613      	mov	r3, r2
 80006a0:	009b      	lsls	r3, r3, #2
 80006a2:	4413      	add	r3, r2
 80006a4:	00db      	lsls	r3, r3, #3
 80006a6:	4a23      	ldr	r2, [pc, #140]	; (8000734 <CubeM_attendIntValue+0xb0>)
 80006a8:	4413      	add	r3, r2
 80006aa:	1c9a      	adds	r2, r3, #2
 80006ac:	f107 000c 	add.w	r0, r7, #12
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	9301      	str	r3, [sp, #4]
 80006b4:	4b20      	ldr	r3, [pc, #128]	; (8000738 <CubeM_attendIntValue+0xb4>)
 80006b6:	9300      	str	r3, [sp, #0]
 80006b8:	4613      	mov	r3, r2
 80006ba:	4a20      	ldr	r2, [pc, #128]	; (800073c <CubeM_attendIntValue+0xb8>)
 80006bc:	4920      	ldr	r1, [pc, #128]	; (8000740 <CubeM_attendIntValue+0xbc>)
 80006be:	f00c fd13 	bl	800d0e8 <siprintf>
		tempsize = usedbuffer + strlen((char*)tempstring) - (emptybuffer * dellen);
 80006c2:	f107 030c 	add.w	r3, r7, #12
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff fe5a 	bl	8000380 <strlen>
 80006cc:	4602      	mov	r2, r0
 80006ce:	4b1d      	ldr	r3, [pc, #116]	; (8000744 <CubeM_attendIntValue+0xc0>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4413      	add	r3, r2
 80006d4:	4a1c      	ldr	r2, [pc, #112]	; (8000748 <CubeM_attendIntValue+0xc4>)
 80006d6:	7812      	ldrb	r2, [r2, #0]
 80006d8:	4611      	mov	r1, r2
 80006da:	4a1c      	ldr	r2, [pc, #112]	; (800074c <CubeM_attendIntValue+0xc8>)
 80006dc:	7812      	ldrb	r2, [r2, #0]
 80006de:	fb01 f202 	mul.w	r2, r1, r2
 80006e2:	1a9b      	subs	r3, r3, r2
 80006e4:	65fb      	str	r3, [r7, #92]	; 0x5c

		if(tempsize < buffersize) {
 80006e6:	4b1a      	ldr	r3, [pc, #104]	; (8000750 <CubeM_attendIntValue+0xcc>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d21b      	bcs.n	8000728 <CubeM_attendIntValue+0xa4>
			strcpy((char*)(buffer + (usedbuffer)), (char*)(tempstring + (emptybuffer * dellen)));
 80006f0:	4b18      	ldr	r3, [pc, #96]	; (8000754 <CubeM_attendIntValue+0xd0>)
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	4b13      	ldr	r3, [pc, #76]	; (8000744 <CubeM_attendIntValue+0xc0>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	441a      	add	r2, r3
 80006fa:	4b13      	ldr	r3, [pc, #76]	; (8000748 <CubeM_attendIntValue+0xc4>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	4619      	mov	r1, r3
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <CubeM_attendIntValue+0xc8>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	fb01 f303 	mul.w	r3, r1, r3
 8000708:	4619      	mov	r1, r3
 800070a:	f107 030c 	add.w	r3, r7, #12
 800070e:	440b      	add	r3, r1
 8000710:	4619      	mov	r1, r3
 8000712:	4610      	mov	r0, r2
 8000714:	f00c fddb 	bl	800d2ce <strcpy>
			usedbuffer = tempsize;
 8000718:	4a0a      	ldr	r2, [pc, #40]	; (8000744 <CubeM_attendIntValue+0xc0>)
 800071a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800071c:	6013      	str	r3, [r2, #0]
			emptybuffer = 0;
 800071e:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <CubeM_attendIntValue+0xc4>)
 8000720:	2200      	movs	r2, #0
 8000722:	701a      	strb	r2, [r3, #0]
			return 0;
 8000724:	2300      	movs	r3, #0
 8000726:	e000      	b.n	800072a <CubeM_attendIntValue+0xa6>
		}
	}
	return 1;
 8000728:	2301      	movs	r3, #1
}
 800072a:	4618      	mov	r0, r3
 800072c:	3760      	adds	r7, #96	; 0x60
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	24000340 	.word	0x24000340
 8000738:	24000018 	.word	0x24000018
 800073c:	24000004 	.word	0x24000004
 8000740:	0800f160 	.word	0x0800f160
 8000744:	24000334 	.word	0x24000334
 8000748:	24000000 	.word	0x24000000
 800074c:	2400033c 	.word	0x2400033c
 8000750:	24000330 	.word	0x24000330
 8000754:	24000338 	.word	0x24000338

08000758 <CubeM_attendFloatValue>:

uint8_t CubeM_attendFloatValue(uint8_t channel, float value, uint8_t precision) {
 8000758:	b580      	push	{r7, lr}
 800075a:	b09c      	sub	sp, #112	; 0x70
 800075c:	af04      	add	r7, sp, #16
 800075e:	4603      	mov	r3, r0
 8000760:	ed87 0a00 	vstr	s0, [r7]
 8000764:	460a      	mov	r2, r1
 8000766:	71fb      	strb	r3, [r7, #7]
 8000768:	4613      	mov	r3, r2
 800076a:	71bb      	strb	r3, [r7, #6]
	if(channel > 0 && channel < CUBEMONMAXSIGNALS) {
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d04e      	beq.n	8000810 <CubeM_attendFloatValue+0xb8>
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	2b07      	cmp	r3, #7
 8000776:	d84b      	bhi.n	8000810 <CubeM_attendFloatValue+0xb8>
		char tempstring[CUBEMONSMALLBUFSIZE*4];

		uint32_t tempsize;
		sprintf(tempstring, "%s%s%s%.*f", delimiter, cubemChannels[channel].name, connector, precision, value);
 8000778:	79fa      	ldrb	r2, [r7, #7]
 800077a:	4613      	mov	r3, r2
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	4413      	add	r3, r2
 8000780:	00db      	lsls	r3, r3, #3
 8000782:	4a26      	ldr	r2, [pc, #152]	; (800081c <CubeM_attendFloatValue+0xc4>)
 8000784:	4413      	add	r3, r2
 8000786:	1c9a      	adds	r2, r3, #2
 8000788:	79bb      	ldrb	r3, [r7, #6]
 800078a:	edd7 7a00 	vldr	s15, [r7]
 800078e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000792:	f107 000c 	add.w	r0, r7, #12
 8000796:	ed8d 7b02 	vstr	d7, [sp, #8]
 800079a:	9301      	str	r3, [sp, #4]
 800079c:	4b20      	ldr	r3, [pc, #128]	; (8000820 <CubeM_attendFloatValue+0xc8>)
 800079e:	9300      	str	r3, [sp, #0]
 80007a0:	4613      	mov	r3, r2
 80007a2:	4a20      	ldr	r2, [pc, #128]	; (8000824 <CubeM_attendFloatValue+0xcc>)
 80007a4:	4920      	ldr	r1, [pc, #128]	; (8000828 <CubeM_attendFloatValue+0xd0>)
 80007a6:	f00c fc9f 	bl	800d0e8 <siprintf>
		tempsize = usedbuffer + strlen((char*)tempstring) - (emptybuffer * dellen);
 80007aa:	f107 030c 	add.w	r3, r7, #12
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff fde6 	bl	8000380 <strlen>
 80007b4:	4602      	mov	r2, r0
 80007b6:	4b1d      	ldr	r3, [pc, #116]	; (800082c <CubeM_attendFloatValue+0xd4>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4413      	add	r3, r2
 80007bc:	4a1c      	ldr	r2, [pc, #112]	; (8000830 <CubeM_attendFloatValue+0xd8>)
 80007be:	7812      	ldrb	r2, [r2, #0]
 80007c0:	4611      	mov	r1, r2
 80007c2:	4a1c      	ldr	r2, [pc, #112]	; (8000834 <CubeM_attendFloatValue+0xdc>)
 80007c4:	7812      	ldrb	r2, [r2, #0]
 80007c6:	fb01 f202 	mul.w	r2, r1, r2
 80007ca:	1a9b      	subs	r3, r3, r2
 80007cc:	65fb      	str	r3, [r7, #92]	; 0x5c

		if(tempsize < buffersize) {
 80007ce:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <CubeM_attendFloatValue+0xe0>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80007d4:	429a      	cmp	r2, r3
 80007d6:	d21b      	bcs.n	8000810 <CubeM_attendFloatValue+0xb8>
			strcpy((char*)(buffer + (usedbuffer)), (char*)(tempstring + (emptybuffer * dellen)));
 80007d8:	4b18      	ldr	r3, [pc, #96]	; (800083c <CubeM_attendFloatValue+0xe4>)
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	4b13      	ldr	r3, [pc, #76]	; (800082c <CubeM_attendFloatValue+0xd4>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	441a      	add	r2, r3
 80007e2:	4b13      	ldr	r3, [pc, #76]	; (8000830 <CubeM_attendFloatValue+0xd8>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	4619      	mov	r1, r3
 80007e8:	4b12      	ldr	r3, [pc, #72]	; (8000834 <CubeM_attendFloatValue+0xdc>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	fb01 f303 	mul.w	r3, r1, r3
 80007f0:	4619      	mov	r1, r3
 80007f2:	f107 030c 	add.w	r3, r7, #12
 80007f6:	440b      	add	r3, r1
 80007f8:	4619      	mov	r1, r3
 80007fa:	4610      	mov	r0, r2
 80007fc:	f00c fd67 	bl	800d2ce <strcpy>
			usedbuffer = tempsize;
 8000800:	4a0a      	ldr	r2, [pc, #40]	; (800082c <CubeM_attendFloatValue+0xd4>)
 8000802:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000804:	6013      	str	r3, [r2, #0]
			emptybuffer = 0;
 8000806:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <CubeM_attendFloatValue+0xd8>)
 8000808:	2200      	movs	r2, #0
 800080a:	701a      	strb	r2, [r3, #0]
			return 0;
 800080c:	2300      	movs	r3, #0
 800080e:	e000      	b.n	8000812 <CubeM_attendFloatValue+0xba>
		}
	}
	return 1;
 8000810:	2301      	movs	r3, #1
}
 8000812:	4618      	mov	r0, r3
 8000814:	3760      	adds	r7, #96	; 0x60
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	24000340 	.word	0x24000340
 8000820:	24000018 	.word	0x24000018
 8000824:	24000004 	.word	0x24000004
 8000828:	0800f16c 	.word	0x0800f16c
 800082c:	24000334 	.word	0x24000334
 8000830:	24000000 	.word	0x24000000
 8000834:	2400033c 	.word	0x2400033c
 8000838:	24000330 	.word	0x24000330
 800083c:	24000338 	.word	0x24000338

08000840 <CubeM_sendBuffer>:
	strcpy((char*)EOL, (char*)string);

	return 0;
}

uint8_t CubeM_sendBuffer() {
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0

	if(emptybuffer == 1) return 1;
 8000844:	4b0d      	ldr	r3, [pc, #52]	; (800087c <CubeM_sendBuffer+0x3c>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b01      	cmp	r3, #1
 800084a:	d101      	bne.n	8000850 <CubeM_sendBuffer+0x10>
 800084c:	2301      	movs	r3, #1
 800084e:	e012      	b.n	8000876 <CubeM_sendBuffer+0x36>

	strcpy((char*)&buffer[usedbuffer], (char*)EOL);
 8000850:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <CubeM_sendBuffer+0x40>)
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <CubeM_sendBuffer+0x44>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4413      	add	r3, r2
 800085a:	490b      	ldr	r1, [pc, #44]	; (8000888 <CubeM_sendBuffer+0x48>)
 800085c:	4618      	mov	r0, r3
 800085e:	f00c fd36 	bl	800d2ce <strcpy>
	CDC_Transmit_FS(buffer, usedbuffer);
 8000862:	4b07      	ldr	r3, [pc, #28]	; (8000880 <CubeM_sendBuffer+0x40>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a07      	ldr	r2, [pc, #28]	; (8000884 <CubeM_sendBuffer+0x44>)
 8000868:	6812      	ldr	r2, [r2, #0]
 800086a:	b292      	uxth	r2, r2
 800086c:	4611      	mov	r1, r2
 800086e:	4618      	mov	r0, r3
 8000870:	f00b fa00 	bl	800bc74 <CDC_Transmit_FS>

	return 0;
 8000874:	2300      	movs	r3, #0
}
 8000876:	4618      	mov	r0, r3
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	24000000 	.word	0x24000000
 8000880:	24000338 	.word	0x24000338
 8000884:	24000334 	.word	0x24000334
 8000888:	2400002c 	.word	0x2400002c

0800088c <CubeM_setDataType>:

uint8_t CubeM_setDataType(uint8_t channel, cubeMDataType newtype) {
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	460a      	mov	r2, r1
 8000896:	71fb      	strb	r3, [r7, #7]
 8000898:	4613      	mov	r3, r2
 800089a:	71bb      	strb	r3, [r7, #6]
	if(channel >= CUBEMONMAXSIGNALS || newtype >= CUBEMNROFDATATYPES) return 1;
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	2b07      	cmp	r3, #7
 80008a0:	d802      	bhi.n	80008a8 <CubeM_setDataType+0x1c>
 80008a2:	79bb      	ldrb	r3, [r7, #6]
 80008a4:	2b04      	cmp	r3, #4
 80008a6:	d901      	bls.n	80008ac <CubeM_setDataType+0x20>
 80008a8:	2301      	movs	r3, #1
 80008aa:	e00a      	b.n	80008c2 <CubeM_setDataType+0x36>

	cubemChannels[channel].datatype = newtype;
 80008ac:	79fa      	ldrb	r2, [r7, #7]
 80008ae:	4908      	ldr	r1, [pc, #32]	; (80008d0 <CubeM_setDataType+0x44>)
 80008b0:	4613      	mov	r3, r2
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	4413      	add	r3, r2
 80008b6:	00db      	lsls	r3, r3, #3
 80008b8:	440b      	add	r3, r1
 80008ba:	3316      	adds	r3, #22
 80008bc:	79ba      	ldrb	r2, [r7, #6]
 80008be:	701a      	strb	r2, [r3, #0]
	return 0;
 80008c0:	2300      	movs	r3, #0
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	24000340 	.word	0x24000340

080008d4 <CubeM_setPrecision>:

uint8_t CubeM_setPrecision(uint8_t channel, int8_t precision) {
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	460a      	mov	r2, r1
 80008de:	71fb      	strb	r3, [r7, #7]
 80008e0:	4613      	mov	r3, r2
 80008e2:	71bb      	strb	r3, [r7, #6]
	if(channel >= CUBEMONMAXSIGNALS) return 1;
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	2b07      	cmp	r3, #7
 80008e8:	d901      	bls.n	80008ee <CubeM_setPrecision+0x1a>
 80008ea:	2301      	movs	r3, #1
 80008ec:	e00b      	b.n	8000906 <CubeM_setPrecision+0x32>

	cubemChannels[channel].precision = precision;
 80008ee:	79fa      	ldrb	r2, [r7, #7]
 80008f0:	f997 1006 	ldrsb.w	r1, [r7, #6]
 80008f4:	4807      	ldr	r0, [pc, #28]	; (8000914 <CubeM_setPrecision+0x40>)
 80008f6:	4613      	mov	r3, r2
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	4413      	add	r3, r2
 80008fc:	00db      	lsls	r3, r3, #3
 80008fe:	4403      	add	r3, r0
 8000900:	3320      	adds	r3, #32
 8000902:	6019      	str	r1, [r3, #0]
	return 0;
 8000904:	2300      	movs	r3, #0
}
 8000906:	4618      	mov	r0, r3
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	24000340 	.word	0x24000340

08000918 <CubeM_setUINTValue>:

uint8_t CubeM_setUINTValue(uint8_t channel, float value) {
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	ed87 0a00 	vstr	s0, [r7]
 8000924:	71fb      	strb	r3, [r7, #7]

	if(channel >= CUBEMONMAXSIGNALS || cubemChannels[channel].datatype != CUBEMUINT) return 1;
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	2b07      	cmp	r3, #7
 800092a:	d80a      	bhi.n	8000942 <CubeM_setUINTValue+0x2a>
 800092c:	79fa      	ldrb	r2, [r7, #7]
 800092e:	4915      	ldr	r1, [pc, #84]	; (8000984 <CubeM_setUINTValue+0x6c>)
 8000930:	4613      	mov	r3, r2
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	4413      	add	r3, r2
 8000936:	00db      	lsls	r3, r3, #3
 8000938:	440b      	add	r3, r1
 800093a:	3316      	adds	r3, #22
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <CubeM_setUINTValue+0x2e>
 8000942:	2301      	movs	r3, #1
 8000944:	e017      	b.n	8000976 <CubeM_setUINTValue+0x5e>
	cubemChannels[channel].value = value;
 8000946:	79fa      	ldrb	r2, [r7, #7]
 8000948:	edd7 7a00 	vldr	s15, [r7]
 800094c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000950:	490c      	ldr	r1, [pc, #48]	; (8000984 <CubeM_setUINTValue+0x6c>)
 8000952:	4613      	mov	r3, r2
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	4413      	add	r3, r2
 8000958:	00db      	lsls	r3, r3, #3
 800095a:	440b      	add	r3, r1
 800095c:	3318      	adds	r3, #24
 800095e:	ed83 7b00 	vstr	d7, [r3]
	cubemChannels[channel].newvalue = 1;
 8000962:	79fa      	ldrb	r2, [r7, #7]
 8000964:	4907      	ldr	r1, [pc, #28]	; (8000984 <CubeM_setUINTValue+0x6c>)
 8000966:	4613      	mov	r3, r2
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	4413      	add	r3, r2
 800096c:	00db      	lsls	r3, r3, #3
 800096e:	440b      	add	r3, r1
 8000970:	2201      	movs	r2, #1
 8000972:	701a      	strb	r2, [r3, #0]
	return 0;
 8000974:	2300      	movs	r3, #0
}
 8000976:	4618      	mov	r0, r3
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	24000340 	.word	0x24000340

08000988 <CubeM_setINTValue>:

uint8_t CubeM_setINTValue(uint8_t channel, float value) {
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	ed87 0a00 	vstr	s0, [r7]
 8000994:	71fb      	strb	r3, [r7, #7]

	if(channel >= CUBEMONMAXSIGNALS || cubemChannels[channel].datatype != CUBEMINT) return 1;
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	2b07      	cmp	r3, #7
 800099a:	d80a      	bhi.n	80009b2 <CubeM_setINTValue+0x2a>
 800099c:	79fa      	ldrb	r2, [r7, #7]
 800099e:	4915      	ldr	r1, [pc, #84]	; (80009f4 <CubeM_setINTValue+0x6c>)
 80009a0:	4613      	mov	r3, r2
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	4413      	add	r3, r2
 80009a6:	00db      	lsls	r3, r3, #3
 80009a8:	440b      	add	r3, r1
 80009aa:	3316      	adds	r3, #22
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d001      	beq.n	80009b6 <CubeM_setINTValue+0x2e>
 80009b2:	2301      	movs	r3, #1
 80009b4:	e017      	b.n	80009e6 <CubeM_setINTValue+0x5e>
	cubemChannels[channel].value = value;
 80009b6:	79fa      	ldrb	r2, [r7, #7]
 80009b8:	edd7 7a00 	vldr	s15, [r7]
 80009bc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009c0:	490c      	ldr	r1, [pc, #48]	; (80009f4 <CubeM_setINTValue+0x6c>)
 80009c2:	4613      	mov	r3, r2
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	4413      	add	r3, r2
 80009c8:	00db      	lsls	r3, r3, #3
 80009ca:	440b      	add	r3, r1
 80009cc:	3318      	adds	r3, #24
 80009ce:	ed83 7b00 	vstr	d7, [r3]
	cubemChannels[channel].newvalue = 1;
 80009d2:	79fa      	ldrb	r2, [r7, #7]
 80009d4:	4907      	ldr	r1, [pc, #28]	; (80009f4 <CubeM_setINTValue+0x6c>)
 80009d6:	4613      	mov	r3, r2
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	4413      	add	r3, r2
 80009dc:	00db      	lsls	r3, r3, #3
 80009de:	440b      	add	r3, r1
 80009e0:	2201      	movs	r2, #1
 80009e2:	701a      	strb	r2, [r3, #0]
	return 0;
 80009e4:	2300      	movs	r3, #0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	24000340 	.word	0x24000340

080009f8 <CubeM_setFLOATValue>:

uint8_t CubeM_setFLOATValue(uint8_t channel, float value) {
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	ed87 0a00 	vstr	s0, [r7]
 8000a04:	71fb      	strb	r3, [r7, #7]

	if(channel >= CUBEMONMAXSIGNALS || cubemChannels[channel].datatype != CUBEMFLOAT) return 1;
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	2b07      	cmp	r3, #7
 8000a0a:	d80a      	bhi.n	8000a22 <CubeM_setFLOATValue+0x2a>
 8000a0c:	79fa      	ldrb	r2, [r7, #7]
 8000a0e:	4915      	ldr	r1, [pc, #84]	; (8000a64 <CubeM_setFLOATValue+0x6c>)
 8000a10:	4613      	mov	r3, r2
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	4413      	add	r3, r2
 8000a16:	00db      	lsls	r3, r3, #3
 8000a18:	440b      	add	r3, r1
 8000a1a:	3316      	adds	r3, #22
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b02      	cmp	r3, #2
 8000a20:	d001      	beq.n	8000a26 <CubeM_setFLOATValue+0x2e>
 8000a22:	2301      	movs	r3, #1
 8000a24:	e017      	b.n	8000a56 <CubeM_setFLOATValue+0x5e>
	cubemChannels[channel].value = value;
 8000a26:	79fa      	ldrb	r2, [r7, #7]
 8000a28:	edd7 7a00 	vldr	s15, [r7]
 8000a2c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a30:	490c      	ldr	r1, [pc, #48]	; (8000a64 <CubeM_setFLOATValue+0x6c>)
 8000a32:	4613      	mov	r3, r2
 8000a34:	009b      	lsls	r3, r3, #2
 8000a36:	4413      	add	r3, r2
 8000a38:	00db      	lsls	r3, r3, #3
 8000a3a:	440b      	add	r3, r1
 8000a3c:	3318      	adds	r3, #24
 8000a3e:	ed83 7b00 	vstr	d7, [r3]
	cubemChannels[channel].newvalue = 1;
 8000a42:	79fa      	ldrb	r2, [r7, #7]
 8000a44:	4907      	ldr	r1, [pc, #28]	; (8000a64 <CubeM_setFLOATValue+0x6c>)
 8000a46:	4613      	mov	r3, r2
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	4413      	add	r3, r2
 8000a4c:	00db      	lsls	r3, r3, #3
 8000a4e:	440b      	add	r3, r1
 8000a50:	2201      	movs	r2, #1
 8000a52:	701a      	strb	r2, [r3, #0]
	return 0;
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	24000340 	.word	0x24000340

08000a68 <CubeM_setDOUBLEValue>:

uint8_t CubeM_setDOUBLEValue(uint8_t channel, double value) {
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	ed87 0b00 	vstr	d0, [r7]
 8000a74:	73fb      	strb	r3, [r7, #15]

	if(channel >= CUBEMONMAXSIGNALS || cubemChannels[channel].datatype != CUBEMDOUBLE) return 1;
 8000a76:	7bfb      	ldrb	r3, [r7, #15]
 8000a78:	2b07      	cmp	r3, #7
 8000a7a:	d80a      	bhi.n	8000a92 <CubeM_setDOUBLEValue+0x2a>
 8000a7c:	7bfa      	ldrb	r2, [r7, #15]
 8000a7e:	4914      	ldr	r1, [pc, #80]	; (8000ad0 <CubeM_setDOUBLEValue+0x68>)
 8000a80:	4613      	mov	r3, r2
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	4413      	add	r3, r2
 8000a86:	00db      	lsls	r3, r3, #3
 8000a88:	440b      	add	r3, r1
 8000a8a:	3316      	adds	r3, #22
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	2b03      	cmp	r3, #3
 8000a90:	d001      	beq.n	8000a96 <CubeM_setDOUBLEValue+0x2e>
 8000a92:	2301      	movs	r3, #1
 8000a94:	e016      	b.n	8000ac4 <CubeM_setDOUBLEValue+0x5c>
	cubemChannels[channel].value = value;
 8000a96:	7bfa      	ldrb	r2, [r7, #15]
 8000a98:	490d      	ldr	r1, [pc, #52]	; (8000ad0 <CubeM_setDOUBLEValue+0x68>)
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	4413      	add	r3, r2
 8000aa0:	00db      	lsls	r3, r3, #3
 8000aa2:	440b      	add	r3, r1
 8000aa4:	f103 0118 	add.w	r1, r3, #24
 8000aa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000aac:	e9c1 2300 	strd	r2, r3, [r1]
	cubemChannels[channel].newvalue = 1;
 8000ab0:	7bfa      	ldrb	r2, [r7, #15]
 8000ab2:	4907      	ldr	r1, [pc, #28]	; (8000ad0 <CubeM_setDOUBLEValue+0x68>)
 8000ab4:	4613      	mov	r3, r2
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	4413      	add	r3, r2
 8000aba:	00db      	lsls	r3, r3, #3
 8000abc:	440b      	add	r3, r1
 8000abe:	2201      	movs	r2, #1
 8000ac0:	701a      	strb	r2, [r3, #0]
	return 0;
 8000ac2:	2300      	movs	r3, #0
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3714      	adds	r7, #20
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	24000340 	.word	0x24000340

08000ad4 <CubeM_setLDOUBLEValue>:

uint8_t CubeM_setLDOUBLEValue(uint8_t channel, long double value) {
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	ed87 0b00 	vstr	d0, [r7]
 8000ae0:	73fb      	strb	r3, [r7, #15]

	if(channel >= CUBEMONMAXSIGNALS || cubemChannels[channel].datatype != CUBEMLDOUBLE) return 1;
 8000ae2:	7bfb      	ldrb	r3, [r7, #15]
 8000ae4:	2b07      	cmp	r3, #7
 8000ae6:	d80a      	bhi.n	8000afe <CubeM_setLDOUBLEValue+0x2a>
 8000ae8:	7bfa      	ldrb	r2, [r7, #15]
 8000aea:	4914      	ldr	r1, [pc, #80]	; (8000b3c <CubeM_setLDOUBLEValue+0x68>)
 8000aec:	4613      	mov	r3, r2
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	4413      	add	r3, r2
 8000af2:	00db      	lsls	r3, r3, #3
 8000af4:	440b      	add	r3, r1
 8000af6:	3316      	adds	r3, #22
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2b04      	cmp	r3, #4
 8000afc:	d001      	beq.n	8000b02 <CubeM_setLDOUBLEValue+0x2e>
 8000afe:	2301      	movs	r3, #1
 8000b00:	e016      	b.n	8000b30 <CubeM_setLDOUBLEValue+0x5c>
	cubemChannels[channel].value = value;
 8000b02:	7bfa      	ldrb	r2, [r7, #15]
 8000b04:	490d      	ldr	r1, [pc, #52]	; (8000b3c <CubeM_setLDOUBLEValue+0x68>)
 8000b06:	4613      	mov	r3, r2
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	4413      	add	r3, r2
 8000b0c:	00db      	lsls	r3, r3, #3
 8000b0e:	440b      	add	r3, r1
 8000b10:	f103 0118 	add.w	r1, r3, #24
 8000b14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000b18:	e9c1 2300 	strd	r2, r3, [r1]
	cubemChannels[channel].newvalue = 1;
 8000b1c:	7bfa      	ldrb	r2, [r7, #15]
 8000b1e:	4907      	ldr	r1, [pc, #28]	; (8000b3c <CubeM_setLDOUBLEValue+0x68>)
 8000b20:	4613      	mov	r3, r2
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	4413      	add	r3, r2
 8000b26:	00db      	lsls	r3, r3, #3
 8000b28:	440b      	add	r3, r1
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	701a      	strb	r2, [r3, #0]
	return 0;
 8000b2e:	2300      	movs	r3, #0
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3714      	adds	r7, #20
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	24000340 	.word	0x24000340

08000b40 <CubeM_sendCurValues>:

uint8_t CubeM_sendCurValues() {
 8000b40:	b590      	push	{r4, r7, lr}
 8000b42:	b09b      	sub	sp, #108	; 0x6c
 8000b44:	af04      	add	r7, sp, #16
	CubeM_clearBuffer();
 8000b46:	f7ff fced 	bl	8000524 <CubeM_clearBuffer>

	uint8_t tempbuffer[CUBEMONSMALLBUFSIZE*4];
	uint8_t datatowrite = 0;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint32_t tempsize = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	653b      	str	r3, [r7, #80]	; 0x50

	for(uint8_t i=0; i<CUBEMONMAXSIGNALS; i++) {
 8000b54:	2300      	movs	r3, #0
 8000b56:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8000b5a:	e13a      	b.n	8000dd2 <CubeM_sendCurValues+0x292>
		if(cubemChannels[i].newvalue == 0) continue;
 8000b5c:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000b60:	49a4      	ldr	r1, [pc, #656]	; (8000df4 <CubeM_sendCurValues+0x2b4>)
 8000b62:	4613      	mov	r3, r2
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	4413      	add	r3, r2
 8000b68:	00db      	lsls	r3, r3, #3
 8000b6a:	440b      	add	r3, r1
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	f000 8127 	beq.w	8000dc2 <CubeM_sendCurValues+0x282>

		switch(cubemChannels[i].datatype) {
 8000b74:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000b78:	499e      	ldr	r1, [pc, #632]	; (8000df4 <CubeM_sendCurValues+0x2b4>)
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	4413      	add	r3, r2
 8000b80:	00db      	lsls	r3, r3, #3
 8000b82:	440b      	add	r3, r1
 8000b84:	3316      	adds	r3, #22
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b04      	cmp	r3, #4
 8000b8a:	f200 811c 	bhi.w	8000dc6 <CubeM_sendCurValues+0x286>
 8000b8e:	a201      	add	r2, pc, #4	; (adr r2, 8000b94 <CubeM_sendCurValues+0x54>)
 8000b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b94:	08000ba9 	.word	0x08000ba9
 8000b98:	08000bed 	.word	0x08000bed
 8000b9c:	08000c31 	.word	0x08000c31
 8000ba0:	08000c8d 	.word	0x08000c8d
 8000ba4:	08000ce1 	.word	0x08000ce1
		case CUBEMUINT:
			sprintf((char*)tempbuffer, "%s%s%s%ld", delimiter, cubemChannels[i].name, connector, (uint32_t)cubemChannels[i].value);
 8000ba8:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000bac:	4613      	mov	r3, r2
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	4413      	add	r3, r2
 8000bb2:	00db      	lsls	r3, r3, #3
 8000bb4:	4a8f      	ldr	r2, [pc, #572]	; (8000df4 <CubeM_sendCurValues+0x2b4>)
 8000bb6:	4413      	add	r3, r2
 8000bb8:	1c99      	adds	r1, r3, #2
 8000bba:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000bbe:	488d      	ldr	r0, [pc, #564]	; (8000df4 <CubeM_sendCurValues+0x2b4>)
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	4413      	add	r3, r2
 8000bc6:	00db      	lsls	r3, r3, #3
 8000bc8:	4403      	add	r3, r0
 8000bca:	3318      	adds	r3, #24
 8000bcc:	ed93 7b00 	vldr	d7, [r3]
 8000bd0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000bd4:	ee17 3a90 	vmov	r3, s15
 8000bd8:	4638      	mov	r0, r7
 8000bda:	9301      	str	r3, [sp, #4]
 8000bdc:	4b86      	ldr	r3, [pc, #536]	; (8000df8 <CubeM_sendCurValues+0x2b8>)
 8000bde:	9300      	str	r3, [sp, #0]
 8000be0:	460b      	mov	r3, r1
 8000be2:	4a86      	ldr	r2, [pc, #536]	; (8000dfc <CubeM_sendCurValues+0x2bc>)
 8000be4:	4986      	ldr	r1, [pc, #536]	; (8000e00 <CubeM_sendCurValues+0x2c0>)
 8000be6:	f00c fa7f 	bl	800d0e8 <siprintf>
			break;
 8000bea:	e0a3      	b.n	8000d34 <CubeM_sendCurValues+0x1f4>
		case CUBEMINT:
			sprintf((char*)tempbuffer, "%s%s%s%ld", delimiter, cubemChannels[i].name, connector, (int32_t)cubemChannels[i].value);
 8000bec:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	4413      	add	r3, r2
 8000bf6:	00db      	lsls	r3, r3, #3
 8000bf8:	4a7e      	ldr	r2, [pc, #504]	; (8000df4 <CubeM_sendCurValues+0x2b4>)
 8000bfa:	4413      	add	r3, r2
 8000bfc:	1c99      	adds	r1, r3, #2
 8000bfe:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000c02:	487c      	ldr	r0, [pc, #496]	; (8000df4 <CubeM_sendCurValues+0x2b4>)
 8000c04:	4613      	mov	r3, r2
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	4413      	add	r3, r2
 8000c0a:	00db      	lsls	r3, r3, #3
 8000c0c:	4403      	add	r3, r0
 8000c0e:	3318      	adds	r3, #24
 8000c10:	ed93 7b00 	vldr	d7, [r3]
 8000c14:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000c18:	ee17 3a90 	vmov	r3, s15
 8000c1c:	4638      	mov	r0, r7
 8000c1e:	9301      	str	r3, [sp, #4]
 8000c20:	4b75      	ldr	r3, [pc, #468]	; (8000df8 <CubeM_sendCurValues+0x2b8>)
 8000c22:	9300      	str	r3, [sp, #0]
 8000c24:	460b      	mov	r3, r1
 8000c26:	4a75      	ldr	r2, [pc, #468]	; (8000dfc <CubeM_sendCurValues+0x2bc>)
 8000c28:	4975      	ldr	r1, [pc, #468]	; (8000e00 <CubeM_sendCurValues+0x2c0>)
 8000c2a:	f00c fa5d 	bl	800d0e8 <siprintf>
			break;
 8000c2e:	e081      	b.n	8000d34 <CubeM_sendCurValues+0x1f4>
		case CUBEMFLOAT:
			sprintf((char*)tempbuffer, "%s%s%s%.*f", delimiter, cubemChannels[i].name, connector, (int)cubemChannels[i].precision, (float)cubemChannels[i].value);
 8000c30:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000c34:	4613      	mov	r3, r2
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	4413      	add	r3, r2
 8000c3a:	00db      	lsls	r3, r3, #3
 8000c3c:	4a6d      	ldr	r2, [pc, #436]	; (8000df4 <CubeM_sendCurValues+0x2b4>)
 8000c3e:	4413      	add	r3, r2
 8000c40:	1c9c      	adds	r4, r3, #2
 8000c42:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000c46:	496b      	ldr	r1, [pc, #428]	; (8000df4 <CubeM_sendCurValues+0x2b4>)
 8000c48:	4613      	mov	r3, r2
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	4413      	add	r3, r2
 8000c4e:	00db      	lsls	r3, r3, #3
 8000c50:	440b      	add	r3, r1
 8000c52:	3320      	adds	r3, #32
 8000c54:	6819      	ldr	r1, [r3, #0]
 8000c56:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000c5a:	4866      	ldr	r0, [pc, #408]	; (8000df4 <CubeM_sendCurValues+0x2b4>)
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	4413      	add	r3, r2
 8000c62:	00db      	lsls	r3, r3, #3
 8000c64:	4403      	add	r3, r0
 8000c66:	3318      	adds	r3, #24
 8000c68:	ed93 7b00 	vldr	d7, [r3]
 8000c6c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c70:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c74:	4638      	mov	r0, r7
 8000c76:	ed8d 7b02 	vstr	d7, [sp, #8]
 8000c7a:	9101      	str	r1, [sp, #4]
 8000c7c:	4b5e      	ldr	r3, [pc, #376]	; (8000df8 <CubeM_sendCurValues+0x2b8>)
 8000c7e:	9300      	str	r3, [sp, #0]
 8000c80:	4623      	mov	r3, r4
 8000c82:	4a5e      	ldr	r2, [pc, #376]	; (8000dfc <CubeM_sendCurValues+0x2bc>)
 8000c84:	495f      	ldr	r1, [pc, #380]	; (8000e04 <CubeM_sendCurValues+0x2c4>)
 8000c86:	f00c fa2f 	bl	800d0e8 <siprintf>
			break;
 8000c8a:	e053      	b.n	8000d34 <CubeM_sendCurValues+0x1f4>
		case CUBEMDOUBLE:
			sprintf((char*)tempbuffer, "%s%s%s%.*lf", delimiter, cubemChannels[i].name, connector, (int)cubemChannels[i].precision, (double)cubemChannels[i].value);
 8000c8c:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000c90:	4613      	mov	r3, r2
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	4413      	add	r3, r2
 8000c96:	00db      	lsls	r3, r3, #3
 8000c98:	4a56      	ldr	r2, [pc, #344]	; (8000df4 <CubeM_sendCurValues+0x2b4>)
 8000c9a:	4413      	add	r3, r2
 8000c9c:	1c9c      	adds	r4, r3, #2
 8000c9e:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000ca2:	4954      	ldr	r1, [pc, #336]	; (8000df4 <CubeM_sendCurValues+0x2b4>)
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	4413      	add	r3, r2
 8000caa:	00db      	lsls	r3, r3, #3
 8000cac:	440b      	add	r3, r1
 8000cae:	3320      	adds	r3, #32
 8000cb0:	6819      	ldr	r1, [r3, #0]
 8000cb2:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000cb6:	484f      	ldr	r0, [pc, #316]	; (8000df4 <CubeM_sendCurValues+0x2b4>)
 8000cb8:	4613      	mov	r3, r2
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	4413      	add	r3, r2
 8000cbe:	00db      	lsls	r3, r3, #3
 8000cc0:	4403      	add	r3, r0
 8000cc2:	3318      	adds	r3, #24
 8000cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cc8:	4638      	mov	r0, r7
 8000cca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000cce:	9101      	str	r1, [sp, #4]
 8000cd0:	4b49      	ldr	r3, [pc, #292]	; (8000df8 <CubeM_sendCurValues+0x2b8>)
 8000cd2:	9300      	str	r3, [sp, #0]
 8000cd4:	4623      	mov	r3, r4
 8000cd6:	4a49      	ldr	r2, [pc, #292]	; (8000dfc <CubeM_sendCurValues+0x2bc>)
 8000cd8:	494b      	ldr	r1, [pc, #300]	; (8000e08 <CubeM_sendCurValues+0x2c8>)
 8000cda:	f00c fa05 	bl	800d0e8 <siprintf>
			break;
 8000cde:	e029      	b.n	8000d34 <CubeM_sendCurValues+0x1f4>
		case CUBEMLDOUBLE:
			sprintf((char*)tempbuffer, "%s%s%s%.*Lf", delimiter, cubemChannels[i].name, connector, (int)cubemChannels[i].precision, (long double)cubemChannels[i].value);
 8000ce0:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	4413      	add	r3, r2
 8000cea:	00db      	lsls	r3, r3, #3
 8000cec:	4a41      	ldr	r2, [pc, #260]	; (8000df4 <CubeM_sendCurValues+0x2b4>)
 8000cee:	4413      	add	r3, r2
 8000cf0:	1c9c      	adds	r4, r3, #2
 8000cf2:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000cf6:	493f      	ldr	r1, [pc, #252]	; (8000df4 <CubeM_sendCurValues+0x2b4>)
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	4413      	add	r3, r2
 8000cfe:	00db      	lsls	r3, r3, #3
 8000d00:	440b      	add	r3, r1
 8000d02:	3320      	adds	r3, #32
 8000d04:	6819      	ldr	r1, [r3, #0]
 8000d06:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000d0a:	483a      	ldr	r0, [pc, #232]	; (8000df4 <CubeM_sendCurValues+0x2b4>)
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	4413      	add	r3, r2
 8000d12:	00db      	lsls	r3, r3, #3
 8000d14:	4403      	add	r3, r0
 8000d16:	3318      	adds	r3, #24
 8000d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d1c:	4638      	mov	r0, r7
 8000d1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000d22:	9101      	str	r1, [sp, #4]
 8000d24:	4b34      	ldr	r3, [pc, #208]	; (8000df8 <CubeM_sendCurValues+0x2b8>)
 8000d26:	9300      	str	r3, [sp, #0]
 8000d28:	4623      	mov	r3, r4
 8000d2a:	4a34      	ldr	r2, [pc, #208]	; (8000dfc <CubeM_sendCurValues+0x2bc>)
 8000d2c:	4937      	ldr	r1, [pc, #220]	; (8000e0c <CubeM_sendCurValues+0x2cc>)
 8000d2e:	f00c f9db 	bl	800d0e8 <siprintf>
			break;
 8000d32:	bf00      	nop
		default:
			continue;
		}

		tempsize = usedbuffer + strlen((char*)tempbuffer) - (emptybuffer * dellen);
 8000d34:	463b      	mov	r3, r7
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff fb22 	bl	8000380 <strlen>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	4b34      	ldr	r3, [pc, #208]	; (8000e10 <CubeM_sendCurValues+0x2d0>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4413      	add	r3, r2
 8000d44:	4a33      	ldr	r2, [pc, #204]	; (8000e14 <CubeM_sendCurValues+0x2d4>)
 8000d46:	7812      	ldrb	r2, [r2, #0]
 8000d48:	4611      	mov	r1, r2
 8000d4a:	4a33      	ldr	r2, [pc, #204]	; (8000e18 <CubeM_sendCurValues+0x2d8>)
 8000d4c:	7812      	ldrb	r2, [r2, #0]
 8000d4e:	fb01 f202 	mul.w	r2, r1, r2
 8000d52:	1a9b      	subs	r3, r3, r2
 8000d54:	653b      	str	r3, [r7, #80]	; 0x50

		if(tempsize < buffersize) {
 8000d56:	4b31      	ldr	r3, [pc, #196]	; (8000e1c <CubeM_sendCurValues+0x2dc>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d21b      	bcs.n	8000d98 <CubeM_sendCurValues+0x258>
			strcpy((char*)(buffer + (usedbuffer)), (char*)(tempbuffer + (emptybuffer * dellen)));
 8000d60:	4b2f      	ldr	r3, [pc, #188]	; (8000e20 <CubeM_sendCurValues+0x2e0>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4b2a      	ldr	r3, [pc, #168]	; (8000e10 <CubeM_sendCurValues+0x2d0>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	441a      	add	r2, r3
 8000d6a:	4b2a      	ldr	r3, [pc, #168]	; (8000e14 <CubeM_sendCurValues+0x2d4>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4b29      	ldr	r3, [pc, #164]	; (8000e18 <CubeM_sendCurValues+0x2d8>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	fb01 f303 	mul.w	r3, r1, r3
 8000d78:	4619      	mov	r1, r3
 8000d7a:	463b      	mov	r3, r7
 8000d7c:	440b      	add	r3, r1
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4610      	mov	r0, r2
 8000d82:	f00c faa4 	bl	800d2ce <strcpy>
			datatowrite = 1;
 8000d86:	2301      	movs	r3, #1
 8000d88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			usedbuffer = tempsize;
 8000d8c:	4a20      	ldr	r2, [pc, #128]	; (8000e10 <CubeM_sendCurValues+0x2d0>)
 8000d8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d90:	6013      	str	r3, [r2, #0]
			emptybuffer = 0;
 8000d92:	4b20      	ldr	r3, [pc, #128]	; (8000e14 <CubeM_sendCurValues+0x2d4>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	701a      	strb	r2, [r3, #0]
		}
		cubemChannels[i].newvalue = cubemChannels[i].reuseoldvalue;
 8000d98:	f897 1056 	ldrb.w	r1, [r7, #86]	; 0x56
 8000d9c:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000da0:	4814      	ldr	r0, [pc, #80]	; (8000df4 <CubeM_sendCurValues+0x2b4>)
 8000da2:	460b      	mov	r3, r1
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	440b      	add	r3, r1
 8000da8:	00db      	lsls	r3, r3, #3
 8000daa:	4403      	add	r3, r0
 8000dac:	3301      	adds	r3, #1
 8000dae:	7818      	ldrb	r0, [r3, #0]
 8000db0:	4910      	ldr	r1, [pc, #64]	; (8000df4 <CubeM_sendCurValues+0x2b4>)
 8000db2:	4613      	mov	r3, r2
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	4413      	add	r3, r2
 8000db8:	00db      	lsls	r3, r3, #3
 8000dba:	440b      	add	r3, r1
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	701a      	strb	r2, [r3, #0]
 8000dc0:	e002      	b.n	8000dc8 <CubeM_sendCurValues+0x288>
		if(cubemChannels[i].newvalue == 0) continue;
 8000dc2:	bf00      	nop
 8000dc4:	e000      	b.n	8000dc8 <CubeM_sendCurValues+0x288>
			continue;
 8000dc6:	bf00      	nop
	for(uint8_t i=0; i<CUBEMONMAXSIGNALS; i++) {
 8000dc8:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000dcc:	3301      	adds	r3, #1
 8000dce:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8000dd2:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000dd6:	2b07      	cmp	r3, #7
 8000dd8:	f67f aec0 	bls.w	8000b5c <CubeM_sendCurValues+0x1c>
	}

	if(datatowrite == 1) {
 8000ddc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d101      	bne.n	8000de8 <CubeM_sendCurValues+0x2a8>
		CubeM_sendBuffer();
 8000de4:	f7ff fd2c 	bl	8000840 <CubeM_sendBuffer>
	}

	return 0;
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	375c      	adds	r7, #92	; 0x5c
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd90      	pop	{r4, r7, pc}
 8000df2:	bf00      	nop
 8000df4:	24000340 	.word	0x24000340
 8000df8:	24000018 	.word	0x24000018
 8000dfc:	24000004 	.word	0x24000004
 8000e00:	0800f160 	.word	0x0800f160
 8000e04:	0800f16c 	.word	0x0800f16c
 8000e08:	0800f178 	.word	0x0800f178
 8000e0c:	0800f184 	.word	0x0800f184
 8000e10:	24000334 	.word	0x24000334
 8000e14:	24000000 	.word	0x24000000
 8000e18:	2400033c 	.word	0x2400033c
 8000e1c:	24000330 	.word	0x24000330
 8000e20:	24000338 	.word	0x24000338

08000e24 <CubeM_DEBUGERRORHANDLER>:

#if CUBEMDEBUG

void CubeM_DEBUGERRORHANDLER(uint32_t errorcode) {
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
	asm("NOP");
 8000e2c:	bf00      	nop
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	0000      	movs	r0, r0
 8000e3c:	0000      	movs	r0, r0
	...

08000e40 <CubeM_runDebugTests>:

uint8_t CubeM_runDebugTests() {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08a      	sub	sp, #40	; 0x28
 8000e44:	af00      	add	r7, sp, #0

	uint32_t errornumber = 0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t tempbuffersize = 100;
 8000e4a:	2364      	movs	r3, #100	; 0x64
 8000e4c:	61bb      	str	r3, [r7, #24]
	if(CubeM_Init(tempbuffersize) != tempbuffersize) CubeM_DEBUGERRORHANDLER(errornumber);
 8000e4e:	69b8      	ldr	r0, [r7, #24]
 8000e50:	f7ff fb12 	bl	8000478 <CubeM_Init>
 8000e54:	4602      	mov	r2, r0
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d002      	beq.n	8000e62 <CubeM_runDebugTests+0x22>
 8000e5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000e5e:	f7ff ffe1 	bl	8000e24 <CubeM_DEBUGERRORHANDLER>

	errornumber++;
 8000e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e64:	3301      	adds	r3, #1
 8000e66:	627b      	str	r3, [r7, #36]	; 0x24
	if(CubeM_setChannelname(0, (uint8_t*)"Test0") != 0) CubeM_DEBUGERRORHANDLER(errornumber);
 8000e68:	49a7      	ldr	r1, [pc, #668]	; (8001108 <CubeM_runDebugTests+0x2c8>)
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f7ff fb7c 	bl	8000568 <CubeM_setChannelname>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d002      	beq.n	8000e7c <CubeM_runDebugTests+0x3c>
 8000e76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000e78:	f7ff ffd4 	bl	8000e24 <CubeM_DEBUGERRORHANDLER>

	errornumber++;
 8000e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7e:	3301      	adds	r3, #1
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
	if(CubeM_attendUIntValue(0, 123) != 0) CubeM_DEBUGERRORHANDLER(errornumber);
 8000e82:	217b      	movs	r1, #123	; 0x7b
 8000e84:	2000      	movs	r0, #0
 8000e86:	f7ff fb97 	bl	80005b8 <CubeM_attendUIntValue>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d002      	beq.n	8000e96 <CubeM_runDebugTests+0x56>
 8000e90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000e92:	f7ff ffc7 	bl	8000e24 <CubeM_DEBUGERRORHANDLER>

	errornumber++;
 8000e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e98:	3301      	adds	r3, #1
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
	if(CubeM_attendUIntValue(0, 234) != 0) CubeM_DEBUGERRORHANDLER(errornumber);
 8000e9c:	21ea      	movs	r1, #234	; 0xea
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f7ff fb8a 	bl	80005b8 <CubeM_attendUIntValue>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d002      	beq.n	8000eb0 <CubeM_runDebugTests+0x70>
 8000eaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000eac:	f7ff ffba 	bl	8000e24 <CubeM_DEBUGERRORHANDLER>

	errornumber++;
 8000eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
	if(CubeM_attendUIntValue(1, 123) != 0) CubeM_DEBUGERRORHANDLER(errornumber);
 8000eb6:	217b      	movs	r1, #123	; 0x7b
 8000eb8:	2001      	movs	r0, #1
 8000eba:	f7ff fb7d 	bl	80005b8 <CubeM_attendUIntValue>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d002      	beq.n	8000eca <CubeM_runDebugTests+0x8a>
 8000ec4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000ec6:	f7ff ffad 	bl	8000e24 <CubeM_DEBUGERRORHANDLER>

	errornumber++;
 8000eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ecc:	3301      	adds	r3, #1
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
	if(CubeM_attendUIntValue(1, 234) != 0) CubeM_DEBUGERRORHANDLER(errornumber);
 8000ed0:	21ea      	movs	r1, #234	; 0xea
 8000ed2:	2001      	movs	r0, #1
 8000ed4:	f7ff fb70 	bl	80005b8 <CubeM_attendUIntValue>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d002      	beq.n	8000ee4 <CubeM_runDebugTests+0xa4>
 8000ede:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000ee0:	f7ff ffa0 	bl	8000e24 <CubeM_DEBUGERRORHANDLER>

	errornumber++;
 8000ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
	if(CubeM_attendIntValue(1, -123) != 0) CubeM_DEBUGERRORHANDLER(errornumber);
 8000eea:	f06f 017a 	mvn.w	r1, #122	; 0x7a
 8000eee:	2001      	movs	r0, #1
 8000ef0:	f7ff fbc8 	bl	8000684 <CubeM_attendIntValue>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d002      	beq.n	8000f00 <CubeM_runDebugTests+0xc0>
 8000efa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000efc:	f7ff ff92 	bl	8000e24 <CubeM_DEBUGERRORHANDLER>

	errornumber++;
 8000f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f02:	3301      	adds	r3, #1
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
	if(CubeM_attendFloatValue(2, 0.123, 3) != 0) CubeM_DEBUGERRORHANDLER(errornumber);
 8000f06:	2103      	movs	r1, #3
 8000f08:	ed9f 0a80 	vldr	s0, [pc, #512]	; 800110c <CubeM_runDebugTests+0x2cc>
 8000f0c:	2002      	movs	r0, #2
 8000f0e:	f7ff fc23 	bl	8000758 <CubeM_attendFloatValue>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d002      	beq.n	8000f1e <CubeM_runDebugTests+0xde>
 8000f18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f1a:	f7ff ff83 	bl	8000e24 <CubeM_DEBUGERRORHANDLER>

	errornumber++;
 8000f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f20:	3301      	adds	r3, #1
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24
	if(CubeM_attendFloatValue(2, 0.123, 2) != 0) CubeM_DEBUGERRORHANDLER(errornumber);
 8000f24:	2102      	movs	r1, #2
 8000f26:	ed9f 0a79 	vldr	s0, [pc, #484]	; 800110c <CubeM_runDebugTests+0x2cc>
 8000f2a:	2002      	movs	r0, #2
 8000f2c:	f7ff fc14 	bl	8000758 <CubeM_attendFloatValue>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d002      	beq.n	8000f3c <CubeM_runDebugTests+0xfc>
 8000f36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f38:	f7ff ff74 	bl	8000e24 <CubeM_DEBUGERRORHANDLER>

	uint8_t debugchnumbers[] = {0, 1, 2, 3, 4};
 8000f3c:	4a74      	ldr	r2, [pc, #464]	; (8001110 <CubeM_runDebugTests+0x2d0>)
 8000f3e:	f107 0310 	add.w	r3, r7, #16
 8000f42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f46:	6018      	str	r0, [r3, #0]
 8000f48:	3304      	adds	r3, #4
 8000f4a:	7019      	strb	r1, [r3, #0]
	cubeMDataType debugdatatypes[] = {CUBEMUINT, CUBEMINT, CUBEMFLOAT, CUBEMDOUBLE, CUBEMLDOUBLE};
 8000f4c:	4a71      	ldr	r2, [pc, #452]	; (8001114 <CubeM_runDebugTests+0x2d4>)
 8000f4e:	f107 0308 	add.w	r3, r7, #8
 8000f52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f56:	6018      	str	r0, [r3, #0]
 8000f58:	3304      	adds	r3, #4
 8000f5a:	7019      	strb	r1, [r3, #0]
	uint8_t debugprecisionvalues[] = {2, 3, 4, 5, 6};
 8000f5c:	4a6e      	ldr	r2, [pc, #440]	; (8001118 <CubeM_runDebugTests+0x2d8>)
 8000f5e:	463b      	mov	r3, r7
 8000f60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f64:	6018      	str	r0, [r3, #0]
 8000f66:	3304      	adds	r3, #4
 8000f68:	7019      	strb	r1, [r3, #0]

	for(uint8_t i=0; i<CUBEMNROFDATATYPES; i++) {
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000f70:	e054      	b.n	800101c <CubeM_runDebugTests+0x1dc>
		errornumber++;
 8000f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f74:	3301      	adds	r3, #1
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
		if(CubeM_setDataType(debugchnumbers[i], debugdatatypes[i])!= 0) CubeM_DEBUGERRORHANDLER(errornumber);
 8000f78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f7c:	3328      	adds	r3, #40	; 0x28
 8000f7e:	443b      	add	r3, r7
 8000f80:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8000f84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f88:	3328      	adds	r3, #40	; 0x28
 8000f8a:	443b      	add	r3, r7
 8000f8c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8000f90:	4619      	mov	r1, r3
 8000f92:	4610      	mov	r0, r2
 8000f94:	f7ff fc7a 	bl	800088c <CubeM_setDataType>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d002      	beq.n	8000fa4 <CubeM_runDebugTests+0x164>
 8000f9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000fa0:	f7ff ff40 	bl	8000e24 <CubeM_DEBUGERRORHANDLER>

		errornumber++;
 8000fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
		if(cubemChannels[debugchnumbers[i]].datatype != debugdatatypes[i]) CubeM_DEBUGERRORHANDLER(errornumber);
 8000faa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000fae:	3328      	adds	r3, #40	; 0x28
 8000fb0:	443b      	add	r3, r7
 8000fb2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4a58      	ldr	r2, [pc, #352]	; (800111c <CubeM_runDebugTests+0x2dc>)
 8000fba:	460b      	mov	r3, r1
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	440b      	add	r3, r1
 8000fc0:	00db      	lsls	r3, r3, #3
 8000fc2:	4413      	add	r3, r2
 8000fc4:	3316      	adds	r3, #22
 8000fc6:	781a      	ldrb	r2, [r3, #0]
 8000fc8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000fcc:	3328      	adds	r3, #40	; 0x28
 8000fce:	443b      	add	r3, r7
 8000fd0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d002      	beq.n	8000fde <CubeM_runDebugTests+0x19e>
 8000fd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000fda:	f7ff ff23 	bl	8000e24 <CubeM_DEBUGERRORHANDLER>

		errornumber++;
 8000fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24
		if(CubeM_setPrecision(debugchnumbers[i], debugprecisionvalues[i])!= 0) CubeM_DEBUGERRORHANDLER(errornumber);
 8000fe4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000fe8:	3328      	adds	r3, #40	; 0x28
 8000fea:	443b      	add	r3, r7
 8000fec:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8000ff0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ff4:	3328      	adds	r3, #40	; 0x28
 8000ff6:	443b      	add	r3, r7
 8000ff8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000ffc:	b25b      	sxtb	r3, r3
 8000ffe:	4619      	mov	r1, r3
 8001000:	4610      	mov	r0, r2
 8001002:	f7ff fc67 	bl	80008d4 <CubeM_setPrecision>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d002      	beq.n	8001012 <CubeM_runDebugTests+0x1d2>
 800100c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800100e:	f7ff ff09 	bl	8000e24 <CubeM_DEBUGERRORHANDLER>
	for(uint8_t i=0; i<CUBEMNROFDATATYPES; i++) {
 8001012:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001016:	3301      	adds	r3, #1
 8001018:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800101c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001020:	2b04      	cmp	r3, #4
 8001022:	d9a6      	bls.n	8000f72 <CubeM_runDebugTests+0x132>
	}

	errornumber++;
 8001024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001026:	3301      	adds	r3, #1
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
	if(CubeM_setValue(debugchnumbers[0], (uint32_t)123) != 0) CubeM_DEBUGERRORHANDLER(errornumber);
 800102a:	7c3b      	ldrb	r3, [r7, #16]
 800102c:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 8001120 <CubeM_runDebugTests+0x2e0>
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fc71 	bl	8000918 <CubeM_setUINTValue>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d002      	beq.n	8001042 <CubeM_runDebugTests+0x202>
 800103c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800103e:	f7ff fef1 	bl	8000e24 <CubeM_DEBUGERRORHANDLER>

	errornumber++;
 8001042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001044:	3301      	adds	r3, #1
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
	if(CubeM_setValue(debugchnumbers[1], (int32_t)-123) != 0) CubeM_DEBUGERRORHANDLER(errornumber);
 8001048:	7c7b      	ldrb	r3, [r7, #17]
 800104a:	ed9f 0a36 	vldr	s0, [pc, #216]	; 8001124 <CubeM_runDebugTests+0x2e4>
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff fc9a 	bl	8000988 <CubeM_setINTValue>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d002      	beq.n	8001060 <CubeM_runDebugTests+0x220>
 800105a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800105c:	f7ff fee2 	bl	8000e24 <CubeM_DEBUGERRORHANDLER>

	errornumber++;
 8001060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001062:	3301      	adds	r3, #1
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
	if(CubeM_setValue(debugchnumbers[2], (float)0.123456789) != 0) CubeM_DEBUGERRORHANDLER(errornumber);
 8001066:	7cbb      	ldrb	r3, [r7, #18]
 8001068:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8001128 <CubeM_runDebugTests+0x2e8>
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fcc3 	bl	80009f8 <CubeM_setFLOATValue>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d002      	beq.n	800107e <CubeM_runDebugTests+0x23e>
 8001078:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800107a:	f7ff fed3 	bl	8000e24 <CubeM_DEBUGERRORHANDLER>

	errornumber++;
 800107e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001080:	3301      	adds	r3, #1
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
	if(CubeM_setValue(debugchnumbers[3], (double)0.123456789) != 0) CubeM_DEBUGERRORHANDLER(errornumber);
 8001084:	7cfb      	ldrb	r3, [r7, #19]
 8001086:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8001100 <CubeM_runDebugTests+0x2c0>
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fcec 	bl	8000a68 <CubeM_setDOUBLEValue>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d002      	beq.n	800109c <CubeM_runDebugTests+0x25c>
 8001096:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001098:	f7ff fec4 	bl	8000e24 <CubeM_DEBUGERRORHANDLER>

	errornumber++;
 800109c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109e:	3301      	adds	r3, #1
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
	if(CubeM_setValue(debugchnumbers[4], (long double)0.123456789) != 0) CubeM_DEBUGERRORHANDLER(errornumber);
 80010a2:	7d3b      	ldrb	r3, [r7, #20]
 80010a4:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8001100 <CubeM_runDebugTests+0x2c0>
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fd13 	bl	8000ad4 <CubeM_setLDOUBLEValue>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d002      	beq.n	80010ba <CubeM_runDebugTests+0x27a>
 80010b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010b6:	f7ff feb5 	bl	8000e24 <CubeM_DEBUGERRORHANDLER>

	errornumber++;
 80010ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010bc:	3301      	adds	r3, #1
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
	if(CubeM_setValue(debugchnumbers[0], (float)0.123456789) != 1) CubeM_DEBUGERRORHANDLER(errornumber);
 80010c0:	7c3b      	ldrb	r3, [r7, #16]
 80010c2:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8001128 <CubeM_runDebugTests+0x2e8>
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fc96 	bl	80009f8 <CubeM_setFLOATValue>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d002      	beq.n	80010d8 <CubeM_runDebugTests+0x298>
 80010d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010d4:	f7ff fea6 	bl	8000e24 <CubeM_DEBUGERRORHANDLER>

	errornumber++;
 80010d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010da:	3301      	adds	r3, #1
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
	if(CubeM_sendCurValues() != 0) CubeM_DEBUGERRORHANDLER(errornumber);
 80010de:	f7ff fd2f 	bl	8000b40 <CubeM_sendCurValues>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d002      	beq.n	80010ee <CubeM_runDebugTests+0x2ae>
 80010e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010ea:	f7ff fe9b 	bl	8000e24 <CubeM_DEBUGERRORHANDLER>

	uint8_t tempstatus = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	uint32_t tempcounter = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]
	while(tempstatus == 0) {
 80010f8:	e02f      	b.n	800115a <CubeM_runDebugTests+0x31a>
 80010fa:	bf00      	nop
 80010fc:	f3af 8000 	nop.w
 8001100:	3739635f 	.word	0x3739635f
 8001104:	3fbf9add 	.word	0x3fbf9add
 8001108:	0800f190 	.word	0x0800f190
 800110c:	3dfbe76d 	.word	0x3dfbe76d
 8001110:	0800f198 	.word	0x0800f198
 8001114:	0800f1a0 	.word	0x0800f1a0
 8001118:	0800f1a8 	.word	0x0800f1a8
 800111c:	24000340 	.word	0x24000340
 8001120:	42f60000 	.word	0x42f60000
 8001124:	c2f60000 	.word	0xc2f60000
 8001128:	3dfcd6ea 	.word	0x3dfcd6ea
		tempstatus = CubeM_attendFloatValue(2, 0.123+tempcounter, 2);
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	ee07 3a90 	vmov	s15, r3
 8001132:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001136:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 80011e0 <CubeM_runDebugTests+0x3a0>
 800113a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800113e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001142:	2102      	movs	r1, #2
 8001144:	eeb0 0a67 	vmov.f32	s0, s15
 8001148:	2002      	movs	r0, #2
 800114a:	f7ff fb05 	bl	8000758 <CubeM_attendFloatValue>
 800114e:	4603      	mov	r3, r0
 8001150:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		tempcounter++;
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	3301      	adds	r3, #1
 8001158:	61fb      	str	r3, [r7, #28]
	while(tempstatus == 0) {
 800115a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800115e:	2b00      	cmp	r3, #0
 8001160:	d0e4      	beq.n	800112c <CubeM_runDebugTests+0x2ec>
	}

	errornumber++;
 8001162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001164:	3301      	adds	r3, #1
 8001166:	627b      	str	r3, [r7, #36]	; 0x24
	if(usedbuffer == 0 || emptybuffer == 1 || buffer[0] == '\0') CubeM_DEBUGERRORHANDLER(errornumber);
 8001168:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <CubeM_runDebugTests+0x3a8>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d008      	beq.n	8001182 <CubeM_runDebugTests+0x342>
 8001170:	4b1e      	ldr	r3, [pc, #120]	; (80011ec <CubeM_runDebugTests+0x3ac>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d004      	beq.n	8001182 <CubeM_runDebugTests+0x342>
 8001178:	4b1d      	ldr	r3, [pc, #116]	; (80011f0 <CubeM_runDebugTests+0x3b0>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d102      	bne.n	8001188 <CubeM_runDebugTests+0x348>
 8001182:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001184:	f7ff fe4e 	bl	8000e24 <CubeM_DEBUGERRORHANDLER>

	HAL_Delay(3000);
 8001188:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800118c:	f000 fe04 	bl	8001d98 <HAL_Delay>
	CubeM_sendBuffer();
 8001190:	f7ff fb56 	bl	8000840 <CubeM_sendBuffer>

	errornumber++;
 8001194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001196:	3301      	adds	r3, #1
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
	if(CubeM_clearBuffer() != 0) CubeM_DEBUGERRORHANDLER(errornumber);
 800119a:	f7ff f9c3 	bl	8000524 <CubeM_clearBuffer>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d002      	beq.n	80011aa <CubeM_runDebugTests+0x36a>
 80011a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011a6:	f7ff fe3d 	bl	8000e24 <CubeM_DEBUGERRORHANDLER>

	errornumber++;
 80011aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ac:	3301      	adds	r3, #1
 80011ae:	627b      	str	r3, [r7, #36]	; 0x24
	if(usedbuffer != 0 || emptybuffer != 1 || buffer[0] != '\0') CubeM_DEBUGERRORHANDLER(errornumber);
 80011b0:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <CubeM_runDebugTests+0x3a8>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d108      	bne.n	80011ca <CubeM_runDebugTests+0x38a>
 80011b8:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <CubeM_runDebugTests+0x3ac>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d104      	bne.n	80011ca <CubeM_runDebugTests+0x38a>
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <CubeM_runDebugTests+0x3b0>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d002      	beq.n	80011d0 <CubeM_runDebugTests+0x390>
 80011ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011cc:	f7ff fe2a 	bl	8000e24 <CubeM_DEBUGERRORHANDLER>

	return 0;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3728      	adds	r7, #40	; 0x28
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	f3af 8000 	nop.w
 80011e0:	916872b0 	.word	0x916872b0
 80011e4:	3fbf7ced 	.word	0x3fbf7ced
 80011e8:	24000334 	.word	0x24000334
 80011ec:	24000000 	.word	0x24000000
 80011f0:	24000338 	.word	0x24000338

080011f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011f8:	f000 fd3c 	bl	8001c74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011fc:	f000 f812 	bl	8001224 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001200:	f000 f8be 	bl	8001380 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001204:	f000 fa36 	bl	8001674 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001208:	f000 f8ea 	bl	80013e0 <MX_ADC1_Init>
  MX_ADC2_Init();
 800120c:	f000 f962 	bl	80014d4 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001210:	f000 f9c8 	bl	80015a4 <MX_ADC3_Init>
  MX_USB_DEVICE_Init();
 8001214:	f00a fc6e 	bl	800baf4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

#if CUBEMDEBUG==1
  CubeM_runDebugTests();
 8001218:	f7ff fe12 	bl	8000e40 <CubeM_runDebugTests>
#endif

#if SIGANDEBUG==1
	sigAn_Debug();
 800121c:	f000 fa9c 	bl	8001758 <sigAn_Debug>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001220:	e7fe      	b.n	8001220 <main+0x2c>
	...

08001224 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b09e      	sub	sp, #120	; 0x78
 8001228:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800122a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800122e:	224c      	movs	r2, #76	; 0x4c
 8001230:	2100      	movs	r1, #0
 8001232:	4618      	mov	r0, r3
 8001234:	f00b ffbb 	bl	800d1ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001238:	f107 030c 	add.w	r3, r7, #12
 800123c:	2220      	movs	r2, #32
 800123e:	2100      	movs	r1, #0
 8001240:	4618      	mov	r0, r3
 8001242:	f00b ffb4 	bl	800d1ae <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001246:	2002      	movs	r0, #2
 8001248:	f003 fbf4 	bl	8004a34 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800124c:	2300      	movs	r3, #0
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	4b48      	ldr	r3, [pc, #288]	; (8001374 <SystemClock_Config+0x150>)
 8001252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001254:	4a47      	ldr	r2, [pc, #284]	; (8001374 <SystemClock_Config+0x150>)
 8001256:	f023 0301 	bic.w	r3, r3, #1
 800125a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800125c:	4b45      	ldr	r3, [pc, #276]	; (8001374 <SystemClock_Config+0x150>)
 800125e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001260:	f003 0301 	and.w	r3, r3, #1
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	4b44      	ldr	r3, [pc, #272]	; (8001378 <SystemClock_Config+0x154>)
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	4a43      	ldr	r2, [pc, #268]	; (8001378 <SystemClock_Config+0x154>)
 800126c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001270:	6193      	str	r3, [r2, #24]
 8001272:	4b41      	ldr	r3, [pc, #260]	; (8001378 <SystemClock_Config+0x154>)
 8001274:	699b      	ldr	r3, [r3, #24]
 8001276:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800127a:	60bb      	str	r3, [r7, #8]
 800127c:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800127e:	bf00      	nop
 8001280:	4b3d      	ldr	r3, [pc, #244]	; (8001378 <SystemClock_Config+0x154>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001288:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800128c:	d1f8      	bne.n	8001280 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128e:	4b3b      	ldr	r3, [pc, #236]	; (800137c <SystemClock_Config+0x158>)
 8001290:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001294:	4a39      	ldr	r2, [pc, #228]	; (800137c <SystemClock_Config+0x158>)
 8001296:	f043 0302 	orr.w	r3, r3, #2
 800129a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800129e:	4b37      	ldr	r3, [pc, #220]	; (800137c <SystemClock_Config+0x158>)
 80012a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	607b      	str	r3, [r7, #4]
 80012aa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80012ac:	2300      	movs	r3, #0
 80012ae:	603b      	str	r3, [r7, #0]
 80012b0:	4b31      	ldr	r3, [pc, #196]	; (8001378 <SystemClock_Config+0x154>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	4a30      	ldr	r2, [pc, #192]	; (8001378 <SystemClock_Config+0x154>)
 80012b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012ba:	6193      	str	r3, [r2, #24]
 80012bc:	4b2e      	ldr	r3, [pc, #184]	; (8001378 <SystemClock_Config+0x154>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012c4:	603b      	str	r3, [r7, #0]
 80012c6:	4b2b      	ldr	r3, [pc, #172]	; (8001374 <SystemClock_Config+0x150>)
 80012c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ca:	4a2a      	ldr	r2, [pc, #168]	; (8001374 <SystemClock_Config+0x150>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80012d2:	4b28      	ldr	r3, [pc, #160]	; (8001374 <SystemClock_Config+0x150>)
 80012d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	603b      	str	r3, [r7, #0]
 80012dc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80012de:	bf00      	nop
 80012e0:	4b25      	ldr	r3, [pc, #148]	; (8001378 <SystemClock_Config+0x154>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012ec:	d1f8      	bne.n	80012e0 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012ee:	2301      	movs	r3, #1
 80012f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012f8:	2302      	movs	r3, #2
 80012fa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012fc:	2302      	movs	r3, #2
 80012fe:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8001300:	2305      	movs	r3, #5
 8001302:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001304:	23c0      	movs	r3, #192	; 0xc0
 8001306:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001308:	2302      	movs	r3, #2
 800130a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 15;
 800130c:	230f      	movs	r3, #15
 800130e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001310:	2302      	movs	r3, #2
 8001312:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001314:	2308      	movs	r3, #8
 8001316:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001318:	2300      	movs	r3, #0
 800131a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001320:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001324:	4618      	mov	r0, r3
 8001326:	f003 fbcf 	bl	8004ac8 <HAL_RCC_OscConfig>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8001330:	f000 f9d8 	bl	80016e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001334:	233f      	movs	r3, #63	; 0x3f
 8001336:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001338:	2303      	movs	r3, #3
 800133a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001340:	2308      	movs	r3, #8
 8001342:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001344:	2340      	movs	r3, #64	; 0x40
 8001346:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001348:	2340      	movs	r3, #64	; 0x40
 800134a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800134c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001352:	2340      	movs	r3, #64	; 0x40
 8001354:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001356:	f107 030c 	add.w	r3, r7, #12
 800135a:	2104      	movs	r1, #4
 800135c:	4618      	mov	r0, r3
 800135e:	f004 f80d 	bl	800537c <HAL_RCC_ClockConfig>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <SystemClock_Config+0x148>
  {
    Error_Handler();
 8001368:	f000 f9bc 	bl	80016e4 <Error_Handler>
  }
}
 800136c:	bf00      	nop
 800136e:	3778      	adds	r7, #120	; 0x78
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	58000400 	.word	0x58000400
 8001378:	58024800 	.word	0x58024800
 800137c:	58024400 	.word	0x58024400

08001380 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b0b0      	sub	sp, #192	; 0xc0
 8001384:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001386:	463b      	mov	r3, r7
 8001388:	22c0      	movs	r2, #192	; 0xc0
 800138a:	2100      	movs	r1, #0
 800138c:	4618      	mov	r0, r3
 800138e:	f00b ff0e 	bl	800d1ae <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001392:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001396:	f04f 0300 	mov.w	r3, #0
 800139a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 800139e:	2302      	movs	r3, #2
 80013a0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80013a2:	230c      	movs	r3, #12
 80013a4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80013a6:	2302      	movs	r3, #2
 80013a8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80013aa:	2302      	movs	r3, #2
 80013ac:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80013ae:	2302      	movs	r3, #2
 80013b0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80013b2:	23c0      	movs	r3, #192	; 0xc0
 80013b4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80013b6:	2320      	movs	r3, #32
 80013b8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80013be:	2300      	movs	r3, #0
 80013c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013c4:	463b      	mov	r3, r7
 80013c6:	4618      	mov	r0, r3
 80013c8:	f004 fb4e 	bl	8005a68 <HAL_RCCEx_PeriphCLKConfig>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80013d2:	f000 f987 	bl	80016e4 <Error_Handler>
  }
}
 80013d6:	bf00      	nop
 80013d8:	37c0      	adds	r7, #192	; 0xc0
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
	...

080013e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08a      	sub	sp, #40	; 0x28
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80013e6:	f107 031c 	add.w	r3, r7, #28
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80013f2:	463b      	mov	r3, r7
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
 8001400:	615a      	str	r2, [r3, #20]
 8001402:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001404:	4b2f      	ldr	r3, [pc, #188]	; (80014c4 <MX_ADC1_Init+0xe4>)
 8001406:	4a30      	ldr	r2, [pc, #192]	; (80014c8 <MX_ADC1_Init+0xe8>)
 8001408:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800140a:	4b2e      	ldr	r3, [pc, #184]	; (80014c4 <MX_ADC1_Init+0xe4>)
 800140c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001410:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001412:	4b2c      	ldr	r3, [pc, #176]	; (80014c4 <MX_ADC1_Init+0xe4>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001418:	4b2a      	ldr	r3, [pc, #168]	; (80014c4 <MX_ADC1_Init+0xe4>)
 800141a:	2200      	movs	r2, #0
 800141c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800141e:	4b29      	ldr	r3, [pc, #164]	; (80014c4 <MX_ADC1_Init+0xe4>)
 8001420:	2204      	movs	r2, #4
 8001422:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001424:	4b27      	ldr	r3, [pc, #156]	; (80014c4 <MX_ADC1_Init+0xe4>)
 8001426:	2200      	movs	r2, #0
 8001428:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800142a:	4b26      	ldr	r3, [pc, #152]	; (80014c4 <MX_ADC1_Init+0xe4>)
 800142c:	2200      	movs	r2, #0
 800142e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8001430:	4b24      	ldr	r3, [pc, #144]	; (80014c4 <MX_ADC1_Init+0xe4>)
 8001432:	2201      	movs	r2, #1
 8001434:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001436:	4b23      	ldr	r3, [pc, #140]	; (80014c4 <MX_ADC1_Init+0xe4>)
 8001438:	2200      	movs	r2, #0
 800143a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800143c:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <MX_ADC1_Init+0xe4>)
 800143e:	2200      	movs	r2, #0
 8001440:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001442:	4b20      	ldr	r3, [pc, #128]	; (80014c4 <MX_ADC1_Init+0xe4>)
 8001444:	2200      	movs	r2, #0
 8001446:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001448:	4b1e      	ldr	r3, [pc, #120]	; (80014c4 <MX_ADC1_Init+0xe4>)
 800144a:	2200      	movs	r2, #0
 800144c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800144e:	4b1d      	ldr	r3, [pc, #116]	; (80014c4 <MX_ADC1_Init+0xe4>)
 8001450:	2200      	movs	r2, #0
 8001452:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001454:	4b1b      	ldr	r3, [pc, #108]	; (80014c4 <MX_ADC1_Init+0xe4>)
 8001456:	2200      	movs	r2, #0
 8001458:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800145a:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <MX_ADC1_Init+0xe4>)
 800145c:	2200      	movs	r2, #0
 800145e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001462:	4818      	ldr	r0, [pc, #96]	; (80014c4 <MX_ADC1_Init+0xe4>)
 8001464:	f000 fe6a 	bl	800213c <HAL_ADC_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800146e:	f000 f939 	bl	80016e4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001472:	2300      	movs	r3, #0
 8001474:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001476:	f107 031c 	add.w	r3, r7, #28
 800147a:	4619      	mov	r1, r3
 800147c:	4811      	ldr	r0, [pc, #68]	; (80014c4 <MX_ADC1_Init+0xe4>)
 800147e:	f001 fc81 	bl	8002d84 <HAL_ADCEx_MultiModeConfigChannel>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001488:	f000 f92c 	bl	80016e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800148c:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <MX_ADC1_Init+0xec>)
 800148e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001490:	2306      	movs	r3, #6
 8001492:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001494:	2300      	movs	r3, #0
 8001496:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8001498:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <MX_ADC1_Init+0xf0>)
 800149a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800149c:	2304      	movs	r3, #4
 800149e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014a8:	463b      	mov	r3, r7
 80014aa:	4619      	mov	r1, r3
 80014ac:	4805      	ldr	r0, [pc, #20]	; (80014c4 <MX_ADC1_Init+0xe4>)
 80014ae:	f000 ffe7 	bl	8002480 <HAL_ADC_ConfigChannel>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80014b8:	f000 f914 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014bc:	bf00      	nop
 80014be:	3728      	adds	r7, #40	; 0x28
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	24000480 	.word	0x24000480
 80014c8:	40022000 	.word	0x40022000
 80014cc:	0c900008 	.word	0x0c900008
 80014d0:	47ff0000 	.word	0x47ff0000

080014d4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b088      	sub	sp, #32
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]
 80014e8:	615a      	str	r2, [r3, #20]
 80014ea:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80014ec:	4b29      	ldr	r3, [pc, #164]	; (8001594 <MX_ADC2_Init+0xc0>)
 80014ee:	4a2a      	ldr	r2, [pc, #168]	; (8001598 <MX_ADC2_Init+0xc4>)
 80014f0:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80014f2:	4b28      	ldr	r3, [pc, #160]	; (8001594 <MX_ADC2_Init+0xc0>)
 80014f4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80014f8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80014fa:	4b26      	ldr	r3, [pc, #152]	; (8001594 <MX_ADC2_Init+0xc0>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001500:	4b24      	ldr	r3, [pc, #144]	; (8001594 <MX_ADC2_Init+0xc0>)
 8001502:	2200      	movs	r2, #0
 8001504:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001506:	4b23      	ldr	r3, [pc, #140]	; (8001594 <MX_ADC2_Init+0xc0>)
 8001508:	2204      	movs	r2, #4
 800150a:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800150c:	4b21      	ldr	r3, [pc, #132]	; (8001594 <MX_ADC2_Init+0xc0>)
 800150e:	2200      	movs	r2, #0
 8001510:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001512:	4b20      	ldr	r3, [pc, #128]	; (8001594 <MX_ADC2_Init+0xc0>)
 8001514:	2200      	movs	r2, #0
 8001516:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8001518:	4b1e      	ldr	r3, [pc, #120]	; (8001594 <MX_ADC2_Init+0xc0>)
 800151a:	2201      	movs	r2, #1
 800151c:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800151e:	4b1d      	ldr	r3, [pc, #116]	; (8001594 <MX_ADC2_Init+0xc0>)
 8001520:	2200      	movs	r2, #0
 8001522:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001524:	4b1b      	ldr	r3, [pc, #108]	; (8001594 <MX_ADC2_Init+0xc0>)
 8001526:	2200      	movs	r2, #0
 8001528:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800152a:	4b1a      	ldr	r3, [pc, #104]	; (8001594 <MX_ADC2_Init+0xc0>)
 800152c:	2200      	movs	r2, #0
 800152e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001530:	4b18      	ldr	r3, [pc, #96]	; (8001594 <MX_ADC2_Init+0xc0>)
 8001532:	2200      	movs	r2, #0
 8001534:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001536:	4b17      	ldr	r3, [pc, #92]	; (8001594 <MX_ADC2_Init+0xc0>)
 8001538:	2200      	movs	r2, #0
 800153a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800153c:	4b15      	ldr	r3, [pc, #84]	; (8001594 <MX_ADC2_Init+0xc0>)
 800153e:	2200      	movs	r2, #0
 8001540:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8001542:	4b14      	ldr	r3, [pc, #80]	; (8001594 <MX_ADC2_Init+0xc0>)
 8001544:	2200      	movs	r2, #0
 8001546:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800154a:	4812      	ldr	r0, [pc, #72]	; (8001594 <MX_ADC2_Init+0xc0>)
 800154c:	f000 fdf6 	bl	800213c <HAL_ADC_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8001556:	f000 f8c5 	bl	80016e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800155a:	4b10      	ldr	r3, [pc, #64]	; (800159c <MX_ADC2_Init+0xc8>)
 800155c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800155e:	2306      	movs	r3, #6
 8001560:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8001566:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <MX_ADC2_Init+0xcc>)
 8001568:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800156a:	2304      	movs	r3, #4
 800156c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001572:	2300      	movs	r3, #0
 8001574:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001576:	1d3b      	adds	r3, r7, #4
 8001578:	4619      	mov	r1, r3
 800157a:	4806      	ldr	r0, [pc, #24]	; (8001594 <MX_ADC2_Init+0xc0>)
 800157c:	f000 ff80 	bl	8002480 <HAL_ADC_ConfigChannel>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8001586:	f000 f8ad 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800158a:	bf00      	nop
 800158c:	3720      	adds	r7, #32
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	240004e4 	.word	0x240004e4
 8001598:	40022100 	.word	0x40022100
 800159c:	10c00010 	.word	0x10c00010
 80015a0:	47ff0000 	.word	0x47ff0000

080015a4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b088      	sub	sp, #32
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015aa:	1d3b      	adds	r3, r7, #4
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	611a      	str	r2, [r3, #16]
 80015b8:	615a      	str	r2, [r3, #20]
 80015ba:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80015bc:	4b29      	ldr	r3, [pc, #164]	; (8001664 <MX_ADC3_Init+0xc0>)
 80015be:	4a2a      	ldr	r2, [pc, #168]	; (8001668 <MX_ADC3_Init+0xc4>)
 80015c0:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80015c2:	4b28      	ldr	r3, [pc, #160]	; (8001664 <MX_ADC3_Init+0xc0>)
 80015c4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80015c8:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80015ca:	4b26      	ldr	r3, [pc, #152]	; (8001664 <MX_ADC3_Init+0xc0>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015d0:	4b24      	ldr	r3, [pc, #144]	; (8001664 <MX_ADC3_Init+0xc0>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015d6:	4b23      	ldr	r3, [pc, #140]	; (8001664 <MX_ADC3_Init+0xc0>)
 80015d8:	2204      	movs	r2, #4
 80015da:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80015dc:	4b21      	ldr	r3, [pc, #132]	; (8001664 <MX_ADC3_Init+0xc0>)
 80015de:	2200      	movs	r2, #0
 80015e0:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80015e2:	4b20      	ldr	r3, [pc, #128]	; (8001664 <MX_ADC3_Init+0xc0>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80015e8:	4b1e      	ldr	r3, [pc, #120]	; (8001664 <MX_ADC3_Init+0xc0>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80015ee:	4b1d      	ldr	r3, [pc, #116]	; (8001664 <MX_ADC3_Init+0xc0>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015f4:	4b1b      	ldr	r3, [pc, #108]	; (8001664 <MX_ADC3_Init+0xc0>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015fa:	4b1a      	ldr	r3, [pc, #104]	; (8001664 <MX_ADC3_Init+0xc0>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001600:	4b18      	ldr	r3, [pc, #96]	; (8001664 <MX_ADC3_Init+0xc0>)
 8001602:	2200      	movs	r2, #0
 8001604:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001606:	4b17      	ldr	r3, [pc, #92]	; (8001664 <MX_ADC3_Init+0xc0>)
 8001608:	2200      	movs	r2, #0
 800160a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800160c:	4b15      	ldr	r3, [pc, #84]	; (8001664 <MX_ADC3_Init+0xc0>)
 800160e:	2200      	movs	r2, #0
 8001610:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001612:	4b14      	ldr	r3, [pc, #80]	; (8001664 <MX_ADC3_Init+0xc0>)
 8001614:	2200      	movs	r2, #0
 8001616:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800161a:	4812      	ldr	r0, [pc, #72]	; (8001664 <MX_ADC3_Init+0xc0>)
 800161c:	f000 fd8e 	bl	800213c <HAL_ADC_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8001626:	f000 f85d 	bl	80016e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800162a:	4b10      	ldr	r3, [pc, #64]	; (800166c <MX_ADC3_Init+0xc8>)
 800162c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800162e:	2306      	movs	r3, #6
 8001630:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8001636:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <MX_ADC3_Init+0xcc>)
 8001638:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800163a:	2304      	movs	r3, #4
 800163c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800163e:	2300      	movs	r3, #0
 8001640:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001642:	2300      	movs	r3, #0
 8001644:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	4619      	mov	r1, r3
 800164a:	4806      	ldr	r0, [pc, #24]	; (8001664 <MX_ADC3_Init+0xc0>)
 800164c:	f000 ff18 	bl	8002480 <HAL_ADC_ConfigChannel>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_ADC3_Init+0xb6>
  {
    Error_Handler();
 8001656:	f000 f845 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800165a:	bf00      	nop
 800165c:	3720      	adds	r7, #32
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	24000548 	.word	0x24000548
 8001668:	58026000 	.word	0x58026000
 800166c:	04300002 	.word	0x04300002
 8001670:	47ff0000 	.word	0x47ff0000

08001674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800167a:	4b19      	ldr	r3, [pc, #100]	; (80016e0 <MX_GPIO_Init+0x6c>)
 800167c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001680:	4a17      	ldr	r2, [pc, #92]	; (80016e0 <MX_GPIO_Init+0x6c>)
 8001682:	f043 0304 	orr.w	r3, r3, #4
 8001686:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800168a:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <MX_GPIO_Init+0x6c>)
 800168c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001690:	f003 0304 	and.w	r3, r3, #4
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001698:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <MX_GPIO_Init+0x6c>)
 800169a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800169e:	4a10      	ldr	r2, [pc, #64]	; (80016e0 <MX_GPIO_Init+0x6c>)
 80016a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016a8:	4b0d      	ldr	r3, [pc, #52]	; (80016e0 <MX_GPIO_Init+0x6c>)
 80016aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b6:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <MX_GPIO_Init+0x6c>)
 80016b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016bc:	4a08      	ldr	r2, [pc, #32]	; (80016e0 <MX_GPIO_Init+0x6c>)
 80016be:	f043 0301 	orr.w	r3, r3, #1
 80016c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016c6:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <MX_GPIO_Init+0x6c>)
 80016c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	607b      	str	r3, [r7, #4]
 80016d2:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016d4:	bf00      	nop
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	58024400 	.word	0x58024400

080016e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016e8:	b672      	cpsid	i
}
 80016ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016ec:	e7fe      	b.n	80016ec <Error_Handler+0x8>
	...

080016f0 <sigAn_Init>:

#include "signalanalyzer.h"

siganalyzerch_t sigAnChannels[SIGANMAXCH];

uint8_t sigAn_Init() {
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
	for(uint8_t i=0; i<SIGANMAXCH; i++) {
 80016f6:	2300      	movs	r3, #0
 80016f8:	71fb      	strb	r3, [r7, #7]
 80016fa:	e021      	b.n	8001740 <sigAn_Init+0x50>
		sigAnChannels[i].active = 0;
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	4a15      	ldr	r2, [pc, #84]	; (8001754 <sigAn_Init+0x64>)
 8001700:	f644 618c 	movw	r1, #20108	; 0x4e8c
 8001704:	fb01 f303 	mul.w	r3, r1, r3
 8001708:	4413      	add	r3, r2
 800170a:	2200      	movs	r2, #0
 800170c:	701a      	strb	r2, [r3, #0]
		sigAnChannels[i].buffer[0] = 0;
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	4a10      	ldr	r2, [pc, #64]	; (8001754 <sigAn_Init+0x64>)
 8001712:	f644 618c 	movw	r1, #20108	; 0x4e8c
 8001716:	fb01 f303 	mul.w	r3, r1, r3
 800171a:	4413      	add	r3, r2
 800171c:	3368      	adds	r3, #104	; 0x68
 800171e:	2200      	movs	r2, #0
 8001720:	801a      	strh	r2, [r3, #0]
		sigAnChannels[i].bufsize = 10;
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	4a0b      	ldr	r2, [pc, #44]	; (8001754 <sigAn_Init+0x64>)
 8001726:	f644 618c 	movw	r1, #20108	; 0x4e8c
 800172a:	fb01 f303 	mul.w	r3, r1, r3
 800172e:	441a      	add	r2, r3
 8001730:	f644 6388 	movw	r3, #20104	; 0x4e88
 8001734:	4413      	add	r3, r2
 8001736:	220a      	movs	r2, #10
 8001738:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i<SIGANMAXCH; i++) {
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	3301      	adds	r3, #1
 800173e:	71fb      	strb	r3, [r7, #7]
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	2b02      	cmp	r3, #2
 8001744:	d9da      	bls.n	80016fc <sigAn_Init+0xc>
	}

	return 0;
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	240005ac 	.word	0x240005ac

08001758 <sigAn_Debug>:

uint16_t *sigAn_getBuffer(uint8_t chnumber) {
	return sigAnChannels[chnumber].buffer;
}

uint8_t sigAn_Debug() {
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
	sigAn_Init();
 800175c:	f7ff ffc8 	bl	80016f0 <sigAn_Init>

	return 0;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800176e:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <HAL_MspInit+0x30>)
 8001770:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001774:	4a08      	ldr	r2, [pc, #32]	; (8001798 <HAL_MspInit+0x30>)
 8001776:	f043 0302 	orr.w	r3, r3, #2
 800177a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800177e:	4b06      	ldr	r3, [pc, #24]	; (8001798 <HAL_MspInit+0x30>)
 8001780:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	607b      	str	r3, [r7, #4]
 800178a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	58024400 	.word	0x58024400

0800179c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08e      	sub	sp, #56	; 0x38
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a51      	ldr	r2, [pc, #324]	; (8001900 <HAL_ADC_MspInit+0x164>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d133      	bne.n	8001826 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80017be:	4b51      	ldr	r3, [pc, #324]	; (8001904 <HAL_ADC_MspInit+0x168>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	3301      	adds	r3, #1
 80017c4:	4a4f      	ldr	r2, [pc, #316]	; (8001904 <HAL_ADC_MspInit+0x168>)
 80017c6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80017c8:	4b4e      	ldr	r3, [pc, #312]	; (8001904 <HAL_ADC_MspInit+0x168>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d10e      	bne.n	80017ee <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80017d0:	4b4d      	ldr	r3, [pc, #308]	; (8001908 <HAL_ADC_MspInit+0x16c>)
 80017d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017d6:	4a4c      	ldr	r2, [pc, #304]	; (8001908 <HAL_ADC_MspInit+0x16c>)
 80017d8:	f043 0320 	orr.w	r3, r3, #32
 80017dc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80017e0:	4b49      	ldr	r3, [pc, #292]	; (8001908 <HAL_ADC_MspInit+0x16c>)
 80017e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017e6:	f003 0320 	and.w	r3, r3, #32
 80017ea:	623b      	str	r3, [r7, #32]
 80017ec:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ee:	4b46      	ldr	r3, [pc, #280]	; (8001908 <HAL_ADC_MspInit+0x16c>)
 80017f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017f4:	4a44      	ldr	r2, [pc, #272]	; (8001908 <HAL_ADC_MspInit+0x16c>)
 80017f6:	f043 0301 	orr.w	r3, r3, #1
 80017fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017fe:	4b42      	ldr	r3, [pc, #264]	; (8001908 <HAL_ADC_MspInit+0x16c>)
 8001800:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001804:	f003 0301 	and.w	r3, r3, #1
 8001808:	61fb      	str	r3, [r7, #28]
 800180a:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PA7     ------> ADC1_INN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800180c:	23c0      	movs	r3, #192	; 0xc0
 800180e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001810:	2303      	movs	r3, #3
 8001812:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001818:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800181c:	4619      	mov	r1, r3
 800181e:	483b      	ldr	r0, [pc, #236]	; (800190c <HAL_ADC_MspInit+0x170>)
 8001820:	f001 fc9e 	bl	8003160 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001824:	e067      	b.n	80018f6 <HAL_ADC_MspInit+0x15a>
  else if(hadc->Instance==ADC2)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a39      	ldr	r2, [pc, #228]	; (8001910 <HAL_ADC_MspInit+0x174>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d133      	bne.n	8001898 <HAL_ADC_MspInit+0xfc>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001830:	4b34      	ldr	r3, [pc, #208]	; (8001904 <HAL_ADC_MspInit+0x168>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	3301      	adds	r3, #1
 8001836:	4a33      	ldr	r2, [pc, #204]	; (8001904 <HAL_ADC_MspInit+0x168>)
 8001838:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800183a:	4b32      	ldr	r3, [pc, #200]	; (8001904 <HAL_ADC_MspInit+0x168>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d10e      	bne.n	8001860 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001842:	4b31      	ldr	r3, [pc, #196]	; (8001908 <HAL_ADC_MspInit+0x16c>)
 8001844:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001848:	4a2f      	ldr	r2, [pc, #188]	; (8001908 <HAL_ADC_MspInit+0x16c>)
 800184a:	f043 0320 	orr.w	r3, r3, #32
 800184e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001852:	4b2d      	ldr	r3, [pc, #180]	; (8001908 <HAL_ADC_MspInit+0x16c>)
 8001854:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001858:	f003 0320 	and.w	r3, r3, #32
 800185c:	61bb      	str	r3, [r7, #24]
 800185e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001860:	4b29      	ldr	r3, [pc, #164]	; (8001908 <HAL_ADC_MspInit+0x16c>)
 8001862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001866:	4a28      	ldr	r2, [pc, #160]	; (8001908 <HAL_ADC_MspInit+0x16c>)
 8001868:	f043 0304 	orr.w	r3, r3, #4
 800186c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001870:	4b25      	ldr	r3, [pc, #148]	; (8001908 <HAL_ADC_MspInit+0x16c>)
 8001872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001876:	f003 0304 	and.w	r3, r3, #4
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800187e:	2330      	movs	r3, #48	; 0x30
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001882:	2303      	movs	r3, #3
 8001884:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800188a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800188e:	4619      	mov	r1, r3
 8001890:	4820      	ldr	r0, [pc, #128]	; (8001914 <HAL_ADC_MspInit+0x178>)
 8001892:	f001 fc65 	bl	8003160 <HAL_GPIO_Init>
}
 8001896:	e02e      	b.n	80018f6 <HAL_ADC_MspInit+0x15a>
  else if(hadc->Instance==ADC3)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a1e      	ldr	r2, [pc, #120]	; (8001918 <HAL_ADC_MspInit+0x17c>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d129      	bne.n	80018f6 <HAL_ADC_MspInit+0x15a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80018a2:	4b19      	ldr	r3, [pc, #100]	; (8001908 <HAL_ADC_MspInit+0x16c>)
 80018a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018a8:	4a17      	ldr	r2, [pc, #92]	; (8001908 <HAL_ADC_MspInit+0x16c>)
 80018aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018b2:	4b15      	ldr	r3, [pc, #84]	; (8001908 <HAL_ADC_MspInit+0x16c>)
 80018b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018bc:	613b      	str	r3, [r7, #16]
 80018be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c0:	4b11      	ldr	r3, [pc, #68]	; (8001908 <HAL_ADC_MspInit+0x16c>)
 80018c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018c6:	4a10      	ldr	r2, [pc, #64]	; (8001908 <HAL_ADC_MspInit+0x16c>)
 80018c8:	f043 0304 	orr.w	r3, r3, #4
 80018cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018d0:	4b0d      	ldr	r3, [pc, #52]	; (8001908 <HAL_ADC_MspInit+0x16c>)
 80018d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018d6:	f003 0304 	and.w	r3, r3, #4
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80018de:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80018e2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80018e6:	f000 fa87 	bl	8001df8 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80018ea:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80018ee:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80018f2:	f000 fa81 	bl	8001df8 <HAL_SYSCFG_AnalogSwitchConfig>
}
 80018f6:	bf00      	nop
 80018f8:	3738      	adds	r7, #56	; 0x38
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40022000 	.word	0x40022000
 8001904:	2400f150 	.word	0x2400f150
 8001908:	58024400 	.word	0x58024400
 800190c:	58020000 	.word	0x58020000
 8001910:	40022100 	.word	0x40022100
 8001914:	58020800 	.word	0x58020800
 8001918:	58026000 	.word	0x58026000

0800191c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001920:	e7fe      	b.n	8001920 <NMI_Handler+0x4>

08001922 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001926:	e7fe      	b.n	8001926 <HardFault_Handler+0x4>

08001928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800192c:	e7fe      	b.n	800192c <MemManage_Handler+0x4>

0800192e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800192e:	b480      	push	{r7}
 8001930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001932:	e7fe      	b.n	8001932 <BusFault_Handler+0x4>

08001934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001938:	e7fe      	b.n	8001938 <UsageFault_Handler+0x4>

0800193a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001968:	f000 f9f6 	bl	8001d58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}

08001970 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001974:	4802      	ldr	r0, [pc, #8]	; (8001980 <OTG_FS_IRQHandler+0x10>)
 8001976:	f001 fefc 	bl	8003772 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	2401063c 	.word	0x2401063c

08001984 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  return 1;
 8001988:	2301      	movs	r3, #1
}
 800198a:	4618      	mov	r0, r3
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <_kill>:

int _kill(int pid, int sig)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800199e:	f00b fc69 	bl	800d274 <__errno>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2216      	movs	r2, #22
 80019a6:	601a      	str	r2, [r3, #0]
  return -1;
 80019a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <_exit>:

void _exit (int status)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019bc:	f04f 31ff 	mov.w	r1, #4294967295
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7ff ffe7 	bl	8001994 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019c6:	e7fe      	b.n	80019c6 <_exit+0x12>

080019c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]
 80019d8:	e00a      	b.n	80019f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019da:	f3af 8000 	nop.w
 80019de:	4601      	mov	r1, r0
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	1c5a      	adds	r2, r3, #1
 80019e4:	60ba      	str	r2, [r7, #8]
 80019e6:	b2ca      	uxtb	r2, r1
 80019e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	3301      	adds	r3, #1
 80019ee:	617b      	str	r3, [r7, #20]
 80019f0:	697a      	ldr	r2, [r7, #20]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	dbf0      	blt.n	80019da <_read+0x12>
  }

  return len;
 80019f8:	687b      	ldr	r3, [r7, #4]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b086      	sub	sp, #24
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	60f8      	str	r0, [r7, #12]
 8001a0a:	60b9      	str	r1, [r7, #8]
 8001a0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
 8001a12:	e009      	b.n	8001a28 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	1c5a      	adds	r2, r3, #1
 8001a18:	60ba      	str	r2, [r7, #8]
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	3301      	adds	r3, #1
 8001a26:	617b      	str	r3, [r7, #20]
 8001a28:	697a      	ldr	r2, [r7, #20]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	dbf1      	blt.n	8001a14 <_write+0x12>
  }
  return len;
 8001a30:	687b      	ldr	r3, [r7, #4]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <_close>:

int _close(int file)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b083      	sub	sp, #12
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
 8001a5a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a62:	605a      	str	r2, [r3, #4]
  return 0;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <_isatty>:

int _isatty(int file)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a7a:	2301      	movs	r3, #1
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3714      	adds	r7, #20
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
	...

08001aa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aac:	4a14      	ldr	r2, [pc, #80]	; (8001b00 <_sbrk+0x5c>)
 8001aae:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <_sbrk+0x60>)
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ab8:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <_sbrk+0x64>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d102      	bne.n	8001ac6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ac0:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <_sbrk+0x64>)
 8001ac2:	4a12      	ldr	r2, [pc, #72]	; (8001b0c <_sbrk+0x68>)
 8001ac4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ac6:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <_sbrk+0x64>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4413      	add	r3, r2
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d207      	bcs.n	8001ae4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ad4:	f00b fbce 	bl	800d274 <__errno>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	220c      	movs	r2, #12
 8001adc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ade:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae2:	e009      	b.n	8001af8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ae4:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <_sbrk+0x64>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aea:	4b07      	ldr	r3, [pc, #28]	; (8001b08 <_sbrk+0x64>)
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4413      	add	r3, r2
 8001af2:	4a05      	ldr	r2, [pc, #20]	; (8001b08 <_sbrk+0x64>)
 8001af4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001af6:	68fb      	ldr	r3, [r7, #12]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3718      	adds	r7, #24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	24080000 	.word	0x24080000
 8001b04:	00000400 	.word	0x00000400
 8001b08:	2400f154 	.word	0x2400f154
 8001b0c:	24010eb8 	.word	0x24010eb8

08001b10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b14:	4b37      	ldr	r3, [pc, #220]	; (8001bf4 <SystemInit+0xe4>)
 8001b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b1a:	4a36      	ldr	r2, [pc, #216]	; (8001bf4 <SystemInit+0xe4>)
 8001b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b24:	4b34      	ldr	r3, [pc, #208]	; (8001bf8 <SystemInit+0xe8>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 030f 	and.w	r3, r3, #15
 8001b2c:	2b06      	cmp	r3, #6
 8001b2e:	d807      	bhi.n	8001b40 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b30:	4b31      	ldr	r3, [pc, #196]	; (8001bf8 <SystemInit+0xe8>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f023 030f 	bic.w	r3, r3, #15
 8001b38:	4a2f      	ldr	r2, [pc, #188]	; (8001bf8 <SystemInit+0xe8>)
 8001b3a:	f043 0307 	orr.w	r3, r3, #7
 8001b3e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001b40:	4b2e      	ldr	r3, [pc, #184]	; (8001bfc <SystemInit+0xec>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a2d      	ldr	r2, [pc, #180]	; (8001bfc <SystemInit+0xec>)
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b4c:	4b2b      	ldr	r3, [pc, #172]	; (8001bfc <SystemInit+0xec>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001b52:	4b2a      	ldr	r3, [pc, #168]	; (8001bfc <SystemInit+0xec>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	4929      	ldr	r1, [pc, #164]	; (8001bfc <SystemInit+0xec>)
 8001b58:	4b29      	ldr	r3, [pc, #164]	; (8001c00 <SystemInit+0xf0>)
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b5e:	4b26      	ldr	r3, [pc, #152]	; (8001bf8 <SystemInit+0xe8>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0308 	and.w	r3, r3, #8
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d007      	beq.n	8001b7a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b6a:	4b23      	ldr	r3, [pc, #140]	; (8001bf8 <SystemInit+0xe8>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f023 030f 	bic.w	r3, r3, #15
 8001b72:	4a21      	ldr	r2, [pc, #132]	; (8001bf8 <SystemInit+0xe8>)
 8001b74:	f043 0307 	orr.w	r3, r3, #7
 8001b78:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001b7a:	4b20      	ldr	r3, [pc, #128]	; (8001bfc <SystemInit+0xec>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001b80:	4b1e      	ldr	r3, [pc, #120]	; (8001bfc <SystemInit+0xec>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001b86:	4b1d      	ldr	r3, [pc, #116]	; (8001bfc <SystemInit+0xec>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001b8c:	4b1b      	ldr	r3, [pc, #108]	; (8001bfc <SystemInit+0xec>)
 8001b8e:	4a1d      	ldr	r2, [pc, #116]	; (8001c04 <SystemInit+0xf4>)
 8001b90:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001b92:	4b1a      	ldr	r3, [pc, #104]	; (8001bfc <SystemInit+0xec>)
 8001b94:	4a1c      	ldr	r2, [pc, #112]	; (8001c08 <SystemInit+0xf8>)
 8001b96:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001b98:	4b18      	ldr	r3, [pc, #96]	; (8001bfc <SystemInit+0xec>)
 8001b9a:	4a1c      	ldr	r2, [pc, #112]	; (8001c0c <SystemInit+0xfc>)
 8001b9c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001b9e:	4b17      	ldr	r3, [pc, #92]	; (8001bfc <SystemInit+0xec>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001ba4:	4b15      	ldr	r3, [pc, #84]	; (8001bfc <SystemInit+0xec>)
 8001ba6:	4a19      	ldr	r2, [pc, #100]	; (8001c0c <SystemInit+0xfc>)
 8001ba8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001baa:	4b14      	ldr	r3, [pc, #80]	; (8001bfc <SystemInit+0xec>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001bb0:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <SystemInit+0xec>)
 8001bb2:	4a16      	ldr	r2, [pc, #88]	; (8001c0c <SystemInit+0xfc>)
 8001bb4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001bb6:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <SystemInit+0xec>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001bbc:	4b0f      	ldr	r3, [pc, #60]	; (8001bfc <SystemInit+0xec>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a0e      	ldr	r2, [pc, #56]	; (8001bfc <SystemInit+0xec>)
 8001bc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bc6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001bc8:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <SystemInit+0xec>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001bce:	4b10      	ldr	r3, [pc, #64]	; (8001c10 <SystemInit+0x100>)
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	4b10      	ldr	r3, [pc, #64]	; (8001c14 <SystemInit+0x104>)
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bda:	d202      	bcs.n	8001be2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001bdc:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <SystemInit+0x108>)
 8001bde:	2201      	movs	r2, #1
 8001be0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001be2:	4b0e      	ldr	r3, [pc, #56]	; (8001c1c <SystemInit+0x10c>)
 8001be4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001be8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001bea:	bf00      	nop
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	e000ed00 	.word	0xe000ed00
 8001bf8:	52002000 	.word	0x52002000
 8001bfc:	58024400 	.word	0x58024400
 8001c00:	eaf6ed7f 	.word	0xeaf6ed7f
 8001c04:	02020200 	.word	0x02020200
 8001c08:	01ff0000 	.word	0x01ff0000
 8001c0c:	01010280 	.word	0x01010280
 8001c10:	5c001000 	.word	0x5c001000
 8001c14:	ffff0000 	.word	0xffff0000
 8001c18:	51008108 	.word	0x51008108
 8001c1c:	52004000 	.word	0x52004000

08001c20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001c20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c58 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c24:	f7ff ff74 	bl	8001b10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c28:	480c      	ldr	r0, [pc, #48]	; (8001c5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c2a:	490d      	ldr	r1, [pc, #52]	; (8001c60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c2c:	4a0d      	ldr	r2, [pc, #52]	; (8001c64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c30:	e002      	b.n	8001c38 <LoopCopyDataInit>

08001c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c36:	3304      	adds	r3, #4

08001c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c3c:	d3f9      	bcc.n	8001c32 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c3e:	4a0a      	ldr	r2, [pc, #40]	; (8001c68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c40:	4c0a      	ldr	r4, [pc, #40]	; (8001c6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c44:	e001      	b.n	8001c4a <LoopFillZerobss>

08001c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c48:	3204      	adds	r2, #4

08001c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c4c:	d3fb      	bcc.n	8001c46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c4e:	f00b fb17 	bl	800d280 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c52:	f7ff facf 	bl	80011f4 <main>
  bx  lr
 8001c56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c58:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001c5c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001c60:	2400030c 	.word	0x2400030c
  ldr r2, =_sidata
 8001c64:	0800f584 	.word	0x0800f584
  ldr r2, =_sbss
 8001c68:	24000310 	.word	0x24000310
  ldr r4, =_ebss
 8001c6c:	24010eb4 	.word	0x24010eb4

08001c70 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c70:	e7fe      	b.n	8001c70 <ADC3_IRQHandler>
	...

08001c74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c7a:	2003      	movs	r0, #3
 8001c7c:	f001 fa30 	bl	80030e0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c80:	f003 fd32 	bl	80056e8 <HAL_RCC_GetSysClockFreq>
 8001c84:	4602      	mov	r2, r0
 8001c86:	4b15      	ldr	r3, [pc, #84]	; (8001cdc <HAL_Init+0x68>)
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	0a1b      	lsrs	r3, r3, #8
 8001c8c:	f003 030f 	and.w	r3, r3, #15
 8001c90:	4913      	ldr	r1, [pc, #76]	; (8001ce0 <HAL_Init+0x6c>)
 8001c92:	5ccb      	ldrb	r3, [r1, r3]
 8001c94:	f003 031f 	and.w	r3, r3, #31
 8001c98:	fa22 f303 	lsr.w	r3, r2, r3
 8001c9c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c9e:	4b0f      	ldr	r3, [pc, #60]	; (8001cdc <HAL_Init+0x68>)
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	f003 030f 	and.w	r3, r3, #15
 8001ca6:	4a0e      	ldr	r2, [pc, #56]	; (8001ce0 <HAL_Init+0x6c>)
 8001ca8:	5cd3      	ldrb	r3, [r2, r3]
 8001caa:	f003 031f 	and.w	r3, r3, #31
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb4:	4a0b      	ldr	r2, [pc, #44]	; (8001ce4 <HAL_Init+0x70>)
 8001cb6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001cb8:	4a0b      	ldr	r2, [pc, #44]	; (8001ce8 <HAL_Init+0x74>)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cbe:	200f      	movs	r0, #15
 8001cc0:	f000 f814 	bl	8001cec <HAL_InitTick>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e002      	b.n	8001cd4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001cce:	f7ff fd4b 	bl	8001768 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	58024400 	.word	0x58024400
 8001ce0:	0800f1f8 	.word	0x0800f1f8
 8001ce4:	24000044 	.word	0x24000044
 8001ce8:	24000040 	.word	0x24000040

08001cec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001cf4:	4b15      	ldr	r3, [pc, #84]	; (8001d4c <HAL_InitTick+0x60>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d101      	bne.n	8001d00 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e021      	b.n	8001d44 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001d00:	4b13      	ldr	r3, [pc, #76]	; (8001d50 <HAL_InitTick+0x64>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	4b11      	ldr	r3, [pc, #68]	; (8001d4c <HAL_InitTick+0x60>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	4619      	mov	r1, r3
 8001d0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d16:	4618      	mov	r0, r3
 8001d18:	f001 fa15 	bl	8003146 <HAL_SYSTICK_Config>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e00e      	b.n	8001d44 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2b0f      	cmp	r3, #15
 8001d2a:	d80a      	bhi.n	8001d42 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	6879      	ldr	r1, [r7, #4]
 8001d30:	f04f 30ff 	mov.w	r0, #4294967295
 8001d34:	f001 f9df 	bl	80030f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d38:	4a06      	ldr	r2, [pc, #24]	; (8001d54 <HAL_InitTick+0x68>)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	e000      	b.n	8001d44 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	2400004c 	.word	0x2400004c
 8001d50:	24000040 	.word	0x24000040
 8001d54:	24000048 	.word	0x24000048

08001d58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d5c:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <HAL_IncTick+0x20>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	461a      	mov	r2, r3
 8001d62:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <HAL_IncTick+0x24>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4413      	add	r3, r2
 8001d68:	4a04      	ldr	r2, [pc, #16]	; (8001d7c <HAL_IncTick+0x24>)
 8001d6a:	6013      	str	r3, [r2, #0]
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	2400004c 	.word	0x2400004c
 8001d7c:	2400f158 	.word	0x2400f158

08001d80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  return uwTick;
 8001d84:	4b03      	ldr	r3, [pc, #12]	; (8001d94 <HAL_GetTick+0x14>)
 8001d86:	681b      	ldr	r3, [r3, #0]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	2400f158 	.word	0x2400f158

08001d98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001da0:	f7ff ffee 	bl	8001d80 <HAL_GetTick>
 8001da4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db0:	d005      	beq.n	8001dbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001db2:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <HAL_Delay+0x44>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	461a      	mov	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	4413      	add	r3, r2
 8001dbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dbe:	bf00      	nop
 8001dc0:	f7ff ffde 	bl	8001d80 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d8f7      	bhi.n	8001dc0 <HAL_Delay+0x28>
  {
  }
}
 8001dd0:	bf00      	nop
 8001dd2:	bf00      	nop
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	2400004c 	.word	0x2400004c

08001de0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001de4:	4b03      	ldr	r3, [pc, #12]	; (8001df4 <HAL_GetREVID+0x14>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	0c1b      	lsrs	r3, r3, #16
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	5c001000 	.word	0x5c001000

08001df8 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001e02:	4b07      	ldr	r3, [pc, #28]	; (8001e20 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	401a      	ands	r2, r3
 8001e0c:	4904      	ldr	r1, [pc, #16]	; (8001e20 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	604b      	str	r3, [r1, #4]
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	58000400 	.word	0x58000400

08001e24 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	609a      	str	r2, [r3, #8]
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b083      	sub	sp, #12
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
 8001e52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	609a      	str	r2, [r3, #8]
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b087      	sub	sp, #28
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
 8001e98:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	3360      	adds	r3, #96	; 0x60
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4413      	add	r3, r2
 8001ea6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	430b      	orrs	r3, r1
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001ec0:	bf00      	nop
 8001ec2:	371c      	adds	r7, #28
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	f003 031f 	and.w	r3, r3, #31
 8001ee6:	6879      	ldr	r1, [r7, #4]
 8001ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8001eec:	431a      	orrs	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	611a      	str	r2, [r3, #16]
}
 8001ef2:	bf00      	nop
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr

08001efe <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b087      	sub	sp, #28
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	60f8      	str	r0, [r7, #12]
 8001f06:	60b9      	str	r1, [r7, #8]
 8001f08:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	3360      	adds	r3, #96	; 0x60
 8001f0e:	461a      	mov	r2, r3
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	431a      	orrs	r2, r3
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	601a      	str	r2, [r3, #0]
  }
}
 8001f28:	bf00      	nop
 8001f2a:	371c      	adds	r7, #28
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b087      	sub	sp, #28
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	3330      	adds	r3, #48	; 0x30
 8001f44:	461a      	mov	r2, r3
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	0a1b      	lsrs	r3, r3, #8
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	f003 030c 	and.w	r3, r3, #12
 8001f50:	4413      	add	r3, r2
 8001f52:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	f003 031f 	and.w	r3, r3, #31
 8001f5e:	211f      	movs	r1, #31
 8001f60:	fa01 f303 	lsl.w	r3, r1, r3
 8001f64:	43db      	mvns	r3, r3
 8001f66:	401a      	ands	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	0e9b      	lsrs	r3, r3, #26
 8001f6c:	f003 011f 	and.w	r1, r3, #31
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	f003 031f 	and.w	r3, r3, #31
 8001f76:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f80:	bf00      	nop
 8001f82:	371c      	adds	r7, #28
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b087      	sub	sp, #28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	3314      	adds	r3, #20
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	0e5b      	lsrs	r3, r3, #25
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	4413      	add	r3, r2
 8001faa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	0d1b      	lsrs	r3, r3, #20
 8001fb4:	f003 031f 	and.w	r3, r3, #31
 8001fb8:	2107      	movs	r1, #7
 8001fba:	fa01 f303 	lsl.w	r3, r1, r3
 8001fbe:	43db      	mvns	r3, r3
 8001fc0:	401a      	ands	r2, r3
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	0d1b      	lsrs	r3, r3, #20
 8001fc6:	f003 031f 	and.w	r3, r3, #31
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001fd6:	bf00      	nop
 8001fd8:	371c      	adds	r7, #28
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
	...

08001fe4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	401a      	ands	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f003 0318 	and.w	r3, r3, #24
 8002006:	4908      	ldr	r1, [pc, #32]	; (8002028 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002008:	40d9      	lsrs	r1, r3
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	400b      	ands	r3, r1
 800200e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002012:	431a      	orrs	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800201a:	bf00      	nop
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	000fffff 	.word	0x000fffff

0800202c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	4b04      	ldr	r3, [pc, #16]	; (800204c <LL_ADC_DisableDeepPowerDown+0x20>)
 800203a:	4013      	ands	r3, r2
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	6093      	str	r3, [r2, #8]
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	5fffffc0 	.word	0x5fffffc0

08002050 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002060:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002064:	d101      	bne.n	800206a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002066:	2301      	movs	r3, #1
 8002068:	e000      	b.n	800206c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689a      	ldr	r2, [r3, #8]
 8002084:	4b05      	ldr	r3, [pc, #20]	; (800209c <LL_ADC_EnableInternalRegulator+0x24>)
 8002086:	4013      	ands	r3, r2
 8002088:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	6fffffc0 	.word	0x6fffffc0

080020a0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80020b4:	d101      	bne.n	80020ba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80020b6:	2301      	movs	r3, #1
 80020b8:	e000      	b.n	80020bc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d101      	bne.n	80020e0 <LL_ADC_IsEnabled+0x18>
 80020dc:	2301      	movs	r3, #1
 80020de:	e000      	b.n	80020e2 <LL_ADC_IsEnabled+0x1a>
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f003 0304 	and.w	r3, r3, #4
 80020fe:	2b04      	cmp	r3, #4
 8002100:	d101      	bne.n	8002106 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002102:	2301      	movs	r3, #1
 8002104:	e000      	b.n	8002108 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f003 0308 	and.w	r3, r3, #8
 8002124:	2b08      	cmp	r3, #8
 8002126:	d101      	bne.n	800212c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002128:	2301      	movs	r3, #1
 800212a:	e000      	b.n	800212e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
	...

0800213c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800213c:	b590      	push	{r4, r7, lr}
 800213e:	b089      	sub	sp, #36	; 0x24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002144:	2300      	movs	r3, #0
 8002146:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002148:	2300      	movs	r3, #0
 800214a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e18f      	b.n	8002476 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002160:	2b00      	cmp	r3, #0
 8002162:	d109      	bne.n	8002178 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f7ff fb19 	bl	800179c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff ff67 	bl	8002050 <LL_ADC_IsDeepPowerDownEnabled>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d004      	beq.n	8002192 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff ff4d 	bl	800202c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff ff82 	bl	80020a0 <LL_ADC_IsInternalRegulatorEnabled>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d114      	bne.n	80021cc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff ff66 	bl	8002078 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021ac:	4b87      	ldr	r3, [pc, #540]	; (80023cc <HAL_ADC_Init+0x290>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	099b      	lsrs	r3, r3, #6
 80021b2:	4a87      	ldr	r2, [pc, #540]	; (80023d0 <HAL_ADC_Init+0x294>)
 80021b4:	fba2 2303 	umull	r2, r3, r2, r3
 80021b8:	099b      	lsrs	r3, r3, #6
 80021ba:	3301      	adds	r3, #1
 80021bc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021be:	e002      	b.n	80021c6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	3b01      	subs	r3, #1
 80021c4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1f9      	bne.n	80021c0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ff65 	bl	80020a0 <LL_ADC_IsInternalRegulatorEnabled>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d10d      	bne.n	80021f8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e0:	f043 0210 	orr.w	r2, r3, #16
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ec:	f043 0201 	orr.w	r2, r3, #1
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff ff76 	bl	80020ee <LL_ADC_REG_IsConversionOngoing>
 8002202:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002208:	f003 0310 	and.w	r3, r3, #16
 800220c:	2b00      	cmp	r3, #0
 800220e:	f040 8129 	bne.w	8002464 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	2b00      	cmp	r3, #0
 8002216:	f040 8125 	bne.w	8002464 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800221e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002222:	f043 0202 	orr.w	r2, r3, #2
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff ff4a 	bl	80020c8 <LL_ADC_IsEnabled>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d136      	bne.n	80022a8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a65      	ldr	r2, [pc, #404]	; (80023d4 <HAL_ADC_Init+0x298>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d004      	beq.n	800224e <HAL_ADC_Init+0x112>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a63      	ldr	r2, [pc, #396]	; (80023d8 <HAL_ADC_Init+0x29c>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d10e      	bne.n	800226c <HAL_ADC_Init+0x130>
 800224e:	4861      	ldr	r0, [pc, #388]	; (80023d4 <HAL_ADC_Init+0x298>)
 8002250:	f7ff ff3a 	bl	80020c8 <LL_ADC_IsEnabled>
 8002254:	4604      	mov	r4, r0
 8002256:	4860      	ldr	r0, [pc, #384]	; (80023d8 <HAL_ADC_Init+0x29c>)
 8002258:	f7ff ff36 	bl	80020c8 <LL_ADC_IsEnabled>
 800225c:	4603      	mov	r3, r0
 800225e:	4323      	orrs	r3, r4
 8002260:	2b00      	cmp	r3, #0
 8002262:	bf0c      	ite	eq
 8002264:	2301      	moveq	r3, #1
 8002266:	2300      	movne	r3, #0
 8002268:	b2db      	uxtb	r3, r3
 800226a:	e008      	b.n	800227e <HAL_ADC_Init+0x142>
 800226c:	485b      	ldr	r0, [pc, #364]	; (80023dc <HAL_ADC_Init+0x2a0>)
 800226e:	f7ff ff2b 	bl	80020c8 <LL_ADC_IsEnabled>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	bf0c      	ite	eq
 8002278:	2301      	moveq	r3, #1
 800227a:	2300      	movne	r3, #0
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d012      	beq.n	80022a8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a53      	ldr	r2, [pc, #332]	; (80023d4 <HAL_ADC_Init+0x298>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d004      	beq.n	8002296 <HAL_ADC_Init+0x15a>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a51      	ldr	r2, [pc, #324]	; (80023d8 <HAL_ADC_Init+0x29c>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d101      	bne.n	800229a <HAL_ADC_Init+0x15e>
 8002296:	4a52      	ldr	r2, [pc, #328]	; (80023e0 <HAL_ADC_Init+0x2a4>)
 8002298:	e000      	b.n	800229c <HAL_ADC_Init+0x160>
 800229a:	4a52      	ldr	r2, [pc, #328]	; (80023e4 <HAL_ADC_Init+0x2a8>)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	4619      	mov	r1, r3
 80022a2:	4610      	mov	r0, r2
 80022a4:	f7ff fdbe 	bl	8001e24 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80022a8:	f7ff fd9a 	bl	8001de0 <HAL_GetREVID>
 80022ac:	4603      	mov	r3, r0
 80022ae:	f241 0203 	movw	r2, #4099	; 0x1003
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d914      	bls.n	80022e0 <HAL_ADC_Init+0x1a4>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	2b10      	cmp	r3, #16
 80022bc:	d110      	bne.n	80022e0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	7d5b      	ldrb	r3, [r3, #21]
 80022c2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80022c8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80022ce:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	7f1b      	ldrb	r3, [r3, #28]
 80022d4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80022d6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80022d8:	f043 030c 	orr.w	r3, r3, #12
 80022dc:	61bb      	str	r3, [r7, #24]
 80022de:	e00d      	b.n	80022fc <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	7d5b      	ldrb	r3, [r3, #21]
 80022e4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80022ea:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80022f0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	7f1b      	ldrb	r3, [r3, #28]
 80022f6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80022f8:	4313      	orrs	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	7f1b      	ldrb	r3, [r3, #28]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d106      	bne.n	8002312 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	3b01      	subs	r3, #1
 800230a:	045b      	lsls	r3, r3, #17
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002316:	2b00      	cmp	r3, #0
 8002318:	d009      	beq.n	800232e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002326:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4313      	orrs	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68da      	ldr	r2, [r3, #12]
 8002334:	4b2c      	ldr	r3, [pc, #176]	; (80023e8 <HAL_ADC_Init+0x2ac>)
 8002336:	4013      	ands	r3, r2
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	6812      	ldr	r2, [r2, #0]
 800233c:	69b9      	ldr	r1, [r7, #24]
 800233e:	430b      	orrs	r3, r1
 8002340:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff fed1 	bl	80020ee <LL_ADC_REG_IsConversionOngoing>
 800234c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff fede 	bl	8002114 <LL_ADC_INJ_IsConversionOngoing>
 8002358:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d15f      	bne.n	8002420 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d15c      	bne.n	8002420 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	7d1b      	ldrb	r3, [r3, #20]
 800236a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002370:	4313      	orrs	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68da      	ldr	r2, [r3, #12]
 800237a:	4b1c      	ldr	r3, [pc, #112]	; (80023ec <HAL_ADC_Init+0x2b0>)
 800237c:	4013      	ands	r3, r2
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	6812      	ldr	r2, [r2, #0]
 8002382:	69b9      	ldr	r1, [r7, #24]
 8002384:	430b      	orrs	r3, r1
 8002386:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800238e:	2b01      	cmp	r3, #1
 8002390:	d130      	bne.n	80023f4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002396:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	691a      	ldr	r2, [r3, #16]
 800239e:	4b14      	ldr	r3, [pc, #80]	; (80023f0 <HAL_ADC_Init+0x2b4>)
 80023a0:	4013      	ands	r3, r2
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80023a6:	3a01      	subs	r2, #1
 80023a8:	0411      	lsls	r1, r2, #16
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80023ae:	4311      	orrs	r1, r2
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80023b4:	4311      	orrs	r1, r2
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80023ba:	430a      	orrs	r2, r1
 80023bc:	431a      	orrs	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f042 0201 	orr.w	r2, r2, #1
 80023c6:	611a      	str	r2, [r3, #16]
 80023c8:	e01c      	b.n	8002404 <HAL_ADC_Init+0x2c8>
 80023ca:	bf00      	nop
 80023cc:	24000040 	.word	0x24000040
 80023d0:	053e2d63 	.word	0x053e2d63
 80023d4:	40022000 	.word	0x40022000
 80023d8:	40022100 	.word	0x40022100
 80023dc:	58026000 	.word	0x58026000
 80023e0:	40022300 	.word	0x40022300
 80023e4:	58026300 	.word	0x58026300
 80023e8:	fff0c003 	.word	0xfff0c003
 80023ec:	ffffbffc 	.word	0xffffbffc
 80023f0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	691a      	ldr	r2, [r3, #16]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 0201 	bic.w	r2, r2, #1
 8002402:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	430a      	orrs	r2, r1
 8002418:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 fb80 	bl	8002b20 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d10c      	bne.n	8002442 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	f023 010f 	bic.w	r1, r3, #15
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	1e5a      	subs	r2, r3, #1
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	430a      	orrs	r2, r1
 800243e:	631a      	str	r2, [r3, #48]	; 0x30
 8002440:	e007      	b.n	8002452 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f022 020f 	bic.w	r2, r2, #15
 8002450:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002456:	f023 0303 	bic.w	r3, r3, #3
 800245a:	f043 0201 	orr.w	r2, r3, #1
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	655a      	str	r2, [r3, #84]	; 0x54
 8002462:	e007      	b.n	8002474 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002468:	f043 0210 	orr.w	r2, r3, #16
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002474:	7ffb      	ldrb	r3, [r7, #31]
}
 8002476:	4618      	mov	r0, r3
 8002478:	3724      	adds	r7, #36	; 0x24
 800247a:	46bd      	mov	sp, r7
 800247c:	bd90      	pop	{r4, r7, pc}
 800247e:	bf00      	nop

08002480 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002480:	b590      	push	{r4, r7, lr}
 8002482:	b0a1      	sub	sp, #132	; 0x84
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800248a:	2300      	movs	r3, #0
 800248c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002490:	2300      	movs	r3, #0
 8002492:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	4a9d      	ldr	r2, [pc, #628]	; (8002710 <HAL_ADC_ConfigChannel+0x290>)
 800249a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d101      	bne.n	80024aa <HAL_ADC_ConfigChannel+0x2a>
 80024a6:	2302      	movs	r3, #2
 80024a8:	e321      	b.n	8002aee <HAL_ADC_ConfigChannel+0x66e>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff fe19 	bl	80020ee <LL_ADC_REG_IsConversionOngoing>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f040 8306 	bne.w	8002ad0 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d108      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x62>
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	0e9b      	lsrs	r3, r3, #26
 80024d6:	f003 031f 	and.w	r3, r3, #31
 80024da:	2201      	movs	r2, #1
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	e016      	b.n	8002510 <HAL_ADC_ConfigChannel+0x90>
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024ea:	fa93 f3a3 	rbit	r3, r3
 80024ee:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024f2:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80024f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80024fa:	2320      	movs	r3, #32
 80024fc:	e003      	b.n	8002506 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80024fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002500:	fab3 f383 	clz	r3, r3
 8002504:	b2db      	uxtb	r3, r3
 8002506:	f003 031f 	and.w	r3, r3, #31
 800250a:	2201      	movs	r2, #1
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6812      	ldr	r2, [r2, #0]
 8002514:	69d1      	ldr	r1, [r2, #28]
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6812      	ldr	r2, [r2, #0]
 800251a:	430b      	orrs	r3, r1
 800251c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6818      	ldr	r0, [r3, #0]
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	6859      	ldr	r1, [r3, #4]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	461a      	mov	r2, r3
 800252c:	f7ff fd02 	bl	8001f34 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff fdda 	bl	80020ee <LL_ADC_REG_IsConversionOngoing>
 800253a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff fde7 	bl	8002114 <LL_ADC_INJ_IsConversionOngoing>
 8002546:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002548:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800254a:	2b00      	cmp	r3, #0
 800254c:	f040 80b3 	bne.w	80026b6 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002550:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002552:	2b00      	cmp	r3, #0
 8002554:	f040 80af 	bne.w	80026b6 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6818      	ldr	r0, [r3, #0]
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	6819      	ldr	r1, [r3, #0]
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	461a      	mov	r2, r3
 8002566:	f7ff fd11 	bl	8001f8c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800256a:	4b6a      	ldr	r3, [pc, #424]	; (8002714 <HAL_ADC_ConfigChannel+0x294>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002572:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002576:	d10b      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x110>
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	695a      	ldr	r2, [r3, #20]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	089b      	lsrs	r3, r3, #2
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	e01d      	b.n	80025cc <HAL_ADC_ConfigChannel+0x14c>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	f003 0310 	and.w	r3, r3, #16
 800259a:	2b00      	cmp	r3, #0
 800259c:	d10b      	bne.n	80025b6 <HAL_ADC_ConfigChannel+0x136>
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	695a      	ldr	r2, [r3, #20]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	089b      	lsrs	r3, r3, #2
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	e00a      	b.n	80025cc <HAL_ADC_ConfigChannel+0x14c>
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	695a      	ldr	r2, [r3, #20]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	089b      	lsrs	r3, r3, #2
 80025c2:	f003 0304 	and.w	r3, r3, #4
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	2b04      	cmp	r3, #4
 80025d4:	d027      	beq.n	8002626 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6818      	ldr	r0, [r3, #0]
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	6919      	ldr	r1, [r3, #16]
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025e4:	f7ff fc52 	bl	8001e8c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6818      	ldr	r0, [r3, #0]
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	6919      	ldr	r1, [r3, #16]
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	7e5b      	ldrb	r3, [r3, #25]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d102      	bne.n	80025fe <HAL_ADC_ConfigChannel+0x17e>
 80025f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80025fc:	e000      	b.n	8002600 <HAL_ADC_ConfigChannel+0x180>
 80025fe:	2300      	movs	r3, #0
 8002600:	461a      	mov	r2, r3
 8002602:	f7ff fc7c 	bl	8001efe <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6818      	ldr	r0, [r3, #0]
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	6919      	ldr	r1, [r3, #16]
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	7e1b      	ldrb	r3, [r3, #24]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d102      	bne.n	800261c <HAL_ADC_ConfigChannel+0x19c>
 8002616:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800261a:	e000      	b.n	800261e <HAL_ADC_ConfigChannel+0x19e>
 800261c:	2300      	movs	r3, #0
 800261e:	461a      	mov	r2, r3
 8002620:	f7ff fc54 	bl	8001ecc <LL_ADC_SetDataRightShift>
 8002624:	e047      	b.n	80026b6 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800262c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	069b      	lsls	r3, r3, #26
 8002636:	429a      	cmp	r2, r3
 8002638:	d107      	bne.n	800264a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002648:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002650:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	069b      	lsls	r3, r3, #26
 800265a:	429a      	cmp	r2, r3
 800265c:	d107      	bne.n	800266e <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800266c:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002674:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	069b      	lsls	r3, r3, #26
 800267e:	429a      	cmp	r2, r3
 8002680:	d107      	bne.n	8002692 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002690:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002698:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	069b      	lsls	r3, r3, #26
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d107      	bne.n	80026b6 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80026b4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff fd04 	bl	80020c8 <LL_ADC_IsEnabled>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f040 820d 	bne.w	8002ae2 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6818      	ldr	r0, [r3, #0]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	6819      	ldr	r1, [r3, #0]
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	461a      	mov	r2, r3
 80026d6:	f7ff fc85 	bl	8001fe4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	4a0c      	ldr	r2, [pc, #48]	; (8002710 <HAL_ADC_ConfigChannel+0x290>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	f040 8133 	bne.w	800294c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d110      	bne.n	8002718 <HAL_ADC_ConfigChannel+0x298>
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	0e9b      	lsrs	r3, r3, #26
 80026fc:	3301      	adds	r3, #1
 80026fe:	f003 031f 	and.w	r3, r3, #31
 8002702:	2b09      	cmp	r3, #9
 8002704:	bf94      	ite	ls
 8002706:	2301      	movls	r3, #1
 8002708:	2300      	movhi	r3, #0
 800270a:	b2db      	uxtb	r3, r3
 800270c:	e01e      	b.n	800274c <HAL_ADC_ConfigChannel+0x2cc>
 800270e:	bf00      	nop
 8002710:	47ff0000 	.word	0x47ff0000
 8002714:	5c001000 	.word	0x5c001000
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002720:	fa93 f3a3 	rbit	r3, r3
 8002724:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002726:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002728:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800272a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800272c:	2b00      	cmp	r3, #0
 800272e:	d101      	bne.n	8002734 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002730:	2320      	movs	r3, #32
 8002732:	e003      	b.n	800273c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002734:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002736:	fab3 f383 	clz	r3, r3
 800273a:	b2db      	uxtb	r3, r3
 800273c:	3301      	adds	r3, #1
 800273e:	f003 031f 	and.w	r3, r3, #31
 8002742:	2b09      	cmp	r3, #9
 8002744:	bf94      	ite	ls
 8002746:	2301      	movls	r3, #1
 8002748:	2300      	movhi	r3, #0
 800274a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800274c:	2b00      	cmp	r3, #0
 800274e:	d079      	beq.n	8002844 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002758:	2b00      	cmp	r3, #0
 800275a:	d107      	bne.n	800276c <HAL_ADC_ConfigChannel+0x2ec>
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	0e9b      	lsrs	r3, r3, #26
 8002762:	3301      	adds	r3, #1
 8002764:	069b      	lsls	r3, r3, #26
 8002766:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800276a:	e015      	b.n	8002798 <HAL_ADC_ConfigChannel+0x318>
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002774:	fa93 f3a3 	rbit	r3, r3
 8002778:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800277a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800277c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800277e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002780:	2b00      	cmp	r3, #0
 8002782:	d101      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002784:	2320      	movs	r3, #32
 8002786:	e003      	b.n	8002790 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002788:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800278a:	fab3 f383 	clz	r3, r3
 800278e:	b2db      	uxtb	r3, r3
 8002790:	3301      	adds	r3, #1
 8002792:	069b      	lsls	r3, r3, #26
 8002794:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d109      	bne.n	80027b8 <HAL_ADC_ConfigChannel+0x338>
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	0e9b      	lsrs	r3, r3, #26
 80027aa:	3301      	adds	r3, #1
 80027ac:	f003 031f 	and.w	r3, r3, #31
 80027b0:	2101      	movs	r1, #1
 80027b2:	fa01 f303 	lsl.w	r3, r1, r3
 80027b6:	e017      	b.n	80027e8 <HAL_ADC_ConfigChannel+0x368>
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027c0:	fa93 f3a3 	rbit	r3, r3
 80027c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80027c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027c8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80027ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80027d0:	2320      	movs	r3, #32
 80027d2:	e003      	b.n	80027dc <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80027d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027d6:	fab3 f383 	clz	r3, r3
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	3301      	adds	r3, #1
 80027de:	f003 031f 	and.w	r3, r3, #31
 80027e2:	2101      	movs	r1, #1
 80027e4:	fa01 f303 	lsl.w	r3, r1, r3
 80027e8:	ea42 0103 	orr.w	r1, r2, r3
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10a      	bne.n	800280e <HAL_ADC_ConfigChannel+0x38e>
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	0e9b      	lsrs	r3, r3, #26
 80027fe:	3301      	adds	r3, #1
 8002800:	f003 021f 	and.w	r2, r3, #31
 8002804:	4613      	mov	r3, r2
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	4413      	add	r3, r2
 800280a:	051b      	lsls	r3, r3, #20
 800280c:	e018      	b.n	8002840 <HAL_ADC_ConfigChannel+0x3c0>
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002816:	fa93 f3a3 	rbit	r3, r3
 800281a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800281c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800281e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002826:	2320      	movs	r3, #32
 8002828:	e003      	b.n	8002832 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800282a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800282c:	fab3 f383 	clz	r3, r3
 8002830:	b2db      	uxtb	r3, r3
 8002832:	3301      	adds	r3, #1
 8002834:	f003 021f 	and.w	r2, r3, #31
 8002838:	4613      	mov	r3, r2
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	4413      	add	r3, r2
 800283e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002840:	430b      	orrs	r3, r1
 8002842:	e07e      	b.n	8002942 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800284c:	2b00      	cmp	r3, #0
 800284e:	d107      	bne.n	8002860 <HAL_ADC_ConfigChannel+0x3e0>
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	0e9b      	lsrs	r3, r3, #26
 8002856:	3301      	adds	r3, #1
 8002858:	069b      	lsls	r3, r3, #26
 800285a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800285e:	e015      	b.n	800288c <HAL_ADC_ConfigChannel+0x40c>
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002868:	fa93 f3a3 	rbit	r3, r3
 800286c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002878:	2320      	movs	r3, #32
 800287a:	e003      	b.n	8002884 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800287c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287e:	fab3 f383 	clz	r3, r3
 8002882:	b2db      	uxtb	r3, r3
 8002884:	3301      	adds	r3, #1
 8002886:	069b      	lsls	r3, r3, #26
 8002888:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002894:	2b00      	cmp	r3, #0
 8002896:	d109      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x42c>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	0e9b      	lsrs	r3, r3, #26
 800289e:	3301      	adds	r3, #1
 80028a0:	f003 031f 	and.w	r3, r3, #31
 80028a4:	2101      	movs	r1, #1
 80028a6:	fa01 f303 	lsl.w	r3, r1, r3
 80028aa:	e017      	b.n	80028dc <HAL_ADC_ConfigChannel+0x45c>
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	fa93 f3a3 	rbit	r3, r3
 80028b8:	61bb      	str	r3, [r7, #24]
  return result;
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80028be:	6a3b      	ldr	r3, [r7, #32]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d101      	bne.n	80028c8 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80028c4:	2320      	movs	r3, #32
 80028c6:	e003      	b.n	80028d0 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80028c8:	6a3b      	ldr	r3, [r7, #32]
 80028ca:	fab3 f383 	clz	r3, r3
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	3301      	adds	r3, #1
 80028d2:	f003 031f 	and.w	r3, r3, #31
 80028d6:	2101      	movs	r1, #1
 80028d8:	fa01 f303 	lsl.w	r3, r1, r3
 80028dc:	ea42 0103 	orr.w	r1, r2, r3
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d10d      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x488>
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	0e9b      	lsrs	r3, r3, #26
 80028f2:	3301      	adds	r3, #1
 80028f4:	f003 021f 	and.w	r2, r3, #31
 80028f8:	4613      	mov	r3, r2
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	4413      	add	r3, r2
 80028fe:	3b1e      	subs	r3, #30
 8002900:	051b      	lsls	r3, r3, #20
 8002902:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002906:	e01b      	b.n	8002940 <HAL_ADC_ConfigChannel+0x4c0>
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	fa93 f3a3 	rbit	r3, r3
 8002914:	60fb      	str	r3, [r7, #12]
  return result;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d101      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002920:	2320      	movs	r3, #32
 8002922:	e003      	b.n	800292c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	fab3 f383 	clz	r3, r3
 800292a:	b2db      	uxtb	r3, r3
 800292c:	3301      	adds	r3, #1
 800292e:	f003 021f 	and.w	r2, r3, #31
 8002932:	4613      	mov	r3, r2
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	4413      	add	r3, r2
 8002938:	3b1e      	subs	r3, #30
 800293a:	051b      	lsls	r3, r3, #20
 800293c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002940:	430b      	orrs	r3, r1
 8002942:	683a      	ldr	r2, [r7, #0]
 8002944:	6892      	ldr	r2, [r2, #8]
 8002946:	4619      	mov	r1, r3
 8002948:	f7ff fb20 	bl	8001f8c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	f280 80c6 	bge.w	8002ae2 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a67      	ldr	r2, [pc, #412]	; (8002af8 <HAL_ADC_ConfigChannel+0x678>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d004      	beq.n	800296a <HAL_ADC_ConfigChannel+0x4ea>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a65      	ldr	r2, [pc, #404]	; (8002afc <HAL_ADC_ConfigChannel+0x67c>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d101      	bne.n	800296e <HAL_ADC_ConfigChannel+0x4ee>
 800296a:	4b65      	ldr	r3, [pc, #404]	; (8002b00 <HAL_ADC_ConfigChannel+0x680>)
 800296c:	e000      	b.n	8002970 <HAL_ADC_ConfigChannel+0x4f0>
 800296e:	4b65      	ldr	r3, [pc, #404]	; (8002b04 <HAL_ADC_ConfigChannel+0x684>)
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff fa7d 	bl	8001e70 <LL_ADC_GetCommonPathInternalCh>
 8002976:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a5e      	ldr	r2, [pc, #376]	; (8002af8 <HAL_ADC_ConfigChannel+0x678>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d004      	beq.n	800298c <HAL_ADC_ConfigChannel+0x50c>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a5d      	ldr	r2, [pc, #372]	; (8002afc <HAL_ADC_ConfigChannel+0x67c>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d10e      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x52a>
 800298c:	485a      	ldr	r0, [pc, #360]	; (8002af8 <HAL_ADC_ConfigChannel+0x678>)
 800298e:	f7ff fb9b 	bl	80020c8 <LL_ADC_IsEnabled>
 8002992:	4604      	mov	r4, r0
 8002994:	4859      	ldr	r0, [pc, #356]	; (8002afc <HAL_ADC_ConfigChannel+0x67c>)
 8002996:	f7ff fb97 	bl	80020c8 <LL_ADC_IsEnabled>
 800299a:	4603      	mov	r3, r0
 800299c:	4323      	orrs	r3, r4
 800299e:	2b00      	cmp	r3, #0
 80029a0:	bf0c      	ite	eq
 80029a2:	2301      	moveq	r3, #1
 80029a4:	2300      	movne	r3, #0
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	e008      	b.n	80029bc <HAL_ADC_ConfigChannel+0x53c>
 80029aa:	4857      	ldr	r0, [pc, #348]	; (8002b08 <HAL_ADC_ConfigChannel+0x688>)
 80029ac:	f7ff fb8c 	bl	80020c8 <LL_ADC_IsEnabled>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	bf0c      	ite	eq
 80029b6:	2301      	moveq	r3, #1
 80029b8:	2300      	movne	r3, #0
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d07d      	beq.n	8002abc <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a51      	ldr	r2, [pc, #324]	; (8002b0c <HAL_ADC_ConfigChannel+0x68c>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d130      	bne.n	8002a2c <HAL_ADC_ConfigChannel+0x5ac>
 80029ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d12b      	bne.n	8002a2c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a4b      	ldr	r2, [pc, #300]	; (8002b08 <HAL_ADC_ConfigChannel+0x688>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	f040 8081 	bne.w	8002ae2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a44      	ldr	r2, [pc, #272]	; (8002af8 <HAL_ADC_ConfigChannel+0x678>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d004      	beq.n	80029f4 <HAL_ADC_ConfigChannel+0x574>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a43      	ldr	r2, [pc, #268]	; (8002afc <HAL_ADC_ConfigChannel+0x67c>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d101      	bne.n	80029f8 <HAL_ADC_ConfigChannel+0x578>
 80029f4:	4a42      	ldr	r2, [pc, #264]	; (8002b00 <HAL_ADC_ConfigChannel+0x680>)
 80029f6:	e000      	b.n	80029fa <HAL_ADC_ConfigChannel+0x57a>
 80029f8:	4a42      	ldr	r2, [pc, #264]	; (8002b04 <HAL_ADC_ConfigChannel+0x684>)
 80029fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a00:	4619      	mov	r1, r3
 8002a02:	4610      	mov	r0, r2
 8002a04:	f7ff fa21 	bl	8001e4a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a08:	4b41      	ldr	r3, [pc, #260]	; (8002b10 <HAL_ADC_ConfigChannel+0x690>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	099b      	lsrs	r3, r3, #6
 8002a0e:	4a41      	ldr	r2, [pc, #260]	; (8002b14 <HAL_ADC_ConfigChannel+0x694>)
 8002a10:	fba2 2303 	umull	r2, r3, r2, r3
 8002a14:	099b      	lsrs	r3, r3, #6
 8002a16:	3301      	adds	r3, #1
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002a1c:	e002      	b.n	8002a24 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	3b01      	subs	r3, #1
 8002a22:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1f9      	bne.n	8002a1e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a2a:	e05a      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a39      	ldr	r2, [pc, #228]	; (8002b18 <HAL_ADC_ConfigChannel+0x698>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d11e      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x5f4>
 8002a36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d119      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a30      	ldr	r2, [pc, #192]	; (8002b08 <HAL_ADC_ConfigChannel+0x688>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d14b      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a2a      	ldr	r2, [pc, #168]	; (8002af8 <HAL_ADC_ConfigChannel+0x678>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d004      	beq.n	8002a5e <HAL_ADC_ConfigChannel+0x5de>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a28      	ldr	r2, [pc, #160]	; (8002afc <HAL_ADC_ConfigChannel+0x67c>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d101      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x5e2>
 8002a5e:	4a28      	ldr	r2, [pc, #160]	; (8002b00 <HAL_ADC_ConfigChannel+0x680>)
 8002a60:	e000      	b.n	8002a64 <HAL_ADC_ConfigChannel+0x5e4>
 8002a62:	4a28      	ldr	r2, [pc, #160]	; (8002b04 <HAL_ADC_ConfigChannel+0x684>)
 8002a64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4610      	mov	r0, r2
 8002a6e:	f7ff f9ec 	bl	8001e4a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a72:	e036      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a28      	ldr	r2, [pc, #160]	; (8002b1c <HAL_ADC_ConfigChannel+0x69c>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d131      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x662>
 8002a7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d12c      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a1e      	ldr	r2, [pc, #120]	; (8002b08 <HAL_ADC_ConfigChannel+0x688>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d127      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a18      	ldr	r2, [pc, #96]	; (8002af8 <HAL_ADC_ConfigChannel+0x678>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d004      	beq.n	8002aa6 <HAL_ADC_ConfigChannel+0x626>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a16      	ldr	r2, [pc, #88]	; (8002afc <HAL_ADC_ConfigChannel+0x67c>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d101      	bne.n	8002aaa <HAL_ADC_ConfigChannel+0x62a>
 8002aa6:	4a16      	ldr	r2, [pc, #88]	; (8002b00 <HAL_ADC_ConfigChannel+0x680>)
 8002aa8:	e000      	b.n	8002aac <HAL_ADC_ConfigChannel+0x62c>
 8002aaa:	4a16      	ldr	r2, [pc, #88]	; (8002b04 <HAL_ADC_ConfigChannel+0x684>)
 8002aac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4610      	mov	r0, r2
 8002ab6:	f7ff f9c8 	bl	8001e4a <LL_ADC_SetCommonPathInternalCh>
 8002aba:	e012      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac0:	f043 0220 	orr.w	r2, r3, #32
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002ace:	e008      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad4:	f043 0220 	orr.w	r2, r3, #32
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002aea:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3784      	adds	r7, #132	; 0x84
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd90      	pop	{r4, r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40022000 	.word	0x40022000
 8002afc:	40022100 	.word	0x40022100
 8002b00:	40022300 	.word	0x40022300
 8002b04:	58026300 	.word	0x58026300
 8002b08:	58026000 	.word	0x58026000
 8002b0c:	cb840000 	.word	0xcb840000
 8002b10:	24000040 	.word	0x24000040
 8002b14:	053e2d63 	.word	0x053e2d63
 8002b18:	c7520000 	.word	0xc7520000
 8002b1c:	cfb80000 	.word	0xcfb80000

08002b20 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a7a      	ldr	r2, [pc, #488]	; (8002d18 <ADC_ConfigureBoostMode+0x1f8>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d004      	beq.n	8002b3c <ADC_ConfigureBoostMode+0x1c>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a79      	ldr	r2, [pc, #484]	; (8002d1c <ADC_ConfigureBoostMode+0x1fc>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d109      	bne.n	8002b50 <ADC_ConfigureBoostMode+0x30>
 8002b3c:	4b78      	ldr	r3, [pc, #480]	; (8002d20 <ADC_ConfigureBoostMode+0x200>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	bf14      	ite	ne
 8002b48:	2301      	movne	r3, #1
 8002b4a:	2300      	moveq	r3, #0
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	e008      	b.n	8002b62 <ADC_ConfigureBoostMode+0x42>
 8002b50:	4b74      	ldr	r3, [pc, #464]	; (8002d24 <ADC_ConfigureBoostMode+0x204>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	bf14      	ite	ne
 8002b5c:	2301      	movne	r3, #1
 8002b5e:	2300      	moveq	r3, #0
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d01c      	beq.n	8002ba0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002b66:	f002 ff39 	bl	80059dc <HAL_RCC_GetHCLKFreq>
 8002b6a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b74:	d010      	beq.n	8002b98 <ADC_ConfigureBoostMode+0x78>
 8002b76:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b7a:	d873      	bhi.n	8002c64 <ADC_ConfigureBoostMode+0x144>
 8002b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b80:	d002      	beq.n	8002b88 <ADC_ConfigureBoostMode+0x68>
 8002b82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b86:	d16d      	bne.n	8002c64 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	0c1b      	lsrs	r3, r3, #16
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b94:	60fb      	str	r3, [r7, #12]
        break;
 8002b96:	e068      	b.n	8002c6a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	089b      	lsrs	r3, r3, #2
 8002b9c:	60fb      	str	r3, [r7, #12]
        break;
 8002b9e:	e064      	b.n	8002c6a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002ba0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002ba4:	f04f 0100 	mov.w	r1, #0
 8002ba8:	f004 f968 	bl	8006e7c <HAL_RCCEx_GetPeriphCLKFreq>
 8002bac:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002bb6:	d051      	beq.n	8002c5c <ADC_ConfigureBoostMode+0x13c>
 8002bb8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002bbc:	d854      	bhi.n	8002c68 <ADC_ConfigureBoostMode+0x148>
 8002bbe:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002bc2:	d047      	beq.n	8002c54 <ADC_ConfigureBoostMode+0x134>
 8002bc4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002bc8:	d84e      	bhi.n	8002c68 <ADC_ConfigureBoostMode+0x148>
 8002bca:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002bce:	d03d      	beq.n	8002c4c <ADC_ConfigureBoostMode+0x12c>
 8002bd0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002bd4:	d848      	bhi.n	8002c68 <ADC_ConfigureBoostMode+0x148>
 8002bd6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bda:	d033      	beq.n	8002c44 <ADC_ConfigureBoostMode+0x124>
 8002bdc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002be0:	d842      	bhi.n	8002c68 <ADC_ConfigureBoostMode+0x148>
 8002be2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002be6:	d029      	beq.n	8002c3c <ADC_ConfigureBoostMode+0x11c>
 8002be8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002bec:	d83c      	bhi.n	8002c68 <ADC_ConfigureBoostMode+0x148>
 8002bee:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002bf2:	d01a      	beq.n	8002c2a <ADC_ConfigureBoostMode+0x10a>
 8002bf4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002bf8:	d836      	bhi.n	8002c68 <ADC_ConfigureBoostMode+0x148>
 8002bfa:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002bfe:	d014      	beq.n	8002c2a <ADC_ConfigureBoostMode+0x10a>
 8002c00:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002c04:	d830      	bhi.n	8002c68 <ADC_ConfigureBoostMode+0x148>
 8002c06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c0a:	d00e      	beq.n	8002c2a <ADC_ConfigureBoostMode+0x10a>
 8002c0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c10:	d82a      	bhi.n	8002c68 <ADC_ConfigureBoostMode+0x148>
 8002c12:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002c16:	d008      	beq.n	8002c2a <ADC_ConfigureBoostMode+0x10a>
 8002c18:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002c1c:	d824      	bhi.n	8002c68 <ADC_ConfigureBoostMode+0x148>
 8002c1e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c22:	d002      	beq.n	8002c2a <ADC_ConfigureBoostMode+0x10a>
 8002c24:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002c28:	d11e      	bne.n	8002c68 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	0c9b      	lsrs	r3, r3, #18
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c38:	60fb      	str	r3, [r7, #12]
        break;
 8002c3a:	e016      	b.n	8002c6a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	091b      	lsrs	r3, r3, #4
 8002c40:	60fb      	str	r3, [r7, #12]
        break;
 8002c42:	e012      	b.n	8002c6a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	095b      	lsrs	r3, r3, #5
 8002c48:	60fb      	str	r3, [r7, #12]
        break;
 8002c4a:	e00e      	b.n	8002c6a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	099b      	lsrs	r3, r3, #6
 8002c50:	60fb      	str	r3, [r7, #12]
        break;
 8002c52:	e00a      	b.n	8002c6a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	09db      	lsrs	r3, r3, #7
 8002c58:	60fb      	str	r3, [r7, #12]
        break;
 8002c5a:	e006      	b.n	8002c6a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	0a1b      	lsrs	r3, r3, #8
 8002c60:	60fb      	str	r3, [r7, #12]
        break;
 8002c62:	e002      	b.n	8002c6a <ADC_ConfigureBoostMode+0x14a>
        break;
 8002c64:	bf00      	nop
 8002c66:	e000      	b.n	8002c6a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002c68:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002c6a:	f7ff f8b9 	bl	8001de0 <HAL_GetREVID>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	f241 0203 	movw	r2, #4099	; 0x1003
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d815      	bhi.n	8002ca4 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	4a2b      	ldr	r2, [pc, #172]	; (8002d28 <ADC_ConfigureBoostMode+0x208>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d908      	bls.n	8002c92 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689a      	ldr	r2, [r3, #8]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c8e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002c90:	e03e      	b.n	8002d10 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ca0:	609a      	str	r2, [r3, #8]
}
 8002ca2:	e035      	b.n	8002d10 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	085b      	lsrs	r3, r3, #1
 8002ca8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	4a1f      	ldr	r2, [pc, #124]	; (8002d2c <ADC_ConfigureBoostMode+0x20c>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d808      	bhi.n	8002cc4 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002cc0:	609a      	str	r2, [r3, #8]
}
 8002cc2:	e025      	b.n	8002d10 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4a1a      	ldr	r2, [pc, #104]	; (8002d30 <ADC_ConfigureBoostMode+0x210>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d80a      	bhi.n	8002ce2 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cde:	609a      	str	r2, [r3, #8]
}
 8002ce0:	e016      	b.n	8002d10 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	4a13      	ldr	r2, [pc, #76]	; (8002d34 <ADC_ConfigureBoostMode+0x214>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d80a      	bhi.n	8002d00 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cfc:	609a      	str	r2, [r3, #8]
}
 8002cfe:	e007      	b.n	8002d10 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689a      	ldr	r2, [r3, #8]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002d0e:	609a      	str	r2, [r3, #8]
}
 8002d10:	bf00      	nop
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40022000 	.word	0x40022000
 8002d1c:	40022100 	.word	0x40022100
 8002d20:	40022300 	.word	0x40022300
 8002d24:	58026300 	.word	0x58026300
 8002d28:	01312d00 	.word	0x01312d00
 8002d2c:	005f5e10 	.word	0x005f5e10
 8002d30:	00bebc20 	.word	0x00bebc20
 8002d34:	017d7840 	.word	0x017d7840

08002d38 <LL_ADC_IsEnabled>:
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d101      	bne.n	8002d50 <LL_ADC_IsEnabled+0x18>
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e000      	b.n	8002d52 <LL_ADC_IsEnabled+0x1a>
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <LL_ADC_REG_IsConversionOngoing>:
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b083      	sub	sp, #12
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 0304 	and.w	r3, r3, #4
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	d101      	bne.n	8002d76 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002d84:	b590      	push	{r4, r7, lr}
 8002d86:	b09f      	sub	sp, #124	; 0x7c
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d101      	bne.n	8002da2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002d9e:	2302      	movs	r3, #2
 8002da0:	e0be      	b.n	8002f20 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002daa:	2300      	movs	r3, #0
 8002dac:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002dae:	2300      	movs	r3, #0
 8002db0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a5c      	ldr	r2, [pc, #368]	; (8002f28 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d102      	bne.n	8002dc2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002dbc:	4b5b      	ldr	r3, [pc, #364]	; (8002f2c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002dbe:	60bb      	str	r3, [r7, #8]
 8002dc0:	e001      	b.n	8002dc6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d10b      	bne.n	8002de4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd0:	f043 0220 	orr.w	r2, r3, #32
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e09d      	b.n	8002f20 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff ffb9 	bl	8002d5e <LL_ADC_REG_IsConversionOngoing>
 8002dec:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff ffb3 	bl	8002d5e <LL_ADC_REG_IsConversionOngoing>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d17f      	bne.n	8002efe <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002dfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d17c      	bne.n	8002efe <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a47      	ldr	r2, [pc, #284]	; (8002f28 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d004      	beq.n	8002e18 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a46      	ldr	r2, [pc, #280]	; (8002f2c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d101      	bne.n	8002e1c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002e18:	4b45      	ldr	r3, [pc, #276]	; (8002f30 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002e1a:	e000      	b.n	8002e1e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002e1c:	4b45      	ldr	r3, [pc, #276]	; (8002f34 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002e1e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d039      	beq.n	8002e9c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	431a      	orrs	r2, r3
 8002e36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e38:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a3a      	ldr	r2, [pc, #232]	; (8002f28 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d004      	beq.n	8002e4e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a38      	ldr	r2, [pc, #224]	; (8002f2c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d10e      	bne.n	8002e6c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002e4e:	4836      	ldr	r0, [pc, #216]	; (8002f28 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002e50:	f7ff ff72 	bl	8002d38 <LL_ADC_IsEnabled>
 8002e54:	4604      	mov	r4, r0
 8002e56:	4835      	ldr	r0, [pc, #212]	; (8002f2c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002e58:	f7ff ff6e 	bl	8002d38 <LL_ADC_IsEnabled>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	4323      	orrs	r3, r4
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	bf0c      	ite	eq
 8002e64:	2301      	moveq	r3, #1
 8002e66:	2300      	movne	r3, #0
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	e008      	b.n	8002e7e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002e6c:	4832      	ldr	r0, [pc, #200]	; (8002f38 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002e6e:	f7ff ff63 	bl	8002d38 <LL_ADC_IsEnabled>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	bf0c      	ite	eq
 8002e78:	2301      	moveq	r3, #1
 8002e7a:	2300      	movne	r3, #0
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d047      	beq.n	8002f12 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e84:	689a      	ldr	r2, [r3, #8]
 8002e86:	4b2d      	ldr	r3, [pc, #180]	; (8002f3c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002e88:	4013      	ands	r3, r2
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	6811      	ldr	r1, [r2, #0]
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	6892      	ldr	r2, [r2, #8]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	431a      	orrs	r2, r3
 8002e96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e98:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e9a:	e03a      	b.n	8002f12 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ea6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a1e      	ldr	r2, [pc, #120]	; (8002f28 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d004      	beq.n	8002ebc <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a1d      	ldr	r2, [pc, #116]	; (8002f2c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d10e      	bne.n	8002eda <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002ebc:	481a      	ldr	r0, [pc, #104]	; (8002f28 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002ebe:	f7ff ff3b 	bl	8002d38 <LL_ADC_IsEnabled>
 8002ec2:	4604      	mov	r4, r0
 8002ec4:	4819      	ldr	r0, [pc, #100]	; (8002f2c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002ec6:	f7ff ff37 	bl	8002d38 <LL_ADC_IsEnabled>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	4323      	orrs	r3, r4
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	bf0c      	ite	eq
 8002ed2:	2301      	moveq	r3, #1
 8002ed4:	2300      	movne	r3, #0
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	e008      	b.n	8002eec <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002eda:	4817      	ldr	r0, [pc, #92]	; (8002f38 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002edc:	f7ff ff2c 	bl	8002d38 <LL_ADC_IsEnabled>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	bf0c      	ite	eq
 8002ee6:	2301      	moveq	r3, #1
 8002ee8:	2300      	movne	r3, #0
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d010      	beq.n	8002f12 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002ef0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	4b11      	ldr	r3, [pc, #68]	; (8002f3c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002efa:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002efc:	e009      	b.n	8002f12 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f02:	f043 0220 	orr.w	r2, r3, #32
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002f10:	e000      	b.n	8002f14 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f12:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f1c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	377c      	adds	r7, #124	; 0x7c
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd90      	pop	{r4, r7, pc}
 8002f28:	40022000 	.word	0x40022000
 8002f2c:	40022100 	.word	0x40022100
 8002f30:	40022300 	.word	0x40022300
 8002f34:	58026300 	.word	0x58026300
 8002f38:	58026000 	.word	0x58026000
 8002f3c:	fffff0e0 	.word	0xfffff0e0

08002f40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f003 0307 	and.w	r3, r3, #7
 8002f4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f50:	4b0b      	ldr	r3, [pc, #44]	; (8002f80 <__NVIC_SetPriorityGrouping+0x40>)
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f56:	68ba      	ldr	r2, [r7, #8]
 8002f58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002f68:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <__NVIC_SetPriorityGrouping+0x44>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f6e:	4a04      	ldr	r2, [pc, #16]	; (8002f80 <__NVIC_SetPriorityGrouping+0x40>)
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	60d3      	str	r3, [r2, #12]
}
 8002f74:	bf00      	nop
 8002f76:	3714      	adds	r7, #20
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	e000ed00 	.word	0xe000ed00
 8002f84:	05fa0000 	.word	0x05fa0000

08002f88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f8c:	4b04      	ldr	r3, [pc, #16]	; (8002fa0 <__NVIC_GetPriorityGrouping+0x18>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	0a1b      	lsrs	r3, r3, #8
 8002f92:	f003 0307 	and.w	r3, r3, #7
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr
 8002fa0:	e000ed00 	.word	0xe000ed00

08002fa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	4603      	mov	r3, r0
 8002fac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002fae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	db0b      	blt.n	8002fce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fb6:	88fb      	ldrh	r3, [r7, #6]
 8002fb8:	f003 021f 	and.w	r2, r3, #31
 8002fbc:	4907      	ldr	r1, [pc, #28]	; (8002fdc <__NVIC_EnableIRQ+0x38>)
 8002fbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fc2:	095b      	lsrs	r3, r3, #5
 8002fc4:	2001      	movs	r0, #1
 8002fc6:	fa00 f202 	lsl.w	r2, r0, r2
 8002fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002fce:	bf00      	nop
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	e000e100 	.word	0xe000e100

08002fe0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	6039      	str	r1, [r7, #0]
 8002fea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002fec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	db0a      	blt.n	800300a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	b2da      	uxtb	r2, r3
 8002ff8:	490c      	ldr	r1, [pc, #48]	; (800302c <__NVIC_SetPriority+0x4c>)
 8002ffa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ffe:	0112      	lsls	r2, r2, #4
 8003000:	b2d2      	uxtb	r2, r2
 8003002:	440b      	add	r3, r1
 8003004:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003008:	e00a      	b.n	8003020 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	b2da      	uxtb	r2, r3
 800300e:	4908      	ldr	r1, [pc, #32]	; (8003030 <__NVIC_SetPriority+0x50>)
 8003010:	88fb      	ldrh	r3, [r7, #6]
 8003012:	f003 030f 	and.w	r3, r3, #15
 8003016:	3b04      	subs	r3, #4
 8003018:	0112      	lsls	r2, r2, #4
 800301a:	b2d2      	uxtb	r2, r2
 800301c:	440b      	add	r3, r1
 800301e:	761a      	strb	r2, [r3, #24]
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	e000e100 	.word	0xe000e100
 8003030:	e000ed00 	.word	0xe000ed00

08003034 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003034:	b480      	push	{r7}
 8003036:	b089      	sub	sp, #36	; 0x24
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f003 0307 	and.w	r3, r3, #7
 8003046:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	f1c3 0307 	rsb	r3, r3, #7
 800304e:	2b04      	cmp	r3, #4
 8003050:	bf28      	it	cs
 8003052:	2304      	movcs	r3, #4
 8003054:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	3304      	adds	r3, #4
 800305a:	2b06      	cmp	r3, #6
 800305c:	d902      	bls.n	8003064 <NVIC_EncodePriority+0x30>
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	3b03      	subs	r3, #3
 8003062:	e000      	b.n	8003066 <NVIC_EncodePriority+0x32>
 8003064:	2300      	movs	r3, #0
 8003066:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003068:	f04f 32ff 	mov.w	r2, #4294967295
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	43da      	mvns	r2, r3
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	401a      	ands	r2, r3
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800307c:	f04f 31ff 	mov.w	r1, #4294967295
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	fa01 f303 	lsl.w	r3, r1, r3
 8003086:	43d9      	mvns	r1, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800308c:	4313      	orrs	r3, r2
         );
}
 800308e:	4618      	mov	r0, r3
 8003090:	3724      	adds	r7, #36	; 0x24
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
	...

0800309c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3b01      	subs	r3, #1
 80030a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030ac:	d301      	bcc.n	80030b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030ae:	2301      	movs	r3, #1
 80030b0:	e00f      	b.n	80030d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030b2:	4a0a      	ldr	r2, [pc, #40]	; (80030dc <SysTick_Config+0x40>)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	3b01      	subs	r3, #1
 80030b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030ba:	210f      	movs	r1, #15
 80030bc:	f04f 30ff 	mov.w	r0, #4294967295
 80030c0:	f7ff ff8e 	bl	8002fe0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030c4:	4b05      	ldr	r3, [pc, #20]	; (80030dc <SysTick_Config+0x40>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030ca:	4b04      	ldr	r3, [pc, #16]	; (80030dc <SysTick_Config+0x40>)
 80030cc:	2207      	movs	r2, #7
 80030ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	e000e010 	.word	0xe000e010

080030e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f7ff ff29 	bl	8002f40 <__NVIC_SetPriorityGrouping>
}
 80030ee:	bf00      	nop
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b086      	sub	sp, #24
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	4603      	mov	r3, r0
 80030fe:	60b9      	str	r1, [r7, #8]
 8003100:	607a      	str	r2, [r7, #4]
 8003102:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003104:	f7ff ff40 	bl	8002f88 <__NVIC_GetPriorityGrouping>
 8003108:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	68b9      	ldr	r1, [r7, #8]
 800310e:	6978      	ldr	r0, [r7, #20]
 8003110:	f7ff ff90 	bl	8003034 <NVIC_EncodePriority>
 8003114:	4602      	mov	r2, r0
 8003116:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800311a:	4611      	mov	r1, r2
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff ff5f 	bl	8002fe0 <__NVIC_SetPriority>
}
 8003122:	bf00      	nop
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b082      	sub	sp, #8
 800312e:	af00      	add	r7, sp, #0
 8003130:	4603      	mov	r3, r0
 8003132:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003134:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003138:	4618      	mov	r0, r3
 800313a:	f7ff ff33 	bl	8002fa4 <__NVIC_EnableIRQ>
}
 800313e:	bf00      	nop
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b082      	sub	sp, #8
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7ff ffa4 	bl	800309c <SysTick_Config>
 8003154:	4603      	mov	r3, r0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
	...

08003160 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003160:	b480      	push	{r7}
 8003162:	b089      	sub	sp, #36	; 0x24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800316a:	2300      	movs	r3, #0
 800316c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800316e:	4b89      	ldr	r3, [pc, #548]	; (8003394 <HAL_GPIO_Init+0x234>)
 8003170:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003172:	e194      	b.n	800349e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	2101      	movs	r1, #1
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	fa01 f303 	lsl.w	r3, r1, r3
 8003180:	4013      	ands	r3, r2
 8003182:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	2b00      	cmp	r3, #0
 8003188:	f000 8186 	beq.w	8003498 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f003 0303 	and.w	r3, r3, #3
 8003194:	2b01      	cmp	r3, #1
 8003196:	d005      	beq.n	80031a4 <HAL_GPIO_Init+0x44>
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f003 0303 	and.w	r3, r3, #3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d130      	bne.n	8003206 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	2203      	movs	r2, #3
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	43db      	mvns	r3, r3
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	4013      	ands	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	68da      	ldr	r2, [r3, #12]
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031da:	2201      	movs	r2, #1
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	43db      	mvns	r3, r3
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	4013      	ands	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	091b      	lsrs	r3, r3, #4
 80031f0:	f003 0201 	and.w	r2, r3, #1
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	fa02 f303 	lsl.w	r3, r2, r3
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f003 0303 	and.w	r3, r3, #3
 800320e:	2b03      	cmp	r3, #3
 8003210:	d017      	beq.n	8003242 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	2203      	movs	r2, #3
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	43db      	mvns	r3, r3
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	4013      	ands	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	689a      	ldr	r2, [r3, #8]
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	fa02 f303 	lsl.w	r3, r2, r3
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	4313      	orrs	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f003 0303 	and.w	r3, r3, #3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d123      	bne.n	8003296 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	08da      	lsrs	r2, r3, #3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	3208      	adds	r2, #8
 8003256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800325a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	f003 0307 	and.w	r3, r3, #7
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	220f      	movs	r2, #15
 8003266:	fa02 f303 	lsl.w	r3, r2, r3
 800326a:	43db      	mvns	r3, r3
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	4013      	ands	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	691a      	ldr	r2, [r3, #16]
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	fa02 f303 	lsl.w	r3, r2, r3
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	4313      	orrs	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	08da      	lsrs	r2, r3, #3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3208      	adds	r2, #8
 8003290:	69b9      	ldr	r1, [r7, #24]
 8003292:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	2203      	movs	r2, #3
 80032a2:	fa02 f303 	lsl.w	r3, r2, r3
 80032a6:	43db      	mvns	r3, r3
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	4013      	ands	r3, r2
 80032ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f003 0203 	and.w	r2, r3, #3
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f000 80e0 	beq.w	8003498 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032d8:	4b2f      	ldr	r3, [pc, #188]	; (8003398 <HAL_GPIO_Init+0x238>)
 80032da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80032de:	4a2e      	ldr	r2, [pc, #184]	; (8003398 <HAL_GPIO_Init+0x238>)
 80032e0:	f043 0302 	orr.w	r3, r3, #2
 80032e4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80032e8:	4b2b      	ldr	r3, [pc, #172]	; (8003398 <HAL_GPIO_Init+0x238>)
 80032ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	60fb      	str	r3, [r7, #12]
 80032f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032f6:	4a29      	ldr	r2, [pc, #164]	; (800339c <HAL_GPIO_Init+0x23c>)
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	089b      	lsrs	r3, r3, #2
 80032fc:	3302      	adds	r3, #2
 80032fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003302:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	f003 0303 	and.w	r3, r3, #3
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	220f      	movs	r2, #15
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	43db      	mvns	r3, r3
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	4013      	ands	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a20      	ldr	r2, [pc, #128]	; (80033a0 <HAL_GPIO_Init+0x240>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d052      	beq.n	80033c8 <HAL_GPIO_Init+0x268>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a1f      	ldr	r2, [pc, #124]	; (80033a4 <HAL_GPIO_Init+0x244>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d031      	beq.n	800338e <HAL_GPIO_Init+0x22e>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a1e      	ldr	r2, [pc, #120]	; (80033a8 <HAL_GPIO_Init+0x248>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d02b      	beq.n	800338a <HAL_GPIO_Init+0x22a>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a1d      	ldr	r2, [pc, #116]	; (80033ac <HAL_GPIO_Init+0x24c>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d025      	beq.n	8003386 <HAL_GPIO_Init+0x226>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a1c      	ldr	r2, [pc, #112]	; (80033b0 <HAL_GPIO_Init+0x250>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d01f      	beq.n	8003382 <HAL_GPIO_Init+0x222>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a1b      	ldr	r2, [pc, #108]	; (80033b4 <HAL_GPIO_Init+0x254>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d019      	beq.n	800337e <HAL_GPIO_Init+0x21e>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a1a      	ldr	r2, [pc, #104]	; (80033b8 <HAL_GPIO_Init+0x258>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d013      	beq.n	800337a <HAL_GPIO_Init+0x21a>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a19      	ldr	r2, [pc, #100]	; (80033bc <HAL_GPIO_Init+0x25c>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d00d      	beq.n	8003376 <HAL_GPIO_Init+0x216>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a18      	ldr	r2, [pc, #96]	; (80033c0 <HAL_GPIO_Init+0x260>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d007      	beq.n	8003372 <HAL_GPIO_Init+0x212>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a17      	ldr	r2, [pc, #92]	; (80033c4 <HAL_GPIO_Init+0x264>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d101      	bne.n	800336e <HAL_GPIO_Init+0x20e>
 800336a:	2309      	movs	r3, #9
 800336c:	e02d      	b.n	80033ca <HAL_GPIO_Init+0x26a>
 800336e:	230a      	movs	r3, #10
 8003370:	e02b      	b.n	80033ca <HAL_GPIO_Init+0x26a>
 8003372:	2308      	movs	r3, #8
 8003374:	e029      	b.n	80033ca <HAL_GPIO_Init+0x26a>
 8003376:	2307      	movs	r3, #7
 8003378:	e027      	b.n	80033ca <HAL_GPIO_Init+0x26a>
 800337a:	2306      	movs	r3, #6
 800337c:	e025      	b.n	80033ca <HAL_GPIO_Init+0x26a>
 800337e:	2305      	movs	r3, #5
 8003380:	e023      	b.n	80033ca <HAL_GPIO_Init+0x26a>
 8003382:	2304      	movs	r3, #4
 8003384:	e021      	b.n	80033ca <HAL_GPIO_Init+0x26a>
 8003386:	2303      	movs	r3, #3
 8003388:	e01f      	b.n	80033ca <HAL_GPIO_Init+0x26a>
 800338a:	2302      	movs	r3, #2
 800338c:	e01d      	b.n	80033ca <HAL_GPIO_Init+0x26a>
 800338e:	2301      	movs	r3, #1
 8003390:	e01b      	b.n	80033ca <HAL_GPIO_Init+0x26a>
 8003392:	bf00      	nop
 8003394:	58000080 	.word	0x58000080
 8003398:	58024400 	.word	0x58024400
 800339c:	58000400 	.word	0x58000400
 80033a0:	58020000 	.word	0x58020000
 80033a4:	58020400 	.word	0x58020400
 80033a8:	58020800 	.word	0x58020800
 80033ac:	58020c00 	.word	0x58020c00
 80033b0:	58021000 	.word	0x58021000
 80033b4:	58021400 	.word	0x58021400
 80033b8:	58021800 	.word	0x58021800
 80033bc:	58021c00 	.word	0x58021c00
 80033c0:	58022000 	.word	0x58022000
 80033c4:	58022400 	.word	0x58022400
 80033c8:	2300      	movs	r3, #0
 80033ca:	69fa      	ldr	r2, [r7, #28]
 80033cc:	f002 0203 	and.w	r2, r2, #3
 80033d0:	0092      	lsls	r2, r2, #2
 80033d2:	4093      	lsls	r3, r2
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033da:	4938      	ldr	r1, [pc, #224]	; (80034bc <HAL_GPIO_Init+0x35c>)
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	089b      	lsrs	r3, r3, #2
 80033e0:	3302      	adds	r3, #2
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	43db      	mvns	r3, r3
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	4013      	ands	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	4313      	orrs	r3, r2
 800340c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800340e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003416:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	43db      	mvns	r3, r3
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4013      	ands	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d003      	beq.n	800343c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800343c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	43db      	mvns	r3, r3
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4013      	ands	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d003      	beq.n	8003468 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	4313      	orrs	r3, r2
 8003466:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	43db      	mvns	r3, r3
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	4013      	ands	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d003      	beq.n	8003492 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	4313      	orrs	r3, r2
 8003490:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	3301      	adds	r3, #1
 800349c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	fa22 f303 	lsr.w	r3, r2, r3
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f47f ae63 	bne.w	8003174 <HAL_GPIO_Init+0x14>
  }
}
 80034ae:	bf00      	nop
 80034b0:	bf00      	nop
 80034b2:	3724      	adds	r7, #36	; 0x24
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr
 80034bc:	58000400 	.word	0x58000400

080034c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80034c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034c2:	b08f      	sub	sp, #60	; 0x3c
 80034c4:	af0a      	add	r7, sp, #40	; 0x28
 80034c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e116      	b.n	8003700 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d106      	bne.n	80034f2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f008 fd09 	bl	800bf04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2203      	movs	r2, #3
 80034f6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003502:	2b00      	cmp	r3, #0
 8003504:	d102      	bne.n	800350c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4618      	mov	r0, r3
 8003512:	f005 f8c8 	bl	80086a6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	603b      	str	r3, [r7, #0]
 800351c:	687e      	ldr	r6, [r7, #4]
 800351e:	466d      	mov	r5, sp
 8003520:	f106 0410 	add.w	r4, r6, #16
 8003524:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003526:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003528:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800352a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800352c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003530:	e885 0003 	stmia.w	r5, {r0, r1}
 8003534:	1d33      	adds	r3, r6, #4
 8003536:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003538:	6838      	ldr	r0, [r7, #0]
 800353a:	f004 ff93 	bl	8008464 <USB_CoreInit>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d005      	beq.n	8003550 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2202      	movs	r2, #2
 8003548:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e0d7      	b.n	8003700 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2100      	movs	r1, #0
 8003556:	4618      	mov	r0, r3
 8003558:	f005 f8b6 	bl	80086c8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800355c:	2300      	movs	r3, #0
 800355e:	73fb      	strb	r3, [r7, #15]
 8003560:	e04a      	b.n	80035f8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003562:	7bfa      	ldrb	r2, [r7, #15]
 8003564:	6879      	ldr	r1, [r7, #4]
 8003566:	4613      	mov	r3, r2
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	4413      	add	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	440b      	add	r3, r1
 8003570:	333d      	adds	r3, #61	; 0x3d
 8003572:	2201      	movs	r2, #1
 8003574:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003576:	7bfa      	ldrb	r2, [r7, #15]
 8003578:	6879      	ldr	r1, [r7, #4]
 800357a:	4613      	mov	r3, r2
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	4413      	add	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	440b      	add	r3, r1
 8003584:	333c      	adds	r3, #60	; 0x3c
 8003586:	7bfa      	ldrb	r2, [r7, #15]
 8003588:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800358a:	7bfa      	ldrb	r2, [r7, #15]
 800358c:	7bfb      	ldrb	r3, [r7, #15]
 800358e:	b298      	uxth	r0, r3
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	4613      	mov	r3, r2
 8003594:	00db      	lsls	r3, r3, #3
 8003596:	4413      	add	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	440b      	add	r3, r1
 800359c:	3356      	adds	r3, #86	; 0x56
 800359e:	4602      	mov	r2, r0
 80035a0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80035a2:	7bfa      	ldrb	r2, [r7, #15]
 80035a4:	6879      	ldr	r1, [r7, #4]
 80035a6:	4613      	mov	r3, r2
 80035a8:	00db      	lsls	r3, r3, #3
 80035aa:	4413      	add	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	440b      	add	r3, r1
 80035b0:	3340      	adds	r3, #64	; 0x40
 80035b2:	2200      	movs	r2, #0
 80035b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80035b6:	7bfa      	ldrb	r2, [r7, #15]
 80035b8:	6879      	ldr	r1, [r7, #4]
 80035ba:	4613      	mov	r3, r2
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	4413      	add	r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	440b      	add	r3, r1
 80035c4:	3344      	adds	r3, #68	; 0x44
 80035c6:	2200      	movs	r2, #0
 80035c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80035ca:	7bfa      	ldrb	r2, [r7, #15]
 80035cc:	6879      	ldr	r1, [r7, #4]
 80035ce:	4613      	mov	r3, r2
 80035d0:	00db      	lsls	r3, r3, #3
 80035d2:	4413      	add	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	440b      	add	r3, r1
 80035d8:	3348      	adds	r3, #72	; 0x48
 80035da:	2200      	movs	r2, #0
 80035dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80035de:	7bfa      	ldrb	r2, [r7, #15]
 80035e0:	6879      	ldr	r1, [r7, #4]
 80035e2:	4613      	mov	r3, r2
 80035e4:	00db      	lsls	r3, r3, #3
 80035e6:	4413      	add	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	440b      	add	r3, r1
 80035ec:	334c      	adds	r3, #76	; 0x4c
 80035ee:	2200      	movs	r2, #0
 80035f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035f2:	7bfb      	ldrb	r3, [r7, #15]
 80035f4:	3301      	adds	r3, #1
 80035f6:	73fb      	strb	r3, [r7, #15]
 80035f8:	7bfa      	ldrb	r2, [r7, #15]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d3af      	bcc.n	8003562 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003602:	2300      	movs	r3, #0
 8003604:	73fb      	strb	r3, [r7, #15]
 8003606:	e044      	b.n	8003692 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003608:	7bfa      	ldrb	r2, [r7, #15]
 800360a:	6879      	ldr	r1, [r7, #4]
 800360c:	4613      	mov	r3, r2
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	4413      	add	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	440b      	add	r3, r1
 8003616:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800361a:	2200      	movs	r2, #0
 800361c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800361e:	7bfa      	ldrb	r2, [r7, #15]
 8003620:	6879      	ldr	r1, [r7, #4]
 8003622:	4613      	mov	r3, r2
 8003624:	00db      	lsls	r3, r3, #3
 8003626:	4413      	add	r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	440b      	add	r3, r1
 800362c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003630:	7bfa      	ldrb	r2, [r7, #15]
 8003632:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003634:	7bfa      	ldrb	r2, [r7, #15]
 8003636:	6879      	ldr	r1, [r7, #4]
 8003638:	4613      	mov	r3, r2
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	4413      	add	r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	440b      	add	r3, r1
 8003642:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003646:	2200      	movs	r2, #0
 8003648:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800364a:	7bfa      	ldrb	r2, [r7, #15]
 800364c:	6879      	ldr	r1, [r7, #4]
 800364e:	4613      	mov	r3, r2
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	4413      	add	r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	440b      	add	r3, r1
 8003658:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800365c:	2200      	movs	r2, #0
 800365e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003660:	7bfa      	ldrb	r2, [r7, #15]
 8003662:	6879      	ldr	r1, [r7, #4]
 8003664:	4613      	mov	r3, r2
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	4413      	add	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	440b      	add	r3, r1
 800366e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003672:	2200      	movs	r2, #0
 8003674:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003676:	7bfa      	ldrb	r2, [r7, #15]
 8003678:	6879      	ldr	r1, [r7, #4]
 800367a:	4613      	mov	r3, r2
 800367c:	00db      	lsls	r3, r3, #3
 800367e:	4413      	add	r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	440b      	add	r3, r1
 8003684:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003688:	2200      	movs	r2, #0
 800368a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800368c:	7bfb      	ldrb	r3, [r7, #15]
 800368e:	3301      	adds	r3, #1
 8003690:	73fb      	strb	r3, [r7, #15]
 8003692:	7bfa      	ldrb	r2, [r7, #15]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	429a      	cmp	r2, r3
 800369a:	d3b5      	bcc.n	8003608 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	603b      	str	r3, [r7, #0]
 80036a2:	687e      	ldr	r6, [r7, #4]
 80036a4:	466d      	mov	r5, sp
 80036a6:	f106 0410 	add.w	r4, r6, #16
 80036aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80036b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80036ba:	1d33      	adds	r3, r6, #4
 80036bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036be:	6838      	ldr	r0, [r7, #0]
 80036c0:	f005 f84e 	bl	8008760 <USB_DevInit>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d005      	beq.n	80036d6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2202      	movs	r2, #2
 80036ce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e014      	b.n	8003700 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d102      	bne.n	80036f4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f001 f970 	bl	80049d4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f006 f890 	bl	800981e <USB_DevDisconnect>

  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3714      	adds	r7, #20
 8003704:	46bd      	mov	sp, r7
 8003706:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003708 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800371c:	2b01      	cmp	r3, #1
 800371e:	d101      	bne.n	8003724 <HAL_PCD_Start+0x1c>
 8003720:	2302      	movs	r3, #2
 8003722:	e022      	b.n	800376a <HAL_PCD_Start+0x62>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003734:	2b00      	cmp	r3, #0
 8003736:	d109      	bne.n	800374c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800373c:	2b01      	cmp	r3, #1
 800373e:	d105      	bne.n	800374c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003744:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4618      	mov	r0, r3
 8003752:	f004 ff97 	bl	8008684 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4618      	mov	r0, r3
 800375c:	f006 f83e 	bl	80097dc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003772:	b590      	push	{r4, r7, lr}
 8003774:	b08d      	sub	sp, #52	; 0x34
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003780:	6a3b      	ldr	r3, [r7, #32]
 8003782:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4618      	mov	r0, r3
 800378a:	f006 f8fc 	bl	8009986 <USB_GetMode>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	f040 84b7 	bne.w	8004104 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4618      	mov	r0, r3
 800379c:	f006 f860 	bl	8009860 <USB_ReadInterrupts>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f000 84ad 	beq.w	8004102 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	0a1b      	lsrs	r3, r3, #8
 80037b2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f006 f84d 	bl	8009860 <USB_ReadInterrupts>
 80037c6:	4603      	mov	r3, r0
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d107      	bne.n	80037e0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	695a      	ldr	r2, [r3, #20]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f002 0202 	and.w	r2, r2, #2
 80037de:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f006 f83b 	bl	8009860 <USB_ReadInterrupts>
 80037ea:	4603      	mov	r3, r0
 80037ec:	f003 0310 	and.w	r3, r3, #16
 80037f0:	2b10      	cmp	r3, #16
 80037f2:	d161      	bne.n	80038b8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	699a      	ldr	r2, [r3, #24]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 0210 	bic.w	r2, r2, #16
 8003802:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003804:	6a3b      	ldr	r3, [r7, #32]
 8003806:	6a1b      	ldr	r3, [r3, #32]
 8003808:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	f003 020f 	and.w	r2, r3, #15
 8003810:	4613      	mov	r3, r2
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	4413      	add	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	4413      	add	r3, r2
 8003820:	3304      	adds	r3, #4
 8003822:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	0c5b      	lsrs	r3, r3, #17
 8003828:	f003 030f 	and.w	r3, r3, #15
 800382c:	2b02      	cmp	r3, #2
 800382e:	d124      	bne.n	800387a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003836:	4013      	ands	r3, r2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d035      	beq.n	80038a8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	091b      	lsrs	r3, r3, #4
 8003844:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003846:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800384a:	b29b      	uxth	r3, r3
 800384c:	461a      	mov	r2, r3
 800384e:	6a38      	ldr	r0, [r7, #32]
 8003850:	f005 fe72 	bl	8009538 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	68da      	ldr	r2, [r3, #12]
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	091b      	lsrs	r3, r3, #4
 800385c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003860:	441a      	add	r2, r3
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	695a      	ldr	r2, [r3, #20]
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	091b      	lsrs	r3, r3, #4
 800386e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003872:	441a      	add	r2, r3
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	615a      	str	r2, [r3, #20]
 8003878:	e016      	b.n	80038a8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	0c5b      	lsrs	r3, r3, #17
 800387e:	f003 030f 	and.w	r3, r3, #15
 8003882:	2b06      	cmp	r3, #6
 8003884:	d110      	bne.n	80038a8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800388c:	2208      	movs	r2, #8
 800388e:	4619      	mov	r1, r3
 8003890:	6a38      	ldr	r0, [r7, #32]
 8003892:	f005 fe51 	bl	8009538 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	695a      	ldr	r2, [r3, #20]
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	091b      	lsrs	r3, r3, #4
 800389e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038a2:	441a      	add	r2, r3
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	699a      	ldr	r2, [r3, #24]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f042 0210 	orr.w	r2, r2, #16
 80038b6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4618      	mov	r0, r3
 80038be:	f005 ffcf 	bl	8009860 <USB_ReadInterrupts>
 80038c2:	4603      	mov	r3, r0
 80038c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038c8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80038cc:	f040 80a7 	bne.w	8003a1e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80038d0:	2300      	movs	r3, #0
 80038d2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4618      	mov	r0, r3
 80038da:	f005 ffd4 	bl	8009886 <USB_ReadDevAllOutEpInterrupt>
 80038de:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80038e0:	e099      	b.n	8003a16 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80038e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e4:	f003 0301 	and.w	r3, r3, #1
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 808e 	beq.w	8003a0a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038f4:	b2d2      	uxtb	r2, r2
 80038f6:	4611      	mov	r1, r2
 80038f8:	4618      	mov	r0, r3
 80038fa:	f005 fff8 	bl	80098ee <USB_ReadDevOutEPInterrupt>
 80038fe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00c      	beq.n	8003924 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390c:	015a      	lsls	r2, r3, #5
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	4413      	add	r3, r2
 8003912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003916:	461a      	mov	r2, r3
 8003918:	2301      	movs	r3, #1
 800391a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800391c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 fed2 	bl	80046c8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	f003 0308 	and.w	r3, r3, #8
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00c      	beq.n	8003948 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	015a      	lsls	r2, r3, #5
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	4413      	add	r3, r2
 8003936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800393a:	461a      	mov	r2, r3
 800393c:	2308      	movs	r3, #8
 800393e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003940:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 ffa8 	bl	8004898 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	f003 0310 	and.w	r3, r3, #16
 800394e:	2b00      	cmp	r3, #0
 8003950:	d008      	beq.n	8003964 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003954:	015a      	lsls	r2, r3, #5
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	4413      	add	r3, r2
 800395a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800395e:	461a      	mov	r2, r3
 8003960:	2310      	movs	r3, #16
 8003962:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d030      	beq.n	80039d0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800396e:	6a3b      	ldr	r3, [r7, #32]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003976:	2b80      	cmp	r3, #128	; 0x80
 8003978:	d109      	bne.n	800398e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	69fa      	ldr	r2, [r7, #28]
 8003984:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003988:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800398c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800398e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003990:	4613      	mov	r3, r2
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	4413      	add	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	4413      	add	r3, r2
 80039a0:	3304      	adds	r3, #4
 80039a2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	78db      	ldrb	r3, [r3, #3]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d108      	bne.n	80039be <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	2200      	movs	r2, #0
 80039b0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80039b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	4619      	mov	r1, r3
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f008 fbc9 	bl	800c150 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c0:	015a      	lsls	r2, r3, #5
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	4413      	add	r3, r2
 80039c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ca:	461a      	mov	r2, r3
 80039cc:	2302      	movs	r3, #2
 80039ce:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	f003 0320 	and.w	r3, r3, #32
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d008      	beq.n	80039ec <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039dc:	015a      	lsls	r2, r3, #5
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	4413      	add	r3, r2
 80039e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039e6:	461a      	mov	r2, r3
 80039e8:	2320      	movs	r3, #32
 80039ea:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d009      	beq.n	8003a0a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80039f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f8:	015a      	lsls	r2, r3, #5
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	4413      	add	r3, r2
 80039fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a02:	461a      	mov	r2, r3
 8003a04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a08:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a12:	085b      	lsrs	r3, r3, #1
 8003a14:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f47f af62 	bne.w	80038e2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f005 ff1c 	bl	8009860 <USB_ReadInterrupts>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a2e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a32:	f040 80db 	bne.w	8003bec <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f005 ff3d 	bl	80098ba <USB_ReadDevAllInEpInterrupt>
 8003a40:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003a42:	2300      	movs	r3, #0
 8003a44:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003a46:	e0cd      	b.n	8003be4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f000 80c2 	beq.w	8003bd8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a5a:	b2d2      	uxtb	r2, r2
 8003a5c:	4611      	mov	r1, r2
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f005 ff63 	bl	800992a <USB_ReadDevInEPInterrupt>
 8003a64:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d057      	beq.n	8003b20 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	2201      	movs	r2, #1
 8003a78:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	43db      	mvns	r3, r3
 8003a8a:	69f9      	ldr	r1, [r7, #28]
 8003a8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a90:	4013      	ands	r3, r2
 8003a92:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a96:	015a      	lsls	r2, r3, #5
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d132      	bne.n	8003b14 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003aae:	6879      	ldr	r1, [r7, #4]
 8003ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	4413      	add	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	440b      	add	r3, r1
 8003abc:	3348      	adds	r3, #72	; 0x48
 8003abe:	6819      	ldr	r1, [r3, #0]
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	4413      	add	r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4403      	add	r3, r0
 8003ace:	3344      	adds	r3, #68	; 0x44
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4419      	add	r1, r3
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ad8:	4613      	mov	r3, r2
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	4413      	add	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4403      	add	r3, r0
 8003ae2:	3348      	adds	r3, #72	; 0x48
 8003ae4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d113      	bne.n	8003b14 <HAL_PCD_IRQHandler+0x3a2>
 8003aec:	6879      	ldr	r1, [r7, #4]
 8003aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003af0:	4613      	mov	r3, r2
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	4413      	add	r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	440b      	add	r3, r1
 8003afa:	334c      	adds	r3, #76	; 0x4c
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d108      	bne.n	8003b14 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6818      	ldr	r0, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	2101      	movs	r1, #1
 8003b10:	f005 ff6c 	bl	80099ec <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	4619      	mov	r1, r3
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f008 fa93 	bl	800c046 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	f003 0308 	and.w	r3, r3, #8
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d008      	beq.n	8003b3c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2c:	015a      	lsls	r2, r3, #5
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	4413      	add	r3, r2
 8003b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b36:	461a      	mov	r2, r3
 8003b38:	2308      	movs	r3, #8
 8003b3a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	f003 0310 	and.w	r3, r3, #16
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d008      	beq.n	8003b58 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b48:	015a      	lsls	r2, r3, #5
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b52:	461a      	mov	r2, r3
 8003b54:	2310      	movs	r3, #16
 8003b56:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d008      	beq.n	8003b74 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b64:	015a      	lsls	r2, r3, #5
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	4413      	add	r3, r2
 8003b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b6e:	461a      	mov	r2, r3
 8003b70:	2340      	movs	r3, #64	; 0x40
 8003b72:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d023      	beq.n	8003bc6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003b7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b80:	6a38      	ldr	r0, [r7, #32]
 8003b82:	f004 ff4b 	bl	8008a1c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b88:	4613      	mov	r3, r2
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	4413      	add	r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	3338      	adds	r3, #56	; 0x38
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	4413      	add	r3, r2
 8003b96:	3304      	adds	r3, #4
 8003b98:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	78db      	ldrb	r3, [r3, #3]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d108      	bne.n	8003bb4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	4619      	mov	r1, r3
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f008 fae0 	bl	800c174 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb6:	015a      	lsls	r2, r3, #5
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	4413      	add	r3, r2
 8003bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d003      	beq.n	8003bd8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003bd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 fcea 	bl	80045ac <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bda:	3301      	adds	r3, #1
 8003bdc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be0:	085b      	lsrs	r3, r3, #1
 8003be2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f47f af2e 	bne.w	8003a48 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f005 fe35 	bl	8009860 <USB_ReadInterrupts>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c00:	d122      	bne.n	8003c48 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	69fa      	ldr	r2, [r7, #28]
 8003c0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c10:	f023 0301 	bic.w	r3, r3, #1
 8003c14:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d108      	bne.n	8003c32 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003c28:	2100      	movs	r1, #0
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 fef6 	bl	8004a1c <HAL_PCDEx_LPM_Callback>
 8003c30:	e002      	b.n	8003c38 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f008 fa7e 	bl	800c134 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	695a      	ldr	r2, [r3, #20]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003c46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f005 fe07 	bl	8009860 <USB_ReadInterrupts>
 8003c52:	4603      	mov	r3, r0
 8003c54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c5c:	d112      	bne.n	8003c84 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d102      	bne.n	8003c74 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f008 fa3a 	bl	800c0e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	695a      	ldr	r2, [r3, #20]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003c82:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f005 fde9 	bl	8009860 <USB_ReadInterrupts>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c98:	d121      	bne.n	8003cde <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	695a      	ldr	r2, [r3, #20]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003ca8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d111      	bne.n	8003cd8 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc2:	089b      	lsrs	r3, r3, #2
 8003cc4:	f003 020f 	and.w	r2, r3, #15
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003cce:	2101      	movs	r1, #1
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 fea3 	bl	8004a1c <HAL_PCDEx_LPM_Callback>
 8003cd6:	e002      	b.n	8003cde <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f008 fa05 	bl	800c0e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f005 fdbc 	bl	8009860 <USB_ReadInterrupts>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cf2:	f040 80b7 	bne.w	8003e64 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	69fa      	ldr	r2, [r7, #28]
 8003d00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d04:	f023 0301 	bic.w	r3, r3, #1
 8003d08:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2110      	movs	r1, #16
 8003d10:	4618      	mov	r0, r3
 8003d12:	f004 fe83 	bl	8008a1c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d16:	2300      	movs	r3, #0
 8003d18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d1a:	e046      	b.n	8003daa <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d1e:	015a      	lsls	r2, r3, #5
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	4413      	add	r3, r2
 8003d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d28:	461a      	mov	r2, r3
 8003d2a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d2e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d32:	015a      	lsls	r2, r3, #5
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	4413      	add	r3, r2
 8003d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d40:	0151      	lsls	r1, r2, #5
 8003d42:	69fa      	ldr	r2, [r7, #28]
 8003d44:	440a      	add	r2, r1
 8003d46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d4e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d52:	015a      	lsls	r2, r3, #5
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	4413      	add	r3, r2
 8003d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d62:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d66:	015a      	lsls	r2, r3, #5
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d74:	0151      	lsls	r1, r2, #5
 8003d76:	69fa      	ldr	r2, [r7, #28]
 8003d78:	440a      	add	r2, r1
 8003d7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d82:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d86:	015a      	lsls	r2, r3, #5
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d94:	0151      	lsls	r1, r2, #5
 8003d96:	69fa      	ldr	r2, [r7, #28]
 8003d98:	440a      	add	r2, r1
 8003d9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d9e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003da2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da6:	3301      	adds	r3, #1
 8003da8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d3b3      	bcc.n	8003d1c <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dba:	69db      	ldr	r3, [r3, #28]
 8003dbc:	69fa      	ldr	r2, [r7, #28]
 8003dbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dc2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003dc6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d016      	beq.n	8003dfe <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dda:	69fa      	ldr	r2, [r7, #28]
 8003ddc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003de0:	f043 030b 	orr.w	r3, r3, #11
 8003de4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df0:	69fa      	ldr	r2, [r7, #28]
 8003df2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003df6:	f043 030b 	orr.w	r3, r3, #11
 8003dfa:	6453      	str	r3, [r2, #68]	; 0x44
 8003dfc:	e015      	b.n	8003e2a <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e04:	695a      	ldr	r2, [r3, #20]
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	f242 032b 	movw	r3, #8235	; 0x202b
 8003e12:	4313      	orrs	r3, r2
 8003e14:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	69fa      	ldr	r2, [r7, #28]
 8003e20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e24:	f043 030b 	orr.w	r3, r3, #11
 8003e28:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	69fa      	ldr	r2, [r7, #28]
 8003e34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e38:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003e3c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6818      	ldr	r0, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003e4e:	461a      	mov	r2, r3
 8003e50:	f005 fdcc 	bl	80099ec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	695a      	ldr	r2, [r3, #20]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003e62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f005 fcf9 	bl	8009860 <USB_ReadInterrupts>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e78:	d124      	bne.n	8003ec4 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f005 fd90 	bl	80099a4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f004 fe44 	bl	8008b16 <USB_GetDevSpeed>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	461a      	mov	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681c      	ldr	r4, [r3, #0]
 8003e9a:	f001 fd9f 	bl	80059dc <HAL_RCC_GetHCLKFreq>
 8003e9e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	4620      	mov	r0, r4
 8003eaa:	f004 fb49 	bl	8008540 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f008 f8f1 	bl	800c096 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	695a      	ldr	r2, [r3, #20]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003ec2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f005 fcc9 	bl	8009860 <USB_ReadInterrupts>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	f003 0308 	and.w	r3, r3, #8
 8003ed4:	2b08      	cmp	r3, #8
 8003ed6:	d10a      	bne.n	8003eee <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f008 f8ce 	bl	800c07a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	695a      	ldr	r2, [r3, #20]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f002 0208 	and.w	r2, r2, #8
 8003eec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f005 fcb4 	bl	8009860 <USB_ReadInterrupts>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003efe:	2b80      	cmp	r3, #128	; 0x80
 8003f00:	d122      	bne.n	8003f48 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003f02:	6a3b      	ldr	r3, [r7, #32]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f0a:	6a3b      	ldr	r3, [r7, #32]
 8003f0c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f0e:	2301      	movs	r3, #1
 8003f10:	627b      	str	r3, [r7, #36]	; 0x24
 8003f12:	e014      	b.n	8003f3e <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003f14:	6879      	ldr	r1, [r7, #4]
 8003f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f18:	4613      	mov	r3, r2
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	4413      	add	r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	440b      	add	r3, r1
 8003f22:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d105      	bne.n	8003f38 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	4619      	mov	r1, r3
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 fb09 	bl	800454a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d3e5      	bcc.n	8003f14 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f005 fc87 	bl	8009860 <USB_ReadInterrupts>
 8003f52:	4603      	mov	r3, r0
 8003f54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f5c:	d13b      	bne.n	8003fd6 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f5e:	2301      	movs	r3, #1
 8003f60:	627b      	str	r3, [r7, #36]	; 0x24
 8003f62:	e02b      	b.n	8003fbc <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	015a      	lsls	r2, r3, #5
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f74:	6879      	ldr	r1, [r7, #4]
 8003f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f78:	4613      	mov	r3, r2
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	4413      	add	r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	440b      	add	r3, r1
 8003f82:	3340      	adds	r3, #64	; 0x40
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d115      	bne.n	8003fb6 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003f8a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	da12      	bge.n	8003fb6 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003f90:	6879      	ldr	r1, [r7, #4]
 8003f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f94:	4613      	mov	r3, r2
 8003f96:	00db      	lsls	r3, r3, #3
 8003f98:	4413      	add	r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	440b      	add	r3, r1
 8003f9e:	333f      	adds	r3, #63	; 0x3f
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	4619      	mov	r1, r3
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 faca 	bl	800454a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb8:	3301      	adds	r3, #1
 8003fba:	627b      	str	r3, [r7, #36]	; 0x24
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d3ce      	bcc.n	8003f64 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	695a      	ldr	r2, [r3, #20]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003fd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f005 fc40 	bl	8009860 <USB_ReadInterrupts>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fe6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fea:	d155      	bne.n	8004098 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003fec:	2301      	movs	r3, #1
 8003fee:	627b      	str	r3, [r7, #36]	; 0x24
 8003ff0:	e045      	b.n	800407e <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff4:	015a      	lsls	r2, r3, #5
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004002:	6879      	ldr	r1, [r7, #4]
 8004004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004006:	4613      	mov	r3, r2
 8004008:	00db      	lsls	r3, r3, #3
 800400a:	4413      	add	r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	440b      	add	r3, r1
 8004010:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d12e      	bne.n	8004078 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800401a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800401c:	2b00      	cmp	r3, #0
 800401e:	da2b      	bge.n	8004078 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800402c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004030:	429a      	cmp	r2, r3
 8004032:	d121      	bne.n	8004078 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004034:	6879      	ldr	r1, [r7, #4]
 8004036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004038:	4613      	mov	r3, r2
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	4413      	add	r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	440b      	add	r3, r1
 8004042:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004046:	2201      	movs	r2, #1
 8004048:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800404a:	6a3b      	ldr	r3, [r7, #32]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004052:	6a3b      	ldr	r3, [r7, #32]
 8004054:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004056:	6a3b      	ldr	r3, [r7, #32]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10a      	bne.n	8004078 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	69fa      	ldr	r2, [r7, #28]
 800406c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004070:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004074:	6053      	str	r3, [r2, #4]
            break;
 8004076:	e007      	b.n	8004088 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407a:	3301      	adds	r3, #1
 800407c:	627b      	str	r3, [r7, #36]	; 0x24
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004084:	429a      	cmp	r2, r3
 8004086:	d3b4      	bcc.n	8003ff2 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	695a      	ldr	r2, [r3, #20]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004096:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4618      	mov	r0, r3
 800409e:	f005 fbdf 	bl	8009860 <USB_ReadInterrupts>
 80040a2:	4603      	mov	r3, r0
 80040a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80040a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ac:	d10a      	bne.n	80040c4 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f008 f872 	bl	800c198 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	695a      	ldr	r2, [r3, #20]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80040c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4618      	mov	r0, r3
 80040ca:	f005 fbc9 	bl	8009860 <USB_ReadInterrupts>
 80040ce:	4603      	mov	r3, r0
 80040d0:	f003 0304 	and.w	r3, r3, #4
 80040d4:	2b04      	cmp	r3, #4
 80040d6:	d115      	bne.n	8004104 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	f003 0304 	and.w	r3, r3, #4
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d002      	beq.n	80040f0 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f008 f862 	bl	800c1b4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	6859      	ldr	r1, [r3, #4]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	430a      	orrs	r2, r1
 80040fe:	605a      	str	r2, [r3, #4]
 8004100:	e000      	b.n	8004104 <HAL_PCD_IRQHandler+0x992>
      return;
 8004102:	bf00      	nop
    }
  }
}
 8004104:	3734      	adds	r7, #52	; 0x34
 8004106:	46bd      	mov	sp, r7
 8004108:	bd90      	pop	{r4, r7, pc}

0800410a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800410a:	b580      	push	{r7, lr}
 800410c:	b082      	sub	sp, #8
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
 8004112:	460b      	mov	r3, r1
 8004114:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800411c:	2b01      	cmp	r3, #1
 800411e:	d101      	bne.n	8004124 <HAL_PCD_SetAddress+0x1a>
 8004120:	2302      	movs	r3, #2
 8004122:	e013      	b.n	800414c <HAL_PCD_SetAddress+0x42>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	78fa      	ldrb	r2, [r7, #3]
 8004130:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	78fa      	ldrb	r2, [r7, #3]
 800413a:	4611      	mov	r1, r2
 800413c:	4618      	mov	r0, r3
 800413e:	f005 fb27 	bl	8009790 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3708      	adds	r7, #8
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	4608      	mov	r0, r1
 800415e:	4611      	mov	r1, r2
 8004160:	461a      	mov	r2, r3
 8004162:	4603      	mov	r3, r0
 8004164:	70fb      	strb	r3, [r7, #3]
 8004166:	460b      	mov	r3, r1
 8004168:	803b      	strh	r3, [r7, #0]
 800416a:	4613      	mov	r3, r2
 800416c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800416e:	2300      	movs	r3, #0
 8004170:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004172:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004176:	2b00      	cmp	r3, #0
 8004178:	da0f      	bge.n	800419a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800417a:	78fb      	ldrb	r3, [r7, #3]
 800417c:	f003 020f 	and.w	r2, r3, #15
 8004180:	4613      	mov	r3, r2
 8004182:	00db      	lsls	r3, r3, #3
 8004184:	4413      	add	r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	3338      	adds	r3, #56	; 0x38
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	4413      	add	r3, r2
 800418e:	3304      	adds	r3, #4
 8004190:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2201      	movs	r2, #1
 8004196:	705a      	strb	r2, [r3, #1]
 8004198:	e00f      	b.n	80041ba <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800419a:	78fb      	ldrb	r3, [r7, #3]
 800419c:	f003 020f 	and.w	r2, r3, #15
 80041a0:	4613      	mov	r3, r2
 80041a2:	00db      	lsls	r3, r3, #3
 80041a4:	4413      	add	r3, r2
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	4413      	add	r3, r2
 80041b0:	3304      	adds	r3, #4
 80041b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80041ba:	78fb      	ldrb	r3, [r7, #3]
 80041bc:	f003 030f 	and.w	r3, r3, #15
 80041c0:	b2da      	uxtb	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80041c6:	883a      	ldrh	r2, [r7, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	78ba      	ldrb	r2, [r7, #2]
 80041d0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	785b      	ldrb	r3, [r3, #1]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d004      	beq.n	80041e4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	b29a      	uxth	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80041e4:	78bb      	ldrb	r3, [r7, #2]
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d102      	bne.n	80041f0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d101      	bne.n	80041fe <HAL_PCD_EP_Open+0xaa>
 80041fa:	2302      	movs	r3, #2
 80041fc:	e00e      	b.n	800421c <HAL_PCD_EP_Open+0xc8>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68f9      	ldr	r1, [r7, #12]
 800420c:	4618      	mov	r0, r3
 800420e:	f004 fca7 	bl	8008b60 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800421a:	7afb      	ldrb	r3, [r7, #11]
}
 800421c:	4618      	mov	r0, r3
 800421e:	3710      	adds	r7, #16
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	460b      	mov	r3, r1
 800422e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004230:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004234:	2b00      	cmp	r3, #0
 8004236:	da0f      	bge.n	8004258 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004238:	78fb      	ldrb	r3, [r7, #3]
 800423a:	f003 020f 	and.w	r2, r3, #15
 800423e:	4613      	mov	r3, r2
 8004240:	00db      	lsls	r3, r3, #3
 8004242:	4413      	add	r3, r2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	3338      	adds	r3, #56	; 0x38
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	4413      	add	r3, r2
 800424c:	3304      	adds	r3, #4
 800424e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2201      	movs	r2, #1
 8004254:	705a      	strb	r2, [r3, #1]
 8004256:	e00f      	b.n	8004278 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004258:	78fb      	ldrb	r3, [r7, #3]
 800425a:	f003 020f 	and.w	r2, r3, #15
 800425e:	4613      	mov	r3, r2
 8004260:	00db      	lsls	r3, r3, #3
 8004262:	4413      	add	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	4413      	add	r3, r2
 800426e:	3304      	adds	r3, #4
 8004270:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004278:	78fb      	ldrb	r3, [r7, #3]
 800427a:	f003 030f 	and.w	r3, r3, #15
 800427e:	b2da      	uxtb	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800428a:	2b01      	cmp	r3, #1
 800428c:	d101      	bne.n	8004292 <HAL_PCD_EP_Close+0x6e>
 800428e:	2302      	movs	r3, #2
 8004290:	e00e      	b.n	80042b0 <HAL_PCD_EP_Close+0x8c>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68f9      	ldr	r1, [r7, #12]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f004 fce5 	bl	8008c70 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3710      	adds	r7, #16
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b086      	sub	sp, #24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	607a      	str	r2, [r7, #4]
 80042c2:	603b      	str	r3, [r7, #0]
 80042c4:	460b      	mov	r3, r1
 80042c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042c8:	7afb      	ldrb	r3, [r7, #11]
 80042ca:	f003 020f 	and.w	r2, r3, #15
 80042ce:	4613      	mov	r3, r2
 80042d0:	00db      	lsls	r3, r3, #3
 80042d2:	4413      	add	r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	4413      	add	r3, r2
 80042de:	3304      	adds	r3, #4
 80042e0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	683a      	ldr	r2, [r7, #0]
 80042ec:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	2200      	movs	r2, #0
 80042f2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	2200      	movs	r2, #0
 80042f8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042fa:	7afb      	ldrb	r3, [r7, #11]
 80042fc:	f003 030f 	and.w	r3, r3, #15
 8004300:	b2da      	uxtb	r2, r3
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d102      	bne.n	8004314 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6818      	ldr	r0, [r3, #0]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	b2db      	uxtb	r3, r3
 800431e:	461a      	mov	r2, r3
 8004320:	6979      	ldr	r1, [r7, #20]
 8004322:	f004 fd81 	bl	8008e28 <USB_EPStartXfer>

  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3718      	adds	r7, #24
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	460b      	mov	r3, r1
 800433a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800433c:	78fb      	ldrb	r3, [r7, #3]
 800433e:	f003 020f 	and.w	r2, r3, #15
 8004342:	6879      	ldr	r1, [r7, #4]
 8004344:	4613      	mov	r3, r2
 8004346:	00db      	lsls	r3, r3, #3
 8004348:	4413      	add	r3, r2
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	440b      	add	r3, r1
 800434e:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8004352:	681b      	ldr	r3, [r3, #0]
}
 8004354:	4618      	mov	r0, r3
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	607a      	str	r2, [r7, #4]
 800436a:	603b      	str	r3, [r7, #0]
 800436c:	460b      	mov	r3, r1
 800436e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004370:	7afb      	ldrb	r3, [r7, #11]
 8004372:	f003 020f 	and.w	r2, r3, #15
 8004376:	4613      	mov	r3, r2
 8004378:	00db      	lsls	r3, r3, #3
 800437a:	4413      	add	r3, r2
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	3338      	adds	r3, #56	; 0x38
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	4413      	add	r3, r2
 8004384:	3304      	adds	r3, #4
 8004386:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	683a      	ldr	r2, [r7, #0]
 8004392:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	2200      	movs	r2, #0
 8004398:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	2201      	movs	r2, #1
 800439e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043a0:	7afb      	ldrb	r3, [r7, #11]
 80043a2:	f003 030f 	and.w	r3, r3, #15
 80043a6:	b2da      	uxtb	r2, r3
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d102      	bne.n	80043ba <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6818      	ldr	r0, [r3, #0]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	461a      	mov	r2, r3
 80043c6:	6979      	ldr	r1, [r7, #20]
 80043c8:	f004 fd2e 	bl	8008e28 <USB_EPStartXfer>

  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3718      	adds	r7, #24
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b084      	sub	sp, #16
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
 80043de:	460b      	mov	r3, r1
 80043e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80043e2:	78fb      	ldrb	r3, [r7, #3]
 80043e4:	f003 020f 	and.w	r2, r3, #15
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d901      	bls.n	80043f4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e050      	b.n	8004496 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80043f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	da0f      	bge.n	800441c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043fc:	78fb      	ldrb	r3, [r7, #3]
 80043fe:	f003 020f 	and.w	r2, r3, #15
 8004402:	4613      	mov	r3, r2
 8004404:	00db      	lsls	r3, r3, #3
 8004406:	4413      	add	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	3338      	adds	r3, #56	; 0x38
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	4413      	add	r3, r2
 8004410:	3304      	adds	r3, #4
 8004412:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2201      	movs	r2, #1
 8004418:	705a      	strb	r2, [r3, #1]
 800441a:	e00d      	b.n	8004438 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800441c:	78fa      	ldrb	r2, [r7, #3]
 800441e:	4613      	mov	r3, r2
 8004420:	00db      	lsls	r3, r3, #3
 8004422:	4413      	add	r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	4413      	add	r3, r2
 800442e:	3304      	adds	r3, #4
 8004430:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2201      	movs	r2, #1
 800443c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800443e:	78fb      	ldrb	r3, [r7, #3]
 8004440:	f003 030f 	and.w	r3, r3, #15
 8004444:	b2da      	uxtb	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004450:	2b01      	cmp	r3, #1
 8004452:	d101      	bne.n	8004458 <HAL_PCD_EP_SetStall+0x82>
 8004454:	2302      	movs	r3, #2
 8004456:	e01e      	b.n	8004496 <HAL_PCD_EP_SetStall+0xc0>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68f9      	ldr	r1, [r7, #12]
 8004466:	4618      	mov	r0, r3
 8004468:	f005 f8be 	bl	80095e8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800446c:	78fb      	ldrb	r3, [r7, #3]
 800446e:	f003 030f 	and.w	r3, r3, #15
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10a      	bne.n	800448c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6818      	ldr	r0, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	b2d9      	uxtb	r1, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004486:	461a      	mov	r2, r3
 8004488:	f005 fab0 	bl	80099ec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b084      	sub	sp, #16
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
 80044a6:	460b      	mov	r3, r1
 80044a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80044aa:	78fb      	ldrb	r3, [r7, #3]
 80044ac:	f003 020f 	and.w	r2, r3, #15
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d901      	bls.n	80044bc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e042      	b.n	8004542 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80044bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	da0f      	bge.n	80044e4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044c4:	78fb      	ldrb	r3, [r7, #3]
 80044c6:	f003 020f 	and.w	r2, r3, #15
 80044ca:	4613      	mov	r3, r2
 80044cc:	00db      	lsls	r3, r3, #3
 80044ce:	4413      	add	r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	3338      	adds	r3, #56	; 0x38
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	4413      	add	r3, r2
 80044d8:	3304      	adds	r3, #4
 80044da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2201      	movs	r2, #1
 80044e0:	705a      	strb	r2, [r3, #1]
 80044e2:	e00f      	b.n	8004504 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044e4:	78fb      	ldrb	r3, [r7, #3]
 80044e6:	f003 020f 	and.w	r2, r3, #15
 80044ea:	4613      	mov	r3, r2
 80044ec:	00db      	lsls	r3, r3, #3
 80044ee:	4413      	add	r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	4413      	add	r3, r2
 80044fa:	3304      	adds	r3, #4
 80044fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800450a:	78fb      	ldrb	r3, [r7, #3]
 800450c:	f003 030f 	and.w	r3, r3, #15
 8004510:	b2da      	uxtb	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800451c:	2b01      	cmp	r3, #1
 800451e:	d101      	bne.n	8004524 <HAL_PCD_EP_ClrStall+0x86>
 8004520:	2302      	movs	r3, #2
 8004522:	e00e      	b.n	8004542 <HAL_PCD_EP_ClrStall+0xa4>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68f9      	ldr	r1, [r7, #12]
 8004532:	4618      	mov	r0, r3
 8004534:	f005 f8c6 	bl	80096c4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800454a:	b580      	push	{r7, lr}
 800454c:	b084      	sub	sp, #16
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
 8004552:	460b      	mov	r3, r1
 8004554:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004556:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800455a:	2b00      	cmp	r3, #0
 800455c:	da0c      	bge.n	8004578 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800455e:	78fb      	ldrb	r3, [r7, #3]
 8004560:	f003 020f 	and.w	r2, r3, #15
 8004564:	4613      	mov	r3, r2
 8004566:	00db      	lsls	r3, r3, #3
 8004568:	4413      	add	r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	3338      	adds	r3, #56	; 0x38
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	4413      	add	r3, r2
 8004572:	3304      	adds	r3, #4
 8004574:	60fb      	str	r3, [r7, #12]
 8004576:	e00c      	b.n	8004592 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004578:	78fb      	ldrb	r3, [r7, #3]
 800457a:	f003 020f 	and.w	r2, r3, #15
 800457e:	4613      	mov	r3, r2
 8004580:	00db      	lsls	r3, r3, #3
 8004582:	4413      	add	r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	4413      	add	r3, r2
 800458e:	3304      	adds	r3, #4
 8004590:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68f9      	ldr	r1, [r7, #12]
 8004598:	4618      	mov	r0, r3
 800459a:	f004 fee5 	bl	8009368 <USB_EPStopXfer>
 800459e:	4603      	mov	r3, r0
 80045a0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80045a2:	7afb      	ldrb	r3, [r7, #11]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3710      	adds	r7, #16
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b08a      	sub	sp, #40	; 0x28
 80045b0:	af02      	add	r7, sp, #8
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80045c0:	683a      	ldr	r2, [r7, #0]
 80045c2:	4613      	mov	r3, r2
 80045c4:	00db      	lsls	r3, r3, #3
 80045c6:	4413      	add	r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	3338      	adds	r3, #56	; 0x38
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	4413      	add	r3, r2
 80045d0:	3304      	adds	r3, #4
 80045d2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	695a      	ldr	r2, [r3, #20]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d901      	bls.n	80045e4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e06c      	b.n	80046be <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	691a      	ldr	r2, [r3, #16]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	695b      	ldr	r3, [r3, #20]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	69fa      	ldr	r2, [r7, #28]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d902      	bls.n	8004600 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	3303      	adds	r3, #3
 8004604:	089b      	lsrs	r3, r3, #2
 8004606:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004608:	e02b      	b.n	8004662 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	691a      	ldr	r2, [r3, #16]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	69fa      	ldr	r2, [r7, #28]
 800461c:	429a      	cmp	r2, r3
 800461e:	d902      	bls.n	8004626 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	3303      	adds	r3, #3
 800462a:	089b      	lsrs	r3, r3, #2
 800462c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	68d9      	ldr	r1, [r3, #12]
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	b2da      	uxtb	r2, r3
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800463e:	b2db      	uxtb	r3, r3
 8004640:	9300      	str	r3, [sp, #0]
 8004642:	4603      	mov	r3, r0
 8004644:	6978      	ldr	r0, [r7, #20]
 8004646:	f004 ff39 	bl	80094bc <USB_WritePacket>

    ep->xfer_buff  += len;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	68da      	ldr	r2, [r3, #12]
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	441a      	add	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	695a      	ldr	r2, [r3, #20]
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	441a      	add	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	015a      	lsls	r2, r3, #5
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	4413      	add	r3, r2
 800466a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004672:	69ba      	ldr	r2, [r7, #24]
 8004674:	429a      	cmp	r2, r3
 8004676:	d809      	bhi.n	800468c <PCD_WriteEmptyTxFifo+0xe0>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	695a      	ldr	r2, [r3, #20]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004680:	429a      	cmp	r2, r3
 8004682:	d203      	bcs.n	800468c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1be      	bne.n	800460a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	691a      	ldr	r2, [r3, #16]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	695b      	ldr	r3, [r3, #20]
 8004694:	429a      	cmp	r2, r3
 8004696:	d811      	bhi.n	80046bc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	f003 030f 	and.w	r3, r3, #15
 800469e:	2201      	movs	r2, #1
 80046a0:	fa02 f303 	lsl.w	r3, r2, r3
 80046a4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	43db      	mvns	r3, r3
 80046b2:	6939      	ldr	r1, [r7, #16]
 80046b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046b8:	4013      	ands	r3, r2
 80046ba:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3720      	adds	r7, #32
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
	...

080046c8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b088      	sub	sp, #32
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	333c      	adds	r3, #60	; 0x3c
 80046e0:	3304      	adds	r3, #4
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	015a      	lsls	r2, r3, #5
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	4413      	add	r3, r2
 80046ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d17b      	bne.n	80047f6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	f003 0308 	and.w	r3, r3, #8
 8004704:	2b00      	cmp	r3, #0
 8004706:	d015      	beq.n	8004734 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	4a61      	ldr	r2, [pc, #388]	; (8004890 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800470c:	4293      	cmp	r3, r2
 800470e:	f240 80b9 	bls.w	8004884 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004718:	2b00      	cmp	r3, #0
 800471a:	f000 80b3 	beq.w	8004884 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	015a      	lsls	r2, r3, #5
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	4413      	add	r3, r2
 8004726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800472a:	461a      	mov	r2, r3
 800472c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004730:	6093      	str	r3, [r2, #8]
 8004732:	e0a7      	b.n	8004884 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	f003 0320 	and.w	r3, r3, #32
 800473a:	2b00      	cmp	r3, #0
 800473c:	d009      	beq.n	8004752 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	015a      	lsls	r2, r3, #5
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	4413      	add	r3, r2
 8004746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800474a:	461a      	mov	r2, r3
 800474c:	2320      	movs	r3, #32
 800474e:	6093      	str	r3, [r2, #8]
 8004750:	e098      	b.n	8004884 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004758:	2b00      	cmp	r3, #0
 800475a:	f040 8093 	bne.w	8004884 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	4a4b      	ldr	r2, [pc, #300]	; (8004890 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d90f      	bls.n	8004786 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00a      	beq.n	8004786 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	015a      	lsls	r2, r3, #5
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	4413      	add	r3, r2
 8004778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800477c:	461a      	mov	r2, r3
 800477e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004782:	6093      	str	r3, [r2, #8]
 8004784:	e07e      	b.n	8004884 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004786:	683a      	ldr	r2, [r7, #0]
 8004788:	4613      	mov	r3, r2
 800478a:	00db      	lsls	r3, r3, #3
 800478c:	4413      	add	r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	4413      	add	r3, r2
 8004798:	3304      	adds	r3, #4
 800479a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6a1a      	ldr	r2, [r3, #32]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	0159      	lsls	r1, r3, #5
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	440b      	add	r3, r1
 80047a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047b2:	1ad2      	subs	r2, r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d114      	bne.n	80047e8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d109      	bne.n	80047da <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6818      	ldr	r0, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80047d0:	461a      	mov	r2, r3
 80047d2:	2101      	movs	r1, #1
 80047d4:	f005 f90a 	bl	80099ec <USB_EP0_OutStart>
 80047d8:	e006      	b.n	80047e8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	68da      	ldr	r2, [r3, #12]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	441a      	add	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	4619      	mov	r1, r3
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f007 fc0e 	bl	800c010 <HAL_PCD_DataOutStageCallback>
 80047f4:	e046      	b.n	8004884 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	4a26      	ldr	r2, [pc, #152]	; (8004894 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d124      	bne.n	8004848 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00a      	beq.n	800481e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	015a      	lsls	r2, r3, #5
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	4413      	add	r3, r2
 8004810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004814:	461a      	mov	r2, r3
 8004816:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800481a:	6093      	str	r3, [r2, #8]
 800481c:	e032      	b.n	8004884 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	f003 0320 	and.w	r3, r3, #32
 8004824:	2b00      	cmp	r3, #0
 8004826:	d008      	beq.n	800483a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	015a      	lsls	r2, r3, #5
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	4413      	add	r3, r2
 8004830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004834:	461a      	mov	r2, r3
 8004836:	2320      	movs	r3, #32
 8004838:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	b2db      	uxtb	r3, r3
 800483e:	4619      	mov	r1, r3
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f007 fbe5 	bl	800c010 <HAL_PCD_DataOutStageCallback>
 8004846:	e01d      	b.n	8004884 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d114      	bne.n	8004878 <PCD_EP_OutXfrComplete_int+0x1b0>
 800484e:	6879      	ldr	r1, [r7, #4]
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	4613      	mov	r3, r2
 8004854:	00db      	lsls	r3, r3, #3
 8004856:	4413      	add	r3, r2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	440b      	add	r3, r1
 800485c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d108      	bne.n	8004878 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6818      	ldr	r0, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004870:	461a      	mov	r2, r3
 8004872:	2100      	movs	r1, #0
 8004874:	f005 f8ba 	bl	80099ec <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	b2db      	uxtb	r3, r3
 800487c:	4619      	mov	r1, r3
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f007 fbc6 	bl	800c010 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3720      	adds	r7, #32
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	4f54300a 	.word	0x4f54300a
 8004894:	4f54310a 	.word	0x4f54310a

08004898 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	333c      	adds	r3, #60	; 0x3c
 80048b0:	3304      	adds	r3, #4
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	015a      	lsls	r2, r3, #5
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	4413      	add	r3, r2
 80048be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	4a15      	ldr	r2, [pc, #84]	; (8004920 <PCD_EP_OutSetupPacket_int+0x88>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d90e      	bls.n	80048ec <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d009      	beq.n	80048ec <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	015a      	lsls	r2, r3, #5
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	4413      	add	r3, r2
 80048e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e4:	461a      	mov	r2, r3
 80048e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048ea:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f007 fb7d 	bl	800bfec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	4a0a      	ldr	r2, [pc, #40]	; (8004920 <PCD_EP_OutSetupPacket_int+0x88>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d90c      	bls.n	8004914 <PCD_EP_OutSetupPacket_int+0x7c>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d108      	bne.n	8004914 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6818      	ldr	r0, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800490c:	461a      	mov	r2, r3
 800490e:	2101      	movs	r1, #1
 8004910:	f005 f86c 	bl	80099ec <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3718      	adds	r7, #24
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	4f54300a 	.word	0x4f54300a

08004924 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	460b      	mov	r3, r1
 800492e:	70fb      	strb	r3, [r7, #3]
 8004930:	4613      	mov	r3, r2
 8004932:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800493c:	78fb      	ldrb	r3, [r7, #3]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d107      	bne.n	8004952 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004942:	883b      	ldrh	r3, [r7, #0]
 8004944:	0419      	lsls	r1, r3, #16
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68ba      	ldr	r2, [r7, #8]
 800494c:	430a      	orrs	r2, r1
 800494e:	629a      	str	r2, [r3, #40]	; 0x28
 8004950:	e028      	b.n	80049a4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004958:	0c1b      	lsrs	r3, r3, #16
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	4413      	add	r3, r2
 800495e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004960:	2300      	movs	r3, #0
 8004962:	73fb      	strb	r3, [r7, #15]
 8004964:	e00d      	b.n	8004982 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	7bfb      	ldrb	r3, [r7, #15]
 800496c:	3340      	adds	r3, #64	; 0x40
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	4413      	add	r3, r2
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	0c1b      	lsrs	r3, r3, #16
 8004976:	68ba      	ldr	r2, [r7, #8]
 8004978:	4413      	add	r3, r2
 800497a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800497c:	7bfb      	ldrb	r3, [r7, #15]
 800497e:	3301      	adds	r3, #1
 8004980:	73fb      	strb	r3, [r7, #15]
 8004982:	7bfa      	ldrb	r2, [r7, #15]
 8004984:	78fb      	ldrb	r3, [r7, #3]
 8004986:	3b01      	subs	r3, #1
 8004988:	429a      	cmp	r2, r3
 800498a:	d3ec      	bcc.n	8004966 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800498c:	883b      	ldrh	r3, [r7, #0]
 800498e:	0418      	lsls	r0, r3, #16
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6819      	ldr	r1, [r3, #0]
 8004994:	78fb      	ldrb	r3, [r7, #3]
 8004996:	3b01      	subs	r3, #1
 8004998:	68ba      	ldr	r2, [r7, #8]
 800499a:	4302      	orrs	r2, r0
 800499c:	3340      	adds	r3, #64	; 0x40
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	440b      	add	r3, r1
 80049a2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3714      	adds	r7, #20
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr

080049b2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80049b2:	b480      	push	{r7}
 80049b4:	b083      	sub	sp, #12
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
 80049ba:	460b      	mov	r3, r1
 80049bc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	887a      	ldrh	r2, [r7, #2]
 80049c4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a02:	4b05      	ldr	r3, [pc, #20]	; (8004a18 <HAL_PCDEx_ActivateLPM+0x44>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3714      	adds	r7, #20
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr
 8004a18:	10000003 	.word	0x10000003

08004a1c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	460b      	mov	r3, r1
 8004a26:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004a28:	bf00      	nop
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004a3c:	4b19      	ldr	r3, [pc, #100]	; (8004aa4 <HAL_PWREx_ConfigSupply+0x70>)
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f003 0304 	and.w	r3, r3, #4
 8004a44:	2b04      	cmp	r3, #4
 8004a46:	d00a      	beq.n	8004a5e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004a48:	4b16      	ldr	r3, [pc, #88]	; (8004aa4 <HAL_PWREx_ConfigSupply+0x70>)
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	f003 0307 	and.w	r3, r3, #7
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d001      	beq.n	8004a5a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e01f      	b.n	8004a9a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	e01d      	b.n	8004a9a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004a5e:	4b11      	ldr	r3, [pc, #68]	; (8004aa4 <HAL_PWREx_ConfigSupply+0x70>)
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	f023 0207 	bic.w	r2, r3, #7
 8004a66:	490f      	ldr	r1, [pc, #60]	; (8004aa4 <HAL_PWREx_ConfigSupply+0x70>)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004a6e:	f7fd f987 	bl	8001d80 <HAL_GetTick>
 8004a72:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004a74:	e009      	b.n	8004a8a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004a76:	f7fd f983 	bl	8001d80 <HAL_GetTick>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a84:	d901      	bls.n	8004a8a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e007      	b.n	8004a9a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004a8a:	4b06      	ldr	r3, [pc, #24]	; (8004aa4 <HAL_PWREx_ConfigSupply+0x70>)
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a96:	d1ee      	bne.n	8004a76 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	58024800 	.word	0x58024800

08004aa8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004aac:	4b05      	ldr	r3, [pc, #20]	; (8004ac4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	4a04      	ldr	r2, [pc, #16]	; (8004ac4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004ab2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ab6:	60d3      	str	r3, [r2, #12]
}
 8004ab8:	bf00      	nop
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	58024800 	.word	0x58024800

08004ac8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b08c      	sub	sp, #48	; 0x30
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d102      	bne.n	8004adc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	f000 bc48 	b.w	800536c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0301 	and.w	r3, r3, #1
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f000 8088 	beq.w	8004bfa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004aea:	4b99      	ldr	r3, [pc, #612]	; (8004d50 <HAL_RCC_OscConfig+0x288>)
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004af2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004af4:	4b96      	ldr	r3, [pc, #600]	; (8004d50 <HAL_RCC_OscConfig+0x288>)
 8004af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004afc:	2b10      	cmp	r3, #16
 8004afe:	d007      	beq.n	8004b10 <HAL_RCC_OscConfig+0x48>
 8004b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b02:	2b18      	cmp	r3, #24
 8004b04:	d111      	bne.n	8004b2a <HAL_RCC_OscConfig+0x62>
 8004b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b08:	f003 0303 	and.w	r3, r3, #3
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d10c      	bne.n	8004b2a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b10:	4b8f      	ldr	r3, [pc, #572]	; (8004d50 <HAL_RCC_OscConfig+0x288>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d06d      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x130>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d169      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	f000 bc21 	b.w	800536c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b32:	d106      	bne.n	8004b42 <HAL_RCC_OscConfig+0x7a>
 8004b34:	4b86      	ldr	r3, [pc, #536]	; (8004d50 <HAL_RCC_OscConfig+0x288>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a85      	ldr	r2, [pc, #532]	; (8004d50 <HAL_RCC_OscConfig+0x288>)
 8004b3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b3e:	6013      	str	r3, [r2, #0]
 8004b40:	e02e      	b.n	8004ba0 <HAL_RCC_OscConfig+0xd8>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10c      	bne.n	8004b64 <HAL_RCC_OscConfig+0x9c>
 8004b4a:	4b81      	ldr	r3, [pc, #516]	; (8004d50 <HAL_RCC_OscConfig+0x288>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a80      	ldr	r2, [pc, #512]	; (8004d50 <HAL_RCC_OscConfig+0x288>)
 8004b50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b54:	6013      	str	r3, [r2, #0]
 8004b56:	4b7e      	ldr	r3, [pc, #504]	; (8004d50 <HAL_RCC_OscConfig+0x288>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a7d      	ldr	r2, [pc, #500]	; (8004d50 <HAL_RCC_OscConfig+0x288>)
 8004b5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b60:	6013      	str	r3, [r2, #0]
 8004b62:	e01d      	b.n	8004ba0 <HAL_RCC_OscConfig+0xd8>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b6c:	d10c      	bne.n	8004b88 <HAL_RCC_OscConfig+0xc0>
 8004b6e:	4b78      	ldr	r3, [pc, #480]	; (8004d50 <HAL_RCC_OscConfig+0x288>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a77      	ldr	r2, [pc, #476]	; (8004d50 <HAL_RCC_OscConfig+0x288>)
 8004b74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b78:	6013      	str	r3, [r2, #0]
 8004b7a:	4b75      	ldr	r3, [pc, #468]	; (8004d50 <HAL_RCC_OscConfig+0x288>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a74      	ldr	r2, [pc, #464]	; (8004d50 <HAL_RCC_OscConfig+0x288>)
 8004b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b84:	6013      	str	r3, [r2, #0]
 8004b86:	e00b      	b.n	8004ba0 <HAL_RCC_OscConfig+0xd8>
 8004b88:	4b71      	ldr	r3, [pc, #452]	; (8004d50 <HAL_RCC_OscConfig+0x288>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a70      	ldr	r2, [pc, #448]	; (8004d50 <HAL_RCC_OscConfig+0x288>)
 8004b8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b92:	6013      	str	r3, [r2, #0]
 8004b94:	4b6e      	ldr	r3, [pc, #440]	; (8004d50 <HAL_RCC_OscConfig+0x288>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a6d      	ldr	r2, [pc, #436]	; (8004d50 <HAL_RCC_OscConfig+0x288>)
 8004b9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d013      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba8:	f7fd f8ea 	bl	8001d80 <HAL_GetTick>
 8004bac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004bae:	e008      	b.n	8004bc2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bb0:	f7fd f8e6 	bl	8001d80 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b64      	cmp	r3, #100	; 0x64
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e3d4      	b.n	800536c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004bc2:	4b63      	ldr	r3, [pc, #396]	; (8004d50 <HAL_RCC_OscConfig+0x288>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d0f0      	beq.n	8004bb0 <HAL_RCC_OscConfig+0xe8>
 8004bce:	e014      	b.n	8004bfa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd0:	f7fd f8d6 	bl	8001d80 <HAL_GetTick>
 8004bd4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004bd6:	e008      	b.n	8004bea <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bd8:	f7fd f8d2 	bl	8001d80 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b64      	cmp	r3, #100	; 0x64
 8004be4:	d901      	bls.n	8004bea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e3c0      	b.n	800536c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004bea:	4b59      	ldr	r3, [pc, #356]	; (8004d50 <HAL_RCC_OscConfig+0x288>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1f0      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x110>
 8004bf6:	e000      	b.n	8004bfa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0302 	and.w	r3, r3, #2
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f000 80ca 	beq.w	8004d9c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c08:	4b51      	ldr	r3, [pc, #324]	; (8004d50 <HAL_RCC_OscConfig+0x288>)
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c10:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c12:	4b4f      	ldr	r3, [pc, #316]	; (8004d50 <HAL_RCC_OscConfig+0x288>)
 8004c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c16:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004c18:	6a3b      	ldr	r3, [r7, #32]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d007      	beq.n	8004c2e <HAL_RCC_OscConfig+0x166>
 8004c1e:	6a3b      	ldr	r3, [r7, #32]
 8004c20:	2b18      	cmp	r3, #24
 8004c22:	d156      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x20a>
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	f003 0303 	and.w	r3, r3, #3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d151      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c2e:	4b48      	ldr	r3, [pc, #288]	; (8004d50 <HAL_RCC_OscConfig+0x288>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0304 	and.w	r3, r3, #4
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d005      	beq.n	8004c46 <HAL_RCC_OscConfig+0x17e>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d101      	bne.n	8004c46 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e392      	b.n	800536c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004c46:	4b42      	ldr	r3, [pc, #264]	; (8004d50 <HAL_RCC_OscConfig+0x288>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f023 0219 	bic.w	r2, r3, #25
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	493f      	ldr	r1, [pc, #252]	; (8004d50 <HAL_RCC_OscConfig+0x288>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c58:	f7fd f892 	bl	8001d80 <HAL_GetTick>
 8004c5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c5e:	e008      	b.n	8004c72 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c60:	f7fd f88e 	bl	8001d80 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e37c      	b.n	800536c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c72:	4b37      	ldr	r3, [pc, #220]	; (8004d50 <HAL_RCC_OscConfig+0x288>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0304 	and.w	r3, r3, #4
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d0f0      	beq.n	8004c60 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c7e:	f7fd f8af 	bl	8001de0 <HAL_GetREVID>
 8004c82:	4603      	mov	r3, r0
 8004c84:	f241 0203 	movw	r2, #4099	; 0x1003
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d817      	bhi.n	8004cbc <HAL_RCC_OscConfig+0x1f4>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	2b40      	cmp	r3, #64	; 0x40
 8004c92:	d108      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x1de>
 8004c94:	4b2e      	ldr	r3, [pc, #184]	; (8004d50 <HAL_RCC_OscConfig+0x288>)
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004c9c:	4a2c      	ldr	r2, [pc, #176]	; (8004d50 <HAL_RCC_OscConfig+0x288>)
 8004c9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ca2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ca4:	e07a      	b.n	8004d9c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ca6:	4b2a      	ldr	r3, [pc, #168]	; (8004d50 <HAL_RCC_OscConfig+0x288>)
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	031b      	lsls	r3, r3, #12
 8004cb4:	4926      	ldr	r1, [pc, #152]	; (8004d50 <HAL_RCC_OscConfig+0x288>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cba:	e06f      	b.n	8004d9c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cbc:	4b24      	ldr	r3, [pc, #144]	; (8004d50 <HAL_RCC_OscConfig+0x288>)
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	061b      	lsls	r3, r3, #24
 8004cca:	4921      	ldr	r1, [pc, #132]	; (8004d50 <HAL_RCC_OscConfig+0x288>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cd0:	e064      	b.n	8004d9c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d047      	beq.n	8004d6a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004cda:	4b1d      	ldr	r3, [pc, #116]	; (8004d50 <HAL_RCC_OscConfig+0x288>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f023 0219 	bic.w	r2, r3, #25
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	491a      	ldr	r1, [pc, #104]	; (8004d50 <HAL_RCC_OscConfig+0x288>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cec:	f7fd f848 	bl	8001d80 <HAL_GetTick>
 8004cf0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004cf2:	e008      	b.n	8004d06 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cf4:	f7fd f844 	bl	8001d80 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d901      	bls.n	8004d06 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e332      	b.n	800536c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d06:	4b12      	ldr	r3, [pc, #72]	; (8004d50 <HAL_RCC_OscConfig+0x288>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0304 	and.w	r3, r3, #4
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d0f0      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d12:	f7fd f865 	bl	8001de0 <HAL_GetREVID>
 8004d16:	4603      	mov	r3, r0
 8004d18:	f241 0203 	movw	r2, #4099	; 0x1003
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d819      	bhi.n	8004d54 <HAL_RCC_OscConfig+0x28c>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	2b40      	cmp	r3, #64	; 0x40
 8004d26:	d108      	bne.n	8004d3a <HAL_RCC_OscConfig+0x272>
 8004d28:	4b09      	ldr	r3, [pc, #36]	; (8004d50 <HAL_RCC_OscConfig+0x288>)
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004d30:	4a07      	ldr	r2, [pc, #28]	; (8004d50 <HAL_RCC_OscConfig+0x288>)
 8004d32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d36:	6053      	str	r3, [r2, #4]
 8004d38:	e030      	b.n	8004d9c <HAL_RCC_OscConfig+0x2d4>
 8004d3a:	4b05      	ldr	r3, [pc, #20]	; (8004d50 <HAL_RCC_OscConfig+0x288>)
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	031b      	lsls	r3, r3, #12
 8004d48:	4901      	ldr	r1, [pc, #4]	; (8004d50 <HAL_RCC_OscConfig+0x288>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	604b      	str	r3, [r1, #4]
 8004d4e:	e025      	b.n	8004d9c <HAL_RCC_OscConfig+0x2d4>
 8004d50:	58024400 	.word	0x58024400
 8004d54:	4b9a      	ldr	r3, [pc, #616]	; (8004fc0 <HAL_RCC_OscConfig+0x4f8>)
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	061b      	lsls	r3, r3, #24
 8004d62:	4997      	ldr	r1, [pc, #604]	; (8004fc0 <HAL_RCC_OscConfig+0x4f8>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	604b      	str	r3, [r1, #4]
 8004d68:	e018      	b.n	8004d9c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d6a:	4b95      	ldr	r3, [pc, #596]	; (8004fc0 <HAL_RCC_OscConfig+0x4f8>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a94      	ldr	r2, [pc, #592]	; (8004fc0 <HAL_RCC_OscConfig+0x4f8>)
 8004d70:	f023 0301 	bic.w	r3, r3, #1
 8004d74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d76:	f7fd f803 	bl	8001d80 <HAL_GetTick>
 8004d7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d7c:	e008      	b.n	8004d90 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d7e:	f7fc ffff 	bl	8001d80 <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d901      	bls.n	8004d90 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e2ed      	b.n	800536c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d90:	4b8b      	ldr	r3, [pc, #556]	; (8004fc0 <HAL_RCC_OscConfig+0x4f8>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0304 	and.w	r3, r3, #4
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1f0      	bne.n	8004d7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0310 	and.w	r3, r3, #16
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f000 80a9 	beq.w	8004efc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004daa:	4b85      	ldr	r3, [pc, #532]	; (8004fc0 <HAL_RCC_OscConfig+0x4f8>)
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004db2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004db4:	4b82      	ldr	r3, [pc, #520]	; (8004fc0 <HAL_RCC_OscConfig+0x4f8>)
 8004db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	2b08      	cmp	r3, #8
 8004dbe:	d007      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x308>
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	2b18      	cmp	r3, #24
 8004dc4:	d13a      	bne.n	8004e3c <HAL_RCC_OscConfig+0x374>
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	f003 0303 	and.w	r3, r3, #3
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d135      	bne.n	8004e3c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004dd0:	4b7b      	ldr	r3, [pc, #492]	; (8004fc0 <HAL_RCC_OscConfig+0x4f8>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d005      	beq.n	8004de8 <HAL_RCC_OscConfig+0x320>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	69db      	ldr	r3, [r3, #28]
 8004de0:	2b80      	cmp	r3, #128	; 0x80
 8004de2:	d001      	beq.n	8004de8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e2c1      	b.n	800536c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004de8:	f7fc fffa 	bl	8001de0 <HAL_GetREVID>
 8004dec:	4603      	mov	r3, r0
 8004dee:	f241 0203 	movw	r2, #4099	; 0x1003
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d817      	bhi.n	8004e26 <HAL_RCC_OscConfig+0x35e>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	2b20      	cmp	r3, #32
 8004dfc:	d108      	bne.n	8004e10 <HAL_RCC_OscConfig+0x348>
 8004dfe:	4b70      	ldr	r3, [pc, #448]	; (8004fc0 <HAL_RCC_OscConfig+0x4f8>)
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004e06:	4a6e      	ldr	r2, [pc, #440]	; (8004fc0 <HAL_RCC_OscConfig+0x4f8>)
 8004e08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e0c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e0e:	e075      	b.n	8004efc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e10:	4b6b      	ldr	r3, [pc, #428]	; (8004fc0 <HAL_RCC_OscConfig+0x4f8>)
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a1b      	ldr	r3, [r3, #32]
 8004e1c:	069b      	lsls	r3, r3, #26
 8004e1e:	4968      	ldr	r1, [pc, #416]	; (8004fc0 <HAL_RCC_OscConfig+0x4f8>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e24:	e06a      	b.n	8004efc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e26:	4b66      	ldr	r3, [pc, #408]	; (8004fc0 <HAL_RCC_OscConfig+0x4f8>)
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	061b      	lsls	r3, r3, #24
 8004e34:	4962      	ldr	r1, [pc, #392]	; (8004fc0 <HAL_RCC_OscConfig+0x4f8>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e3a:	e05f      	b.n	8004efc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	69db      	ldr	r3, [r3, #28]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d042      	beq.n	8004eca <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004e44:	4b5e      	ldr	r3, [pc, #376]	; (8004fc0 <HAL_RCC_OscConfig+0x4f8>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a5d      	ldr	r2, [pc, #372]	; (8004fc0 <HAL_RCC_OscConfig+0x4f8>)
 8004e4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e50:	f7fc ff96 	bl	8001d80 <HAL_GetTick>
 8004e54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e56:	e008      	b.n	8004e6a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004e58:	f7fc ff92 	bl	8001d80 <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d901      	bls.n	8004e6a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e280      	b.n	800536c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e6a:	4b55      	ldr	r3, [pc, #340]	; (8004fc0 <HAL_RCC_OscConfig+0x4f8>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d0f0      	beq.n	8004e58 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e76:	f7fc ffb3 	bl	8001de0 <HAL_GetREVID>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d817      	bhi.n	8004eb4 <HAL_RCC_OscConfig+0x3ec>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	2b20      	cmp	r3, #32
 8004e8a:	d108      	bne.n	8004e9e <HAL_RCC_OscConfig+0x3d6>
 8004e8c:	4b4c      	ldr	r3, [pc, #304]	; (8004fc0 <HAL_RCC_OscConfig+0x4f8>)
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004e94:	4a4a      	ldr	r2, [pc, #296]	; (8004fc0 <HAL_RCC_OscConfig+0x4f8>)
 8004e96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e9a:	6053      	str	r3, [r2, #4]
 8004e9c:	e02e      	b.n	8004efc <HAL_RCC_OscConfig+0x434>
 8004e9e:	4b48      	ldr	r3, [pc, #288]	; (8004fc0 <HAL_RCC_OscConfig+0x4f8>)
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
 8004eaa:	069b      	lsls	r3, r3, #26
 8004eac:	4944      	ldr	r1, [pc, #272]	; (8004fc0 <HAL_RCC_OscConfig+0x4f8>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	604b      	str	r3, [r1, #4]
 8004eb2:	e023      	b.n	8004efc <HAL_RCC_OscConfig+0x434>
 8004eb4:	4b42      	ldr	r3, [pc, #264]	; (8004fc0 <HAL_RCC_OscConfig+0x4f8>)
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a1b      	ldr	r3, [r3, #32]
 8004ec0:	061b      	lsls	r3, r3, #24
 8004ec2:	493f      	ldr	r1, [pc, #252]	; (8004fc0 <HAL_RCC_OscConfig+0x4f8>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	60cb      	str	r3, [r1, #12]
 8004ec8:	e018      	b.n	8004efc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004eca:	4b3d      	ldr	r3, [pc, #244]	; (8004fc0 <HAL_RCC_OscConfig+0x4f8>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a3c      	ldr	r2, [pc, #240]	; (8004fc0 <HAL_RCC_OscConfig+0x4f8>)
 8004ed0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ed4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed6:	f7fc ff53 	bl	8001d80 <HAL_GetTick>
 8004eda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004edc:	e008      	b.n	8004ef0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004ede:	f7fc ff4f 	bl	8001d80 <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d901      	bls.n	8004ef0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e23d      	b.n	800536c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ef0:	4b33      	ldr	r3, [pc, #204]	; (8004fc0 <HAL_RCC_OscConfig+0x4f8>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1f0      	bne.n	8004ede <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0308 	and.w	r3, r3, #8
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d036      	beq.n	8004f76 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d019      	beq.n	8004f44 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f10:	4b2b      	ldr	r3, [pc, #172]	; (8004fc0 <HAL_RCC_OscConfig+0x4f8>)
 8004f12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f14:	4a2a      	ldr	r2, [pc, #168]	; (8004fc0 <HAL_RCC_OscConfig+0x4f8>)
 8004f16:	f043 0301 	orr.w	r3, r3, #1
 8004f1a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f1c:	f7fc ff30 	bl	8001d80 <HAL_GetTick>
 8004f20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f22:	e008      	b.n	8004f36 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f24:	f7fc ff2c 	bl	8001d80 <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d901      	bls.n	8004f36 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e21a      	b.n	800536c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f36:	4b22      	ldr	r3, [pc, #136]	; (8004fc0 <HAL_RCC_OscConfig+0x4f8>)
 8004f38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d0f0      	beq.n	8004f24 <HAL_RCC_OscConfig+0x45c>
 8004f42:	e018      	b.n	8004f76 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f44:	4b1e      	ldr	r3, [pc, #120]	; (8004fc0 <HAL_RCC_OscConfig+0x4f8>)
 8004f46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f48:	4a1d      	ldr	r2, [pc, #116]	; (8004fc0 <HAL_RCC_OscConfig+0x4f8>)
 8004f4a:	f023 0301 	bic.w	r3, r3, #1
 8004f4e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f50:	f7fc ff16 	bl	8001d80 <HAL_GetTick>
 8004f54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f56:	e008      	b.n	8004f6a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f58:	f7fc ff12 	bl	8001d80 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d901      	bls.n	8004f6a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e200      	b.n	800536c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f6a:	4b15      	ldr	r3, [pc, #84]	; (8004fc0 <HAL_RCC_OscConfig+0x4f8>)
 8004f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1f0      	bne.n	8004f58 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0320 	and.w	r3, r3, #32
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d039      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d01c      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f8a:	4b0d      	ldr	r3, [pc, #52]	; (8004fc0 <HAL_RCC_OscConfig+0x4f8>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a0c      	ldr	r2, [pc, #48]	; (8004fc0 <HAL_RCC_OscConfig+0x4f8>)
 8004f90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004f94:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004f96:	f7fc fef3 	bl	8001d80 <HAL_GetTick>
 8004f9a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f9c:	e008      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f9e:	f7fc feef 	bl	8001d80 <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d901      	bls.n	8004fb0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e1dd      	b.n	800536c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004fb0:	4b03      	ldr	r3, [pc, #12]	; (8004fc0 <HAL_RCC_OscConfig+0x4f8>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d0f0      	beq.n	8004f9e <HAL_RCC_OscConfig+0x4d6>
 8004fbc:	e01b      	b.n	8004ff6 <HAL_RCC_OscConfig+0x52e>
 8004fbe:	bf00      	nop
 8004fc0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004fc4:	4b9b      	ldr	r3, [pc, #620]	; (8005234 <HAL_RCC_OscConfig+0x76c>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a9a      	ldr	r2, [pc, #616]	; (8005234 <HAL_RCC_OscConfig+0x76c>)
 8004fca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004fd0:	f7fc fed6 	bl	8001d80 <HAL_GetTick>
 8004fd4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004fd6:	e008      	b.n	8004fea <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fd8:	f7fc fed2 	bl	8001d80 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d901      	bls.n	8004fea <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e1c0      	b.n	800536c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004fea:	4b92      	ldr	r3, [pc, #584]	; (8005234 <HAL_RCC_OscConfig+0x76c>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1f0      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0304 	and.w	r3, r3, #4
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	f000 8081 	beq.w	8005106 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005004:	4b8c      	ldr	r3, [pc, #560]	; (8005238 <HAL_RCC_OscConfig+0x770>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a8b      	ldr	r2, [pc, #556]	; (8005238 <HAL_RCC_OscConfig+0x770>)
 800500a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800500e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005010:	f7fc feb6 	bl	8001d80 <HAL_GetTick>
 8005014:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005016:	e008      	b.n	800502a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005018:	f7fc feb2 	bl	8001d80 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	2b64      	cmp	r3, #100	; 0x64
 8005024:	d901      	bls.n	800502a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e1a0      	b.n	800536c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800502a:	4b83      	ldr	r3, [pc, #524]	; (8005238 <HAL_RCC_OscConfig+0x770>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005032:	2b00      	cmp	r3, #0
 8005034:	d0f0      	beq.n	8005018 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d106      	bne.n	800504c <HAL_RCC_OscConfig+0x584>
 800503e:	4b7d      	ldr	r3, [pc, #500]	; (8005234 <HAL_RCC_OscConfig+0x76c>)
 8005040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005042:	4a7c      	ldr	r2, [pc, #496]	; (8005234 <HAL_RCC_OscConfig+0x76c>)
 8005044:	f043 0301 	orr.w	r3, r3, #1
 8005048:	6713      	str	r3, [r2, #112]	; 0x70
 800504a:	e02d      	b.n	80050a8 <HAL_RCC_OscConfig+0x5e0>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d10c      	bne.n	800506e <HAL_RCC_OscConfig+0x5a6>
 8005054:	4b77      	ldr	r3, [pc, #476]	; (8005234 <HAL_RCC_OscConfig+0x76c>)
 8005056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005058:	4a76      	ldr	r2, [pc, #472]	; (8005234 <HAL_RCC_OscConfig+0x76c>)
 800505a:	f023 0301 	bic.w	r3, r3, #1
 800505e:	6713      	str	r3, [r2, #112]	; 0x70
 8005060:	4b74      	ldr	r3, [pc, #464]	; (8005234 <HAL_RCC_OscConfig+0x76c>)
 8005062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005064:	4a73      	ldr	r2, [pc, #460]	; (8005234 <HAL_RCC_OscConfig+0x76c>)
 8005066:	f023 0304 	bic.w	r3, r3, #4
 800506a:	6713      	str	r3, [r2, #112]	; 0x70
 800506c:	e01c      	b.n	80050a8 <HAL_RCC_OscConfig+0x5e0>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	2b05      	cmp	r3, #5
 8005074:	d10c      	bne.n	8005090 <HAL_RCC_OscConfig+0x5c8>
 8005076:	4b6f      	ldr	r3, [pc, #444]	; (8005234 <HAL_RCC_OscConfig+0x76c>)
 8005078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800507a:	4a6e      	ldr	r2, [pc, #440]	; (8005234 <HAL_RCC_OscConfig+0x76c>)
 800507c:	f043 0304 	orr.w	r3, r3, #4
 8005080:	6713      	str	r3, [r2, #112]	; 0x70
 8005082:	4b6c      	ldr	r3, [pc, #432]	; (8005234 <HAL_RCC_OscConfig+0x76c>)
 8005084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005086:	4a6b      	ldr	r2, [pc, #428]	; (8005234 <HAL_RCC_OscConfig+0x76c>)
 8005088:	f043 0301 	orr.w	r3, r3, #1
 800508c:	6713      	str	r3, [r2, #112]	; 0x70
 800508e:	e00b      	b.n	80050a8 <HAL_RCC_OscConfig+0x5e0>
 8005090:	4b68      	ldr	r3, [pc, #416]	; (8005234 <HAL_RCC_OscConfig+0x76c>)
 8005092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005094:	4a67      	ldr	r2, [pc, #412]	; (8005234 <HAL_RCC_OscConfig+0x76c>)
 8005096:	f023 0301 	bic.w	r3, r3, #1
 800509a:	6713      	str	r3, [r2, #112]	; 0x70
 800509c:	4b65      	ldr	r3, [pc, #404]	; (8005234 <HAL_RCC_OscConfig+0x76c>)
 800509e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050a0:	4a64      	ldr	r2, [pc, #400]	; (8005234 <HAL_RCC_OscConfig+0x76c>)
 80050a2:	f023 0304 	bic.w	r3, r3, #4
 80050a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d015      	beq.n	80050dc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050b0:	f7fc fe66 	bl	8001d80 <HAL_GetTick>
 80050b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050b6:	e00a      	b.n	80050ce <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050b8:	f7fc fe62 	bl	8001d80 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d901      	bls.n	80050ce <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e14e      	b.n	800536c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050ce:	4b59      	ldr	r3, [pc, #356]	; (8005234 <HAL_RCC_OscConfig+0x76c>)
 80050d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d2:	f003 0302 	and.w	r3, r3, #2
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d0ee      	beq.n	80050b8 <HAL_RCC_OscConfig+0x5f0>
 80050da:	e014      	b.n	8005106 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050dc:	f7fc fe50 	bl	8001d80 <HAL_GetTick>
 80050e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80050e2:	e00a      	b.n	80050fa <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050e4:	f7fc fe4c 	bl	8001d80 <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d901      	bls.n	80050fa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e138      	b.n	800536c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80050fa:	4b4e      	ldr	r3, [pc, #312]	; (8005234 <HAL_RCC_OscConfig+0x76c>)
 80050fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fe:	f003 0302 	and.w	r3, r3, #2
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1ee      	bne.n	80050e4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510a:	2b00      	cmp	r3, #0
 800510c:	f000 812d 	beq.w	800536a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005110:	4b48      	ldr	r3, [pc, #288]	; (8005234 <HAL_RCC_OscConfig+0x76c>)
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005118:	2b18      	cmp	r3, #24
 800511a:	f000 80bd 	beq.w	8005298 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005122:	2b02      	cmp	r3, #2
 8005124:	f040 809e 	bne.w	8005264 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005128:	4b42      	ldr	r3, [pc, #264]	; (8005234 <HAL_RCC_OscConfig+0x76c>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a41      	ldr	r2, [pc, #260]	; (8005234 <HAL_RCC_OscConfig+0x76c>)
 800512e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005132:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005134:	f7fc fe24 	bl	8001d80 <HAL_GetTick>
 8005138:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800513a:	e008      	b.n	800514e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800513c:	f7fc fe20 	bl	8001d80 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	2b02      	cmp	r3, #2
 8005148:	d901      	bls.n	800514e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e10e      	b.n	800536c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800514e:	4b39      	ldr	r3, [pc, #228]	; (8005234 <HAL_RCC_OscConfig+0x76c>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1f0      	bne.n	800513c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800515a:	4b36      	ldr	r3, [pc, #216]	; (8005234 <HAL_RCC_OscConfig+0x76c>)
 800515c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800515e:	4b37      	ldr	r3, [pc, #220]	; (800523c <HAL_RCC_OscConfig+0x774>)
 8005160:	4013      	ands	r3, r2
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800516a:	0112      	lsls	r2, r2, #4
 800516c:	430a      	orrs	r2, r1
 800516e:	4931      	ldr	r1, [pc, #196]	; (8005234 <HAL_RCC_OscConfig+0x76c>)
 8005170:	4313      	orrs	r3, r2
 8005172:	628b      	str	r3, [r1, #40]	; 0x28
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005178:	3b01      	subs	r3, #1
 800517a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005182:	3b01      	subs	r3, #1
 8005184:	025b      	lsls	r3, r3, #9
 8005186:	b29b      	uxth	r3, r3
 8005188:	431a      	orrs	r2, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518e:	3b01      	subs	r3, #1
 8005190:	041b      	lsls	r3, r3, #16
 8005192:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005196:	431a      	orrs	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800519c:	3b01      	subs	r3, #1
 800519e:	061b      	lsls	r3, r3, #24
 80051a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80051a4:	4923      	ldr	r1, [pc, #140]	; (8005234 <HAL_RCC_OscConfig+0x76c>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80051aa:	4b22      	ldr	r3, [pc, #136]	; (8005234 <HAL_RCC_OscConfig+0x76c>)
 80051ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ae:	4a21      	ldr	r2, [pc, #132]	; (8005234 <HAL_RCC_OscConfig+0x76c>)
 80051b0:	f023 0301 	bic.w	r3, r3, #1
 80051b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80051b6:	4b1f      	ldr	r3, [pc, #124]	; (8005234 <HAL_RCC_OscConfig+0x76c>)
 80051b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051ba:	4b21      	ldr	r3, [pc, #132]	; (8005240 <HAL_RCC_OscConfig+0x778>)
 80051bc:	4013      	ands	r3, r2
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80051c2:	00d2      	lsls	r2, r2, #3
 80051c4:	491b      	ldr	r1, [pc, #108]	; (8005234 <HAL_RCC_OscConfig+0x76c>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80051ca:	4b1a      	ldr	r3, [pc, #104]	; (8005234 <HAL_RCC_OscConfig+0x76c>)
 80051cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ce:	f023 020c 	bic.w	r2, r3, #12
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d6:	4917      	ldr	r1, [pc, #92]	; (8005234 <HAL_RCC_OscConfig+0x76c>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80051dc:	4b15      	ldr	r3, [pc, #84]	; (8005234 <HAL_RCC_OscConfig+0x76c>)
 80051de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e0:	f023 0202 	bic.w	r2, r3, #2
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051e8:	4912      	ldr	r1, [pc, #72]	; (8005234 <HAL_RCC_OscConfig+0x76c>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80051ee:	4b11      	ldr	r3, [pc, #68]	; (8005234 <HAL_RCC_OscConfig+0x76c>)
 80051f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f2:	4a10      	ldr	r2, [pc, #64]	; (8005234 <HAL_RCC_OscConfig+0x76c>)
 80051f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051fa:	4b0e      	ldr	r3, [pc, #56]	; (8005234 <HAL_RCC_OscConfig+0x76c>)
 80051fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fe:	4a0d      	ldr	r2, [pc, #52]	; (8005234 <HAL_RCC_OscConfig+0x76c>)
 8005200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005204:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005206:	4b0b      	ldr	r3, [pc, #44]	; (8005234 <HAL_RCC_OscConfig+0x76c>)
 8005208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520a:	4a0a      	ldr	r2, [pc, #40]	; (8005234 <HAL_RCC_OscConfig+0x76c>)
 800520c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005210:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005212:	4b08      	ldr	r3, [pc, #32]	; (8005234 <HAL_RCC_OscConfig+0x76c>)
 8005214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005216:	4a07      	ldr	r2, [pc, #28]	; (8005234 <HAL_RCC_OscConfig+0x76c>)
 8005218:	f043 0301 	orr.w	r3, r3, #1
 800521c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800521e:	4b05      	ldr	r3, [pc, #20]	; (8005234 <HAL_RCC_OscConfig+0x76c>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a04      	ldr	r2, [pc, #16]	; (8005234 <HAL_RCC_OscConfig+0x76c>)
 8005224:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005228:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800522a:	f7fc fda9 	bl	8001d80 <HAL_GetTick>
 800522e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005230:	e011      	b.n	8005256 <HAL_RCC_OscConfig+0x78e>
 8005232:	bf00      	nop
 8005234:	58024400 	.word	0x58024400
 8005238:	58024800 	.word	0x58024800
 800523c:	fffffc0c 	.word	0xfffffc0c
 8005240:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005244:	f7fc fd9c 	bl	8001d80 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b02      	cmp	r3, #2
 8005250:	d901      	bls.n	8005256 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e08a      	b.n	800536c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005256:	4b47      	ldr	r3, [pc, #284]	; (8005374 <HAL_RCC_OscConfig+0x8ac>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d0f0      	beq.n	8005244 <HAL_RCC_OscConfig+0x77c>
 8005262:	e082      	b.n	800536a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005264:	4b43      	ldr	r3, [pc, #268]	; (8005374 <HAL_RCC_OscConfig+0x8ac>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a42      	ldr	r2, [pc, #264]	; (8005374 <HAL_RCC_OscConfig+0x8ac>)
 800526a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800526e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005270:	f7fc fd86 	bl	8001d80 <HAL_GetTick>
 8005274:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005276:	e008      	b.n	800528a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005278:	f7fc fd82 	bl	8001d80 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b02      	cmp	r3, #2
 8005284:	d901      	bls.n	800528a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e070      	b.n	800536c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800528a:	4b3a      	ldr	r3, [pc, #232]	; (8005374 <HAL_RCC_OscConfig+0x8ac>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1f0      	bne.n	8005278 <HAL_RCC_OscConfig+0x7b0>
 8005296:	e068      	b.n	800536a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005298:	4b36      	ldr	r3, [pc, #216]	; (8005374 <HAL_RCC_OscConfig+0x8ac>)
 800529a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800529e:	4b35      	ldr	r3, [pc, #212]	; (8005374 <HAL_RCC_OscConfig+0x8ac>)
 80052a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d031      	beq.n	8005310 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	f003 0203 	and.w	r2, r3, #3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d12a      	bne.n	8005310 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	091b      	lsrs	r3, r3, #4
 80052be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d122      	bne.n	8005310 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d11a      	bne.n	8005310 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	0a5b      	lsrs	r3, r3, #9
 80052de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052e6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d111      	bne.n	8005310 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	0c1b      	lsrs	r3, r3, #16
 80052f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d108      	bne.n	8005310 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	0e1b      	lsrs	r3, r3, #24
 8005302:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800530a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800530c:	429a      	cmp	r2, r3
 800530e:	d001      	beq.n	8005314 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e02b      	b.n	800536c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005314:	4b17      	ldr	r3, [pc, #92]	; (8005374 <HAL_RCC_OscConfig+0x8ac>)
 8005316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005318:	08db      	lsrs	r3, r3, #3
 800531a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800531e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005324:	693a      	ldr	r2, [r7, #16]
 8005326:	429a      	cmp	r2, r3
 8005328:	d01f      	beq.n	800536a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800532a:	4b12      	ldr	r3, [pc, #72]	; (8005374 <HAL_RCC_OscConfig+0x8ac>)
 800532c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532e:	4a11      	ldr	r2, [pc, #68]	; (8005374 <HAL_RCC_OscConfig+0x8ac>)
 8005330:	f023 0301 	bic.w	r3, r3, #1
 8005334:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005336:	f7fc fd23 	bl	8001d80 <HAL_GetTick>
 800533a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800533c:	bf00      	nop
 800533e:	f7fc fd1f 	bl	8001d80 <HAL_GetTick>
 8005342:	4602      	mov	r2, r0
 8005344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005346:	4293      	cmp	r3, r2
 8005348:	d0f9      	beq.n	800533e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800534a:	4b0a      	ldr	r3, [pc, #40]	; (8005374 <HAL_RCC_OscConfig+0x8ac>)
 800534c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800534e:	4b0a      	ldr	r3, [pc, #40]	; (8005378 <HAL_RCC_OscConfig+0x8b0>)
 8005350:	4013      	ands	r3, r2
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005356:	00d2      	lsls	r2, r2, #3
 8005358:	4906      	ldr	r1, [pc, #24]	; (8005374 <HAL_RCC_OscConfig+0x8ac>)
 800535a:	4313      	orrs	r3, r2
 800535c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800535e:	4b05      	ldr	r3, [pc, #20]	; (8005374 <HAL_RCC_OscConfig+0x8ac>)
 8005360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005362:	4a04      	ldr	r2, [pc, #16]	; (8005374 <HAL_RCC_OscConfig+0x8ac>)
 8005364:	f043 0301 	orr.w	r3, r3, #1
 8005368:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	3730      	adds	r7, #48	; 0x30
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	58024400 	.word	0x58024400
 8005378:	ffff0007 	.word	0xffff0007

0800537c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b086      	sub	sp, #24
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d101      	bne.n	8005390 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e19c      	b.n	80056ca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005390:	4b8a      	ldr	r3, [pc, #552]	; (80055bc <HAL_RCC_ClockConfig+0x240>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 030f 	and.w	r3, r3, #15
 8005398:	683a      	ldr	r2, [r7, #0]
 800539a:	429a      	cmp	r2, r3
 800539c:	d910      	bls.n	80053c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800539e:	4b87      	ldr	r3, [pc, #540]	; (80055bc <HAL_RCC_ClockConfig+0x240>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f023 020f 	bic.w	r2, r3, #15
 80053a6:	4985      	ldr	r1, [pc, #532]	; (80055bc <HAL_RCC_ClockConfig+0x240>)
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ae:	4b83      	ldr	r3, [pc, #524]	; (80055bc <HAL_RCC_ClockConfig+0x240>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 030f 	and.w	r3, r3, #15
 80053b6:	683a      	ldr	r2, [r7, #0]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d001      	beq.n	80053c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e184      	b.n	80056ca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0304 	and.w	r3, r3, #4
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d010      	beq.n	80053ee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	691a      	ldr	r2, [r3, #16]
 80053d0:	4b7b      	ldr	r3, [pc, #492]	; (80055c0 <HAL_RCC_ClockConfig+0x244>)
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053d8:	429a      	cmp	r2, r3
 80053da:	d908      	bls.n	80053ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80053dc:	4b78      	ldr	r3, [pc, #480]	; (80055c0 <HAL_RCC_ClockConfig+0x244>)
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	4975      	ldr	r1, [pc, #468]	; (80055c0 <HAL_RCC_ClockConfig+0x244>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0308 	and.w	r3, r3, #8
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d010      	beq.n	800541c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	695a      	ldr	r2, [r3, #20]
 80053fe:	4b70      	ldr	r3, [pc, #448]	; (80055c0 <HAL_RCC_ClockConfig+0x244>)
 8005400:	69db      	ldr	r3, [r3, #28]
 8005402:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005406:	429a      	cmp	r2, r3
 8005408:	d908      	bls.n	800541c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800540a:	4b6d      	ldr	r3, [pc, #436]	; (80055c0 <HAL_RCC_ClockConfig+0x244>)
 800540c:	69db      	ldr	r3, [r3, #28]
 800540e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	496a      	ldr	r1, [pc, #424]	; (80055c0 <HAL_RCC_ClockConfig+0x244>)
 8005418:	4313      	orrs	r3, r2
 800541a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0310 	and.w	r3, r3, #16
 8005424:	2b00      	cmp	r3, #0
 8005426:	d010      	beq.n	800544a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	699a      	ldr	r2, [r3, #24]
 800542c:	4b64      	ldr	r3, [pc, #400]	; (80055c0 <HAL_RCC_ClockConfig+0x244>)
 800542e:	69db      	ldr	r3, [r3, #28]
 8005430:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005434:	429a      	cmp	r2, r3
 8005436:	d908      	bls.n	800544a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005438:	4b61      	ldr	r3, [pc, #388]	; (80055c0 <HAL_RCC_ClockConfig+0x244>)
 800543a:	69db      	ldr	r3, [r3, #28]
 800543c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	495e      	ldr	r1, [pc, #376]	; (80055c0 <HAL_RCC_ClockConfig+0x244>)
 8005446:	4313      	orrs	r3, r2
 8005448:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0320 	and.w	r3, r3, #32
 8005452:	2b00      	cmp	r3, #0
 8005454:	d010      	beq.n	8005478 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	69da      	ldr	r2, [r3, #28]
 800545a:	4b59      	ldr	r3, [pc, #356]	; (80055c0 <HAL_RCC_ClockConfig+0x244>)
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005462:	429a      	cmp	r2, r3
 8005464:	d908      	bls.n	8005478 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005466:	4b56      	ldr	r3, [pc, #344]	; (80055c0 <HAL_RCC_ClockConfig+0x244>)
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	69db      	ldr	r3, [r3, #28]
 8005472:	4953      	ldr	r1, [pc, #332]	; (80055c0 <HAL_RCC_ClockConfig+0x244>)
 8005474:	4313      	orrs	r3, r2
 8005476:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0302 	and.w	r3, r3, #2
 8005480:	2b00      	cmp	r3, #0
 8005482:	d010      	beq.n	80054a6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	68da      	ldr	r2, [r3, #12]
 8005488:	4b4d      	ldr	r3, [pc, #308]	; (80055c0 <HAL_RCC_ClockConfig+0x244>)
 800548a:	699b      	ldr	r3, [r3, #24]
 800548c:	f003 030f 	and.w	r3, r3, #15
 8005490:	429a      	cmp	r2, r3
 8005492:	d908      	bls.n	80054a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005494:	4b4a      	ldr	r3, [pc, #296]	; (80055c0 <HAL_RCC_ClockConfig+0x244>)
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	f023 020f 	bic.w	r2, r3, #15
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	4947      	ldr	r1, [pc, #284]	; (80055c0 <HAL_RCC_ClockConfig+0x244>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0301 	and.w	r3, r3, #1
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d055      	beq.n	800555e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80054b2:	4b43      	ldr	r3, [pc, #268]	; (80055c0 <HAL_RCC_ClockConfig+0x244>)
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	4940      	ldr	r1, [pc, #256]	; (80055c0 <HAL_RCC_ClockConfig+0x244>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d107      	bne.n	80054dc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80054cc:	4b3c      	ldr	r3, [pc, #240]	; (80055c0 <HAL_RCC_ClockConfig+0x244>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d121      	bne.n	800551c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e0f6      	b.n	80056ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	2b03      	cmp	r3, #3
 80054e2:	d107      	bne.n	80054f4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80054e4:	4b36      	ldr	r3, [pc, #216]	; (80055c0 <HAL_RCC_ClockConfig+0x244>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d115      	bne.n	800551c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e0ea      	b.n	80056ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d107      	bne.n	800550c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80054fc:	4b30      	ldr	r3, [pc, #192]	; (80055c0 <HAL_RCC_ClockConfig+0x244>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005504:	2b00      	cmp	r3, #0
 8005506:	d109      	bne.n	800551c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e0de      	b.n	80056ca <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800550c:	4b2c      	ldr	r3, [pc, #176]	; (80055c0 <HAL_RCC_ClockConfig+0x244>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0304 	and.w	r3, r3, #4
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e0d6      	b.n	80056ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800551c:	4b28      	ldr	r3, [pc, #160]	; (80055c0 <HAL_RCC_ClockConfig+0x244>)
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	f023 0207 	bic.w	r2, r3, #7
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	4925      	ldr	r1, [pc, #148]	; (80055c0 <HAL_RCC_ClockConfig+0x244>)
 800552a:	4313      	orrs	r3, r2
 800552c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800552e:	f7fc fc27 	bl	8001d80 <HAL_GetTick>
 8005532:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005534:	e00a      	b.n	800554c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005536:	f7fc fc23 	bl	8001d80 <HAL_GetTick>
 800553a:	4602      	mov	r2, r0
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	f241 3288 	movw	r2, #5000	; 0x1388
 8005544:	4293      	cmp	r3, r2
 8005546:	d901      	bls.n	800554c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005548:	2303      	movs	r3, #3
 800554a:	e0be      	b.n	80056ca <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800554c:	4b1c      	ldr	r3, [pc, #112]	; (80055c0 <HAL_RCC_ClockConfig+0x244>)
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	00db      	lsls	r3, r3, #3
 800555a:	429a      	cmp	r2, r3
 800555c:	d1eb      	bne.n	8005536 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0302 	and.w	r3, r3, #2
 8005566:	2b00      	cmp	r3, #0
 8005568:	d010      	beq.n	800558c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	68da      	ldr	r2, [r3, #12]
 800556e:	4b14      	ldr	r3, [pc, #80]	; (80055c0 <HAL_RCC_ClockConfig+0x244>)
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	f003 030f 	and.w	r3, r3, #15
 8005576:	429a      	cmp	r2, r3
 8005578:	d208      	bcs.n	800558c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800557a:	4b11      	ldr	r3, [pc, #68]	; (80055c0 <HAL_RCC_ClockConfig+0x244>)
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	f023 020f 	bic.w	r2, r3, #15
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	490e      	ldr	r1, [pc, #56]	; (80055c0 <HAL_RCC_ClockConfig+0x244>)
 8005588:	4313      	orrs	r3, r2
 800558a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800558c:	4b0b      	ldr	r3, [pc, #44]	; (80055bc <HAL_RCC_ClockConfig+0x240>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 030f 	and.w	r3, r3, #15
 8005594:	683a      	ldr	r2, [r7, #0]
 8005596:	429a      	cmp	r2, r3
 8005598:	d214      	bcs.n	80055c4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800559a:	4b08      	ldr	r3, [pc, #32]	; (80055bc <HAL_RCC_ClockConfig+0x240>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f023 020f 	bic.w	r2, r3, #15
 80055a2:	4906      	ldr	r1, [pc, #24]	; (80055bc <HAL_RCC_ClockConfig+0x240>)
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055aa:	4b04      	ldr	r3, [pc, #16]	; (80055bc <HAL_RCC_ClockConfig+0x240>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 030f 	and.w	r3, r3, #15
 80055b2:	683a      	ldr	r2, [r7, #0]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d005      	beq.n	80055c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e086      	b.n	80056ca <HAL_RCC_ClockConfig+0x34e>
 80055bc:	52002000 	.word	0x52002000
 80055c0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0304 	and.w	r3, r3, #4
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d010      	beq.n	80055f2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	691a      	ldr	r2, [r3, #16]
 80055d4:	4b3f      	ldr	r3, [pc, #252]	; (80056d4 <HAL_RCC_ClockConfig+0x358>)
 80055d6:	699b      	ldr	r3, [r3, #24]
 80055d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80055dc:	429a      	cmp	r2, r3
 80055de:	d208      	bcs.n	80055f2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80055e0:	4b3c      	ldr	r3, [pc, #240]	; (80056d4 <HAL_RCC_ClockConfig+0x358>)
 80055e2:	699b      	ldr	r3, [r3, #24]
 80055e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	4939      	ldr	r1, [pc, #228]	; (80056d4 <HAL_RCC_ClockConfig+0x358>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0308 	and.w	r3, r3, #8
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d010      	beq.n	8005620 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	695a      	ldr	r2, [r3, #20]
 8005602:	4b34      	ldr	r3, [pc, #208]	; (80056d4 <HAL_RCC_ClockConfig+0x358>)
 8005604:	69db      	ldr	r3, [r3, #28]
 8005606:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800560a:	429a      	cmp	r2, r3
 800560c:	d208      	bcs.n	8005620 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800560e:	4b31      	ldr	r3, [pc, #196]	; (80056d4 <HAL_RCC_ClockConfig+0x358>)
 8005610:	69db      	ldr	r3, [r3, #28]
 8005612:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	492e      	ldr	r1, [pc, #184]	; (80056d4 <HAL_RCC_ClockConfig+0x358>)
 800561c:	4313      	orrs	r3, r2
 800561e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0310 	and.w	r3, r3, #16
 8005628:	2b00      	cmp	r3, #0
 800562a:	d010      	beq.n	800564e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	699a      	ldr	r2, [r3, #24]
 8005630:	4b28      	ldr	r3, [pc, #160]	; (80056d4 <HAL_RCC_ClockConfig+0x358>)
 8005632:	69db      	ldr	r3, [r3, #28]
 8005634:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005638:	429a      	cmp	r2, r3
 800563a:	d208      	bcs.n	800564e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800563c:	4b25      	ldr	r3, [pc, #148]	; (80056d4 <HAL_RCC_ClockConfig+0x358>)
 800563e:	69db      	ldr	r3, [r3, #28]
 8005640:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	699b      	ldr	r3, [r3, #24]
 8005648:	4922      	ldr	r1, [pc, #136]	; (80056d4 <HAL_RCC_ClockConfig+0x358>)
 800564a:	4313      	orrs	r3, r2
 800564c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0320 	and.w	r3, r3, #32
 8005656:	2b00      	cmp	r3, #0
 8005658:	d010      	beq.n	800567c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	69da      	ldr	r2, [r3, #28]
 800565e:	4b1d      	ldr	r3, [pc, #116]	; (80056d4 <HAL_RCC_ClockConfig+0x358>)
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005666:	429a      	cmp	r2, r3
 8005668:	d208      	bcs.n	800567c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800566a:	4b1a      	ldr	r3, [pc, #104]	; (80056d4 <HAL_RCC_ClockConfig+0x358>)
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	69db      	ldr	r3, [r3, #28]
 8005676:	4917      	ldr	r1, [pc, #92]	; (80056d4 <HAL_RCC_ClockConfig+0x358>)
 8005678:	4313      	orrs	r3, r2
 800567a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800567c:	f000 f834 	bl	80056e8 <HAL_RCC_GetSysClockFreq>
 8005680:	4602      	mov	r2, r0
 8005682:	4b14      	ldr	r3, [pc, #80]	; (80056d4 <HAL_RCC_ClockConfig+0x358>)
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	0a1b      	lsrs	r3, r3, #8
 8005688:	f003 030f 	and.w	r3, r3, #15
 800568c:	4912      	ldr	r1, [pc, #72]	; (80056d8 <HAL_RCC_ClockConfig+0x35c>)
 800568e:	5ccb      	ldrb	r3, [r1, r3]
 8005690:	f003 031f 	and.w	r3, r3, #31
 8005694:	fa22 f303 	lsr.w	r3, r2, r3
 8005698:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800569a:	4b0e      	ldr	r3, [pc, #56]	; (80056d4 <HAL_RCC_ClockConfig+0x358>)
 800569c:	699b      	ldr	r3, [r3, #24]
 800569e:	f003 030f 	and.w	r3, r3, #15
 80056a2:	4a0d      	ldr	r2, [pc, #52]	; (80056d8 <HAL_RCC_ClockConfig+0x35c>)
 80056a4:	5cd3      	ldrb	r3, [r2, r3]
 80056a6:	f003 031f 	and.w	r3, r3, #31
 80056aa:	693a      	ldr	r2, [r7, #16]
 80056ac:	fa22 f303 	lsr.w	r3, r2, r3
 80056b0:	4a0a      	ldr	r2, [pc, #40]	; (80056dc <HAL_RCC_ClockConfig+0x360>)
 80056b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80056b4:	4a0a      	ldr	r2, [pc, #40]	; (80056e0 <HAL_RCC_ClockConfig+0x364>)
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80056ba:	4b0a      	ldr	r3, [pc, #40]	; (80056e4 <HAL_RCC_ClockConfig+0x368>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4618      	mov	r0, r3
 80056c0:	f7fc fb14 	bl	8001cec <HAL_InitTick>
 80056c4:	4603      	mov	r3, r0
 80056c6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80056c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3718      	adds	r7, #24
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	58024400 	.word	0x58024400
 80056d8:	0800f1f8 	.word	0x0800f1f8
 80056dc:	24000044 	.word	0x24000044
 80056e0:	24000040 	.word	0x24000040
 80056e4:	24000048 	.word	0x24000048

080056e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b089      	sub	sp, #36	; 0x24
 80056ec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056ee:	4bb3      	ldr	r3, [pc, #716]	; (80059bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056f6:	2b18      	cmp	r3, #24
 80056f8:	f200 8155 	bhi.w	80059a6 <HAL_RCC_GetSysClockFreq+0x2be>
 80056fc:	a201      	add	r2, pc, #4	; (adr r2, 8005704 <HAL_RCC_GetSysClockFreq+0x1c>)
 80056fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005702:	bf00      	nop
 8005704:	08005769 	.word	0x08005769
 8005708:	080059a7 	.word	0x080059a7
 800570c:	080059a7 	.word	0x080059a7
 8005710:	080059a7 	.word	0x080059a7
 8005714:	080059a7 	.word	0x080059a7
 8005718:	080059a7 	.word	0x080059a7
 800571c:	080059a7 	.word	0x080059a7
 8005720:	080059a7 	.word	0x080059a7
 8005724:	0800578f 	.word	0x0800578f
 8005728:	080059a7 	.word	0x080059a7
 800572c:	080059a7 	.word	0x080059a7
 8005730:	080059a7 	.word	0x080059a7
 8005734:	080059a7 	.word	0x080059a7
 8005738:	080059a7 	.word	0x080059a7
 800573c:	080059a7 	.word	0x080059a7
 8005740:	080059a7 	.word	0x080059a7
 8005744:	08005795 	.word	0x08005795
 8005748:	080059a7 	.word	0x080059a7
 800574c:	080059a7 	.word	0x080059a7
 8005750:	080059a7 	.word	0x080059a7
 8005754:	080059a7 	.word	0x080059a7
 8005758:	080059a7 	.word	0x080059a7
 800575c:	080059a7 	.word	0x080059a7
 8005760:	080059a7 	.word	0x080059a7
 8005764:	0800579b 	.word	0x0800579b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005768:	4b94      	ldr	r3, [pc, #592]	; (80059bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0320 	and.w	r3, r3, #32
 8005770:	2b00      	cmp	r3, #0
 8005772:	d009      	beq.n	8005788 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005774:	4b91      	ldr	r3, [pc, #580]	; (80059bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	08db      	lsrs	r3, r3, #3
 800577a:	f003 0303 	and.w	r3, r3, #3
 800577e:	4a90      	ldr	r2, [pc, #576]	; (80059c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005780:	fa22 f303 	lsr.w	r3, r2, r3
 8005784:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005786:	e111      	b.n	80059ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005788:	4b8d      	ldr	r3, [pc, #564]	; (80059c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800578a:	61bb      	str	r3, [r7, #24]
      break;
 800578c:	e10e      	b.n	80059ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800578e:	4b8d      	ldr	r3, [pc, #564]	; (80059c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005790:	61bb      	str	r3, [r7, #24]
      break;
 8005792:	e10b      	b.n	80059ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005794:	4b8c      	ldr	r3, [pc, #560]	; (80059c8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005796:	61bb      	str	r3, [r7, #24]
      break;
 8005798:	e108      	b.n	80059ac <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800579a:	4b88      	ldr	r3, [pc, #544]	; (80059bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800579c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800579e:	f003 0303 	and.w	r3, r3, #3
 80057a2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80057a4:	4b85      	ldr	r3, [pc, #532]	; (80059bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a8:	091b      	lsrs	r3, r3, #4
 80057aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057ae:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80057b0:	4b82      	ldr	r3, [pc, #520]	; (80059bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b4:	f003 0301 	and.w	r3, r3, #1
 80057b8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80057ba:	4b80      	ldr	r3, [pc, #512]	; (80059bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057be:	08db      	lsrs	r3, r3, #3
 80057c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	fb02 f303 	mul.w	r3, r2, r3
 80057ca:	ee07 3a90 	vmov	s15, r3
 80057ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057d2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	f000 80e1 	beq.w	80059a0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	f000 8083 	beq.w	80058ec <HAL_RCC_GetSysClockFreq+0x204>
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	f200 80a1 	bhi.w	8005930 <HAL_RCC_GetSysClockFreq+0x248>
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d003      	beq.n	80057fc <HAL_RCC_GetSysClockFreq+0x114>
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d056      	beq.n	80058a8 <HAL_RCC_GetSysClockFreq+0x1c0>
 80057fa:	e099      	b.n	8005930 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057fc:	4b6f      	ldr	r3, [pc, #444]	; (80059bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0320 	and.w	r3, r3, #32
 8005804:	2b00      	cmp	r3, #0
 8005806:	d02d      	beq.n	8005864 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005808:	4b6c      	ldr	r3, [pc, #432]	; (80059bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	08db      	lsrs	r3, r3, #3
 800580e:	f003 0303 	and.w	r3, r3, #3
 8005812:	4a6b      	ldr	r2, [pc, #428]	; (80059c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005814:	fa22 f303 	lsr.w	r3, r2, r3
 8005818:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	ee07 3a90 	vmov	s15, r3
 8005820:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	ee07 3a90 	vmov	s15, r3
 800582a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800582e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005832:	4b62      	ldr	r3, [pc, #392]	; (80059bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800583a:	ee07 3a90 	vmov	s15, r3
 800583e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005842:	ed97 6a02 	vldr	s12, [r7, #8]
 8005846:	eddf 5a61 	vldr	s11, [pc, #388]	; 80059cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800584a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800584e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005852:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005856:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800585a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800585e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005862:	e087      	b.n	8005974 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	ee07 3a90 	vmov	s15, r3
 800586a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800586e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80059d0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005876:	4b51      	ldr	r3, [pc, #324]	; (80059bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800587a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800587e:	ee07 3a90 	vmov	s15, r3
 8005882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005886:	ed97 6a02 	vldr	s12, [r7, #8]
 800588a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80059cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800588e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005892:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005896:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800589a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800589e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80058a6:	e065      	b.n	8005974 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	ee07 3a90 	vmov	s15, r3
 80058ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058b2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80059d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80058b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058ba:	4b40      	ldr	r3, [pc, #256]	; (80059bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058c2:	ee07 3a90 	vmov	s15, r3
 80058c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80058ce:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80059cc <HAL_RCC_GetSysClockFreq+0x2e4>
 80058d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80058ea:	e043      	b.n	8005974 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	ee07 3a90 	vmov	s15, r3
 80058f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058f6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80059d8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80058fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058fe:	4b2f      	ldr	r3, [pc, #188]	; (80059bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005906:	ee07 3a90 	vmov	s15, r3
 800590a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800590e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005912:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80059cc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800591a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800591e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800592a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800592e:	e021      	b.n	8005974 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	ee07 3a90 	vmov	s15, r3
 8005936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800593a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80059d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800593e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005942:	4b1e      	ldr	r3, [pc, #120]	; (80059bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800594a:	ee07 3a90 	vmov	s15, r3
 800594e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005952:	ed97 6a02 	vldr	s12, [r7, #8]
 8005956:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80059cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800595a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800595e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005962:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800596a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800596e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005972:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005974:	4b11      	ldr	r3, [pc, #68]	; (80059bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005978:	0a5b      	lsrs	r3, r3, #9
 800597a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800597e:	3301      	adds	r3, #1
 8005980:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	ee07 3a90 	vmov	s15, r3
 8005988:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800598c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005990:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005994:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005998:	ee17 3a90 	vmov	r3, s15
 800599c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800599e:	e005      	b.n	80059ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80059a0:	2300      	movs	r3, #0
 80059a2:	61bb      	str	r3, [r7, #24]
      break;
 80059a4:	e002      	b.n	80059ac <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80059a6:	4b07      	ldr	r3, [pc, #28]	; (80059c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80059a8:	61bb      	str	r3, [r7, #24]
      break;
 80059aa:	bf00      	nop
  }

  return sysclockfreq;
 80059ac:	69bb      	ldr	r3, [r7, #24]
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3724      	adds	r7, #36	; 0x24
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	58024400 	.word	0x58024400
 80059c0:	03d09000 	.word	0x03d09000
 80059c4:	003d0900 	.word	0x003d0900
 80059c8:	017d7840 	.word	0x017d7840
 80059cc:	46000000 	.word	0x46000000
 80059d0:	4c742400 	.word	0x4c742400
 80059d4:	4a742400 	.word	0x4a742400
 80059d8:	4bbebc20 	.word	0x4bbebc20

080059dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80059e2:	f7ff fe81 	bl	80056e8 <HAL_RCC_GetSysClockFreq>
 80059e6:	4602      	mov	r2, r0
 80059e8:	4b10      	ldr	r3, [pc, #64]	; (8005a2c <HAL_RCC_GetHCLKFreq+0x50>)
 80059ea:	699b      	ldr	r3, [r3, #24]
 80059ec:	0a1b      	lsrs	r3, r3, #8
 80059ee:	f003 030f 	and.w	r3, r3, #15
 80059f2:	490f      	ldr	r1, [pc, #60]	; (8005a30 <HAL_RCC_GetHCLKFreq+0x54>)
 80059f4:	5ccb      	ldrb	r3, [r1, r3]
 80059f6:	f003 031f 	and.w	r3, r3, #31
 80059fa:	fa22 f303 	lsr.w	r3, r2, r3
 80059fe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a00:	4b0a      	ldr	r3, [pc, #40]	; (8005a2c <HAL_RCC_GetHCLKFreq+0x50>)
 8005a02:	699b      	ldr	r3, [r3, #24]
 8005a04:	f003 030f 	and.w	r3, r3, #15
 8005a08:	4a09      	ldr	r2, [pc, #36]	; (8005a30 <HAL_RCC_GetHCLKFreq+0x54>)
 8005a0a:	5cd3      	ldrb	r3, [r2, r3]
 8005a0c:	f003 031f 	and.w	r3, r3, #31
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	fa22 f303 	lsr.w	r3, r2, r3
 8005a16:	4a07      	ldr	r2, [pc, #28]	; (8005a34 <HAL_RCC_GetHCLKFreq+0x58>)
 8005a18:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005a1a:	4a07      	ldr	r2, [pc, #28]	; (8005a38 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005a20:	4b04      	ldr	r3, [pc, #16]	; (8005a34 <HAL_RCC_GetHCLKFreq+0x58>)
 8005a22:	681b      	ldr	r3, [r3, #0]
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3708      	adds	r7, #8
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	58024400 	.word	0x58024400
 8005a30:	0800f1f8 	.word	0x0800f1f8
 8005a34:	24000044 	.word	0x24000044
 8005a38:	24000040 	.word	0x24000040

08005a3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005a40:	f7ff ffcc 	bl	80059dc <HAL_RCC_GetHCLKFreq>
 8005a44:	4602      	mov	r2, r0
 8005a46:	4b06      	ldr	r3, [pc, #24]	; (8005a60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a48:	69db      	ldr	r3, [r3, #28]
 8005a4a:	091b      	lsrs	r3, r3, #4
 8005a4c:	f003 0307 	and.w	r3, r3, #7
 8005a50:	4904      	ldr	r1, [pc, #16]	; (8005a64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a52:	5ccb      	ldrb	r3, [r1, r3]
 8005a54:	f003 031f 	and.w	r3, r3, #31
 8005a58:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	58024400 	.word	0x58024400
 8005a64:	0800f1f8 	.word	0x0800f1f8

08005a68 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a6c:	b0ca      	sub	sp, #296	; 0x128
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a74:	2300      	movs	r3, #0
 8005a76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a88:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005a8c:	2500      	movs	r5, #0
 8005a8e:	ea54 0305 	orrs.w	r3, r4, r5
 8005a92:	d049      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a9a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a9e:	d02f      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005aa0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005aa4:	d828      	bhi.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005aa6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005aaa:	d01a      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005aac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ab0:	d822      	bhi.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d003      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005ab6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005aba:	d007      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005abc:	e01c      	b.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005abe:	4bb8      	ldr	r3, [pc, #736]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac2:	4ab7      	ldr	r2, [pc, #732]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ac8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005aca:	e01a      	b.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ad0:	3308      	adds	r3, #8
 8005ad2:	2102      	movs	r1, #2
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f002 fb61 	bl	800819c <RCCEx_PLL2_Config>
 8005ada:	4603      	mov	r3, r0
 8005adc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005ae0:	e00f      	b.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ae6:	3328      	adds	r3, #40	; 0x28
 8005ae8:	2102      	movs	r1, #2
 8005aea:	4618      	mov	r0, r3
 8005aec:	f002 fc08 	bl	8008300 <RCCEx_PLL3_Config>
 8005af0:	4603      	mov	r3, r0
 8005af2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005af6:	e004      	b.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005afe:	e000      	b.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005b00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d10a      	bne.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005b0a:	4ba5      	ldr	r3, [pc, #660]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b0e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b18:	4aa1      	ldr	r2, [pc, #644]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b1a:	430b      	orrs	r3, r1
 8005b1c:	6513      	str	r3, [r2, #80]	; 0x50
 8005b1e:	e003      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b30:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005b34:	f04f 0900 	mov.w	r9, #0
 8005b38:	ea58 0309 	orrs.w	r3, r8, r9
 8005b3c:	d047      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b44:	2b04      	cmp	r3, #4
 8005b46:	d82a      	bhi.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005b48:	a201      	add	r2, pc, #4	; (adr r2, 8005b50 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b4e:	bf00      	nop
 8005b50:	08005b65 	.word	0x08005b65
 8005b54:	08005b73 	.word	0x08005b73
 8005b58:	08005b89 	.word	0x08005b89
 8005b5c:	08005ba7 	.word	0x08005ba7
 8005b60:	08005ba7 	.word	0x08005ba7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b64:	4b8e      	ldr	r3, [pc, #568]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b68:	4a8d      	ldr	r2, [pc, #564]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b70:	e01a      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b76:	3308      	adds	r3, #8
 8005b78:	2100      	movs	r1, #0
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f002 fb0e 	bl	800819c <RCCEx_PLL2_Config>
 8005b80:	4603      	mov	r3, r0
 8005b82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b86:	e00f      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b8c:	3328      	adds	r3, #40	; 0x28
 8005b8e:	2100      	movs	r1, #0
 8005b90:	4618      	mov	r0, r3
 8005b92:	f002 fbb5 	bl	8008300 <RCCEx_PLL3_Config>
 8005b96:	4603      	mov	r3, r0
 8005b98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b9c:	e004      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005ba4:	e000      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005ba6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ba8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d10a      	bne.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005bb0:	4b7b      	ldr	r3, [pc, #492]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005bb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bb4:	f023 0107 	bic.w	r1, r3, #7
 8005bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bbe:	4a78      	ldr	r2, [pc, #480]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005bc0:	430b      	orrs	r3, r1
 8005bc2:	6513      	str	r3, [r2, #80]	; 0x50
 8005bc4:	e003      	b.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8005bda:	f04f 0b00 	mov.w	fp, #0
 8005bde:	ea5a 030b 	orrs.w	r3, sl, fp
 8005be2:	d04c      	beq.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bee:	d030      	beq.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005bf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bf4:	d829      	bhi.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005bf6:	2bc0      	cmp	r3, #192	; 0xc0
 8005bf8:	d02d      	beq.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005bfa:	2bc0      	cmp	r3, #192	; 0xc0
 8005bfc:	d825      	bhi.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005bfe:	2b80      	cmp	r3, #128	; 0x80
 8005c00:	d018      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005c02:	2b80      	cmp	r3, #128	; 0x80
 8005c04:	d821      	bhi.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d002      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005c0a:	2b40      	cmp	r3, #64	; 0x40
 8005c0c:	d007      	beq.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005c0e:	e01c      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c10:	4b63      	ldr	r3, [pc, #396]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c14:	4a62      	ldr	r2, [pc, #392]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005c1c:	e01c      	b.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c22:	3308      	adds	r3, #8
 8005c24:	2100      	movs	r1, #0
 8005c26:	4618      	mov	r0, r3
 8005c28:	f002 fab8 	bl	800819c <RCCEx_PLL2_Config>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005c32:	e011      	b.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c38:	3328      	adds	r3, #40	; 0x28
 8005c3a:	2100      	movs	r1, #0
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f002 fb5f 	bl	8008300 <RCCEx_PLL3_Config>
 8005c42:	4603      	mov	r3, r0
 8005c44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005c48:	e006      	b.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005c50:	e002      	b.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005c52:	bf00      	nop
 8005c54:	e000      	b.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005c56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d10a      	bne.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005c60:	4b4f      	ldr	r3, [pc, #316]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c64:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c6e:	4a4c      	ldr	r2, [pc, #304]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c70:	430b      	orrs	r3, r1
 8005c72:	6513      	str	r3, [r2, #80]	; 0x50
 8005c74:	e003      	b.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c86:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005c8a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005c8e:	2300      	movs	r3, #0
 8005c90:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005c94:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8005c98:	460b      	mov	r3, r1
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	d053      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ca2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005ca6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005caa:	d035      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005cac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005cb0:	d82e      	bhi.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005cb2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005cb6:	d031      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005cb8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005cbc:	d828      	bhi.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005cbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cc2:	d01a      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005cc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cc8:	d822      	bhi.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d003      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005cce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005cd2:	d007      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005cd4:	e01c      	b.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cd6:	4b32      	ldr	r3, [pc, #200]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cda:	4a31      	ldr	r2, [pc, #196]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ce0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ce2:	e01c      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ce8:	3308      	adds	r3, #8
 8005cea:	2100      	movs	r1, #0
 8005cec:	4618      	mov	r0, r3
 8005cee:	f002 fa55 	bl	800819c <RCCEx_PLL2_Config>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005cf8:	e011      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cfe:	3328      	adds	r3, #40	; 0x28
 8005d00:	2100      	movs	r1, #0
 8005d02:	4618      	mov	r0, r3
 8005d04:	f002 fafc 	bl	8008300 <RCCEx_PLL3_Config>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d0e:	e006      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005d16:	e002      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005d18:	bf00      	nop
 8005d1a:	e000      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005d1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d10b      	bne.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005d26:	4b1e      	ldr	r3, [pc, #120]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d2a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8005d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d32:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005d36:	4a1a      	ldr	r2, [pc, #104]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d38:	430b      	orrs	r3, r1
 8005d3a:	6593      	str	r3, [r2, #88]	; 0x58
 8005d3c:	e003      	b.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d42:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d4e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005d52:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005d56:	2300      	movs	r3, #0
 8005d58:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005d5c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8005d60:	460b      	mov	r3, r1
 8005d62:	4313      	orrs	r3, r2
 8005d64:	d056      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d6a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005d6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d72:	d038      	beq.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005d74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d78:	d831      	bhi.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005d7a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005d7e:	d034      	beq.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005d80:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005d84:	d82b      	bhi.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005d86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d8a:	d01d      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005d8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d90:	d825      	bhi.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d006      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005d96:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d9a:	d00a      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005d9c:	e01f      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005d9e:	bf00      	nop
 8005da0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005da4:	4ba2      	ldr	r3, [pc, #648]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da8:	4aa1      	ldr	r2, [pc, #644]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005daa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005db0:	e01c      	b.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005db6:	3308      	adds	r3, #8
 8005db8:	2100      	movs	r1, #0
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f002 f9ee 	bl	800819c <RCCEx_PLL2_Config>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005dc6:	e011      	b.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dcc:	3328      	adds	r3, #40	; 0x28
 8005dce:	2100      	movs	r1, #0
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f002 fa95 	bl	8008300 <RCCEx_PLL3_Config>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ddc:	e006      	b.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005de4:	e002      	b.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005de6:	bf00      	nop
 8005de8:	e000      	b.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005dea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d10b      	bne.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005df4:	4b8e      	ldr	r3, [pc, #568]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005df8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e00:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005e04:	4a8a      	ldr	r2, [pc, #552]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e06:	430b      	orrs	r3, r1
 8005e08:	6593      	str	r3, [r2, #88]	; 0x58
 8005e0a:	e003      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e10:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005e20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e24:	2300      	movs	r3, #0
 8005e26:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005e2a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005e2e:	460b      	mov	r3, r1
 8005e30:	4313      	orrs	r3, r2
 8005e32:	d03a      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e3a:	2b30      	cmp	r3, #48	; 0x30
 8005e3c:	d01f      	beq.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005e3e:	2b30      	cmp	r3, #48	; 0x30
 8005e40:	d819      	bhi.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005e42:	2b20      	cmp	r3, #32
 8005e44:	d00c      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005e46:	2b20      	cmp	r3, #32
 8005e48:	d815      	bhi.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d019      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005e4e:	2b10      	cmp	r3, #16
 8005e50:	d111      	bne.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e52:	4b77      	ldr	r3, [pc, #476]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e56:	4a76      	ldr	r2, [pc, #472]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005e5e:	e011      	b.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e64:	3308      	adds	r3, #8
 8005e66:	2102      	movs	r1, #2
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f002 f997 	bl	800819c <RCCEx_PLL2_Config>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005e74:	e006      	b.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005e7c:	e002      	b.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005e7e:	bf00      	nop
 8005e80:	e000      	b.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005e82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d10a      	bne.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005e8c:	4b68      	ldr	r3, [pc, #416]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e90:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e9a:	4a65      	ldr	r2, [pc, #404]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e9c:	430b      	orrs	r3, r1
 8005e9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005ea0:	e003      	b.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ea2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ea6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005eb6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005eba:	2300      	movs	r3, #0
 8005ebc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005ec0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	d051      	beq.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ed0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ed4:	d035      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005ed6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005eda:	d82e      	bhi.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005edc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005ee0:	d031      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005ee2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005ee6:	d828      	bhi.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005ee8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eec:	d01a      	beq.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005eee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ef2:	d822      	bhi.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d003      	beq.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005ef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005efc:	d007      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005efe:	e01c      	b.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f00:	4b4b      	ldr	r3, [pc, #300]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f04:	4a4a      	ldr	r2, [pc, #296]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005f0c:	e01c      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f12:	3308      	adds	r3, #8
 8005f14:	2100      	movs	r1, #0
 8005f16:	4618      	mov	r0, r3
 8005f18:	f002 f940 	bl	800819c <RCCEx_PLL2_Config>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005f22:	e011      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f28:	3328      	adds	r3, #40	; 0x28
 8005f2a:	2100      	movs	r1, #0
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f002 f9e7 	bl	8008300 <RCCEx_PLL3_Config>
 8005f32:	4603      	mov	r3, r0
 8005f34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005f38:	e006      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005f40:	e002      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005f42:	bf00      	nop
 8005f44:	e000      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005f46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d10a      	bne.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005f50:	4b37      	ldr	r3, [pc, #220]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f54:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f5e:	4a34      	ldr	r2, [pc, #208]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f60:	430b      	orrs	r3, r1
 8005f62:	6513      	str	r3, [r2, #80]	; 0x50
 8005f64:	e003      	b.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f76:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005f7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f7e:	2300      	movs	r3, #0
 8005f80:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005f84:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005f88:	460b      	mov	r3, r1
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	d056      	beq.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f98:	d033      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005f9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f9e:	d82c      	bhi.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005fa0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005fa4:	d02f      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005fa6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005faa:	d826      	bhi.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005fac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005fb0:	d02b      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005fb2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005fb6:	d820      	bhi.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005fb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fbc:	d012      	beq.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005fbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fc2:	d81a      	bhi.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d022      	beq.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fcc:	d115      	bne.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fd2:	3308      	adds	r3, #8
 8005fd4:	2101      	movs	r1, #1
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f002 f8e0 	bl	800819c <RCCEx_PLL2_Config>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005fe2:	e015      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fe8:	3328      	adds	r3, #40	; 0x28
 8005fea:	2101      	movs	r1, #1
 8005fec:	4618      	mov	r0, r3
 8005fee:	f002 f987 	bl	8008300 <RCCEx_PLL3_Config>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005ff8:	e00a      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006000:	e006      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006002:	bf00      	nop
 8006004:	e004      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006006:	bf00      	nop
 8006008:	e002      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800600a:	bf00      	nop
 800600c:	e000      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800600e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006010:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10d      	bne.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006018:	4b05      	ldr	r3, [pc, #20]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800601a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800601c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006020:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006024:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006026:	4a02      	ldr	r2, [pc, #8]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006028:	430b      	orrs	r3, r1
 800602a:	6513      	str	r3, [r2, #80]	; 0x50
 800602c:	e006      	b.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800602e:	bf00      	nop
 8006030:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006034:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006038:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800603c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006044:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006048:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800604c:	2300      	movs	r3, #0
 800604e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006052:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006056:	460b      	mov	r3, r1
 8006058:	4313      	orrs	r3, r2
 800605a:	d055      	beq.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800605c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006060:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006064:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006068:	d033      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800606a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800606e:	d82c      	bhi.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006074:	d02f      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800607a:	d826      	bhi.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 800607c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006080:	d02b      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006082:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006086:	d820      	bhi.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006088:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800608c:	d012      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800608e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006092:	d81a      	bhi.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006094:	2b00      	cmp	r3, #0
 8006096:	d022      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006098:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800609c:	d115      	bne.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800609e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060a2:	3308      	adds	r3, #8
 80060a4:	2101      	movs	r1, #1
 80060a6:	4618      	mov	r0, r3
 80060a8:	f002 f878 	bl	800819c <RCCEx_PLL2_Config>
 80060ac:	4603      	mov	r3, r0
 80060ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80060b2:	e015      	b.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80060b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060b8:	3328      	adds	r3, #40	; 0x28
 80060ba:	2101      	movs	r1, #1
 80060bc:	4618      	mov	r0, r3
 80060be:	f002 f91f 	bl	8008300 <RCCEx_PLL3_Config>
 80060c2:	4603      	mov	r3, r0
 80060c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80060c8:	e00a      	b.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80060d0:	e006      	b.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80060d2:	bf00      	nop
 80060d4:	e004      	b.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80060d6:	bf00      	nop
 80060d8:	e002      	b.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80060da:	bf00      	nop
 80060dc:	e000      	b.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80060de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d10b      	bne.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80060e8:	4ba3      	ldr	r3, [pc, #652]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ec:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80060f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80060f8:	4a9f      	ldr	r2, [pc, #636]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060fa:	430b      	orrs	r3, r1
 80060fc:	6593      	str	r3, [r2, #88]	; 0x58
 80060fe:	e003      	b.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006100:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006104:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006108:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800610c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006110:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006114:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006118:	2300      	movs	r3, #0
 800611a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800611e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006122:	460b      	mov	r3, r1
 8006124:	4313      	orrs	r3, r2
 8006126:	d037      	beq.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006128:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800612c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800612e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006132:	d00e      	beq.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006134:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006138:	d816      	bhi.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800613a:	2b00      	cmp	r3, #0
 800613c:	d018      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800613e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006142:	d111      	bne.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006144:	4b8c      	ldr	r3, [pc, #560]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006148:	4a8b      	ldr	r2, [pc, #556]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800614a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800614e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006150:	e00f      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006152:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006156:	3308      	adds	r3, #8
 8006158:	2101      	movs	r1, #1
 800615a:	4618      	mov	r0, r3
 800615c:	f002 f81e 	bl	800819c <RCCEx_PLL2_Config>
 8006160:	4603      	mov	r3, r0
 8006162:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006166:	e004      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800616e:	e000      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006170:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006172:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10a      	bne.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800617a:	4b7f      	ldr	r3, [pc, #508]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800617c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800617e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006182:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006188:	4a7b      	ldr	r2, [pc, #492]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800618a:	430b      	orrs	r3, r1
 800618c:	6513      	str	r3, [r2, #80]	; 0x50
 800618e:	e003      	b.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006190:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006194:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006198:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800619c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80061a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80061a8:	2300      	movs	r3, #0
 80061aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80061ae:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80061b2:	460b      	mov	r3, r1
 80061b4:	4313      	orrs	r3, r2
 80061b6:	d039      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80061b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061be:	2b03      	cmp	r3, #3
 80061c0:	d81c      	bhi.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x794>
 80061c2:	a201      	add	r2, pc, #4	; (adr r2, 80061c8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80061c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c8:	08006205 	.word	0x08006205
 80061cc:	080061d9 	.word	0x080061d9
 80061d0:	080061e7 	.word	0x080061e7
 80061d4:	08006205 	.word	0x08006205
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061d8:	4b67      	ldr	r3, [pc, #412]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061dc:	4a66      	ldr	r2, [pc, #408]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80061e4:	e00f      	b.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80061e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061ea:	3308      	adds	r3, #8
 80061ec:	2102      	movs	r1, #2
 80061ee:	4618      	mov	r0, r3
 80061f0:	f001 ffd4 	bl	800819c <RCCEx_PLL2_Config>
 80061f4:	4603      	mov	r3, r0
 80061f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80061fa:	e004      	b.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006202:	e000      	b.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006204:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006206:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800620a:	2b00      	cmp	r3, #0
 800620c:	d10a      	bne.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800620e:	4b5a      	ldr	r3, [pc, #360]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006212:	f023 0103 	bic.w	r1, r3, #3
 8006216:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800621a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800621c:	4a56      	ldr	r2, [pc, #344]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800621e:	430b      	orrs	r3, r1
 8006220:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006222:	e003      	b.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006224:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006228:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800622c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006234:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006238:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800623c:	2300      	movs	r3, #0
 800623e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006242:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8006246:	460b      	mov	r3, r1
 8006248:	4313      	orrs	r3, r2
 800624a:	f000 809f 	beq.w	800638c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800624e:	4b4b      	ldr	r3, [pc, #300]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a4a      	ldr	r2, [pc, #296]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006258:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800625a:	f7fb fd91 	bl	8001d80 <HAL_GetTick>
 800625e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006262:	e00b      	b.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006264:	f7fb fd8c 	bl	8001d80 <HAL_GetTick>
 8006268:	4602      	mov	r2, r0
 800626a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800626e:	1ad3      	subs	r3, r2, r3
 8006270:	2b64      	cmp	r3, #100	; 0x64
 8006272:	d903      	bls.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006274:	2303      	movs	r3, #3
 8006276:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800627a:	e005      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800627c:	4b3f      	ldr	r3, [pc, #252]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006284:	2b00      	cmp	r3, #0
 8006286:	d0ed      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006288:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800628c:	2b00      	cmp	r3, #0
 800628e:	d179      	bne.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006290:	4b39      	ldr	r3, [pc, #228]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006292:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006294:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006298:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800629c:	4053      	eors	r3, r2
 800629e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d015      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80062a6:	4b34      	ldr	r3, [pc, #208]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062ae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80062b2:	4b31      	ldr	r3, [pc, #196]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062b6:	4a30      	ldr	r2, [pc, #192]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062bc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80062be:	4b2e      	ldr	r3, [pc, #184]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062c2:	4a2d      	ldr	r2, [pc, #180]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062c8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80062ca:	4a2b      	ldr	r2, [pc, #172]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80062d0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80062d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80062da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062de:	d118      	bne.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062e0:	f7fb fd4e 	bl	8001d80 <HAL_GetTick>
 80062e4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062e8:	e00d      	b.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062ea:	f7fb fd49 	bl	8001d80 <HAL_GetTick>
 80062ee:	4602      	mov	r2, r0
 80062f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80062f4:	1ad2      	subs	r2, r2, r3
 80062f6:	f241 3388 	movw	r3, #5000	; 0x1388
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d903      	bls.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80062fe:	2303      	movs	r3, #3
 8006300:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8006304:	e005      	b.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006306:	4b1c      	ldr	r3, [pc, #112]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800630a:	f003 0302 	and.w	r3, r3, #2
 800630e:	2b00      	cmp	r3, #0
 8006310:	d0eb      	beq.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006312:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006316:	2b00      	cmp	r3, #0
 8006318:	d129      	bne.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800631a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800631e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006322:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006326:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800632a:	d10e      	bne.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800632c:	4b12      	ldr	r3, [pc, #72]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800632e:	691b      	ldr	r3, [r3, #16]
 8006330:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006334:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006338:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800633c:	091a      	lsrs	r2, r3, #4
 800633e:	4b10      	ldr	r3, [pc, #64]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006340:	4013      	ands	r3, r2
 8006342:	4a0d      	ldr	r2, [pc, #52]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006344:	430b      	orrs	r3, r1
 8006346:	6113      	str	r3, [r2, #16]
 8006348:	e005      	b.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800634a:	4b0b      	ldr	r3, [pc, #44]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	4a0a      	ldr	r2, [pc, #40]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006350:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006354:	6113      	str	r3, [r2, #16]
 8006356:	4b08      	ldr	r3, [pc, #32]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006358:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800635a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800635e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006362:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006366:	4a04      	ldr	r2, [pc, #16]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006368:	430b      	orrs	r3, r1
 800636a:	6713      	str	r3, [r2, #112]	; 0x70
 800636c:	e00e      	b.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800636e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006372:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8006376:	e009      	b.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006378:	58024400 	.word	0x58024400
 800637c:	58024800 	.word	0x58024800
 8006380:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006384:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006388:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800638c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006394:	f002 0301 	and.w	r3, r2, #1
 8006398:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800639c:	2300      	movs	r3, #0
 800639e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80063a2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80063a6:	460b      	mov	r3, r1
 80063a8:	4313      	orrs	r3, r2
 80063aa:	f000 8089 	beq.w	80064c0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80063ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063b4:	2b28      	cmp	r3, #40	; 0x28
 80063b6:	d86b      	bhi.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80063b8:	a201      	add	r2, pc, #4	; (adr r2, 80063c0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80063ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063be:	bf00      	nop
 80063c0:	08006499 	.word	0x08006499
 80063c4:	08006491 	.word	0x08006491
 80063c8:	08006491 	.word	0x08006491
 80063cc:	08006491 	.word	0x08006491
 80063d0:	08006491 	.word	0x08006491
 80063d4:	08006491 	.word	0x08006491
 80063d8:	08006491 	.word	0x08006491
 80063dc:	08006491 	.word	0x08006491
 80063e0:	08006465 	.word	0x08006465
 80063e4:	08006491 	.word	0x08006491
 80063e8:	08006491 	.word	0x08006491
 80063ec:	08006491 	.word	0x08006491
 80063f0:	08006491 	.word	0x08006491
 80063f4:	08006491 	.word	0x08006491
 80063f8:	08006491 	.word	0x08006491
 80063fc:	08006491 	.word	0x08006491
 8006400:	0800647b 	.word	0x0800647b
 8006404:	08006491 	.word	0x08006491
 8006408:	08006491 	.word	0x08006491
 800640c:	08006491 	.word	0x08006491
 8006410:	08006491 	.word	0x08006491
 8006414:	08006491 	.word	0x08006491
 8006418:	08006491 	.word	0x08006491
 800641c:	08006491 	.word	0x08006491
 8006420:	08006499 	.word	0x08006499
 8006424:	08006491 	.word	0x08006491
 8006428:	08006491 	.word	0x08006491
 800642c:	08006491 	.word	0x08006491
 8006430:	08006491 	.word	0x08006491
 8006434:	08006491 	.word	0x08006491
 8006438:	08006491 	.word	0x08006491
 800643c:	08006491 	.word	0x08006491
 8006440:	08006499 	.word	0x08006499
 8006444:	08006491 	.word	0x08006491
 8006448:	08006491 	.word	0x08006491
 800644c:	08006491 	.word	0x08006491
 8006450:	08006491 	.word	0x08006491
 8006454:	08006491 	.word	0x08006491
 8006458:	08006491 	.word	0x08006491
 800645c:	08006491 	.word	0x08006491
 8006460:	08006499 	.word	0x08006499
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006464:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006468:	3308      	adds	r3, #8
 800646a:	2101      	movs	r1, #1
 800646c:	4618      	mov	r0, r3
 800646e:	f001 fe95 	bl	800819c <RCCEx_PLL2_Config>
 8006472:	4603      	mov	r3, r0
 8006474:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006478:	e00f      	b.n	800649a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800647a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800647e:	3328      	adds	r3, #40	; 0x28
 8006480:	2101      	movs	r1, #1
 8006482:	4618      	mov	r0, r3
 8006484:	f001 ff3c 	bl	8008300 <RCCEx_PLL3_Config>
 8006488:	4603      	mov	r3, r0
 800648a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800648e:	e004      	b.n	800649a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006496:	e000      	b.n	800649a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006498:	bf00      	nop
    }

    if (ret == HAL_OK)
 800649a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d10a      	bne.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80064a2:	4bbf      	ldr	r3, [pc, #764]	; (80067a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80064a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064a6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80064aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064b0:	4abb      	ldr	r2, [pc, #748]	; (80067a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80064b2:	430b      	orrs	r3, r1
 80064b4:	6553      	str	r3, [r2, #84]	; 0x54
 80064b6:	e003      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80064c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c8:	f002 0302 	and.w	r3, r2, #2
 80064cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80064d0:	2300      	movs	r3, #0
 80064d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80064d6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80064da:	460b      	mov	r3, r1
 80064dc:	4313      	orrs	r3, r2
 80064de:	d041      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80064e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064e6:	2b05      	cmp	r3, #5
 80064e8:	d824      	bhi.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80064ea:	a201      	add	r2, pc, #4	; (adr r2, 80064f0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80064ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f0:	0800653d 	.word	0x0800653d
 80064f4:	08006509 	.word	0x08006509
 80064f8:	0800651f 	.word	0x0800651f
 80064fc:	0800653d 	.word	0x0800653d
 8006500:	0800653d 	.word	0x0800653d
 8006504:	0800653d 	.word	0x0800653d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006508:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800650c:	3308      	adds	r3, #8
 800650e:	2101      	movs	r1, #1
 8006510:	4618      	mov	r0, r3
 8006512:	f001 fe43 	bl	800819c <RCCEx_PLL2_Config>
 8006516:	4603      	mov	r3, r0
 8006518:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800651c:	e00f      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800651e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006522:	3328      	adds	r3, #40	; 0x28
 8006524:	2101      	movs	r1, #1
 8006526:	4618      	mov	r0, r3
 8006528:	f001 feea 	bl	8008300 <RCCEx_PLL3_Config>
 800652c:	4603      	mov	r3, r0
 800652e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006532:	e004      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800653a:	e000      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800653c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800653e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006542:	2b00      	cmp	r3, #0
 8006544:	d10a      	bne.n	800655c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006546:	4b96      	ldr	r3, [pc, #600]	; (80067a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800654a:	f023 0107 	bic.w	r1, r3, #7
 800654e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006552:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006554:	4a92      	ldr	r2, [pc, #584]	; (80067a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006556:	430b      	orrs	r3, r1
 8006558:	6553      	str	r3, [r2, #84]	; 0x54
 800655a:	e003      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800655c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006560:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006564:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656c:	f002 0304 	and.w	r3, r2, #4
 8006570:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006574:	2300      	movs	r3, #0
 8006576:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800657a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800657e:	460b      	mov	r3, r1
 8006580:	4313      	orrs	r3, r2
 8006582:	d044      	beq.n	800660e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006584:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006588:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800658c:	2b05      	cmp	r3, #5
 800658e:	d825      	bhi.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006590:	a201      	add	r2, pc, #4	; (adr r2, 8006598 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006596:	bf00      	nop
 8006598:	080065e5 	.word	0x080065e5
 800659c:	080065b1 	.word	0x080065b1
 80065a0:	080065c7 	.word	0x080065c7
 80065a4:	080065e5 	.word	0x080065e5
 80065a8:	080065e5 	.word	0x080065e5
 80065ac:	080065e5 	.word	0x080065e5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80065b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065b4:	3308      	adds	r3, #8
 80065b6:	2101      	movs	r1, #1
 80065b8:	4618      	mov	r0, r3
 80065ba:	f001 fdef 	bl	800819c <RCCEx_PLL2_Config>
 80065be:	4603      	mov	r3, r0
 80065c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80065c4:	e00f      	b.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065ca:	3328      	adds	r3, #40	; 0x28
 80065cc:	2101      	movs	r1, #1
 80065ce:	4618      	mov	r0, r3
 80065d0:	f001 fe96 	bl	8008300 <RCCEx_PLL3_Config>
 80065d4:	4603      	mov	r3, r0
 80065d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80065da:	e004      	b.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80065e2:	e000      	b.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80065e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d10b      	bne.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80065ee:	4b6c      	ldr	r3, [pc, #432]	; (80067a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80065f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065f2:	f023 0107 	bic.w	r1, r3, #7
 80065f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065fe:	4a68      	ldr	r2, [pc, #416]	; (80067a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006600:	430b      	orrs	r3, r1
 8006602:	6593      	str	r3, [r2, #88]	; 0x58
 8006604:	e003      	b.n	800660e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006606:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800660a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800660e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006616:	f002 0320 	and.w	r3, r2, #32
 800661a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800661e:	2300      	movs	r3, #0
 8006620:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006624:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006628:	460b      	mov	r3, r1
 800662a:	4313      	orrs	r3, r2
 800662c:	d055      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800662e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006636:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800663a:	d033      	beq.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800663c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006640:	d82c      	bhi.n	800669c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006646:	d02f      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800664c:	d826      	bhi.n	800669c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800664e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006652:	d02b      	beq.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006654:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006658:	d820      	bhi.n	800669c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800665a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800665e:	d012      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006660:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006664:	d81a      	bhi.n	800669c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006666:	2b00      	cmp	r3, #0
 8006668:	d022      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800666a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800666e:	d115      	bne.n	800669c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006670:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006674:	3308      	adds	r3, #8
 8006676:	2100      	movs	r1, #0
 8006678:	4618      	mov	r0, r3
 800667a:	f001 fd8f 	bl	800819c <RCCEx_PLL2_Config>
 800667e:	4603      	mov	r3, r0
 8006680:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006684:	e015      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006686:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800668a:	3328      	adds	r3, #40	; 0x28
 800668c:	2102      	movs	r1, #2
 800668e:	4618      	mov	r0, r3
 8006690:	f001 fe36 	bl	8008300 <RCCEx_PLL3_Config>
 8006694:	4603      	mov	r3, r0
 8006696:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800669a:	e00a      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80066a2:	e006      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80066a4:	bf00      	nop
 80066a6:	e004      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80066a8:	bf00      	nop
 80066aa:	e002      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80066ac:	bf00      	nop
 80066ae:	e000      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80066b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d10b      	bne.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80066ba:	4b39      	ldr	r3, [pc, #228]	; (80067a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80066bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066be:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80066c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066ca:	4a35      	ldr	r2, [pc, #212]	; (80067a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80066cc:	430b      	orrs	r3, r1
 80066ce:	6553      	str	r3, [r2, #84]	; 0x54
 80066d0:	e003      	b.n	80066da <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80066da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80066e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80066ea:	2300      	movs	r3, #0
 80066ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80066f0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80066f4:	460b      	mov	r3, r1
 80066f6:	4313      	orrs	r3, r2
 80066f8:	d058      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80066fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006702:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006706:	d033      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006708:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800670c:	d82c      	bhi.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800670e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006712:	d02f      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006718:	d826      	bhi.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800671a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800671e:	d02b      	beq.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006720:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006724:	d820      	bhi.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006726:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800672a:	d012      	beq.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800672c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006730:	d81a      	bhi.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006732:	2b00      	cmp	r3, #0
 8006734:	d022      	beq.n	800677c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800673a:	d115      	bne.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800673c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006740:	3308      	adds	r3, #8
 8006742:	2100      	movs	r1, #0
 8006744:	4618      	mov	r0, r3
 8006746:	f001 fd29 	bl	800819c <RCCEx_PLL2_Config>
 800674a:	4603      	mov	r3, r0
 800674c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006750:	e015      	b.n	800677e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006752:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006756:	3328      	adds	r3, #40	; 0x28
 8006758:	2102      	movs	r1, #2
 800675a:	4618      	mov	r0, r3
 800675c:	f001 fdd0 	bl	8008300 <RCCEx_PLL3_Config>
 8006760:	4603      	mov	r3, r0
 8006762:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006766:	e00a      	b.n	800677e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800676e:	e006      	b.n	800677e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006770:	bf00      	nop
 8006772:	e004      	b.n	800677e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006774:	bf00      	nop
 8006776:	e002      	b.n	800677e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006778:	bf00      	nop
 800677a:	e000      	b.n	800677e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800677c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800677e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006782:	2b00      	cmp	r3, #0
 8006784:	d10e      	bne.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006786:	4b06      	ldr	r3, [pc, #24]	; (80067a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800678a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800678e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006792:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006796:	4a02      	ldr	r2, [pc, #8]	; (80067a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006798:	430b      	orrs	r3, r1
 800679a:	6593      	str	r3, [r2, #88]	; 0x58
 800679c:	e006      	b.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800679e:	bf00      	nop
 80067a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80067ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80067b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80067bc:	2300      	movs	r3, #0
 80067be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80067c2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80067c6:	460b      	mov	r3, r1
 80067c8:	4313      	orrs	r3, r2
 80067ca:	d055      	beq.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80067cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80067d4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80067d8:	d033      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80067da:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80067de:	d82c      	bhi.n	800683a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80067e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067e4:	d02f      	beq.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80067e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067ea:	d826      	bhi.n	800683a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80067ec:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80067f0:	d02b      	beq.n	800684a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80067f2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80067f6:	d820      	bhi.n	800683a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80067f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067fc:	d012      	beq.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80067fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006802:	d81a      	bhi.n	800683a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006804:	2b00      	cmp	r3, #0
 8006806:	d022      	beq.n	800684e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006808:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800680c:	d115      	bne.n	800683a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800680e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006812:	3308      	adds	r3, #8
 8006814:	2100      	movs	r1, #0
 8006816:	4618      	mov	r0, r3
 8006818:	f001 fcc0 	bl	800819c <RCCEx_PLL2_Config>
 800681c:	4603      	mov	r3, r0
 800681e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006822:	e015      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006824:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006828:	3328      	adds	r3, #40	; 0x28
 800682a:	2102      	movs	r1, #2
 800682c:	4618      	mov	r0, r3
 800682e:	f001 fd67 	bl	8008300 <RCCEx_PLL3_Config>
 8006832:	4603      	mov	r3, r0
 8006834:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006838:	e00a      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006840:	e006      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006842:	bf00      	nop
 8006844:	e004      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006846:	bf00      	nop
 8006848:	e002      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800684a:	bf00      	nop
 800684c:	e000      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800684e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006850:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006854:	2b00      	cmp	r3, #0
 8006856:	d10b      	bne.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006858:	4ba1      	ldr	r3, [pc, #644]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800685a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800685c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006860:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006864:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006868:	4a9d      	ldr	r2, [pc, #628]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800686a:	430b      	orrs	r3, r1
 800686c:	6593      	str	r3, [r2, #88]	; 0x58
 800686e:	e003      	b.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006870:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006874:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006878:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800687c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006880:	f002 0308 	and.w	r3, r2, #8
 8006884:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006888:	2300      	movs	r3, #0
 800688a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800688e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006892:	460b      	mov	r3, r1
 8006894:	4313      	orrs	r3, r2
 8006896:	d01e      	beq.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006898:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800689c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068a4:	d10c      	bne.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80068a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068aa:	3328      	adds	r3, #40	; 0x28
 80068ac:	2102      	movs	r1, #2
 80068ae:	4618      	mov	r0, r3
 80068b0:	f001 fd26 	bl	8008300 <RCCEx_PLL3_Config>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d002      	beq.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80068c0:	4b87      	ldr	r3, [pc, #540]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068c4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80068c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068d0:	4a83      	ldr	r2, [pc, #524]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068d2:	430b      	orrs	r3, r1
 80068d4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80068d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068de:	f002 0310 	and.w	r3, r2, #16
 80068e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80068e6:	2300      	movs	r3, #0
 80068e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80068ec:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80068f0:	460b      	mov	r3, r1
 80068f2:	4313      	orrs	r3, r2
 80068f4:	d01e      	beq.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80068f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80068fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006902:	d10c      	bne.n	800691e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006904:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006908:	3328      	adds	r3, #40	; 0x28
 800690a:	2102      	movs	r1, #2
 800690c:	4618      	mov	r0, r3
 800690e:	f001 fcf7 	bl	8008300 <RCCEx_PLL3_Config>
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d002      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800691e:	4b70      	ldr	r3, [pc, #448]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006922:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006926:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800692a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800692e:	4a6c      	ldr	r2, [pc, #432]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006930:	430b      	orrs	r3, r1
 8006932:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006934:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006940:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006944:	2300      	movs	r3, #0
 8006946:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800694a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800694e:	460b      	mov	r3, r1
 8006950:	4313      	orrs	r3, r2
 8006952:	d03e      	beq.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006954:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006958:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800695c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006960:	d022      	beq.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006962:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006966:	d81b      	bhi.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006968:	2b00      	cmp	r3, #0
 800696a:	d003      	beq.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800696c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006970:	d00b      	beq.n	800698a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006972:	e015      	b.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006974:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006978:	3308      	adds	r3, #8
 800697a:	2100      	movs	r1, #0
 800697c:	4618      	mov	r0, r3
 800697e:	f001 fc0d 	bl	800819c <RCCEx_PLL2_Config>
 8006982:	4603      	mov	r3, r0
 8006984:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006988:	e00f      	b.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800698a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800698e:	3328      	adds	r3, #40	; 0x28
 8006990:	2102      	movs	r1, #2
 8006992:	4618      	mov	r0, r3
 8006994:	f001 fcb4 	bl	8008300 <RCCEx_PLL3_Config>
 8006998:	4603      	mov	r3, r0
 800699a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800699e:	e004      	b.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80069a6:	e000      	b.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80069a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d10b      	bne.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80069b2:	4b4b      	ldr	r3, [pc, #300]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069b6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80069ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80069c2:	4a47      	ldr	r2, [pc, #284]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069c4:	430b      	orrs	r3, r1
 80069c6:	6593      	str	r3, [r2, #88]	; 0x58
 80069c8:	e003      	b.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80069d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069da:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80069de:	67bb      	str	r3, [r7, #120]	; 0x78
 80069e0:	2300      	movs	r3, #0
 80069e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80069e4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80069e8:	460b      	mov	r3, r1
 80069ea:	4313      	orrs	r3, r2
 80069ec:	d03b      	beq.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80069ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80069fa:	d01f      	beq.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80069fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a00:	d818      	bhi.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006a02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a06:	d003      	beq.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006a08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a0c:	d007      	beq.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006a0e:	e011      	b.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a10:	4b33      	ldr	r3, [pc, #204]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a14:	4a32      	ldr	r2, [pc, #200]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006a1c:	e00f      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a22:	3328      	adds	r3, #40	; 0x28
 8006a24:	2101      	movs	r1, #1
 8006a26:	4618      	mov	r0, r3
 8006a28:	f001 fc6a 	bl	8008300 <RCCEx_PLL3_Config>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006a32:	e004      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006a3a:	e000      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006a3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d10b      	bne.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a46:	4b26      	ldr	r3, [pc, #152]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a4a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a56:	4a22      	ldr	r2, [pc, #136]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a58:	430b      	orrs	r3, r1
 8006a5a:	6553      	str	r3, [r2, #84]	; 0x54
 8006a5c:	e003      	b.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a6e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006a72:	673b      	str	r3, [r7, #112]	; 0x70
 8006a74:	2300      	movs	r3, #0
 8006a76:	677b      	str	r3, [r7, #116]	; 0x74
 8006a78:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006a7c:	460b      	mov	r3, r1
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	d034      	beq.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d003      	beq.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a90:	d007      	beq.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006a92:	e011      	b.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a94:	4b12      	ldr	r3, [pc, #72]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a98:	4a11      	ldr	r2, [pc, #68]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006aa0:	e00e      	b.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006aa6:	3308      	adds	r3, #8
 8006aa8:	2102      	movs	r1, #2
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f001 fb76 	bl	800819c <RCCEx_PLL2_Config>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006ab6:	e003      	b.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006abe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ac0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d10d      	bne.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006ac8:	4b05      	ldr	r3, [pc, #20]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006acc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ad6:	4a02      	ldr	r2, [pc, #8]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ad8:	430b      	orrs	r3, r1
 8006ada:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006adc:	e006      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006ade:	bf00      	nop
 8006ae0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ae4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ae8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006af8:	66bb      	str	r3, [r7, #104]	; 0x68
 8006afa:	2300      	movs	r3, #0
 8006afc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006afe:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006b02:	460b      	mov	r3, r1
 8006b04:	4313      	orrs	r3, r2
 8006b06:	d00c      	beq.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b0c:	3328      	adds	r3, #40	; 0x28
 8006b0e:	2102      	movs	r1, #2
 8006b10:	4618      	mov	r0, r3
 8006b12:	f001 fbf5 	bl	8008300 <RCCEx_PLL3_Config>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d002      	beq.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006b2e:	663b      	str	r3, [r7, #96]	; 0x60
 8006b30:	2300      	movs	r3, #0
 8006b32:	667b      	str	r3, [r7, #100]	; 0x64
 8006b34:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006b38:	460b      	mov	r3, r1
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	d038      	beq.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b4a:	d018      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006b4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b50:	d811      	bhi.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006b52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b56:	d014      	beq.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006b58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b5c:	d80b      	bhi.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d011      	beq.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006b62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b66:	d106      	bne.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b68:	4bc3      	ldr	r3, [pc, #780]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b6c:	4ac2      	ldr	r2, [pc, #776]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006b74:	e008      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006b7c:	e004      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006b7e:	bf00      	nop
 8006b80:	e002      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006b82:	bf00      	nop
 8006b84:	e000      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006b86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d10b      	bne.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b90:	4bb9      	ldr	r3, [pc, #740]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b94:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ba0:	4ab5      	ldr	r2, [pc, #724]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ba2:	430b      	orrs	r3, r1
 8006ba4:	6553      	str	r3, [r2, #84]	; 0x54
 8006ba6:	e003      	b.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ba8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006bac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006bbc:	65bb      	str	r3, [r7, #88]	; 0x58
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006bc2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	d009      	beq.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006bcc:	4baa      	ldr	r3, [pc, #680]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bd0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bda:	4aa7      	ldr	r2, [pc, #668]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bdc:	430b      	orrs	r3, r1
 8006bde:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8006bec:	653b      	str	r3, [r7, #80]	; 0x50
 8006bee:	2300      	movs	r3, #0
 8006bf0:	657b      	str	r3, [r7, #84]	; 0x54
 8006bf2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	d00a      	beq.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006bfc:	4b9e      	ldr	r3, [pc, #632]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8006c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c08:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006c0c:	4a9a      	ldr	r2, [pc, #616]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c0e:	430b      	orrs	r3, r1
 8006c10:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006c1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c20:	2300      	movs	r3, #0
 8006c22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c24:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006c28:	460b      	mov	r3, r1
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	d009      	beq.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006c2e:	4b92      	ldr	r3, [pc, #584]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c32:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c3c:	4a8e      	ldr	r2, [pc, #568]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c3e:	430b      	orrs	r3, r1
 8006c40:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006c4e:	643b      	str	r3, [r7, #64]	; 0x40
 8006c50:	2300      	movs	r3, #0
 8006c52:	647b      	str	r3, [r7, #68]	; 0x44
 8006c54:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006c58:	460b      	mov	r3, r1
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	d00e      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006c5e:	4b86      	ldr	r3, [pc, #536]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	4a85      	ldr	r2, [pc, #532]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c64:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c68:	6113      	str	r3, [r2, #16]
 8006c6a:	4b83      	ldr	r3, [pc, #524]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c6c:	6919      	ldr	r1, [r3, #16]
 8006c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c72:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006c76:	4a80      	ldr	r2, [pc, #512]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c78:	430b      	orrs	r3, r1
 8006c7a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c84:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006c88:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c8e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006c92:	460b      	mov	r3, r1
 8006c94:	4313      	orrs	r3, r2
 8006c96:	d009      	beq.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006c98:	4b77      	ldr	r3, [pc, #476]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c9c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ca6:	4a74      	ldr	r2, [pc, #464]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ca8:	430b      	orrs	r3, r1
 8006caa:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006cb8:	633b      	str	r3, [r7, #48]	; 0x30
 8006cba:	2300      	movs	r3, #0
 8006cbc:	637b      	str	r3, [r7, #52]	; 0x34
 8006cbe:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006cc2:	460b      	mov	r3, r1
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	d00a      	beq.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006cc8:	4b6b      	ldr	r3, [pc, #428]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ccc:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cd8:	4a67      	ldr	r2, [pc, #412]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006cda:	430b      	orrs	r3, r1
 8006cdc:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce6:	2100      	movs	r1, #0
 8006ce8:	62b9      	str	r1, [r7, #40]	; 0x28
 8006cea:	f003 0301 	and.w	r3, r3, #1
 8006cee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cf0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	d011      	beq.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cfe:	3308      	adds	r3, #8
 8006d00:	2100      	movs	r1, #0
 8006d02:	4618      	mov	r0, r3
 8006d04:	f001 fa4a 	bl	800819c <RCCEx_PLL2_Config>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006d0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d003      	beq.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d26:	2100      	movs	r1, #0
 8006d28:	6239      	str	r1, [r7, #32]
 8006d2a:	f003 0302 	and.w	r3, r3, #2
 8006d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8006d30:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006d34:	460b      	mov	r3, r1
 8006d36:	4313      	orrs	r3, r2
 8006d38:	d011      	beq.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d3e:	3308      	adds	r3, #8
 8006d40:	2101      	movs	r1, #1
 8006d42:	4618      	mov	r0, r3
 8006d44:	f001 fa2a 	bl	800819c <RCCEx_PLL2_Config>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006d4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d003      	beq.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d66:	2100      	movs	r1, #0
 8006d68:	61b9      	str	r1, [r7, #24]
 8006d6a:	f003 0304 	and.w	r3, r3, #4
 8006d6e:	61fb      	str	r3, [r7, #28]
 8006d70:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006d74:	460b      	mov	r3, r1
 8006d76:	4313      	orrs	r3, r2
 8006d78:	d011      	beq.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d7e:	3308      	adds	r3, #8
 8006d80:	2102      	movs	r1, #2
 8006d82:	4618      	mov	r0, r3
 8006d84:	f001 fa0a 	bl	800819c <RCCEx_PLL2_Config>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006d8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d003      	beq.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da6:	2100      	movs	r1, #0
 8006da8:	6139      	str	r1, [r7, #16]
 8006daa:	f003 0308 	and.w	r3, r3, #8
 8006dae:	617b      	str	r3, [r7, #20]
 8006db0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006db4:	460b      	mov	r3, r1
 8006db6:	4313      	orrs	r3, r2
 8006db8:	d011      	beq.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dbe:	3328      	adds	r3, #40	; 0x28
 8006dc0:	2100      	movs	r1, #0
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f001 fa9c 	bl	8008300 <RCCEx_PLL3_Config>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8006dce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d003      	beq.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006dda:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de6:	2100      	movs	r1, #0
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	f003 0310 	and.w	r3, r3, #16
 8006dee:	60fb      	str	r3, [r7, #12]
 8006df0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006df4:	460b      	mov	r3, r1
 8006df6:	4313      	orrs	r3, r2
 8006df8:	d011      	beq.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dfe:	3328      	adds	r3, #40	; 0x28
 8006e00:	2101      	movs	r1, #1
 8006e02:	4618      	mov	r0, r3
 8006e04:	f001 fa7c 	bl	8008300 <RCCEx_PLL3_Config>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006e0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d003      	beq.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e26:	2100      	movs	r1, #0
 8006e28:	6039      	str	r1, [r7, #0]
 8006e2a:	f003 0320 	and.w	r3, r3, #32
 8006e2e:	607b      	str	r3, [r7, #4]
 8006e30:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006e34:	460b      	mov	r3, r1
 8006e36:	4313      	orrs	r3, r2
 8006e38:	d011      	beq.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e3e:	3328      	adds	r3, #40	; 0x28
 8006e40:	2102      	movs	r1, #2
 8006e42:	4618      	mov	r0, r3
 8006e44:	f001 fa5c 	bl	8008300 <RCCEx_PLL3_Config>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006e4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d003      	beq.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8006e5e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d101      	bne.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006e66:	2300      	movs	r3, #0
 8006e68:	e000      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8006e72:	46bd      	mov	sp, r7
 8006e74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e78:	58024400 	.word	0x58024400

08006e7c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b090      	sub	sp, #64	; 0x40
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006e86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e8a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8006e8e:	430b      	orrs	r3, r1
 8006e90:	f040 8094 	bne.w	8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006e94:	4b9e      	ldr	r3, [pc, #632]	; (8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e98:	f003 0307 	and.w	r3, r3, #7
 8006e9c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea0:	2b04      	cmp	r3, #4
 8006ea2:	f200 8087 	bhi.w	8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006ea6:	a201      	add	r2, pc, #4	; (adr r2, 8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eac:	08006ec1 	.word	0x08006ec1
 8006eb0:	08006ee9 	.word	0x08006ee9
 8006eb4:	08006f11 	.word	0x08006f11
 8006eb8:	08006fad 	.word	0x08006fad
 8006ebc:	08006f39 	.word	0x08006f39
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006ec0:	4b93      	ldr	r3, [pc, #588]	; (8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ec8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ecc:	d108      	bne.n	8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ece:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f001 f810 	bl	8007ef8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006edc:	f000 bd45 	b.w	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ee4:	f000 bd41 	b.w	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ee8:	4b89      	ldr	r3, [pc, #548]	; (8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ef0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ef4:	d108      	bne.n	8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ef6:	f107 0318 	add.w	r3, r7, #24
 8006efa:	4618      	mov	r0, r3
 8006efc:	f000 fd54 	bl	80079a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f04:	f000 bd31 	b.w	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f0c:	f000 bd2d 	b.w	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f10:	4b7f      	ldr	r3, [pc, #508]	; (8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f1c:	d108      	bne.n	8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f1e:	f107 030c 	add.w	r3, r7, #12
 8006f22:	4618      	mov	r0, r3
 8006f24:	f000 fe94 	bl	8007c50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f2c:	f000 bd1d 	b.w	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f30:	2300      	movs	r3, #0
 8006f32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f34:	f000 bd19 	b.w	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006f38:	4b75      	ldr	r3, [pc, #468]	; (8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006f40:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006f42:	4b73      	ldr	r3, [pc, #460]	; (8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f003 0304 	and.w	r3, r3, #4
 8006f4a:	2b04      	cmp	r3, #4
 8006f4c:	d10c      	bne.n	8006f68 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d109      	bne.n	8006f68 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f54:	4b6e      	ldr	r3, [pc, #440]	; (8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	08db      	lsrs	r3, r3, #3
 8006f5a:	f003 0303 	and.w	r3, r3, #3
 8006f5e:	4a6d      	ldr	r2, [pc, #436]	; (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006f60:	fa22 f303 	lsr.w	r3, r2, r3
 8006f64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f66:	e01f      	b.n	8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006f68:	4b69      	ldr	r3, [pc, #420]	; (8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f74:	d106      	bne.n	8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f7c:	d102      	bne.n	8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006f7e:	4b66      	ldr	r3, [pc, #408]	; (8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006f80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f82:	e011      	b.n	8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006f84:	4b62      	ldr	r3, [pc, #392]	; (8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f90:	d106      	bne.n	8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f98:	d102      	bne.n	8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006f9a:	4b60      	ldr	r3, [pc, #384]	; (800711c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f9e:	e003      	b.n	8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006fa4:	f000 bce1 	b.w	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006fa8:	f000 bcdf 	b.w	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006fac:	4b5c      	ldr	r3, [pc, #368]	; (8007120 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006fae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fb0:	f000 bcdb 	b.w	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fb8:	f000 bcd7 	b.w	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006fbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fc0:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8006fc4:	430b      	orrs	r3, r1
 8006fc6:	f040 80ad 	bne.w	8007124 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006fca:	4b51      	ldr	r3, [pc, #324]	; (8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fce:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006fd2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fda:	d056      	beq.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fe2:	f200 8090 	bhi.w	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe8:	2bc0      	cmp	r3, #192	; 0xc0
 8006fea:	f000 8088 	beq.w	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8006fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff0:	2bc0      	cmp	r3, #192	; 0xc0
 8006ff2:	f200 8088 	bhi.w	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff8:	2b80      	cmp	r3, #128	; 0x80
 8006ffa:	d032      	beq.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ffe:	2b80      	cmp	r3, #128	; 0x80
 8007000:	f200 8081 	bhi.w	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007006:	2b00      	cmp	r3, #0
 8007008:	d003      	beq.n	8007012 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800700a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800700c:	2b40      	cmp	r3, #64	; 0x40
 800700e:	d014      	beq.n	800703a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007010:	e079      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007012:	4b3f      	ldr	r3, [pc, #252]	; (8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800701a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800701e:	d108      	bne.n	8007032 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007020:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007024:	4618      	mov	r0, r3
 8007026:	f000 ff67 	bl	8007ef8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800702a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800702e:	f000 bc9c 	b.w	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007032:	2300      	movs	r3, #0
 8007034:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007036:	f000 bc98 	b.w	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800703a:	4b35      	ldr	r3, [pc, #212]	; (8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007042:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007046:	d108      	bne.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007048:	f107 0318 	add.w	r3, r7, #24
 800704c:	4618      	mov	r0, r3
 800704e:	f000 fcab 	bl	80079a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007056:	f000 bc88 	b.w	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800705a:	2300      	movs	r3, #0
 800705c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800705e:	f000 bc84 	b.w	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007062:	4b2b      	ldr	r3, [pc, #172]	; (8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800706a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800706e:	d108      	bne.n	8007082 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007070:	f107 030c 	add.w	r3, r7, #12
 8007074:	4618      	mov	r0, r3
 8007076:	f000 fdeb 	bl	8007c50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800707e:	f000 bc74 	b.w	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007082:	2300      	movs	r3, #0
 8007084:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007086:	f000 bc70 	b.w	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800708a:	4b21      	ldr	r3, [pc, #132]	; (8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800708c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800708e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007092:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007094:	4b1e      	ldr	r3, [pc, #120]	; (8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 0304 	and.w	r3, r3, #4
 800709c:	2b04      	cmp	r3, #4
 800709e:	d10c      	bne.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80070a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d109      	bne.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80070a6:	4b1a      	ldr	r3, [pc, #104]	; (8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	08db      	lsrs	r3, r3, #3
 80070ac:	f003 0303 	and.w	r3, r3, #3
 80070b0:	4a18      	ldr	r2, [pc, #96]	; (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80070b2:	fa22 f303 	lsr.w	r3, r2, r3
 80070b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070b8:	e01f      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80070ba:	4b15      	ldr	r3, [pc, #84]	; (8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070c6:	d106      	bne.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80070c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070ce:	d102      	bne.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80070d0:	4b11      	ldr	r3, [pc, #68]	; (8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80070d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070d4:	e011      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80070d6:	4b0e      	ldr	r3, [pc, #56]	; (8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070e2:	d106      	bne.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80070e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070ea:	d102      	bne.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80070ec:	4b0b      	ldr	r3, [pc, #44]	; (800711c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80070ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070f0:	e003      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80070f2:	2300      	movs	r3, #0
 80070f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80070f6:	f000 bc38 	b.w	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80070fa:	f000 bc36 	b.w	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80070fe:	4b08      	ldr	r3, [pc, #32]	; (8007120 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007100:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007102:	f000 bc32 	b.w	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007106:	2300      	movs	r3, #0
 8007108:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800710a:	f000 bc2e 	b.w	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800710e:	bf00      	nop
 8007110:	58024400 	.word	0x58024400
 8007114:	03d09000 	.word	0x03d09000
 8007118:	003d0900 	.word	0x003d0900
 800711c:	017d7840 	.word	0x017d7840
 8007120:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007124:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007128:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800712c:	430b      	orrs	r3, r1
 800712e:	f040 809c 	bne.w	800726a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007132:	4b9e      	ldr	r3, [pc, #632]	; (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007136:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800713a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800713c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800713e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007142:	d054      	beq.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007146:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800714a:	f200 808b 	bhi.w	8007264 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800714e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007150:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007154:	f000 8083 	beq.w	800725e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8007158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800715a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800715e:	f200 8081 	bhi.w	8007264 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007164:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007168:	d02f      	beq.n	80071ca <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800716a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007170:	d878      	bhi.n	8007264 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007174:	2b00      	cmp	r3, #0
 8007176:	d004      	beq.n	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800717e:	d012      	beq.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007180:	e070      	b.n	8007264 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007182:	4b8a      	ldr	r3, [pc, #552]	; (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800718a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800718e:	d107      	bne.n	80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007190:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007194:	4618      	mov	r0, r3
 8007196:	f000 feaf 	bl	8007ef8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800719a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800719c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800719e:	e3e4      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071a0:	2300      	movs	r3, #0
 80071a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071a4:	e3e1      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80071a6:	4b81      	ldr	r3, [pc, #516]	; (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071b2:	d107      	bne.n	80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071b4:	f107 0318 	add.w	r3, r7, #24
 80071b8:	4618      	mov	r0, r3
 80071ba:	f000 fbf5 	bl	80079a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071c2:	e3d2      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071c4:	2300      	movs	r3, #0
 80071c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071c8:	e3cf      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80071ca:	4b78      	ldr	r3, [pc, #480]	; (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071d6:	d107      	bne.n	80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071d8:	f107 030c 	add.w	r3, r7, #12
 80071dc:	4618      	mov	r0, r3
 80071de:	f000 fd37 	bl	8007c50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071e6:	e3c0      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071e8:	2300      	movs	r3, #0
 80071ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071ec:	e3bd      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80071ee:	4b6f      	ldr	r3, [pc, #444]	; (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80071f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80071f6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80071f8:	4b6c      	ldr	r3, [pc, #432]	; (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f003 0304 	and.w	r3, r3, #4
 8007200:	2b04      	cmp	r3, #4
 8007202:	d10c      	bne.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007206:	2b00      	cmp	r3, #0
 8007208:	d109      	bne.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800720a:	4b68      	ldr	r3, [pc, #416]	; (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	08db      	lsrs	r3, r3, #3
 8007210:	f003 0303 	and.w	r3, r3, #3
 8007214:	4a66      	ldr	r2, [pc, #408]	; (80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007216:	fa22 f303 	lsr.w	r3, r2, r3
 800721a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800721c:	e01e      	b.n	800725c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800721e:	4b63      	ldr	r3, [pc, #396]	; (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007226:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800722a:	d106      	bne.n	800723a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800722c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800722e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007232:	d102      	bne.n	800723a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007234:	4b5f      	ldr	r3, [pc, #380]	; (80073b4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007236:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007238:	e010      	b.n	800725c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800723a:	4b5c      	ldr	r3, [pc, #368]	; (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007242:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007246:	d106      	bne.n	8007256 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8007248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800724a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800724e:	d102      	bne.n	8007256 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007250:	4b59      	ldr	r3, [pc, #356]	; (80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007252:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007254:	e002      	b.n	800725c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007256:	2300      	movs	r3, #0
 8007258:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800725a:	e386      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800725c:	e385      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800725e:	4b57      	ldr	r3, [pc, #348]	; (80073bc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007260:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007262:	e382      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007264:	2300      	movs	r3, #0
 8007266:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007268:	e37f      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800726a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800726e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8007272:	430b      	orrs	r3, r1
 8007274:	f040 80a7 	bne.w	80073c6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007278:	4b4c      	ldr	r3, [pc, #304]	; (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800727a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800727c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007280:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007284:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007288:	d055      	beq.n	8007336 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800728a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800728c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007290:	f200 8096 	bhi.w	80073c0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007296:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800729a:	f000 8084 	beq.w	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800729e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80072a4:	f200 808c 	bhi.w	80073c0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80072a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072ae:	d030      	beq.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80072b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072b6:	f200 8083 	bhi.w	80073c0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80072ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d004      	beq.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80072c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80072c6:	d012      	beq.n	80072ee <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80072c8:	e07a      	b.n	80073c0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80072ca:	4b38      	ldr	r3, [pc, #224]	; (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072d6:	d107      	bne.n	80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80072d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072dc:	4618      	mov	r0, r3
 80072de:	f000 fe0b 	bl	8007ef8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80072e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072e6:	e340      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072e8:	2300      	movs	r3, #0
 80072ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072ec:	e33d      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80072ee:	4b2f      	ldr	r3, [pc, #188]	; (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80072fa:	d107      	bne.n	800730c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072fc:	f107 0318 	add.w	r3, r7, #24
 8007300:	4618      	mov	r0, r3
 8007302:	f000 fb51 	bl	80079a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007306:	69bb      	ldr	r3, [r7, #24]
 8007308:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800730a:	e32e      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800730c:	2300      	movs	r3, #0
 800730e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007310:	e32b      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007312:	4b26      	ldr	r3, [pc, #152]	; (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800731a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800731e:	d107      	bne.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007320:	f107 030c 	add.w	r3, r7, #12
 8007324:	4618      	mov	r0, r3
 8007326:	f000 fc93 	bl	8007c50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800732e:	e31c      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007330:	2300      	movs	r3, #0
 8007332:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007334:	e319      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007336:	4b1d      	ldr	r3, [pc, #116]	; (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800733a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800733e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007340:	4b1a      	ldr	r3, [pc, #104]	; (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 0304 	and.w	r3, r3, #4
 8007348:	2b04      	cmp	r3, #4
 800734a:	d10c      	bne.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800734c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800734e:	2b00      	cmp	r3, #0
 8007350:	d109      	bne.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007352:	4b16      	ldr	r3, [pc, #88]	; (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	08db      	lsrs	r3, r3, #3
 8007358:	f003 0303 	and.w	r3, r3, #3
 800735c:	4a14      	ldr	r2, [pc, #80]	; (80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800735e:	fa22 f303 	lsr.w	r3, r2, r3
 8007362:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007364:	e01e      	b.n	80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007366:	4b11      	ldr	r3, [pc, #68]	; (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800736e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007372:	d106      	bne.n	8007382 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8007374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007376:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800737a:	d102      	bne.n	8007382 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800737c:	4b0d      	ldr	r3, [pc, #52]	; (80073b4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800737e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007380:	e010      	b.n	80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007382:	4b0a      	ldr	r3, [pc, #40]	; (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800738a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800738e:	d106      	bne.n	800739e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8007390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007392:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007396:	d102      	bne.n	800739e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007398:	4b07      	ldr	r3, [pc, #28]	; (80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800739a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800739c:	e002      	b.n	80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800739e:	2300      	movs	r3, #0
 80073a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80073a2:	e2e2      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80073a4:	e2e1      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80073a6:	4b05      	ldr	r3, [pc, #20]	; (80073bc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80073a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073aa:	e2de      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80073ac:	58024400 	.word	0x58024400
 80073b0:	03d09000 	.word	0x03d09000
 80073b4:	003d0900 	.word	0x003d0900
 80073b8:	017d7840 	.word	0x017d7840
 80073bc:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80073c0:	2300      	movs	r3, #0
 80073c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073c4:	e2d1      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80073c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073ca:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80073ce:	430b      	orrs	r3, r1
 80073d0:	f040 809c 	bne.w	800750c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80073d4:	4b93      	ldr	r3, [pc, #588]	; (8007624 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073d8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80073dc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80073de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073e4:	d054      	beq.n	8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80073e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073ec:	f200 808b 	bhi.w	8007506 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80073f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80073f6:	f000 8083 	beq.w	8007500 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80073fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007400:	f200 8081 	bhi.w	8007506 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007406:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800740a:	d02f      	beq.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800740c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800740e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007412:	d878      	bhi.n	8007506 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007416:	2b00      	cmp	r3, #0
 8007418:	d004      	beq.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800741a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007420:	d012      	beq.n	8007448 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8007422:	e070      	b.n	8007506 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007424:	4b7f      	ldr	r3, [pc, #508]	; (8007624 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800742c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007430:	d107      	bne.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007432:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007436:	4618      	mov	r0, r3
 8007438:	f000 fd5e 	bl	8007ef8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800743c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007440:	e293      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007442:	2300      	movs	r3, #0
 8007444:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007446:	e290      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007448:	4b76      	ldr	r3, [pc, #472]	; (8007624 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007450:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007454:	d107      	bne.n	8007466 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007456:	f107 0318 	add.w	r3, r7, #24
 800745a:	4618      	mov	r0, r3
 800745c:	f000 faa4 	bl	80079a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007460:	69bb      	ldr	r3, [r7, #24]
 8007462:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007464:	e281      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007466:	2300      	movs	r3, #0
 8007468:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800746a:	e27e      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800746c:	4b6d      	ldr	r3, [pc, #436]	; (8007624 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007474:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007478:	d107      	bne.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800747a:	f107 030c 	add.w	r3, r7, #12
 800747e:	4618      	mov	r0, r3
 8007480:	f000 fbe6 	bl	8007c50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007488:	e26f      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800748a:	2300      	movs	r3, #0
 800748c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800748e:	e26c      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007490:	4b64      	ldr	r3, [pc, #400]	; (8007624 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007494:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007498:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800749a:	4b62      	ldr	r3, [pc, #392]	; (8007624 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 0304 	and.w	r3, r3, #4
 80074a2:	2b04      	cmp	r3, #4
 80074a4:	d10c      	bne.n	80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80074a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d109      	bne.n	80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074ac:	4b5d      	ldr	r3, [pc, #372]	; (8007624 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	08db      	lsrs	r3, r3, #3
 80074b2:	f003 0303 	and.w	r3, r3, #3
 80074b6:	4a5c      	ldr	r2, [pc, #368]	; (8007628 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80074b8:	fa22 f303 	lsr.w	r3, r2, r3
 80074bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074be:	e01e      	b.n	80074fe <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80074c0:	4b58      	ldr	r3, [pc, #352]	; (8007624 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074cc:	d106      	bne.n	80074dc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80074ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074d4:	d102      	bne.n	80074dc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80074d6:	4b55      	ldr	r3, [pc, #340]	; (800762c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80074d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074da:	e010      	b.n	80074fe <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80074dc:	4b51      	ldr	r3, [pc, #324]	; (8007624 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074e8:	d106      	bne.n	80074f8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80074ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074f0:	d102      	bne.n	80074f8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80074f2:	4b4f      	ldr	r3, [pc, #316]	; (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80074f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074f6:	e002      	b.n	80074fe <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80074f8:	2300      	movs	r3, #0
 80074fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80074fc:	e235      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80074fe:	e234      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007500:	4b4c      	ldr	r3, [pc, #304]	; (8007634 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007502:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007504:	e231      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007506:	2300      	movs	r3, #0
 8007508:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800750a:	e22e      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800750c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007510:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8007514:	430b      	orrs	r3, r1
 8007516:	f040 808f 	bne.w	8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800751a:	4b42      	ldr	r3, [pc, #264]	; (8007624 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800751c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800751e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007522:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8007524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007526:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800752a:	d06b      	beq.n	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800752c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800752e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007532:	d874      	bhi.n	800761e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007536:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800753a:	d056      	beq.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800753c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800753e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007542:	d86c      	bhi.n	800761e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007546:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800754a:	d03b      	beq.n	80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800754c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800754e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007552:	d864      	bhi.n	800761e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007556:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800755a:	d021      	beq.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800755c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800755e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007562:	d85c      	bhi.n	800761e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007566:	2b00      	cmp	r3, #0
 8007568:	d004      	beq.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800756a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800756c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007570:	d004      	beq.n	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8007572:	e054      	b.n	800761e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007574:	f7fe fa62 	bl	8005a3c <HAL_RCC_GetPCLK1Freq>
 8007578:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800757a:	e1f6      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800757c:	4b29      	ldr	r3, [pc, #164]	; (8007624 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007584:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007588:	d107      	bne.n	800759a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800758a:	f107 0318 	add.w	r3, r7, #24
 800758e:	4618      	mov	r0, r3
 8007590:	f000 fa0a 	bl	80079a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007594:	69fb      	ldr	r3, [r7, #28]
 8007596:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007598:	e1e7      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800759a:	2300      	movs	r3, #0
 800759c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800759e:	e1e4      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80075a0:	4b20      	ldr	r3, [pc, #128]	; (8007624 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075ac:	d107      	bne.n	80075be <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075ae:	f107 030c 	add.w	r3, r7, #12
 80075b2:	4618      	mov	r0, r3
 80075b4:	f000 fb4c 	bl	8007c50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075bc:	e1d5      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075be:	2300      	movs	r3, #0
 80075c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075c2:	e1d2      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80075c4:	4b17      	ldr	r3, [pc, #92]	; (8007624 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f003 0304 	and.w	r3, r3, #4
 80075cc:	2b04      	cmp	r3, #4
 80075ce:	d109      	bne.n	80075e4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80075d0:	4b14      	ldr	r3, [pc, #80]	; (8007624 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	08db      	lsrs	r3, r3, #3
 80075d6:	f003 0303 	and.w	r3, r3, #3
 80075da:	4a13      	ldr	r2, [pc, #76]	; (8007628 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80075dc:	fa22 f303 	lsr.w	r3, r2, r3
 80075e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075e2:	e1c2      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075e4:	2300      	movs	r3, #0
 80075e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075e8:	e1bf      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80075ea:	4b0e      	ldr	r3, [pc, #56]	; (8007624 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075f6:	d102      	bne.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80075f8:	4b0c      	ldr	r3, [pc, #48]	; (800762c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80075fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075fc:	e1b5      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075fe:	2300      	movs	r3, #0
 8007600:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007602:	e1b2      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007604:	4b07      	ldr	r3, [pc, #28]	; (8007624 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800760c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007610:	d102      	bne.n	8007618 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8007612:	4b07      	ldr	r3, [pc, #28]	; (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007614:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007616:	e1a8      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007618:	2300      	movs	r3, #0
 800761a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800761c:	e1a5      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800761e:	2300      	movs	r3, #0
 8007620:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007622:	e1a2      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007624:	58024400 	.word	0x58024400
 8007628:	03d09000 	.word	0x03d09000
 800762c:	003d0900 	.word	0x003d0900
 8007630:	017d7840 	.word	0x017d7840
 8007634:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007638:	e9d7 2300 	ldrd	r2, r3, [r7]
 800763c:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8007640:	430b      	orrs	r3, r1
 8007642:	d173      	bne.n	800772c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007644:	4b9c      	ldr	r3, [pc, #624]	; (80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007648:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800764c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800764e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007650:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007654:	d02f      	beq.n	80076b6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007658:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800765c:	d863      	bhi.n	8007726 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800765e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007660:	2b00      	cmp	r3, #0
 8007662:	d004      	beq.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8007664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007666:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800766a:	d012      	beq.n	8007692 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800766c:	e05b      	b.n	8007726 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800766e:	4b92      	ldr	r3, [pc, #584]	; (80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007676:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800767a:	d107      	bne.n	800768c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800767c:	f107 0318 	add.w	r3, r7, #24
 8007680:	4618      	mov	r0, r3
 8007682:	f000 f991 	bl	80079a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007686:	69bb      	ldr	r3, [r7, #24]
 8007688:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800768a:	e16e      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800768c:	2300      	movs	r3, #0
 800768e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007690:	e16b      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007692:	4b89      	ldr	r3, [pc, #548]	; (80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800769a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800769e:	d107      	bne.n	80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076a0:	f107 030c 	add.w	r3, r7, #12
 80076a4:	4618      	mov	r0, r3
 80076a6:	f000 fad3 	bl	8007c50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076ae:	e15c      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80076b0:	2300      	movs	r3, #0
 80076b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076b4:	e159      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80076b6:	4b80      	ldr	r3, [pc, #512]	; (80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80076b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80076be:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80076c0:	4b7d      	ldr	r3, [pc, #500]	; (80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f003 0304 	and.w	r3, r3, #4
 80076c8:	2b04      	cmp	r3, #4
 80076ca:	d10c      	bne.n	80076e6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80076cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d109      	bne.n	80076e6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80076d2:	4b79      	ldr	r3, [pc, #484]	; (80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	08db      	lsrs	r3, r3, #3
 80076d8:	f003 0303 	and.w	r3, r3, #3
 80076dc:	4a77      	ldr	r2, [pc, #476]	; (80078bc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80076de:	fa22 f303 	lsr.w	r3, r2, r3
 80076e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076e4:	e01e      	b.n	8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80076e6:	4b74      	ldr	r3, [pc, #464]	; (80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076f2:	d106      	bne.n	8007702 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80076f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076fa:	d102      	bne.n	8007702 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80076fc:	4b70      	ldr	r3, [pc, #448]	; (80078c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80076fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007700:	e010      	b.n	8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007702:	4b6d      	ldr	r3, [pc, #436]	; (80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800770a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800770e:	d106      	bne.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007712:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007716:	d102      	bne.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007718:	4b6a      	ldr	r3, [pc, #424]	; (80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800771a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800771c:	e002      	b.n	8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800771e:	2300      	movs	r3, #0
 8007720:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007722:	e122      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007724:	e121      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007726:	2300      	movs	r3, #0
 8007728:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800772a:	e11e      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800772c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007730:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8007734:	430b      	orrs	r3, r1
 8007736:	d133      	bne.n	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007738:	4b5f      	ldr	r3, [pc, #380]	; (80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800773a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800773c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007740:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007744:	2b00      	cmp	r3, #0
 8007746:	d004      	beq.n	8007752 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800774a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800774e:	d012      	beq.n	8007776 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007750:	e023      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007752:	4b59      	ldr	r3, [pc, #356]	; (80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800775a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800775e:	d107      	bne.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007764:	4618      	mov	r0, r3
 8007766:	f000 fbc7 	bl	8007ef8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800776a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800776c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800776e:	e0fc      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007770:	2300      	movs	r3, #0
 8007772:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007774:	e0f9      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007776:	4b50      	ldr	r3, [pc, #320]	; (80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800777e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007782:	d107      	bne.n	8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007784:	f107 0318 	add.w	r3, r7, #24
 8007788:	4618      	mov	r0, r3
 800778a:	f000 f90d 	bl	80079a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800778e:	6a3b      	ldr	r3, [r7, #32]
 8007790:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007792:	e0ea      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007794:	2300      	movs	r3, #0
 8007796:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007798:	e0e7      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800779a:	2300      	movs	r3, #0
 800779c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800779e:	e0e4      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80077a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077a4:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80077a8:	430b      	orrs	r3, r1
 80077aa:	f040 808d 	bne.w	80078c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80077ae:	4b42      	ldr	r3, [pc, #264]	; (80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80077b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077b2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80077b6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80077b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80077be:	d06b      	beq.n	8007898 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80077c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80077c6:	d874      	bhi.n	80078b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80077c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077ce:	d056      	beq.n	800787e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80077d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077d6:	d86c      	bhi.n	80078b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80077d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80077de:	d03b      	beq.n	8007858 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80077e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80077e6:	d864      	bhi.n	80078b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80077e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077ee:	d021      	beq.n	8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80077f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077f6:	d85c      	bhi.n	80078b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80077f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d004      	beq.n	8007808 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80077fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007800:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007804:	d004      	beq.n	8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8007806:	e054      	b.n	80078b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007808:	f000 f8b8 	bl	800797c <HAL_RCCEx_GetD3PCLK1Freq>
 800780c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800780e:	e0ac      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007810:	4b29      	ldr	r3, [pc, #164]	; (80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007818:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800781c:	d107      	bne.n	800782e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800781e:	f107 0318 	add.w	r3, r7, #24
 8007822:	4618      	mov	r0, r3
 8007824:	f000 f8c0 	bl	80079a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007828:	69fb      	ldr	r3, [r7, #28]
 800782a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800782c:	e09d      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800782e:	2300      	movs	r3, #0
 8007830:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007832:	e09a      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007834:	4b20      	ldr	r3, [pc, #128]	; (80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800783c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007840:	d107      	bne.n	8007852 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007842:	f107 030c 	add.w	r3, r7, #12
 8007846:	4618      	mov	r0, r3
 8007848:	f000 fa02 	bl	8007c50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007850:	e08b      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007852:	2300      	movs	r3, #0
 8007854:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007856:	e088      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007858:	4b17      	ldr	r3, [pc, #92]	; (80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f003 0304 	and.w	r3, r3, #4
 8007860:	2b04      	cmp	r3, #4
 8007862:	d109      	bne.n	8007878 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007864:	4b14      	ldr	r3, [pc, #80]	; (80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	08db      	lsrs	r3, r3, #3
 800786a:	f003 0303 	and.w	r3, r3, #3
 800786e:	4a13      	ldr	r2, [pc, #76]	; (80078bc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007870:	fa22 f303 	lsr.w	r3, r2, r3
 8007874:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007876:	e078      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007878:	2300      	movs	r3, #0
 800787a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800787c:	e075      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800787e:	4b0e      	ldr	r3, [pc, #56]	; (80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007886:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800788a:	d102      	bne.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800788c:	4b0c      	ldr	r3, [pc, #48]	; (80078c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800788e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007890:	e06b      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007892:	2300      	movs	r3, #0
 8007894:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007896:	e068      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007898:	4b07      	ldr	r3, [pc, #28]	; (80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078a4:	d102      	bne.n	80078ac <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80078a6:	4b07      	ldr	r3, [pc, #28]	; (80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80078a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078aa:	e05e      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078ac:	2300      	movs	r3, #0
 80078ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078b0:	e05b      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80078b2:	2300      	movs	r3, #0
 80078b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078b6:	e058      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80078b8:	58024400 	.word	0x58024400
 80078bc:	03d09000 	.word	0x03d09000
 80078c0:	003d0900 	.word	0x003d0900
 80078c4:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80078c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078cc:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80078d0:	430b      	orrs	r3, r1
 80078d2:	d148      	bne.n	8007966 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80078d4:	4b27      	ldr	r3, [pc, #156]	; (8007974 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80078d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80078dc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80078de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078e4:	d02a      	beq.n	800793c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80078e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078ec:	d838      	bhi.n	8007960 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80078ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d004      	beq.n	80078fe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80078f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078fa:	d00d      	beq.n	8007918 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80078fc:	e030      	b.n	8007960 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80078fe:	4b1d      	ldr	r3, [pc, #116]	; (8007974 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007906:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800790a:	d102      	bne.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800790c:	4b1a      	ldr	r3, [pc, #104]	; (8007978 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800790e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007910:	e02b      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007912:	2300      	movs	r3, #0
 8007914:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007916:	e028      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007918:	4b16      	ldr	r3, [pc, #88]	; (8007974 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007920:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007924:	d107      	bne.n	8007936 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007926:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800792a:	4618      	mov	r0, r3
 800792c:	f000 fae4 	bl	8007ef8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007932:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007934:	e019      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007936:	2300      	movs	r3, #0
 8007938:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800793a:	e016      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800793c:	4b0d      	ldr	r3, [pc, #52]	; (8007974 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007944:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007948:	d107      	bne.n	800795a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800794a:	f107 0318 	add.w	r3, r7, #24
 800794e:	4618      	mov	r0, r3
 8007950:	f000 f82a 	bl	80079a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007954:	69fb      	ldr	r3, [r7, #28]
 8007956:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007958:	e007      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800795a:	2300      	movs	r3, #0
 800795c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800795e:	e004      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007960:	2300      	movs	r3, #0
 8007962:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007964:	e001      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8007966:	2300      	movs	r3, #0
 8007968:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800796a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800796c:	4618      	mov	r0, r3
 800796e:	3740      	adds	r7, #64	; 0x40
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}
 8007974:	58024400 	.word	0x58024400
 8007978:	017d7840 	.word	0x017d7840

0800797c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007980:	f7fe f82c 	bl	80059dc <HAL_RCC_GetHCLKFreq>
 8007984:	4602      	mov	r2, r0
 8007986:	4b06      	ldr	r3, [pc, #24]	; (80079a0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007988:	6a1b      	ldr	r3, [r3, #32]
 800798a:	091b      	lsrs	r3, r3, #4
 800798c:	f003 0307 	and.w	r3, r3, #7
 8007990:	4904      	ldr	r1, [pc, #16]	; (80079a4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007992:	5ccb      	ldrb	r3, [r1, r3]
 8007994:	f003 031f 	and.w	r3, r3, #31
 8007998:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800799c:	4618      	mov	r0, r3
 800799e:	bd80      	pop	{r7, pc}
 80079a0:	58024400 	.word	0x58024400
 80079a4:	0800f1f8 	.word	0x0800f1f8

080079a8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b089      	sub	sp, #36	; 0x24
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80079b0:	4ba1      	ldr	r3, [pc, #644]	; (8007c38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b4:	f003 0303 	and.w	r3, r3, #3
 80079b8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80079ba:	4b9f      	ldr	r3, [pc, #636]	; (8007c38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079be:	0b1b      	lsrs	r3, r3, #12
 80079c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079c4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80079c6:	4b9c      	ldr	r3, [pc, #624]	; (8007c38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ca:	091b      	lsrs	r3, r3, #4
 80079cc:	f003 0301 	and.w	r3, r3, #1
 80079d0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80079d2:	4b99      	ldr	r3, [pc, #612]	; (8007c38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079d6:	08db      	lsrs	r3, r3, #3
 80079d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80079dc:	693a      	ldr	r2, [r7, #16]
 80079de:	fb02 f303 	mul.w	r3, r2, r3
 80079e2:	ee07 3a90 	vmov	s15, r3
 80079e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	f000 8111 	beq.w	8007c18 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80079f6:	69bb      	ldr	r3, [r7, #24]
 80079f8:	2b02      	cmp	r3, #2
 80079fa:	f000 8083 	beq.w	8007b04 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80079fe:	69bb      	ldr	r3, [r7, #24]
 8007a00:	2b02      	cmp	r3, #2
 8007a02:	f200 80a1 	bhi.w	8007b48 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d003      	beq.n	8007a14 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007a0c:	69bb      	ldr	r3, [r7, #24]
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d056      	beq.n	8007ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007a12:	e099      	b.n	8007b48 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a14:	4b88      	ldr	r3, [pc, #544]	; (8007c38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f003 0320 	and.w	r3, r3, #32
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d02d      	beq.n	8007a7c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a20:	4b85      	ldr	r3, [pc, #532]	; (8007c38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	08db      	lsrs	r3, r3, #3
 8007a26:	f003 0303 	and.w	r3, r3, #3
 8007a2a:	4a84      	ldr	r2, [pc, #528]	; (8007c3c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8007a30:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	ee07 3a90 	vmov	s15, r3
 8007a38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	ee07 3a90 	vmov	s15, r3
 8007a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a4a:	4b7b      	ldr	r3, [pc, #492]	; (8007c38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a52:	ee07 3a90 	vmov	s15, r3
 8007a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a5e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007c40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a76:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007a7a:	e087      	b.n	8007b8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	ee07 3a90 	vmov	s15, r3
 8007a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a86:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007c44 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007a8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a8e:	4b6a      	ldr	r3, [pc, #424]	; (8007c38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a96:	ee07 3a90 	vmov	s15, r3
 8007a9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007aa2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007c40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007aa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007aaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007aae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007abe:	e065      	b.n	8007b8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	ee07 3a90 	vmov	s15, r3
 8007ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007c48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007ace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ad2:	4b59      	ldr	r3, [pc, #356]	; (8007c38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ada:	ee07 3a90 	vmov	s15, r3
 8007ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ae2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ae6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007c40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007aea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007aee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007af2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007afe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b02:	e043      	b.n	8007b8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	ee07 3a90 	vmov	s15, r3
 8007b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b0e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007c4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007b12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b16:	4b48      	ldr	r3, [pc, #288]	; (8007c38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b1e:	ee07 3a90 	vmov	s15, r3
 8007b22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b26:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b2a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007c40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b46:	e021      	b.n	8007b8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	ee07 3a90 	vmov	s15, r3
 8007b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b52:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007c48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007b56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b5a:	4b37      	ldr	r3, [pc, #220]	; (8007c38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b62:	ee07 3a90 	vmov	s15, r3
 8007b66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b6e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007c40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b8a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007b8c:	4b2a      	ldr	r3, [pc, #168]	; (8007c38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b90:	0a5b      	lsrs	r3, r3, #9
 8007b92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b96:	ee07 3a90 	vmov	s15, r3
 8007b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ba2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ba6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007baa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bb2:	ee17 2a90 	vmov	r2, s15
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007bba:	4b1f      	ldr	r3, [pc, #124]	; (8007c38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bbe:	0c1b      	lsrs	r3, r3, #16
 8007bc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bc4:	ee07 3a90 	vmov	s15, r3
 8007bc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bcc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007bd0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007bd4:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007be0:	ee17 2a90 	vmov	r2, s15
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007be8:	4b13      	ldr	r3, [pc, #76]	; (8007c38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bec:	0e1b      	lsrs	r3, r3, #24
 8007bee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bf2:	ee07 3a90 	vmov	s15, r3
 8007bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bfa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007bfe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c02:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c0e:	ee17 2a90 	vmov	r2, s15
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007c16:	e008      	b.n	8007c2a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	609a      	str	r2, [r3, #8]
}
 8007c2a:	bf00      	nop
 8007c2c:	3724      	adds	r7, #36	; 0x24
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr
 8007c36:	bf00      	nop
 8007c38:	58024400 	.word	0x58024400
 8007c3c:	03d09000 	.word	0x03d09000
 8007c40:	46000000 	.word	0x46000000
 8007c44:	4c742400 	.word	0x4c742400
 8007c48:	4a742400 	.word	0x4a742400
 8007c4c:	4bbebc20 	.word	0x4bbebc20

08007c50 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b089      	sub	sp, #36	; 0x24
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c58:	4ba1      	ldr	r3, [pc, #644]	; (8007ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c5c:	f003 0303 	and.w	r3, r3, #3
 8007c60:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007c62:	4b9f      	ldr	r3, [pc, #636]	; (8007ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c66:	0d1b      	lsrs	r3, r3, #20
 8007c68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c6c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007c6e:	4b9c      	ldr	r3, [pc, #624]	; (8007ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c72:	0a1b      	lsrs	r3, r3, #8
 8007c74:	f003 0301 	and.w	r3, r3, #1
 8007c78:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007c7a:	4b99      	ldr	r3, [pc, #612]	; (8007ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c7e:	08db      	lsrs	r3, r3, #3
 8007c80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c84:	693a      	ldr	r2, [r7, #16]
 8007c86:	fb02 f303 	mul.w	r3, r2, r3
 8007c8a:	ee07 3a90 	vmov	s15, r3
 8007c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c92:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	f000 8111 	beq.w	8007ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007c9e:	69bb      	ldr	r3, [r7, #24]
 8007ca0:	2b02      	cmp	r3, #2
 8007ca2:	f000 8083 	beq.w	8007dac <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007ca6:	69bb      	ldr	r3, [r7, #24]
 8007ca8:	2b02      	cmp	r3, #2
 8007caa:	f200 80a1 	bhi.w	8007df0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007cae:	69bb      	ldr	r3, [r7, #24]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d003      	beq.n	8007cbc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007cb4:	69bb      	ldr	r3, [r7, #24]
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d056      	beq.n	8007d68 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007cba:	e099      	b.n	8007df0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cbc:	4b88      	ldr	r3, [pc, #544]	; (8007ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f003 0320 	and.w	r3, r3, #32
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d02d      	beq.n	8007d24 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007cc8:	4b85      	ldr	r3, [pc, #532]	; (8007ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	08db      	lsrs	r3, r3, #3
 8007cce:	f003 0303 	and.w	r3, r3, #3
 8007cd2:	4a84      	ldr	r2, [pc, #528]	; (8007ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8007cd8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	ee07 3a90 	vmov	s15, r3
 8007ce0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	ee07 3a90 	vmov	s15, r3
 8007cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cf2:	4b7b      	ldr	r3, [pc, #492]	; (8007ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cfa:	ee07 3a90 	vmov	s15, r3
 8007cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d02:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d06:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d1e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007d22:	e087      	b.n	8007e34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	ee07 3a90 	vmov	s15, r3
 8007d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d2e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007eec <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007d32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d36:	4b6a      	ldr	r3, [pc, #424]	; (8007ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d3e:	ee07 3a90 	vmov	s15, r3
 8007d42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d46:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d4a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d66:	e065      	b.n	8007e34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	ee07 3a90 	vmov	s15, r3
 8007d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d72:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007d76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d7a:	4b59      	ldr	r3, [pc, #356]	; (8007ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d82:	ee07 3a90 	vmov	s15, r3
 8007d86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d8e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007da6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007daa:	e043      	b.n	8007e34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	ee07 3a90 	vmov	s15, r3
 8007db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007db6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007dba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dbe:	4b48      	ldr	r3, [pc, #288]	; (8007ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dc6:	ee07 3a90 	vmov	s15, r3
 8007dca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dce:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dd2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007dd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007de2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007dee:	e021      	b.n	8007e34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	ee07 3a90 	vmov	s15, r3
 8007df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dfa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007dfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e02:	4b37      	ldr	r3, [pc, #220]	; (8007ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e0a:	ee07 3a90 	vmov	s15, r3
 8007e0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e12:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e16:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e32:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007e34:	4b2a      	ldr	r3, [pc, #168]	; (8007ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e38:	0a5b      	lsrs	r3, r3, #9
 8007e3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e3e:	ee07 3a90 	vmov	s15, r3
 8007e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e5a:	ee17 2a90 	vmov	r2, s15
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007e62:	4b1f      	ldr	r3, [pc, #124]	; (8007ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e66:	0c1b      	lsrs	r3, r3, #16
 8007e68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e6c:	ee07 3a90 	vmov	s15, r3
 8007e70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e88:	ee17 2a90 	vmov	r2, s15
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007e90:	4b13      	ldr	r3, [pc, #76]	; (8007ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e94:	0e1b      	lsrs	r3, r3, #24
 8007e96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e9a:	ee07 3a90 	vmov	s15, r3
 8007e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ea2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ea6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007eaa:	edd7 6a07 	vldr	s13, [r7, #28]
 8007eae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007eb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007eb6:	ee17 2a90 	vmov	r2, s15
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007ebe:	e008      	b.n	8007ed2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	609a      	str	r2, [r3, #8]
}
 8007ed2:	bf00      	nop
 8007ed4:	3724      	adds	r7, #36	; 0x24
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr
 8007ede:	bf00      	nop
 8007ee0:	58024400 	.word	0x58024400
 8007ee4:	03d09000 	.word	0x03d09000
 8007ee8:	46000000 	.word	0x46000000
 8007eec:	4c742400 	.word	0x4c742400
 8007ef0:	4a742400 	.word	0x4a742400
 8007ef4:	4bbebc20 	.word	0x4bbebc20

08007ef8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b089      	sub	sp, #36	; 0x24
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f00:	4ba0      	ldr	r3, [pc, #640]	; (8008184 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f04:	f003 0303 	and.w	r3, r3, #3
 8007f08:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007f0a:	4b9e      	ldr	r3, [pc, #632]	; (8008184 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f0e:	091b      	lsrs	r3, r3, #4
 8007f10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f14:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007f16:	4b9b      	ldr	r3, [pc, #620]	; (8008184 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f1a:	f003 0301 	and.w	r3, r3, #1
 8007f1e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007f20:	4b98      	ldr	r3, [pc, #608]	; (8008184 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f24:	08db      	lsrs	r3, r3, #3
 8007f26:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f2a:	693a      	ldr	r2, [r7, #16]
 8007f2c:	fb02 f303 	mul.w	r3, r2, r3
 8007f30:	ee07 3a90 	vmov	s15, r3
 8007f34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f38:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	f000 8111 	beq.w	8008166 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007f44:	69bb      	ldr	r3, [r7, #24]
 8007f46:	2b02      	cmp	r3, #2
 8007f48:	f000 8083 	beq.w	8008052 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007f4c:	69bb      	ldr	r3, [r7, #24]
 8007f4e:	2b02      	cmp	r3, #2
 8007f50:	f200 80a1 	bhi.w	8008096 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007f54:	69bb      	ldr	r3, [r7, #24]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d003      	beq.n	8007f62 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d056      	beq.n	800800e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007f60:	e099      	b.n	8008096 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f62:	4b88      	ldr	r3, [pc, #544]	; (8008184 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f003 0320 	and.w	r3, r3, #32
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d02d      	beq.n	8007fca <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f6e:	4b85      	ldr	r3, [pc, #532]	; (8008184 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	08db      	lsrs	r3, r3, #3
 8007f74:	f003 0303 	and.w	r3, r3, #3
 8007f78:	4a83      	ldr	r2, [pc, #524]	; (8008188 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8007f7e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	ee07 3a90 	vmov	s15, r3
 8007f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	ee07 3a90 	vmov	s15, r3
 8007f90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f98:	4b7a      	ldr	r3, [pc, #488]	; (8008184 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fa0:	ee07 3a90 	vmov	s15, r3
 8007fa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fa8:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fac:	eddf 5a77 	vldr	s11, [pc, #476]	; 800818c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007fb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fc4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007fc8:	e087      	b.n	80080da <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	ee07 3a90 	vmov	s15, r3
 8007fd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fd4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008190 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007fd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fdc:	4b69      	ldr	r3, [pc, #420]	; (8008184 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fe4:	ee07 3a90 	vmov	s15, r3
 8007fe8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fec:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ff0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800818c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007ff4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ff8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ffc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008000:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008004:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008008:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800800c:	e065      	b.n	80080da <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	ee07 3a90 	vmov	s15, r3
 8008014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008018:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008194 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800801c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008020:	4b58      	ldr	r3, [pc, #352]	; (8008184 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008028:	ee07 3a90 	vmov	s15, r3
 800802c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008030:	ed97 6a03 	vldr	s12, [r7, #12]
 8008034:	eddf 5a55 	vldr	s11, [pc, #340]	; 800818c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008038:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800803c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008040:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008044:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008048:	ee67 7a27 	vmul.f32	s15, s14, s15
 800804c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008050:	e043      	b.n	80080da <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	ee07 3a90 	vmov	s15, r3
 8008058:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800805c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008198 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008060:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008064:	4b47      	ldr	r3, [pc, #284]	; (8008184 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800806c:	ee07 3a90 	vmov	s15, r3
 8008070:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008074:	ed97 6a03 	vldr	s12, [r7, #12]
 8008078:	eddf 5a44 	vldr	s11, [pc, #272]	; 800818c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800807c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008080:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008084:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008088:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800808c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008090:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008094:	e021      	b.n	80080da <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	ee07 3a90 	vmov	s15, r3
 800809c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080a0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008190 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80080a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080a8:	4b36      	ldr	r3, [pc, #216]	; (8008184 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80080aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080b0:	ee07 3a90 	vmov	s15, r3
 80080b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80080bc:	eddf 5a33 	vldr	s11, [pc, #204]	; 800818c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80080c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80080d8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80080da:	4b2a      	ldr	r3, [pc, #168]	; (8008184 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80080dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080de:	0a5b      	lsrs	r3, r3, #9
 80080e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080e4:	ee07 3a90 	vmov	s15, r3
 80080e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80080f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80080f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008100:	ee17 2a90 	vmov	r2, s15
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008108:	4b1e      	ldr	r3, [pc, #120]	; (8008184 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800810a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800810c:	0c1b      	lsrs	r3, r3, #16
 800810e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008112:	ee07 3a90 	vmov	s15, r3
 8008116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800811a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800811e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008122:	edd7 6a07 	vldr	s13, [r7, #28]
 8008126:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800812a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800812e:	ee17 2a90 	vmov	r2, s15
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008136:	4b13      	ldr	r3, [pc, #76]	; (8008184 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800813a:	0e1b      	lsrs	r3, r3, #24
 800813c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008140:	ee07 3a90 	vmov	s15, r3
 8008144:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008148:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800814c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008150:	edd7 6a07 	vldr	s13, [r7, #28]
 8008154:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008158:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800815c:	ee17 2a90 	vmov	r2, s15
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008164:	e008      	b.n	8008178 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	609a      	str	r2, [r3, #8]
}
 8008178:	bf00      	nop
 800817a:	3724      	adds	r7, #36	; 0x24
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr
 8008184:	58024400 	.word	0x58024400
 8008188:	03d09000 	.word	0x03d09000
 800818c:	46000000 	.word	0x46000000
 8008190:	4c742400 	.word	0x4c742400
 8008194:	4a742400 	.word	0x4a742400
 8008198:	4bbebc20 	.word	0x4bbebc20

0800819c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80081a6:	2300      	movs	r3, #0
 80081a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80081aa:	4b53      	ldr	r3, [pc, #332]	; (80082f8 <RCCEx_PLL2_Config+0x15c>)
 80081ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ae:	f003 0303 	and.w	r3, r3, #3
 80081b2:	2b03      	cmp	r3, #3
 80081b4:	d101      	bne.n	80081ba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80081b6:	2301      	movs	r3, #1
 80081b8:	e099      	b.n	80082ee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80081ba:	4b4f      	ldr	r3, [pc, #316]	; (80082f8 <RCCEx_PLL2_Config+0x15c>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a4e      	ldr	r2, [pc, #312]	; (80082f8 <RCCEx_PLL2_Config+0x15c>)
 80081c0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80081c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081c6:	f7f9 fddb 	bl	8001d80 <HAL_GetTick>
 80081ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80081cc:	e008      	b.n	80081e0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80081ce:	f7f9 fdd7 	bl	8001d80 <HAL_GetTick>
 80081d2:	4602      	mov	r2, r0
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	1ad3      	subs	r3, r2, r3
 80081d8:	2b02      	cmp	r3, #2
 80081da:	d901      	bls.n	80081e0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80081dc:	2303      	movs	r3, #3
 80081de:	e086      	b.n	80082ee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80081e0:	4b45      	ldr	r3, [pc, #276]	; (80082f8 <RCCEx_PLL2_Config+0x15c>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d1f0      	bne.n	80081ce <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80081ec:	4b42      	ldr	r3, [pc, #264]	; (80082f8 <RCCEx_PLL2_Config+0x15c>)
 80081ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	031b      	lsls	r3, r3, #12
 80081fa:	493f      	ldr	r1, [pc, #252]	; (80082f8 <RCCEx_PLL2_Config+0x15c>)
 80081fc:	4313      	orrs	r3, r2
 80081fe:	628b      	str	r3, [r1, #40]	; 0x28
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	3b01      	subs	r3, #1
 8008206:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	689b      	ldr	r3, [r3, #8]
 800820e:	3b01      	subs	r3, #1
 8008210:	025b      	lsls	r3, r3, #9
 8008212:	b29b      	uxth	r3, r3
 8008214:	431a      	orrs	r2, r3
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	3b01      	subs	r3, #1
 800821c:	041b      	lsls	r3, r3, #16
 800821e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008222:	431a      	orrs	r2, r3
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	691b      	ldr	r3, [r3, #16]
 8008228:	3b01      	subs	r3, #1
 800822a:	061b      	lsls	r3, r3, #24
 800822c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008230:	4931      	ldr	r1, [pc, #196]	; (80082f8 <RCCEx_PLL2_Config+0x15c>)
 8008232:	4313      	orrs	r3, r2
 8008234:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008236:	4b30      	ldr	r3, [pc, #192]	; (80082f8 <RCCEx_PLL2_Config+0x15c>)
 8008238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800823a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	695b      	ldr	r3, [r3, #20]
 8008242:	492d      	ldr	r1, [pc, #180]	; (80082f8 <RCCEx_PLL2_Config+0x15c>)
 8008244:	4313      	orrs	r3, r2
 8008246:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008248:	4b2b      	ldr	r3, [pc, #172]	; (80082f8 <RCCEx_PLL2_Config+0x15c>)
 800824a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800824c:	f023 0220 	bic.w	r2, r3, #32
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	699b      	ldr	r3, [r3, #24]
 8008254:	4928      	ldr	r1, [pc, #160]	; (80082f8 <RCCEx_PLL2_Config+0x15c>)
 8008256:	4313      	orrs	r3, r2
 8008258:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800825a:	4b27      	ldr	r3, [pc, #156]	; (80082f8 <RCCEx_PLL2_Config+0x15c>)
 800825c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800825e:	4a26      	ldr	r2, [pc, #152]	; (80082f8 <RCCEx_PLL2_Config+0x15c>)
 8008260:	f023 0310 	bic.w	r3, r3, #16
 8008264:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008266:	4b24      	ldr	r3, [pc, #144]	; (80082f8 <RCCEx_PLL2_Config+0x15c>)
 8008268:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800826a:	4b24      	ldr	r3, [pc, #144]	; (80082fc <RCCEx_PLL2_Config+0x160>)
 800826c:	4013      	ands	r3, r2
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	69d2      	ldr	r2, [r2, #28]
 8008272:	00d2      	lsls	r2, r2, #3
 8008274:	4920      	ldr	r1, [pc, #128]	; (80082f8 <RCCEx_PLL2_Config+0x15c>)
 8008276:	4313      	orrs	r3, r2
 8008278:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800827a:	4b1f      	ldr	r3, [pc, #124]	; (80082f8 <RCCEx_PLL2_Config+0x15c>)
 800827c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800827e:	4a1e      	ldr	r2, [pc, #120]	; (80082f8 <RCCEx_PLL2_Config+0x15c>)
 8008280:	f043 0310 	orr.w	r3, r3, #16
 8008284:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d106      	bne.n	800829a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800828c:	4b1a      	ldr	r3, [pc, #104]	; (80082f8 <RCCEx_PLL2_Config+0x15c>)
 800828e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008290:	4a19      	ldr	r2, [pc, #100]	; (80082f8 <RCCEx_PLL2_Config+0x15c>)
 8008292:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008296:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008298:	e00f      	b.n	80082ba <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	2b01      	cmp	r3, #1
 800829e:	d106      	bne.n	80082ae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80082a0:	4b15      	ldr	r3, [pc, #84]	; (80082f8 <RCCEx_PLL2_Config+0x15c>)
 80082a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a4:	4a14      	ldr	r2, [pc, #80]	; (80082f8 <RCCEx_PLL2_Config+0x15c>)
 80082a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80082ac:	e005      	b.n	80082ba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80082ae:	4b12      	ldr	r3, [pc, #72]	; (80082f8 <RCCEx_PLL2_Config+0x15c>)
 80082b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b2:	4a11      	ldr	r2, [pc, #68]	; (80082f8 <RCCEx_PLL2_Config+0x15c>)
 80082b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80082b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80082ba:	4b0f      	ldr	r3, [pc, #60]	; (80082f8 <RCCEx_PLL2_Config+0x15c>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a0e      	ldr	r2, [pc, #56]	; (80082f8 <RCCEx_PLL2_Config+0x15c>)
 80082c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80082c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082c6:	f7f9 fd5b 	bl	8001d80 <HAL_GetTick>
 80082ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80082cc:	e008      	b.n	80082e0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80082ce:	f7f9 fd57 	bl	8001d80 <HAL_GetTick>
 80082d2:	4602      	mov	r2, r0
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	1ad3      	subs	r3, r2, r3
 80082d8:	2b02      	cmp	r3, #2
 80082da:	d901      	bls.n	80082e0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80082dc:	2303      	movs	r3, #3
 80082de:	e006      	b.n	80082ee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80082e0:	4b05      	ldr	r3, [pc, #20]	; (80082f8 <RCCEx_PLL2_Config+0x15c>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d0f0      	beq.n	80082ce <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80082ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3710      	adds	r7, #16
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
 80082f6:	bf00      	nop
 80082f8:	58024400 	.word	0x58024400
 80082fc:	ffff0007 	.word	0xffff0007

08008300 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800830a:	2300      	movs	r3, #0
 800830c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800830e:	4b53      	ldr	r3, [pc, #332]	; (800845c <RCCEx_PLL3_Config+0x15c>)
 8008310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008312:	f003 0303 	and.w	r3, r3, #3
 8008316:	2b03      	cmp	r3, #3
 8008318:	d101      	bne.n	800831e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800831a:	2301      	movs	r3, #1
 800831c:	e099      	b.n	8008452 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800831e:	4b4f      	ldr	r3, [pc, #316]	; (800845c <RCCEx_PLL3_Config+0x15c>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a4e      	ldr	r2, [pc, #312]	; (800845c <RCCEx_PLL3_Config+0x15c>)
 8008324:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008328:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800832a:	f7f9 fd29 	bl	8001d80 <HAL_GetTick>
 800832e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008330:	e008      	b.n	8008344 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008332:	f7f9 fd25 	bl	8001d80 <HAL_GetTick>
 8008336:	4602      	mov	r2, r0
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	1ad3      	subs	r3, r2, r3
 800833c:	2b02      	cmp	r3, #2
 800833e:	d901      	bls.n	8008344 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008340:	2303      	movs	r3, #3
 8008342:	e086      	b.n	8008452 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008344:	4b45      	ldr	r3, [pc, #276]	; (800845c <RCCEx_PLL3_Config+0x15c>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800834c:	2b00      	cmp	r3, #0
 800834e:	d1f0      	bne.n	8008332 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008350:	4b42      	ldr	r3, [pc, #264]	; (800845c <RCCEx_PLL3_Config+0x15c>)
 8008352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008354:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	051b      	lsls	r3, r3, #20
 800835e:	493f      	ldr	r1, [pc, #252]	; (800845c <RCCEx_PLL3_Config+0x15c>)
 8008360:	4313      	orrs	r3, r2
 8008362:	628b      	str	r3, [r1, #40]	; 0x28
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	3b01      	subs	r3, #1
 800836a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	3b01      	subs	r3, #1
 8008374:	025b      	lsls	r3, r3, #9
 8008376:	b29b      	uxth	r3, r3
 8008378:	431a      	orrs	r2, r3
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	68db      	ldr	r3, [r3, #12]
 800837e:	3b01      	subs	r3, #1
 8008380:	041b      	lsls	r3, r3, #16
 8008382:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008386:	431a      	orrs	r2, r3
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	691b      	ldr	r3, [r3, #16]
 800838c:	3b01      	subs	r3, #1
 800838e:	061b      	lsls	r3, r3, #24
 8008390:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008394:	4931      	ldr	r1, [pc, #196]	; (800845c <RCCEx_PLL3_Config+0x15c>)
 8008396:	4313      	orrs	r3, r2
 8008398:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800839a:	4b30      	ldr	r3, [pc, #192]	; (800845c <RCCEx_PLL3_Config+0x15c>)
 800839c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800839e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	695b      	ldr	r3, [r3, #20]
 80083a6:	492d      	ldr	r1, [pc, #180]	; (800845c <RCCEx_PLL3_Config+0x15c>)
 80083a8:	4313      	orrs	r3, r2
 80083aa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80083ac:	4b2b      	ldr	r3, [pc, #172]	; (800845c <RCCEx_PLL3_Config+0x15c>)
 80083ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	699b      	ldr	r3, [r3, #24]
 80083b8:	4928      	ldr	r1, [pc, #160]	; (800845c <RCCEx_PLL3_Config+0x15c>)
 80083ba:	4313      	orrs	r3, r2
 80083bc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80083be:	4b27      	ldr	r3, [pc, #156]	; (800845c <RCCEx_PLL3_Config+0x15c>)
 80083c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c2:	4a26      	ldr	r2, [pc, #152]	; (800845c <RCCEx_PLL3_Config+0x15c>)
 80083c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80083ca:	4b24      	ldr	r3, [pc, #144]	; (800845c <RCCEx_PLL3_Config+0x15c>)
 80083cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083ce:	4b24      	ldr	r3, [pc, #144]	; (8008460 <RCCEx_PLL3_Config+0x160>)
 80083d0:	4013      	ands	r3, r2
 80083d2:	687a      	ldr	r2, [r7, #4]
 80083d4:	69d2      	ldr	r2, [r2, #28]
 80083d6:	00d2      	lsls	r2, r2, #3
 80083d8:	4920      	ldr	r1, [pc, #128]	; (800845c <RCCEx_PLL3_Config+0x15c>)
 80083da:	4313      	orrs	r3, r2
 80083dc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80083de:	4b1f      	ldr	r3, [pc, #124]	; (800845c <RCCEx_PLL3_Config+0x15c>)
 80083e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e2:	4a1e      	ldr	r2, [pc, #120]	; (800845c <RCCEx_PLL3_Config+0x15c>)
 80083e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d106      	bne.n	80083fe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80083f0:	4b1a      	ldr	r3, [pc, #104]	; (800845c <RCCEx_PLL3_Config+0x15c>)
 80083f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f4:	4a19      	ldr	r2, [pc, #100]	; (800845c <RCCEx_PLL3_Config+0x15c>)
 80083f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80083fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80083fc:	e00f      	b.n	800841e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	2b01      	cmp	r3, #1
 8008402:	d106      	bne.n	8008412 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008404:	4b15      	ldr	r3, [pc, #84]	; (800845c <RCCEx_PLL3_Config+0x15c>)
 8008406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008408:	4a14      	ldr	r2, [pc, #80]	; (800845c <RCCEx_PLL3_Config+0x15c>)
 800840a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800840e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008410:	e005      	b.n	800841e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008412:	4b12      	ldr	r3, [pc, #72]	; (800845c <RCCEx_PLL3_Config+0x15c>)
 8008414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008416:	4a11      	ldr	r2, [pc, #68]	; (800845c <RCCEx_PLL3_Config+0x15c>)
 8008418:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800841c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800841e:	4b0f      	ldr	r3, [pc, #60]	; (800845c <RCCEx_PLL3_Config+0x15c>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a0e      	ldr	r2, [pc, #56]	; (800845c <RCCEx_PLL3_Config+0x15c>)
 8008424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008428:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800842a:	f7f9 fca9 	bl	8001d80 <HAL_GetTick>
 800842e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008430:	e008      	b.n	8008444 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008432:	f7f9 fca5 	bl	8001d80 <HAL_GetTick>
 8008436:	4602      	mov	r2, r0
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	1ad3      	subs	r3, r2, r3
 800843c:	2b02      	cmp	r3, #2
 800843e:	d901      	bls.n	8008444 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008440:	2303      	movs	r3, #3
 8008442:	e006      	b.n	8008452 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008444:	4b05      	ldr	r3, [pc, #20]	; (800845c <RCCEx_PLL3_Config+0x15c>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800844c:	2b00      	cmp	r3, #0
 800844e:	d0f0      	beq.n	8008432 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008450:	7bfb      	ldrb	r3, [r7, #15]
}
 8008452:	4618      	mov	r0, r3
 8008454:	3710      	adds	r7, #16
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
 800845a:	bf00      	nop
 800845c:	58024400 	.word	0x58024400
 8008460:	ffff0007 	.word	0xffff0007

08008464 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008464:	b084      	sub	sp, #16
 8008466:	b580      	push	{r7, lr}
 8008468:	b084      	sub	sp, #16
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
 800846e:	f107 001c 	add.w	r0, r7, #28
 8008472:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008478:	2b01      	cmp	r3, #1
 800847a:	d120      	bne.n	80084be <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008480:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	68da      	ldr	r2, [r3, #12]
 800848c:	4b2a      	ldr	r3, [pc, #168]	; (8008538 <USB_CoreInit+0xd4>)
 800848e:	4013      	ands	r3, r2
 8008490:	687a      	ldr	r2, [r7, #4]
 8008492:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	68db      	ldr	r3, [r3, #12]
 8008498:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80084a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d105      	bne.n	80084b2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	68db      	ldr	r3, [r3, #12]
 80084aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f001 faf8 	bl	8009aa8 <USB_CoreReset>
 80084b8:	4603      	mov	r3, r0
 80084ba:	73fb      	strb	r3, [r7, #15]
 80084bc:	e01a      	b.n	80084f4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	68db      	ldr	r3, [r3, #12]
 80084c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f001 faec 	bl	8009aa8 <USB_CoreReset>
 80084d0:	4603      	mov	r3, r0
 80084d2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80084d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d106      	bne.n	80084e8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	639a      	str	r2, [r3, #56]	; 0x38
 80084e6:	e005      	b.n	80084f4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80084f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d116      	bne.n	8008528 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084fe:	b29a      	uxth	r2, r3
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008508:	4b0c      	ldr	r3, [pc, #48]	; (800853c <USB_CoreInit+0xd8>)
 800850a:	4313      	orrs	r3, r2
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	f043 0206 	orr.w	r2, r3, #6
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	f043 0220 	orr.w	r2, r3, #32
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008528:	7bfb      	ldrb	r3, [r7, #15]
}
 800852a:	4618      	mov	r0, r3
 800852c:	3710      	adds	r7, #16
 800852e:	46bd      	mov	sp, r7
 8008530:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008534:	b004      	add	sp, #16
 8008536:	4770      	bx	lr
 8008538:	ffbdffbf 	.word	0xffbdffbf
 800853c:	03ee0000 	.word	0x03ee0000

08008540 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008540:	b480      	push	{r7}
 8008542:	b087      	sub	sp, #28
 8008544:	af00      	add	r7, sp, #0
 8008546:	60f8      	str	r0, [r7, #12]
 8008548:	60b9      	str	r1, [r7, #8]
 800854a:	4613      	mov	r3, r2
 800854c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800854e:	79fb      	ldrb	r3, [r7, #7]
 8008550:	2b02      	cmp	r3, #2
 8008552:	d165      	bne.n	8008620 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	4a41      	ldr	r2, [pc, #260]	; (800865c <USB_SetTurnaroundTime+0x11c>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d906      	bls.n	800856a <USB_SetTurnaroundTime+0x2a>
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	4a40      	ldr	r2, [pc, #256]	; (8008660 <USB_SetTurnaroundTime+0x120>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d202      	bcs.n	800856a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008564:	230f      	movs	r3, #15
 8008566:	617b      	str	r3, [r7, #20]
 8008568:	e062      	b.n	8008630 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	4a3c      	ldr	r2, [pc, #240]	; (8008660 <USB_SetTurnaroundTime+0x120>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d306      	bcc.n	8008580 <USB_SetTurnaroundTime+0x40>
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	4a3b      	ldr	r2, [pc, #236]	; (8008664 <USB_SetTurnaroundTime+0x124>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d202      	bcs.n	8008580 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800857a:	230e      	movs	r3, #14
 800857c:	617b      	str	r3, [r7, #20]
 800857e:	e057      	b.n	8008630 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	4a38      	ldr	r2, [pc, #224]	; (8008664 <USB_SetTurnaroundTime+0x124>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d306      	bcc.n	8008596 <USB_SetTurnaroundTime+0x56>
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	4a37      	ldr	r2, [pc, #220]	; (8008668 <USB_SetTurnaroundTime+0x128>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d202      	bcs.n	8008596 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008590:	230d      	movs	r3, #13
 8008592:	617b      	str	r3, [r7, #20]
 8008594:	e04c      	b.n	8008630 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	4a33      	ldr	r2, [pc, #204]	; (8008668 <USB_SetTurnaroundTime+0x128>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d306      	bcc.n	80085ac <USB_SetTurnaroundTime+0x6c>
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	4a32      	ldr	r2, [pc, #200]	; (800866c <USB_SetTurnaroundTime+0x12c>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d802      	bhi.n	80085ac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80085a6:	230c      	movs	r3, #12
 80085a8:	617b      	str	r3, [r7, #20]
 80085aa:	e041      	b.n	8008630 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	4a2f      	ldr	r2, [pc, #188]	; (800866c <USB_SetTurnaroundTime+0x12c>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d906      	bls.n	80085c2 <USB_SetTurnaroundTime+0x82>
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	4a2e      	ldr	r2, [pc, #184]	; (8008670 <USB_SetTurnaroundTime+0x130>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d802      	bhi.n	80085c2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80085bc:	230b      	movs	r3, #11
 80085be:	617b      	str	r3, [r7, #20]
 80085c0:	e036      	b.n	8008630 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	4a2a      	ldr	r2, [pc, #168]	; (8008670 <USB_SetTurnaroundTime+0x130>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d906      	bls.n	80085d8 <USB_SetTurnaroundTime+0x98>
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	4a29      	ldr	r2, [pc, #164]	; (8008674 <USB_SetTurnaroundTime+0x134>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d802      	bhi.n	80085d8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80085d2:	230a      	movs	r3, #10
 80085d4:	617b      	str	r3, [r7, #20]
 80085d6:	e02b      	b.n	8008630 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	4a26      	ldr	r2, [pc, #152]	; (8008674 <USB_SetTurnaroundTime+0x134>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d906      	bls.n	80085ee <USB_SetTurnaroundTime+0xae>
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	4a25      	ldr	r2, [pc, #148]	; (8008678 <USB_SetTurnaroundTime+0x138>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d202      	bcs.n	80085ee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80085e8:	2309      	movs	r3, #9
 80085ea:	617b      	str	r3, [r7, #20]
 80085ec:	e020      	b.n	8008630 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	4a21      	ldr	r2, [pc, #132]	; (8008678 <USB_SetTurnaroundTime+0x138>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d306      	bcc.n	8008604 <USB_SetTurnaroundTime+0xc4>
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	4a20      	ldr	r2, [pc, #128]	; (800867c <USB_SetTurnaroundTime+0x13c>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d802      	bhi.n	8008604 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80085fe:	2308      	movs	r3, #8
 8008600:	617b      	str	r3, [r7, #20]
 8008602:	e015      	b.n	8008630 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	4a1d      	ldr	r2, [pc, #116]	; (800867c <USB_SetTurnaroundTime+0x13c>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d906      	bls.n	800861a <USB_SetTurnaroundTime+0xda>
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	4a1c      	ldr	r2, [pc, #112]	; (8008680 <USB_SetTurnaroundTime+0x140>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d202      	bcs.n	800861a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008614:	2307      	movs	r3, #7
 8008616:	617b      	str	r3, [r7, #20]
 8008618:	e00a      	b.n	8008630 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800861a:	2306      	movs	r3, #6
 800861c:	617b      	str	r3, [r7, #20]
 800861e:	e007      	b.n	8008630 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008620:	79fb      	ldrb	r3, [r7, #7]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d102      	bne.n	800862c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008626:	2309      	movs	r3, #9
 8008628:	617b      	str	r3, [r7, #20]
 800862a:	e001      	b.n	8008630 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800862c:	2309      	movs	r3, #9
 800862e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	68db      	ldr	r3, [r3, #12]
 8008634:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	68da      	ldr	r2, [r3, #12]
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	029b      	lsls	r3, r3, #10
 8008644:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008648:	431a      	orrs	r2, r3
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800864e:	2300      	movs	r3, #0
}
 8008650:	4618      	mov	r0, r3
 8008652:	371c      	adds	r7, #28
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr
 800865c:	00d8acbf 	.word	0x00d8acbf
 8008660:	00e4e1c0 	.word	0x00e4e1c0
 8008664:	00f42400 	.word	0x00f42400
 8008668:	01067380 	.word	0x01067380
 800866c:	011a499f 	.word	0x011a499f
 8008670:	01312cff 	.word	0x01312cff
 8008674:	014ca43f 	.word	0x014ca43f
 8008678:	016e3600 	.word	0x016e3600
 800867c:	01a6ab1f 	.word	0x01a6ab1f
 8008680:	01e84800 	.word	0x01e84800

08008684 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008684:	b480      	push	{r7}
 8008686:	b083      	sub	sp, #12
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	689b      	ldr	r3, [r3, #8]
 8008690:	f043 0201 	orr.w	r2, r3, #1
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008698:	2300      	movs	r3, #0
}
 800869a:	4618      	mov	r0, r3
 800869c:	370c      	adds	r7, #12
 800869e:	46bd      	mov	sp, r7
 80086a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a4:	4770      	bx	lr

080086a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80086a6:	b480      	push	{r7}
 80086a8:	b083      	sub	sp, #12
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	689b      	ldr	r3, [r3, #8]
 80086b2:	f023 0201 	bic.w	r2, r3, #1
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80086ba:	2300      	movs	r3, #0
}
 80086bc:	4618      	mov	r0, r3
 80086be:	370c      	adds	r7, #12
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b084      	sub	sp, #16
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	460b      	mov	r3, r1
 80086d2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80086d4:	2300      	movs	r3, #0
 80086d6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	68db      	ldr	r3, [r3, #12]
 80086dc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80086e4:	78fb      	ldrb	r3, [r7, #3]
 80086e6:	2b01      	cmp	r3, #1
 80086e8:	d115      	bne.n	8008716 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	68db      	ldr	r3, [r3, #12]
 80086ee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80086f6:	2001      	movs	r0, #1
 80086f8:	f7f9 fb4e 	bl	8001d98 <HAL_Delay>
      ms++;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	3301      	adds	r3, #1
 8008700:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f001 f93f 	bl	8009986 <USB_GetMode>
 8008708:	4603      	mov	r3, r0
 800870a:	2b01      	cmp	r3, #1
 800870c:	d01e      	beq.n	800874c <USB_SetCurrentMode+0x84>
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2b31      	cmp	r3, #49	; 0x31
 8008712:	d9f0      	bls.n	80086f6 <USB_SetCurrentMode+0x2e>
 8008714:	e01a      	b.n	800874c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008716:	78fb      	ldrb	r3, [r7, #3]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d115      	bne.n	8008748 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008728:	2001      	movs	r0, #1
 800872a:	f7f9 fb35 	bl	8001d98 <HAL_Delay>
      ms++;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	3301      	adds	r3, #1
 8008732:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f001 f926 	bl	8009986 <USB_GetMode>
 800873a:	4603      	mov	r3, r0
 800873c:	2b00      	cmp	r3, #0
 800873e:	d005      	beq.n	800874c <USB_SetCurrentMode+0x84>
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2b31      	cmp	r3, #49	; 0x31
 8008744:	d9f0      	bls.n	8008728 <USB_SetCurrentMode+0x60>
 8008746:	e001      	b.n	800874c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008748:	2301      	movs	r3, #1
 800874a:	e005      	b.n	8008758 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2b32      	cmp	r3, #50	; 0x32
 8008750:	d101      	bne.n	8008756 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008752:	2301      	movs	r3, #1
 8008754:	e000      	b.n	8008758 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008756:	2300      	movs	r3, #0
}
 8008758:	4618      	mov	r0, r3
 800875a:	3710      	adds	r7, #16
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}

08008760 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008760:	b084      	sub	sp, #16
 8008762:	b580      	push	{r7, lr}
 8008764:	b086      	sub	sp, #24
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
 800876a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800876e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008772:	2300      	movs	r3, #0
 8008774:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800877a:	2300      	movs	r3, #0
 800877c:	613b      	str	r3, [r7, #16]
 800877e:	e009      	b.n	8008794 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	3340      	adds	r3, #64	; 0x40
 8008786:	009b      	lsls	r3, r3, #2
 8008788:	4413      	add	r3, r2
 800878a:	2200      	movs	r2, #0
 800878c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	3301      	adds	r3, #1
 8008792:	613b      	str	r3, [r7, #16]
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	2b0e      	cmp	r3, #14
 8008798:	d9f2      	bls.n	8008780 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800879a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800879c:	2b00      	cmp	r3, #0
 800879e:	d11c      	bne.n	80087da <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	68fa      	ldr	r2, [r7, #12]
 80087aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087ae:	f043 0302 	orr.w	r3, r3, #2
 80087b2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	601a      	str	r2, [r3, #0]
 80087d8:	e005      	b.n	80087e6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087de:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80087ec:	461a      	mov	r2, r3
 80087ee:	2300      	movs	r3, #0
 80087f0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087f8:	4619      	mov	r1, r3
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008800:	461a      	mov	r2, r3
 8008802:	680b      	ldr	r3, [r1, #0]
 8008804:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008808:	2b01      	cmp	r3, #1
 800880a:	d10c      	bne.n	8008826 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800880c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800880e:	2b00      	cmp	r3, #0
 8008810:	d104      	bne.n	800881c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008812:	2100      	movs	r1, #0
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f000 f965 	bl	8008ae4 <USB_SetDevSpeed>
 800881a:	e008      	b.n	800882e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800881c:	2101      	movs	r1, #1
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f000 f960 	bl	8008ae4 <USB_SetDevSpeed>
 8008824:	e003      	b.n	800882e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008826:	2103      	movs	r1, #3
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f000 f95b 	bl	8008ae4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800882e:	2110      	movs	r1, #16
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f000 f8f3 	bl	8008a1c <USB_FlushTxFifo>
 8008836:	4603      	mov	r3, r0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d001      	beq.n	8008840 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800883c:	2301      	movs	r3, #1
 800883e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 f91f 	bl	8008a84 <USB_FlushRxFifo>
 8008846:	4603      	mov	r3, r0
 8008848:	2b00      	cmp	r3, #0
 800884a:	d001      	beq.n	8008850 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800884c:	2301      	movs	r3, #1
 800884e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008856:	461a      	mov	r2, r3
 8008858:	2300      	movs	r3, #0
 800885a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008862:	461a      	mov	r2, r3
 8008864:	2300      	movs	r3, #0
 8008866:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800886e:	461a      	mov	r2, r3
 8008870:	2300      	movs	r3, #0
 8008872:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008874:	2300      	movs	r3, #0
 8008876:	613b      	str	r3, [r7, #16]
 8008878:	e043      	b.n	8008902 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	015a      	lsls	r2, r3, #5
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	4413      	add	r3, r2
 8008882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800888c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008890:	d118      	bne.n	80088c4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d10a      	bne.n	80088ae <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	015a      	lsls	r2, r3, #5
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	4413      	add	r3, r2
 80088a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088a4:	461a      	mov	r2, r3
 80088a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80088aa:	6013      	str	r3, [r2, #0]
 80088ac:	e013      	b.n	80088d6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	015a      	lsls	r2, r3, #5
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	4413      	add	r3, r2
 80088b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088ba:	461a      	mov	r2, r3
 80088bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80088c0:	6013      	str	r3, [r2, #0]
 80088c2:	e008      	b.n	80088d6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	015a      	lsls	r2, r3, #5
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	4413      	add	r3, r2
 80088cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088d0:	461a      	mov	r2, r3
 80088d2:	2300      	movs	r3, #0
 80088d4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	015a      	lsls	r2, r3, #5
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	4413      	add	r3, r2
 80088de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088e2:	461a      	mov	r2, r3
 80088e4:	2300      	movs	r3, #0
 80088e6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	015a      	lsls	r2, r3, #5
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	4413      	add	r3, r2
 80088f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088f4:	461a      	mov	r2, r3
 80088f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80088fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	3301      	adds	r3, #1
 8008900:	613b      	str	r3, [r7, #16]
 8008902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008904:	693a      	ldr	r2, [r7, #16]
 8008906:	429a      	cmp	r2, r3
 8008908:	d3b7      	bcc.n	800887a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800890a:	2300      	movs	r3, #0
 800890c:	613b      	str	r3, [r7, #16]
 800890e:	e043      	b.n	8008998 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	015a      	lsls	r2, r3, #5
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	4413      	add	r3, r2
 8008918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008922:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008926:	d118      	bne.n	800895a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d10a      	bne.n	8008944 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	015a      	lsls	r2, r3, #5
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	4413      	add	r3, r2
 8008936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800893a:	461a      	mov	r2, r3
 800893c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008940:	6013      	str	r3, [r2, #0]
 8008942:	e013      	b.n	800896c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	015a      	lsls	r2, r3, #5
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	4413      	add	r3, r2
 800894c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008950:	461a      	mov	r2, r3
 8008952:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008956:	6013      	str	r3, [r2, #0]
 8008958:	e008      	b.n	800896c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	015a      	lsls	r2, r3, #5
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	4413      	add	r3, r2
 8008962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008966:	461a      	mov	r2, r3
 8008968:	2300      	movs	r3, #0
 800896a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	015a      	lsls	r2, r3, #5
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	4413      	add	r3, r2
 8008974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008978:	461a      	mov	r2, r3
 800897a:	2300      	movs	r3, #0
 800897c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	015a      	lsls	r2, r3, #5
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	4413      	add	r3, r2
 8008986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800898a:	461a      	mov	r2, r3
 800898c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008990:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	3301      	adds	r3, #1
 8008996:	613b      	str	r3, [r7, #16]
 8008998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899a:	693a      	ldr	r2, [r7, #16]
 800899c:	429a      	cmp	r2, r3
 800899e:	d3b7      	bcc.n	8008910 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089a6:	691b      	ldr	r3, [r3, #16]
 80089a8:	68fa      	ldr	r2, [r7, #12]
 80089aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089b2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2200      	movs	r2, #0
 80089b8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80089c0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80089c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d105      	bne.n	80089d4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	699b      	ldr	r3, [r3, #24]
 80089cc:	f043 0210 	orr.w	r2, r3, #16
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	699a      	ldr	r2, [r3, #24]
 80089d8:	4b0e      	ldr	r3, [pc, #56]	; (8008a14 <USB_DevInit+0x2b4>)
 80089da:	4313      	orrs	r3, r2
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80089e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d005      	beq.n	80089f2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	699b      	ldr	r3, [r3, #24]
 80089ea:	f043 0208 	orr.w	r2, r3, #8
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80089f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d105      	bne.n	8008a04 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	699a      	ldr	r2, [r3, #24]
 80089fc:	4b06      	ldr	r3, [pc, #24]	; (8008a18 <USB_DevInit+0x2b8>)
 80089fe:	4313      	orrs	r3, r2
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008a04:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3718      	adds	r7, #24
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a10:	b004      	add	sp, #16
 8008a12:	4770      	bx	lr
 8008a14:	803c3800 	.word	0x803c3800
 8008a18:	40000004 	.word	0x40000004

08008a1c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b085      	sub	sp, #20
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008a26:	2300      	movs	r3, #0
 8008a28:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	4a13      	ldr	r2, [pc, #76]	; (8008a80 <USB_FlushTxFifo+0x64>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d901      	bls.n	8008a3c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008a38:	2303      	movs	r3, #3
 8008a3a:	e01b      	b.n	8008a74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	691b      	ldr	r3, [r3, #16]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	daf2      	bge.n	8008a2a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008a44:	2300      	movs	r3, #0
 8008a46:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	019b      	lsls	r3, r3, #6
 8008a4c:	f043 0220 	orr.w	r2, r3, #32
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	3301      	adds	r3, #1
 8008a58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	4a08      	ldr	r2, [pc, #32]	; (8008a80 <USB_FlushTxFifo+0x64>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d901      	bls.n	8008a66 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008a62:	2303      	movs	r3, #3
 8008a64:	e006      	b.n	8008a74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	691b      	ldr	r3, [r3, #16]
 8008a6a:	f003 0320 	and.w	r3, r3, #32
 8008a6e:	2b20      	cmp	r3, #32
 8008a70:	d0f0      	beq.n	8008a54 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008a72:	2300      	movs	r3, #0
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3714      	adds	r7, #20
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr
 8008a80:	00030d40 	.word	0x00030d40

08008a84 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b085      	sub	sp, #20
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	3301      	adds	r3, #1
 8008a94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	4a11      	ldr	r2, [pc, #68]	; (8008ae0 <USB_FlushRxFifo+0x5c>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d901      	bls.n	8008aa2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008a9e:	2303      	movs	r3, #3
 8008aa0:	e018      	b.n	8008ad4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	691b      	ldr	r3, [r3, #16]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	daf2      	bge.n	8008a90 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2210      	movs	r2, #16
 8008ab2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	4a08      	ldr	r2, [pc, #32]	; (8008ae0 <USB_FlushRxFifo+0x5c>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d901      	bls.n	8008ac6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008ac2:	2303      	movs	r3, #3
 8008ac4:	e006      	b.n	8008ad4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	691b      	ldr	r3, [r3, #16]
 8008aca:	f003 0310 	and.w	r3, r3, #16
 8008ace:	2b10      	cmp	r3, #16
 8008ad0:	d0f0      	beq.n	8008ab4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008ad2:	2300      	movs	r3, #0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3714      	adds	r7, #20
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr
 8008ae0:	00030d40 	.word	0x00030d40

08008ae4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b085      	sub	sp, #20
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	460b      	mov	r3, r1
 8008aee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008afa:	681a      	ldr	r2, [r3, #0]
 8008afc:	78fb      	ldrb	r3, [r7, #3]
 8008afe:	68f9      	ldr	r1, [r7, #12]
 8008b00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b04:	4313      	orrs	r3, r2
 8008b06:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008b08:	2300      	movs	r3, #0
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3714      	adds	r7, #20
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b14:	4770      	bx	lr

08008b16 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008b16:	b480      	push	{r7}
 8008b18:	b087      	sub	sp, #28
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	f003 0306 	and.w	r3, r3, #6
 8008b2e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d102      	bne.n	8008b3c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008b36:	2300      	movs	r3, #0
 8008b38:	75fb      	strb	r3, [r7, #23]
 8008b3a:	e00a      	b.n	8008b52 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2b02      	cmp	r3, #2
 8008b40:	d002      	beq.n	8008b48 <USB_GetDevSpeed+0x32>
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2b06      	cmp	r3, #6
 8008b46:	d102      	bne.n	8008b4e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008b48:	2302      	movs	r3, #2
 8008b4a:	75fb      	strb	r3, [r7, #23]
 8008b4c:	e001      	b.n	8008b52 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008b4e:	230f      	movs	r3, #15
 8008b50:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008b52:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	371c      	adds	r7, #28
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr

08008b60 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b085      	sub	sp, #20
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	785b      	ldrb	r3, [r3, #1]
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	d139      	bne.n	8008bf0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b82:	69da      	ldr	r2, [r3, #28]
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	781b      	ldrb	r3, [r3, #0]
 8008b88:	f003 030f 	and.w	r3, r3, #15
 8008b8c:	2101      	movs	r1, #1
 8008b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8008b92:	b29b      	uxth	r3, r3
 8008b94:	68f9      	ldr	r1, [r7, #12]
 8008b96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	015a      	lsls	r2, r3, #5
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	4413      	add	r3, r2
 8008ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d153      	bne.n	8008c5c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	015a      	lsls	r2, r3, #5
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	4413      	add	r3, r2
 8008bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	791b      	ldrb	r3, [r3, #4]
 8008bce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008bd0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	059b      	lsls	r3, r3, #22
 8008bd6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008bd8:	431a      	orrs	r2, r3
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	0159      	lsls	r1, r3, #5
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	440b      	add	r3, r1
 8008be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008be6:	4619      	mov	r1, r3
 8008be8:	4b20      	ldr	r3, [pc, #128]	; (8008c6c <USB_ActivateEndpoint+0x10c>)
 8008bea:	4313      	orrs	r3, r2
 8008bec:	600b      	str	r3, [r1, #0]
 8008bee:	e035      	b.n	8008c5c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bf6:	69da      	ldr	r2, [r3, #28]
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	f003 030f 	and.w	r3, r3, #15
 8008c00:	2101      	movs	r1, #1
 8008c02:	fa01 f303 	lsl.w	r3, r1, r3
 8008c06:	041b      	lsls	r3, r3, #16
 8008c08:	68f9      	ldr	r1, [r7, #12]
 8008c0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	015a      	lsls	r2, r3, #5
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	4413      	add	r3, r2
 8008c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d119      	bne.n	8008c5c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	015a      	lsls	r2, r3, #5
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	4413      	add	r3, r2
 8008c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c34:	681a      	ldr	r2, [r3, #0]
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	689b      	ldr	r3, [r3, #8]
 8008c3a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	791b      	ldrb	r3, [r3, #4]
 8008c42:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008c44:	430b      	orrs	r3, r1
 8008c46:	431a      	orrs	r2, r3
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	0159      	lsls	r1, r3, #5
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	440b      	add	r3, r1
 8008c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c54:	4619      	mov	r1, r3
 8008c56:	4b05      	ldr	r3, [pc, #20]	; (8008c6c <USB_ActivateEndpoint+0x10c>)
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008c5c:	2300      	movs	r3, #0
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3714      	adds	r7, #20
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr
 8008c6a:	bf00      	nop
 8008c6c:	10008000 	.word	0x10008000

08008c70 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b085      	sub	sp, #20
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	785b      	ldrb	r3, [r3, #1]
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d161      	bne.n	8008d50 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	015a      	lsls	r2, r3, #5
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	4413      	add	r3, r2
 8008c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ca2:	d11f      	bne.n	8008ce4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	015a      	lsls	r2, r3, #5
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	4413      	add	r3, r2
 8008cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	68ba      	ldr	r2, [r7, #8]
 8008cb4:	0151      	lsls	r1, r2, #5
 8008cb6:	68fa      	ldr	r2, [r7, #12]
 8008cb8:	440a      	add	r2, r1
 8008cba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cbe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008cc2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	015a      	lsls	r2, r3, #5
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	4413      	add	r3, r2
 8008ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	68ba      	ldr	r2, [r7, #8]
 8008cd4:	0151      	lsls	r1, r2, #5
 8008cd6:	68fa      	ldr	r2, [r7, #12]
 8008cd8:	440a      	add	r2, r1
 8008cda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cde:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ce2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	781b      	ldrb	r3, [r3, #0]
 8008cf0:	f003 030f 	and.w	r3, r3, #15
 8008cf4:	2101      	movs	r1, #1
 8008cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	43db      	mvns	r3, r3
 8008cfe:	68f9      	ldr	r1, [r7, #12]
 8008d00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d04:	4013      	ands	r3, r2
 8008d06:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d0e:	69da      	ldr	r2, [r3, #28]
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	781b      	ldrb	r3, [r3, #0]
 8008d14:	f003 030f 	and.w	r3, r3, #15
 8008d18:	2101      	movs	r1, #1
 8008d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8008d1e:	b29b      	uxth	r3, r3
 8008d20:	43db      	mvns	r3, r3
 8008d22:	68f9      	ldr	r1, [r7, #12]
 8008d24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d28:	4013      	ands	r3, r2
 8008d2a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	015a      	lsls	r2, r3, #5
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	4413      	add	r3, r2
 8008d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d38:	681a      	ldr	r2, [r3, #0]
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	0159      	lsls	r1, r3, #5
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	440b      	add	r3, r1
 8008d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d46:	4619      	mov	r1, r3
 8008d48:	4b35      	ldr	r3, [pc, #212]	; (8008e20 <USB_DeactivateEndpoint+0x1b0>)
 8008d4a:	4013      	ands	r3, r2
 8008d4c:	600b      	str	r3, [r1, #0]
 8008d4e:	e060      	b.n	8008e12 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	015a      	lsls	r2, r3, #5
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	4413      	add	r3, r2
 8008d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d66:	d11f      	bne.n	8008da8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	015a      	lsls	r2, r3, #5
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	4413      	add	r3, r2
 8008d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	68ba      	ldr	r2, [r7, #8]
 8008d78:	0151      	lsls	r1, r2, #5
 8008d7a:	68fa      	ldr	r2, [r7, #12]
 8008d7c:	440a      	add	r2, r1
 8008d7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008d86:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	015a      	lsls	r2, r3, #5
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	4413      	add	r3, r2
 8008d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	68ba      	ldr	r2, [r7, #8]
 8008d98:	0151      	lsls	r1, r2, #5
 8008d9a:	68fa      	ldr	r2, [r7, #12]
 8008d9c:	440a      	add	r2, r1
 8008d9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008da2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008da6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	f003 030f 	and.w	r3, r3, #15
 8008db8:	2101      	movs	r1, #1
 8008dba:	fa01 f303 	lsl.w	r3, r1, r3
 8008dbe:	041b      	lsls	r3, r3, #16
 8008dc0:	43db      	mvns	r3, r3
 8008dc2:	68f9      	ldr	r1, [r7, #12]
 8008dc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008dc8:	4013      	ands	r3, r2
 8008dca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dd2:	69da      	ldr	r2, [r3, #28]
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	f003 030f 	and.w	r3, r3, #15
 8008ddc:	2101      	movs	r1, #1
 8008dde:	fa01 f303 	lsl.w	r3, r1, r3
 8008de2:	041b      	lsls	r3, r3, #16
 8008de4:	43db      	mvns	r3, r3
 8008de6:	68f9      	ldr	r1, [r7, #12]
 8008de8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008dec:	4013      	ands	r3, r2
 8008dee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	015a      	lsls	r2, r3, #5
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	4413      	add	r3, r2
 8008df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dfc:	681a      	ldr	r2, [r3, #0]
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	0159      	lsls	r1, r3, #5
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	440b      	add	r3, r1
 8008e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	4b05      	ldr	r3, [pc, #20]	; (8008e24 <USB_DeactivateEndpoint+0x1b4>)
 8008e0e:	4013      	ands	r3, r2
 8008e10:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008e12:	2300      	movs	r3, #0
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3714      	adds	r7, #20
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr
 8008e20:	ec337800 	.word	0xec337800
 8008e24:	eff37800 	.word	0xeff37800

08008e28 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b08a      	sub	sp, #40	; 0x28
 8008e2c:	af02      	add	r7, sp, #8
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	60b9      	str	r1, [r7, #8]
 8008e32:	4613      	mov	r3, r2
 8008e34:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	785b      	ldrb	r3, [r3, #1]
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	f040 8181 	bne.w	800914c <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	691b      	ldr	r3, [r3, #16]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d132      	bne.n	8008eb8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008e52:	69bb      	ldr	r3, [r7, #24]
 8008e54:	015a      	lsls	r2, r3, #5
 8008e56:	69fb      	ldr	r3, [r7, #28]
 8008e58:	4413      	add	r3, r2
 8008e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e5e:	691a      	ldr	r2, [r3, #16]
 8008e60:	69bb      	ldr	r3, [r7, #24]
 8008e62:	0159      	lsls	r1, r3, #5
 8008e64:	69fb      	ldr	r3, [r7, #28]
 8008e66:	440b      	add	r3, r1
 8008e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	4ba5      	ldr	r3, [pc, #660]	; (8009104 <USB_EPStartXfer+0x2dc>)
 8008e70:	4013      	ands	r3, r2
 8008e72:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008e74:	69bb      	ldr	r3, [r7, #24]
 8008e76:	015a      	lsls	r2, r3, #5
 8008e78:	69fb      	ldr	r3, [r7, #28]
 8008e7a:	4413      	add	r3, r2
 8008e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e80:	691b      	ldr	r3, [r3, #16]
 8008e82:	69ba      	ldr	r2, [r7, #24]
 8008e84:	0151      	lsls	r1, r2, #5
 8008e86:	69fa      	ldr	r2, [r7, #28]
 8008e88:	440a      	add	r2, r1
 8008e8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008e94:	69bb      	ldr	r3, [r7, #24]
 8008e96:	015a      	lsls	r2, r3, #5
 8008e98:	69fb      	ldr	r3, [r7, #28]
 8008e9a:	4413      	add	r3, r2
 8008e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ea0:	691a      	ldr	r2, [r3, #16]
 8008ea2:	69bb      	ldr	r3, [r7, #24]
 8008ea4:	0159      	lsls	r1, r3, #5
 8008ea6:	69fb      	ldr	r3, [r7, #28]
 8008ea8:	440b      	add	r3, r1
 8008eaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eae:	4619      	mov	r1, r3
 8008eb0:	4b95      	ldr	r3, [pc, #596]	; (8009108 <USB_EPStartXfer+0x2e0>)
 8008eb2:	4013      	ands	r3, r2
 8008eb4:	610b      	str	r3, [r1, #16]
 8008eb6:	e092      	b.n	8008fde <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008eb8:	69bb      	ldr	r3, [r7, #24]
 8008eba:	015a      	lsls	r2, r3, #5
 8008ebc:	69fb      	ldr	r3, [r7, #28]
 8008ebe:	4413      	add	r3, r2
 8008ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ec4:	691a      	ldr	r2, [r3, #16]
 8008ec6:	69bb      	ldr	r3, [r7, #24]
 8008ec8:	0159      	lsls	r1, r3, #5
 8008eca:	69fb      	ldr	r3, [r7, #28]
 8008ecc:	440b      	add	r3, r1
 8008ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ed2:	4619      	mov	r1, r3
 8008ed4:	4b8c      	ldr	r3, [pc, #560]	; (8009108 <USB_EPStartXfer+0x2e0>)
 8008ed6:	4013      	ands	r3, r2
 8008ed8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008eda:	69bb      	ldr	r3, [r7, #24]
 8008edc:	015a      	lsls	r2, r3, #5
 8008ede:	69fb      	ldr	r3, [r7, #28]
 8008ee0:	4413      	add	r3, r2
 8008ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ee6:	691a      	ldr	r2, [r3, #16]
 8008ee8:	69bb      	ldr	r3, [r7, #24]
 8008eea:	0159      	lsls	r1, r3, #5
 8008eec:	69fb      	ldr	r3, [r7, #28]
 8008eee:	440b      	add	r3, r1
 8008ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	4b83      	ldr	r3, [pc, #524]	; (8009104 <USB_EPStartXfer+0x2dc>)
 8008ef8:	4013      	ands	r3, r2
 8008efa:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8008efc:	69bb      	ldr	r3, [r7, #24]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d11a      	bne.n	8008f38 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	691a      	ldr	r2, [r3, #16]
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	689b      	ldr	r3, [r3, #8]
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d903      	bls.n	8008f16 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	689a      	ldr	r2, [r3, #8]
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008f16:	69bb      	ldr	r3, [r7, #24]
 8008f18:	015a      	lsls	r2, r3, #5
 8008f1a:	69fb      	ldr	r3, [r7, #28]
 8008f1c:	4413      	add	r3, r2
 8008f1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f22:	691b      	ldr	r3, [r3, #16]
 8008f24:	69ba      	ldr	r2, [r7, #24]
 8008f26:	0151      	lsls	r1, r2, #5
 8008f28:	69fa      	ldr	r2, [r7, #28]
 8008f2a:	440a      	add	r2, r1
 8008f2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f34:	6113      	str	r3, [r2, #16]
 8008f36:	e01b      	b.n	8008f70 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008f38:	69bb      	ldr	r3, [r7, #24]
 8008f3a:	015a      	lsls	r2, r3, #5
 8008f3c:	69fb      	ldr	r3, [r7, #28]
 8008f3e:	4413      	add	r3, r2
 8008f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f44:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	6919      	ldr	r1, [r3, #16]
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	689b      	ldr	r3, [r3, #8]
 8008f4e:	440b      	add	r3, r1
 8008f50:	1e59      	subs	r1, r3, #1
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	689b      	ldr	r3, [r3, #8]
 8008f56:	fbb1 f3f3 	udiv	r3, r1, r3
 8008f5a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008f5c:	4b6b      	ldr	r3, [pc, #428]	; (800910c <USB_EPStartXfer+0x2e4>)
 8008f5e:	400b      	ands	r3, r1
 8008f60:	69b9      	ldr	r1, [r7, #24]
 8008f62:	0148      	lsls	r0, r1, #5
 8008f64:	69f9      	ldr	r1, [r7, #28]
 8008f66:	4401      	add	r1, r0
 8008f68:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008f70:	69bb      	ldr	r3, [r7, #24]
 8008f72:	015a      	lsls	r2, r3, #5
 8008f74:	69fb      	ldr	r3, [r7, #28]
 8008f76:	4413      	add	r3, r2
 8008f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f7c:	691a      	ldr	r2, [r3, #16]
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	691b      	ldr	r3, [r3, #16]
 8008f82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f86:	69b9      	ldr	r1, [r7, #24]
 8008f88:	0148      	lsls	r0, r1, #5
 8008f8a:	69f9      	ldr	r1, [r7, #28]
 8008f8c:	4401      	add	r1, r0
 8008f8e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008f92:	4313      	orrs	r3, r2
 8008f94:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	791b      	ldrb	r3, [r3, #4]
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	d11f      	bne.n	8008fde <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008f9e:	69bb      	ldr	r3, [r7, #24]
 8008fa0:	015a      	lsls	r2, r3, #5
 8008fa2:	69fb      	ldr	r3, [r7, #28]
 8008fa4:	4413      	add	r3, r2
 8008fa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008faa:	691b      	ldr	r3, [r3, #16]
 8008fac:	69ba      	ldr	r2, [r7, #24]
 8008fae:	0151      	lsls	r1, r2, #5
 8008fb0:	69fa      	ldr	r2, [r7, #28]
 8008fb2:	440a      	add	r2, r1
 8008fb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fb8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008fbc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008fbe:	69bb      	ldr	r3, [r7, #24]
 8008fc0:	015a      	lsls	r2, r3, #5
 8008fc2:	69fb      	ldr	r3, [r7, #28]
 8008fc4:	4413      	add	r3, r2
 8008fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fca:	691b      	ldr	r3, [r3, #16]
 8008fcc:	69ba      	ldr	r2, [r7, #24]
 8008fce:	0151      	lsls	r1, r2, #5
 8008fd0:	69fa      	ldr	r2, [r7, #28]
 8008fd2:	440a      	add	r2, r1
 8008fd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fd8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008fdc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008fde:	79fb      	ldrb	r3, [r7, #7]
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d14b      	bne.n	800907c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	69db      	ldr	r3, [r3, #28]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d009      	beq.n	8009000 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008fec:	69bb      	ldr	r3, [r7, #24]
 8008fee:	015a      	lsls	r2, r3, #5
 8008ff0:	69fb      	ldr	r3, [r7, #28]
 8008ff2:	4413      	add	r3, r2
 8008ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ff8:	461a      	mov	r2, r3
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	69db      	ldr	r3, [r3, #28]
 8008ffe:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	791b      	ldrb	r3, [r3, #4]
 8009004:	2b01      	cmp	r3, #1
 8009006:	d128      	bne.n	800905a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009008:	69fb      	ldr	r3, [r7, #28]
 800900a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800900e:	689b      	ldr	r3, [r3, #8]
 8009010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009014:	2b00      	cmp	r3, #0
 8009016:	d110      	bne.n	800903a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009018:	69bb      	ldr	r3, [r7, #24]
 800901a:	015a      	lsls	r2, r3, #5
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	4413      	add	r3, r2
 8009020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	69ba      	ldr	r2, [r7, #24]
 8009028:	0151      	lsls	r1, r2, #5
 800902a:	69fa      	ldr	r2, [r7, #28]
 800902c:	440a      	add	r2, r1
 800902e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009032:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009036:	6013      	str	r3, [r2, #0]
 8009038:	e00f      	b.n	800905a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800903a:	69bb      	ldr	r3, [r7, #24]
 800903c:	015a      	lsls	r2, r3, #5
 800903e:	69fb      	ldr	r3, [r7, #28]
 8009040:	4413      	add	r3, r2
 8009042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	69ba      	ldr	r2, [r7, #24]
 800904a:	0151      	lsls	r1, r2, #5
 800904c:	69fa      	ldr	r2, [r7, #28]
 800904e:	440a      	add	r2, r1
 8009050:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009058:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800905a:	69bb      	ldr	r3, [r7, #24]
 800905c:	015a      	lsls	r2, r3, #5
 800905e:	69fb      	ldr	r3, [r7, #28]
 8009060:	4413      	add	r3, r2
 8009062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	69ba      	ldr	r2, [r7, #24]
 800906a:	0151      	lsls	r1, r2, #5
 800906c:	69fa      	ldr	r2, [r7, #28]
 800906e:	440a      	add	r2, r1
 8009070:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009074:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009078:	6013      	str	r3, [r2, #0]
 800907a:	e16a      	b.n	8009352 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800907c:	69bb      	ldr	r3, [r7, #24]
 800907e:	015a      	lsls	r2, r3, #5
 8009080:	69fb      	ldr	r3, [r7, #28]
 8009082:	4413      	add	r3, r2
 8009084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	69ba      	ldr	r2, [r7, #24]
 800908c:	0151      	lsls	r1, r2, #5
 800908e:	69fa      	ldr	r2, [r7, #28]
 8009090:	440a      	add	r2, r1
 8009092:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009096:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800909a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	791b      	ldrb	r3, [r3, #4]
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d015      	beq.n	80090d0 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	691b      	ldr	r3, [r3, #16]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	f000 8152 	beq.w	8009352 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80090ae:	69fb      	ldr	r3, [r7, #28]
 80090b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	f003 030f 	and.w	r3, r3, #15
 80090be:	2101      	movs	r1, #1
 80090c0:	fa01 f303 	lsl.w	r3, r1, r3
 80090c4:	69f9      	ldr	r1, [r7, #28]
 80090c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090ca:	4313      	orrs	r3, r2
 80090cc:	634b      	str	r3, [r1, #52]	; 0x34
 80090ce:	e140      	b.n	8009352 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80090d0:	69fb      	ldr	r3, [r7, #28]
 80090d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090d6:	689b      	ldr	r3, [r3, #8]
 80090d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d117      	bne.n	8009110 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80090e0:	69bb      	ldr	r3, [r7, #24]
 80090e2:	015a      	lsls	r2, r3, #5
 80090e4:	69fb      	ldr	r3, [r7, #28]
 80090e6:	4413      	add	r3, r2
 80090e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	69ba      	ldr	r2, [r7, #24]
 80090f0:	0151      	lsls	r1, r2, #5
 80090f2:	69fa      	ldr	r2, [r7, #28]
 80090f4:	440a      	add	r2, r1
 80090f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80090fe:	6013      	str	r3, [r2, #0]
 8009100:	e016      	b.n	8009130 <USB_EPStartXfer+0x308>
 8009102:	bf00      	nop
 8009104:	e007ffff 	.word	0xe007ffff
 8009108:	fff80000 	.word	0xfff80000
 800910c:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009110:	69bb      	ldr	r3, [r7, #24]
 8009112:	015a      	lsls	r2, r3, #5
 8009114:	69fb      	ldr	r3, [r7, #28]
 8009116:	4413      	add	r3, r2
 8009118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	69ba      	ldr	r2, [r7, #24]
 8009120:	0151      	lsls	r1, r2, #5
 8009122:	69fa      	ldr	r2, [r7, #28]
 8009124:	440a      	add	r2, r1
 8009126:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800912a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800912e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	68d9      	ldr	r1, [r3, #12]
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	781a      	ldrb	r2, [r3, #0]
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	691b      	ldr	r3, [r3, #16]
 800913c:	b298      	uxth	r0, r3
 800913e:	79fb      	ldrb	r3, [r7, #7]
 8009140:	9300      	str	r3, [sp, #0]
 8009142:	4603      	mov	r3, r0
 8009144:	68f8      	ldr	r0, [r7, #12]
 8009146:	f000 f9b9 	bl	80094bc <USB_WritePacket>
 800914a:	e102      	b.n	8009352 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800914c:	69bb      	ldr	r3, [r7, #24]
 800914e:	015a      	lsls	r2, r3, #5
 8009150:	69fb      	ldr	r3, [r7, #28]
 8009152:	4413      	add	r3, r2
 8009154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009158:	691a      	ldr	r2, [r3, #16]
 800915a:	69bb      	ldr	r3, [r7, #24]
 800915c:	0159      	lsls	r1, r3, #5
 800915e:	69fb      	ldr	r3, [r7, #28]
 8009160:	440b      	add	r3, r1
 8009162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009166:	4619      	mov	r1, r3
 8009168:	4b7c      	ldr	r3, [pc, #496]	; (800935c <USB_EPStartXfer+0x534>)
 800916a:	4013      	ands	r3, r2
 800916c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800916e:	69bb      	ldr	r3, [r7, #24]
 8009170:	015a      	lsls	r2, r3, #5
 8009172:	69fb      	ldr	r3, [r7, #28]
 8009174:	4413      	add	r3, r2
 8009176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800917a:	691a      	ldr	r2, [r3, #16]
 800917c:	69bb      	ldr	r3, [r7, #24]
 800917e:	0159      	lsls	r1, r3, #5
 8009180:	69fb      	ldr	r3, [r7, #28]
 8009182:	440b      	add	r3, r1
 8009184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009188:	4619      	mov	r1, r3
 800918a:	4b75      	ldr	r3, [pc, #468]	; (8009360 <USB_EPStartXfer+0x538>)
 800918c:	4013      	ands	r3, r2
 800918e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8009190:	69bb      	ldr	r3, [r7, #24]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d12f      	bne.n	80091f6 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	691b      	ldr	r3, [r3, #16]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d003      	beq.n	80091a6 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	689a      	ldr	r2, [r3, #8]
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	689a      	ldr	r2, [r3, #8]
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80091ae:	69bb      	ldr	r3, [r7, #24]
 80091b0:	015a      	lsls	r2, r3, #5
 80091b2:	69fb      	ldr	r3, [r7, #28]
 80091b4:	4413      	add	r3, r2
 80091b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091ba:	691a      	ldr	r2, [r3, #16]
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	6a1b      	ldr	r3, [r3, #32]
 80091c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091c4:	69b9      	ldr	r1, [r7, #24]
 80091c6:	0148      	lsls	r0, r1, #5
 80091c8:	69f9      	ldr	r1, [r7, #28]
 80091ca:	4401      	add	r1, r0
 80091cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80091d0:	4313      	orrs	r3, r2
 80091d2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80091d4:	69bb      	ldr	r3, [r7, #24]
 80091d6:	015a      	lsls	r2, r3, #5
 80091d8:	69fb      	ldr	r3, [r7, #28]
 80091da:	4413      	add	r3, r2
 80091dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091e0:	691b      	ldr	r3, [r3, #16]
 80091e2:	69ba      	ldr	r2, [r7, #24]
 80091e4:	0151      	lsls	r1, r2, #5
 80091e6:	69fa      	ldr	r2, [r7, #28]
 80091e8:	440a      	add	r2, r1
 80091ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80091f2:	6113      	str	r3, [r2, #16]
 80091f4:	e05f      	b.n	80092b6 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	691b      	ldr	r3, [r3, #16]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d123      	bne.n	8009246 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80091fe:	69bb      	ldr	r3, [r7, #24]
 8009200:	015a      	lsls	r2, r3, #5
 8009202:	69fb      	ldr	r3, [r7, #28]
 8009204:	4413      	add	r3, r2
 8009206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800920a:	691a      	ldr	r2, [r3, #16]
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	689b      	ldr	r3, [r3, #8]
 8009210:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009214:	69b9      	ldr	r1, [r7, #24]
 8009216:	0148      	lsls	r0, r1, #5
 8009218:	69f9      	ldr	r1, [r7, #28]
 800921a:	4401      	add	r1, r0
 800921c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009220:	4313      	orrs	r3, r2
 8009222:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009224:	69bb      	ldr	r3, [r7, #24]
 8009226:	015a      	lsls	r2, r3, #5
 8009228:	69fb      	ldr	r3, [r7, #28]
 800922a:	4413      	add	r3, r2
 800922c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009230:	691b      	ldr	r3, [r3, #16]
 8009232:	69ba      	ldr	r2, [r7, #24]
 8009234:	0151      	lsls	r1, r2, #5
 8009236:	69fa      	ldr	r2, [r7, #28]
 8009238:	440a      	add	r2, r1
 800923a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800923e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009242:	6113      	str	r3, [r2, #16]
 8009244:	e037      	b.n	80092b6 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	691a      	ldr	r2, [r3, #16]
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	689b      	ldr	r3, [r3, #8]
 800924e:	4413      	add	r3, r2
 8009250:	1e5a      	subs	r2, r3, #1
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	689b      	ldr	r3, [r3, #8]
 8009256:	fbb2 f3f3 	udiv	r3, r2, r3
 800925a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	689b      	ldr	r3, [r3, #8]
 8009260:	8afa      	ldrh	r2, [r7, #22]
 8009262:	fb03 f202 	mul.w	r2, r3, r2
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800926a:	69bb      	ldr	r3, [r7, #24]
 800926c:	015a      	lsls	r2, r3, #5
 800926e:	69fb      	ldr	r3, [r7, #28]
 8009270:	4413      	add	r3, r2
 8009272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009276:	691a      	ldr	r2, [r3, #16]
 8009278:	8afb      	ldrh	r3, [r7, #22]
 800927a:	04d9      	lsls	r1, r3, #19
 800927c:	4b39      	ldr	r3, [pc, #228]	; (8009364 <USB_EPStartXfer+0x53c>)
 800927e:	400b      	ands	r3, r1
 8009280:	69b9      	ldr	r1, [r7, #24]
 8009282:	0148      	lsls	r0, r1, #5
 8009284:	69f9      	ldr	r1, [r7, #28]
 8009286:	4401      	add	r1, r0
 8009288:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800928c:	4313      	orrs	r3, r2
 800928e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009290:	69bb      	ldr	r3, [r7, #24]
 8009292:	015a      	lsls	r2, r3, #5
 8009294:	69fb      	ldr	r3, [r7, #28]
 8009296:	4413      	add	r3, r2
 8009298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800929c:	691a      	ldr	r2, [r3, #16]
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	6a1b      	ldr	r3, [r3, #32]
 80092a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80092a6:	69b9      	ldr	r1, [r7, #24]
 80092a8:	0148      	lsls	r0, r1, #5
 80092aa:	69f9      	ldr	r1, [r7, #28]
 80092ac:	4401      	add	r1, r0
 80092ae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80092b2:	4313      	orrs	r3, r2
 80092b4:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80092b6:	79fb      	ldrb	r3, [r7, #7]
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d10d      	bne.n	80092d8 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	68db      	ldr	r3, [r3, #12]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d009      	beq.n	80092d8 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	68d9      	ldr	r1, [r3, #12]
 80092c8:	69bb      	ldr	r3, [r7, #24]
 80092ca:	015a      	lsls	r2, r3, #5
 80092cc:	69fb      	ldr	r3, [r7, #28]
 80092ce:	4413      	add	r3, r2
 80092d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092d4:	460a      	mov	r2, r1
 80092d6:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	791b      	ldrb	r3, [r3, #4]
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d128      	bne.n	8009332 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80092e0:	69fb      	ldr	r3, [r7, #28]
 80092e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092e6:	689b      	ldr	r3, [r3, #8]
 80092e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d110      	bne.n	8009312 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80092f0:	69bb      	ldr	r3, [r7, #24]
 80092f2:	015a      	lsls	r2, r3, #5
 80092f4:	69fb      	ldr	r3, [r7, #28]
 80092f6:	4413      	add	r3, r2
 80092f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	69ba      	ldr	r2, [r7, #24]
 8009300:	0151      	lsls	r1, r2, #5
 8009302:	69fa      	ldr	r2, [r7, #28]
 8009304:	440a      	add	r2, r1
 8009306:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800930a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800930e:	6013      	str	r3, [r2, #0]
 8009310:	e00f      	b.n	8009332 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009312:	69bb      	ldr	r3, [r7, #24]
 8009314:	015a      	lsls	r2, r3, #5
 8009316:	69fb      	ldr	r3, [r7, #28]
 8009318:	4413      	add	r3, r2
 800931a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	69ba      	ldr	r2, [r7, #24]
 8009322:	0151      	lsls	r1, r2, #5
 8009324:	69fa      	ldr	r2, [r7, #28]
 8009326:	440a      	add	r2, r1
 8009328:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800932c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009330:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009332:	69bb      	ldr	r3, [r7, #24]
 8009334:	015a      	lsls	r2, r3, #5
 8009336:	69fb      	ldr	r3, [r7, #28]
 8009338:	4413      	add	r3, r2
 800933a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	69ba      	ldr	r2, [r7, #24]
 8009342:	0151      	lsls	r1, r2, #5
 8009344:	69fa      	ldr	r2, [r7, #28]
 8009346:	440a      	add	r2, r1
 8009348:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800934c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009350:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009352:	2300      	movs	r3, #0
}
 8009354:	4618      	mov	r0, r3
 8009356:	3720      	adds	r7, #32
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}
 800935c:	fff80000 	.word	0xfff80000
 8009360:	e007ffff 	.word	0xe007ffff
 8009364:	1ff80000 	.word	0x1ff80000

08009368 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009368:	b480      	push	{r7}
 800936a:	b087      	sub	sp, #28
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
 8009370:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009372:	2300      	movs	r3, #0
 8009374:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009376:	2300      	movs	r3, #0
 8009378:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	785b      	ldrb	r3, [r3, #1]
 8009382:	2b01      	cmp	r3, #1
 8009384:	d14a      	bne.n	800941c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	781b      	ldrb	r3, [r3, #0]
 800938a:	015a      	lsls	r2, r3, #5
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	4413      	add	r3, r2
 8009390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800939a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800939e:	f040 8086 	bne.w	80094ae <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	015a      	lsls	r2, r3, #5
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	4413      	add	r3, r2
 80093ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	683a      	ldr	r2, [r7, #0]
 80093b4:	7812      	ldrb	r2, [r2, #0]
 80093b6:	0151      	lsls	r1, r2, #5
 80093b8:	693a      	ldr	r2, [r7, #16]
 80093ba:	440a      	add	r2, r1
 80093bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80093c4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	781b      	ldrb	r3, [r3, #0]
 80093ca:	015a      	lsls	r2, r3, #5
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	4413      	add	r3, r2
 80093d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	683a      	ldr	r2, [r7, #0]
 80093d8:	7812      	ldrb	r2, [r2, #0]
 80093da:	0151      	lsls	r1, r2, #5
 80093dc:	693a      	ldr	r2, [r7, #16]
 80093de:	440a      	add	r2, r1
 80093e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80093e8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	3301      	adds	r3, #1
 80093ee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f242 7210 	movw	r2, #10000	; 0x2710
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d902      	bls.n	8009400 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80093fa:	2301      	movs	r3, #1
 80093fc:	75fb      	strb	r3, [r7, #23]
          break;
 80093fe:	e056      	b.n	80094ae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	781b      	ldrb	r3, [r3, #0]
 8009404:	015a      	lsls	r2, r3, #5
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	4413      	add	r3, r2
 800940a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009414:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009418:	d0e7      	beq.n	80093ea <USB_EPStopXfer+0x82>
 800941a:	e048      	b.n	80094ae <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	781b      	ldrb	r3, [r3, #0]
 8009420:	015a      	lsls	r2, r3, #5
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	4413      	add	r3, r2
 8009426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009430:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009434:	d13b      	bne.n	80094ae <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	781b      	ldrb	r3, [r3, #0]
 800943a:	015a      	lsls	r2, r3, #5
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	4413      	add	r3, r2
 8009440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	683a      	ldr	r2, [r7, #0]
 8009448:	7812      	ldrb	r2, [r2, #0]
 800944a:	0151      	lsls	r1, r2, #5
 800944c:	693a      	ldr	r2, [r7, #16]
 800944e:	440a      	add	r2, r1
 8009450:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009454:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009458:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	015a      	lsls	r2, r3, #5
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	4413      	add	r3, r2
 8009464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	683a      	ldr	r2, [r7, #0]
 800946c:	7812      	ldrb	r2, [r2, #0]
 800946e:	0151      	lsls	r1, r2, #5
 8009470:	693a      	ldr	r2, [r7, #16]
 8009472:	440a      	add	r2, r1
 8009474:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009478:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800947c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	3301      	adds	r3, #1
 8009482:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	f242 7210 	movw	r2, #10000	; 0x2710
 800948a:	4293      	cmp	r3, r2
 800948c:	d902      	bls.n	8009494 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800948e:	2301      	movs	r3, #1
 8009490:	75fb      	strb	r3, [r7, #23]
          break;
 8009492:	e00c      	b.n	80094ae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	781b      	ldrb	r3, [r3, #0]
 8009498:	015a      	lsls	r2, r3, #5
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	4413      	add	r3, r2
 800949e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80094a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80094ac:	d0e7      	beq.n	800947e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80094ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	371c      	adds	r7, #28
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr

080094bc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80094bc:	b480      	push	{r7}
 80094be:	b089      	sub	sp, #36	; 0x24
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	60f8      	str	r0, [r7, #12]
 80094c4:	60b9      	str	r1, [r7, #8]
 80094c6:	4611      	mov	r1, r2
 80094c8:	461a      	mov	r2, r3
 80094ca:	460b      	mov	r3, r1
 80094cc:	71fb      	strb	r3, [r7, #7]
 80094ce:	4613      	mov	r3, r2
 80094d0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80094da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d123      	bne.n	800952a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80094e2:	88bb      	ldrh	r3, [r7, #4]
 80094e4:	3303      	adds	r3, #3
 80094e6:	089b      	lsrs	r3, r3, #2
 80094e8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80094ea:	2300      	movs	r3, #0
 80094ec:	61bb      	str	r3, [r7, #24]
 80094ee:	e018      	b.n	8009522 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80094f0:	79fb      	ldrb	r3, [r7, #7]
 80094f2:	031a      	lsls	r2, r3, #12
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	4413      	add	r3, r2
 80094f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094fc:	461a      	mov	r2, r3
 80094fe:	69fb      	ldr	r3, [r7, #28]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009504:	69fb      	ldr	r3, [r7, #28]
 8009506:	3301      	adds	r3, #1
 8009508:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800950a:	69fb      	ldr	r3, [r7, #28]
 800950c:	3301      	adds	r3, #1
 800950e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009510:	69fb      	ldr	r3, [r7, #28]
 8009512:	3301      	adds	r3, #1
 8009514:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009516:	69fb      	ldr	r3, [r7, #28]
 8009518:	3301      	adds	r3, #1
 800951a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800951c:	69bb      	ldr	r3, [r7, #24]
 800951e:	3301      	adds	r3, #1
 8009520:	61bb      	str	r3, [r7, #24]
 8009522:	69ba      	ldr	r2, [r7, #24]
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	429a      	cmp	r2, r3
 8009528:	d3e2      	bcc.n	80094f0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800952a:	2300      	movs	r3, #0
}
 800952c:	4618      	mov	r0, r3
 800952e:	3724      	adds	r7, #36	; 0x24
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr

08009538 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009538:	b480      	push	{r7}
 800953a:	b08b      	sub	sp, #44	; 0x2c
 800953c:	af00      	add	r7, sp, #0
 800953e:	60f8      	str	r0, [r7, #12]
 8009540:	60b9      	str	r1, [r7, #8]
 8009542:	4613      	mov	r3, r2
 8009544:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800954e:	88fb      	ldrh	r3, [r7, #6]
 8009550:	089b      	lsrs	r3, r3, #2
 8009552:	b29b      	uxth	r3, r3
 8009554:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009556:	88fb      	ldrh	r3, [r7, #6]
 8009558:	f003 0303 	and.w	r3, r3, #3
 800955c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800955e:	2300      	movs	r3, #0
 8009560:	623b      	str	r3, [r7, #32]
 8009562:	e014      	b.n	800958e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009564:	69bb      	ldr	r3, [r7, #24]
 8009566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800956a:	681a      	ldr	r2, [r3, #0]
 800956c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956e:	601a      	str	r2, [r3, #0]
    pDest++;
 8009570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009572:	3301      	adds	r3, #1
 8009574:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009578:	3301      	adds	r3, #1
 800957a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800957c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800957e:	3301      	adds	r3, #1
 8009580:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009584:	3301      	adds	r3, #1
 8009586:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009588:	6a3b      	ldr	r3, [r7, #32]
 800958a:	3301      	adds	r3, #1
 800958c:	623b      	str	r3, [r7, #32]
 800958e:	6a3a      	ldr	r2, [r7, #32]
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	429a      	cmp	r2, r3
 8009594:	d3e6      	bcc.n	8009564 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009596:	8bfb      	ldrh	r3, [r7, #30]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d01e      	beq.n	80095da <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800959c:	2300      	movs	r3, #0
 800959e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80095a0:	69bb      	ldr	r3, [r7, #24]
 80095a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095a6:	461a      	mov	r2, r3
 80095a8:	f107 0310 	add.w	r3, r7, #16
 80095ac:	6812      	ldr	r2, [r2, #0]
 80095ae:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80095b0:	693a      	ldr	r2, [r7, #16]
 80095b2:	6a3b      	ldr	r3, [r7, #32]
 80095b4:	b2db      	uxtb	r3, r3
 80095b6:	00db      	lsls	r3, r3, #3
 80095b8:	fa22 f303 	lsr.w	r3, r2, r3
 80095bc:	b2da      	uxtb	r2, r3
 80095be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c0:	701a      	strb	r2, [r3, #0]
      i++;
 80095c2:	6a3b      	ldr	r3, [r7, #32]
 80095c4:	3301      	adds	r3, #1
 80095c6:	623b      	str	r3, [r7, #32]
      pDest++;
 80095c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ca:	3301      	adds	r3, #1
 80095cc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80095ce:	8bfb      	ldrh	r3, [r7, #30]
 80095d0:	3b01      	subs	r3, #1
 80095d2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80095d4:	8bfb      	ldrh	r3, [r7, #30]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d1ea      	bne.n	80095b0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80095da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80095dc:	4618      	mov	r0, r3
 80095de:	372c      	adds	r7, #44	; 0x2c
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr

080095e8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b085      	sub	sp, #20
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	781b      	ldrb	r3, [r3, #0]
 80095fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	785b      	ldrb	r3, [r3, #1]
 8009600:	2b01      	cmp	r3, #1
 8009602:	d12c      	bne.n	800965e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	015a      	lsls	r2, r3, #5
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	4413      	add	r3, r2
 800960c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	2b00      	cmp	r3, #0
 8009614:	db12      	blt.n	800963c <USB_EPSetStall+0x54>
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d00f      	beq.n	800963c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	015a      	lsls	r2, r3, #5
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	4413      	add	r3, r2
 8009624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	68ba      	ldr	r2, [r7, #8]
 800962c:	0151      	lsls	r1, r2, #5
 800962e:	68fa      	ldr	r2, [r7, #12]
 8009630:	440a      	add	r2, r1
 8009632:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009636:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800963a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	015a      	lsls	r2, r3, #5
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	4413      	add	r3, r2
 8009644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	68ba      	ldr	r2, [r7, #8]
 800964c:	0151      	lsls	r1, r2, #5
 800964e:	68fa      	ldr	r2, [r7, #12]
 8009650:	440a      	add	r2, r1
 8009652:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009656:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800965a:	6013      	str	r3, [r2, #0]
 800965c:	e02b      	b.n	80096b6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	015a      	lsls	r2, r3, #5
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	4413      	add	r3, r2
 8009666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	2b00      	cmp	r3, #0
 800966e:	db12      	blt.n	8009696 <USB_EPSetStall+0xae>
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d00f      	beq.n	8009696 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	015a      	lsls	r2, r3, #5
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	4413      	add	r3, r2
 800967e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	68ba      	ldr	r2, [r7, #8]
 8009686:	0151      	lsls	r1, r2, #5
 8009688:	68fa      	ldr	r2, [r7, #12]
 800968a:	440a      	add	r2, r1
 800968c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009690:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009694:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	015a      	lsls	r2, r3, #5
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	4413      	add	r3, r2
 800969e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	68ba      	ldr	r2, [r7, #8]
 80096a6:	0151      	lsls	r1, r2, #5
 80096a8:	68fa      	ldr	r2, [r7, #12]
 80096aa:	440a      	add	r2, r1
 80096ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80096b4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80096b6:	2300      	movs	r3, #0
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3714      	adds	r7, #20
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr

080096c4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b085      	sub	sp, #20
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	781b      	ldrb	r3, [r3, #0]
 80096d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	785b      	ldrb	r3, [r3, #1]
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d128      	bne.n	8009732 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	015a      	lsls	r2, r3, #5
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	4413      	add	r3, r2
 80096e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	68ba      	ldr	r2, [r7, #8]
 80096f0:	0151      	lsls	r1, r2, #5
 80096f2:	68fa      	ldr	r2, [r7, #12]
 80096f4:	440a      	add	r2, r1
 80096f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80096fe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	791b      	ldrb	r3, [r3, #4]
 8009704:	2b03      	cmp	r3, #3
 8009706:	d003      	beq.n	8009710 <USB_EPClearStall+0x4c>
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	791b      	ldrb	r3, [r3, #4]
 800970c:	2b02      	cmp	r3, #2
 800970e:	d138      	bne.n	8009782 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	015a      	lsls	r2, r3, #5
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	4413      	add	r3, r2
 8009718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	68ba      	ldr	r2, [r7, #8]
 8009720:	0151      	lsls	r1, r2, #5
 8009722:	68fa      	ldr	r2, [r7, #12]
 8009724:	440a      	add	r2, r1
 8009726:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800972a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800972e:	6013      	str	r3, [r2, #0]
 8009730:	e027      	b.n	8009782 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	015a      	lsls	r2, r3, #5
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	4413      	add	r3, r2
 800973a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	68ba      	ldr	r2, [r7, #8]
 8009742:	0151      	lsls	r1, r2, #5
 8009744:	68fa      	ldr	r2, [r7, #12]
 8009746:	440a      	add	r2, r1
 8009748:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800974c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009750:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	791b      	ldrb	r3, [r3, #4]
 8009756:	2b03      	cmp	r3, #3
 8009758:	d003      	beq.n	8009762 <USB_EPClearStall+0x9e>
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	791b      	ldrb	r3, [r3, #4]
 800975e:	2b02      	cmp	r3, #2
 8009760:	d10f      	bne.n	8009782 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	015a      	lsls	r2, r3, #5
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	4413      	add	r3, r2
 800976a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	68ba      	ldr	r2, [r7, #8]
 8009772:	0151      	lsls	r1, r2, #5
 8009774:	68fa      	ldr	r2, [r7, #12]
 8009776:	440a      	add	r2, r1
 8009778:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800977c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009780:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009782:	2300      	movs	r3, #0
}
 8009784:	4618      	mov	r0, r3
 8009786:	3714      	adds	r7, #20
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr

08009790 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009790:	b480      	push	{r7}
 8009792:	b085      	sub	sp, #20
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	460b      	mov	r3, r1
 800979a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	68fa      	ldr	r2, [r7, #12]
 80097aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80097ae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80097b2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097ba:	681a      	ldr	r2, [r3, #0]
 80097bc:	78fb      	ldrb	r3, [r7, #3]
 80097be:	011b      	lsls	r3, r3, #4
 80097c0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80097c4:	68f9      	ldr	r1, [r7, #12]
 80097c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80097ca:	4313      	orrs	r3, r2
 80097cc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80097ce:	2300      	movs	r3, #0
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3714      	adds	r7, #20
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr

080097dc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80097dc:	b480      	push	{r7}
 80097de:	b085      	sub	sp, #20
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	68fa      	ldr	r2, [r7, #12]
 80097f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80097f6:	f023 0303 	bic.w	r3, r3, #3
 80097fa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	68fa      	ldr	r2, [r7, #12]
 8009806:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800980a:	f023 0302 	bic.w	r3, r3, #2
 800980e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009810:	2300      	movs	r3, #0
}
 8009812:	4618      	mov	r0, r3
 8009814:	3714      	adds	r7, #20
 8009816:	46bd      	mov	sp, r7
 8009818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981c:	4770      	bx	lr

0800981e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800981e:	b480      	push	{r7}
 8009820:	b085      	sub	sp, #20
 8009822:	af00      	add	r7, sp, #0
 8009824:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	68fa      	ldr	r2, [r7, #12]
 8009834:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009838:	f023 0303 	bic.w	r3, r3, #3
 800983c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009844:	685b      	ldr	r3, [r3, #4]
 8009846:	68fa      	ldr	r2, [r7, #12]
 8009848:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800984c:	f043 0302 	orr.w	r3, r3, #2
 8009850:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009852:	2300      	movs	r3, #0
}
 8009854:	4618      	mov	r0, r3
 8009856:	3714      	adds	r7, #20
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr

08009860 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009860:	b480      	push	{r7}
 8009862:	b085      	sub	sp, #20
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	695b      	ldr	r3, [r3, #20]
 800986c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	699b      	ldr	r3, [r3, #24]
 8009872:	68fa      	ldr	r2, [r7, #12]
 8009874:	4013      	ands	r3, r2
 8009876:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009878:	68fb      	ldr	r3, [r7, #12]
}
 800987a:	4618      	mov	r0, r3
 800987c:	3714      	adds	r7, #20
 800987e:	46bd      	mov	sp, r7
 8009880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009884:	4770      	bx	lr

08009886 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009886:	b480      	push	{r7}
 8009888:	b085      	sub	sp, #20
 800988a:	af00      	add	r7, sp, #0
 800988c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009898:	699b      	ldr	r3, [r3, #24]
 800989a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098a2:	69db      	ldr	r3, [r3, #28]
 80098a4:	68ba      	ldr	r2, [r7, #8]
 80098a6:	4013      	ands	r3, r2
 80098a8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	0c1b      	lsrs	r3, r3, #16
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3714      	adds	r7, #20
 80098b2:	46bd      	mov	sp, r7
 80098b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b8:	4770      	bx	lr

080098ba <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80098ba:	b480      	push	{r7}
 80098bc:	b085      	sub	sp, #20
 80098be:	af00      	add	r7, sp, #0
 80098c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098cc:	699b      	ldr	r3, [r3, #24]
 80098ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098d6:	69db      	ldr	r3, [r3, #28]
 80098d8:	68ba      	ldr	r2, [r7, #8]
 80098da:	4013      	ands	r3, r2
 80098dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	b29b      	uxth	r3, r3
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3714      	adds	r7, #20
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr

080098ee <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80098ee:	b480      	push	{r7}
 80098f0:	b085      	sub	sp, #20
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	6078      	str	r0, [r7, #4]
 80098f6:	460b      	mov	r3, r1
 80098f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80098fe:	78fb      	ldrb	r3, [r7, #3]
 8009900:	015a      	lsls	r2, r3, #5
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	4413      	add	r3, r2
 8009906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800990a:	689b      	ldr	r3, [r3, #8]
 800990c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009914:	695b      	ldr	r3, [r3, #20]
 8009916:	68ba      	ldr	r2, [r7, #8]
 8009918:	4013      	ands	r3, r2
 800991a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800991c:	68bb      	ldr	r3, [r7, #8]
}
 800991e:	4618      	mov	r0, r3
 8009920:	3714      	adds	r7, #20
 8009922:	46bd      	mov	sp, r7
 8009924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009928:	4770      	bx	lr

0800992a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800992a:	b480      	push	{r7}
 800992c:	b087      	sub	sp, #28
 800992e:	af00      	add	r7, sp, #0
 8009930:	6078      	str	r0, [r7, #4]
 8009932:	460b      	mov	r3, r1
 8009934:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009940:	691b      	ldr	r3, [r3, #16]
 8009942:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800994a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800994c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800994e:	78fb      	ldrb	r3, [r7, #3]
 8009950:	f003 030f 	and.w	r3, r3, #15
 8009954:	68fa      	ldr	r2, [r7, #12]
 8009956:	fa22 f303 	lsr.w	r3, r2, r3
 800995a:	01db      	lsls	r3, r3, #7
 800995c:	b2db      	uxtb	r3, r3
 800995e:	693a      	ldr	r2, [r7, #16]
 8009960:	4313      	orrs	r3, r2
 8009962:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009964:	78fb      	ldrb	r3, [r7, #3]
 8009966:	015a      	lsls	r2, r3, #5
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	4413      	add	r3, r2
 800996c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009970:	689b      	ldr	r3, [r3, #8]
 8009972:	693a      	ldr	r2, [r7, #16]
 8009974:	4013      	ands	r3, r2
 8009976:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009978:	68bb      	ldr	r3, [r7, #8]
}
 800997a:	4618      	mov	r0, r3
 800997c:	371c      	adds	r7, #28
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr

08009986 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009986:	b480      	push	{r7}
 8009988:	b083      	sub	sp, #12
 800998a:	af00      	add	r7, sp, #0
 800998c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	695b      	ldr	r3, [r3, #20]
 8009992:	f003 0301 	and.w	r3, r3, #1
}
 8009996:	4618      	mov	r0, r3
 8009998:	370c      	adds	r7, #12
 800999a:	46bd      	mov	sp, r7
 800999c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a0:	4770      	bx	lr
	...

080099a4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b085      	sub	sp, #20
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099b6:	681a      	ldr	r2, [r3, #0]
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099be:	4619      	mov	r1, r3
 80099c0:	4b09      	ldr	r3, [pc, #36]	; (80099e8 <USB_ActivateSetup+0x44>)
 80099c2:	4013      	ands	r3, r2
 80099c4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	68fa      	ldr	r2, [r7, #12]
 80099d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80099d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80099da:	2300      	movs	r3, #0
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3714      	adds	r7, #20
 80099e0:	46bd      	mov	sp, r7
 80099e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e6:	4770      	bx	lr
 80099e8:	fffff800 	.word	0xfffff800

080099ec <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b087      	sub	sp, #28
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	60f8      	str	r0, [r7, #12]
 80099f4:	460b      	mov	r3, r1
 80099f6:	607a      	str	r2, [r7, #4]
 80099f8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	333c      	adds	r3, #60	; 0x3c
 8009a02:	3304      	adds	r3, #4
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	4a26      	ldr	r2, [pc, #152]	; (8009aa4 <USB_EP0_OutStart+0xb8>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d90a      	bls.n	8009a26 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a20:	d101      	bne.n	8009a26 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009a22:	2300      	movs	r3, #0
 8009a24:	e037      	b.n	8009a96 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	2300      	movs	r3, #0
 8009a30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a38:	691b      	ldr	r3, [r3, #16]
 8009a3a:	697a      	ldr	r2, [r7, #20]
 8009a3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009a44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a4c:	691b      	ldr	r3, [r3, #16]
 8009a4e:	697a      	ldr	r2, [r7, #20]
 8009a50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a54:	f043 0318 	orr.w	r3, r3, #24
 8009a58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a60:	691b      	ldr	r3, [r3, #16]
 8009a62:	697a      	ldr	r2, [r7, #20]
 8009a64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a68:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009a6c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009a6e:	7afb      	ldrb	r3, [r7, #11]
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	d10f      	bne.n	8009a94 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	697a      	ldr	r2, [r7, #20]
 8009a8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a8e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009a92:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009a94:	2300      	movs	r3, #0
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	371c      	adds	r7, #28
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa0:	4770      	bx	lr
 8009aa2:	bf00      	nop
 8009aa4:	4f54300a 	.word	0x4f54300a

08009aa8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b085      	sub	sp, #20
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	4a13      	ldr	r2, [pc, #76]	; (8009b0c <USB_CoreReset+0x64>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d901      	bls.n	8009ac6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009ac2:	2303      	movs	r3, #3
 8009ac4:	e01b      	b.n	8009afe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	691b      	ldr	r3, [r3, #16]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	daf2      	bge.n	8009ab4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	691b      	ldr	r3, [r3, #16]
 8009ad6:	f043 0201 	orr.w	r2, r3, #1
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	3301      	adds	r3, #1
 8009ae2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	4a09      	ldr	r2, [pc, #36]	; (8009b0c <USB_CoreReset+0x64>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d901      	bls.n	8009af0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009aec:	2303      	movs	r3, #3
 8009aee:	e006      	b.n	8009afe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	691b      	ldr	r3, [r3, #16]
 8009af4:	f003 0301 	and.w	r3, r3, #1
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d0f0      	beq.n	8009ade <USB_CoreReset+0x36>

  return HAL_OK;
 8009afc:	2300      	movs	r3, #0
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3714      	adds	r7, #20
 8009b02:	46bd      	mov	sp, r7
 8009b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b08:	4770      	bx	lr
 8009b0a:	bf00      	nop
 8009b0c:	00030d40 	.word	0x00030d40

08009b10 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b084      	sub	sp, #16
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
 8009b18:	460b      	mov	r3, r1
 8009b1a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009b1c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009b20:	f002 fce4 	bl	800c4ec <USBD_static_malloc>
 8009b24:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d109      	bne.n	8009b40 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	32b0      	adds	r2, #176	; 0xb0
 8009b36:	2100      	movs	r1, #0
 8009b38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009b3c:	2302      	movs	r3, #2
 8009b3e:	e0d4      	b.n	8009cea <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009b40:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009b44:	2100      	movs	r1, #0
 8009b46:	68f8      	ldr	r0, [r7, #12]
 8009b48:	f003 fb31 	bl	800d1ae <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	32b0      	adds	r2, #176	; 0xb0
 8009b56:	68f9      	ldr	r1, [r7, #12]
 8009b58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	32b0      	adds	r2, #176	; 0xb0
 8009b66:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	7c1b      	ldrb	r3, [r3, #16]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d138      	bne.n	8009bea <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009b78:	4b5e      	ldr	r3, [pc, #376]	; (8009cf4 <USBD_CDC_Init+0x1e4>)
 8009b7a:	7819      	ldrb	r1, [r3, #0]
 8009b7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b80:	2202      	movs	r2, #2
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f002 fb8f 	bl	800c2a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009b88:	4b5a      	ldr	r3, [pc, #360]	; (8009cf4 <USBD_CDC_Init+0x1e4>)
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	f003 020f 	and.w	r2, r3, #15
 8009b90:	6879      	ldr	r1, [r7, #4]
 8009b92:	4613      	mov	r3, r2
 8009b94:	009b      	lsls	r3, r3, #2
 8009b96:	4413      	add	r3, r2
 8009b98:	009b      	lsls	r3, r3, #2
 8009b9a:	440b      	add	r3, r1
 8009b9c:	3324      	adds	r3, #36	; 0x24
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009ba2:	4b55      	ldr	r3, [pc, #340]	; (8009cf8 <USBD_CDC_Init+0x1e8>)
 8009ba4:	7819      	ldrb	r1, [r3, #0]
 8009ba6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009baa:	2202      	movs	r2, #2
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f002 fb7a 	bl	800c2a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009bb2:	4b51      	ldr	r3, [pc, #324]	; (8009cf8 <USBD_CDC_Init+0x1e8>)
 8009bb4:	781b      	ldrb	r3, [r3, #0]
 8009bb6:	f003 020f 	and.w	r2, r3, #15
 8009bba:	6879      	ldr	r1, [r7, #4]
 8009bbc:	4613      	mov	r3, r2
 8009bbe:	009b      	lsls	r3, r3, #2
 8009bc0:	4413      	add	r3, r2
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	440b      	add	r3, r1
 8009bc6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009bca:	2201      	movs	r2, #1
 8009bcc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009bce:	4b4b      	ldr	r3, [pc, #300]	; (8009cfc <USBD_CDC_Init+0x1ec>)
 8009bd0:	781b      	ldrb	r3, [r3, #0]
 8009bd2:	f003 020f 	and.w	r2, r3, #15
 8009bd6:	6879      	ldr	r1, [r7, #4]
 8009bd8:	4613      	mov	r3, r2
 8009bda:	009b      	lsls	r3, r3, #2
 8009bdc:	4413      	add	r3, r2
 8009bde:	009b      	lsls	r3, r3, #2
 8009be0:	440b      	add	r3, r1
 8009be2:	3326      	adds	r3, #38	; 0x26
 8009be4:	2210      	movs	r2, #16
 8009be6:	801a      	strh	r2, [r3, #0]
 8009be8:	e035      	b.n	8009c56 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009bea:	4b42      	ldr	r3, [pc, #264]	; (8009cf4 <USBD_CDC_Init+0x1e4>)
 8009bec:	7819      	ldrb	r1, [r3, #0]
 8009bee:	2340      	movs	r3, #64	; 0x40
 8009bf0:	2202      	movs	r2, #2
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f002 fb57 	bl	800c2a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009bf8:	4b3e      	ldr	r3, [pc, #248]	; (8009cf4 <USBD_CDC_Init+0x1e4>)
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	f003 020f 	and.w	r2, r3, #15
 8009c00:	6879      	ldr	r1, [r7, #4]
 8009c02:	4613      	mov	r3, r2
 8009c04:	009b      	lsls	r3, r3, #2
 8009c06:	4413      	add	r3, r2
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	440b      	add	r3, r1
 8009c0c:	3324      	adds	r3, #36	; 0x24
 8009c0e:	2201      	movs	r2, #1
 8009c10:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009c12:	4b39      	ldr	r3, [pc, #228]	; (8009cf8 <USBD_CDC_Init+0x1e8>)
 8009c14:	7819      	ldrb	r1, [r3, #0]
 8009c16:	2340      	movs	r3, #64	; 0x40
 8009c18:	2202      	movs	r2, #2
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f002 fb43 	bl	800c2a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009c20:	4b35      	ldr	r3, [pc, #212]	; (8009cf8 <USBD_CDC_Init+0x1e8>)
 8009c22:	781b      	ldrb	r3, [r3, #0]
 8009c24:	f003 020f 	and.w	r2, r3, #15
 8009c28:	6879      	ldr	r1, [r7, #4]
 8009c2a:	4613      	mov	r3, r2
 8009c2c:	009b      	lsls	r3, r3, #2
 8009c2e:	4413      	add	r3, r2
 8009c30:	009b      	lsls	r3, r3, #2
 8009c32:	440b      	add	r3, r1
 8009c34:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009c38:	2201      	movs	r2, #1
 8009c3a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009c3c:	4b2f      	ldr	r3, [pc, #188]	; (8009cfc <USBD_CDC_Init+0x1ec>)
 8009c3e:	781b      	ldrb	r3, [r3, #0]
 8009c40:	f003 020f 	and.w	r2, r3, #15
 8009c44:	6879      	ldr	r1, [r7, #4]
 8009c46:	4613      	mov	r3, r2
 8009c48:	009b      	lsls	r3, r3, #2
 8009c4a:	4413      	add	r3, r2
 8009c4c:	009b      	lsls	r3, r3, #2
 8009c4e:	440b      	add	r3, r1
 8009c50:	3326      	adds	r3, #38	; 0x26
 8009c52:	2210      	movs	r2, #16
 8009c54:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009c56:	4b29      	ldr	r3, [pc, #164]	; (8009cfc <USBD_CDC_Init+0x1ec>)
 8009c58:	7819      	ldrb	r1, [r3, #0]
 8009c5a:	2308      	movs	r3, #8
 8009c5c:	2203      	movs	r2, #3
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f002 fb21 	bl	800c2a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009c64:	4b25      	ldr	r3, [pc, #148]	; (8009cfc <USBD_CDC_Init+0x1ec>)
 8009c66:	781b      	ldrb	r3, [r3, #0]
 8009c68:	f003 020f 	and.w	r2, r3, #15
 8009c6c:	6879      	ldr	r1, [r7, #4]
 8009c6e:	4613      	mov	r3, r2
 8009c70:	009b      	lsls	r3, r3, #2
 8009c72:	4413      	add	r3, r2
 8009c74:	009b      	lsls	r3, r3, #2
 8009c76:	440b      	add	r3, r1
 8009c78:	3324      	adds	r3, #36	; 0x24
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	2200      	movs	r2, #0
 8009c82:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009c8c:	687a      	ldr	r2, [r7, #4]
 8009c8e:	33b0      	adds	r3, #176	; 0xb0
 8009c90:	009b      	lsls	r3, r3, #2
 8009c92:	4413      	add	r3, r2
 8009c94:	685b      	ldr	r3, [r3, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d101      	bne.n	8009cb8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009cb4:	2302      	movs	r3, #2
 8009cb6:	e018      	b.n	8009cea <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	7c1b      	ldrb	r3, [r3, #16]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d10a      	bne.n	8009cd6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009cc0:	4b0d      	ldr	r3, [pc, #52]	; (8009cf8 <USBD_CDC_Init+0x1e8>)
 8009cc2:	7819      	ldrb	r1, [r3, #0]
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009cca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f002 fbd8 	bl	800c484 <USBD_LL_PrepareReceive>
 8009cd4:	e008      	b.n	8009ce8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009cd6:	4b08      	ldr	r3, [pc, #32]	; (8009cf8 <USBD_CDC_Init+0x1e8>)
 8009cd8:	7819      	ldrb	r1, [r3, #0]
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009ce0:	2340      	movs	r3, #64	; 0x40
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f002 fbce 	bl	800c484 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009ce8:	2300      	movs	r3, #0
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3710      	adds	r7, #16
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}
 8009cf2:	bf00      	nop
 8009cf4:	240000d7 	.word	0x240000d7
 8009cf8:	240000d8 	.word	0x240000d8
 8009cfc:	240000d9 	.word	0x240000d9

08009d00 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b082      	sub	sp, #8
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
 8009d08:	460b      	mov	r3, r1
 8009d0a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009d0c:	4b3a      	ldr	r3, [pc, #232]	; (8009df8 <USBD_CDC_DeInit+0xf8>)
 8009d0e:	781b      	ldrb	r3, [r3, #0]
 8009d10:	4619      	mov	r1, r3
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f002 faed 	bl	800c2f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009d18:	4b37      	ldr	r3, [pc, #220]	; (8009df8 <USBD_CDC_DeInit+0xf8>)
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	f003 020f 	and.w	r2, r3, #15
 8009d20:	6879      	ldr	r1, [r7, #4]
 8009d22:	4613      	mov	r3, r2
 8009d24:	009b      	lsls	r3, r3, #2
 8009d26:	4413      	add	r3, r2
 8009d28:	009b      	lsls	r3, r3, #2
 8009d2a:	440b      	add	r3, r1
 8009d2c:	3324      	adds	r3, #36	; 0x24
 8009d2e:	2200      	movs	r2, #0
 8009d30:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009d32:	4b32      	ldr	r3, [pc, #200]	; (8009dfc <USBD_CDC_DeInit+0xfc>)
 8009d34:	781b      	ldrb	r3, [r3, #0]
 8009d36:	4619      	mov	r1, r3
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f002 fada 	bl	800c2f2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009d3e:	4b2f      	ldr	r3, [pc, #188]	; (8009dfc <USBD_CDC_DeInit+0xfc>)
 8009d40:	781b      	ldrb	r3, [r3, #0]
 8009d42:	f003 020f 	and.w	r2, r3, #15
 8009d46:	6879      	ldr	r1, [r7, #4]
 8009d48:	4613      	mov	r3, r2
 8009d4a:	009b      	lsls	r3, r3, #2
 8009d4c:	4413      	add	r3, r2
 8009d4e:	009b      	lsls	r3, r3, #2
 8009d50:	440b      	add	r3, r1
 8009d52:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009d56:	2200      	movs	r2, #0
 8009d58:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009d5a:	4b29      	ldr	r3, [pc, #164]	; (8009e00 <USBD_CDC_DeInit+0x100>)
 8009d5c:	781b      	ldrb	r3, [r3, #0]
 8009d5e:	4619      	mov	r1, r3
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f002 fac6 	bl	800c2f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009d66:	4b26      	ldr	r3, [pc, #152]	; (8009e00 <USBD_CDC_DeInit+0x100>)
 8009d68:	781b      	ldrb	r3, [r3, #0]
 8009d6a:	f003 020f 	and.w	r2, r3, #15
 8009d6e:	6879      	ldr	r1, [r7, #4]
 8009d70:	4613      	mov	r3, r2
 8009d72:	009b      	lsls	r3, r3, #2
 8009d74:	4413      	add	r3, r2
 8009d76:	009b      	lsls	r3, r3, #2
 8009d78:	440b      	add	r3, r1
 8009d7a:	3324      	adds	r3, #36	; 0x24
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009d80:	4b1f      	ldr	r3, [pc, #124]	; (8009e00 <USBD_CDC_DeInit+0x100>)
 8009d82:	781b      	ldrb	r3, [r3, #0]
 8009d84:	f003 020f 	and.w	r2, r3, #15
 8009d88:	6879      	ldr	r1, [r7, #4]
 8009d8a:	4613      	mov	r3, r2
 8009d8c:	009b      	lsls	r3, r3, #2
 8009d8e:	4413      	add	r3, r2
 8009d90:	009b      	lsls	r3, r3, #2
 8009d92:	440b      	add	r3, r1
 8009d94:	3326      	adds	r3, #38	; 0x26
 8009d96:	2200      	movs	r2, #0
 8009d98:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	32b0      	adds	r2, #176	; 0xb0
 8009da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d01f      	beq.n	8009dec <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009db2:	687a      	ldr	r2, [r7, #4]
 8009db4:	33b0      	adds	r3, #176	; 0xb0
 8009db6:	009b      	lsls	r3, r3, #2
 8009db8:	4413      	add	r3, r2
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	32b0      	adds	r2, #176	; 0xb0
 8009dca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f002 fb9a 	bl	800c508 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	32b0      	adds	r2, #176	; 0xb0
 8009dde:	2100      	movs	r1, #0
 8009de0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2200      	movs	r2, #0
 8009de8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009dec:	2300      	movs	r3, #0
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	3708      	adds	r7, #8
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}
 8009df6:	bf00      	nop
 8009df8:	240000d7 	.word	0x240000d7
 8009dfc:	240000d8 	.word	0x240000d8
 8009e00:	240000d9 	.word	0x240000d9

08009e04 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b086      	sub	sp, #24
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	32b0      	adds	r2, #176	; 0xb0
 8009e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e1c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009e22:	2300      	movs	r3, #0
 8009e24:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e26:	2300      	movs	r3, #0
 8009e28:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d101      	bne.n	8009e34 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009e30:	2303      	movs	r3, #3
 8009e32:	e0bf      	b.n	8009fb4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	781b      	ldrb	r3, [r3, #0]
 8009e38:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d050      	beq.n	8009ee2 <USBD_CDC_Setup+0xde>
 8009e40:	2b20      	cmp	r3, #32
 8009e42:	f040 80af 	bne.w	8009fa4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	88db      	ldrh	r3, [r3, #6]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d03a      	beq.n	8009ec4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	781b      	ldrb	r3, [r3, #0]
 8009e52:	b25b      	sxtb	r3, r3
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	da1b      	bge.n	8009e90 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	33b0      	adds	r3, #176	; 0xb0
 8009e62:	009b      	lsls	r3, r3, #2
 8009e64:	4413      	add	r3, r2
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	689b      	ldr	r3, [r3, #8]
 8009e6a:	683a      	ldr	r2, [r7, #0]
 8009e6c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009e6e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009e70:	683a      	ldr	r2, [r7, #0]
 8009e72:	88d2      	ldrh	r2, [r2, #6]
 8009e74:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	88db      	ldrh	r3, [r3, #6]
 8009e7a:	2b07      	cmp	r3, #7
 8009e7c:	bf28      	it	cs
 8009e7e:	2307      	movcs	r3, #7
 8009e80:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	89fa      	ldrh	r2, [r7, #14]
 8009e86:	4619      	mov	r1, r3
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f001 fdb3 	bl	800b9f4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009e8e:	e090      	b.n	8009fb2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	785a      	ldrb	r2, [r3, #1]
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	88db      	ldrh	r3, [r3, #6]
 8009e9e:	2b3f      	cmp	r3, #63	; 0x3f
 8009ea0:	d803      	bhi.n	8009eaa <USBD_CDC_Setup+0xa6>
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	88db      	ldrh	r3, [r3, #6]
 8009ea6:	b2da      	uxtb	r2, r3
 8009ea8:	e000      	b.n	8009eac <USBD_CDC_Setup+0xa8>
 8009eaa:	2240      	movs	r2, #64	; 0x40
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009eb2:	6939      	ldr	r1, [r7, #16]
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009eba:	461a      	mov	r2, r3
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f001 fdc5 	bl	800ba4c <USBD_CtlPrepareRx>
      break;
 8009ec2:	e076      	b.n	8009fb2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009eca:	687a      	ldr	r2, [r7, #4]
 8009ecc:	33b0      	adds	r3, #176	; 0xb0
 8009ece:	009b      	lsls	r3, r3, #2
 8009ed0:	4413      	add	r3, r2
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	689b      	ldr	r3, [r3, #8]
 8009ed6:	683a      	ldr	r2, [r7, #0]
 8009ed8:	7850      	ldrb	r0, [r2, #1]
 8009eda:	2200      	movs	r2, #0
 8009edc:	6839      	ldr	r1, [r7, #0]
 8009ede:	4798      	blx	r3
      break;
 8009ee0:	e067      	b.n	8009fb2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	785b      	ldrb	r3, [r3, #1]
 8009ee6:	2b0b      	cmp	r3, #11
 8009ee8:	d851      	bhi.n	8009f8e <USBD_CDC_Setup+0x18a>
 8009eea:	a201      	add	r2, pc, #4	; (adr r2, 8009ef0 <USBD_CDC_Setup+0xec>)
 8009eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ef0:	08009f21 	.word	0x08009f21
 8009ef4:	08009f9d 	.word	0x08009f9d
 8009ef8:	08009f8f 	.word	0x08009f8f
 8009efc:	08009f8f 	.word	0x08009f8f
 8009f00:	08009f8f 	.word	0x08009f8f
 8009f04:	08009f8f 	.word	0x08009f8f
 8009f08:	08009f8f 	.word	0x08009f8f
 8009f0c:	08009f8f 	.word	0x08009f8f
 8009f10:	08009f8f 	.word	0x08009f8f
 8009f14:	08009f8f 	.word	0x08009f8f
 8009f18:	08009f4b 	.word	0x08009f4b
 8009f1c:	08009f75 	.word	0x08009f75
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f26:	b2db      	uxtb	r3, r3
 8009f28:	2b03      	cmp	r3, #3
 8009f2a:	d107      	bne.n	8009f3c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009f2c:	f107 030a 	add.w	r3, r7, #10
 8009f30:	2202      	movs	r2, #2
 8009f32:	4619      	mov	r1, r3
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f001 fd5d 	bl	800b9f4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009f3a:	e032      	b.n	8009fa2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009f3c:	6839      	ldr	r1, [r7, #0]
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f001 fce7 	bl	800b912 <USBD_CtlError>
            ret = USBD_FAIL;
 8009f44:	2303      	movs	r3, #3
 8009f46:	75fb      	strb	r3, [r7, #23]
          break;
 8009f48:	e02b      	b.n	8009fa2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f50:	b2db      	uxtb	r3, r3
 8009f52:	2b03      	cmp	r3, #3
 8009f54:	d107      	bne.n	8009f66 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009f56:	f107 030d 	add.w	r3, r7, #13
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	4619      	mov	r1, r3
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f001 fd48 	bl	800b9f4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009f64:	e01d      	b.n	8009fa2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009f66:	6839      	ldr	r1, [r7, #0]
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f001 fcd2 	bl	800b912 <USBD_CtlError>
            ret = USBD_FAIL;
 8009f6e:	2303      	movs	r3, #3
 8009f70:	75fb      	strb	r3, [r7, #23]
          break;
 8009f72:	e016      	b.n	8009fa2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f7a:	b2db      	uxtb	r3, r3
 8009f7c:	2b03      	cmp	r3, #3
 8009f7e:	d00f      	beq.n	8009fa0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009f80:	6839      	ldr	r1, [r7, #0]
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f001 fcc5 	bl	800b912 <USBD_CtlError>
            ret = USBD_FAIL;
 8009f88:	2303      	movs	r3, #3
 8009f8a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009f8c:	e008      	b.n	8009fa0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009f8e:	6839      	ldr	r1, [r7, #0]
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f001 fcbe 	bl	800b912 <USBD_CtlError>
          ret = USBD_FAIL;
 8009f96:	2303      	movs	r3, #3
 8009f98:	75fb      	strb	r3, [r7, #23]
          break;
 8009f9a:	e002      	b.n	8009fa2 <USBD_CDC_Setup+0x19e>
          break;
 8009f9c:	bf00      	nop
 8009f9e:	e008      	b.n	8009fb2 <USBD_CDC_Setup+0x1ae>
          break;
 8009fa0:	bf00      	nop
      }
      break;
 8009fa2:	e006      	b.n	8009fb2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009fa4:	6839      	ldr	r1, [r7, #0]
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f001 fcb3 	bl	800b912 <USBD_CtlError>
      ret = USBD_FAIL;
 8009fac:	2303      	movs	r3, #3
 8009fae:	75fb      	strb	r3, [r7, #23]
      break;
 8009fb0:	bf00      	nop
  }

  return (uint8_t)ret;
 8009fb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3718      	adds	r7, #24
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b084      	sub	sp, #16
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	460b      	mov	r3, r1
 8009fc6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009fce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	32b0      	adds	r2, #176	; 0xb0
 8009fda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d101      	bne.n	8009fe6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009fe2:	2303      	movs	r3, #3
 8009fe4:	e065      	b.n	800a0b2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	32b0      	adds	r2, #176	; 0xb0
 8009ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ff4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009ff6:	78fb      	ldrb	r3, [r7, #3]
 8009ff8:	f003 020f 	and.w	r2, r3, #15
 8009ffc:	6879      	ldr	r1, [r7, #4]
 8009ffe:	4613      	mov	r3, r2
 800a000:	009b      	lsls	r3, r3, #2
 800a002:	4413      	add	r3, r2
 800a004:	009b      	lsls	r3, r3, #2
 800a006:	440b      	add	r3, r1
 800a008:	3318      	adds	r3, #24
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d02f      	beq.n	800a070 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a010:	78fb      	ldrb	r3, [r7, #3]
 800a012:	f003 020f 	and.w	r2, r3, #15
 800a016:	6879      	ldr	r1, [r7, #4]
 800a018:	4613      	mov	r3, r2
 800a01a:	009b      	lsls	r3, r3, #2
 800a01c:	4413      	add	r3, r2
 800a01e:	009b      	lsls	r3, r3, #2
 800a020:	440b      	add	r3, r1
 800a022:	3318      	adds	r3, #24
 800a024:	681a      	ldr	r2, [r3, #0]
 800a026:	78fb      	ldrb	r3, [r7, #3]
 800a028:	f003 010f 	and.w	r1, r3, #15
 800a02c:	68f8      	ldr	r0, [r7, #12]
 800a02e:	460b      	mov	r3, r1
 800a030:	00db      	lsls	r3, r3, #3
 800a032:	440b      	add	r3, r1
 800a034:	009b      	lsls	r3, r3, #2
 800a036:	4403      	add	r3, r0
 800a038:	3344      	adds	r3, #68	; 0x44
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	fbb2 f1f3 	udiv	r1, r2, r3
 800a040:	fb01 f303 	mul.w	r3, r1, r3
 800a044:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a046:	2b00      	cmp	r3, #0
 800a048:	d112      	bne.n	800a070 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a04a:	78fb      	ldrb	r3, [r7, #3]
 800a04c:	f003 020f 	and.w	r2, r3, #15
 800a050:	6879      	ldr	r1, [r7, #4]
 800a052:	4613      	mov	r3, r2
 800a054:	009b      	lsls	r3, r3, #2
 800a056:	4413      	add	r3, r2
 800a058:	009b      	lsls	r3, r3, #2
 800a05a:	440b      	add	r3, r1
 800a05c:	3318      	adds	r3, #24
 800a05e:	2200      	movs	r2, #0
 800a060:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a062:	78f9      	ldrb	r1, [r7, #3]
 800a064:	2300      	movs	r3, #0
 800a066:	2200      	movs	r2, #0
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f002 f9ea 	bl	800c442 <USBD_LL_Transmit>
 800a06e:	e01f      	b.n	800a0b0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	2200      	movs	r2, #0
 800a074:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a07e:	687a      	ldr	r2, [r7, #4]
 800a080:	33b0      	adds	r3, #176	; 0xb0
 800a082:	009b      	lsls	r3, r3, #2
 800a084:	4413      	add	r3, r2
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	691b      	ldr	r3, [r3, #16]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d010      	beq.n	800a0b0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a094:	687a      	ldr	r2, [r7, #4]
 800a096:	33b0      	adds	r3, #176	; 0xb0
 800a098:	009b      	lsls	r3, r3, #2
 800a09a:	4413      	add	r3, r2
 800a09c:	685b      	ldr	r3, [r3, #4]
 800a09e:	691b      	ldr	r3, [r3, #16]
 800a0a0:	68ba      	ldr	r2, [r7, #8]
 800a0a2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a0a6:	68ba      	ldr	r2, [r7, #8]
 800a0a8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a0ac:	78fa      	ldrb	r2, [r7, #3]
 800a0ae:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a0b0:	2300      	movs	r3, #0
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3710      	adds	r7, #16
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}

0800a0ba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a0ba:	b580      	push	{r7, lr}
 800a0bc:	b084      	sub	sp, #16
 800a0be:	af00      	add	r7, sp, #0
 800a0c0:	6078      	str	r0, [r7, #4]
 800a0c2:	460b      	mov	r3, r1
 800a0c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	32b0      	adds	r2, #176	; 0xb0
 800a0d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0d4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	32b0      	adds	r2, #176	; 0xb0
 800a0e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d101      	bne.n	800a0ec <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a0e8:	2303      	movs	r3, #3
 800a0ea:	e01a      	b.n	800a122 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a0ec:	78fb      	ldrb	r3, [r7, #3]
 800a0ee:	4619      	mov	r1, r3
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f002 f9e8 	bl	800c4c6 <USBD_LL_GetRxDataSize>
 800a0f6:	4602      	mov	r2, r0
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	33b0      	adds	r3, #176	; 0xb0
 800a108:	009b      	lsls	r3, r3, #2
 800a10a:	4413      	add	r3, r2
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	68db      	ldr	r3, [r3, #12]
 800a110:	68fa      	ldr	r2, [r7, #12]
 800a112:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a116:	68fa      	ldr	r2, [r7, #12]
 800a118:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a11c:	4611      	mov	r1, r2
 800a11e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a120:	2300      	movs	r3, #0
}
 800a122:	4618      	mov	r0, r3
 800a124:	3710      	adds	r7, #16
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}

0800a12a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a12a:	b580      	push	{r7, lr}
 800a12c:	b084      	sub	sp, #16
 800a12e:	af00      	add	r7, sp, #0
 800a130:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	32b0      	adds	r2, #176	; 0xb0
 800a13c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a140:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d101      	bne.n	800a14c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a148:	2303      	movs	r3, #3
 800a14a:	e025      	b.n	800a198 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a152:	687a      	ldr	r2, [r7, #4]
 800a154:	33b0      	adds	r3, #176	; 0xb0
 800a156:	009b      	lsls	r3, r3, #2
 800a158:	4413      	add	r3, r2
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d01a      	beq.n	800a196 <USBD_CDC_EP0_RxReady+0x6c>
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a166:	2bff      	cmp	r3, #255	; 0xff
 800a168:	d015      	beq.n	800a196 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a170:	687a      	ldr	r2, [r7, #4]
 800a172:	33b0      	adds	r3, #176	; 0xb0
 800a174:	009b      	lsls	r3, r3, #2
 800a176:	4413      	add	r3, r2
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	689b      	ldr	r3, [r3, #8]
 800a17c:	68fa      	ldr	r2, [r7, #12]
 800a17e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a182:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a184:	68fa      	ldr	r2, [r7, #12]
 800a186:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a18a:	b292      	uxth	r2, r2
 800a18c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	22ff      	movs	r2, #255	; 0xff
 800a192:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a196:	2300      	movs	r3, #0
}
 800a198:	4618      	mov	r0, r3
 800a19a:	3710      	adds	r7, #16
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}

0800a1a0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b086      	sub	sp, #24
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a1a8:	2182      	movs	r1, #130	; 0x82
 800a1aa:	4818      	ldr	r0, [pc, #96]	; (800a20c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a1ac:	f000 fd4f 	bl	800ac4e <USBD_GetEpDesc>
 800a1b0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a1b2:	2101      	movs	r1, #1
 800a1b4:	4815      	ldr	r0, [pc, #84]	; (800a20c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a1b6:	f000 fd4a 	bl	800ac4e <USBD_GetEpDesc>
 800a1ba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a1bc:	2181      	movs	r1, #129	; 0x81
 800a1be:	4813      	ldr	r0, [pc, #76]	; (800a20c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a1c0:	f000 fd45 	bl	800ac4e <USBD_GetEpDesc>
 800a1c4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d002      	beq.n	800a1d2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	2210      	movs	r2, #16
 800a1d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d006      	beq.n	800a1e6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a1e0:	711a      	strb	r2, [r3, #4]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d006      	beq.n	800a1fa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a1f4:	711a      	strb	r2, [r3, #4]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2243      	movs	r2, #67	; 0x43
 800a1fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a200:	4b02      	ldr	r3, [pc, #8]	; (800a20c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a202:	4618      	mov	r0, r3
 800a204:	3718      	adds	r7, #24
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}
 800a20a:	bf00      	nop
 800a20c:	24000094 	.word	0x24000094

0800a210 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b086      	sub	sp, #24
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a218:	2182      	movs	r1, #130	; 0x82
 800a21a:	4818      	ldr	r0, [pc, #96]	; (800a27c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a21c:	f000 fd17 	bl	800ac4e <USBD_GetEpDesc>
 800a220:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a222:	2101      	movs	r1, #1
 800a224:	4815      	ldr	r0, [pc, #84]	; (800a27c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a226:	f000 fd12 	bl	800ac4e <USBD_GetEpDesc>
 800a22a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a22c:	2181      	movs	r1, #129	; 0x81
 800a22e:	4813      	ldr	r0, [pc, #76]	; (800a27c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a230:	f000 fd0d 	bl	800ac4e <USBD_GetEpDesc>
 800a234:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d002      	beq.n	800a242 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	2210      	movs	r2, #16
 800a240:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d006      	beq.n	800a256 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	2200      	movs	r2, #0
 800a24c:	711a      	strb	r2, [r3, #4]
 800a24e:	2200      	movs	r2, #0
 800a250:	f042 0202 	orr.w	r2, r2, #2
 800a254:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d006      	beq.n	800a26a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	2200      	movs	r2, #0
 800a260:	711a      	strb	r2, [r3, #4]
 800a262:	2200      	movs	r2, #0
 800a264:	f042 0202 	orr.w	r2, r2, #2
 800a268:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2243      	movs	r2, #67	; 0x43
 800a26e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a270:	4b02      	ldr	r3, [pc, #8]	; (800a27c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a272:	4618      	mov	r0, r3
 800a274:	3718      	adds	r7, #24
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	bf00      	nop
 800a27c:	24000094 	.word	0x24000094

0800a280 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b086      	sub	sp, #24
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a288:	2182      	movs	r1, #130	; 0x82
 800a28a:	4818      	ldr	r0, [pc, #96]	; (800a2ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a28c:	f000 fcdf 	bl	800ac4e <USBD_GetEpDesc>
 800a290:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a292:	2101      	movs	r1, #1
 800a294:	4815      	ldr	r0, [pc, #84]	; (800a2ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a296:	f000 fcda 	bl	800ac4e <USBD_GetEpDesc>
 800a29a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a29c:	2181      	movs	r1, #129	; 0x81
 800a29e:	4813      	ldr	r0, [pc, #76]	; (800a2ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a2a0:	f000 fcd5 	bl	800ac4e <USBD_GetEpDesc>
 800a2a4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d002      	beq.n	800a2b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	2210      	movs	r2, #16
 800a2b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d006      	beq.n	800a2c6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a2c0:	711a      	strb	r2, [r3, #4]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d006      	beq.n	800a2da <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a2d4:	711a      	strb	r2, [r3, #4]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2243      	movs	r2, #67	; 0x43
 800a2de:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a2e0:	4b02      	ldr	r3, [pc, #8]	; (800a2ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3718      	adds	r7, #24
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}
 800a2ea:	bf00      	nop
 800a2ec:	24000094 	.word	0x24000094

0800a2f0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b083      	sub	sp, #12
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	220a      	movs	r2, #10
 800a2fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a2fe:	4b03      	ldr	r3, [pc, #12]	; (800a30c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a300:	4618      	mov	r0, r3
 800a302:	370c      	adds	r7, #12
 800a304:	46bd      	mov	sp, r7
 800a306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30a:	4770      	bx	lr
 800a30c:	24000050 	.word	0x24000050

0800a310 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a310:	b480      	push	{r7}
 800a312:	b083      	sub	sp, #12
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d101      	bne.n	800a324 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a320:	2303      	movs	r3, #3
 800a322:	e009      	b.n	800a338 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a32a:	687a      	ldr	r2, [r7, #4]
 800a32c:	33b0      	adds	r3, #176	; 0xb0
 800a32e:	009b      	lsls	r3, r3, #2
 800a330:	4413      	add	r3, r2
 800a332:	683a      	ldr	r2, [r7, #0]
 800a334:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a336:	2300      	movs	r3, #0
}
 800a338:	4618      	mov	r0, r3
 800a33a:	370c      	adds	r7, #12
 800a33c:	46bd      	mov	sp, r7
 800a33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a342:	4770      	bx	lr

0800a344 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a344:	b480      	push	{r7}
 800a346:	b087      	sub	sp, #28
 800a348:	af00      	add	r7, sp, #0
 800a34a:	60f8      	str	r0, [r7, #12]
 800a34c:	60b9      	str	r1, [r7, #8]
 800a34e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	32b0      	adds	r2, #176	; 0xb0
 800a35a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a35e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d101      	bne.n	800a36a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a366:	2303      	movs	r3, #3
 800a368:	e008      	b.n	800a37c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	68ba      	ldr	r2, [r7, #8]
 800a36e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	687a      	ldr	r2, [r7, #4]
 800a376:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a37a:	2300      	movs	r3, #0
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	371c      	adds	r7, #28
 800a380:	46bd      	mov	sp, r7
 800a382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a386:	4770      	bx	lr

0800a388 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a388:	b480      	push	{r7}
 800a38a:	b085      	sub	sp, #20
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	32b0      	adds	r2, #176	; 0xb0
 800a39c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3a0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d101      	bne.n	800a3ac <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a3a8:	2303      	movs	r3, #3
 800a3aa:	e004      	b.n	800a3b6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	683a      	ldr	r2, [r7, #0]
 800a3b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a3b4:	2300      	movs	r3, #0
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3714      	adds	r7, #20
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c0:	4770      	bx	lr
	...

0800a3c4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b084      	sub	sp, #16
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	32b0      	adds	r2, #176	; 0xb0
 800a3d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3da:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a3dc:	2301      	movs	r3, #1
 800a3de:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d101      	bne.n	800a3ea <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a3e6:	2303      	movs	r3, #3
 800a3e8:	e025      	b.n	800a436 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d11f      	bne.n	800a434 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a3fc:	4b10      	ldr	r3, [pc, #64]	; (800a440 <USBD_CDC_TransmitPacket+0x7c>)
 800a3fe:	781b      	ldrb	r3, [r3, #0]
 800a400:	f003 020f 	and.w	r2, r3, #15
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	4613      	mov	r3, r2
 800a40e:	009b      	lsls	r3, r3, #2
 800a410:	4413      	add	r3, r2
 800a412:	009b      	lsls	r3, r3, #2
 800a414:	4403      	add	r3, r0
 800a416:	3318      	adds	r3, #24
 800a418:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a41a:	4b09      	ldr	r3, [pc, #36]	; (800a440 <USBD_CDC_TransmitPacket+0x7c>)
 800a41c:	7819      	ldrb	r1, [r3, #0]
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f002 f809 	bl	800c442 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a430:	2300      	movs	r3, #0
 800a432:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a434:	7bfb      	ldrb	r3, [r7, #15]
}
 800a436:	4618      	mov	r0, r3
 800a438:	3710      	adds	r7, #16
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}
 800a43e:	bf00      	nop
 800a440:	240000d7 	.word	0x240000d7

0800a444 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b084      	sub	sp, #16
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	32b0      	adds	r2, #176	; 0xb0
 800a456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a45a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	32b0      	adds	r2, #176	; 0xb0
 800a466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d101      	bne.n	800a472 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a46e:	2303      	movs	r3, #3
 800a470:	e018      	b.n	800a4a4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	7c1b      	ldrb	r3, [r3, #16]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d10a      	bne.n	800a490 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a47a:	4b0c      	ldr	r3, [pc, #48]	; (800a4ac <USBD_CDC_ReceivePacket+0x68>)
 800a47c:	7819      	ldrb	r1, [r3, #0]
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a484:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f001 fffb 	bl	800c484 <USBD_LL_PrepareReceive>
 800a48e:	e008      	b.n	800a4a2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a490:	4b06      	ldr	r3, [pc, #24]	; (800a4ac <USBD_CDC_ReceivePacket+0x68>)
 800a492:	7819      	ldrb	r1, [r3, #0]
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a49a:	2340      	movs	r3, #64	; 0x40
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f001 fff1 	bl	800c484 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a4a2:	2300      	movs	r3, #0
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3710      	adds	r7, #16
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}
 800a4ac:	240000d8 	.word	0x240000d8

0800a4b0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b086      	sub	sp, #24
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	60f8      	str	r0, [r7, #12]
 800a4b8:	60b9      	str	r1, [r7, #8]
 800a4ba:	4613      	mov	r3, r2
 800a4bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d101      	bne.n	800a4c8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a4c4:	2303      	movs	r3, #3
 800a4c6:	e01f      	b.n	800a508 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d003      	beq.n	800a4ee <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	68ba      	ldr	r2, [r7, #8]
 800a4ea:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	2201      	movs	r2, #1
 800a4f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	79fa      	ldrb	r2, [r7, #7]
 800a4fa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a4fc:	68f8      	ldr	r0, [r7, #12]
 800a4fe:	f001 fe67 	bl	800c1d0 <USBD_LL_Init>
 800a502:	4603      	mov	r3, r0
 800a504:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a506:	7dfb      	ldrb	r3, [r7, #23]
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3718      	adds	r7, #24
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}

0800a510 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b084      	sub	sp, #16
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a51a:	2300      	movs	r3, #0
 800a51c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d101      	bne.n	800a528 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a524:	2303      	movs	r3, #3
 800a526:	e025      	b.n	800a574 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	683a      	ldr	r2, [r7, #0]
 800a52c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	32ae      	adds	r2, #174	; 0xae
 800a53a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a53e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a540:	2b00      	cmp	r3, #0
 800a542:	d00f      	beq.n	800a564 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	32ae      	adds	r2, #174	; 0xae
 800a54e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a554:	f107 020e 	add.w	r2, r7, #14
 800a558:	4610      	mov	r0, r2
 800a55a:	4798      	blx	r3
 800a55c:	4602      	mov	r2, r0
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a56a:	1c5a      	adds	r2, r3, #1
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a572:	2300      	movs	r3, #0
}
 800a574:	4618      	mov	r0, r3
 800a576:	3710      	adds	r7, #16
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}

0800a57c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b082      	sub	sp, #8
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f001 fe73 	bl	800c270 <USBD_LL_Start>
 800a58a:	4603      	mov	r3, r0
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3708      	adds	r7, #8
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}

0800a594 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a594:	b480      	push	{r7}
 800a596:	b083      	sub	sp, #12
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a59c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	370c      	adds	r7, #12
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a8:	4770      	bx	lr

0800a5aa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a5aa:	b580      	push	{r7, lr}
 800a5ac:	b084      	sub	sp, #16
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	6078      	str	r0, [r7, #4]
 800a5b2:	460b      	mov	r3, r1
 800a5b4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d009      	beq.n	800a5d8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	78fa      	ldrb	r2, [r7, #3]
 800a5ce:	4611      	mov	r1, r2
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	4798      	blx	r3
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a5d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3710      	adds	r7, #16
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}

0800a5e2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a5e2:	b580      	push	{r7, lr}
 800a5e4:	b084      	sub	sp, #16
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	6078      	str	r0, [r7, #4]
 800a5ea:	460b      	mov	r3, r1
 800a5ec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5f8:	685b      	ldr	r3, [r3, #4]
 800a5fa:	78fa      	ldrb	r2, [r7, #3]
 800a5fc:	4611      	mov	r1, r2
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	4798      	blx	r3
 800a602:	4603      	mov	r3, r0
 800a604:	2b00      	cmp	r3, #0
 800a606:	d001      	beq.n	800a60c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a608:	2303      	movs	r3, #3
 800a60a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a60c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a60e:	4618      	mov	r0, r3
 800a610:	3710      	adds	r7, #16
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}

0800a616 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a616:	b580      	push	{r7, lr}
 800a618:	b084      	sub	sp, #16
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	6078      	str	r0, [r7, #4]
 800a61e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a626:	6839      	ldr	r1, [r7, #0]
 800a628:	4618      	mov	r0, r3
 800a62a:	f001 f938 	bl	800b89e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2201      	movs	r2, #1
 800a632:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a63c:	461a      	mov	r2, r3
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a64a:	f003 031f 	and.w	r3, r3, #31
 800a64e:	2b02      	cmp	r3, #2
 800a650:	d01a      	beq.n	800a688 <USBD_LL_SetupStage+0x72>
 800a652:	2b02      	cmp	r3, #2
 800a654:	d822      	bhi.n	800a69c <USBD_LL_SetupStage+0x86>
 800a656:	2b00      	cmp	r3, #0
 800a658:	d002      	beq.n	800a660 <USBD_LL_SetupStage+0x4a>
 800a65a:	2b01      	cmp	r3, #1
 800a65c:	d00a      	beq.n	800a674 <USBD_LL_SetupStage+0x5e>
 800a65e:	e01d      	b.n	800a69c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a666:	4619      	mov	r1, r3
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f000 fb65 	bl	800ad38 <USBD_StdDevReq>
 800a66e:	4603      	mov	r3, r0
 800a670:	73fb      	strb	r3, [r7, #15]
      break;
 800a672:	e020      	b.n	800a6b6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a67a:	4619      	mov	r1, r3
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f000 fbcd 	bl	800ae1c <USBD_StdItfReq>
 800a682:	4603      	mov	r3, r0
 800a684:	73fb      	strb	r3, [r7, #15]
      break;
 800a686:	e016      	b.n	800a6b6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a68e:	4619      	mov	r1, r3
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f000 fc2f 	bl	800aef4 <USBD_StdEPReq>
 800a696:	4603      	mov	r3, r0
 800a698:	73fb      	strb	r3, [r7, #15]
      break;
 800a69a:	e00c      	b.n	800a6b6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a6a2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a6a6:	b2db      	uxtb	r3, r3
 800a6a8:	4619      	mov	r1, r3
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f001 fe40 	bl	800c330 <USBD_LL_StallEP>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	73fb      	strb	r3, [r7, #15]
      break;
 800a6b4:	bf00      	nop
  }

  return ret;
 800a6b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3710      	adds	r7, #16
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b086      	sub	sp, #24
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	60f8      	str	r0, [r7, #12]
 800a6c8:	460b      	mov	r3, r1
 800a6ca:	607a      	str	r2, [r7, #4]
 800a6cc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a6d2:	7afb      	ldrb	r3, [r7, #11]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d16e      	bne.n	800a7b6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a6de:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a6e6:	2b03      	cmp	r3, #3
 800a6e8:	f040 8098 	bne.w	800a81c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	689a      	ldr	r2, [r3, #8]
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	68db      	ldr	r3, [r3, #12]
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d913      	bls.n	800a720 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a6f8:	693b      	ldr	r3, [r7, #16]
 800a6fa:	689a      	ldr	r2, [r3, #8]
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	68db      	ldr	r3, [r3, #12]
 800a700:	1ad2      	subs	r2, r2, r3
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	68da      	ldr	r2, [r3, #12]
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	689b      	ldr	r3, [r3, #8]
 800a70e:	4293      	cmp	r3, r2
 800a710:	bf28      	it	cs
 800a712:	4613      	movcs	r3, r2
 800a714:	461a      	mov	r2, r3
 800a716:	6879      	ldr	r1, [r7, #4]
 800a718:	68f8      	ldr	r0, [r7, #12]
 800a71a:	f001 f9b4 	bl	800ba86 <USBD_CtlContinueRx>
 800a71e:	e07d      	b.n	800a81c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a726:	f003 031f 	and.w	r3, r3, #31
 800a72a:	2b02      	cmp	r3, #2
 800a72c:	d014      	beq.n	800a758 <USBD_LL_DataOutStage+0x98>
 800a72e:	2b02      	cmp	r3, #2
 800a730:	d81d      	bhi.n	800a76e <USBD_LL_DataOutStage+0xae>
 800a732:	2b00      	cmp	r3, #0
 800a734:	d002      	beq.n	800a73c <USBD_LL_DataOutStage+0x7c>
 800a736:	2b01      	cmp	r3, #1
 800a738:	d003      	beq.n	800a742 <USBD_LL_DataOutStage+0x82>
 800a73a:	e018      	b.n	800a76e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a73c:	2300      	movs	r3, #0
 800a73e:	75bb      	strb	r3, [r7, #22]
            break;
 800a740:	e018      	b.n	800a774 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a748:	b2db      	uxtb	r3, r3
 800a74a:	4619      	mov	r1, r3
 800a74c:	68f8      	ldr	r0, [r7, #12]
 800a74e:	f000 fa64 	bl	800ac1a <USBD_CoreFindIF>
 800a752:	4603      	mov	r3, r0
 800a754:	75bb      	strb	r3, [r7, #22]
            break;
 800a756:	e00d      	b.n	800a774 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a75e:	b2db      	uxtb	r3, r3
 800a760:	4619      	mov	r1, r3
 800a762:	68f8      	ldr	r0, [r7, #12]
 800a764:	f000 fa66 	bl	800ac34 <USBD_CoreFindEP>
 800a768:	4603      	mov	r3, r0
 800a76a:	75bb      	strb	r3, [r7, #22]
            break;
 800a76c:	e002      	b.n	800a774 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a76e:	2300      	movs	r3, #0
 800a770:	75bb      	strb	r3, [r7, #22]
            break;
 800a772:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a774:	7dbb      	ldrb	r3, [r7, #22]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d119      	bne.n	800a7ae <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a780:	b2db      	uxtb	r3, r3
 800a782:	2b03      	cmp	r3, #3
 800a784:	d113      	bne.n	800a7ae <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a786:	7dba      	ldrb	r2, [r7, #22]
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	32ae      	adds	r2, #174	; 0xae
 800a78c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a790:	691b      	ldr	r3, [r3, #16]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d00b      	beq.n	800a7ae <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a796:	7dba      	ldrb	r2, [r7, #22]
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a79e:	7dba      	ldrb	r2, [r7, #22]
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	32ae      	adds	r2, #174	; 0xae
 800a7a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7a8:	691b      	ldr	r3, [r3, #16]
 800a7aa:	68f8      	ldr	r0, [r7, #12]
 800a7ac:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a7ae:	68f8      	ldr	r0, [r7, #12]
 800a7b0:	f001 f97a 	bl	800baa8 <USBD_CtlSendStatus>
 800a7b4:	e032      	b.n	800a81c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a7b6:	7afb      	ldrb	r3, [r7, #11]
 800a7b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7bc:	b2db      	uxtb	r3, r3
 800a7be:	4619      	mov	r1, r3
 800a7c0:	68f8      	ldr	r0, [r7, #12]
 800a7c2:	f000 fa37 	bl	800ac34 <USBD_CoreFindEP>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a7ca:	7dbb      	ldrb	r3, [r7, #22]
 800a7cc:	2bff      	cmp	r3, #255	; 0xff
 800a7ce:	d025      	beq.n	800a81c <USBD_LL_DataOutStage+0x15c>
 800a7d0:	7dbb      	ldrb	r3, [r7, #22]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d122      	bne.n	800a81c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7dc:	b2db      	uxtb	r3, r3
 800a7de:	2b03      	cmp	r3, #3
 800a7e0:	d117      	bne.n	800a812 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a7e2:	7dba      	ldrb	r2, [r7, #22]
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	32ae      	adds	r2, #174	; 0xae
 800a7e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7ec:	699b      	ldr	r3, [r3, #24]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d00f      	beq.n	800a812 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a7f2:	7dba      	ldrb	r2, [r7, #22]
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a7fa:	7dba      	ldrb	r2, [r7, #22]
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	32ae      	adds	r2, #174	; 0xae
 800a800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a804:	699b      	ldr	r3, [r3, #24]
 800a806:	7afa      	ldrb	r2, [r7, #11]
 800a808:	4611      	mov	r1, r2
 800a80a:	68f8      	ldr	r0, [r7, #12]
 800a80c:	4798      	blx	r3
 800a80e:	4603      	mov	r3, r0
 800a810:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a812:	7dfb      	ldrb	r3, [r7, #23]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d001      	beq.n	800a81c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a818:	7dfb      	ldrb	r3, [r7, #23]
 800a81a:	e000      	b.n	800a81e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a81c:	2300      	movs	r3, #0
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3718      	adds	r7, #24
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}

0800a826 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a826:	b580      	push	{r7, lr}
 800a828:	b086      	sub	sp, #24
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	60f8      	str	r0, [r7, #12]
 800a82e:	460b      	mov	r3, r1
 800a830:	607a      	str	r2, [r7, #4]
 800a832:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a834:	7afb      	ldrb	r3, [r7, #11]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d16f      	bne.n	800a91a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	3314      	adds	r3, #20
 800a83e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a846:	2b02      	cmp	r3, #2
 800a848:	d15a      	bne.n	800a900 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a84a:	693b      	ldr	r3, [r7, #16]
 800a84c:	689a      	ldr	r2, [r3, #8]
 800a84e:	693b      	ldr	r3, [r7, #16]
 800a850:	68db      	ldr	r3, [r3, #12]
 800a852:	429a      	cmp	r2, r3
 800a854:	d914      	bls.n	800a880 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a856:	693b      	ldr	r3, [r7, #16]
 800a858:	689a      	ldr	r2, [r3, #8]
 800a85a:	693b      	ldr	r3, [r7, #16]
 800a85c:	68db      	ldr	r3, [r3, #12]
 800a85e:	1ad2      	subs	r2, r2, r3
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	689b      	ldr	r3, [r3, #8]
 800a868:	461a      	mov	r2, r3
 800a86a:	6879      	ldr	r1, [r7, #4]
 800a86c:	68f8      	ldr	r0, [r7, #12]
 800a86e:	f001 f8dc 	bl	800ba2a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a872:	2300      	movs	r3, #0
 800a874:	2200      	movs	r2, #0
 800a876:	2100      	movs	r1, #0
 800a878:	68f8      	ldr	r0, [r7, #12]
 800a87a:	f001 fe03 	bl	800c484 <USBD_LL_PrepareReceive>
 800a87e:	e03f      	b.n	800a900 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	68da      	ldr	r2, [r3, #12]
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	689b      	ldr	r3, [r3, #8]
 800a888:	429a      	cmp	r2, r3
 800a88a:	d11c      	bne.n	800a8c6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a88c:	693b      	ldr	r3, [r7, #16]
 800a88e:	685a      	ldr	r2, [r3, #4]
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a894:	429a      	cmp	r2, r3
 800a896:	d316      	bcc.n	800a8c6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	685a      	ldr	r2, [r3, #4]
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d20f      	bcs.n	800a8c6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	2100      	movs	r1, #0
 800a8aa:	68f8      	ldr	r0, [r7, #12]
 800a8ac:	f001 f8bd 	bl	800ba2a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	2100      	movs	r1, #0
 800a8be:	68f8      	ldr	r0, [r7, #12]
 800a8c0:	f001 fde0 	bl	800c484 <USBD_LL_PrepareReceive>
 800a8c4:	e01c      	b.n	800a900 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8cc:	b2db      	uxtb	r3, r3
 800a8ce:	2b03      	cmp	r3, #3
 800a8d0:	d10f      	bne.n	800a8f2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8d8:	68db      	ldr	r3, [r3, #12]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d009      	beq.n	800a8f2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8ec:	68db      	ldr	r3, [r3, #12]
 800a8ee:	68f8      	ldr	r0, [r7, #12]
 800a8f0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a8f2:	2180      	movs	r1, #128	; 0x80
 800a8f4:	68f8      	ldr	r0, [r7, #12]
 800a8f6:	f001 fd1b 	bl	800c330 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a8fa:	68f8      	ldr	r0, [r7, #12]
 800a8fc:	f001 f8e7 	bl	800bace <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a906:	2b00      	cmp	r3, #0
 800a908:	d03a      	beq.n	800a980 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a90a:	68f8      	ldr	r0, [r7, #12]
 800a90c:	f7ff fe42 	bl	800a594 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	2200      	movs	r2, #0
 800a914:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a918:	e032      	b.n	800a980 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a91a:	7afb      	ldrb	r3, [r7, #11]
 800a91c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a920:	b2db      	uxtb	r3, r3
 800a922:	4619      	mov	r1, r3
 800a924:	68f8      	ldr	r0, [r7, #12]
 800a926:	f000 f985 	bl	800ac34 <USBD_CoreFindEP>
 800a92a:	4603      	mov	r3, r0
 800a92c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a92e:	7dfb      	ldrb	r3, [r7, #23]
 800a930:	2bff      	cmp	r3, #255	; 0xff
 800a932:	d025      	beq.n	800a980 <USBD_LL_DataInStage+0x15a>
 800a934:	7dfb      	ldrb	r3, [r7, #23]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d122      	bne.n	800a980 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a940:	b2db      	uxtb	r3, r3
 800a942:	2b03      	cmp	r3, #3
 800a944:	d11c      	bne.n	800a980 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a946:	7dfa      	ldrb	r2, [r7, #23]
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	32ae      	adds	r2, #174	; 0xae
 800a94c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a950:	695b      	ldr	r3, [r3, #20]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d014      	beq.n	800a980 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a956:	7dfa      	ldrb	r2, [r7, #23]
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a95e:	7dfa      	ldrb	r2, [r7, #23]
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	32ae      	adds	r2, #174	; 0xae
 800a964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a968:	695b      	ldr	r3, [r3, #20]
 800a96a:	7afa      	ldrb	r2, [r7, #11]
 800a96c:	4611      	mov	r1, r2
 800a96e:	68f8      	ldr	r0, [r7, #12]
 800a970:	4798      	blx	r3
 800a972:	4603      	mov	r3, r0
 800a974:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a976:	7dbb      	ldrb	r3, [r7, #22]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d001      	beq.n	800a980 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a97c:	7dbb      	ldrb	r3, [r7, #22]
 800a97e:	e000      	b.n	800a982 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a980:	2300      	movs	r3, #0
}
 800a982:	4618      	mov	r0, r3
 800a984:	3718      	adds	r7, #24
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}

0800a98a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a98a:	b580      	push	{r7, lr}
 800a98c:	b084      	sub	sp, #16
 800a98e:	af00      	add	r7, sp, #0
 800a990:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a992:	2300      	movs	r3, #0
 800a994:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2201      	movs	r2, #1
 800a99a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d014      	beq.n	800a9f0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9cc:	685b      	ldr	r3, [r3, #4]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d00e      	beq.n	800a9f0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9d8:	685b      	ldr	r3, [r3, #4]
 800a9da:	687a      	ldr	r2, [r7, #4]
 800a9dc:	6852      	ldr	r2, [r2, #4]
 800a9de:	b2d2      	uxtb	r2, r2
 800a9e0:	4611      	mov	r1, r2
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	4798      	blx	r3
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d001      	beq.n	800a9f0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a9ec:	2303      	movs	r3, #3
 800a9ee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a9f0:	2340      	movs	r3, #64	; 0x40
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	2100      	movs	r1, #0
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f001 fc55 	bl	800c2a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2201      	movs	r2, #1
 800aa00:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2240      	movs	r2, #64	; 0x40
 800aa08:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aa0c:	2340      	movs	r3, #64	; 0x40
 800aa0e:	2200      	movs	r2, #0
 800aa10:	2180      	movs	r1, #128	; 0x80
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f001 fc47 	bl	800c2a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2201      	movs	r2, #1
 800aa1c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2240      	movs	r2, #64	; 0x40
 800aa22:	621a      	str	r2, [r3, #32]

  return ret;
 800aa24:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	3710      	adds	r7, #16
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}

0800aa2e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800aa2e:	b480      	push	{r7}
 800aa30:	b083      	sub	sp, #12
 800aa32:	af00      	add	r7, sp, #0
 800aa34:	6078      	str	r0, [r7, #4]
 800aa36:	460b      	mov	r3, r1
 800aa38:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	78fa      	ldrb	r2, [r7, #3]
 800aa3e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800aa40:	2300      	movs	r3, #0
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	370c      	adds	r7, #12
 800aa46:	46bd      	mov	sp, r7
 800aa48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4c:	4770      	bx	lr

0800aa4e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800aa4e:	b480      	push	{r7}
 800aa50:	b083      	sub	sp, #12
 800aa52:	af00      	add	r7, sp, #0
 800aa54:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa5c:	b2db      	uxtb	r3, r3
 800aa5e:	2b04      	cmp	r3, #4
 800aa60:	d006      	beq.n	800aa70 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa68:	b2da      	uxtb	r2, r3
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2204      	movs	r2, #4
 800aa74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800aa78:	2300      	movs	r3, #0
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	370c      	adds	r7, #12
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa84:	4770      	bx	lr

0800aa86 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800aa86:	b480      	push	{r7}
 800aa88:	b083      	sub	sp, #12
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa94:	b2db      	uxtb	r3, r3
 800aa96:	2b04      	cmp	r3, #4
 800aa98:	d106      	bne.n	800aaa8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800aaa0:	b2da      	uxtb	r2, r3
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800aaa8:	2300      	movs	r3, #0
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	370c      	adds	r7, #12
 800aaae:	46bd      	mov	sp, r7
 800aab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab4:	4770      	bx	lr

0800aab6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800aab6:	b580      	push	{r7, lr}
 800aab8:	b082      	sub	sp, #8
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aac4:	b2db      	uxtb	r3, r3
 800aac6:	2b03      	cmp	r3, #3
 800aac8:	d110      	bne.n	800aaec <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d00b      	beq.n	800aaec <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aada:	69db      	ldr	r3, [r3, #28]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d005      	beq.n	800aaec <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aae6:	69db      	ldr	r3, [r3, #28]
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800aaec:	2300      	movs	r3, #0
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3708      	adds	r7, #8
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}

0800aaf6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800aaf6:	b580      	push	{r7, lr}
 800aaf8:	b082      	sub	sp, #8
 800aafa:	af00      	add	r7, sp, #0
 800aafc:	6078      	str	r0, [r7, #4]
 800aafe:	460b      	mov	r3, r1
 800ab00:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	32ae      	adds	r2, #174	; 0xae
 800ab0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d101      	bne.n	800ab18 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ab14:	2303      	movs	r3, #3
 800ab16:	e01c      	b.n	800ab52 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab1e:	b2db      	uxtb	r3, r3
 800ab20:	2b03      	cmp	r3, #3
 800ab22:	d115      	bne.n	800ab50 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	32ae      	adds	r2, #174	; 0xae
 800ab2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab32:	6a1b      	ldr	r3, [r3, #32]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d00b      	beq.n	800ab50 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	32ae      	adds	r2, #174	; 0xae
 800ab42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab46:	6a1b      	ldr	r3, [r3, #32]
 800ab48:	78fa      	ldrb	r2, [r7, #3]
 800ab4a:	4611      	mov	r1, r2
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ab50:	2300      	movs	r3, #0
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	3708      	adds	r7, #8
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}

0800ab5a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ab5a:	b580      	push	{r7, lr}
 800ab5c:	b082      	sub	sp, #8
 800ab5e:	af00      	add	r7, sp, #0
 800ab60:	6078      	str	r0, [r7, #4]
 800ab62:	460b      	mov	r3, r1
 800ab64:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	32ae      	adds	r2, #174	; 0xae
 800ab70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d101      	bne.n	800ab7c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ab78:	2303      	movs	r3, #3
 800ab7a:	e01c      	b.n	800abb6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab82:	b2db      	uxtb	r3, r3
 800ab84:	2b03      	cmp	r3, #3
 800ab86:	d115      	bne.n	800abb4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	32ae      	adds	r2, #174	; 0xae
 800ab92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d00b      	beq.n	800abb4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	32ae      	adds	r2, #174	; 0xae
 800aba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abac:	78fa      	ldrb	r2, [r7, #3]
 800abae:	4611      	mov	r1, r2
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800abb4:	2300      	movs	r3, #0
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3708      	adds	r7, #8
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}

0800abbe <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800abbe:	b480      	push	{r7}
 800abc0:	b083      	sub	sp, #12
 800abc2:	af00      	add	r7, sp, #0
 800abc4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800abc6:	2300      	movs	r3, #0
}
 800abc8:	4618      	mov	r0, r3
 800abca:	370c      	adds	r7, #12
 800abcc:	46bd      	mov	sp, r7
 800abce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd2:	4770      	bx	lr

0800abd4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b084      	sub	sp, #16
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800abdc:	2300      	movs	r3, #0
 800abde:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2201      	movs	r2, #1
 800abe4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d00e      	beq.n	800ac10 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abf8:	685b      	ldr	r3, [r3, #4]
 800abfa:	687a      	ldr	r2, [r7, #4]
 800abfc:	6852      	ldr	r2, [r2, #4]
 800abfe:	b2d2      	uxtb	r2, r2
 800ac00:	4611      	mov	r1, r2
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	4798      	blx	r3
 800ac06:	4603      	mov	r3, r0
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d001      	beq.n	800ac10 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ac0c:	2303      	movs	r3, #3
 800ac0e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ac10:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3710      	adds	r7, #16
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}

0800ac1a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ac1a:	b480      	push	{r7}
 800ac1c:	b083      	sub	sp, #12
 800ac1e:	af00      	add	r7, sp, #0
 800ac20:	6078      	str	r0, [r7, #4]
 800ac22:	460b      	mov	r3, r1
 800ac24:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ac26:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	370c      	adds	r7, #12
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac32:	4770      	bx	lr

0800ac34 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ac34:	b480      	push	{r7}
 800ac36:	b083      	sub	sp, #12
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
 800ac3c:	460b      	mov	r3, r1
 800ac3e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ac40:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	370c      	adds	r7, #12
 800ac46:	46bd      	mov	sp, r7
 800ac48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4c:	4770      	bx	lr

0800ac4e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ac4e:	b580      	push	{r7, lr}
 800ac50:	b086      	sub	sp, #24
 800ac52:	af00      	add	r7, sp, #0
 800ac54:	6078      	str	r0, [r7, #4]
 800ac56:	460b      	mov	r3, r1
 800ac58:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ac62:	2300      	movs	r3, #0
 800ac64:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	885b      	ldrh	r3, [r3, #2]
 800ac6a:	b29a      	uxth	r2, r3
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	781b      	ldrb	r3, [r3, #0]
 800ac70:	b29b      	uxth	r3, r3
 800ac72:	429a      	cmp	r2, r3
 800ac74:	d920      	bls.n	800acb8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	781b      	ldrb	r3, [r3, #0]
 800ac7a:	b29b      	uxth	r3, r3
 800ac7c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ac7e:	e013      	b.n	800aca8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ac80:	f107 030a 	add.w	r3, r7, #10
 800ac84:	4619      	mov	r1, r3
 800ac86:	6978      	ldr	r0, [r7, #20]
 800ac88:	f000 f81b 	bl	800acc2 <USBD_GetNextDesc>
 800ac8c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	785b      	ldrb	r3, [r3, #1]
 800ac92:	2b05      	cmp	r3, #5
 800ac94:	d108      	bne.n	800aca8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ac9a:	693b      	ldr	r3, [r7, #16]
 800ac9c:	789b      	ldrb	r3, [r3, #2]
 800ac9e:	78fa      	ldrb	r2, [r7, #3]
 800aca0:	429a      	cmp	r2, r3
 800aca2:	d008      	beq.n	800acb6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800aca4:	2300      	movs	r3, #0
 800aca6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	885b      	ldrh	r3, [r3, #2]
 800acac:	b29a      	uxth	r2, r3
 800acae:	897b      	ldrh	r3, [r7, #10]
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d8e5      	bhi.n	800ac80 <USBD_GetEpDesc+0x32>
 800acb4:	e000      	b.n	800acb8 <USBD_GetEpDesc+0x6a>
          break;
 800acb6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800acb8:	693b      	ldr	r3, [r7, #16]
}
 800acba:	4618      	mov	r0, r3
 800acbc:	3718      	adds	r7, #24
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}

0800acc2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800acc2:	b480      	push	{r7}
 800acc4:	b085      	sub	sp, #20
 800acc6:	af00      	add	r7, sp, #0
 800acc8:	6078      	str	r0, [r7, #4]
 800acca:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	881a      	ldrh	r2, [r3, #0]
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	781b      	ldrb	r3, [r3, #0]
 800acd8:	b29b      	uxth	r3, r3
 800acda:	4413      	add	r3, r2
 800acdc:	b29a      	uxth	r2, r3
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	781b      	ldrb	r3, [r3, #0]
 800ace6:	461a      	mov	r2, r3
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	4413      	add	r3, r2
 800acec:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800acee:	68fb      	ldr	r3, [r7, #12]
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3714      	adds	r7, #20
 800acf4:	46bd      	mov	sp, r7
 800acf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfa:	4770      	bx	lr

0800acfc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800acfc:	b480      	push	{r7}
 800acfe:	b087      	sub	sp, #28
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	781b      	ldrb	r3, [r3, #0]
 800ad0c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	3301      	adds	r3, #1
 800ad12:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ad14:	697b      	ldr	r3, [r7, #20]
 800ad16:	781b      	ldrb	r3, [r3, #0]
 800ad18:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ad1a:	8a3b      	ldrh	r3, [r7, #16]
 800ad1c:	021b      	lsls	r3, r3, #8
 800ad1e:	b21a      	sxth	r2, r3
 800ad20:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ad24:	4313      	orrs	r3, r2
 800ad26:	b21b      	sxth	r3, r3
 800ad28:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ad2a:	89fb      	ldrh	r3, [r7, #14]
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	371c      	adds	r7, #28
 800ad30:	46bd      	mov	sp, r7
 800ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad36:	4770      	bx	lr

0800ad38 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b084      	sub	sp, #16
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad42:	2300      	movs	r3, #0
 800ad44:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	781b      	ldrb	r3, [r3, #0]
 800ad4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ad4e:	2b40      	cmp	r3, #64	; 0x40
 800ad50:	d005      	beq.n	800ad5e <USBD_StdDevReq+0x26>
 800ad52:	2b40      	cmp	r3, #64	; 0x40
 800ad54:	d857      	bhi.n	800ae06 <USBD_StdDevReq+0xce>
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d00f      	beq.n	800ad7a <USBD_StdDevReq+0x42>
 800ad5a:	2b20      	cmp	r3, #32
 800ad5c:	d153      	bne.n	800ae06 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	32ae      	adds	r2, #174	; 0xae
 800ad68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad6c:	689b      	ldr	r3, [r3, #8]
 800ad6e:	6839      	ldr	r1, [r7, #0]
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	4798      	blx	r3
 800ad74:	4603      	mov	r3, r0
 800ad76:	73fb      	strb	r3, [r7, #15]
      break;
 800ad78:	e04a      	b.n	800ae10 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	785b      	ldrb	r3, [r3, #1]
 800ad7e:	2b09      	cmp	r3, #9
 800ad80:	d83b      	bhi.n	800adfa <USBD_StdDevReq+0xc2>
 800ad82:	a201      	add	r2, pc, #4	; (adr r2, 800ad88 <USBD_StdDevReq+0x50>)
 800ad84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad88:	0800addd 	.word	0x0800addd
 800ad8c:	0800adf1 	.word	0x0800adf1
 800ad90:	0800adfb 	.word	0x0800adfb
 800ad94:	0800ade7 	.word	0x0800ade7
 800ad98:	0800adfb 	.word	0x0800adfb
 800ad9c:	0800adbb 	.word	0x0800adbb
 800ada0:	0800adb1 	.word	0x0800adb1
 800ada4:	0800adfb 	.word	0x0800adfb
 800ada8:	0800add3 	.word	0x0800add3
 800adac:	0800adc5 	.word	0x0800adc5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800adb0:	6839      	ldr	r1, [r7, #0]
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f000 fa3c 	bl	800b230 <USBD_GetDescriptor>
          break;
 800adb8:	e024      	b.n	800ae04 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800adba:	6839      	ldr	r1, [r7, #0]
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f000 fbcb 	bl	800b558 <USBD_SetAddress>
          break;
 800adc2:	e01f      	b.n	800ae04 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800adc4:	6839      	ldr	r1, [r7, #0]
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f000 fc0a 	bl	800b5e0 <USBD_SetConfig>
 800adcc:	4603      	mov	r3, r0
 800adce:	73fb      	strb	r3, [r7, #15]
          break;
 800add0:	e018      	b.n	800ae04 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800add2:	6839      	ldr	r1, [r7, #0]
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f000 fcad 	bl	800b734 <USBD_GetConfig>
          break;
 800adda:	e013      	b.n	800ae04 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800addc:	6839      	ldr	r1, [r7, #0]
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f000 fcde 	bl	800b7a0 <USBD_GetStatus>
          break;
 800ade4:	e00e      	b.n	800ae04 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ade6:	6839      	ldr	r1, [r7, #0]
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f000 fd0d 	bl	800b808 <USBD_SetFeature>
          break;
 800adee:	e009      	b.n	800ae04 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800adf0:	6839      	ldr	r1, [r7, #0]
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f000 fd31 	bl	800b85a <USBD_ClrFeature>
          break;
 800adf8:	e004      	b.n	800ae04 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800adfa:	6839      	ldr	r1, [r7, #0]
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f000 fd88 	bl	800b912 <USBD_CtlError>
          break;
 800ae02:	bf00      	nop
      }
      break;
 800ae04:	e004      	b.n	800ae10 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ae06:	6839      	ldr	r1, [r7, #0]
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f000 fd82 	bl	800b912 <USBD_CtlError>
      break;
 800ae0e:	bf00      	nop
  }

  return ret;
 800ae10:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	3710      	adds	r7, #16
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}
 800ae1a:	bf00      	nop

0800ae1c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b084      	sub	sp, #16
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae26:	2300      	movs	r3, #0
 800ae28:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	781b      	ldrb	r3, [r3, #0]
 800ae2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae32:	2b40      	cmp	r3, #64	; 0x40
 800ae34:	d005      	beq.n	800ae42 <USBD_StdItfReq+0x26>
 800ae36:	2b40      	cmp	r3, #64	; 0x40
 800ae38:	d852      	bhi.n	800aee0 <USBD_StdItfReq+0xc4>
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d001      	beq.n	800ae42 <USBD_StdItfReq+0x26>
 800ae3e:	2b20      	cmp	r3, #32
 800ae40:	d14e      	bne.n	800aee0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae48:	b2db      	uxtb	r3, r3
 800ae4a:	3b01      	subs	r3, #1
 800ae4c:	2b02      	cmp	r3, #2
 800ae4e:	d840      	bhi.n	800aed2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	889b      	ldrh	r3, [r3, #4]
 800ae54:	b2db      	uxtb	r3, r3
 800ae56:	2b01      	cmp	r3, #1
 800ae58:	d836      	bhi.n	800aec8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	889b      	ldrh	r3, [r3, #4]
 800ae5e:	b2db      	uxtb	r3, r3
 800ae60:	4619      	mov	r1, r3
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f7ff fed9 	bl	800ac1a <USBD_CoreFindIF>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ae6c:	7bbb      	ldrb	r3, [r7, #14]
 800ae6e:	2bff      	cmp	r3, #255	; 0xff
 800ae70:	d01d      	beq.n	800aeae <USBD_StdItfReq+0x92>
 800ae72:	7bbb      	ldrb	r3, [r7, #14]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d11a      	bne.n	800aeae <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ae78:	7bba      	ldrb	r2, [r7, #14]
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	32ae      	adds	r2, #174	; 0xae
 800ae7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae82:	689b      	ldr	r3, [r3, #8]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d00f      	beq.n	800aea8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ae88:	7bba      	ldrb	r2, [r7, #14]
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ae90:	7bba      	ldrb	r2, [r7, #14]
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	32ae      	adds	r2, #174	; 0xae
 800ae96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae9a:	689b      	ldr	r3, [r3, #8]
 800ae9c:	6839      	ldr	r1, [r7, #0]
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	4798      	blx	r3
 800aea2:	4603      	mov	r3, r0
 800aea4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800aea6:	e004      	b.n	800aeb2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800aea8:	2303      	movs	r3, #3
 800aeaa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800aeac:	e001      	b.n	800aeb2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800aeae:	2303      	movs	r3, #3
 800aeb0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	88db      	ldrh	r3, [r3, #6]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d110      	bne.n	800aedc <USBD_StdItfReq+0xc0>
 800aeba:	7bfb      	ldrb	r3, [r7, #15]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d10d      	bne.n	800aedc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f000 fdf1 	bl	800baa8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800aec6:	e009      	b.n	800aedc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800aec8:	6839      	ldr	r1, [r7, #0]
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f000 fd21 	bl	800b912 <USBD_CtlError>
          break;
 800aed0:	e004      	b.n	800aedc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800aed2:	6839      	ldr	r1, [r7, #0]
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f000 fd1c 	bl	800b912 <USBD_CtlError>
          break;
 800aeda:	e000      	b.n	800aede <USBD_StdItfReq+0xc2>
          break;
 800aedc:	bf00      	nop
      }
      break;
 800aede:	e004      	b.n	800aeea <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800aee0:	6839      	ldr	r1, [r7, #0]
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f000 fd15 	bl	800b912 <USBD_CtlError>
      break;
 800aee8:	bf00      	nop
  }

  return ret;
 800aeea:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3710      	adds	r7, #16
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b084      	sub	sp, #16
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
 800aefc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800aefe:	2300      	movs	r3, #0
 800af00:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	889b      	ldrh	r3, [r3, #4]
 800af06:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	781b      	ldrb	r3, [r3, #0]
 800af0c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800af10:	2b40      	cmp	r3, #64	; 0x40
 800af12:	d007      	beq.n	800af24 <USBD_StdEPReq+0x30>
 800af14:	2b40      	cmp	r3, #64	; 0x40
 800af16:	f200 817f 	bhi.w	800b218 <USBD_StdEPReq+0x324>
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d02a      	beq.n	800af74 <USBD_StdEPReq+0x80>
 800af1e:	2b20      	cmp	r3, #32
 800af20:	f040 817a 	bne.w	800b218 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800af24:	7bbb      	ldrb	r3, [r7, #14]
 800af26:	4619      	mov	r1, r3
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f7ff fe83 	bl	800ac34 <USBD_CoreFindEP>
 800af2e:	4603      	mov	r3, r0
 800af30:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800af32:	7b7b      	ldrb	r3, [r7, #13]
 800af34:	2bff      	cmp	r3, #255	; 0xff
 800af36:	f000 8174 	beq.w	800b222 <USBD_StdEPReq+0x32e>
 800af3a:	7b7b      	ldrb	r3, [r7, #13]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	f040 8170 	bne.w	800b222 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800af42:	7b7a      	ldrb	r2, [r7, #13]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800af4a:	7b7a      	ldrb	r2, [r7, #13]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	32ae      	adds	r2, #174	; 0xae
 800af50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af54:	689b      	ldr	r3, [r3, #8]
 800af56:	2b00      	cmp	r3, #0
 800af58:	f000 8163 	beq.w	800b222 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800af5c:	7b7a      	ldrb	r2, [r7, #13]
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	32ae      	adds	r2, #174	; 0xae
 800af62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af66:	689b      	ldr	r3, [r3, #8]
 800af68:	6839      	ldr	r1, [r7, #0]
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	4798      	blx	r3
 800af6e:	4603      	mov	r3, r0
 800af70:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800af72:	e156      	b.n	800b222 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	785b      	ldrb	r3, [r3, #1]
 800af78:	2b03      	cmp	r3, #3
 800af7a:	d008      	beq.n	800af8e <USBD_StdEPReq+0x9a>
 800af7c:	2b03      	cmp	r3, #3
 800af7e:	f300 8145 	bgt.w	800b20c <USBD_StdEPReq+0x318>
 800af82:	2b00      	cmp	r3, #0
 800af84:	f000 809b 	beq.w	800b0be <USBD_StdEPReq+0x1ca>
 800af88:	2b01      	cmp	r3, #1
 800af8a:	d03c      	beq.n	800b006 <USBD_StdEPReq+0x112>
 800af8c:	e13e      	b.n	800b20c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af94:	b2db      	uxtb	r3, r3
 800af96:	2b02      	cmp	r3, #2
 800af98:	d002      	beq.n	800afa0 <USBD_StdEPReq+0xac>
 800af9a:	2b03      	cmp	r3, #3
 800af9c:	d016      	beq.n	800afcc <USBD_StdEPReq+0xd8>
 800af9e:	e02c      	b.n	800affa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800afa0:	7bbb      	ldrb	r3, [r7, #14]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d00d      	beq.n	800afc2 <USBD_StdEPReq+0xce>
 800afa6:	7bbb      	ldrb	r3, [r7, #14]
 800afa8:	2b80      	cmp	r3, #128	; 0x80
 800afaa:	d00a      	beq.n	800afc2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800afac:	7bbb      	ldrb	r3, [r7, #14]
 800afae:	4619      	mov	r1, r3
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f001 f9bd 	bl	800c330 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800afb6:	2180      	movs	r1, #128	; 0x80
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f001 f9b9 	bl	800c330 <USBD_LL_StallEP>
 800afbe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800afc0:	e020      	b.n	800b004 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800afc2:	6839      	ldr	r1, [r7, #0]
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f000 fca4 	bl	800b912 <USBD_CtlError>
              break;
 800afca:	e01b      	b.n	800b004 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	885b      	ldrh	r3, [r3, #2]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d10e      	bne.n	800aff2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800afd4:	7bbb      	ldrb	r3, [r7, #14]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d00b      	beq.n	800aff2 <USBD_StdEPReq+0xfe>
 800afda:	7bbb      	ldrb	r3, [r7, #14]
 800afdc:	2b80      	cmp	r3, #128	; 0x80
 800afde:	d008      	beq.n	800aff2 <USBD_StdEPReq+0xfe>
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	88db      	ldrh	r3, [r3, #6]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d104      	bne.n	800aff2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800afe8:	7bbb      	ldrb	r3, [r7, #14]
 800afea:	4619      	mov	r1, r3
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f001 f99f 	bl	800c330 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f000 fd58 	bl	800baa8 <USBD_CtlSendStatus>

              break;
 800aff8:	e004      	b.n	800b004 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800affa:	6839      	ldr	r1, [r7, #0]
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f000 fc88 	bl	800b912 <USBD_CtlError>
              break;
 800b002:	bf00      	nop
          }
          break;
 800b004:	e107      	b.n	800b216 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b00c:	b2db      	uxtb	r3, r3
 800b00e:	2b02      	cmp	r3, #2
 800b010:	d002      	beq.n	800b018 <USBD_StdEPReq+0x124>
 800b012:	2b03      	cmp	r3, #3
 800b014:	d016      	beq.n	800b044 <USBD_StdEPReq+0x150>
 800b016:	e04b      	b.n	800b0b0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b018:	7bbb      	ldrb	r3, [r7, #14]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d00d      	beq.n	800b03a <USBD_StdEPReq+0x146>
 800b01e:	7bbb      	ldrb	r3, [r7, #14]
 800b020:	2b80      	cmp	r3, #128	; 0x80
 800b022:	d00a      	beq.n	800b03a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b024:	7bbb      	ldrb	r3, [r7, #14]
 800b026:	4619      	mov	r1, r3
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f001 f981 	bl	800c330 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b02e:	2180      	movs	r1, #128	; 0x80
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f001 f97d 	bl	800c330 <USBD_LL_StallEP>
 800b036:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b038:	e040      	b.n	800b0bc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b03a:	6839      	ldr	r1, [r7, #0]
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f000 fc68 	bl	800b912 <USBD_CtlError>
              break;
 800b042:	e03b      	b.n	800b0bc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	885b      	ldrh	r3, [r3, #2]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d136      	bne.n	800b0ba <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b04c:	7bbb      	ldrb	r3, [r7, #14]
 800b04e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b052:	2b00      	cmp	r3, #0
 800b054:	d004      	beq.n	800b060 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b056:	7bbb      	ldrb	r3, [r7, #14]
 800b058:	4619      	mov	r1, r3
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f001 f987 	bl	800c36e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f000 fd21 	bl	800baa8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b066:	7bbb      	ldrb	r3, [r7, #14]
 800b068:	4619      	mov	r1, r3
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f7ff fde2 	bl	800ac34 <USBD_CoreFindEP>
 800b070:	4603      	mov	r3, r0
 800b072:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b074:	7b7b      	ldrb	r3, [r7, #13]
 800b076:	2bff      	cmp	r3, #255	; 0xff
 800b078:	d01f      	beq.n	800b0ba <USBD_StdEPReq+0x1c6>
 800b07a:	7b7b      	ldrb	r3, [r7, #13]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d11c      	bne.n	800b0ba <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b080:	7b7a      	ldrb	r2, [r7, #13]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b088:	7b7a      	ldrb	r2, [r7, #13]
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	32ae      	adds	r2, #174	; 0xae
 800b08e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b092:	689b      	ldr	r3, [r3, #8]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d010      	beq.n	800b0ba <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b098:	7b7a      	ldrb	r2, [r7, #13]
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	32ae      	adds	r2, #174	; 0xae
 800b09e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0a2:	689b      	ldr	r3, [r3, #8]
 800b0a4:	6839      	ldr	r1, [r7, #0]
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	4798      	blx	r3
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b0ae:	e004      	b.n	800b0ba <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b0b0:	6839      	ldr	r1, [r7, #0]
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f000 fc2d 	bl	800b912 <USBD_CtlError>
              break;
 800b0b8:	e000      	b.n	800b0bc <USBD_StdEPReq+0x1c8>
              break;
 800b0ba:	bf00      	nop
          }
          break;
 800b0bc:	e0ab      	b.n	800b216 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0c4:	b2db      	uxtb	r3, r3
 800b0c6:	2b02      	cmp	r3, #2
 800b0c8:	d002      	beq.n	800b0d0 <USBD_StdEPReq+0x1dc>
 800b0ca:	2b03      	cmp	r3, #3
 800b0cc:	d032      	beq.n	800b134 <USBD_StdEPReq+0x240>
 800b0ce:	e097      	b.n	800b200 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b0d0:	7bbb      	ldrb	r3, [r7, #14]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d007      	beq.n	800b0e6 <USBD_StdEPReq+0x1f2>
 800b0d6:	7bbb      	ldrb	r3, [r7, #14]
 800b0d8:	2b80      	cmp	r3, #128	; 0x80
 800b0da:	d004      	beq.n	800b0e6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b0dc:	6839      	ldr	r1, [r7, #0]
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f000 fc17 	bl	800b912 <USBD_CtlError>
                break;
 800b0e4:	e091      	b.n	800b20a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	da0b      	bge.n	800b106 <USBD_StdEPReq+0x212>
 800b0ee:	7bbb      	ldrb	r3, [r7, #14]
 800b0f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b0f4:	4613      	mov	r3, r2
 800b0f6:	009b      	lsls	r3, r3, #2
 800b0f8:	4413      	add	r3, r2
 800b0fa:	009b      	lsls	r3, r3, #2
 800b0fc:	3310      	adds	r3, #16
 800b0fe:	687a      	ldr	r2, [r7, #4]
 800b100:	4413      	add	r3, r2
 800b102:	3304      	adds	r3, #4
 800b104:	e00b      	b.n	800b11e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b106:	7bbb      	ldrb	r3, [r7, #14]
 800b108:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b10c:	4613      	mov	r3, r2
 800b10e:	009b      	lsls	r3, r3, #2
 800b110:	4413      	add	r3, r2
 800b112:	009b      	lsls	r3, r3, #2
 800b114:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b118:	687a      	ldr	r2, [r7, #4]
 800b11a:	4413      	add	r3, r2
 800b11c:	3304      	adds	r3, #4
 800b11e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	2200      	movs	r2, #0
 800b124:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	2202      	movs	r2, #2
 800b12a:	4619      	mov	r1, r3
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f000 fc61 	bl	800b9f4 <USBD_CtlSendData>
              break;
 800b132:	e06a      	b.n	800b20a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b134:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	da11      	bge.n	800b160 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b13c:	7bbb      	ldrb	r3, [r7, #14]
 800b13e:	f003 020f 	and.w	r2, r3, #15
 800b142:	6879      	ldr	r1, [r7, #4]
 800b144:	4613      	mov	r3, r2
 800b146:	009b      	lsls	r3, r3, #2
 800b148:	4413      	add	r3, r2
 800b14a:	009b      	lsls	r3, r3, #2
 800b14c:	440b      	add	r3, r1
 800b14e:	3324      	adds	r3, #36	; 0x24
 800b150:	881b      	ldrh	r3, [r3, #0]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d117      	bne.n	800b186 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b156:	6839      	ldr	r1, [r7, #0]
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f000 fbda 	bl	800b912 <USBD_CtlError>
                  break;
 800b15e:	e054      	b.n	800b20a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b160:	7bbb      	ldrb	r3, [r7, #14]
 800b162:	f003 020f 	and.w	r2, r3, #15
 800b166:	6879      	ldr	r1, [r7, #4]
 800b168:	4613      	mov	r3, r2
 800b16a:	009b      	lsls	r3, r3, #2
 800b16c:	4413      	add	r3, r2
 800b16e:	009b      	lsls	r3, r3, #2
 800b170:	440b      	add	r3, r1
 800b172:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b176:	881b      	ldrh	r3, [r3, #0]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d104      	bne.n	800b186 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b17c:	6839      	ldr	r1, [r7, #0]
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f000 fbc7 	bl	800b912 <USBD_CtlError>
                  break;
 800b184:	e041      	b.n	800b20a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b186:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	da0b      	bge.n	800b1a6 <USBD_StdEPReq+0x2b2>
 800b18e:	7bbb      	ldrb	r3, [r7, #14]
 800b190:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b194:	4613      	mov	r3, r2
 800b196:	009b      	lsls	r3, r3, #2
 800b198:	4413      	add	r3, r2
 800b19a:	009b      	lsls	r3, r3, #2
 800b19c:	3310      	adds	r3, #16
 800b19e:	687a      	ldr	r2, [r7, #4]
 800b1a0:	4413      	add	r3, r2
 800b1a2:	3304      	adds	r3, #4
 800b1a4:	e00b      	b.n	800b1be <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b1a6:	7bbb      	ldrb	r3, [r7, #14]
 800b1a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1ac:	4613      	mov	r3, r2
 800b1ae:	009b      	lsls	r3, r3, #2
 800b1b0:	4413      	add	r3, r2
 800b1b2:	009b      	lsls	r3, r3, #2
 800b1b4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b1b8:	687a      	ldr	r2, [r7, #4]
 800b1ba:	4413      	add	r3, r2
 800b1bc:	3304      	adds	r3, #4
 800b1be:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b1c0:	7bbb      	ldrb	r3, [r7, #14]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d002      	beq.n	800b1cc <USBD_StdEPReq+0x2d8>
 800b1c6:	7bbb      	ldrb	r3, [r7, #14]
 800b1c8:	2b80      	cmp	r3, #128	; 0x80
 800b1ca:	d103      	bne.n	800b1d4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	601a      	str	r2, [r3, #0]
 800b1d2:	e00e      	b.n	800b1f2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b1d4:	7bbb      	ldrb	r3, [r7, #14]
 800b1d6:	4619      	mov	r1, r3
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f001 f8e7 	bl	800c3ac <USBD_LL_IsStallEP>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d003      	beq.n	800b1ec <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	2201      	movs	r2, #1
 800b1e8:	601a      	str	r2, [r3, #0]
 800b1ea:	e002      	b.n	800b1f2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	2202      	movs	r2, #2
 800b1f6:	4619      	mov	r1, r3
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f000 fbfb 	bl	800b9f4 <USBD_CtlSendData>
              break;
 800b1fe:	e004      	b.n	800b20a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b200:	6839      	ldr	r1, [r7, #0]
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	f000 fb85 	bl	800b912 <USBD_CtlError>
              break;
 800b208:	bf00      	nop
          }
          break;
 800b20a:	e004      	b.n	800b216 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b20c:	6839      	ldr	r1, [r7, #0]
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f000 fb7f 	bl	800b912 <USBD_CtlError>
          break;
 800b214:	bf00      	nop
      }
      break;
 800b216:	e005      	b.n	800b224 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b218:	6839      	ldr	r1, [r7, #0]
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f000 fb79 	bl	800b912 <USBD_CtlError>
      break;
 800b220:	e000      	b.n	800b224 <USBD_StdEPReq+0x330>
      break;
 800b222:	bf00      	nop
  }

  return ret;
 800b224:	7bfb      	ldrb	r3, [r7, #15]
}
 800b226:	4618      	mov	r0, r3
 800b228:	3710      	adds	r7, #16
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}
	...

0800b230 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b084      	sub	sp, #16
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
 800b238:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b23a:	2300      	movs	r3, #0
 800b23c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b23e:	2300      	movs	r3, #0
 800b240:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b242:	2300      	movs	r3, #0
 800b244:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	885b      	ldrh	r3, [r3, #2]
 800b24a:	0a1b      	lsrs	r3, r3, #8
 800b24c:	b29b      	uxth	r3, r3
 800b24e:	3b01      	subs	r3, #1
 800b250:	2b0e      	cmp	r3, #14
 800b252:	f200 8152 	bhi.w	800b4fa <USBD_GetDescriptor+0x2ca>
 800b256:	a201      	add	r2, pc, #4	; (adr r2, 800b25c <USBD_GetDescriptor+0x2c>)
 800b258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b25c:	0800b2cd 	.word	0x0800b2cd
 800b260:	0800b2e5 	.word	0x0800b2e5
 800b264:	0800b325 	.word	0x0800b325
 800b268:	0800b4fb 	.word	0x0800b4fb
 800b26c:	0800b4fb 	.word	0x0800b4fb
 800b270:	0800b49b 	.word	0x0800b49b
 800b274:	0800b4c7 	.word	0x0800b4c7
 800b278:	0800b4fb 	.word	0x0800b4fb
 800b27c:	0800b4fb 	.word	0x0800b4fb
 800b280:	0800b4fb 	.word	0x0800b4fb
 800b284:	0800b4fb 	.word	0x0800b4fb
 800b288:	0800b4fb 	.word	0x0800b4fb
 800b28c:	0800b4fb 	.word	0x0800b4fb
 800b290:	0800b4fb 	.word	0x0800b4fb
 800b294:	0800b299 	.word	0x0800b299
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b29e:	69db      	ldr	r3, [r3, #28]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d00b      	beq.n	800b2bc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2aa:	69db      	ldr	r3, [r3, #28]
 800b2ac:	687a      	ldr	r2, [r7, #4]
 800b2ae:	7c12      	ldrb	r2, [r2, #16]
 800b2b0:	f107 0108 	add.w	r1, r7, #8
 800b2b4:	4610      	mov	r0, r2
 800b2b6:	4798      	blx	r3
 800b2b8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b2ba:	e126      	b.n	800b50a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b2bc:	6839      	ldr	r1, [r7, #0]
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f000 fb27 	bl	800b912 <USBD_CtlError>
        err++;
 800b2c4:	7afb      	ldrb	r3, [r7, #11]
 800b2c6:	3301      	adds	r3, #1
 800b2c8:	72fb      	strb	r3, [r7, #11]
      break;
 800b2ca:	e11e      	b.n	800b50a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	687a      	ldr	r2, [r7, #4]
 800b2d6:	7c12      	ldrb	r2, [r2, #16]
 800b2d8:	f107 0108 	add.w	r1, r7, #8
 800b2dc:	4610      	mov	r0, r2
 800b2de:	4798      	blx	r3
 800b2e0:	60f8      	str	r0, [r7, #12]
      break;
 800b2e2:	e112      	b.n	800b50a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	7c1b      	ldrb	r3, [r3, #16]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d10d      	bne.n	800b308 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2f4:	f107 0208 	add.w	r2, r7, #8
 800b2f8:	4610      	mov	r0, r2
 800b2fa:	4798      	blx	r3
 800b2fc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	3301      	adds	r3, #1
 800b302:	2202      	movs	r2, #2
 800b304:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b306:	e100      	b.n	800b50a <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b30e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b310:	f107 0208 	add.w	r2, r7, #8
 800b314:	4610      	mov	r0, r2
 800b316:	4798      	blx	r3
 800b318:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	3301      	adds	r3, #1
 800b31e:	2202      	movs	r2, #2
 800b320:	701a      	strb	r2, [r3, #0]
      break;
 800b322:	e0f2      	b.n	800b50a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	885b      	ldrh	r3, [r3, #2]
 800b328:	b2db      	uxtb	r3, r3
 800b32a:	2b05      	cmp	r3, #5
 800b32c:	f200 80ac 	bhi.w	800b488 <USBD_GetDescriptor+0x258>
 800b330:	a201      	add	r2, pc, #4	; (adr r2, 800b338 <USBD_GetDescriptor+0x108>)
 800b332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b336:	bf00      	nop
 800b338:	0800b351 	.word	0x0800b351
 800b33c:	0800b385 	.word	0x0800b385
 800b340:	0800b3b9 	.word	0x0800b3b9
 800b344:	0800b3ed 	.word	0x0800b3ed
 800b348:	0800b421 	.word	0x0800b421
 800b34c:	0800b455 	.word	0x0800b455
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b356:	685b      	ldr	r3, [r3, #4]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d00b      	beq.n	800b374 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b362:	685b      	ldr	r3, [r3, #4]
 800b364:	687a      	ldr	r2, [r7, #4]
 800b366:	7c12      	ldrb	r2, [r2, #16]
 800b368:	f107 0108 	add.w	r1, r7, #8
 800b36c:	4610      	mov	r0, r2
 800b36e:	4798      	blx	r3
 800b370:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b372:	e091      	b.n	800b498 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b374:	6839      	ldr	r1, [r7, #0]
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f000 facb 	bl	800b912 <USBD_CtlError>
            err++;
 800b37c:	7afb      	ldrb	r3, [r7, #11]
 800b37e:	3301      	adds	r3, #1
 800b380:	72fb      	strb	r3, [r7, #11]
          break;
 800b382:	e089      	b.n	800b498 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b38a:	689b      	ldr	r3, [r3, #8]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d00b      	beq.n	800b3a8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b396:	689b      	ldr	r3, [r3, #8]
 800b398:	687a      	ldr	r2, [r7, #4]
 800b39a:	7c12      	ldrb	r2, [r2, #16]
 800b39c:	f107 0108 	add.w	r1, r7, #8
 800b3a0:	4610      	mov	r0, r2
 800b3a2:	4798      	blx	r3
 800b3a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3a6:	e077      	b.n	800b498 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b3a8:	6839      	ldr	r1, [r7, #0]
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f000 fab1 	bl	800b912 <USBD_CtlError>
            err++;
 800b3b0:	7afb      	ldrb	r3, [r7, #11]
 800b3b2:	3301      	adds	r3, #1
 800b3b4:	72fb      	strb	r3, [r7, #11]
          break;
 800b3b6:	e06f      	b.n	800b498 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3be:	68db      	ldr	r3, [r3, #12]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d00b      	beq.n	800b3dc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3ca:	68db      	ldr	r3, [r3, #12]
 800b3cc:	687a      	ldr	r2, [r7, #4]
 800b3ce:	7c12      	ldrb	r2, [r2, #16]
 800b3d0:	f107 0108 	add.w	r1, r7, #8
 800b3d4:	4610      	mov	r0, r2
 800b3d6:	4798      	blx	r3
 800b3d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3da:	e05d      	b.n	800b498 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b3dc:	6839      	ldr	r1, [r7, #0]
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f000 fa97 	bl	800b912 <USBD_CtlError>
            err++;
 800b3e4:	7afb      	ldrb	r3, [r7, #11]
 800b3e6:	3301      	adds	r3, #1
 800b3e8:	72fb      	strb	r3, [r7, #11]
          break;
 800b3ea:	e055      	b.n	800b498 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3f2:	691b      	ldr	r3, [r3, #16]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d00b      	beq.n	800b410 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3fe:	691b      	ldr	r3, [r3, #16]
 800b400:	687a      	ldr	r2, [r7, #4]
 800b402:	7c12      	ldrb	r2, [r2, #16]
 800b404:	f107 0108 	add.w	r1, r7, #8
 800b408:	4610      	mov	r0, r2
 800b40a:	4798      	blx	r3
 800b40c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b40e:	e043      	b.n	800b498 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b410:	6839      	ldr	r1, [r7, #0]
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f000 fa7d 	bl	800b912 <USBD_CtlError>
            err++;
 800b418:	7afb      	ldrb	r3, [r7, #11]
 800b41a:	3301      	adds	r3, #1
 800b41c:	72fb      	strb	r3, [r7, #11]
          break;
 800b41e:	e03b      	b.n	800b498 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b426:	695b      	ldr	r3, [r3, #20]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d00b      	beq.n	800b444 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b432:	695b      	ldr	r3, [r3, #20]
 800b434:	687a      	ldr	r2, [r7, #4]
 800b436:	7c12      	ldrb	r2, [r2, #16]
 800b438:	f107 0108 	add.w	r1, r7, #8
 800b43c:	4610      	mov	r0, r2
 800b43e:	4798      	blx	r3
 800b440:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b442:	e029      	b.n	800b498 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b444:	6839      	ldr	r1, [r7, #0]
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f000 fa63 	bl	800b912 <USBD_CtlError>
            err++;
 800b44c:	7afb      	ldrb	r3, [r7, #11]
 800b44e:	3301      	adds	r3, #1
 800b450:	72fb      	strb	r3, [r7, #11]
          break;
 800b452:	e021      	b.n	800b498 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b45a:	699b      	ldr	r3, [r3, #24]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d00b      	beq.n	800b478 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b466:	699b      	ldr	r3, [r3, #24]
 800b468:	687a      	ldr	r2, [r7, #4]
 800b46a:	7c12      	ldrb	r2, [r2, #16]
 800b46c:	f107 0108 	add.w	r1, r7, #8
 800b470:	4610      	mov	r0, r2
 800b472:	4798      	blx	r3
 800b474:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b476:	e00f      	b.n	800b498 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b478:	6839      	ldr	r1, [r7, #0]
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f000 fa49 	bl	800b912 <USBD_CtlError>
            err++;
 800b480:	7afb      	ldrb	r3, [r7, #11]
 800b482:	3301      	adds	r3, #1
 800b484:	72fb      	strb	r3, [r7, #11]
          break;
 800b486:	e007      	b.n	800b498 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b488:	6839      	ldr	r1, [r7, #0]
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f000 fa41 	bl	800b912 <USBD_CtlError>
          err++;
 800b490:	7afb      	ldrb	r3, [r7, #11]
 800b492:	3301      	adds	r3, #1
 800b494:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b496:	bf00      	nop
      }
      break;
 800b498:	e037      	b.n	800b50a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	7c1b      	ldrb	r3, [r3, #16]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d109      	bne.n	800b4b6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4aa:	f107 0208 	add.w	r2, r7, #8
 800b4ae:	4610      	mov	r0, r2
 800b4b0:	4798      	blx	r3
 800b4b2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b4b4:	e029      	b.n	800b50a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b4b6:	6839      	ldr	r1, [r7, #0]
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f000 fa2a 	bl	800b912 <USBD_CtlError>
        err++;
 800b4be:	7afb      	ldrb	r3, [r7, #11]
 800b4c0:	3301      	adds	r3, #1
 800b4c2:	72fb      	strb	r3, [r7, #11]
      break;
 800b4c4:	e021      	b.n	800b50a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	7c1b      	ldrb	r3, [r3, #16]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d10d      	bne.n	800b4ea <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4d6:	f107 0208 	add.w	r2, r7, #8
 800b4da:	4610      	mov	r0, r2
 800b4dc:	4798      	blx	r3
 800b4de:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	3301      	adds	r3, #1
 800b4e4:	2207      	movs	r2, #7
 800b4e6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b4e8:	e00f      	b.n	800b50a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b4ea:	6839      	ldr	r1, [r7, #0]
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f000 fa10 	bl	800b912 <USBD_CtlError>
        err++;
 800b4f2:	7afb      	ldrb	r3, [r7, #11]
 800b4f4:	3301      	adds	r3, #1
 800b4f6:	72fb      	strb	r3, [r7, #11]
      break;
 800b4f8:	e007      	b.n	800b50a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b4fa:	6839      	ldr	r1, [r7, #0]
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f000 fa08 	bl	800b912 <USBD_CtlError>
      err++;
 800b502:	7afb      	ldrb	r3, [r7, #11]
 800b504:	3301      	adds	r3, #1
 800b506:	72fb      	strb	r3, [r7, #11]
      break;
 800b508:	bf00      	nop
  }

  if (err != 0U)
 800b50a:	7afb      	ldrb	r3, [r7, #11]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d11e      	bne.n	800b54e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	88db      	ldrh	r3, [r3, #6]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d016      	beq.n	800b546 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b518:	893b      	ldrh	r3, [r7, #8]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d00e      	beq.n	800b53c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	88da      	ldrh	r2, [r3, #6]
 800b522:	893b      	ldrh	r3, [r7, #8]
 800b524:	4293      	cmp	r3, r2
 800b526:	bf28      	it	cs
 800b528:	4613      	movcs	r3, r2
 800b52a:	b29b      	uxth	r3, r3
 800b52c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b52e:	893b      	ldrh	r3, [r7, #8]
 800b530:	461a      	mov	r2, r3
 800b532:	68f9      	ldr	r1, [r7, #12]
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f000 fa5d 	bl	800b9f4 <USBD_CtlSendData>
 800b53a:	e009      	b.n	800b550 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b53c:	6839      	ldr	r1, [r7, #0]
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f000 f9e7 	bl	800b912 <USBD_CtlError>
 800b544:	e004      	b.n	800b550 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f000 faae 	bl	800baa8 <USBD_CtlSendStatus>
 800b54c:	e000      	b.n	800b550 <USBD_GetDescriptor+0x320>
    return;
 800b54e:	bf00      	nop
  }
}
 800b550:	3710      	adds	r7, #16
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}
 800b556:	bf00      	nop

0800b558 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b084      	sub	sp, #16
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
 800b560:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	889b      	ldrh	r3, [r3, #4]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d131      	bne.n	800b5ce <USBD_SetAddress+0x76>
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	88db      	ldrh	r3, [r3, #6]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d12d      	bne.n	800b5ce <USBD_SetAddress+0x76>
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	885b      	ldrh	r3, [r3, #2]
 800b576:	2b7f      	cmp	r3, #127	; 0x7f
 800b578:	d829      	bhi.n	800b5ce <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	885b      	ldrh	r3, [r3, #2]
 800b57e:	b2db      	uxtb	r3, r3
 800b580:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b584:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b58c:	b2db      	uxtb	r3, r3
 800b58e:	2b03      	cmp	r3, #3
 800b590:	d104      	bne.n	800b59c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b592:	6839      	ldr	r1, [r7, #0]
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f000 f9bc 	bl	800b912 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b59a:	e01d      	b.n	800b5d8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	7bfa      	ldrb	r2, [r7, #15]
 800b5a0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b5a4:	7bfb      	ldrb	r3, [r7, #15]
 800b5a6:	4619      	mov	r1, r3
 800b5a8:	6878      	ldr	r0, [r7, #4]
 800b5aa:	f000 ff2b 	bl	800c404 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f000 fa7a 	bl	800baa8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b5b4:	7bfb      	ldrb	r3, [r7, #15]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d004      	beq.n	800b5c4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2202      	movs	r2, #2
 800b5be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5c2:	e009      	b.n	800b5d8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2201      	movs	r2, #1
 800b5c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5cc:	e004      	b.n	800b5d8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b5ce:	6839      	ldr	r1, [r7, #0]
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f000 f99e 	bl	800b912 <USBD_CtlError>
  }
}
 800b5d6:	bf00      	nop
 800b5d8:	bf00      	nop
 800b5da:	3710      	adds	r7, #16
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}

0800b5e0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b084      	sub	sp, #16
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
 800b5e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	885b      	ldrh	r3, [r3, #2]
 800b5f2:	b2da      	uxtb	r2, r3
 800b5f4:	4b4e      	ldr	r3, [pc, #312]	; (800b730 <USBD_SetConfig+0x150>)
 800b5f6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b5f8:	4b4d      	ldr	r3, [pc, #308]	; (800b730 <USBD_SetConfig+0x150>)
 800b5fa:	781b      	ldrb	r3, [r3, #0]
 800b5fc:	2b01      	cmp	r3, #1
 800b5fe:	d905      	bls.n	800b60c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b600:	6839      	ldr	r1, [r7, #0]
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f000 f985 	bl	800b912 <USBD_CtlError>
    return USBD_FAIL;
 800b608:	2303      	movs	r3, #3
 800b60a:	e08c      	b.n	800b726 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b612:	b2db      	uxtb	r3, r3
 800b614:	2b02      	cmp	r3, #2
 800b616:	d002      	beq.n	800b61e <USBD_SetConfig+0x3e>
 800b618:	2b03      	cmp	r3, #3
 800b61a:	d029      	beq.n	800b670 <USBD_SetConfig+0x90>
 800b61c:	e075      	b.n	800b70a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b61e:	4b44      	ldr	r3, [pc, #272]	; (800b730 <USBD_SetConfig+0x150>)
 800b620:	781b      	ldrb	r3, [r3, #0]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d020      	beq.n	800b668 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b626:	4b42      	ldr	r3, [pc, #264]	; (800b730 <USBD_SetConfig+0x150>)
 800b628:	781b      	ldrb	r3, [r3, #0]
 800b62a:	461a      	mov	r2, r3
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b630:	4b3f      	ldr	r3, [pc, #252]	; (800b730 <USBD_SetConfig+0x150>)
 800b632:	781b      	ldrb	r3, [r3, #0]
 800b634:	4619      	mov	r1, r3
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f7fe ffb7 	bl	800a5aa <USBD_SetClassConfig>
 800b63c:	4603      	mov	r3, r0
 800b63e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b640:	7bfb      	ldrb	r3, [r7, #15]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d008      	beq.n	800b658 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b646:	6839      	ldr	r1, [r7, #0]
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f000 f962 	bl	800b912 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2202      	movs	r2, #2
 800b652:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b656:	e065      	b.n	800b724 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f000 fa25 	bl	800baa8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2203      	movs	r2, #3
 800b662:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b666:	e05d      	b.n	800b724 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f000 fa1d 	bl	800baa8 <USBD_CtlSendStatus>
      break;
 800b66e:	e059      	b.n	800b724 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b670:	4b2f      	ldr	r3, [pc, #188]	; (800b730 <USBD_SetConfig+0x150>)
 800b672:	781b      	ldrb	r3, [r3, #0]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d112      	bne.n	800b69e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2202      	movs	r2, #2
 800b67c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b680:	4b2b      	ldr	r3, [pc, #172]	; (800b730 <USBD_SetConfig+0x150>)
 800b682:	781b      	ldrb	r3, [r3, #0]
 800b684:	461a      	mov	r2, r3
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b68a:	4b29      	ldr	r3, [pc, #164]	; (800b730 <USBD_SetConfig+0x150>)
 800b68c:	781b      	ldrb	r3, [r3, #0]
 800b68e:	4619      	mov	r1, r3
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f7fe ffa6 	bl	800a5e2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f000 fa06 	bl	800baa8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b69c:	e042      	b.n	800b724 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b69e:	4b24      	ldr	r3, [pc, #144]	; (800b730 <USBD_SetConfig+0x150>)
 800b6a0:	781b      	ldrb	r3, [r3, #0]
 800b6a2:	461a      	mov	r2, r3
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	685b      	ldr	r3, [r3, #4]
 800b6a8:	429a      	cmp	r2, r3
 800b6aa:	d02a      	beq.n	800b702 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	685b      	ldr	r3, [r3, #4]
 800b6b0:	b2db      	uxtb	r3, r3
 800b6b2:	4619      	mov	r1, r3
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f7fe ff94 	bl	800a5e2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b6ba:	4b1d      	ldr	r3, [pc, #116]	; (800b730 <USBD_SetConfig+0x150>)
 800b6bc:	781b      	ldrb	r3, [r3, #0]
 800b6be:	461a      	mov	r2, r3
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b6c4:	4b1a      	ldr	r3, [pc, #104]	; (800b730 <USBD_SetConfig+0x150>)
 800b6c6:	781b      	ldrb	r3, [r3, #0]
 800b6c8:	4619      	mov	r1, r3
 800b6ca:	6878      	ldr	r0, [r7, #4]
 800b6cc:	f7fe ff6d 	bl	800a5aa <USBD_SetClassConfig>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b6d4:	7bfb      	ldrb	r3, [r7, #15]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d00f      	beq.n	800b6fa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b6da:	6839      	ldr	r1, [r7, #0]
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	f000 f918 	bl	800b912 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	685b      	ldr	r3, [r3, #4]
 800b6e6:	b2db      	uxtb	r3, r3
 800b6e8:	4619      	mov	r1, r3
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f7fe ff79 	bl	800a5e2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2202      	movs	r2, #2
 800b6f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b6f8:	e014      	b.n	800b724 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f000 f9d4 	bl	800baa8 <USBD_CtlSendStatus>
      break;
 800b700:	e010      	b.n	800b724 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f000 f9d0 	bl	800baa8 <USBD_CtlSendStatus>
      break;
 800b708:	e00c      	b.n	800b724 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b70a:	6839      	ldr	r1, [r7, #0]
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f000 f900 	bl	800b912 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b712:	4b07      	ldr	r3, [pc, #28]	; (800b730 <USBD_SetConfig+0x150>)
 800b714:	781b      	ldrb	r3, [r3, #0]
 800b716:	4619      	mov	r1, r3
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	f7fe ff62 	bl	800a5e2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b71e:	2303      	movs	r3, #3
 800b720:	73fb      	strb	r3, [r7, #15]
      break;
 800b722:	bf00      	nop
  }

  return ret;
 800b724:	7bfb      	ldrb	r3, [r7, #15]
}
 800b726:	4618      	mov	r0, r3
 800b728:	3710      	adds	r7, #16
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd80      	pop	{r7, pc}
 800b72e:	bf00      	nop
 800b730:	2400f15c 	.word	0x2400f15c

0800b734 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b082      	sub	sp, #8
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
 800b73c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	88db      	ldrh	r3, [r3, #6]
 800b742:	2b01      	cmp	r3, #1
 800b744:	d004      	beq.n	800b750 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b746:	6839      	ldr	r1, [r7, #0]
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f000 f8e2 	bl	800b912 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b74e:	e023      	b.n	800b798 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b756:	b2db      	uxtb	r3, r3
 800b758:	2b02      	cmp	r3, #2
 800b75a:	dc02      	bgt.n	800b762 <USBD_GetConfig+0x2e>
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	dc03      	bgt.n	800b768 <USBD_GetConfig+0x34>
 800b760:	e015      	b.n	800b78e <USBD_GetConfig+0x5a>
 800b762:	2b03      	cmp	r3, #3
 800b764:	d00b      	beq.n	800b77e <USBD_GetConfig+0x4a>
 800b766:	e012      	b.n	800b78e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2200      	movs	r2, #0
 800b76c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	3308      	adds	r3, #8
 800b772:	2201      	movs	r2, #1
 800b774:	4619      	mov	r1, r3
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	f000 f93c 	bl	800b9f4 <USBD_CtlSendData>
        break;
 800b77c:	e00c      	b.n	800b798 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	3304      	adds	r3, #4
 800b782:	2201      	movs	r2, #1
 800b784:	4619      	mov	r1, r3
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f000 f934 	bl	800b9f4 <USBD_CtlSendData>
        break;
 800b78c:	e004      	b.n	800b798 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b78e:	6839      	ldr	r1, [r7, #0]
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f000 f8be 	bl	800b912 <USBD_CtlError>
        break;
 800b796:	bf00      	nop
}
 800b798:	bf00      	nop
 800b79a:	3708      	adds	r7, #8
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}

0800b7a0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b082      	sub	sp, #8
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
 800b7a8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7b0:	b2db      	uxtb	r3, r3
 800b7b2:	3b01      	subs	r3, #1
 800b7b4:	2b02      	cmp	r3, #2
 800b7b6:	d81e      	bhi.n	800b7f6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	88db      	ldrh	r3, [r3, #6]
 800b7bc:	2b02      	cmp	r3, #2
 800b7be:	d004      	beq.n	800b7ca <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b7c0:	6839      	ldr	r1, [r7, #0]
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	f000 f8a5 	bl	800b912 <USBD_CtlError>
        break;
 800b7c8:	e01a      	b.n	800b800 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2201      	movs	r2, #1
 800b7ce:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d005      	beq.n	800b7e6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	68db      	ldr	r3, [r3, #12]
 800b7de:	f043 0202 	orr.w	r2, r3, #2
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	330c      	adds	r3, #12
 800b7ea:	2202      	movs	r2, #2
 800b7ec:	4619      	mov	r1, r3
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f000 f900 	bl	800b9f4 <USBD_CtlSendData>
      break;
 800b7f4:	e004      	b.n	800b800 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b7f6:	6839      	ldr	r1, [r7, #0]
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	f000 f88a 	bl	800b912 <USBD_CtlError>
      break;
 800b7fe:	bf00      	nop
  }
}
 800b800:	bf00      	nop
 800b802:	3708      	adds	r7, #8
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}

0800b808 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b082      	sub	sp, #8
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
 800b810:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	885b      	ldrh	r3, [r3, #2]
 800b816:	2b01      	cmp	r3, #1
 800b818:	d107      	bne.n	800b82a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	2201      	movs	r2, #1
 800b81e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f000 f940 	bl	800baa8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b828:	e013      	b.n	800b852 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	885b      	ldrh	r3, [r3, #2]
 800b82e:	2b02      	cmp	r3, #2
 800b830:	d10b      	bne.n	800b84a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	889b      	ldrh	r3, [r3, #4]
 800b836:	0a1b      	lsrs	r3, r3, #8
 800b838:	b29b      	uxth	r3, r3
 800b83a:	b2da      	uxtb	r2, r3
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f000 f930 	bl	800baa8 <USBD_CtlSendStatus>
}
 800b848:	e003      	b.n	800b852 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b84a:	6839      	ldr	r1, [r7, #0]
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f000 f860 	bl	800b912 <USBD_CtlError>
}
 800b852:	bf00      	nop
 800b854:	3708      	adds	r7, #8
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}

0800b85a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b85a:	b580      	push	{r7, lr}
 800b85c:	b082      	sub	sp, #8
 800b85e:	af00      	add	r7, sp, #0
 800b860:	6078      	str	r0, [r7, #4]
 800b862:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b86a:	b2db      	uxtb	r3, r3
 800b86c:	3b01      	subs	r3, #1
 800b86e:	2b02      	cmp	r3, #2
 800b870:	d80b      	bhi.n	800b88a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	885b      	ldrh	r3, [r3, #2]
 800b876:	2b01      	cmp	r3, #1
 800b878:	d10c      	bne.n	800b894 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2200      	movs	r2, #0
 800b87e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f000 f910 	bl	800baa8 <USBD_CtlSendStatus>
      }
      break;
 800b888:	e004      	b.n	800b894 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b88a:	6839      	ldr	r1, [r7, #0]
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f000 f840 	bl	800b912 <USBD_CtlError>
      break;
 800b892:	e000      	b.n	800b896 <USBD_ClrFeature+0x3c>
      break;
 800b894:	bf00      	nop
  }
}
 800b896:	bf00      	nop
 800b898:	3708      	adds	r7, #8
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}

0800b89e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b89e:	b580      	push	{r7, lr}
 800b8a0:	b084      	sub	sp, #16
 800b8a2:	af00      	add	r7, sp, #0
 800b8a4:	6078      	str	r0, [r7, #4]
 800b8a6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	781a      	ldrb	r2, [r3, #0]
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	3301      	adds	r3, #1
 800b8b8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	781a      	ldrb	r2, [r3, #0]
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	3301      	adds	r3, #1
 800b8c6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b8c8:	68f8      	ldr	r0, [r7, #12]
 800b8ca:	f7ff fa17 	bl	800acfc <SWAPBYTE>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	461a      	mov	r2, r3
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	3301      	adds	r3, #1
 800b8da:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	3301      	adds	r3, #1
 800b8e0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b8e2:	68f8      	ldr	r0, [r7, #12]
 800b8e4:	f7ff fa0a 	bl	800acfc <SWAPBYTE>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	461a      	mov	r2, r3
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	3301      	adds	r3, #1
 800b8f4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	3301      	adds	r3, #1
 800b8fa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b8fc:	68f8      	ldr	r0, [r7, #12]
 800b8fe:	f7ff f9fd 	bl	800acfc <SWAPBYTE>
 800b902:	4603      	mov	r3, r0
 800b904:	461a      	mov	r2, r3
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	80da      	strh	r2, [r3, #6]
}
 800b90a:	bf00      	nop
 800b90c:	3710      	adds	r7, #16
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}

0800b912 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b912:	b580      	push	{r7, lr}
 800b914:	b082      	sub	sp, #8
 800b916:	af00      	add	r7, sp, #0
 800b918:	6078      	str	r0, [r7, #4]
 800b91a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b91c:	2180      	movs	r1, #128	; 0x80
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f000 fd06 	bl	800c330 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b924:	2100      	movs	r1, #0
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f000 fd02 	bl	800c330 <USBD_LL_StallEP>
}
 800b92c:	bf00      	nop
 800b92e:	3708      	adds	r7, #8
 800b930:	46bd      	mov	sp, r7
 800b932:	bd80      	pop	{r7, pc}

0800b934 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b086      	sub	sp, #24
 800b938:	af00      	add	r7, sp, #0
 800b93a:	60f8      	str	r0, [r7, #12]
 800b93c:	60b9      	str	r1, [r7, #8]
 800b93e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b940:	2300      	movs	r3, #0
 800b942:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d036      	beq.n	800b9b8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b94e:	6938      	ldr	r0, [r7, #16]
 800b950:	f000 f836 	bl	800b9c0 <USBD_GetLen>
 800b954:	4603      	mov	r3, r0
 800b956:	3301      	adds	r3, #1
 800b958:	b29b      	uxth	r3, r3
 800b95a:	005b      	lsls	r3, r3, #1
 800b95c:	b29a      	uxth	r2, r3
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b962:	7dfb      	ldrb	r3, [r7, #23]
 800b964:	68ba      	ldr	r2, [r7, #8]
 800b966:	4413      	add	r3, r2
 800b968:	687a      	ldr	r2, [r7, #4]
 800b96a:	7812      	ldrb	r2, [r2, #0]
 800b96c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b96e:	7dfb      	ldrb	r3, [r7, #23]
 800b970:	3301      	adds	r3, #1
 800b972:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b974:	7dfb      	ldrb	r3, [r7, #23]
 800b976:	68ba      	ldr	r2, [r7, #8]
 800b978:	4413      	add	r3, r2
 800b97a:	2203      	movs	r2, #3
 800b97c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b97e:	7dfb      	ldrb	r3, [r7, #23]
 800b980:	3301      	adds	r3, #1
 800b982:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b984:	e013      	b.n	800b9ae <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b986:	7dfb      	ldrb	r3, [r7, #23]
 800b988:	68ba      	ldr	r2, [r7, #8]
 800b98a:	4413      	add	r3, r2
 800b98c:	693a      	ldr	r2, [r7, #16]
 800b98e:	7812      	ldrb	r2, [r2, #0]
 800b990:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	3301      	adds	r3, #1
 800b996:	613b      	str	r3, [r7, #16]
    idx++;
 800b998:	7dfb      	ldrb	r3, [r7, #23]
 800b99a:	3301      	adds	r3, #1
 800b99c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b99e:	7dfb      	ldrb	r3, [r7, #23]
 800b9a0:	68ba      	ldr	r2, [r7, #8]
 800b9a2:	4413      	add	r3, r2
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	701a      	strb	r2, [r3, #0]
    idx++;
 800b9a8:	7dfb      	ldrb	r3, [r7, #23]
 800b9aa:	3301      	adds	r3, #1
 800b9ac:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b9ae:	693b      	ldr	r3, [r7, #16]
 800b9b0:	781b      	ldrb	r3, [r3, #0]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d1e7      	bne.n	800b986 <USBD_GetString+0x52>
 800b9b6:	e000      	b.n	800b9ba <USBD_GetString+0x86>
    return;
 800b9b8:	bf00      	nop
  }
}
 800b9ba:	3718      	adds	r7, #24
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}

0800b9c0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b085      	sub	sp, #20
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b9d0:	e005      	b.n	800b9de <USBD_GetLen+0x1e>
  {
    len++;
 800b9d2:	7bfb      	ldrb	r3, [r7, #15]
 800b9d4:	3301      	adds	r3, #1
 800b9d6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b9d8:	68bb      	ldr	r3, [r7, #8]
 800b9da:	3301      	adds	r3, #1
 800b9dc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b9de:	68bb      	ldr	r3, [r7, #8]
 800b9e0:	781b      	ldrb	r3, [r3, #0]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d1f5      	bne.n	800b9d2 <USBD_GetLen+0x12>
  }

  return len;
 800b9e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	3714      	adds	r7, #20
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f2:	4770      	bx	lr

0800b9f4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b084      	sub	sp, #16
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	60f8      	str	r0, [r7, #12]
 800b9fc:	60b9      	str	r1, [r7, #8]
 800b9fe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	2202      	movs	r2, #2
 800ba04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	687a      	ldr	r2, [r7, #4]
 800ba0c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	687a      	ldr	r2, [r7, #4]
 800ba12:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	68ba      	ldr	r2, [r7, #8]
 800ba18:	2100      	movs	r1, #0
 800ba1a:	68f8      	ldr	r0, [r7, #12]
 800ba1c:	f000 fd11 	bl	800c442 <USBD_LL_Transmit>

  return USBD_OK;
 800ba20:	2300      	movs	r3, #0
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	3710      	adds	r7, #16
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}

0800ba2a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ba2a:	b580      	push	{r7, lr}
 800ba2c:	b084      	sub	sp, #16
 800ba2e:	af00      	add	r7, sp, #0
 800ba30:	60f8      	str	r0, [r7, #12]
 800ba32:	60b9      	str	r1, [r7, #8]
 800ba34:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	68ba      	ldr	r2, [r7, #8]
 800ba3a:	2100      	movs	r1, #0
 800ba3c:	68f8      	ldr	r0, [r7, #12]
 800ba3e:	f000 fd00 	bl	800c442 <USBD_LL_Transmit>

  return USBD_OK;
 800ba42:	2300      	movs	r3, #0
}
 800ba44:	4618      	mov	r0, r3
 800ba46:	3710      	adds	r7, #16
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}

0800ba4c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b084      	sub	sp, #16
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	60f8      	str	r0, [r7, #12]
 800ba54:	60b9      	str	r1, [r7, #8]
 800ba56:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	2203      	movs	r2, #3
 800ba5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	687a      	ldr	r2, [r7, #4]
 800ba64:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	687a      	ldr	r2, [r7, #4]
 800ba6c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	68ba      	ldr	r2, [r7, #8]
 800ba74:	2100      	movs	r1, #0
 800ba76:	68f8      	ldr	r0, [r7, #12]
 800ba78:	f000 fd04 	bl	800c484 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba7c:	2300      	movs	r3, #0
}
 800ba7e:	4618      	mov	r0, r3
 800ba80:	3710      	adds	r7, #16
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}

0800ba86 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ba86:	b580      	push	{r7, lr}
 800ba88:	b084      	sub	sp, #16
 800ba8a:	af00      	add	r7, sp, #0
 800ba8c:	60f8      	str	r0, [r7, #12]
 800ba8e:	60b9      	str	r1, [r7, #8]
 800ba90:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	68ba      	ldr	r2, [r7, #8]
 800ba96:	2100      	movs	r1, #0
 800ba98:	68f8      	ldr	r0, [r7, #12]
 800ba9a:	f000 fcf3 	bl	800c484 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba9e:	2300      	movs	r3, #0
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3710      	adds	r7, #16
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}

0800baa8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b082      	sub	sp, #8
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2204      	movs	r2, #4
 800bab4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bab8:	2300      	movs	r3, #0
 800baba:	2200      	movs	r2, #0
 800babc:	2100      	movs	r1, #0
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f000 fcbf 	bl	800c442 <USBD_LL_Transmit>

  return USBD_OK;
 800bac4:	2300      	movs	r3, #0
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	3708      	adds	r7, #8
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}

0800bace <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bace:	b580      	push	{r7, lr}
 800bad0:	b082      	sub	sp, #8
 800bad2:	af00      	add	r7, sp, #0
 800bad4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2205      	movs	r2, #5
 800bada:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bade:	2300      	movs	r3, #0
 800bae0:	2200      	movs	r2, #0
 800bae2:	2100      	movs	r1, #0
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	f000 fccd 	bl	800c484 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800baea:	2300      	movs	r3, #0
}
 800baec:	4618      	mov	r0, r3
 800baee:	3708      	adds	r7, #8
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bd80      	pop	{r7, pc}

0800baf4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800baf8:	2200      	movs	r2, #0
 800bafa:	4913      	ldr	r1, [pc, #76]	; (800bb48 <MX_USB_DEVICE_Init+0x54>)
 800bafc:	4813      	ldr	r0, [pc, #76]	; (800bb4c <MX_USB_DEVICE_Init+0x58>)
 800bafe:	f7fe fcd7 	bl	800a4b0 <USBD_Init>
 800bb02:	4603      	mov	r3, r0
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d001      	beq.n	800bb0c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bb08:	f7f5 fdec 	bl	80016e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bb0c:	4910      	ldr	r1, [pc, #64]	; (800bb50 <MX_USB_DEVICE_Init+0x5c>)
 800bb0e:	480f      	ldr	r0, [pc, #60]	; (800bb4c <MX_USB_DEVICE_Init+0x58>)
 800bb10:	f7fe fcfe 	bl	800a510 <USBD_RegisterClass>
 800bb14:	4603      	mov	r3, r0
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d001      	beq.n	800bb1e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bb1a:	f7f5 fde3 	bl	80016e4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bb1e:	490d      	ldr	r1, [pc, #52]	; (800bb54 <MX_USB_DEVICE_Init+0x60>)
 800bb20:	480a      	ldr	r0, [pc, #40]	; (800bb4c <MX_USB_DEVICE_Init+0x58>)
 800bb22:	f7fe fbf5 	bl	800a310 <USBD_CDC_RegisterInterface>
 800bb26:	4603      	mov	r3, r0
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d001      	beq.n	800bb30 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bb2c:	f7f5 fdda 	bl	80016e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bb30:	4806      	ldr	r0, [pc, #24]	; (800bb4c <MX_USB_DEVICE_Init+0x58>)
 800bb32:	f7fe fd23 	bl	800a57c <USBD_Start>
 800bb36:	4603      	mov	r3, r0
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d001      	beq.n	800bb40 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bb3c:	f7f5 fdd2 	bl	80016e4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800bb40:	f7f8 ffb2 	bl	8004aa8 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bb44:	bf00      	nop
 800bb46:	bd80      	pop	{r7, pc}
 800bb48:	240000f0 	.word	0x240000f0
 800bb4c:	2400f160 	.word	0x2400f160
 800bb50:	2400005c 	.word	0x2400005c
 800bb54:	240000dc 	.word	0x240000dc

0800bb58 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	4905      	ldr	r1, [pc, #20]	; (800bb74 <CDC_Init_FS+0x1c>)
 800bb60:	4805      	ldr	r0, [pc, #20]	; (800bb78 <CDC_Init_FS+0x20>)
 800bb62:	f7fe fbef 	bl	800a344 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bb66:	4905      	ldr	r1, [pc, #20]	; (800bb7c <CDC_Init_FS+0x24>)
 800bb68:	4803      	ldr	r0, [pc, #12]	; (800bb78 <CDC_Init_FS+0x20>)
 800bb6a:	f7fe fc0d 	bl	800a388 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bb6e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bb70:	4618      	mov	r0, r3
 800bb72:	bd80      	pop	{r7, pc}
 800bb74:	2400fc3c 	.word	0x2400fc3c
 800bb78:	2400f160 	.word	0x2400f160
 800bb7c:	2400f43c 	.word	0x2400f43c

0800bb80 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bb80:	b480      	push	{r7}
 800bb82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bb84:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bb86:	4618      	mov	r0, r3
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8e:	4770      	bx	lr

0800bb90 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bb90:	b480      	push	{r7}
 800bb92:	b083      	sub	sp, #12
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	4603      	mov	r3, r0
 800bb98:	6039      	str	r1, [r7, #0]
 800bb9a:	71fb      	strb	r3, [r7, #7]
 800bb9c:	4613      	mov	r3, r2
 800bb9e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bba0:	79fb      	ldrb	r3, [r7, #7]
 800bba2:	2b23      	cmp	r3, #35	; 0x23
 800bba4:	d84a      	bhi.n	800bc3c <CDC_Control_FS+0xac>
 800bba6:	a201      	add	r2, pc, #4	; (adr r2, 800bbac <CDC_Control_FS+0x1c>)
 800bba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbac:	0800bc3d 	.word	0x0800bc3d
 800bbb0:	0800bc3d 	.word	0x0800bc3d
 800bbb4:	0800bc3d 	.word	0x0800bc3d
 800bbb8:	0800bc3d 	.word	0x0800bc3d
 800bbbc:	0800bc3d 	.word	0x0800bc3d
 800bbc0:	0800bc3d 	.word	0x0800bc3d
 800bbc4:	0800bc3d 	.word	0x0800bc3d
 800bbc8:	0800bc3d 	.word	0x0800bc3d
 800bbcc:	0800bc3d 	.word	0x0800bc3d
 800bbd0:	0800bc3d 	.word	0x0800bc3d
 800bbd4:	0800bc3d 	.word	0x0800bc3d
 800bbd8:	0800bc3d 	.word	0x0800bc3d
 800bbdc:	0800bc3d 	.word	0x0800bc3d
 800bbe0:	0800bc3d 	.word	0x0800bc3d
 800bbe4:	0800bc3d 	.word	0x0800bc3d
 800bbe8:	0800bc3d 	.word	0x0800bc3d
 800bbec:	0800bc3d 	.word	0x0800bc3d
 800bbf0:	0800bc3d 	.word	0x0800bc3d
 800bbf4:	0800bc3d 	.word	0x0800bc3d
 800bbf8:	0800bc3d 	.word	0x0800bc3d
 800bbfc:	0800bc3d 	.word	0x0800bc3d
 800bc00:	0800bc3d 	.word	0x0800bc3d
 800bc04:	0800bc3d 	.word	0x0800bc3d
 800bc08:	0800bc3d 	.word	0x0800bc3d
 800bc0c:	0800bc3d 	.word	0x0800bc3d
 800bc10:	0800bc3d 	.word	0x0800bc3d
 800bc14:	0800bc3d 	.word	0x0800bc3d
 800bc18:	0800bc3d 	.word	0x0800bc3d
 800bc1c:	0800bc3d 	.word	0x0800bc3d
 800bc20:	0800bc3d 	.word	0x0800bc3d
 800bc24:	0800bc3d 	.word	0x0800bc3d
 800bc28:	0800bc3d 	.word	0x0800bc3d
 800bc2c:	0800bc3d 	.word	0x0800bc3d
 800bc30:	0800bc3d 	.word	0x0800bc3d
 800bc34:	0800bc3d 	.word	0x0800bc3d
 800bc38:	0800bc3d 	.word	0x0800bc3d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bc3c:	bf00      	nop
  }

  return (USBD_OK);
 800bc3e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	370c      	adds	r7, #12
 800bc44:	46bd      	mov	sp, r7
 800bc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4a:	4770      	bx	lr

0800bc4c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b082      	sub	sp, #8
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
 800bc54:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bc56:	6879      	ldr	r1, [r7, #4]
 800bc58:	4805      	ldr	r0, [pc, #20]	; (800bc70 <CDC_Receive_FS+0x24>)
 800bc5a:	f7fe fb95 	bl	800a388 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bc5e:	4804      	ldr	r0, [pc, #16]	; (800bc70 <CDC_Receive_FS+0x24>)
 800bc60:	f7fe fbf0 	bl	800a444 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bc64:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	3708      	adds	r7, #8
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}
 800bc6e:	bf00      	nop
 800bc70:	2400f160 	.word	0x2400f160

0800bc74 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b084      	sub	sp, #16
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	460b      	mov	r3, r1
 800bc7e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bc80:	2300      	movs	r3, #0
 800bc82:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bc84:	4b0d      	ldr	r3, [pc, #52]	; (800bcbc <CDC_Transmit_FS+0x48>)
 800bc86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc8a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d001      	beq.n	800bc9a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800bc96:	2301      	movs	r3, #1
 800bc98:	e00b      	b.n	800bcb2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bc9a:	887b      	ldrh	r3, [r7, #2]
 800bc9c:	461a      	mov	r2, r3
 800bc9e:	6879      	ldr	r1, [r7, #4]
 800bca0:	4806      	ldr	r0, [pc, #24]	; (800bcbc <CDC_Transmit_FS+0x48>)
 800bca2:	f7fe fb4f 	bl	800a344 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bca6:	4805      	ldr	r0, [pc, #20]	; (800bcbc <CDC_Transmit_FS+0x48>)
 800bca8:	f7fe fb8c 	bl	800a3c4 <USBD_CDC_TransmitPacket>
 800bcac:	4603      	mov	r3, r0
 800bcae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800bcb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	3710      	adds	r7, #16
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}
 800bcba:	bf00      	nop
 800bcbc:	2400f160 	.word	0x2400f160

0800bcc0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	b087      	sub	sp, #28
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	60f8      	str	r0, [r7, #12]
 800bcc8:	60b9      	str	r1, [r7, #8]
 800bcca:	4613      	mov	r3, r2
 800bccc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bcd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	371c      	adds	r7, #28
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce0:	4770      	bx	lr
	...

0800bce4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bce4:	b480      	push	{r7}
 800bce6:	b083      	sub	sp, #12
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	4603      	mov	r3, r0
 800bcec:	6039      	str	r1, [r7, #0]
 800bcee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	2212      	movs	r2, #18
 800bcf4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bcf6:	4b03      	ldr	r3, [pc, #12]	; (800bd04 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	370c      	adds	r7, #12
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd02:	4770      	bx	lr
 800bd04:	24000110 	.word	0x24000110

0800bd08 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd08:	b480      	push	{r7}
 800bd0a:	b083      	sub	sp, #12
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	4603      	mov	r3, r0
 800bd10:	6039      	str	r1, [r7, #0]
 800bd12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	2204      	movs	r2, #4
 800bd18:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bd1a:	4b03      	ldr	r3, [pc, #12]	; (800bd28 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	370c      	adds	r7, #12
 800bd20:	46bd      	mov	sp, r7
 800bd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd26:	4770      	bx	lr
 800bd28:	24000124 	.word	0x24000124

0800bd2c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b082      	sub	sp, #8
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	4603      	mov	r3, r0
 800bd34:	6039      	str	r1, [r7, #0]
 800bd36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bd38:	79fb      	ldrb	r3, [r7, #7]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d105      	bne.n	800bd4a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bd3e:	683a      	ldr	r2, [r7, #0]
 800bd40:	4907      	ldr	r1, [pc, #28]	; (800bd60 <USBD_FS_ProductStrDescriptor+0x34>)
 800bd42:	4808      	ldr	r0, [pc, #32]	; (800bd64 <USBD_FS_ProductStrDescriptor+0x38>)
 800bd44:	f7ff fdf6 	bl	800b934 <USBD_GetString>
 800bd48:	e004      	b.n	800bd54 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bd4a:	683a      	ldr	r2, [r7, #0]
 800bd4c:	4904      	ldr	r1, [pc, #16]	; (800bd60 <USBD_FS_ProductStrDescriptor+0x34>)
 800bd4e:	4805      	ldr	r0, [pc, #20]	; (800bd64 <USBD_FS_ProductStrDescriptor+0x38>)
 800bd50:	f7ff fdf0 	bl	800b934 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd54:	4b02      	ldr	r3, [pc, #8]	; (800bd60 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	3708      	adds	r7, #8
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}
 800bd5e:	bf00      	nop
 800bd60:	2401043c 	.word	0x2401043c
 800bd64:	0800f1b0 	.word	0x0800f1b0

0800bd68 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b082      	sub	sp, #8
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	4603      	mov	r3, r0
 800bd70:	6039      	str	r1, [r7, #0]
 800bd72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bd74:	683a      	ldr	r2, [r7, #0]
 800bd76:	4904      	ldr	r1, [pc, #16]	; (800bd88 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bd78:	4804      	ldr	r0, [pc, #16]	; (800bd8c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bd7a:	f7ff fddb 	bl	800b934 <USBD_GetString>
  return USBD_StrDesc;
 800bd7e:	4b02      	ldr	r3, [pc, #8]	; (800bd88 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bd80:	4618      	mov	r0, r3
 800bd82:	3708      	adds	r7, #8
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}
 800bd88:	2401043c 	.word	0x2401043c
 800bd8c:	0800f1c8 	.word	0x0800f1c8

0800bd90 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b082      	sub	sp, #8
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	4603      	mov	r3, r0
 800bd98:	6039      	str	r1, [r7, #0]
 800bd9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	221a      	movs	r2, #26
 800bda0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bda2:	f000 f843 	bl	800be2c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bda6:	4b02      	ldr	r3, [pc, #8]	; (800bdb0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bda8:	4618      	mov	r0, r3
 800bdaa:	3708      	adds	r7, #8
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd80      	pop	{r7, pc}
 800bdb0:	24000128 	.word	0x24000128

0800bdb4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b082      	sub	sp, #8
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	4603      	mov	r3, r0
 800bdbc:	6039      	str	r1, [r7, #0]
 800bdbe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bdc0:	79fb      	ldrb	r3, [r7, #7]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d105      	bne.n	800bdd2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bdc6:	683a      	ldr	r2, [r7, #0]
 800bdc8:	4907      	ldr	r1, [pc, #28]	; (800bde8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bdca:	4808      	ldr	r0, [pc, #32]	; (800bdec <USBD_FS_ConfigStrDescriptor+0x38>)
 800bdcc:	f7ff fdb2 	bl	800b934 <USBD_GetString>
 800bdd0:	e004      	b.n	800bddc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bdd2:	683a      	ldr	r2, [r7, #0]
 800bdd4:	4904      	ldr	r1, [pc, #16]	; (800bde8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bdd6:	4805      	ldr	r0, [pc, #20]	; (800bdec <USBD_FS_ConfigStrDescriptor+0x38>)
 800bdd8:	f7ff fdac 	bl	800b934 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bddc:	4b02      	ldr	r3, [pc, #8]	; (800bde8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bdde:	4618      	mov	r0, r3
 800bde0:	3708      	adds	r7, #8
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bd80      	pop	{r7, pc}
 800bde6:	bf00      	nop
 800bde8:	2401043c 	.word	0x2401043c
 800bdec:	0800f1dc 	.word	0x0800f1dc

0800bdf0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b082      	sub	sp, #8
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	6039      	str	r1, [r7, #0]
 800bdfa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bdfc:	79fb      	ldrb	r3, [r7, #7]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d105      	bne.n	800be0e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800be02:	683a      	ldr	r2, [r7, #0]
 800be04:	4907      	ldr	r1, [pc, #28]	; (800be24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800be06:	4808      	ldr	r0, [pc, #32]	; (800be28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800be08:	f7ff fd94 	bl	800b934 <USBD_GetString>
 800be0c:	e004      	b.n	800be18 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800be0e:	683a      	ldr	r2, [r7, #0]
 800be10:	4904      	ldr	r1, [pc, #16]	; (800be24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800be12:	4805      	ldr	r0, [pc, #20]	; (800be28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800be14:	f7ff fd8e 	bl	800b934 <USBD_GetString>
  }
  return USBD_StrDesc;
 800be18:	4b02      	ldr	r3, [pc, #8]	; (800be24 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	3708      	adds	r7, #8
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}
 800be22:	bf00      	nop
 800be24:	2401043c 	.word	0x2401043c
 800be28:	0800f1e8 	.word	0x0800f1e8

0800be2c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b084      	sub	sp, #16
 800be30:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800be32:	4b0f      	ldr	r3, [pc, #60]	; (800be70 <Get_SerialNum+0x44>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800be38:	4b0e      	ldr	r3, [pc, #56]	; (800be74 <Get_SerialNum+0x48>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800be3e:	4b0e      	ldr	r3, [pc, #56]	; (800be78 <Get_SerialNum+0x4c>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800be44:	68fa      	ldr	r2, [r7, #12]
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	4413      	add	r3, r2
 800be4a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d009      	beq.n	800be66 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800be52:	2208      	movs	r2, #8
 800be54:	4909      	ldr	r1, [pc, #36]	; (800be7c <Get_SerialNum+0x50>)
 800be56:	68f8      	ldr	r0, [r7, #12]
 800be58:	f000 f814 	bl	800be84 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800be5c:	2204      	movs	r2, #4
 800be5e:	4908      	ldr	r1, [pc, #32]	; (800be80 <Get_SerialNum+0x54>)
 800be60:	68b8      	ldr	r0, [r7, #8]
 800be62:	f000 f80f 	bl	800be84 <IntToUnicode>
  }
}
 800be66:	bf00      	nop
 800be68:	3710      	adds	r7, #16
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}
 800be6e:	bf00      	nop
 800be70:	1ff1e800 	.word	0x1ff1e800
 800be74:	1ff1e804 	.word	0x1ff1e804
 800be78:	1ff1e808 	.word	0x1ff1e808
 800be7c:	2400012a 	.word	0x2400012a
 800be80:	2400013a 	.word	0x2400013a

0800be84 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800be84:	b480      	push	{r7}
 800be86:	b087      	sub	sp, #28
 800be88:	af00      	add	r7, sp, #0
 800be8a:	60f8      	str	r0, [r7, #12]
 800be8c:	60b9      	str	r1, [r7, #8]
 800be8e:	4613      	mov	r3, r2
 800be90:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800be92:	2300      	movs	r3, #0
 800be94:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800be96:	2300      	movs	r3, #0
 800be98:	75fb      	strb	r3, [r7, #23]
 800be9a:	e027      	b.n	800beec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	0f1b      	lsrs	r3, r3, #28
 800bea0:	2b09      	cmp	r3, #9
 800bea2:	d80b      	bhi.n	800bebc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	0f1b      	lsrs	r3, r3, #28
 800bea8:	b2da      	uxtb	r2, r3
 800beaa:	7dfb      	ldrb	r3, [r7, #23]
 800beac:	005b      	lsls	r3, r3, #1
 800beae:	4619      	mov	r1, r3
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	440b      	add	r3, r1
 800beb4:	3230      	adds	r2, #48	; 0x30
 800beb6:	b2d2      	uxtb	r2, r2
 800beb8:	701a      	strb	r2, [r3, #0]
 800beba:	e00a      	b.n	800bed2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	0f1b      	lsrs	r3, r3, #28
 800bec0:	b2da      	uxtb	r2, r3
 800bec2:	7dfb      	ldrb	r3, [r7, #23]
 800bec4:	005b      	lsls	r3, r3, #1
 800bec6:	4619      	mov	r1, r3
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	440b      	add	r3, r1
 800becc:	3237      	adds	r2, #55	; 0x37
 800bece:	b2d2      	uxtb	r2, r2
 800bed0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	011b      	lsls	r3, r3, #4
 800bed6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bed8:	7dfb      	ldrb	r3, [r7, #23]
 800beda:	005b      	lsls	r3, r3, #1
 800bedc:	3301      	adds	r3, #1
 800bede:	68ba      	ldr	r2, [r7, #8]
 800bee0:	4413      	add	r3, r2
 800bee2:	2200      	movs	r2, #0
 800bee4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bee6:	7dfb      	ldrb	r3, [r7, #23]
 800bee8:	3301      	adds	r3, #1
 800beea:	75fb      	strb	r3, [r7, #23]
 800beec:	7dfa      	ldrb	r2, [r7, #23]
 800beee:	79fb      	ldrb	r3, [r7, #7]
 800bef0:	429a      	cmp	r2, r3
 800bef2:	d3d3      	bcc.n	800be9c <IntToUnicode+0x18>
  }
}
 800bef4:	bf00      	nop
 800bef6:	bf00      	nop
 800bef8:	371c      	adds	r7, #28
 800befa:	46bd      	mov	sp, r7
 800befc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf00:	4770      	bx	lr
	...

0800bf04 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b0ba      	sub	sp, #232	; 0xe8
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bf0c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800bf10:	2200      	movs	r2, #0
 800bf12:	601a      	str	r2, [r3, #0]
 800bf14:	605a      	str	r2, [r3, #4]
 800bf16:	609a      	str	r2, [r3, #8]
 800bf18:	60da      	str	r2, [r3, #12]
 800bf1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800bf1c:	f107 0310 	add.w	r3, r7, #16
 800bf20:	22c0      	movs	r2, #192	; 0xc0
 800bf22:	2100      	movs	r1, #0
 800bf24:	4618      	mov	r0, r3
 800bf26:	f001 f942 	bl	800d1ae <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	4a2c      	ldr	r2, [pc, #176]	; (800bfe0 <HAL_PCD_MspInit+0xdc>)
 800bf30:	4293      	cmp	r3, r2
 800bf32:	d151      	bne.n	800bfd8 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800bf34:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800bf38:	f04f 0300 	mov.w	r3, #0
 800bf3c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800bf40:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bf44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800bf48:	f107 0310 	add.w	r3, r7, #16
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	f7f9 fd8b 	bl	8005a68 <HAL_RCCEx_PeriphCLKConfig>
 800bf52:	4603      	mov	r3, r0
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d001      	beq.n	800bf5c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800bf58:	f7f5 fbc4 	bl	80016e4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800bf5c:	f7f8 fda4 	bl	8004aa8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bf60:	4b20      	ldr	r3, [pc, #128]	; (800bfe4 <HAL_PCD_MspInit+0xe0>)
 800bf62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bf66:	4a1f      	ldr	r2, [pc, #124]	; (800bfe4 <HAL_PCD_MspInit+0xe0>)
 800bf68:	f043 0301 	orr.w	r3, r3, #1
 800bf6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bf70:	4b1c      	ldr	r3, [pc, #112]	; (800bfe4 <HAL_PCD_MspInit+0xe0>)
 800bf72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bf76:	f003 0301 	and.w	r3, r3, #1
 800bf7a:	60fb      	str	r3, [r7, #12]
 800bf7c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bf7e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800bf82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf86:	2302      	movs	r3, #2
 800bf88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bf92:	2300      	movs	r3, #0
 800bf94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800bf98:	230a      	movs	r3, #10
 800bf9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bf9e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800bfa2:	4619      	mov	r1, r3
 800bfa4:	4810      	ldr	r0, [pc, #64]	; (800bfe8 <HAL_PCD_MspInit+0xe4>)
 800bfa6:	f7f7 f8db 	bl	8003160 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bfaa:	4b0e      	ldr	r3, [pc, #56]	; (800bfe4 <HAL_PCD_MspInit+0xe0>)
 800bfac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bfb0:	4a0c      	ldr	r2, [pc, #48]	; (800bfe4 <HAL_PCD_MspInit+0xe0>)
 800bfb2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bfb6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800bfba:	4b0a      	ldr	r3, [pc, #40]	; (800bfe4 <HAL_PCD_MspInit+0xe0>)
 800bfbc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bfc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bfc4:	60bb      	str	r3, [r7, #8]
 800bfc6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bfc8:	2200      	movs	r2, #0
 800bfca:	2100      	movs	r1, #0
 800bfcc:	2065      	movs	r0, #101	; 0x65
 800bfce:	f7f7 f892 	bl	80030f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bfd2:	2065      	movs	r0, #101	; 0x65
 800bfd4:	f7f7 f8a9 	bl	800312a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bfd8:	bf00      	nop
 800bfda:	37e8      	adds	r7, #232	; 0xe8
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bd80      	pop	{r7, pc}
 800bfe0:	40080000 	.word	0x40080000
 800bfe4:	58024400 	.word	0x58024400
 800bfe8:	58020000 	.word	0x58020000

0800bfec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b082      	sub	sp, #8
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c000:	4619      	mov	r1, r3
 800c002:	4610      	mov	r0, r2
 800c004:	f7fe fb07 	bl	800a616 <USBD_LL_SetupStage>
}
 800c008:	bf00      	nop
 800c00a:	3708      	adds	r7, #8
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}

0800c010 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b082      	sub	sp, #8
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
 800c018:	460b      	mov	r3, r1
 800c01a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c022:	78fa      	ldrb	r2, [r7, #3]
 800c024:	6879      	ldr	r1, [r7, #4]
 800c026:	4613      	mov	r3, r2
 800c028:	00db      	lsls	r3, r3, #3
 800c02a:	4413      	add	r3, r2
 800c02c:	009b      	lsls	r3, r3, #2
 800c02e:	440b      	add	r3, r1
 800c030:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800c034:	681a      	ldr	r2, [r3, #0]
 800c036:	78fb      	ldrb	r3, [r7, #3]
 800c038:	4619      	mov	r1, r3
 800c03a:	f7fe fb41 	bl	800a6c0 <USBD_LL_DataOutStage>
}
 800c03e:	bf00      	nop
 800c040:	3708      	adds	r7, #8
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}

0800c046 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c046:	b580      	push	{r7, lr}
 800c048:	b082      	sub	sp, #8
 800c04a:	af00      	add	r7, sp, #0
 800c04c:	6078      	str	r0, [r7, #4]
 800c04e:	460b      	mov	r3, r1
 800c050:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c058:	78fa      	ldrb	r2, [r7, #3]
 800c05a:	6879      	ldr	r1, [r7, #4]
 800c05c:	4613      	mov	r3, r2
 800c05e:	00db      	lsls	r3, r3, #3
 800c060:	4413      	add	r3, r2
 800c062:	009b      	lsls	r3, r3, #2
 800c064:	440b      	add	r3, r1
 800c066:	3348      	adds	r3, #72	; 0x48
 800c068:	681a      	ldr	r2, [r3, #0]
 800c06a:	78fb      	ldrb	r3, [r7, #3]
 800c06c:	4619      	mov	r1, r3
 800c06e:	f7fe fbda 	bl	800a826 <USBD_LL_DataInStage>
}
 800c072:	bf00      	nop
 800c074:	3708      	adds	r7, #8
 800c076:	46bd      	mov	sp, r7
 800c078:	bd80      	pop	{r7, pc}

0800c07a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c07a:	b580      	push	{r7, lr}
 800c07c:	b082      	sub	sp, #8
 800c07e:	af00      	add	r7, sp, #0
 800c080:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c088:	4618      	mov	r0, r3
 800c08a:	f7fe fd14 	bl	800aab6 <USBD_LL_SOF>
}
 800c08e:	bf00      	nop
 800c090:	3708      	adds	r7, #8
 800c092:	46bd      	mov	sp, r7
 800c094:	bd80      	pop	{r7, pc}

0800c096 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c096:	b580      	push	{r7, lr}
 800c098:	b084      	sub	sp, #16
 800c09a:	af00      	add	r7, sp, #0
 800c09c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c09e:	2301      	movs	r3, #1
 800c0a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	691b      	ldr	r3, [r3, #16]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d102      	bne.n	800c0b0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	73fb      	strb	r3, [r7, #15]
 800c0ae:	e008      	b.n	800c0c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	691b      	ldr	r3, [r3, #16]
 800c0b4:	2b02      	cmp	r3, #2
 800c0b6:	d102      	bne.n	800c0be <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c0b8:	2301      	movs	r3, #1
 800c0ba:	73fb      	strb	r3, [r7, #15]
 800c0bc:	e001      	b.n	800c0c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c0be:	f7f5 fb11 	bl	80016e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c0c8:	7bfa      	ldrb	r2, [r7, #15]
 800c0ca:	4611      	mov	r1, r2
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f7fe fcae 	bl	800aa2e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f7fe fc56 	bl	800a98a <USBD_LL_Reset>
}
 800c0de:	bf00      	nop
 800c0e0:	3710      	adds	r7, #16
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}
	...

0800c0e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b082      	sub	sp, #8
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	f7fe fca9 	bl	800aa4e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	687a      	ldr	r2, [r7, #4]
 800c108:	6812      	ldr	r2, [r2, #0]
 800c10a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c10e:	f043 0301 	orr.w	r3, r3, #1
 800c112:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	6a1b      	ldr	r3, [r3, #32]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d005      	beq.n	800c128 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c11c:	4b04      	ldr	r3, [pc, #16]	; (800c130 <HAL_PCD_SuspendCallback+0x48>)
 800c11e:	691b      	ldr	r3, [r3, #16]
 800c120:	4a03      	ldr	r2, [pc, #12]	; (800c130 <HAL_PCD_SuspendCallback+0x48>)
 800c122:	f043 0306 	orr.w	r3, r3, #6
 800c126:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c128:	bf00      	nop
 800c12a:	3708      	adds	r7, #8
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}
 800c130:	e000ed00 	.word	0xe000ed00

0800c134 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b082      	sub	sp, #8
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c142:	4618      	mov	r0, r3
 800c144:	f7fe fc9f 	bl	800aa86 <USBD_LL_Resume>
}
 800c148:	bf00      	nop
 800c14a:	3708      	adds	r7, #8
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}

0800c150 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b082      	sub	sp, #8
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
 800c158:	460b      	mov	r3, r1
 800c15a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c162:	78fa      	ldrb	r2, [r7, #3]
 800c164:	4611      	mov	r1, r2
 800c166:	4618      	mov	r0, r3
 800c168:	f7fe fcf7 	bl	800ab5a <USBD_LL_IsoOUTIncomplete>
}
 800c16c:	bf00      	nop
 800c16e:	3708      	adds	r7, #8
 800c170:	46bd      	mov	sp, r7
 800c172:	bd80      	pop	{r7, pc}

0800c174 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b082      	sub	sp, #8
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
 800c17c:	460b      	mov	r3, r1
 800c17e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c186:	78fa      	ldrb	r2, [r7, #3]
 800c188:	4611      	mov	r1, r2
 800c18a:	4618      	mov	r0, r3
 800c18c:	f7fe fcb3 	bl	800aaf6 <USBD_LL_IsoINIncomplete>
}
 800c190:	bf00      	nop
 800c192:	3708      	adds	r7, #8
 800c194:	46bd      	mov	sp, r7
 800c196:	bd80      	pop	{r7, pc}

0800c198 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b082      	sub	sp, #8
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	f7fe fd09 	bl	800abbe <USBD_LL_DevConnected>
}
 800c1ac:	bf00      	nop
 800c1ae:	3708      	adds	r7, #8
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	bd80      	pop	{r7, pc}

0800c1b4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b082      	sub	sp, #8
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	f7fe fd06 	bl	800abd4 <USBD_LL_DevDisconnected>
}
 800c1c8:	bf00      	nop
 800c1ca:	3708      	adds	r7, #8
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}

0800c1d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b082      	sub	sp, #8
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	781b      	ldrb	r3, [r3, #0]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d13e      	bne.n	800c25e <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c1e0:	4a21      	ldr	r2, [pc, #132]	; (800c268 <USBD_LL_Init+0x98>)
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	4a1f      	ldr	r2, [pc, #124]	; (800c268 <USBD_LL_Init+0x98>)
 800c1ec:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c1f0:	4b1d      	ldr	r3, [pc, #116]	; (800c268 <USBD_LL_Init+0x98>)
 800c1f2:	4a1e      	ldr	r2, [pc, #120]	; (800c26c <USBD_LL_Init+0x9c>)
 800c1f4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800c1f6:	4b1c      	ldr	r3, [pc, #112]	; (800c268 <USBD_LL_Init+0x98>)
 800c1f8:	2209      	movs	r2, #9
 800c1fa:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c1fc:	4b1a      	ldr	r3, [pc, #104]	; (800c268 <USBD_LL_Init+0x98>)
 800c1fe:	2202      	movs	r2, #2
 800c200:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c202:	4b19      	ldr	r3, [pc, #100]	; (800c268 <USBD_LL_Init+0x98>)
 800c204:	2200      	movs	r2, #0
 800c206:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c208:	4b17      	ldr	r3, [pc, #92]	; (800c268 <USBD_LL_Init+0x98>)
 800c20a:	2202      	movs	r2, #2
 800c20c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c20e:	4b16      	ldr	r3, [pc, #88]	; (800c268 <USBD_LL_Init+0x98>)
 800c210:	2200      	movs	r2, #0
 800c212:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c214:	4b14      	ldr	r3, [pc, #80]	; (800c268 <USBD_LL_Init+0x98>)
 800c216:	2200      	movs	r2, #0
 800c218:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c21a:	4b13      	ldr	r3, [pc, #76]	; (800c268 <USBD_LL_Init+0x98>)
 800c21c:	2200      	movs	r2, #0
 800c21e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800c220:	4b11      	ldr	r3, [pc, #68]	; (800c268 <USBD_LL_Init+0x98>)
 800c222:	2200      	movs	r2, #0
 800c224:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c226:	4b10      	ldr	r3, [pc, #64]	; (800c268 <USBD_LL_Init+0x98>)
 800c228:	2200      	movs	r2, #0
 800c22a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c22c:	4b0e      	ldr	r3, [pc, #56]	; (800c268 <USBD_LL_Init+0x98>)
 800c22e:	2200      	movs	r2, #0
 800c230:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c232:	480d      	ldr	r0, [pc, #52]	; (800c268 <USBD_LL_Init+0x98>)
 800c234:	f7f7 f944 	bl	80034c0 <HAL_PCD_Init>
 800c238:	4603      	mov	r3, r0
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d001      	beq.n	800c242 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800c23e:	f7f5 fa51 	bl	80016e4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c242:	2180      	movs	r1, #128	; 0x80
 800c244:	4808      	ldr	r0, [pc, #32]	; (800c268 <USBD_LL_Init+0x98>)
 800c246:	f7f8 fbb4 	bl	80049b2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c24a:	2240      	movs	r2, #64	; 0x40
 800c24c:	2100      	movs	r1, #0
 800c24e:	4806      	ldr	r0, [pc, #24]	; (800c268 <USBD_LL_Init+0x98>)
 800c250:	f7f8 fb68 	bl	8004924 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c254:	2280      	movs	r2, #128	; 0x80
 800c256:	2101      	movs	r1, #1
 800c258:	4803      	ldr	r0, [pc, #12]	; (800c268 <USBD_LL_Init+0x98>)
 800c25a:	f7f8 fb63 	bl	8004924 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800c25e:	2300      	movs	r3, #0
}
 800c260:	4618      	mov	r0, r3
 800c262:	3708      	adds	r7, #8
 800c264:	46bd      	mov	sp, r7
 800c266:	bd80      	pop	{r7, pc}
 800c268:	2401063c 	.word	0x2401063c
 800c26c:	40080000 	.word	0x40080000

0800c270 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b084      	sub	sp, #16
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c278:	2300      	movs	r3, #0
 800c27a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c27c:	2300      	movs	r3, #0
 800c27e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c286:	4618      	mov	r0, r3
 800c288:	f7f7 fa3e 	bl	8003708 <HAL_PCD_Start>
 800c28c:	4603      	mov	r3, r0
 800c28e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c290:	7bfb      	ldrb	r3, [r7, #15]
 800c292:	4618      	mov	r0, r3
 800c294:	f000 f942 	bl	800c51c <USBD_Get_USB_Status>
 800c298:	4603      	mov	r3, r0
 800c29a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c29c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	3710      	adds	r7, #16
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bd80      	pop	{r7, pc}

0800c2a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c2a6:	b580      	push	{r7, lr}
 800c2a8:	b084      	sub	sp, #16
 800c2aa:	af00      	add	r7, sp, #0
 800c2ac:	6078      	str	r0, [r7, #4]
 800c2ae:	4608      	mov	r0, r1
 800c2b0:	4611      	mov	r1, r2
 800c2b2:	461a      	mov	r2, r3
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	70fb      	strb	r3, [r7, #3]
 800c2b8:	460b      	mov	r3, r1
 800c2ba:	70bb      	strb	r3, [r7, #2]
 800c2bc:	4613      	mov	r3, r2
 800c2be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c2ce:	78bb      	ldrb	r3, [r7, #2]
 800c2d0:	883a      	ldrh	r2, [r7, #0]
 800c2d2:	78f9      	ldrb	r1, [r7, #3]
 800c2d4:	f7f7 ff3e 	bl	8004154 <HAL_PCD_EP_Open>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2dc:	7bfb      	ldrb	r3, [r7, #15]
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f000 f91c 	bl	800c51c <USBD_Get_USB_Status>
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3710      	adds	r7, #16
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}

0800c2f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c2f2:	b580      	push	{r7, lr}
 800c2f4:	b084      	sub	sp, #16
 800c2f6:	af00      	add	r7, sp, #0
 800c2f8:	6078      	str	r0, [r7, #4]
 800c2fa:	460b      	mov	r3, r1
 800c2fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2fe:	2300      	movs	r3, #0
 800c300:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c302:	2300      	movs	r3, #0
 800c304:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c30c:	78fa      	ldrb	r2, [r7, #3]
 800c30e:	4611      	mov	r1, r2
 800c310:	4618      	mov	r0, r3
 800c312:	f7f7 ff87 	bl	8004224 <HAL_PCD_EP_Close>
 800c316:	4603      	mov	r3, r0
 800c318:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c31a:	7bfb      	ldrb	r3, [r7, #15]
 800c31c:	4618      	mov	r0, r3
 800c31e:	f000 f8fd 	bl	800c51c <USBD_Get_USB_Status>
 800c322:	4603      	mov	r3, r0
 800c324:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c326:	7bbb      	ldrb	r3, [r7, #14]
}
 800c328:	4618      	mov	r0, r3
 800c32a:	3710      	adds	r7, #16
 800c32c:	46bd      	mov	sp, r7
 800c32e:	bd80      	pop	{r7, pc}

0800c330 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b084      	sub	sp, #16
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
 800c338:	460b      	mov	r3, r1
 800c33a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c33c:	2300      	movs	r3, #0
 800c33e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c340:	2300      	movs	r3, #0
 800c342:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c34a:	78fa      	ldrb	r2, [r7, #3]
 800c34c:	4611      	mov	r1, r2
 800c34e:	4618      	mov	r0, r3
 800c350:	f7f8 f841 	bl	80043d6 <HAL_PCD_EP_SetStall>
 800c354:	4603      	mov	r3, r0
 800c356:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c358:	7bfb      	ldrb	r3, [r7, #15]
 800c35a:	4618      	mov	r0, r3
 800c35c:	f000 f8de 	bl	800c51c <USBD_Get_USB_Status>
 800c360:	4603      	mov	r3, r0
 800c362:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c364:	7bbb      	ldrb	r3, [r7, #14]
}
 800c366:	4618      	mov	r0, r3
 800c368:	3710      	adds	r7, #16
 800c36a:	46bd      	mov	sp, r7
 800c36c:	bd80      	pop	{r7, pc}

0800c36e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c36e:	b580      	push	{r7, lr}
 800c370:	b084      	sub	sp, #16
 800c372:	af00      	add	r7, sp, #0
 800c374:	6078      	str	r0, [r7, #4]
 800c376:	460b      	mov	r3, r1
 800c378:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c37a:	2300      	movs	r3, #0
 800c37c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c37e:	2300      	movs	r3, #0
 800c380:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c388:	78fa      	ldrb	r2, [r7, #3]
 800c38a:	4611      	mov	r1, r2
 800c38c:	4618      	mov	r0, r3
 800c38e:	f7f8 f886 	bl	800449e <HAL_PCD_EP_ClrStall>
 800c392:	4603      	mov	r3, r0
 800c394:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c396:	7bfb      	ldrb	r3, [r7, #15]
 800c398:	4618      	mov	r0, r3
 800c39a:	f000 f8bf 	bl	800c51c <USBD_Get_USB_Status>
 800c39e:	4603      	mov	r3, r0
 800c3a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	3710      	adds	r7, #16
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd80      	pop	{r7, pc}

0800c3ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3ac:	b480      	push	{r7}
 800c3ae:	b085      	sub	sp, #20
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
 800c3b4:	460b      	mov	r3, r1
 800c3b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c3be:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c3c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	da0b      	bge.n	800c3e0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c3c8:	78fb      	ldrb	r3, [r7, #3]
 800c3ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c3ce:	68f9      	ldr	r1, [r7, #12]
 800c3d0:	4613      	mov	r3, r2
 800c3d2:	00db      	lsls	r3, r3, #3
 800c3d4:	4413      	add	r3, r2
 800c3d6:	009b      	lsls	r3, r3, #2
 800c3d8:	440b      	add	r3, r1
 800c3da:	333e      	adds	r3, #62	; 0x3e
 800c3dc:	781b      	ldrb	r3, [r3, #0]
 800c3de:	e00b      	b.n	800c3f8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c3e0:	78fb      	ldrb	r3, [r7, #3]
 800c3e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c3e6:	68f9      	ldr	r1, [r7, #12]
 800c3e8:	4613      	mov	r3, r2
 800c3ea:	00db      	lsls	r3, r3, #3
 800c3ec:	4413      	add	r3, r2
 800c3ee:	009b      	lsls	r3, r3, #2
 800c3f0:	440b      	add	r3, r1
 800c3f2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c3f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	3714      	adds	r7, #20
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c402:	4770      	bx	lr

0800c404 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b084      	sub	sp, #16
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
 800c40c:	460b      	mov	r3, r1
 800c40e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c410:	2300      	movs	r3, #0
 800c412:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c414:	2300      	movs	r3, #0
 800c416:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c41e:	78fa      	ldrb	r2, [r7, #3]
 800c420:	4611      	mov	r1, r2
 800c422:	4618      	mov	r0, r3
 800c424:	f7f7 fe71 	bl	800410a <HAL_PCD_SetAddress>
 800c428:	4603      	mov	r3, r0
 800c42a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c42c:	7bfb      	ldrb	r3, [r7, #15]
 800c42e:	4618      	mov	r0, r3
 800c430:	f000 f874 	bl	800c51c <USBD_Get_USB_Status>
 800c434:	4603      	mov	r3, r0
 800c436:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c438:	7bbb      	ldrb	r3, [r7, #14]
}
 800c43a:	4618      	mov	r0, r3
 800c43c:	3710      	adds	r7, #16
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd80      	pop	{r7, pc}

0800c442 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c442:	b580      	push	{r7, lr}
 800c444:	b086      	sub	sp, #24
 800c446:	af00      	add	r7, sp, #0
 800c448:	60f8      	str	r0, [r7, #12]
 800c44a:	607a      	str	r2, [r7, #4]
 800c44c:	603b      	str	r3, [r7, #0]
 800c44e:	460b      	mov	r3, r1
 800c450:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c452:	2300      	movs	r3, #0
 800c454:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c456:	2300      	movs	r3, #0
 800c458:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c460:	7af9      	ldrb	r1, [r7, #11]
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	687a      	ldr	r2, [r7, #4]
 800c466:	f7f7 ff7b 	bl	8004360 <HAL_PCD_EP_Transmit>
 800c46a:	4603      	mov	r3, r0
 800c46c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c46e:	7dfb      	ldrb	r3, [r7, #23]
 800c470:	4618      	mov	r0, r3
 800c472:	f000 f853 	bl	800c51c <USBD_Get_USB_Status>
 800c476:	4603      	mov	r3, r0
 800c478:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c47a:	7dbb      	ldrb	r3, [r7, #22]
}
 800c47c:	4618      	mov	r0, r3
 800c47e:	3718      	adds	r7, #24
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}

0800c484 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b086      	sub	sp, #24
 800c488:	af00      	add	r7, sp, #0
 800c48a:	60f8      	str	r0, [r7, #12]
 800c48c:	607a      	str	r2, [r7, #4]
 800c48e:	603b      	str	r3, [r7, #0]
 800c490:	460b      	mov	r3, r1
 800c492:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c494:	2300      	movs	r3, #0
 800c496:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c498:	2300      	movs	r3, #0
 800c49a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c4a2:	7af9      	ldrb	r1, [r7, #11]
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	687a      	ldr	r2, [r7, #4]
 800c4a8:	f7f7 ff06 	bl	80042b8 <HAL_PCD_EP_Receive>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4b0:	7dfb      	ldrb	r3, [r7, #23]
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f000 f832 	bl	800c51c <USBD_Get_USB_Status>
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c4bc:	7dbb      	ldrb	r3, [r7, #22]
}
 800c4be:	4618      	mov	r0, r3
 800c4c0:	3718      	adds	r7, #24
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bd80      	pop	{r7, pc}

0800c4c6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c4c6:	b580      	push	{r7, lr}
 800c4c8:	b082      	sub	sp, #8
 800c4ca:	af00      	add	r7, sp, #0
 800c4cc:	6078      	str	r0, [r7, #4]
 800c4ce:	460b      	mov	r3, r1
 800c4d0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c4d8:	78fa      	ldrb	r2, [r7, #3]
 800c4da:	4611      	mov	r1, r2
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f7f7 ff27 	bl	8004330 <HAL_PCD_EP_GetRxCount>
 800c4e2:	4603      	mov	r3, r0
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	3708      	adds	r7, #8
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bd80      	pop	{r7, pc}

0800c4ec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c4ec:	b480      	push	{r7}
 800c4ee:	b083      	sub	sp, #12
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c4f4:	4b03      	ldr	r3, [pc, #12]	; (800c504 <USBD_static_malloc+0x18>)
}
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	370c      	adds	r7, #12
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c500:	4770      	bx	lr
 800c502:	bf00      	nop
 800c504:	24010b48 	.word	0x24010b48

0800c508 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c508:	b480      	push	{r7}
 800c50a:	b083      	sub	sp, #12
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800c510:	bf00      	nop
 800c512:	370c      	adds	r7, #12
 800c514:	46bd      	mov	sp, r7
 800c516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51a:	4770      	bx	lr

0800c51c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c51c:	b480      	push	{r7}
 800c51e:	b085      	sub	sp, #20
 800c520:	af00      	add	r7, sp, #0
 800c522:	4603      	mov	r3, r0
 800c524:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c526:	2300      	movs	r3, #0
 800c528:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c52a:	79fb      	ldrb	r3, [r7, #7]
 800c52c:	2b03      	cmp	r3, #3
 800c52e:	d817      	bhi.n	800c560 <USBD_Get_USB_Status+0x44>
 800c530:	a201      	add	r2, pc, #4	; (adr r2, 800c538 <USBD_Get_USB_Status+0x1c>)
 800c532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c536:	bf00      	nop
 800c538:	0800c549 	.word	0x0800c549
 800c53c:	0800c54f 	.word	0x0800c54f
 800c540:	0800c555 	.word	0x0800c555
 800c544:	0800c55b 	.word	0x0800c55b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c548:	2300      	movs	r3, #0
 800c54a:	73fb      	strb	r3, [r7, #15]
    break;
 800c54c:	e00b      	b.n	800c566 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c54e:	2303      	movs	r3, #3
 800c550:	73fb      	strb	r3, [r7, #15]
    break;
 800c552:	e008      	b.n	800c566 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c554:	2301      	movs	r3, #1
 800c556:	73fb      	strb	r3, [r7, #15]
    break;
 800c558:	e005      	b.n	800c566 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c55a:	2303      	movs	r3, #3
 800c55c:	73fb      	strb	r3, [r7, #15]
    break;
 800c55e:	e002      	b.n	800c566 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c560:	2303      	movs	r3, #3
 800c562:	73fb      	strb	r3, [r7, #15]
    break;
 800c564:	bf00      	nop
  }
  return usb_status;
 800c566:	7bfb      	ldrb	r3, [r7, #15]
}
 800c568:	4618      	mov	r0, r3
 800c56a:	3714      	adds	r7, #20
 800c56c:	46bd      	mov	sp, r7
 800c56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c572:	4770      	bx	lr

0800c574 <malloc>:
 800c574:	4b02      	ldr	r3, [pc, #8]	; (800c580 <malloc+0xc>)
 800c576:	4601      	mov	r1, r0
 800c578:	6818      	ldr	r0, [r3, #0]
 800c57a:	f000 b82b 	b.w	800c5d4 <_malloc_r>
 800c57e:	bf00      	nop
 800c580:	2400019c 	.word	0x2400019c

0800c584 <free>:
 800c584:	4b02      	ldr	r3, [pc, #8]	; (800c590 <free+0xc>)
 800c586:	4601      	mov	r1, r0
 800c588:	6818      	ldr	r0, [r3, #0]
 800c58a:	f001 bcad 	b.w	800dee8 <_free_r>
 800c58e:	bf00      	nop
 800c590:	2400019c 	.word	0x2400019c

0800c594 <sbrk_aligned>:
 800c594:	b570      	push	{r4, r5, r6, lr}
 800c596:	4e0e      	ldr	r6, [pc, #56]	; (800c5d0 <sbrk_aligned+0x3c>)
 800c598:	460c      	mov	r4, r1
 800c59a:	6831      	ldr	r1, [r6, #0]
 800c59c:	4605      	mov	r5, r0
 800c59e:	b911      	cbnz	r1, 800c5a6 <sbrk_aligned+0x12>
 800c5a0:	f000 fe46 	bl	800d230 <_sbrk_r>
 800c5a4:	6030      	str	r0, [r6, #0]
 800c5a6:	4621      	mov	r1, r4
 800c5a8:	4628      	mov	r0, r5
 800c5aa:	f000 fe41 	bl	800d230 <_sbrk_r>
 800c5ae:	1c43      	adds	r3, r0, #1
 800c5b0:	d00a      	beq.n	800c5c8 <sbrk_aligned+0x34>
 800c5b2:	1cc4      	adds	r4, r0, #3
 800c5b4:	f024 0403 	bic.w	r4, r4, #3
 800c5b8:	42a0      	cmp	r0, r4
 800c5ba:	d007      	beq.n	800c5cc <sbrk_aligned+0x38>
 800c5bc:	1a21      	subs	r1, r4, r0
 800c5be:	4628      	mov	r0, r5
 800c5c0:	f000 fe36 	bl	800d230 <_sbrk_r>
 800c5c4:	3001      	adds	r0, #1
 800c5c6:	d101      	bne.n	800c5cc <sbrk_aligned+0x38>
 800c5c8:	f04f 34ff 	mov.w	r4, #4294967295
 800c5cc:	4620      	mov	r0, r4
 800c5ce:	bd70      	pop	{r4, r5, r6, pc}
 800c5d0:	24010d6c 	.word	0x24010d6c

0800c5d4 <_malloc_r>:
 800c5d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5d8:	1ccd      	adds	r5, r1, #3
 800c5da:	f025 0503 	bic.w	r5, r5, #3
 800c5de:	3508      	adds	r5, #8
 800c5e0:	2d0c      	cmp	r5, #12
 800c5e2:	bf38      	it	cc
 800c5e4:	250c      	movcc	r5, #12
 800c5e6:	2d00      	cmp	r5, #0
 800c5e8:	4607      	mov	r7, r0
 800c5ea:	db01      	blt.n	800c5f0 <_malloc_r+0x1c>
 800c5ec:	42a9      	cmp	r1, r5
 800c5ee:	d905      	bls.n	800c5fc <_malloc_r+0x28>
 800c5f0:	230c      	movs	r3, #12
 800c5f2:	603b      	str	r3, [r7, #0]
 800c5f4:	2600      	movs	r6, #0
 800c5f6:	4630      	mov	r0, r6
 800c5f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c6d0 <_malloc_r+0xfc>
 800c600:	f000 f868 	bl	800c6d4 <__malloc_lock>
 800c604:	f8d8 3000 	ldr.w	r3, [r8]
 800c608:	461c      	mov	r4, r3
 800c60a:	bb5c      	cbnz	r4, 800c664 <_malloc_r+0x90>
 800c60c:	4629      	mov	r1, r5
 800c60e:	4638      	mov	r0, r7
 800c610:	f7ff ffc0 	bl	800c594 <sbrk_aligned>
 800c614:	1c43      	adds	r3, r0, #1
 800c616:	4604      	mov	r4, r0
 800c618:	d155      	bne.n	800c6c6 <_malloc_r+0xf2>
 800c61a:	f8d8 4000 	ldr.w	r4, [r8]
 800c61e:	4626      	mov	r6, r4
 800c620:	2e00      	cmp	r6, #0
 800c622:	d145      	bne.n	800c6b0 <_malloc_r+0xdc>
 800c624:	2c00      	cmp	r4, #0
 800c626:	d048      	beq.n	800c6ba <_malloc_r+0xe6>
 800c628:	6823      	ldr	r3, [r4, #0]
 800c62a:	4631      	mov	r1, r6
 800c62c:	4638      	mov	r0, r7
 800c62e:	eb04 0903 	add.w	r9, r4, r3
 800c632:	f000 fdfd 	bl	800d230 <_sbrk_r>
 800c636:	4581      	cmp	r9, r0
 800c638:	d13f      	bne.n	800c6ba <_malloc_r+0xe6>
 800c63a:	6821      	ldr	r1, [r4, #0]
 800c63c:	1a6d      	subs	r5, r5, r1
 800c63e:	4629      	mov	r1, r5
 800c640:	4638      	mov	r0, r7
 800c642:	f7ff ffa7 	bl	800c594 <sbrk_aligned>
 800c646:	3001      	adds	r0, #1
 800c648:	d037      	beq.n	800c6ba <_malloc_r+0xe6>
 800c64a:	6823      	ldr	r3, [r4, #0]
 800c64c:	442b      	add	r3, r5
 800c64e:	6023      	str	r3, [r4, #0]
 800c650:	f8d8 3000 	ldr.w	r3, [r8]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d038      	beq.n	800c6ca <_malloc_r+0xf6>
 800c658:	685a      	ldr	r2, [r3, #4]
 800c65a:	42a2      	cmp	r2, r4
 800c65c:	d12b      	bne.n	800c6b6 <_malloc_r+0xe2>
 800c65e:	2200      	movs	r2, #0
 800c660:	605a      	str	r2, [r3, #4]
 800c662:	e00f      	b.n	800c684 <_malloc_r+0xb0>
 800c664:	6822      	ldr	r2, [r4, #0]
 800c666:	1b52      	subs	r2, r2, r5
 800c668:	d41f      	bmi.n	800c6aa <_malloc_r+0xd6>
 800c66a:	2a0b      	cmp	r2, #11
 800c66c:	d917      	bls.n	800c69e <_malloc_r+0xca>
 800c66e:	1961      	adds	r1, r4, r5
 800c670:	42a3      	cmp	r3, r4
 800c672:	6025      	str	r5, [r4, #0]
 800c674:	bf18      	it	ne
 800c676:	6059      	strne	r1, [r3, #4]
 800c678:	6863      	ldr	r3, [r4, #4]
 800c67a:	bf08      	it	eq
 800c67c:	f8c8 1000 	streq.w	r1, [r8]
 800c680:	5162      	str	r2, [r4, r5]
 800c682:	604b      	str	r3, [r1, #4]
 800c684:	4638      	mov	r0, r7
 800c686:	f104 060b 	add.w	r6, r4, #11
 800c68a:	f000 f829 	bl	800c6e0 <__malloc_unlock>
 800c68e:	f026 0607 	bic.w	r6, r6, #7
 800c692:	1d23      	adds	r3, r4, #4
 800c694:	1af2      	subs	r2, r6, r3
 800c696:	d0ae      	beq.n	800c5f6 <_malloc_r+0x22>
 800c698:	1b9b      	subs	r3, r3, r6
 800c69a:	50a3      	str	r3, [r4, r2]
 800c69c:	e7ab      	b.n	800c5f6 <_malloc_r+0x22>
 800c69e:	42a3      	cmp	r3, r4
 800c6a0:	6862      	ldr	r2, [r4, #4]
 800c6a2:	d1dd      	bne.n	800c660 <_malloc_r+0x8c>
 800c6a4:	f8c8 2000 	str.w	r2, [r8]
 800c6a8:	e7ec      	b.n	800c684 <_malloc_r+0xb0>
 800c6aa:	4623      	mov	r3, r4
 800c6ac:	6864      	ldr	r4, [r4, #4]
 800c6ae:	e7ac      	b.n	800c60a <_malloc_r+0x36>
 800c6b0:	4634      	mov	r4, r6
 800c6b2:	6876      	ldr	r6, [r6, #4]
 800c6b4:	e7b4      	b.n	800c620 <_malloc_r+0x4c>
 800c6b6:	4613      	mov	r3, r2
 800c6b8:	e7cc      	b.n	800c654 <_malloc_r+0x80>
 800c6ba:	230c      	movs	r3, #12
 800c6bc:	603b      	str	r3, [r7, #0]
 800c6be:	4638      	mov	r0, r7
 800c6c0:	f000 f80e 	bl	800c6e0 <__malloc_unlock>
 800c6c4:	e797      	b.n	800c5f6 <_malloc_r+0x22>
 800c6c6:	6025      	str	r5, [r4, #0]
 800c6c8:	e7dc      	b.n	800c684 <_malloc_r+0xb0>
 800c6ca:	605b      	str	r3, [r3, #4]
 800c6cc:	deff      	udf	#255	; 0xff
 800c6ce:	bf00      	nop
 800c6d0:	24010d68 	.word	0x24010d68

0800c6d4 <__malloc_lock>:
 800c6d4:	4801      	ldr	r0, [pc, #4]	; (800c6dc <__malloc_lock+0x8>)
 800c6d6:	f000 bdf8 	b.w	800d2ca <__retarget_lock_acquire_recursive>
 800c6da:	bf00      	nop
 800c6dc:	24010eb0 	.word	0x24010eb0

0800c6e0 <__malloc_unlock>:
 800c6e0:	4801      	ldr	r0, [pc, #4]	; (800c6e8 <__malloc_unlock+0x8>)
 800c6e2:	f000 bdf3 	b.w	800d2cc <__retarget_lock_release_recursive>
 800c6e6:	bf00      	nop
 800c6e8:	24010eb0 	.word	0x24010eb0

0800c6ec <__cvt>:
 800c6ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6ee:	ed2d 8b02 	vpush	{d8}
 800c6f2:	eeb0 8b40 	vmov.f64	d8, d0
 800c6f6:	b085      	sub	sp, #20
 800c6f8:	4617      	mov	r7, r2
 800c6fa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800c6fc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c6fe:	ee18 2a90 	vmov	r2, s17
 800c702:	f025 0520 	bic.w	r5, r5, #32
 800c706:	2a00      	cmp	r2, #0
 800c708:	bfb6      	itet	lt
 800c70a:	222d      	movlt	r2, #45	; 0x2d
 800c70c:	2200      	movge	r2, #0
 800c70e:	eeb1 8b40 	vneglt.f64	d8, d0
 800c712:	2d46      	cmp	r5, #70	; 0x46
 800c714:	460c      	mov	r4, r1
 800c716:	701a      	strb	r2, [r3, #0]
 800c718:	d004      	beq.n	800c724 <__cvt+0x38>
 800c71a:	2d45      	cmp	r5, #69	; 0x45
 800c71c:	d100      	bne.n	800c720 <__cvt+0x34>
 800c71e:	3401      	adds	r4, #1
 800c720:	2102      	movs	r1, #2
 800c722:	e000      	b.n	800c726 <__cvt+0x3a>
 800c724:	2103      	movs	r1, #3
 800c726:	ab03      	add	r3, sp, #12
 800c728:	9301      	str	r3, [sp, #4]
 800c72a:	ab02      	add	r3, sp, #8
 800c72c:	9300      	str	r3, [sp, #0]
 800c72e:	4622      	mov	r2, r4
 800c730:	4633      	mov	r3, r6
 800c732:	eeb0 0b48 	vmov.f64	d0, d8
 800c736:	f000 fe6b 	bl	800d410 <_dtoa_r>
 800c73a:	2d47      	cmp	r5, #71	; 0x47
 800c73c:	d101      	bne.n	800c742 <__cvt+0x56>
 800c73e:	07fb      	lsls	r3, r7, #31
 800c740:	d51a      	bpl.n	800c778 <__cvt+0x8c>
 800c742:	2d46      	cmp	r5, #70	; 0x46
 800c744:	eb00 0204 	add.w	r2, r0, r4
 800c748:	d10c      	bne.n	800c764 <__cvt+0x78>
 800c74a:	7803      	ldrb	r3, [r0, #0]
 800c74c:	2b30      	cmp	r3, #48	; 0x30
 800c74e:	d107      	bne.n	800c760 <__cvt+0x74>
 800c750:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c758:	bf1c      	itt	ne
 800c75a:	f1c4 0401 	rsbne	r4, r4, #1
 800c75e:	6034      	strne	r4, [r6, #0]
 800c760:	6833      	ldr	r3, [r6, #0]
 800c762:	441a      	add	r2, r3
 800c764:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c76c:	bf08      	it	eq
 800c76e:	9203      	streq	r2, [sp, #12]
 800c770:	2130      	movs	r1, #48	; 0x30
 800c772:	9b03      	ldr	r3, [sp, #12]
 800c774:	4293      	cmp	r3, r2
 800c776:	d307      	bcc.n	800c788 <__cvt+0x9c>
 800c778:	9b03      	ldr	r3, [sp, #12]
 800c77a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c77c:	1a1b      	subs	r3, r3, r0
 800c77e:	6013      	str	r3, [r2, #0]
 800c780:	b005      	add	sp, #20
 800c782:	ecbd 8b02 	vpop	{d8}
 800c786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c788:	1c5c      	adds	r4, r3, #1
 800c78a:	9403      	str	r4, [sp, #12]
 800c78c:	7019      	strb	r1, [r3, #0]
 800c78e:	e7f0      	b.n	800c772 <__cvt+0x86>

0800c790 <__exponent>:
 800c790:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c792:	4603      	mov	r3, r0
 800c794:	2900      	cmp	r1, #0
 800c796:	bfb8      	it	lt
 800c798:	4249      	neglt	r1, r1
 800c79a:	f803 2b02 	strb.w	r2, [r3], #2
 800c79e:	bfb4      	ite	lt
 800c7a0:	222d      	movlt	r2, #45	; 0x2d
 800c7a2:	222b      	movge	r2, #43	; 0x2b
 800c7a4:	2909      	cmp	r1, #9
 800c7a6:	7042      	strb	r2, [r0, #1]
 800c7a8:	dd2a      	ble.n	800c800 <__exponent+0x70>
 800c7aa:	f10d 0207 	add.w	r2, sp, #7
 800c7ae:	4617      	mov	r7, r2
 800c7b0:	260a      	movs	r6, #10
 800c7b2:	4694      	mov	ip, r2
 800c7b4:	fb91 f5f6 	sdiv	r5, r1, r6
 800c7b8:	fb06 1415 	mls	r4, r6, r5, r1
 800c7bc:	3430      	adds	r4, #48	; 0x30
 800c7be:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800c7c2:	460c      	mov	r4, r1
 800c7c4:	2c63      	cmp	r4, #99	; 0x63
 800c7c6:	f102 32ff 	add.w	r2, r2, #4294967295
 800c7ca:	4629      	mov	r1, r5
 800c7cc:	dcf1      	bgt.n	800c7b2 <__exponent+0x22>
 800c7ce:	3130      	adds	r1, #48	; 0x30
 800c7d0:	f1ac 0402 	sub.w	r4, ip, #2
 800c7d4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c7d8:	1c41      	adds	r1, r0, #1
 800c7da:	4622      	mov	r2, r4
 800c7dc:	42ba      	cmp	r2, r7
 800c7de:	d30a      	bcc.n	800c7f6 <__exponent+0x66>
 800c7e0:	f10d 0209 	add.w	r2, sp, #9
 800c7e4:	eba2 020c 	sub.w	r2, r2, ip
 800c7e8:	42bc      	cmp	r4, r7
 800c7ea:	bf88      	it	hi
 800c7ec:	2200      	movhi	r2, #0
 800c7ee:	4413      	add	r3, r2
 800c7f0:	1a18      	subs	r0, r3, r0
 800c7f2:	b003      	add	sp, #12
 800c7f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7f6:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c7fa:	f801 5f01 	strb.w	r5, [r1, #1]!
 800c7fe:	e7ed      	b.n	800c7dc <__exponent+0x4c>
 800c800:	2330      	movs	r3, #48	; 0x30
 800c802:	3130      	adds	r1, #48	; 0x30
 800c804:	7083      	strb	r3, [r0, #2]
 800c806:	70c1      	strb	r1, [r0, #3]
 800c808:	1d03      	adds	r3, r0, #4
 800c80a:	e7f1      	b.n	800c7f0 <__exponent+0x60>
 800c80c:	0000      	movs	r0, r0
	...

0800c810 <_printf_float>:
 800c810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c814:	b08b      	sub	sp, #44	; 0x2c
 800c816:	460c      	mov	r4, r1
 800c818:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800c81c:	4616      	mov	r6, r2
 800c81e:	461f      	mov	r7, r3
 800c820:	4605      	mov	r5, r0
 800c822:	f000 fccd 	bl	800d1c0 <_localeconv_r>
 800c826:	f8d0 b000 	ldr.w	fp, [r0]
 800c82a:	4658      	mov	r0, fp
 800c82c:	f7f3 fda8 	bl	8000380 <strlen>
 800c830:	2300      	movs	r3, #0
 800c832:	9308      	str	r3, [sp, #32]
 800c834:	f8d8 3000 	ldr.w	r3, [r8]
 800c838:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c83c:	6822      	ldr	r2, [r4, #0]
 800c83e:	3307      	adds	r3, #7
 800c840:	f023 0307 	bic.w	r3, r3, #7
 800c844:	f103 0108 	add.w	r1, r3, #8
 800c848:	f8c8 1000 	str.w	r1, [r8]
 800c84c:	ed93 0b00 	vldr	d0, [r3]
 800c850:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800cab0 <_printf_float+0x2a0>
 800c854:	eeb0 7bc0 	vabs.f64	d7, d0
 800c858:	eeb4 7b46 	vcmp.f64	d7, d6
 800c85c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c860:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800c864:	4682      	mov	sl, r0
 800c866:	dd24      	ble.n	800c8b2 <_printf_float+0xa2>
 800c868:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c86c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c870:	d502      	bpl.n	800c878 <_printf_float+0x68>
 800c872:	232d      	movs	r3, #45	; 0x2d
 800c874:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c878:	498f      	ldr	r1, [pc, #572]	; (800cab8 <_printf_float+0x2a8>)
 800c87a:	4b90      	ldr	r3, [pc, #576]	; (800cabc <_printf_float+0x2ac>)
 800c87c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800c880:	bf94      	ite	ls
 800c882:	4688      	movls	r8, r1
 800c884:	4698      	movhi	r8, r3
 800c886:	2303      	movs	r3, #3
 800c888:	6123      	str	r3, [r4, #16]
 800c88a:	f022 0204 	bic.w	r2, r2, #4
 800c88e:	2300      	movs	r3, #0
 800c890:	6022      	str	r2, [r4, #0]
 800c892:	9304      	str	r3, [sp, #16]
 800c894:	9700      	str	r7, [sp, #0]
 800c896:	4633      	mov	r3, r6
 800c898:	aa09      	add	r2, sp, #36	; 0x24
 800c89a:	4621      	mov	r1, r4
 800c89c:	4628      	mov	r0, r5
 800c89e:	f000 f9d1 	bl	800cc44 <_printf_common>
 800c8a2:	3001      	adds	r0, #1
 800c8a4:	f040 808a 	bne.w	800c9bc <_printf_float+0x1ac>
 800c8a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c8ac:	b00b      	add	sp, #44	; 0x2c
 800c8ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8b2:	eeb4 0b40 	vcmp.f64	d0, d0
 800c8b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8ba:	d709      	bvc.n	800c8d0 <_printf_float+0xc0>
 800c8bc:	ee10 3a90 	vmov	r3, s1
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	bfbc      	itt	lt
 800c8c4:	232d      	movlt	r3, #45	; 0x2d
 800c8c6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c8ca:	497d      	ldr	r1, [pc, #500]	; (800cac0 <_printf_float+0x2b0>)
 800c8cc:	4b7d      	ldr	r3, [pc, #500]	; (800cac4 <_printf_float+0x2b4>)
 800c8ce:	e7d5      	b.n	800c87c <_printf_float+0x6c>
 800c8d0:	6863      	ldr	r3, [r4, #4]
 800c8d2:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800c8d6:	9104      	str	r1, [sp, #16]
 800c8d8:	1c59      	adds	r1, r3, #1
 800c8da:	d13c      	bne.n	800c956 <_printf_float+0x146>
 800c8dc:	2306      	movs	r3, #6
 800c8de:	6063      	str	r3, [r4, #4]
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	9303      	str	r3, [sp, #12]
 800c8e4:	ab08      	add	r3, sp, #32
 800c8e6:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800c8ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c8ee:	ab07      	add	r3, sp, #28
 800c8f0:	6861      	ldr	r1, [r4, #4]
 800c8f2:	9300      	str	r3, [sp, #0]
 800c8f4:	6022      	str	r2, [r4, #0]
 800c8f6:	f10d 031b 	add.w	r3, sp, #27
 800c8fa:	4628      	mov	r0, r5
 800c8fc:	f7ff fef6 	bl	800c6ec <__cvt>
 800c900:	9b04      	ldr	r3, [sp, #16]
 800c902:	9907      	ldr	r1, [sp, #28]
 800c904:	2b47      	cmp	r3, #71	; 0x47
 800c906:	4680      	mov	r8, r0
 800c908:	d108      	bne.n	800c91c <_printf_float+0x10c>
 800c90a:	1cc8      	adds	r0, r1, #3
 800c90c:	db02      	blt.n	800c914 <_printf_float+0x104>
 800c90e:	6863      	ldr	r3, [r4, #4]
 800c910:	4299      	cmp	r1, r3
 800c912:	dd41      	ble.n	800c998 <_printf_float+0x188>
 800c914:	f1a9 0902 	sub.w	r9, r9, #2
 800c918:	fa5f f989 	uxtb.w	r9, r9
 800c91c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c920:	d820      	bhi.n	800c964 <_printf_float+0x154>
 800c922:	3901      	subs	r1, #1
 800c924:	464a      	mov	r2, r9
 800c926:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c92a:	9107      	str	r1, [sp, #28]
 800c92c:	f7ff ff30 	bl	800c790 <__exponent>
 800c930:	9a08      	ldr	r2, [sp, #32]
 800c932:	9004      	str	r0, [sp, #16]
 800c934:	1813      	adds	r3, r2, r0
 800c936:	2a01      	cmp	r2, #1
 800c938:	6123      	str	r3, [r4, #16]
 800c93a:	dc02      	bgt.n	800c942 <_printf_float+0x132>
 800c93c:	6822      	ldr	r2, [r4, #0]
 800c93e:	07d2      	lsls	r2, r2, #31
 800c940:	d501      	bpl.n	800c946 <_printf_float+0x136>
 800c942:	3301      	adds	r3, #1
 800c944:	6123      	str	r3, [r4, #16]
 800c946:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d0a2      	beq.n	800c894 <_printf_float+0x84>
 800c94e:	232d      	movs	r3, #45	; 0x2d
 800c950:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c954:	e79e      	b.n	800c894 <_printf_float+0x84>
 800c956:	9904      	ldr	r1, [sp, #16]
 800c958:	2947      	cmp	r1, #71	; 0x47
 800c95a:	d1c1      	bne.n	800c8e0 <_printf_float+0xd0>
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d1bf      	bne.n	800c8e0 <_printf_float+0xd0>
 800c960:	2301      	movs	r3, #1
 800c962:	e7bc      	b.n	800c8de <_printf_float+0xce>
 800c964:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800c968:	d118      	bne.n	800c99c <_printf_float+0x18c>
 800c96a:	2900      	cmp	r1, #0
 800c96c:	6863      	ldr	r3, [r4, #4]
 800c96e:	dd0b      	ble.n	800c988 <_printf_float+0x178>
 800c970:	6121      	str	r1, [r4, #16]
 800c972:	b913      	cbnz	r3, 800c97a <_printf_float+0x16a>
 800c974:	6822      	ldr	r2, [r4, #0]
 800c976:	07d0      	lsls	r0, r2, #31
 800c978:	d502      	bpl.n	800c980 <_printf_float+0x170>
 800c97a:	3301      	adds	r3, #1
 800c97c:	440b      	add	r3, r1
 800c97e:	6123      	str	r3, [r4, #16]
 800c980:	2300      	movs	r3, #0
 800c982:	65a1      	str	r1, [r4, #88]	; 0x58
 800c984:	9304      	str	r3, [sp, #16]
 800c986:	e7de      	b.n	800c946 <_printf_float+0x136>
 800c988:	b913      	cbnz	r3, 800c990 <_printf_float+0x180>
 800c98a:	6822      	ldr	r2, [r4, #0]
 800c98c:	07d2      	lsls	r2, r2, #31
 800c98e:	d501      	bpl.n	800c994 <_printf_float+0x184>
 800c990:	3302      	adds	r3, #2
 800c992:	e7f4      	b.n	800c97e <_printf_float+0x16e>
 800c994:	2301      	movs	r3, #1
 800c996:	e7f2      	b.n	800c97e <_printf_float+0x16e>
 800c998:	f04f 0967 	mov.w	r9, #103	; 0x67
 800c99c:	9b08      	ldr	r3, [sp, #32]
 800c99e:	4299      	cmp	r1, r3
 800c9a0:	db05      	blt.n	800c9ae <_printf_float+0x19e>
 800c9a2:	6823      	ldr	r3, [r4, #0]
 800c9a4:	6121      	str	r1, [r4, #16]
 800c9a6:	07d8      	lsls	r0, r3, #31
 800c9a8:	d5ea      	bpl.n	800c980 <_printf_float+0x170>
 800c9aa:	1c4b      	adds	r3, r1, #1
 800c9ac:	e7e7      	b.n	800c97e <_printf_float+0x16e>
 800c9ae:	2900      	cmp	r1, #0
 800c9b0:	bfd4      	ite	le
 800c9b2:	f1c1 0202 	rsble	r2, r1, #2
 800c9b6:	2201      	movgt	r2, #1
 800c9b8:	4413      	add	r3, r2
 800c9ba:	e7e0      	b.n	800c97e <_printf_float+0x16e>
 800c9bc:	6823      	ldr	r3, [r4, #0]
 800c9be:	055a      	lsls	r2, r3, #21
 800c9c0:	d407      	bmi.n	800c9d2 <_printf_float+0x1c2>
 800c9c2:	6923      	ldr	r3, [r4, #16]
 800c9c4:	4642      	mov	r2, r8
 800c9c6:	4631      	mov	r1, r6
 800c9c8:	4628      	mov	r0, r5
 800c9ca:	47b8      	blx	r7
 800c9cc:	3001      	adds	r0, #1
 800c9ce:	d12a      	bne.n	800ca26 <_printf_float+0x216>
 800c9d0:	e76a      	b.n	800c8a8 <_printf_float+0x98>
 800c9d2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c9d6:	f240 80e0 	bls.w	800cb9a <_printf_float+0x38a>
 800c9da:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800c9de:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c9e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9e6:	d133      	bne.n	800ca50 <_printf_float+0x240>
 800c9e8:	4a37      	ldr	r2, [pc, #220]	; (800cac8 <_printf_float+0x2b8>)
 800c9ea:	2301      	movs	r3, #1
 800c9ec:	4631      	mov	r1, r6
 800c9ee:	4628      	mov	r0, r5
 800c9f0:	47b8      	blx	r7
 800c9f2:	3001      	adds	r0, #1
 800c9f4:	f43f af58 	beq.w	800c8a8 <_printf_float+0x98>
 800c9f8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c9fc:	429a      	cmp	r2, r3
 800c9fe:	db02      	blt.n	800ca06 <_printf_float+0x1f6>
 800ca00:	6823      	ldr	r3, [r4, #0]
 800ca02:	07d8      	lsls	r0, r3, #31
 800ca04:	d50f      	bpl.n	800ca26 <_printf_float+0x216>
 800ca06:	4653      	mov	r3, sl
 800ca08:	465a      	mov	r2, fp
 800ca0a:	4631      	mov	r1, r6
 800ca0c:	4628      	mov	r0, r5
 800ca0e:	47b8      	blx	r7
 800ca10:	3001      	adds	r0, #1
 800ca12:	f43f af49 	beq.w	800c8a8 <_printf_float+0x98>
 800ca16:	f04f 0800 	mov.w	r8, #0
 800ca1a:	f104 091a 	add.w	r9, r4, #26
 800ca1e:	9b08      	ldr	r3, [sp, #32]
 800ca20:	3b01      	subs	r3, #1
 800ca22:	4543      	cmp	r3, r8
 800ca24:	dc09      	bgt.n	800ca3a <_printf_float+0x22a>
 800ca26:	6823      	ldr	r3, [r4, #0]
 800ca28:	079b      	lsls	r3, r3, #30
 800ca2a:	f100 8106 	bmi.w	800cc3a <_printf_float+0x42a>
 800ca2e:	68e0      	ldr	r0, [r4, #12]
 800ca30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca32:	4298      	cmp	r0, r3
 800ca34:	bfb8      	it	lt
 800ca36:	4618      	movlt	r0, r3
 800ca38:	e738      	b.n	800c8ac <_printf_float+0x9c>
 800ca3a:	2301      	movs	r3, #1
 800ca3c:	464a      	mov	r2, r9
 800ca3e:	4631      	mov	r1, r6
 800ca40:	4628      	mov	r0, r5
 800ca42:	47b8      	blx	r7
 800ca44:	3001      	adds	r0, #1
 800ca46:	f43f af2f 	beq.w	800c8a8 <_printf_float+0x98>
 800ca4a:	f108 0801 	add.w	r8, r8, #1
 800ca4e:	e7e6      	b.n	800ca1e <_printf_float+0x20e>
 800ca50:	9b07      	ldr	r3, [sp, #28]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	dc3a      	bgt.n	800cacc <_printf_float+0x2bc>
 800ca56:	4a1c      	ldr	r2, [pc, #112]	; (800cac8 <_printf_float+0x2b8>)
 800ca58:	2301      	movs	r3, #1
 800ca5a:	4631      	mov	r1, r6
 800ca5c:	4628      	mov	r0, r5
 800ca5e:	47b8      	blx	r7
 800ca60:	3001      	adds	r0, #1
 800ca62:	f43f af21 	beq.w	800c8a8 <_printf_float+0x98>
 800ca66:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800ca6a:	4313      	orrs	r3, r2
 800ca6c:	d102      	bne.n	800ca74 <_printf_float+0x264>
 800ca6e:	6823      	ldr	r3, [r4, #0]
 800ca70:	07d9      	lsls	r1, r3, #31
 800ca72:	d5d8      	bpl.n	800ca26 <_printf_float+0x216>
 800ca74:	4653      	mov	r3, sl
 800ca76:	465a      	mov	r2, fp
 800ca78:	4631      	mov	r1, r6
 800ca7a:	4628      	mov	r0, r5
 800ca7c:	47b8      	blx	r7
 800ca7e:	3001      	adds	r0, #1
 800ca80:	f43f af12 	beq.w	800c8a8 <_printf_float+0x98>
 800ca84:	f04f 0900 	mov.w	r9, #0
 800ca88:	f104 0a1a 	add.w	sl, r4, #26
 800ca8c:	9b07      	ldr	r3, [sp, #28]
 800ca8e:	425b      	negs	r3, r3
 800ca90:	454b      	cmp	r3, r9
 800ca92:	dc01      	bgt.n	800ca98 <_printf_float+0x288>
 800ca94:	9b08      	ldr	r3, [sp, #32]
 800ca96:	e795      	b.n	800c9c4 <_printf_float+0x1b4>
 800ca98:	2301      	movs	r3, #1
 800ca9a:	4652      	mov	r2, sl
 800ca9c:	4631      	mov	r1, r6
 800ca9e:	4628      	mov	r0, r5
 800caa0:	47b8      	blx	r7
 800caa2:	3001      	adds	r0, #1
 800caa4:	f43f af00 	beq.w	800c8a8 <_printf_float+0x98>
 800caa8:	f109 0901 	add.w	r9, r9, #1
 800caac:	e7ee      	b.n	800ca8c <_printf_float+0x27c>
 800caae:	bf00      	nop
 800cab0:	ffffffff 	.word	0xffffffff
 800cab4:	7fefffff 	.word	0x7fefffff
 800cab8:	0800f208 	.word	0x0800f208
 800cabc:	0800f20c 	.word	0x0800f20c
 800cac0:	0800f210 	.word	0x0800f210
 800cac4:	0800f214 	.word	0x0800f214
 800cac8:	0800f218 	.word	0x0800f218
 800cacc:	9a08      	ldr	r2, [sp, #32]
 800cace:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cad0:	429a      	cmp	r2, r3
 800cad2:	bfa8      	it	ge
 800cad4:	461a      	movge	r2, r3
 800cad6:	2a00      	cmp	r2, #0
 800cad8:	4691      	mov	r9, r2
 800cada:	dc38      	bgt.n	800cb4e <_printf_float+0x33e>
 800cadc:	2300      	movs	r3, #0
 800cade:	9305      	str	r3, [sp, #20]
 800cae0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cae4:	f104 021a 	add.w	r2, r4, #26
 800cae8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800caea:	9905      	ldr	r1, [sp, #20]
 800caec:	9304      	str	r3, [sp, #16]
 800caee:	eba3 0309 	sub.w	r3, r3, r9
 800caf2:	428b      	cmp	r3, r1
 800caf4:	dc33      	bgt.n	800cb5e <_printf_float+0x34e>
 800caf6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800cafa:	429a      	cmp	r2, r3
 800cafc:	db3c      	blt.n	800cb78 <_printf_float+0x368>
 800cafe:	6823      	ldr	r3, [r4, #0]
 800cb00:	07da      	lsls	r2, r3, #31
 800cb02:	d439      	bmi.n	800cb78 <_printf_float+0x368>
 800cb04:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800cb08:	eba2 0903 	sub.w	r9, r2, r3
 800cb0c:	9b04      	ldr	r3, [sp, #16]
 800cb0e:	1ad2      	subs	r2, r2, r3
 800cb10:	4591      	cmp	r9, r2
 800cb12:	bfa8      	it	ge
 800cb14:	4691      	movge	r9, r2
 800cb16:	f1b9 0f00 	cmp.w	r9, #0
 800cb1a:	dc35      	bgt.n	800cb88 <_printf_float+0x378>
 800cb1c:	f04f 0800 	mov.w	r8, #0
 800cb20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cb24:	f104 0a1a 	add.w	sl, r4, #26
 800cb28:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800cb2c:	1a9b      	subs	r3, r3, r2
 800cb2e:	eba3 0309 	sub.w	r3, r3, r9
 800cb32:	4543      	cmp	r3, r8
 800cb34:	f77f af77 	ble.w	800ca26 <_printf_float+0x216>
 800cb38:	2301      	movs	r3, #1
 800cb3a:	4652      	mov	r2, sl
 800cb3c:	4631      	mov	r1, r6
 800cb3e:	4628      	mov	r0, r5
 800cb40:	47b8      	blx	r7
 800cb42:	3001      	adds	r0, #1
 800cb44:	f43f aeb0 	beq.w	800c8a8 <_printf_float+0x98>
 800cb48:	f108 0801 	add.w	r8, r8, #1
 800cb4c:	e7ec      	b.n	800cb28 <_printf_float+0x318>
 800cb4e:	4613      	mov	r3, r2
 800cb50:	4631      	mov	r1, r6
 800cb52:	4642      	mov	r2, r8
 800cb54:	4628      	mov	r0, r5
 800cb56:	47b8      	blx	r7
 800cb58:	3001      	adds	r0, #1
 800cb5a:	d1bf      	bne.n	800cadc <_printf_float+0x2cc>
 800cb5c:	e6a4      	b.n	800c8a8 <_printf_float+0x98>
 800cb5e:	2301      	movs	r3, #1
 800cb60:	4631      	mov	r1, r6
 800cb62:	4628      	mov	r0, r5
 800cb64:	9204      	str	r2, [sp, #16]
 800cb66:	47b8      	blx	r7
 800cb68:	3001      	adds	r0, #1
 800cb6a:	f43f ae9d 	beq.w	800c8a8 <_printf_float+0x98>
 800cb6e:	9b05      	ldr	r3, [sp, #20]
 800cb70:	9a04      	ldr	r2, [sp, #16]
 800cb72:	3301      	adds	r3, #1
 800cb74:	9305      	str	r3, [sp, #20]
 800cb76:	e7b7      	b.n	800cae8 <_printf_float+0x2d8>
 800cb78:	4653      	mov	r3, sl
 800cb7a:	465a      	mov	r2, fp
 800cb7c:	4631      	mov	r1, r6
 800cb7e:	4628      	mov	r0, r5
 800cb80:	47b8      	blx	r7
 800cb82:	3001      	adds	r0, #1
 800cb84:	d1be      	bne.n	800cb04 <_printf_float+0x2f4>
 800cb86:	e68f      	b.n	800c8a8 <_printf_float+0x98>
 800cb88:	9a04      	ldr	r2, [sp, #16]
 800cb8a:	464b      	mov	r3, r9
 800cb8c:	4442      	add	r2, r8
 800cb8e:	4631      	mov	r1, r6
 800cb90:	4628      	mov	r0, r5
 800cb92:	47b8      	blx	r7
 800cb94:	3001      	adds	r0, #1
 800cb96:	d1c1      	bne.n	800cb1c <_printf_float+0x30c>
 800cb98:	e686      	b.n	800c8a8 <_printf_float+0x98>
 800cb9a:	9a08      	ldr	r2, [sp, #32]
 800cb9c:	2a01      	cmp	r2, #1
 800cb9e:	dc01      	bgt.n	800cba4 <_printf_float+0x394>
 800cba0:	07db      	lsls	r3, r3, #31
 800cba2:	d537      	bpl.n	800cc14 <_printf_float+0x404>
 800cba4:	2301      	movs	r3, #1
 800cba6:	4642      	mov	r2, r8
 800cba8:	4631      	mov	r1, r6
 800cbaa:	4628      	mov	r0, r5
 800cbac:	47b8      	blx	r7
 800cbae:	3001      	adds	r0, #1
 800cbb0:	f43f ae7a 	beq.w	800c8a8 <_printf_float+0x98>
 800cbb4:	4653      	mov	r3, sl
 800cbb6:	465a      	mov	r2, fp
 800cbb8:	4631      	mov	r1, r6
 800cbba:	4628      	mov	r0, r5
 800cbbc:	47b8      	blx	r7
 800cbbe:	3001      	adds	r0, #1
 800cbc0:	f43f ae72 	beq.w	800c8a8 <_printf_float+0x98>
 800cbc4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800cbc8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cbcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbd0:	9b08      	ldr	r3, [sp, #32]
 800cbd2:	d01a      	beq.n	800cc0a <_printf_float+0x3fa>
 800cbd4:	3b01      	subs	r3, #1
 800cbd6:	f108 0201 	add.w	r2, r8, #1
 800cbda:	4631      	mov	r1, r6
 800cbdc:	4628      	mov	r0, r5
 800cbde:	47b8      	blx	r7
 800cbe0:	3001      	adds	r0, #1
 800cbe2:	d10e      	bne.n	800cc02 <_printf_float+0x3f2>
 800cbe4:	e660      	b.n	800c8a8 <_printf_float+0x98>
 800cbe6:	2301      	movs	r3, #1
 800cbe8:	464a      	mov	r2, r9
 800cbea:	4631      	mov	r1, r6
 800cbec:	4628      	mov	r0, r5
 800cbee:	47b8      	blx	r7
 800cbf0:	3001      	adds	r0, #1
 800cbf2:	f43f ae59 	beq.w	800c8a8 <_printf_float+0x98>
 800cbf6:	f108 0801 	add.w	r8, r8, #1
 800cbfa:	9b08      	ldr	r3, [sp, #32]
 800cbfc:	3b01      	subs	r3, #1
 800cbfe:	4543      	cmp	r3, r8
 800cc00:	dcf1      	bgt.n	800cbe6 <_printf_float+0x3d6>
 800cc02:	9b04      	ldr	r3, [sp, #16]
 800cc04:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cc08:	e6dd      	b.n	800c9c6 <_printf_float+0x1b6>
 800cc0a:	f04f 0800 	mov.w	r8, #0
 800cc0e:	f104 091a 	add.w	r9, r4, #26
 800cc12:	e7f2      	b.n	800cbfa <_printf_float+0x3ea>
 800cc14:	2301      	movs	r3, #1
 800cc16:	4642      	mov	r2, r8
 800cc18:	e7df      	b.n	800cbda <_printf_float+0x3ca>
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	464a      	mov	r2, r9
 800cc1e:	4631      	mov	r1, r6
 800cc20:	4628      	mov	r0, r5
 800cc22:	47b8      	blx	r7
 800cc24:	3001      	adds	r0, #1
 800cc26:	f43f ae3f 	beq.w	800c8a8 <_printf_float+0x98>
 800cc2a:	f108 0801 	add.w	r8, r8, #1
 800cc2e:	68e3      	ldr	r3, [r4, #12]
 800cc30:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cc32:	1a5b      	subs	r3, r3, r1
 800cc34:	4543      	cmp	r3, r8
 800cc36:	dcf0      	bgt.n	800cc1a <_printf_float+0x40a>
 800cc38:	e6f9      	b.n	800ca2e <_printf_float+0x21e>
 800cc3a:	f04f 0800 	mov.w	r8, #0
 800cc3e:	f104 0919 	add.w	r9, r4, #25
 800cc42:	e7f4      	b.n	800cc2e <_printf_float+0x41e>

0800cc44 <_printf_common>:
 800cc44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc48:	4616      	mov	r6, r2
 800cc4a:	4699      	mov	r9, r3
 800cc4c:	688a      	ldr	r2, [r1, #8]
 800cc4e:	690b      	ldr	r3, [r1, #16]
 800cc50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cc54:	4293      	cmp	r3, r2
 800cc56:	bfb8      	it	lt
 800cc58:	4613      	movlt	r3, r2
 800cc5a:	6033      	str	r3, [r6, #0]
 800cc5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cc60:	4607      	mov	r7, r0
 800cc62:	460c      	mov	r4, r1
 800cc64:	b10a      	cbz	r2, 800cc6a <_printf_common+0x26>
 800cc66:	3301      	adds	r3, #1
 800cc68:	6033      	str	r3, [r6, #0]
 800cc6a:	6823      	ldr	r3, [r4, #0]
 800cc6c:	0699      	lsls	r1, r3, #26
 800cc6e:	bf42      	ittt	mi
 800cc70:	6833      	ldrmi	r3, [r6, #0]
 800cc72:	3302      	addmi	r3, #2
 800cc74:	6033      	strmi	r3, [r6, #0]
 800cc76:	6825      	ldr	r5, [r4, #0]
 800cc78:	f015 0506 	ands.w	r5, r5, #6
 800cc7c:	d106      	bne.n	800cc8c <_printf_common+0x48>
 800cc7e:	f104 0a19 	add.w	sl, r4, #25
 800cc82:	68e3      	ldr	r3, [r4, #12]
 800cc84:	6832      	ldr	r2, [r6, #0]
 800cc86:	1a9b      	subs	r3, r3, r2
 800cc88:	42ab      	cmp	r3, r5
 800cc8a:	dc26      	bgt.n	800ccda <_printf_common+0x96>
 800cc8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cc90:	1e13      	subs	r3, r2, #0
 800cc92:	6822      	ldr	r2, [r4, #0]
 800cc94:	bf18      	it	ne
 800cc96:	2301      	movne	r3, #1
 800cc98:	0692      	lsls	r2, r2, #26
 800cc9a:	d42b      	bmi.n	800ccf4 <_printf_common+0xb0>
 800cc9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cca0:	4649      	mov	r1, r9
 800cca2:	4638      	mov	r0, r7
 800cca4:	47c0      	blx	r8
 800cca6:	3001      	adds	r0, #1
 800cca8:	d01e      	beq.n	800cce8 <_printf_common+0xa4>
 800ccaa:	6823      	ldr	r3, [r4, #0]
 800ccac:	6922      	ldr	r2, [r4, #16]
 800ccae:	f003 0306 	and.w	r3, r3, #6
 800ccb2:	2b04      	cmp	r3, #4
 800ccb4:	bf02      	ittt	eq
 800ccb6:	68e5      	ldreq	r5, [r4, #12]
 800ccb8:	6833      	ldreq	r3, [r6, #0]
 800ccba:	1aed      	subeq	r5, r5, r3
 800ccbc:	68a3      	ldr	r3, [r4, #8]
 800ccbe:	bf0c      	ite	eq
 800ccc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ccc4:	2500      	movne	r5, #0
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	bfc4      	itt	gt
 800ccca:	1a9b      	subgt	r3, r3, r2
 800cccc:	18ed      	addgt	r5, r5, r3
 800ccce:	2600      	movs	r6, #0
 800ccd0:	341a      	adds	r4, #26
 800ccd2:	42b5      	cmp	r5, r6
 800ccd4:	d11a      	bne.n	800cd0c <_printf_common+0xc8>
 800ccd6:	2000      	movs	r0, #0
 800ccd8:	e008      	b.n	800ccec <_printf_common+0xa8>
 800ccda:	2301      	movs	r3, #1
 800ccdc:	4652      	mov	r2, sl
 800ccde:	4649      	mov	r1, r9
 800cce0:	4638      	mov	r0, r7
 800cce2:	47c0      	blx	r8
 800cce4:	3001      	adds	r0, #1
 800cce6:	d103      	bne.n	800ccf0 <_printf_common+0xac>
 800cce8:	f04f 30ff 	mov.w	r0, #4294967295
 800ccec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccf0:	3501      	adds	r5, #1
 800ccf2:	e7c6      	b.n	800cc82 <_printf_common+0x3e>
 800ccf4:	18e1      	adds	r1, r4, r3
 800ccf6:	1c5a      	adds	r2, r3, #1
 800ccf8:	2030      	movs	r0, #48	; 0x30
 800ccfa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ccfe:	4422      	add	r2, r4
 800cd00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cd04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cd08:	3302      	adds	r3, #2
 800cd0a:	e7c7      	b.n	800cc9c <_printf_common+0x58>
 800cd0c:	2301      	movs	r3, #1
 800cd0e:	4622      	mov	r2, r4
 800cd10:	4649      	mov	r1, r9
 800cd12:	4638      	mov	r0, r7
 800cd14:	47c0      	blx	r8
 800cd16:	3001      	adds	r0, #1
 800cd18:	d0e6      	beq.n	800cce8 <_printf_common+0xa4>
 800cd1a:	3601      	adds	r6, #1
 800cd1c:	e7d9      	b.n	800ccd2 <_printf_common+0x8e>
	...

0800cd20 <_printf_i>:
 800cd20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cd24:	7e0f      	ldrb	r7, [r1, #24]
 800cd26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cd28:	2f78      	cmp	r7, #120	; 0x78
 800cd2a:	4691      	mov	r9, r2
 800cd2c:	4680      	mov	r8, r0
 800cd2e:	460c      	mov	r4, r1
 800cd30:	469a      	mov	sl, r3
 800cd32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cd36:	d807      	bhi.n	800cd48 <_printf_i+0x28>
 800cd38:	2f62      	cmp	r7, #98	; 0x62
 800cd3a:	d80a      	bhi.n	800cd52 <_printf_i+0x32>
 800cd3c:	2f00      	cmp	r7, #0
 800cd3e:	f000 80d4 	beq.w	800ceea <_printf_i+0x1ca>
 800cd42:	2f58      	cmp	r7, #88	; 0x58
 800cd44:	f000 80c0 	beq.w	800cec8 <_printf_i+0x1a8>
 800cd48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cd4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cd50:	e03a      	b.n	800cdc8 <_printf_i+0xa8>
 800cd52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cd56:	2b15      	cmp	r3, #21
 800cd58:	d8f6      	bhi.n	800cd48 <_printf_i+0x28>
 800cd5a:	a101      	add	r1, pc, #4	; (adr r1, 800cd60 <_printf_i+0x40>)
 800cd5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cd60:	0800cdb9 	.word	0x0800cdb9
 800cd64:	0800cdcd 	.word	0x0800cdcd
 800cd68:	0800cd49 	.word	0x0800cd49
 800cd6c:	0800cd49 	.word	0x0800cd49
 800cd70:	0800cd49 	.word	0x0800cd49
 800cd74:	0800cd49 	.word	0x0800cd49
 800cd78:	0800cdcd 	.word	0x0800cdcd
 800cd7c:	0800cd49 	.word	0x0800cd49
 800cd80:	0800cd49 	.word	0x0800cd49
 800cd84:	0800cd49 	.word	0x0800cd49
 800cd88:	0800cd49 	.word	0x0800cd49
 800cd8c:	0800ced1 	.word	0x0800ced1
 800cd90:	0800cdf9 	.word	0x0800cdf9
 800cd94:	0800ce8b 	.word	0x0800ce8b
 800cd98:	0800cd49 	.word	0x0800cd49
 800cd9c:	0800cd49 	.word	0x0800cd49
 800cda0:	0800cef3 	.word	0x0800cef3
 800cda4:	0800cd49 	.word	0x0800cd49
 800cda8:	0800cdf9 	.word	0x0800cdf9
 800cdac:	0800cd49 	.word	0x0800cd49
 800cdb0:	0800cd49 	.word	0x0800cd49
 800cdb4:	0800ce93 	.word	0x0800ce93
 800cdb8:	682b      	ldr	r3, [r5, #0]
 800cdba:	1d1a      	adds	r2, r3, #4
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	602a      	str	r2, [r5, #0]
 800cdc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cdc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cdc8:	2301      	movs	r3, #1
 800cdca:	e09f      	b.n	800cf0c <_printf_i+0x1ec>
 800cdcc:	6820      	ldr	r0, [r4, #0]
 800cdce:	682b      	ldr	r3, [r5, #0]
 800cdd0:	0607      	lsls	r7, r0, #24
 800cdd2:	f103 0104 	add.w	r1, r3, #4
 800cdd6:	6029      	str	r1, [r5, #0]
 800cdd8:	d501      	bpl.n	800cdde <_printf_i+0xbe>
 800cdda:	681e      	ldr	r6, [r3, #0]
 800cddc:	e003      	b.n	800cde6 <_printf_i+0xc6>
 800cdde:	0646      	lsls	r6, r0, #25
 800cde0:	d5fb      	bpl.n	800cdda <_printf_i+0xba>
 800cde2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cde6:	2e00      	cmp	r6, #0
 800cde8:	da03      	bge.n	800cdf2 <_printf_i+0xd2>
 800cdea:	232d      	movs	r3, #45	; 0x2d
 800cdec:	4276      	negs	r6, r6
 800cdee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cdf2:	485a      	ldr	r0, [pc, #360]	; (800cf5c <_printf_i+0x23c>)
 800cdf4:	230a      	movs	r3, #10
 800cdf6:	e012      	b.n	800ce1e <_printf_i+0xfe>
 800cdf8:	682b      	ldr	r3, [r5, #0]
 800cdfa:	6820      	ldr	r0, [r4, #0]
 800cdfc:	1d19      	adds	r1, r3, #4
 800cdfe:	6029      	str	r1, [r5, #0]
 800ce00:	0605      	lsls	r5, r0, #24
 800ce02:	d501      	bpl.n	800ce08 <_printf_i+0xe8>
 800ce04:	681e      	ldr	r6, [r3, #0]
 800ce06:	e002      	b.n	800ce0e <_printf_i+0xee>
 800ce08:	0641      	lsls	r1, r0, #25
 800ce0a:	d5fb      	bpl.n	800ce04 <_printf_i+0xe4>
 800ce0c:	881e      	ldrh	r6, [r3, #0]
 800ce0e:	4853      	ldr	r0, [pc, #332]	; (800cf5c <_printf_i+0x23c>)
 800ce10:	2f6f      	cmp	r7, #111	; 0x6f
 800ce12:	bf0c      	ite	eq
 800ce14:	2308      	moveq	r3, #8
 800ce16:	230a      	movne	r3, #10
 800ce18:	2100      	movs	r1, #0
 800ce1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ce1e:	6865      	ldr	r5, [r4, #4]
 800ce20:	60a5      	str	r5, [r4, #8]
 800ce22:	2d00      	cmp	r5, #0
 800ce24:	bfa2      	ittt	ge
 800ce26:	6821      	ldrge	r1, [r4, #0]
 800ce28:	f021 0104 	bicge.w	r1, r1, #4
 800ce2c:	6021      	strge	r1, [r4, #0]
 800ce2e:	b90e      	cbnz	r6, 800ce34 <_printf_i+0x114>
 800ce30:	2d00      	cmp	r5, #0
 800ce32:	d04b      	beq.n	800cecc <_printf_i+0x1ac>
 800ce34:	4615      	mov	r5, r2
 800ce36:	fbb6 f1f3 	udiv	r1, r6, r3
 800ce3a:	fb03 6711 	mls	r7, r3, r1, r6
 800ce3e:	5dc7      	ldrb	r7, [r0, r7]
 800ce40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ce44:	4637      	mov	r7, r6
 800ce46:	42bb      	cmp	r3, r7
 800ce48:	460e      	mov	r6, r1
 800ce4a:	d9f4      	bls.n	800ce36 <_printf_i+0x116>
 800ce4c:	2b08      	cmp	r3, #8
 800ce4e:	d10b      	bne.n	800ce68 <_printf_i+0x148>
 800ce50:	6823      	ldr	r3, [r4, #0]
 800ce52:	07de      	lsls	r6, r3, #31
 800ce54:	d508      	bpl.n	800ce68 <_printf_i+0x148>
 800ce56:	6923      	ldr	r3, [r4, #16]
 800ce58:	6861      	ldr	r1, [r4, #4]
 800ce5a:	4299      	cmp	r1, r3
 800ce5c:	bfde      	ittt	le
 800ce5e:	2330      	movle	r3, #48	; 0x30
 800ce60:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ce64:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ce68:	1b52      	subs	r2, r2, r5
 800ce6a:	6122      	str	r2, [r4, #16]
 800ce6c:	f8cd a000 	str.w	sl, [sp]
 800ce70:	464b      	mov	r3, r9
 800ce72:	aa03      	add	r2, sp, #12
 800ce74:	4621      	mov	r1, r4
 800ce76:	4640      	mov	r0, r8
 800ce78:	f7ff fee4 	bl	800cc44 <_printf_common>
 800ce7c:	3001      	adds	r0, #1
 800ce7e:	d14a      	bne.n	800cf16 <_printf_i+0x1f6>
 800ce80:	f04f 30ff 	mov.w	r0, #4294967295
 800ce84:	b004      	add	sp, #16
 800ce86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce8a:	6823      	ldr	r3, [r4, #0]
 800ce8c:	f043 0320 	orr.w	r3, r3, #32
 800ce90:	6023      	str	r3, [r4, #0]
 800ce92:	4833      	ldr	r0, [pc, #204]	; (800cf60 <_printf_i+0x240>)
 800ce94:	2778      	movs	r7, #120	; 0x78
 800ce96:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ce9a:	6823      	ldr	r3, [r4, #0]
 800ce9c:	6829      	ldr	r1, [r5, #0]
 800ce9e:	061f      	lsls	r7, r3, #24
 800cea0:	f851 6b04 	ldr.w	r6, [r1], #4
 800cea4:	d402      	bmi.n	800ceac <_printf_i+0x18c>
 800cea6:	065f      	lsls	r7, r3, #25
 800cea8:	bf48      	it	mi
 800ceaa:	b2b6      	uxthmi	r6, r6
 800ceac:	07df      	lsls	r7, r3, #31
 800ceae:	bf48      	it	mi
 800ceb0:	f043 0320 	orrmi.w	r3, r3, #32
 800ceb4:	6029      	str	r1, [r5, #0]
 800ceb6:	bf48      	it	mi
 800ceb8:	6023      	strmi	r3, [r4, #0]
 800ceba:	b91e      	cbnz	r6, 800cec4 <_printf_i+0x1a4>
 800cebc:	6823      	ldr	r3, [r4, #0]
 800cebe:	f023 0320 	bic.w	r3, r3, #32
 800cec2:	6023      	str	r3, [r4, #0]
 800cec4:	2310      	movs	r3, #16
 800cec6:	e7a7      	b.n	800ce18 <_printf_i+0xf8>
 800cec8:	4824      	ldr	r0, [pc, #144]	; (800cf5c <_printf_i+0x23c>)
 800ceca:	e7e4      	b.n	800ce96 <_printf_i+0x176>
 800cecc:	4615      	mov	r5, r2
 800cece:	e7bd      	b.n	800ce4c <_printf_i+0x12c>
 800ced0:	682b      	ldr	r3, [r5, #0]
 800ced2:	6826      	ldr	r6, [r4, #0]
 800ced4:	6961      	ldr	r1, [r4, #20]
 800ced6:	1d18      	adds	r0, r3, #4
 800ced8:	6028      	str	r0, [r5, #0]
 800ceda:	0635      	lsls	r5, r6, #24
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	d501      	bpl.n	800cee4 <_printf_i+0x1c4>
 800cee0:	6019      	str	r1, [r3, #0]
 800cee2:	e002      	b.n	800ceea <_printf_i+0x1ca>
 800cee4:	0670      	lsls	r0, r6, #25
 800cee6:	d5fb      	bpl.n	800cee0 <_printf_i+0x1c0>
 800cee8:	8019      	strh	r1, [r3, #0]
 800ceea:	2300      	movs	r3, #0
 800ceec:	6123      	str	r3, [r4, #16]
 800ceee:	4615      	mov	r5, r2
 800cef0:	e7bc      	b.n	800ce6c <_printf_i+0x14c>
 800cef2:	682b      	ldr	r3, [r5, #0]
 800cef4:	1d1a      	adds	r2, r3, #4
 800cef6:	602a      	str	r2, [r5, #0]
 800cef8:	681d      	ldr	r5, [r3, #0]
 800cefa:	6862      	ldr	r2, [r4, #4]
 800cefc:	2100      	movs	r1, #0
 800cefe:	4628      	mov	r0, r5
 800cf00:	f7f3 f9ee 	bl	80002e0 <memchr>
 800cf04:	b108      	cbz	r0, 800cf0a <_printf_i+0x1ea>
 800cf06:	1b40      	subs	r0, r0, r5
 800cf08:	6060      	str	r0, [r4, #4]
 800cf0a:	6863      	ldr	r3, [r4, #4]
 800cf0c:	6123      	str	r3, [r4, #16]
 800cf0e:	2300      	movs	r3, #0
 800cf10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf14:	e7aa      	b.n	800ce6c <_printf_i+0x14c>
 800cf16:	6923      	ldr	r3, [r4, #16]
 800cf18:	462a      	mov	r2, r5
 800cf1a:	4649      	mov	r1, r9
 800cf1c:	4640      	mov	r0, r8
 800cf1e:	47d0      	blx	sl
 800cf20:	3001      	adds	r0, #1
 800cf22:	d0ad      	beq.n	800ce80 <_printf_i+0x160>
 800cf24:	6823      	ldr	r3, [r4, #0]
 800cf26:	079b      	lsls	r3, r3, #30
 800cf28:	d413      	bmi.n	800cf52 <_printf_i+0x232>
 800cf2a:	68e0      	ldr	r0, [r4, #12]
 800cf2c:	9b03      	ldr	r3, [sp, #12]
 800cf2e:	4298      	cmp	r0, r3
 800cf30:	bfb8      	it	lt
 800cf32:	4618      	movlt	r0, r3
 800cf34:	e7a6      	b.n	800ce84 <_printf_i+0x164>
 800cf36:	2301      	movs	r3, #1
 800cf38:	4632      	mov	r2, r6
 800cf3a:	4649      	mov	r1, r9
 800cf3c:	4640      	mov	r0, r8
 800cf3e:	47d0      	blx	sl
 800cf40:	3001      	adds	r0, #1
 800cf42:	d09d      	beq.n	800ce80 <_printf_i+0x160>
 800cf44:	3501      	adds	r5, #1
 800cf46:	68e3      	ldr	r3, [r4, #12]
 800cf48:	9903      	ldr	r1, [sp, #12]
 800cf4a:	1a5b      	subs	r3, r3, r1
 800cf4c:	42ab      	cmp	r3, r5
 800cf4e:	dcf2      	bgt.n	800cf36 <_printf_i+0x216>
 800cf50:	e7eb      	b.n	800cf2a <_printf_i+0x20a>
 800cf52:	2500      	movs	r5, #0
 800cf54:	f104 0619 	add.w	r6, r4, #25
 800cf58:	e7f5      	b.n	800cf46 <_printf_i+0x226>
 800cf5a:	bf00      	nop
 800cf5c:	0800f21a 	.word	0x0800f21a
 800cf60:	0800f22b 	.word	0x0800f22b

0800cf64 <std>:
 800cf64:	2300      	movs	r3, #0
 800cf66:	b510      	push	{r4, lr}
 800cf68:	4604      	mov	r4, r0
 800cf6a:	e9c0 3300 	strd	r3, r3, [r0]
 800cf6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cf72:	6083      	str	r3, [r0, #8]
 800cf74:	8181      	strh	r1, [r0, #12]
 800cf76:	6643      	str	r3, [r0, #100]	; 0x64
 800cf78:	81c2      	strh	r2, [r0, #14]
 800cf7a:	6183      	str	r3, [r0, #24]
 800cf7c:	4619      	mov	r1, r3
 800cf7e:	2208      	movs	r2, #8
 800cf80:	305c      	adds	r0, #92	; 0x5c
 800cf82:	f000 f914 	bl	800d1ae <memset>
 800cf86:	4b0d      	ldr	r3, [pc, #52]	; (800cfbc <std+0x58>)
 800cf88:	6263      	str	r3, [r4, #36]	; 0x24
 800cf8a:	4b0d      	ldr	r3, [pc, #52]	; (800cfc0 <std+0x5c>)
 800cf8c:	62a3      	str	r3, [r4, #40]	; 0x28
 800cf8e:	4b0d      	ldr	r3, [pc, #52]	; (800cfc4 <std+0x60>)
 800cf90:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cf92:	4b0d      	ldr	r3, [pc, #52]	; (800cfc8 <std+0x64>)
 800cf94:	6323      	str	r3, [r4, #48]	; 0x30
 800cf96:	4b0d      	ldr	r3, [pc, #52]	; (800cfcc <std+0x68>)
 800cf98:	6224      	str	r4, [r4, #32]
 800cf9a:	429c      	cmp	r4, r3
 800cf9c:	d006      	beq.n	800cfac <std+0x48>
 800cf9e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800cfa2:	4294      	cmp	r4, r2
 800cfa4:	d002      	beq.n	800cfac <std+0x48>
 800cfa6:	33d0      	adds	r3, #208	; 0xd0
 800cfa8:	429c      	cmp	r4, r3
 800cfaa:	d105      	bne.n	800cfb8 <std+0x54>
 800cfac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cfb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfb4:	f000 b988 	b.w	800d2c8 <__retarget_lock_init_recursive>
 800cfb8:	bd10      	pop	{r4, pc}
 800cfba:	bf00      	nop
 800cfbc:	0800d129 	.word	0x0800d129
 800cfc0:	0800d14b 	.word	0x0800d14b
 800cfc4:	0800d183 	.word	0x0800d183
 800cfc8:	0800d1a7 	.word	0x0800d1a7
 800cfcc:	24010d70 	.word	0x24010d70

0800cfd0 <stdio_exit_handler>:
 800cfd0:	4a02      	ldr	r2, [pc, #8]	; (800cfdc <stdio_exit_handler+0xc>)
 800cfd2:	4903      	ldr	r1, [pc, #12]	; (800cfe0 <stdio_exit_handler+0x10>)
 800cfd4:	4803      	ldr	r0, [pc, #12]	; (800cfe4 <stdio_exit_handler+0x14>)
 800cfd6:	f000 b869 	b.w	800d0ac <_fwalk_sglue>
 800cfda:	bf00      	nop
 800cfdc:	24000144 	.word	0x24000144
 800cfe0:	0800ea35 	.word	0x0800ea35
 800cfe4:	24000150 	.word	0x24000150

0800cfe8 <cleanup_stdio>:
 800cfe8:	6841      	ldr	r1, [r0, #4]
 800cfea:	4b0c      	ldr	r3, [pc, #48]	; (800d01c <cleanup_stdio+0x34>)
 800cfec:	4299      	cmp	r1, r3
 800cfee:	b510      	push	{r4, lr}
 800cff0:	4604      	mov	r4, r0
 800cff2:	d001      	beq.n	800cff8 <cleanup_stdio+0x10>
 800cff4:	f001 fd1e 	bl	800ea34 <_fflush_r>
 800cff8:	68a1      	ldr	r1, [r4, #8]
 800cffa:	4b09      	ldr	r3, [pc, #36]	; (800d020 <cleanup_stdio+0x38>)
 800cffc:	4299      	cmp	r1, r3
 800cffe:	d002      	beq.n	800d006 <cleanup_stdio+0x1e>
 800d000:	4620      	mov	r0, r4
 800d002:	f001 fd17 	bl	800ea34 <_fflush_r>
 800d006:	68e1      	ldr	r1, [r4, #12]
 800d008:	4b06      	ldr	r3, [pc, #24]	; (800d024 <cleanup_stdio+0x3c>)
 800d00a:	4299      	cmp	r1, r3
 800d00c:	d004      	beq.n	800d018 <cleanup_stdio+0x30>
 800d00e:	4620      	mov	r0, r4
 800d010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d014:	f001 bd0e 	b.w	800ea34 <_fflush_r>
 800d018:	bd10      	pop	{r4, pc}
 800d01a:	bf00      	nop
 800d01c:	24010d70 	.word	0x24010d70
 800d020:	24010dd8 	.word	0x24010dd8
 800d024:	24010e40 	.word	0x24010e40

0800d028 <global_stdio_init.part.0>:
 800d028:	b510      	push	{r4, lr}
 800d02a:	4b0b      	ldr	r3, [pc, #44]	; (800d058 <global_stdio_init.part.0+0x30>)
 800d02c:	4c0b      	ldr	r4, [pc, #44]	; (800d05c <global_stdio_init.part.0+0x34>)
 800d02e:	4a0c      	ldr	r2, [pc, #48]	; (800d060 <global_stdio_init.part.0+0x38>)
 800d030:	601a      	str	r2, [r3, #0]
 800d032:	4620      	mov	r0, r4
 800d034:	2200      	movs	r2, #0
 800d036:	2104      	movs	r1, #4
 800d038:	f7ff ff94 	bl	800cf64 <std>
 800d03c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d040:	2201      	movs	r2, #1
 800d042:	2109      	movs	r1, #9
 800d044:	f7ff ff8e 	bl	800cf64 <std>
 800d048:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d04c:	2202      	movs	r2, #2
 800d04e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d052:	2112      	movs	r1, #18
 800d054:	f7ff bf86 	b.w	800cf64 <std>
 800d058:	24010ea8 	.word	0x24010ea8
 800d05c:	24010d70 	.word	0x24010d70
 800d060:	0800cfd1 	.word	0x0800cfd1

0800d064 <__sfp_lock_acquire>:
 800d064:	4801      	ldr	r0, [pc, #4]	; (800d06c <__sfp_lock_acquire+0x8>)
 800d066:	f000 b930 	b.w	800d2ca <__retarget_lock_acquire_recursive>
 800d06a:	bf00      	nop
 800d06c:	24010eb1 	.word	0x24010eb1

0800d070 <__sfp_lock_release>:
 800d070:	4801      	ldr	r0, [pc, #4]	; (800d078 <__sfp_lock_release+0x8>)
 800d072:	f000 b92b 	b.w	800d2cc <__retarget_lock_release_recursive>
 800d076:	bf00      	nop
 800d078:	24010eb1 	.word	0x24010eb1

0800d07c <__sinit>:
 800d07c:	b510      	push	{r4, lr}
 800d07e:	4604      	mov	r4, r0
 800d080:	f7ff fff0 	bl	800d064 <__sfp_lock_acquire>
 800d084:	6a23      	ldr	r3, [r4, #32]
 800d086:	b11b      	cbz	r3, 800d090 <__sinit+0x14>
 800d088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d08c:	f7ff bff0 	b.w	800d070 <__sfp_lock_release>
 800d090:	4b04      	ldr	r3, [pc, #16]	; (800d0a4 <__sinit+0x28>)
 800d092:	6223      	str	r3, [r4, #32]
 800d094:	4b04      	ldr	r3, [pc, #16]	; (800d0a8 <__sinit+0x2c>)
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d1f5      	bne.n	800d088 <__sinit+0xc>
 800d09c:	f7ff ffc4 	bl	800d028 <global_stdio_init.part.0>
 800d0a0:	e7f2      	b.n	800d088 <__sinit+0xc>
 800d0a2:	bf00      	nop
 800d0a4:	0800cfe9 	.word	0x0800cfe9
 800d0a8:	24010ea8 	.word	0x24010ea8

0800d0ac <_fwalk_sglue>:
 800d0ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0b0:	4607      	mov	r7, r0
 800d0b2:	4688      	mov	r8, r1
 800d0b4:	4614      	mov	r4, r2
 800d0b6:	2600      	movs	r6, #0
 800d0b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d0bc:	f1b9 0901 	subs.w	r9, r9, #1
 800d0c0:	d505      	bpl.n	800d0ce <_fwalk_sglue+0x22>
 800d0c2:	6824      	ldr	r4, [r4, #0]
 800d0c4:	2c00      	cmp	r4, #0
 800d0c6:	d1f7      	bne.n	800d0b8 <_fwalk_sglue+0xc>
 800d0c8:	4630      	mov	r0, r6
 800d0ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0ce:	89ab      	ldrh	r3, [r5, #12]
 800d0d0:	2b01      	cmp	r3, #1
 800d0d2:	d907      	bls.n	800d0e4 <_fwalk_sglue+0x38>
 800d0d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d0d8:	3301      	adds	r3, #1
 800d0da:	d003      	beq.n	800d0e4 <_fwalk_sglue+0x38>
 800d0dc:	4629      	mov	r1, r5
 800d0de:	4638      	mov	r0, r7
 800d0e0:	47c0      	blx	r8
 800d0e2:	4306      	orrs	r6, r0
 800d0e4:	3568      	adds	r5, #104	; 0x68
 800d0e6:	e7e9      	b.n	800d0bc <_fwalk_sglue+0x10>

0800d0e8 <siprintf>:
 800d0e8:	b40e      	push	{r1, r2, r3}
 800d0ea:	b500      	push	{lr}
 800d0ec:	b09c      	sub	sp, #112	; 0x70
 800d0ee:	ab1d      	add	r3, sp, #116	; 0x74
 800d0f0:	9002      	str	r0, [sp, #8]
 800d0f2:	9006      	str	r0, [sp, #24]
 800d0f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d0f8:	4809      	ldr	r0, [pc, #36]	; (800d120 <siprintf+0x38>)
 800d0fa:	9107      	str	r1, [sp, #28]
 800d0fc:	9104      	str	r1, [sp, #16]
 800d0fe:	4909      	ldr	r1, [pc, #36]	; (800d124 <siprintf+0x3c>)
 800d100:	f853 2b04 	ldr.w	r2, [r3], #4
 800d104:	9105      	str	r1, [sp, #20]
 800d106:	6800      	ldr	r0, [r0, #0]
 800d108:	9301      	str	r3, [sp, #4]
 800d10a:	a902      	add	r1, sp, #8
 800d10c:	f001 fb0e 	bl	800e72c <_svfiprintf_r>
 800d110:	9b02      	ldr	r3, [sp, #8]
 800d112:	2200      	movs	r2, #0
 800d114:	701a      	strb	r2, [r3, #0]
 800d116:	b01c      	add	sp, #112	; 0x70
 800d118:	f85d eb04 	ldr.w	lr, [sp], #4
 800d11c:	b003      	add	sp, #12
 800d11e:	4770      	bx	lr
 800d120:	2400019c 	.word	0x2400019c
 800d124:	ffff0208 	.word	0xffff0208

0800d128 <__sread>:
 800d128:	b510      	push	{r4, lr}
 800d12a:	460c      	mov	r4, r1
 800d12c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d130:	f000 f86c 	bl	800d20c <_read_r>
 800d134:	2800      	cmp	r0, #0
 800d136:	bfab      	itete	ge
 800d138:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d13a:	89a3      	ldrhlt	r3, [r4, #12]
 800d13c:	181b      	addge	r3, r3, r0
 800d13e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d142:	bfac      	ite	ge
 800d144:	6563      	strge	r3, [r4, #84]	; 0x54
 800d146:	81a3      	strhlt	r3, [r4, #12]
 800d148:	bd10      	pop	{r4, pc}

0800d14a <__swrite>:
 800d14a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d14e:	461f      	mov	r7, r3
 800d150:	898b      	ldrh	r3, [r1, #12]
 800d152:	05db      	lsls	r3, r3, #23
 800d154:	4605      	mov	r5, r0
 800d156:	460c      	mov	r4, r1
 800d158:	4616      	mov	r6, r2
 800d15a:	d505      	bpl.n	800d168 <__swrite+0x1e>
 800d15c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d160:	2302      	movs	r3, #2
 800d162:	2200      	movs	r2, #0
 800d164:	f000 f840 	bl	800d1e8 <_lseek_r>
 800d168:	89a3      	ldrh	r3, [r4, #12]
 800d16a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d16e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d172:	81a3      	strh	r3, [r4, #12]
 800d174:	4632      	mov	r2, r6
 800d176:	463b      	mov	r3, r7
 800d178:	4628      	mov	r0, r5
 800d17a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d17e:	f000 b867 	b.w	800d250 <_write_r>

0800d182 <__sseek>:
 800d182:	b510      	push	{r4, lr}
 800d184:	460c      	mov	r4, r1
 800d186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d18a:	f000 f82d 	bl	800d1e8 <_lseek_r>
 800d18e:	1c43      	adds	r3, r0, #1
 800d190:	89a3      	ldrh	r3, [r4, #12]
 800d192:	bf15      	itete	ne
 800d194:	6560      	strne	r0, [r4, #84]	; 0x54
 800d196:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d19a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d19e:	81a3      	strheq	r3, [r4, #12]
 800d1a0:	bf18      	it	ne
 800d1a2:	81a3      	strhne	r3, [r4, #12]
 800d1a4:	bd10      	pop	{r4, pc}

0800d1a6 <__sclose>:
 800d1a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1aa:	f000 b80d 	b.w	800d1c8 <_close_r>

0800d1ae <memset>:
 800d1ae:	4402      	add	r2, r0
 800d1b0:	4603      	mov	r3, r0
 800d1b2:	4293      	cmp	r3, r2
 800d1b4:	d100      	bne.n	800d1b8 <memset+0xa>
 800d1b6:	4770      	bx	lr
 800d1b8:	f803 1b01 	strb.w	r1, [r3], #1
 800d1bc:	e7f9      	b.n	800d1b2 <memset+0x4>
	...

0800d1c0 <_localeconv_r>:
 800d1c0:	4800      	ldr	r0, [pc, #0]	; (800d1c4 <_localeconv_r+0x4>)
 800d1c2:	4770      	bx	lr
 800d1c4:	24000290 	.word	0x24000290

0800d1c8 <_close_r>:
 800d1c8:	b538      	push	{r3, r4, r5, lr}
 800d1ca:	4d06      	ldr	r5, [pc, #24]	; (800d1e4 <_close_r+0x1c>)
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	4604      	mov	r4, r0
 800d1d0:	4608      	mov	r0, r1
 800d1d2:	602b      	str	r3, [r5, #0]
 800d1d4:	f7f4 fc31 	bl	8001a3a <_close>
 800d1d8:	1c43      	adds	r3, r0, #1
 800d1da:	d102      	bne.n	800d1e2 <_close_r+0x1a>
 800d1dc:	682b      	ldr	r3, [r5, #0]
 800d1de:	b103      	cbz	r3, 800d1e2 <_close_r+0x1a>
 800d1e0:	6023      	str	r3, [r4, #0]
 800d1e2:	bd38      	pop	{r3, r4, r5, pc}
 800d1e4:	24010eac 	.word	0x24010eac

0800d1e8 <_lseek_r>:
 800d1e8:	b538      	push	{r3, r4, r5, lr}
 800d1ea:	4d07      	ldr	r5, [pc, #28]	; (800d208 <_lseek_r+0x20>)
 800d1ec:	4604      	mov	r4, r0
 800d1ee:	4608      	mov	r0, r1
 800d1f0:	4611      	mov	r1, r2
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	602a      	str	r2, [r5, #0]
 800d1f6:	461a      	mov	r2, r3
 800d1f8:	f7f4 fc46 	bl	8001a88 <_lseek>
 800d1fc:	1c43      	adds	r3, r0, #1
 800d1fe:	d102      	bne.n	800d206 <_lseek_r+0x1e>
 800d200:	682b      	ldr	r3, [r5, #0]
 800d202:	b103      	cbz	r3, 800d206 <_lseek_r+0x1e>
 800d204:	6023      	str	r3, [r4, #0]
 800d206:	bd38      	pop	{r3, r4, r5, pc}
 800d208:	24010eac 	.word	0x24010eac

0800d20c <_read_r>:
 800d20c:	b538      	push	{r3, r4, r5, lr}
 800d20e:	4d07      	ldr	r5, [pc, #28]	; (800d22c <_read_r+0x20>)
 800d210:	4604      	mov	r4, r0
 800d212:	4608      	mov	r0, r1
 800d214:	4611      	mov	r1, r2
 800d216:	2200      	movs	r2, #0
 800d218:	602a      	str	r2, [r5, #0]
 800d21a:	461a      	mov	r2, r3
 800d21c:	f7f4 fbd4 	bl	80019c8 <_read>
 800d220:	1c43      	adds	r3, r0, #1
 800d222:	d102      	bne.n	800d22a <_read_r+0x1e>
 800d224:	682b      	ldr	r3, [r5, #0]
 800d226:	b103      	cbz	r3, 800d22a <_read_r+0x1e>
 800d228:	6023      	str	r3, [r4, #0]
 800d22a:	bd38      	pop	{r3, r4, r5, pc}
 800d22c:	24010eac 	.word	0x24010eac

0800d230 <_sbrk_r>:
 800d230:	b538      	push	{r3, r4, r5, lr}
 800d232:	4d06      	ldr	r5, [pc, #24]	; (800d24c <_sbrk_r+0x1c>)
 800d234:	2300      	movs	r3, #0
 800d236:	4604      	mov	r4, r0
 800d238:	4608      	mov	r0, r1
 800d23a:	602b      	str	r3, [r5, #0]
 800d23c:	f7f4 fc32 	bl	8001aa4 <_sbrk>
 800d240:	1c43      	adds	r3, r0, #1
 800d242:	d102      	bne.n	800d24a <_sbrk_r+0x1a>
 800d244:	682b      	ldr	r3, [r5, #0]
 800d246:	b103      	cbz	r3, 800d24a <_sbrk_r+0x1a>
 800d248:	6023      	str	r3, [r4, #0]
 800d24a:	bd38      	pop	{r3, r4, r5, pc}
 800d24c:	24010eac 	.word	0x24010eac

0800d250 <_write_r>:
 800d250:	b538      	push	{r3, r4, r5, lr}
 800d252:	4d07      	ldr	r5, [pc, #28]	; (800d270 <_write_r+0x20>)
 800d254:	4604      	mov	r4, r0
 800d256:	4608      	mov	r0, r1
 800d258:	4611      	mov	r1, r2
 800d25a:	2200      	movs	r2, #0
 800d25c:	602a      	str	r2, [r5, #0]
 800d25e:	461a      	mov	r2, r3
 800d260:	f7f4 fbcf 	bl	8001a02 <_write>
 800d264:	1c43      	adds	r3, r0, #1
 800d266:	d102      	bne.n	800d26e <_write_r+0x1e>
 800d268:	682b      	ldr	r3, [r5, #0]
 800d26a:	b103      	cbz	r3, 800d26e <_write_r+0x1e>
 800d26c:	6023      	str	r3, [r4, #0]
 800d26e:	bd38      	pop	{r3, r4, r5, pc}
 800d270:	24010eac 	.word	0x24010eac

0800d274 <__errno>:
 800d274:	4b01      	ldr	r3, [pc, #4]	; (800d27c <__errno+0x8>)
 800d276:	6818      	ldr	r0, [r3, #0]
 800d278:	4770      	bx	lr
 800d27a:	bf00      	nop
 800d27c:	2400019c 	.word	0x2400019c

0800d280 <__libc_init_array>:
 800d280:	b570      	push	{r4, r5, r6, lr}
 800d282:	4d0d      	ldr	r5, [pc, #52]	; (800d2b8 <__libc_init_array+0x38>)
 800d284:	4c0d      	ldr	r4, [pc, #52]	; (800d2bc <__libc_init_array+0x3c>)
 800d286:	1b64      	subs	r4, r4, r5
 800d288:	10a4      	asrs	r4, r4, #2
 800d28a:	2600      	movs	r6, #0
 800d28c:	42a6      	cmp	r6, r4
 800d28e:	d109      	bne.n	800d2a4 <__libc_init_array+0x24>
 800d290:	4d0b      	ldr	r5, [pc, #44]	; (800d2c0 <__libc_init_array+0x40>)
 800d292:	4c0c      	ldr	r4, [pc, #48]	; (800d2c4 <__libc_init_array+0x44>)
 800d294:	f001 ff54 	bl	800f140 <_init>
 800d298:	1b64      	subs	r4, r4, r5
 800d29a:	10a4      	asrs	r4, r4, #2
 800d29c:	2600      	movs	r6, #0
 800d29e:	42a6      	cmp	r6, r4
 800d2a0:	d105      	bne.n	800d2ae <__libc_init_array+0x2e>
 800d2a2:	bd70      	pop	{r4, r5, r6, pc}
 800d2a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2a8:	4798      	blx	r3
 800d2aa:	3601      	adds	r6, #1
 800d2ac:	e7ee      	b.n	800d28c <__libc_init_array+0xc>
 800d2ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2b2:	4798      	blx	r3
 800d2b4:	3601      	adds	r6, #1
 800d2b6:	e7f2      	b.n	800d29e <__libc_init_array+0x1e>
 800d2b8:	0800f57c 	.word	0x0800f57c
 800d2bc:	0800f57c 	.word	0x0800f57c
 800d2c0:	0800f57c 	.word	0x0800f57c
 800d2c4:	0800f580 	.word	0x0800f580

0800d2c8 <__retarget_lock_init_recursive>:
 800d2c8:	4770      	bx	lr

0800d2ca <__retarget_lock_acquire_recursive>:
 800d2ca:	4770      	bx	lr

0800d2cc <__retarget_lock_release_recursive>:
 800d2cc:	4770      	bx	lr

0800d2ce <strcpy>:
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d2d4:	f803 2b01 	strb.w	r2, [r3], #1
 800d2d8:	2a00      	cmp	r2, #0
 800d2da:	d1f9      	bne.n	800d2d0 <strcpy+0x2>
 800d2dc:	4770      	bx	lr

0800d2de <memcpy>:
 800d2de:	440a      	add	r2, r1
 800d2e0:	4291      	cmp	r1, r2
 800d2e2:	f100 33ff 	add.w	r3, r0, #4294967295
 800d2e6:	d100      	bne.n	800d2ea <memcpy+0xc>
 800d2e8:	4770      	bx	lr
 800d2ea:	b510      	push	{r4, lr}
 800d2ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d2f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d2f4:	4291      	cmp	r1, r2
 800d2f6:	d1f9      	bne.n	800d2ec <memcpy+0xe>
 800d2f8:	bd10      	pop	{r4, pc}

0800d2fa <quorem>:
 800d2fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2fe:	6903      	ldr	r3, [r0, #16]
 800d300:	690c      	ldr	r4, [r1, #16]
 800d302:	42a3      	cmp	r3, r4
 800d304:	4607      	mov	r7, r0
 800d306:	db7e      	blt.n	800d406 <quorem+0x10c>
 800d308:	3c01      	subs	r4, #1
 800d30a:	f101 0814 	add.w	r8, r1, #20
 800d30e:	f100 0514 	add.w	r5, r0, #20
 800d312:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d316:	9301      	str	r3, [sp, #4]
 800d318:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d31c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d320:	3301      	adds	r3, #1
 800d322:	429a      	cmp	r2, r3
 800d324:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d328:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d32c:	fbb2 f6f3 	udiv	r6, r2, r3
 800d330:	d331      	bcc.n	800d396 <quorem+0x9c>
 800d332:	f04f 0e00 	mov.w	lr, #0
 800d336:	4640      	mov	r0, r8
 800d338:	46ac      	mov	ip, r5
 800d33a:	46f2      	mov	sl, lr
 800d33c:	f850 2b04 	ldr.w	r2, [r0], #4
 800d340:	b293      	uxth	r3, r2
 800d342:	fb06 e303 	mla	r3, r6, r3, lr
 800d346:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d34a:	0c1a      	lsrs	r2, r3, #16
 800d34c:	b29b      	uxth	r3, r3
 800d34e:	ebaa 0303 	sub.w	r3, sl, r3
 800d352:	f8dc a000 	ldr.w	sl, [ip]
 800d356:	fa13 f38a 	uxtah	r3, r3, sl
 800d35a:	fb06 220e 	mla	r2, r6, lr, r2
 800d35e:	9300      	str	r3, [sp, #0]
 800d360:	9b00      	ldr	r3, [sp, #0]
 800d362:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d366:	b292      	uxth	r2, r2
 800d368:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d36c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d370:	f8bd 3000 	ldrh.w	r3, [sp]
 800d374:	4581      	cmp	r9, r0
 800d376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d37a:	f84c 3b04 	str.w	r3, [ip], #4
 800d37e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d382:	d2db      	bcs.n	800d33c <quorem+0x42>
 800d384:	f855 300b 	ldr.w	r3, [r5, fp]
 800d388:	b92b      	cbnz	r3, 800d396 <quorem+0x9c>
 800d38a:	9b01      	ldr	r3, [sp, #4]
 800d38c:	3b04      	subs	r3, #4
 800d38e:	429d      	cmp	r5, r3
 800d390:	461a      	mov	r2, r3
 800d392:	d32c      	bcc.n	800d3ee <quorem+0xf4>
 800d394:	613c      	str	r4, [r7, #16]
 800d396:	4638      	mov	r0, r7
 800d398:	f001 f86e 	bl	800e478 <__mcmp>
 800d39c:	2800      	cmp	r0, #0
 800d39e:	db22      	blt.n	800d3e6 <quorem+0xec>
 800d3a0:	3601      	adds	r6, #1
 800d3a2:	4629      	mov	r1, r5
 800d3a4:	2000      	movs	r0, #0
 800d3a6:	f858 2b04 	ldr.w	r2, [r8], #4
 800d3aa:	f8d1 c000 	ldr.w	ip, [r1]
 800d3ae:	b293      	uxth	r3, r2
 800d3b0:	1ac3      	subs	r3, r0, r3
 800d3b2:	0c12      	lsrs	r2, r2, #16
 800d3b4:	fa13 f38c 	uxtah	r3, r3, ip
 800d3b8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d3bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d3c0:	b29b      	uxth	r3, r3
 800d3c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d3c6:	45c1      	cmp	r9, r8
 800d3c8:	f841 3b04 	str.w	r3, [r1], #4
 800d3cc:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d3d0:	d2e9      	bcs.n	800d3a6 <quorem+0xac>
 800d3d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d3d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d3da:	b922      	cbnz	r2, 800d3e6 <quorem+0xec>
 800d3dc:	3b04      	subs	r3, #4
 800d3de:	429d      	cmp	r5, r3
 800d3e0:	461a      	mov	r2, r3
 800d3e2:	d30a      	bcc.n	800d3fa <quorem+0x100>
 800d3e4:	613c      	str	r4, [r7, #16]
 800d3e6:	4630      	mov	r0, r6
 800d3e8:	b003      	add	sp, #12
 800d3ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3ee:	6812      	ldr	r2, [r2, #0]
 800d3f0:	3b04      	subs	r3, #4
 800d3f2:	2a00      	cmp	r2, #0
 800d3f4:	d1ce      	bne.n	800d394 <quorem+0x9a>
 800d3f6:	3c01      	subs	r4, #1
 800d3f8:	e7c9      	b.n	800d38e <quorem+0x94>
 800d3fa:	6812      	ldr	r2, [r2, #0]
 800d3fc:	3b04      	subs	r3, #4
 800d3fe:	2a00      	cmp	r2, #0
 800d400:	d1f0      	bne.n	800d3e4 <quorem+0xea>
 800d402:	3c01      	subs	r4, #1
 800d404:	e7eb      	b.n	800d3de <quorem+0xe4>
 800d406:	2000      	movs	r0, #0
 800d408:	e7ee      	b.n	800d3e8 <quorem+0xee>
 800d40a:	0000      	movs	r0, r0
 800d40c:	0000      	movs	r0, r0
	...

0800d410 <_dtoa_r>:
 800d410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d414:	ed2d 8b02 	vpush	{d8}
 800d418:	69c5      	ldr	r5, [r0, #28]
 800d41a:	b091      	sub	sp, #68	; 0x44
 800d41c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d420:	ec59 8b10 	vmov	r8, r9, d0
 800d424:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800d426:	9106      	str	r1, [sp, #24]
 800d428:	4606      	mov	r6, r0
 800d42a:	9208      	str	r2, [sp, #32]
 800d42c:	930c      	str	r3, [sp, #48]	; 0x30
 800d42e:	b975      	cbnz	r5, 800d44e <_dtoa_r+0x3e>
 800d430:	2010      	movs	r0, #16
 800d432:	f7ff f89f 	bl	800c574 <malloc>
 800d436:	4602      	mov	r2, r0
 800d438:	61f0      	str	r0, [r6, #28]
 800d43a:	b920      	cbnz	r0, 800d446 <_dtoa_r+0x36>
 800d43c:	4ba6      	ldr	r3, [pc, #664]	; (800d6d8 <_dtoa_r+0x2c8>)
 800d43e:	21ef      	movs	r1, #239	; 0xef
 800d440:	48a6      	ldr	r0, [pc, #664]	; (800d6dc <_dtoa_r+0x2cc>)
 800d442:	f001 fb39 	bl	800eab8 <__assert_func>
 800d446:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d44a:	6005      	str	r5, [r0, #0]
 800d44c:	60c5      	str	r5, [r0, #12]
 800d44e:	69f3      	ldr	r3, [r6, #28]
 800d450:	6819      	ldr	r1, [r3, #0]
 800d452:	b151      	cbz	r1, 800d46a <_dtoa_r+0x5a>
 800d454:	685a      	ldr	r2, [r3, #4]
 800d456:	604a      	str	r2, [r1, #4]
 800d458:	2301      	movs	r3, #1
 800d45a:	4093      	lsls	r3, r2
 800d45c:	608b      	str	r3, [r1, #8]
 800d45e:	4630      	mov	r0, r6
 800d460:	f000 fdce 	bl	800e000 <_Bfree>
 800d464:	69f3      	ldr	r3, [r6, #28]
 800d466:	2200      	movs	r2, #0
 800d468:	601a      	str	r2, [r3, #0]
 800d46a:	f1b9 0300 	subs.w	r3, r9, #0
 800d46e:	bfbb      	ittet	lt
 800d470:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d474:	9303      	strlt	r3, [sp, #12]
 800d476:	2300      	movge	r3, #0
 800d478:	2201      	movlt	r2, #1
 800d47a:	bfac      	ite	ge
 800d47c:	6023      	strge	r3, [r4, #0]
 800d47e:	6022      	strlt	r2, [r4, #0]
 800d480:	4b97      	ldr	r3, [pc, #604]	; (800d6e0 <_dtoa_r+0x2d0>)
 800d482:	9c03      	ldr	r4, [sp, #12]
 800d484:	43a3      	bics	r3, r4
 800d486:	d11c      	bne.n	800d4c2 <_dtoa_r+0xb2>
 800d488:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d48a:	f242 730f 	movw	r3, #9999	; 0x270f
 800d48e:	6013      	str	r3, [r2, #0]
 800d490:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800d494:	ea53 0308 	orrs.w	r3, r3, r8
 800d498:	f000 84fb 	beq.w	800de92 <_dtoa_r+0xa82>
 800d49c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d49e:	b963      	cbnz	r3, 800d4ba <_dtoa_r+0xaa>
 800d4a0:	4b90      	ldr	r3, [pc, #576]	; (800d6e4 <_dtoa_r+0x2d4>)
 800d4a2:	e020      	b.n	800d4e6 <_dtoa_r+0xd6>
 800d4a4:	4b90      	ldr	r3, [pc, #576]	; (800d6e8 <_dtoa_r+0x2d8>)
 800d4a6:	9301      	str	r3, [sp, #4]
 800d4a8:	3308      	adds	r3, #8
 800d4aa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d4ac:	6013      	str	r3, [r2, #0]
 800d4ae:	9801      	ldr	r0, [sp, #4]
 800d4b0:	b011      	add	sp, #68	; 0x44
 800d4b2:	ecbd 8b02 	vpop	{d8}
 800d4b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4ba:	4b8a      	ldr	r3, [pc, #552]	; (800d6e4 <_dtoa_r+0x2d4>)
 800d4bc:	9301      	str	r3, [sp, #4]
 800d4be:	3303      	adds	r3, #3
 800d4c0:	e7f3      	b.n	800d4aa <_dtoa_r+0x9a>
 800d4c2:	ed9d 8b02 	vldr	d8, [sp, #8]
 800d4c6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d4ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4ce:	d10c      	bne.n	800d4ea <_dtoa_r+0xda>
 800d4d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d4d2:	2301      	movs	r3, #1
 800d4d4:	6013      	str	r3, [r2, #0]
 800d4d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	f000 84d7 	beq.w	800de8c <_dtoa_r+0xa7c>
 800d4de:	4b83      	ldr	r3, [pc, #524]	; (800d6ec <_dtoa_r+0x2dc>)
 800d4e0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d4e2:	6013      	str	r3, [r2, #0]
 800d4e4:	3b01      	subs	r3, #1
 800d4e6:	9301      	str	r3, [sp, #4]
 800d4e8:	e7e1      	b.n	800d4ae <_dtoa_r+0x9e>
 800d4ea:	aa0e      	add	r2, sp, #56	; 0x38
 800d4ec:	a90f      	add	r1, sp, #60	; 0x3c
 800d4ee:	4630      	mov	r0, r6
 800d4f0:	eeb0 0b48 	vmov.f64	d0, d8
 800d4f4:	f001 f866 	bl	800e5c4 <__d2b>
 800d4f8:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800d4fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d4fe:	4605      	mov	r5, r0
 800d500:	2b00      	cmp	r3, #0
 800d502:	d046      	beq.n	800d592 <_dtoa_r+0x182>
 800d504:	eeb0 7b48 	vmov.f64	d7, d8
 800d508:	ee18 1a90 	vmov	r1, s17
 800d50c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800d510:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800d514:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800d518:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d51c:	2000      	movs	r0, #0
 800d51e:	ee07 1a90 	vmov	s15, r1
 800d522:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800d526:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800d6c0 <_dtoa_r+0x2b0>
 800d52a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d52e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800d6c8 <_dtoa_r+0x2b8>
 800d532:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d536:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800d6d0 <_dtoa_r+0x2c0>
 800d53a:	ee07 3a90 	vmov	s15, r3
 800d53e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800d542:	eeb0 7b46 	vmov.f64	d7, d6
 800d546:	eea4 7b05 	vfma.f64	d7, d4, d5
 800d54a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d54e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d556:	ee16 ba90 	vmov	fp, s13
 800d55a:	9009      	str	r0, [sp, #36]	; 0x24
 800d55c:	d508      	bpl.n	800d570 <_dtoa_r+0x160>
 800d55e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d562:	eeb4 6b47 	vcmp.f64	d6, d7
 800d566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d56a:	bf18      	it	ne
 800d56c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800d570:	f1bb 0f16 	cmp.w	fp, #22
 800d574:	d82b      	bhi.n	800d5ce <_dtoa_r+0x1be>
 800d576:	495e      	ldr	r1, [pc, #376]	; (800d6f0 <_dtoa_r+0x2e0>)
 800d578:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800d57c:	ed91 7b00 	vldr	d7, [r1]
 800d580:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d588:	d501      	bpl.n	800d58e <_dtoa_r+0x17e>
 800d58a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d58e:	2100      	movs	r1, #0
 800d590:	e01e      	b.n	800d5d0 <_dtoa_r+0x1c0>
 800d592:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d594:	4413      	add	r3, r2
 800d596:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800d59a:	2920      	cmp	r1, #32
 800d59c:	bfc1      	itttt	gt
 800d59e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800d5a2:	408c      	lslgt	r4, r1
 800d5a4:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800d5a8:	fa28 f101 	lsrgt.w	r1, r8, r1
 800d5ac:	bfd6      	itet	le
 800d5ae:	f1c1 0120 	rsble	r1, r1, #32
 800d5b2:	4321      	orrgt	r1, r4
 800d5b4:	fa08 f101 	lslle.w	r1, r8, r1
 800d5b8:	ee07 1a90 	vmov	s15, r1
 800d5bc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d5c0:	3b01      	subs	r3, #1
 800d5c2:	ee17 1a90 	vmov	r1, s15
 800d5c6:	2001      	movs	r0, #1
 800d5c8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800d5cc:	e7a7      	b.n	800d51e <_dtoa_r+0x10e>
 800d5ce:	2101      	movs	r1, #1
 800d5d0:	1ad2      	subs	r2, r2, r3
 800d5d2:	1e53      	subs	r3, r2, #1
 800d5d4:	9305      	str	r3, [sp, #20]
 800d5d6:	bf45      	ittet	mi
 800d5d8:	f1c2 0301 	rsbmi	r3, r2, #1
 800d5dc:	9304      	strmi	r3, [sp, #16]
 800d5de:	2300      	movpl	r3, #0
 800d5e0:	2300      	movmi	r3, #0
 800d5e2:	bf4c      	ite	mi
 800d5e4:	9305      	strmi	r3, [sp, #20]
 800d5e6:	9304      	strpl	r3, [sp, #16]
 800d5e8:	f1bb 0f00 	cmp.w	fp, #0
 800d5ec:	910b      	str	r1, [sp, #44]	; 0x2c
 800d5ee:	db18      	blt.n	800d622 <_dtoa_r+0x212>
 800d5f0:	9b05      	ldr	r3, [sp, #20]
 800d5f2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800d5f6:	445b      	add	r3, fp
 800d5f8:	9305      	str	r3, [sp, #20]
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	9a06      	ldr	r2, [sp, #24]
 800d5fe:	2a09      	cmp	r2, #9
 800d600:	d848      	bhi.n	800d694 <_dtoa_r+0x284>
 800d602:	2a05      	cmp	r2, #5
 800d604:	bfc4      	itt	gt
 800d606:	3a04      	subgt	r2, #4
 800d608:	9206      	strgt	r2, [sp, #24]
 800d60a:	9a06      	ldr	r2, [sp, #24]
 800d60c:	f1a2 0202 	sub.w	r2, r2, #2
 800d610:	bfcc      	ite	gt
 800d612:	2400      	movgt	r4, #0
 800d614:	2401      	movle	r4, #1
 800d616:	2a03      	cmp	r2, #3
 800d618:	d847      	bhi.n	800d6aa <_dtoa_r+0x29a>
 800d61a:	e8df f002 	tbb	[pc, r2]
 800d61e:	2d0b      	.short	0x2d0b
 800d620:	392b      	.short	0x392b
 800d622:	9b04      	ldr	r3, [sp, #16]
 800d624:	2200      	movs	r2, #0
 800d626:	eba3 030b 	sub.w	r3, r3, fp
 800d62a:	9304      	str	r3, [sp, #16]
 800d62c:	920a      	str	r2, [sp, #40]	; 0x28
 800d62e:	f1cb 0300 	rsb	r3, fp, #0
 800d632:	e7e3      	b.n	800d5fc <_dtoa_r+0x1ec>
 800d634:	2200      	movs	r2, #0
 800d636:	9207      	str	r2, [sp, #28]
 800d638:	9a08      	ldr	r2, [sp, #32]
 800d63a:	2a00      	cmp	r2, #0
 800d63c:	dc38      	bgt.n	800d6b0 <_dtoa_r+0x2a0>
 800d63e:	f04f 0a01 	mov.w	sl, #1
 800d642:	46d1      	mov	r9, sl
 800d644:	4652      	mov	r2, sl
 800d646:	f8cd a020 	str.w	sl, [sp, #32]
 800d64a:	69f7      	ldr	r7, [r6, #28]
 800d64c:	2100      	movs	r1, #0
 800d64e:	2004      	movs	r0, #4
 800d650:	f100 0c14 	add.w	ip, r0, #20
 800d654:	4594      	cmp	ip, r2
 800d656:	d930      	bls.n	800d6ba <_dtoa_r+0x2aa>
 800d658:	6079      	str	r1, [r7, #4]
 800d65a:	4630      	mov	r0, r6
 800d65c:	930d      	str	r3, [sp, #52]	; 0x34
 800d65e:	f000 fc8f 	bl	800df80 <_Balloc>
 800d662:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d664:	9001      	str	r0, [sp, #4]
 800d666:	4602      	mov	r2, r0
 800d668:	2800      	cmp	r0, #0
 800d66a:	d145      	bne.n	800d6f8 <_dtoa_r+0x2e8>
 800d66c:	4b21      	ldr	r3, [pc, #132]	; (800d6f4 <_dtoa_r+0x2e4>)
 800d66e:	f240 11af 	movw	r1, #431	; 0x1af
 800d672:	e6e5      	b.n	800d440 <_dtoa_r+0x30>
 800d674:	2201      	movs	r2, #1
 800d676:	e7de      	b.n	800d636 <_dtoa_r+0x226>
 800d678:	2200      	movs	r2, #0
 800d67a:	9207      	str	r2, [sp, #28]
 800d67c:	9a08      	ldr	r2, [sp, #32]
 800d67e:	eb0b 0a02 	add.w	sl, fp, r2
 800d682:	f10a 0901 	add.w	r9, sl, #1
 800d686:	464a      	mov	r2, r9
 800d688:	2a01      	cmp	r2, #1
 800d68a:	bfb8      	it	lt
 800d68c:	2201      	movlt	r2, #1
 800d68e:	e7dc      	b.n	800d64a <_dtoa_r+0x23a>
 800d690:	2201      	movs	r2, #1
 800d692:	e7f2      	b.n	800d67a <_dtoa_r+0x26a>
 800d694:	2401      	movs	r4, #1
 800d696:	2200      	movs	r2, #0
 800d698:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800d69c:	f04f 3aff 	mov.w	sl, #4294967295
 800d6a0:	2100      	movs	r1, #0
 800d6a2:	46d1      	mov	r9, sl
 800d6a4:	2212      	movs	r2, #18
 800d6a6:	9108      	str	r1, [sp, #32]
 800d6a8:	e7cf      	b.n	800d64a <_dtoa_r+0x23a>
 800d6aa:	2201      	movs	r2, #1
 800d6ac:	9207      	str	r2, [sp, #28]
 800d6ae:	e7f5      	b.n	800d69c <_dtoa_r+0x28c>
 800d6b0:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d6b4:	46d1      	mov	r9, sl
 800d6b6:	4652      	mov	r2, sl
 800d6b8:	e7c7      	b.n	800d64a <_dtoa_r+0x23a>
 800d6ba:	3101      	adds	r1, #1
 800d6bc:	0040      	lsls	r0, r0, #1
 800d6be:	e7c7      	b.n	800d650 <_dtoa_r+0x240>
 800d6c0:	636f4361 	.word	0x636f4361
 800d6c4:	3fd287a7 	.word	0x3fd287a7
 800d6c8:	8b60c8b3 	.word	0x8b60c8b3
 800d6cc:	3fc68a28 	.word	0x3fc68a28
 800d6d0:	509f79fb 	.word	0x509f79fb
 800d6d4:	3fd34413 	.word	0x3fd34413
 800d6d8:	0800f249 	.word	0x0800f249
 800d6dc:	0800f260 	.word	0x0800f260
 800d6e0:	7ff00000 	.word	0x7ff00000
 800d6e4:	0800f245 	.word	0x0800f245
 800d6e8:	0800f23c 	.word	0x0800f23c
 800d6ec:	0800f219 	.word	0x0800f219
 800d6f0:	0800f350 	.word	0x0800f350
 800d6f4:	0800f2b8 	.word	0x0800f2b8
 800d6f8:	69f2      	ldr	r2, [r6, #28]
 800d6fa:	9901      	ldr	r1, [sp, #4]
 800d6fc:	6011      	str	r1, [r2, #0]
 800d6fe:	f1b9 0f0e 	cmp.w	r9, #14
 800d702:	d86c      	bhi.n	800d7de <_dtoa_r+0x3ce>
 800d704:	2c00      	cmp	r4, #0
 800d706:	d06a      	beq.n	800d7de <_dtoa_r+0x3ce>
 800d708:	f1bb 0f00 	cmp.w	fp, #0
 800d70c:	f340 80a0 	ble.w	800d850 <_dtoa_r+0x440>
 800d710:	4ac1      	ldr	r2, [pc, #772]	; (800da18 <_dtoa_r+0x608>)
 800d712:	f00b 010f 	and.w	r1, fp, #15
 800d716:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800d71a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d71e:	ed92 7b00 	vldr	d7, [r2]
 800d722:	ea4f 122b 	mov.w	r2, fp, asr #4
 800d726:	f000 8087 	beq.w	800d838 <_dtoa_r+0x428>
 800d72a:	49bc      	ldr	r1, [pc, #752]	; (800da1c <_dtoa_r+0x60c>)
 800d72c:	ed91 6b08 	vldr	d6, [r1, #32]
 800d730:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800d734:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d738:	f002 020f 	and.w	r2, r2, #15
 800d73c:	2103      	movs	r1, #3
 800d73e:	48b7      	ldr	r0, [pc, #732]	; (800da1c <_dtoa_r+0x60c>)
 800d740:	2a00      	cmp	r2, #0
 800d742:	d17b      	bne.n	800d83c <_dtoa_r+0x42c>
 800d744:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d748:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d74c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d750:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d752:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d756:	2a00      	cmp	r2, #0
 800d758:	f000 80a0 	beq.w	800d89c <_dtoa_r+0x48c>
 800d75c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800d760:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d768:	f140 8098 	bpl.w	800d89c <_dtoa_r+0x48c>
 800d76c:	f1b9 0f00 	cmp.w	r9, #0
 800d770:	f000 8094 	beq.w	800d89c <_dtoa_r+0x48c>
 800d774:	f1ba 0f00 	cmp.w	sl, #0
 800d778:	dd2f      	ble.n	800d7da <_dtoa_r+0x3ca>
 800d77a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800d77e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d782:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d786:	f10b 32ff 	add.w	r2, fp, #4294967295
 800d78a:	3101      	adds	r1, #1
 800d78c:	4654      	mov	r4, sl
 800d78e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d792:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800d796:	ee07 1a90 	vmov	s15, r1
 800d79a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d79e:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d7a2:	ee15 7a90 	vmov	r7, s11
 800d7a6:	ec51 0b15 	vmov	r0, r1, d5
 800d7aa:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800d7ae:	2c00      	cmp	r4, #0
 800d7b0:	d177      	bne.n	800d8a2 <_dtoa_r+0x492>
 800d7b2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d7b6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d7ba:	ec41 0b17 	vmov	d7, r0, r1
 800d7be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d7c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7c6:	f300 826a 	bgt.w	800dc9e <_dtoa_r+0x88e>
 800d7ca:	eeb1 7b47 	vneg.f64	d7, d7
 800d7ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d7d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7d6:	f100 8260 	bmi.w	800dc9a <_dtoa_r+0x88a>
 800d7da:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d7de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d7e0:	2a00      	cmp	r2, #0
 800d7e2:	f2c0 811d 	blt.w	800da20 <_dtoa_r+0x610>
 800d7e6:	f1bb 0f0e 	cmp.w	fp, #14
 800d7ea:	f300 8119 	bgt.w	800da20 <_dtoa_r+0x610>
 800d7ee:	4b8a      	ldr	r3, [pc, #552]	; (800da18 <_dtoa_r+0x608>)
 800d7f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d7f4:	ed93 6b00 	vldr	d6, [r3]
 800d7f8:	9b08      	ldr	r3, [sp, #32]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	f280 80b7 	bge.w	800d96e <_dtoa_r+0x55e>
 800d800:	f1b9 0f00 	cmp.w	r9, #0
 800d804:	f300 80b3 	bgt.w	800d96e <_dtoa_r+0x55e>
 800d808:	f040 8246 	bne.w	800dc98 <_dtoa_r+0x888>
 800d80c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d810:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d814:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d818:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d81c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d820:	464c      	mov	r4, r9
 800d822:	464f      	mov	r7, r9
 800d824:	f280 821c 	bge.w	800dc60 <_dtoa_r+0x850>
 800d828:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d82c:	2331      	movs	r3, #49	; 0x31
 800d82e:	f808 3b01 	strb.w	r3, [r8], #1
 800d832:	f10b 0b01 	add.w	fp, fp, #1
 800d836:	e218      	b.n	800dc6a <_dtoa_r+0x85a>
 800d838:	2102      	movs	r1, #2
 800d83a:	e780      	b.n	800d73e <_dtoa_r+0x32e>
 800d83c:	07d4      	lsls	r4, r2, #31
 800d83e:	d504      	bpl.n	800d84a <_dtoa_r+0x43a>
 800d840:	ed90 6b00 	vldr	d6, [r0]
 800d844:	3101      	adds	r1, #1
 800d846:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d84a:	1052      	asrs	r2, r2, #1
 800d84c:	3008      	adds	r0, #8
 800d84e:	e777      	b.n	800d740 <_dtoa_r+0x330>
 800d850:	d022      	beq.n	800d898 <_dtoa_r+0x488>
 800d852:	f1cb 0200 	rsb	r2, fp, #0
 800d856:	4970      	ldr	r1, [pc, #448]	; (800da18 <_dtoa_r+0x608>)
 800d858:	f002 000f 	and.w	r0, r2, #15
 800d85c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800d860:	ed91 7b00 	vldr	d7, [r1]
 800d864:	ee28 7b07 	vmul.f64	d7, d8, d7
 800d868:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d86c:	486b      	ldr	r0, [pc, #428]	; (800da1c <_dtoa_r+0x60c>)
 800d86e:	1112      	asrs	r2, r2, #4
 800d870:	2400      	movs	r4, #0
 800d872:	2102      	movs	r1, #2
 800d874:	b92a      	cbnz	r2, 800d882 <_dtoa_r+0x472>
 800d876:	2c00      	cmp	r4, #0
 800d878:	f43f af6a 	beq.w	800d750 <_dtoa_r+0x340>
 800d87c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d880:	e766      	b.n	800d750 <_dtoa_r+0x340>
 800d882:	07d7      	lsls	r7, r2, #31
 800d884:	d505      	bpl.n	800d892 <_dtoa_r+0x482>
 800d886:	ed90 6b00 	vldr	d6, [r0]
 800d88a:	3101      	adds	r1, #1
 800d88c:	2401      	movs	r4, #1
 800d88e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d892:	1052      	asrs	r2, r2, #1
 800d894:	3008      	adds	r0, #8
 800d896:	e7ed      	b.n	800d874 <_dtoa_r+0x464>
 800d898:	2102      	movs	r1, #2
 800d89a:	e759      	b.n	800d750 <_dtoa_r+0x340>
 800d89c:	465a      	mov	r2, fp
 800d89e:	464c      	mov	r4, r9
 800d8a0:	e775      	b.n	800d78e <_dtoa_r+0x37e>
 800d8a2:	ec41 0b17 	vmov	d7, r0, r1
 800d8a6:	495c      	ldr	r1, [pc, #368]	; (800da18 <_dtoa_r+0x608>)
 800d8a8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800d8ac:	ed11 4b02 	vldr	d4, [r1, #-8]
 800d8b0:	9901      	ldr	r1, [sp, #4]
 800d8b2:	440c      	add	r4, r1
 800d8b4:	9907      	ldr	r1, [sp, #28]
 800d8b6:	b351      	cbz	r1, 800d90e <_dtoa_r+0x4fe>
 800d8b8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800d8bc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800d8c0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d8c4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d8c8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d8cc:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d8d0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d8d4:	ee14 1a90 	vmov	r1, s9
 800d8d8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d8dc:	3130      	adds	r1, #48	; 0x30
 800d8de:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d8e2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d8e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8ea:	f808 1b01 	strb.w	r1, [r8], #1
 800d8ee:	d439      	bmi.n	800d964 <_dtoa_r+0x554>
 800d8f0:	ee32 5b46 	vsub.f64	d5, d2, d6
 800d8f4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800d8f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8fc:	d472      	bmi.n	800d9e4 <_dtoa_r+0x5d4>
 800d8fe:	45a0      	cmp	r8, r4
 800d900:	f43f af6b 	beq.w	800d7da <_dtoa_r+0x3ca>
 800d904:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d908:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d90c:	e7e0      	b.n	800d8d0 <_dtoa_r+0x4c0>
 800d90e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d912:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d916:	4620      	mov	r0, r4
 800d918:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d91c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d920:	ee14 1a90 	vmov	r1, s9
 800d924:	3130      	adds	r1, #48	; 0x30
 800d926:	f808 1b01 	strb.w	r1, [r8], #1
 800d92a:	45a0      	cmp	r8, r4
 800d92c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d930:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d934:	d118      	bne.n	800d968 <_dtoa_r+0x558>
 800d936:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d93a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800d93e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800d942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d946:	dc4d      	bgt.n	800d9e4 <_dtoa_r+0x5d4>
 800d948:	ee35 5b47 	vsub.f64	d5, d5, d7
 800d94c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800d950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d954:	f57f af41 	bpl.w	800d7da <_dtoa_r+0x3ca>
 800d958:	4680      	mov	r8, r0
 800d95a:	3801      	subs	r0, #1
 800d95c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800d960:	2b30      	cmp	r3, #48	; 0x30
 800d962:	d0f9      	beq.n	800d958 <_dtoa_r+0x548>
 800d964:	4693      	mov	fp, r2
 800d966:	e02a      	b.n	800d9be <_dtoa_r+0x5ae>
 800d968:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d96c:	e7d6      	b.n	800d91c <_dtoa_r+0x50c>
 800d96e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d972:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800d976:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d97a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800d97e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800d982:	ee15 3a10 	vmov	r3, s10
 800d986:	3330      	adds	r3, #48	; 0x30
 800d988:	f808 3b01 	strb.w	r3, [r8], #1
 800d98c:	9b01      	ldr	r3, [sp, #4]
 800d98e:	eba8 0303 	sub.w	r3, r8, r3
 800d992:	4599      	cmp	r9, r3
 800d994:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800d998:	eea3 7b46 	vfms.f64	d7, d3, d6
 800d99c:	d133      	bne.n	800da06 <_dtoa_r+0x5f6>
 800d99e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800d9a2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d9a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9aa:	dc1a      	bgt.n	800d9e2 <_dtoa_r+0x5d2>
 800d9ac:	eeb4 7b46 	vcmp.f64	d7, d6
 800d9b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9b4:	d103      	bne.n	800d9be <_dtoa_r+0x5ae>
 800d9b6:	ee15 3a10 	vmov	r3, s10
 800d9ba:	07d9      	lsls	r1, r3, #31
 800d9bc:	d411      	bmi.n	800d9e2 <_dtoa_r+0x5d2>
 800d9be:	4629      	mov	r1, r5
 800d9c0:	4630      	mov	r0, r6
 800d9c2:	f000 fb1d 	bl	800e000 <_Bfree>
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d9ca:	f888 3000 	strb.w	r3, [r8]
 800d9ce:	f10b 0301 	add.w	r3, fp, #1
 800d9d2:	6013      	str	r3, [r2, #0]
 800d9d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	f43f ad69 	beq.w	800d4ae <_dtoa_r+0x9e>
 800d9dc:	f8c3 8000 	str.w	r8, [r3]
 800d9e0:	e565      	b.n	800d4ae <_dtoa_r+0x9e>
 800d9e2:	465a      	mov	r2, fp
 800d9e4:	4643      	mov	r3, r8
 800d9e6:	4698      	mov	r8, r3
 800d9e8:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800d9ec:	2939      	cmp	r1, #57	; 0x39
 800d9ee:	d106      	bne.n	800d9fe <_dtoa_r+0x5ee>
 800d9f0:	9901      	ldr	r1, [sp, #4]
 800d9f2:	4299      	cmp	r1, r3
 800d9f4:	d1f7      	bne.n	800d9e6 <_dtoa_r+0x5d6>
 800d9f6:	9801      	ldr	r0, [sp, #4]
 800d9f8:	2130      	movs	r1, #48	; 0x30
 800d9fa:	3201      	adds	r2, #1
 800d9fc:	7001      	strb	r1, [r0, #0]
 800d9fe:	7819      	ldrb	r1, [r3, #0]
 800da00:	3101      	adds	r1, #1
 800da02:	7019      	strb	r1, [r3, #0]
 800da04:	e7ae      	b.n	800d964 <_dtoa_r+0x554>
 800da06:	ee27 7b04 	vmul.f64	d7, d7, d4
 800da0a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800da0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da12:	d1b2      	bne.n	800d97a <_dtoa_r+0x56a>
 800da14:	e7d3      	b.n	800d9be <_dtoa_r+0x5ae>
 800da16:	bf00      	nop
 800da18:	0800f350 	.word	0x0800f350
 800da1c:	0800f328 	.word	0x0800f328
 800da20:	9907      	ldr	r1, [sp, #28]
 800da22:	2900      	cmp	r1, #0
 800da24:	f000 80d0 	beq.w	800dbc8 <_dtoa_r+0x7b8>
 800da28:	9906      	ldr	r1, [sp, #24]
 800da2a:	2901      	cmp	r1, #1
 800da2c:	f300 80b4 	bgt.w	800db98 <_dtoa_r+0x788>
 800da30:	9909      	ldr	r1, [sp, #36]	; 0x24
 800da32:	2900      	cmp	r1, #0
 800da34:	f000 80ac 	beq.w	800db90 <_dtoa_r+0x780>
 800da38:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800da3c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800da40:	461c      	mov	r4, r3
 800da42:	9309      	str	r3, [sp, #36]	; 0x24
 800da44:	9b04      	ldr	r3, [sp, #16]
 800da46:	4413      	add	r3, r2
 800da48:	9304      	str	r3, [sp, #16]
 800da4a:	9b05      	ldr	r3, [sp, #20]
 800da4c:	2101      	movs	r1, #1
 800da4e:	4413      	add	r3, r2
 800da50:	4630      	mov	r0, r6
 800da52:	9305      	str	r3, [sp, #20]
 800da54:	f000 fb8a 	bl	800e16c <__i2b>
 800da58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da5a:	4607      	mov	r7, r0
 800da5c:	f1b8 0f00 	cmp.w	r8, #0
 800da60:	d00d      	beq.n	800da7e <_dtoa_r+0x66e>
 800da62:	9a05      	ldr	r2, [sp, #20]
 800da64:	2a00      	cmp	r2, #0
 800da66:	dd0a      	ble.n	800da7e <_dtoa_r+0x66e>
 800da68:	4542      	cmp	r2, r8
 800da6a:	9904      	ldr	r1, [sp, #16]
 800da6c:	bfa8      	it	ge
 800da6e:	4642      	movge	r2, r8
 800da70:	1a89      	subs	r1, r1, r2
 800da72:	9104      	str	r1, [sp, #16]
 800da74:	9905      	ldr	r1, [sp, #20]
 800da76:	eba8 0802 	sub.w	r8, r8, r2
 800da7a:	1a8a      	subs	r2, r1, r2
 800da7c:	9205      	str	r2, [sp, #20]
 800da7e:	b303      	cbz	r3, 800dac2 <_dtoa_r+0x6b2>
 800da80:	9a07      	ldr	r2, [sp, #28]
 800da82:	2a00      	cmp	r2, #0
 800da84:	f000 80a5 	beq.w	800dbd2 <_dtoa_r+0x7c2>
 800da88:	2c00      	cmp	r4, #0
 800da8a:	dd13      	ble.n	800dab4 <_dtoa_r+0x6a4>
 800da8c:	4639      	mov	r1, r7
 800da8e:	4622      	mov	r2, r4
 800da90:	4630      	mov	r0, r6
 800da92:	930d      	str	r3, [sp, #52]	; 0x34
 800da94:	f000 fc2a 	bl	800e2ec <__pow5mult>
 800da98:	462a      	mov	r2, r5
 800da9a:	4601      	mov	r1, r0
 800da9c:	4607      	mov	r7, r0
 800da9e:	4630      	mov	r0, r6
 800daa0:	f000 fb7a 	bl	800e198 <__multiply>
 800daa4:	4629      	mov	r1, r5
 800daa6:	9009      	str	r0, [sp, #36]	; 0x24
 800daa8:	4630      	mov	r0, r6
 800daaa:	f000 faa9 	bl	800e000 <_Bfree>
 800daae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dab0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dab2:	4615      	mov	r5, r2
 800dab4:	1b1a      	subs	r2, r3, r4
 800dab6:	d004      	beq.n	800dac2 <_dtoa_r+0x6b2>
 800dab8:	4629      	mov	r1, r5
 800daba:	4630      	mov	r0, r6
 800dabc:	f000 fc16 	bl	800e2ec <__pow5mult>
 800dac0:	4605      	mov	r5, r0
 800dac2:	2101      	movs	r1, #1
 800dac4:	4630      	mov	r0, r6
 800dac6:	f000 fb51 	bl	800e16c <__i2b>
 800daca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dacc:	2b00      	cmp	r3, #0
 800dace:	4604      	mov	r4, r0
 800dad0:	f340 8081 	ble.w	800dbd6 <_dtoa_r+0x7c6>
 800dad4:	461a      	mov	r2, r3
 800dad6:	4601      	mov	r1, r0
 800dad8:	4630      	mov	r0, r6
 800dada:	f000 fc07 	bl	800e2ec <__pow5mult>
 800dade:	9b06      	ldr	r3, [sp, #24]
 800dae0:	2b01      	cmp	r3, #1
 800dae2:	4604      	mov	r4, r0
 800dae4:	dd7a      	ble.n	800dbdc <_dtoa_r+0x7cc>
 800dae6:	2300      	movs	r3, #0
 800dae8:	9309      	str	r3, [sp, #36]	; 0x24
 800daea:	6922      	ldr	r2, [r4, #16]
 800daec:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800daf0:	6910      	ldr	r0, [r2, #16]
 800daf2:	f000 faed 	bl	800e0d0 <__hi0bits>
 800daf6:	f1c0 0020 	rsb	r0, r0, #32
 800dafa:	9b05      	ldr	r3, [sp, #20]
 800dafc:	4418      	add	r0, r3
 800dafe:	f010 001f 	ands.w	r0, r0, #31
 800db02:	f000 8093 	beq.w	800dc2c <_dtoa_r+0x81c>
 800db06:	f1c0 0220 	rsb	r2, r0, #32
 800db0a:	2a04      	cmp	r2, #4
 800db0c:	f340 8085 	ble.w	800dc1a <_dtoa_r+0x80a>
 800db10:	9b04      	ldr	r3, [sp, #16]
 800db12:	f1c0 001c 	rsb	r0, r0, #28
 800db16:	4403      	add	r3, r0
 800db18:	9304      	str	r3, [sp, #16]
 800db1a:	9b05      	ldr	r3, [sp, #20]
 800db1c:	4480      	add	r8, r0
 800db1e:	4403      	add	r3, r0
 800db20:	9305      	str	r3, [sp, #20]
 800db22:	9b04      	ldr	r3, [sp, #16]
 800db24:	2b00      	cmp	r3, #0
 800db26:	dd05      	ble.n	800db34 <_dtoa_r+0x724>
 800db28:	4629      	mov	r1, r5
 800db2a:	461a      	mov	r2, r3
 800db2c:	4630      	mov	r0, r6
 800db2e:	f000 fc37 	bl	800e3a0 <__lshift>
 800db32:	4605      	mov	r5, r0
 800db34:	9b05      	ldr	r3, [sp, #20]
 800db36:	2b00      	cmp	r3, #0
 800db38:	dd05      	ble.n	800db46 <_dtoa_r+0x736>
 800db3a:	4621      	mov	r1, r4
 800db3c:	461a      	mov	r2, r3
 800db3e:	4630      	mov	r0, r6
 800db40:	f000 fc2e 	bl	800e3a0 <__lshift>
 800db44:	4604      	mov	r4, r0
 800db46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d071      	beq.n	800dc30 <_dtoa_r+0x820>
 800db4c:	4621      	mov	r1, r4
 800db4e:	4628      	mov	r0, r5
 800db50:	f000 fc92 	bl	800e478 <__mcmp>
 800db54:	2800      	cmp	r0, #0
 800db56:	da6b      	bge.n	800dc30 <_dtoa_r+0x820>
 800db58:	2300      	movs	r3, #0
 800db5a:	4629      	mov	r1, r5
 800db5c:	220a      	movs	r2, #10
 800db5e:	4630      	mov	r0, r6
 800db60:	f000 fa70 	bl	800e044 <__multadd>
 800db64:	9b07      	ldr	r3, [sp, #28]
 800db66:	f10b 3bff 	add.w	fp, fp, #4294967295
 800db6a:	4605      	mov	r5, r0
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	f000 8197 	beq.w	800dea0 <_dtoa_r+0xa90>
 800db72:	4639      	mov	r1, r7
 800db74:	2300      	movs	r3, #0
 800db76:	220a      	movs	r2, #10
 800db78:	4630      	mov	r0, r6
 800db7a:	f000 fa63 	bl	800e044 <__multadd>
 800db7e:	f1ba 0f00 	cmp.w	sl, #0
 800db82:	4607      	mov	r7, r0
 800db84:	f300 8093 	bgt.w	800dcae <_dtoa_r+0x89e>
 800db88:	9b06      	ldr	r3, [sp, #24]
 800db8a:	2b02      	cmp	r3, #2
 800db8c:	dc57      	bgt.n	800dc3e <_dtoa_r+0x82e>
 800db8e:	e08e      	b.n	800dcae <_dtoa_r+0x89e>
 800db90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800db92:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800db96:	e751      	b.n	800da3c <_dtoa_r+0x62c>
 800db98:	f109 34ff 	add.w	r4, r9, #4294967295
 800db9c:	42a3      	cmp	r3, r4
 800db9e:	bfbf      	itttt	lt
 800dba0:	1ae2      	sublt	r2, r4, r3
 800dba2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800dba4:	189b      	addlt	r3, r3, r2
 800dba6:	930a      	strlt	r3, [sp, #40]	; 0x28
 800dba8:	bfae      	itee	ge
 800dbaa:	1b1c      	subge	r4, r3, r4
 800dbac:	4623      	movlt	r3, r4
 800dbae:	2400      	movlt	r4, #0
 800dbb0:	f1b9 0f00 	cmp.w	r9, #0
 800dbb4:	bfb5      	itete	lt
 800dbb6:	9a04      	ldrlt	r2, [sp, #16]
 800dbb8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800dbbc:	eba2 0809 	sublt.w	r8, r2, r9
 800dbc0:	464a      	movge	r2, r9
 800dbc2:	bfb8      	it	lt
 800dbc4:	2200      	movlt	r2, #0
 800dbc6:	e73c      	b.n	800da42 <_dtoa_r+0x632>
 800dbc8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800dbcc:	9f07      	ldr	r7, [sp, #28]
 800dbce:	461c      	mov	r4, r3
 800dbd0:	e744      	b.n	800da5c <_dtoa_r+0x64c>
 800dbd2:	461a      	mov	r2, r3
 800dbd4:	e770      	b.n	800dab8 <_dtoa_r+0x6a8>
 800dbd6:	9b06      	ldr	r3, [sp, #24]
 800dbd8:	2b01      	cmp	r3, #1
 800dbda:	dc18      	bgt.n	800dc0e <_dtoa_r+0x7fe>
 800dbdc:	9b02      	ldr	r3, [sp, #8]
 800dbde:	b9b3      	cbnz	r3, 800dc0e <_dtoa_r+0x7fe>
 800dbe0:	9b03      	ldr	r3, [sp, #12]
 800dbe2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800dbe6:	b9a2      	cbnz	r2, 800dc12 <_dtoa_r+0x802>
 800dbe8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800dbec:	0d12      	lsrs	r2, r2, #20
 800dbee:	0512      	lsls	r2, r2, #20
 800dbf0:	b18a      	cbz	r2, 800dc16 <_dtoa_r+0x806>
 800dbf2:	9b04      	ldr	r3, [sp, #16]
 800dbf4:	3301      	adds	r3, #1
 800dbf6:	9304      	str	r3, [sp, #16]
 800dbf8:	9b05      	ldr	r3, [sp, #20]
 800dbfa:	3301      	adds	r3, #1
 800dbfc:	9305      	str	r3, [sp, #20]
 800dbfe:	2301      	movs	r3, #1
 800dc00:	9309      	str	r3, [sp, #36]	; 0x24
 800dc02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	f47f af70 	bne.w	800daea <_dtoa_r+0x6da>
 800dc0a:	2001      	movs	r0, #1
 800dc0c:	e775      	b.n	800dafa <_dtoa_r+0x6ea>
 800dc0e:	2300      	movs	r3, #0
 800dc10:	e7f6      	b.n	800dc00 <_dtoa_r+0x7f0>
 800dc12:	9b02      	ldr	r3, [sp, #8]
 800dc14:	e7f4      	b.n	800dc00 <_dtoa_r+0x7f0>
 800dc16:	9209      	str	r2, [sp, #36]	; 0x24
 800dc18:	e7f3      	b.n	800dc02 <_dtoa_r+0x7f2>
 800dc1a:	d082      	beq.n	800db22 <_dtoa_r+0x712>
 800dc1c:	9b04      	ldr	r3, [sp, #16]
 800dc1e:	321c      	adds	r2, #28
 800dc20:	4413      	add	r3, r2
 800dc22:	9304      	str	r3, [sp, #16]
 800dc24:	9b05      	ldr	r3, [sp, #20]
 800dc26:	4490      	add	r8, r2
 800dc28:	4413      	add	r3, r2
 800dc2a:	e779      	b.n	800db20 <_dtoa_r+0x710>
 800dc2c:	4602      	mov	r2, r0
 800dc2e:	e7f5      	b.n	800dc1c <_dtoa_r+0x80c>
 800dc30:	f1b9 0f00 	cmp.w	r9, #0
 800dc34:	dc36      	bgt.n	800dca4 <_dtoa_r+0x894>
 800dc36:	9b06      	ldr	r3, [sp, #24]
 800dc38:	2b02      	cmp	r3, #2
 800dc3a:	dd33      	ble.n	800dca4 <_dtoa_r+0x894>
 800dc3c:	46ca      	mov	sl, r9
 800dc3e:	f1ba 0f00 	cmp.w	sl, #0
 800dc42:	d10d      	bne.n	800dc60 <_dtoa_r+0x850>
 800dc44:	4621      	mov	r1, r4
 800dc46:	4653      	mov	r3, sl
 800dc48:	2205      	movs	r2, #5
 800dc4a:	4630      	mov	r0, r6
 800dc4c:	f000 f9fa 	bl	800e044 <__multadd>
 800dc50:	4601      	mov	r1, r0
 800dc52:	4604      	mov	r4, r0
 800dc54:	4628      	mov	r0, r5
 800dc56:	f000 fc0f 	bl	800e478 <__mcmp>
 800dc5a:	2800      	cmp	r0, #0
 800dc5c:	f73f ade4 	bgt.w	800d828 <_dtoa_r+0x418>
 800dc60:	9b08      	ldr	r3, [sp, #32]
 800dc62:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800dc66:	ea6f 0b03 	mvn.w	fp, r3
 800dc6a:	f04f 0900 	mov.w	r9, #0
 800dc6e:	4621      	mov	r1, r4
 800dc70:	4630      	mov	r0, r6
 800dc72:	f000 f9c5 	bl	800e000 <_Bfree>
 800dc76:	2f00      	cmp	r7, #0
 800dc78:	f43f aea1 	beq.w	800d9be <_dtoa_r+0x5ae>
 800dc7c:	f1b9 0f00 	cmp.w	r9, #0
 800dc80:	d005      	beq.n	800dc8e <_dtoa_r+0x87e>
 800dc82:	45b9      	cmp	r9, r7
 800dc84:	d003      	beq.n	800dc8e <_dtoa_r+0x87e>
 800dc86:	4649      	mov	r1, r9
 800dc88:	4630      	mov	r0, r6
 800dc8a:	f000 f9b9 	bl	800e000 <_Bfree>
 800dc8e:	4639      	mov	r1, r7
 800dc90:	4630      	mov	r0, r6
 800dc92:	f000 f9b5 	bl	800e000 <_Bfree>
 800dc96:	e692      	b.n	800d9be <_dtoa_r+0x5ae>
 800dc98:	2400      	movs	r4, #0
 800dc9a:	4627      	mov	r7, r4
 800dc9c:	e7e0      	b.n	800dc60 <_dtoa_r+0x850>
 800dc9e:	4693      	mov	fp, r2
 800dca0:	4627      	mov	r7, r4
 800dca2:	e5c1      	b.n	800d828 <_dtoa_r+0x418>
 800dca4:	9b07      	ldr	r3, [sp, #28]
 800dca6:	46ca      	mov	sl, r9
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	f000 8100 	beq.w	800deae <_dtoa_r+0xa9e>
 800dcae:	f1b8 0f00 	cmp.w	r8, #0
 800dcb2:	dd05      	ble.n	800dcc0 <_dtoa_r+0x8b0>
 800dcb4:	4639      	mov	r1, r7
 800dcb6:	4642      	mov	r2, r8
 800dcb8:	4630      	mov	r0, r6
 800dcba:	f000 fb71 	bl	800e3a0 <__lshift>
 800dcbe:	4607      	mov	r7, r0
 800dcc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d05d      	beq.n	800dd82 <_dtoa_r+0x972>
 800dcc6:	6879      	ldr	r1, [r7, #4]
 800dcc8:	4630      	mov	r0, r6
 800dcca:	f000 f959 	bl	800df80 <_Balloc>
 800dcce:	4680      	mov	r8, r0
 800dcd0:	b928      	cbnz	r0, 800dcde <_dtoa_r+0x8ce>
 800dcd2:	4b82      	ldr	r3, [pc, #520]	; (800dedc <_dtoa_r+0xacc>)
 800dcd4:	4602      	mov	r2, r0
 800dcd6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800dcda:	f7ff bbb1 	b.w	800d440 <_dtoa_r+0x30>
 800dcde:	693a      	ldr	r2, [r7, #16]
 800dce0:	3202      	adds	r2, #2
 800dce2:	0092      	lsls	r2, r2, #2
 800dce4:	f107 010c 	add.w	r1, r7, #12
 800dce8:	300c      	adds	r0, #12
 800dcea:	f7ff faf8 	bl	800d2de <memcpy>
 800dcee:	2201      	movs	r2, #1
 800dcf0:	4641      	mov	r1, r8
 800dcf2:	4630      	mov	r0, r6
 800dcf4:	f000 fb54 	bl	800e3a0 <__lshift>
 800dcf8:	9b01      	ldr	r3, [sp, #4]
 800dcfa:	3301      	adds	r3, #1
 800dcfc:	9304      	str	r3, [sp, #16]
 800dcfe:	9b01      	ldr	r3, [sp, #4]
 800dd00:	4453      	add	r3, sl
 800dd02:	9308      	str	r3, [sp, #32]
 800dd04:	9b02      	ldr	r3, [sp, #8]
 800dd06:	f003 0301 	and.w	r3, r3, #1
 800dd0a:	46b9      	mov	r9, r7
 800dd0c:	9307      	str	r3, [sp, #28]
 800dd0e:	4607      	mov	r7, r0
 800dd10:	9b04      	ldr	r3, [sp, #16]
 800dd12:	4621      	mov	r1, r4
 800dd14:	3b01      	subs	r3, #1
 800dd16:	4628      	mov	r0, r5
 800dd18:	9302      	str	r3, [sp, #8]
 800dd1a:	f7ff faee 	bl	800d2fa <quorem>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	3330      	adds	r3, #48	; 0x30
 800dd22:	9005      	str	r0, [sp, #20]
 800dd24:	4649      	mov	r1, r9
 800dd26:	4628      	mov	r0, r5
 800dd28:	9309      	str	r3, [sp, #36]	; 0x24
 800dd2a:	f000 fba5 	bl	800e478 <__mcmp>
 800dd2e:	463a      	mov	r2, r7
 800dd30:	4682      	mov	sl, r0
 800dd32:	4621      	mov	r1, r4
 800dd34:	4630      	mov	r0, r6
 800dd36:	f000 fbbb 	bl	800e4b0 <__mdiff>
 800dd3a:	68c2      	ldr	r2, [r0, #12]
 800dd3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd3e:	4680      	mov	r8, r0
 800dd40:	bb0a      	cbnz	r2, 800dd86 <_dtoa_r+0x976>
 800dd42:	4601      	mov	r1, r0
 800dd44:	4628      	mov	r0, r5
 800dd46:	f000 fb97 	bl	800e478 <__mcmp>
 800dd4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd4c:	4602      	mov	r2, r0
 800dd4e:	4641      	mov	r1, r8
 800dd50:	4630      	mov	r0, r6
 800dd52:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800dd56:	f000 f953 	bl	800e000 <_Bfree>
 800dd5a:	9b06      	ldr	r3, [sp, #24]
 800dd5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dd5e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800dd62:	ea43 0102 	orr.w	r1, r3, r2
 800dd66:	9b07      	ldr	r3, [sp, #28]
 800dd68:	4319      	orrs	r1, r3
 800dd6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd6c:	d10d      	bne.n	800dd8a <_dtoa_r+0x97a>
 800dd6e:	2b39      	cmp	r3, #57	; 0x39
 800dd70:	d029      	beq.n	800ddc6 <_dtoa_r+0x9b6>
 800dd72:	f1ba 0f00 	cmp.w	sl, #0
 800dd76:	dd01      	ble.n	800dd7c <_dtoa_r+0x96c>
 800dd78:	9b05      	ldr	r3, [sp, #20]
 800dd7a:	3331      	adds	r3, #49	; 0x31
 800dd7c:	9a02      	ldr	r2, [sp, #8]
 800dd7e:	7013      	strb	r3, [r2, #0]
 800dd80:	e775      	b.n	800dc6e <_dtoa_r+0x85e>
 800dd82:	4638      	mov	r0, r7
 800dd84:	e7b8      	b.n	800dcf8 <_dtoa_r+0x8e8>
 800dd86:	2201      	movs	r2, #1
 800dd88:	e7e1      	b.n	800dd4e <_dtoa_r+0x93e>
 800dd8a:	f1ba 0f00 	cmp.w	sl, #0
 800dd8e:	db06      	blt.n	800dd9e <_dtoa_r+0x98e>
 800dd90:	9906      	ldr	r1, [sp, #24]
 800dd92:	ea41 0a0a 	orr.w	sl, r1, sl
 800dd96:	9907      	ldr	r1, [sp, #28]
 800dd98:	ea5a 0a01 	orrs.w	sl, sl, r1
 800dd9c:	d120      	bne.n	800dde0 <_dtoa_r+0x9d0>
 800dd9e:	2a00      	cmp	r2, #0
 800dda0:	ddec      	ble.n	800dd7c <_dtoa_r+0x96c>
 800dda2:	4629      	mov	r1, r5
 800dda4:	2201      	movs	r2, #1
 800dda6:	4630      	mov	r0, r6
 800dda8:	9304      	str	r3, [sp, #16]
 800ddaa:	f000 faf9 	bl	800e3a0 <__lshift>
 800ddae:	4621      	mov	r1, r4
 800ddb0:	4605      	mov	r5, r0
 800ddb2:	f000 fb61 	bl	800e478 <__mcmp>
 800ddb6:	2800      	cmp	r0, #0
 800ddb8:	9b04      	ldr	r3, [sp, #16]
 800ddba:	dc02      	bgt.n	800ddc2 <_dtoa_r+0x9b2>
 800ddbc:	d1de      	bne.n	800dd7c <_dtoa_r+0x96c>
 800ddbe:	07da      	lsls	r2, r3, #31
 800ddc0:	d5dc      	bpl.n	800dd7c <_dtoa_r+0x96c>
 800ddc2:	2b39      	cmp	r3, #57	; 0x39
 800ddc4:	d1d8      	bne.n	800dd78 <_dtoa_r+0x968>
 800ddc6:	9a02      	ldr	r2, [sp, #8]
 800ddc8:	2339      	movs	r3, #57	; 0x39
 800ddca:	7013      	strb	r3, [r2, #0]
 800ddcc:	4643      	mov	r3, r8
 800ddce:	4698      	mov	r8, r3
 800ddd0:	3b01      	subs	r3, #1
 800ddd2:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800ddd6:	2a39      	cmp	r2, #57	; 0x39
 800ddd8:	d051      	beq.n	800de7e <_dtoa_r+0xa6e>
 800ddda:	3201      	adds	r2, #1
 800dddc:	701a      	strb	r2, [r3, #0]
 800ddde:	e746      	b.n	800dc6e <_dtoa_r+0x85e>
 800dde0:	2a00      	cmp	r2, #0
 800dde2:	dd03      	ble.n	800ddec <_dtoa_r+0x9dc>
 800dde4:	2b39      	cmp	r3, #57	; 0x39
 800dde6:	d0ee      	beq.n	800ddc6 <_dtoa_r+0x9b6>
 800dde8:	3301      	adds	r3, #1
 800ddea:	e7c7      	b.n	800dd7c <_dtoa_r+0x96c>
 800ddec:	9a04      	ldr	r2, [sp, #16]
 800ddee:	9908      	ldr	r1, [sp, #32]
 800ddf0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ddf4:	428a      	cmp	r2, r1
 800ddf6:	d02b      	beq.n	800de50 <_dtoa_r+0xa40>
 800ddf8:	4629      	mov	r1, r5
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	220a      	movs	r2, #10
 800ddfe:	4630      	mov	r0, r6
 800de00:	f000 f920 	bl	800e044 <__multadd>
 800de04:	45b9      	cmp	r9, r7
 800de06:	4605      	mov	r5, r0
 800de08:	f04f 0300 	mov.w	r3, #0
 800de0c:	f04f 020a 	mov.w	r2, #10
 800de10:	4649      	mov	r1, r9
 800de12:	4630      	mov	r0, r6
 800de14:	d107      	bne.n	800de26 <_dtoa_r+0xa16>
 800de16:	f000 f915 	bl	800e044 <__multadd>
 800de1a:	4681      	mov	r9, r0
 800de1c:	4607      	mov	r7, r0
 800de1e:	9b04      	ldr	r3, [sp, #16]
 800de20:	3301      	adds	r3, #1
 800de22:	9304      	str	r3, [sp, #16]
 800de24:	e774      	b.n	800dd10 <_dtoa_r+0x900>
 800de26:	f000 f90d 	bl	800e044 <__multadd>
 800de2a:	4639      	mov	r1, r7
 800de2c:	4681      	mov	r9, r0
 800de2e:	2300      	movs	r3, #0
 800de30:	220a      	movs	r2, #10
 800de32:	4630      	mov	r0, r6
 800de34:	f000 f906 	bl	800e044 <__multadd>
 800de38:	4607      	mov	r7, r0
 800de3a:	e7f0      	b.n	800de1e <_dtoa_r+0xa0e>
 800de3c:	f1ba 0f00 	cmp.w	sl, #0
 800de40:	9a01      	ldr	r2, [sp, #4]
 800de42:	bfcc      	ite	gt
 800de44:	46d0      	movgt	r8, sl
 800de46:	f04f 0801 	movle.w	r8, #1
 800de4a:	4490      	add	r8, r2
 800de4c:	f04f 0900 	mov.w	r9, #0
 800de50:	4629      	mov	r1, r5
 800de52:	2201      	movs	r2, #1
 800de54:	4630      	mov	r0, r6
 800de56:	9302      	str	r3, [sp, #8]
 800de58:	f000 faa2 	bl	800e3a0 <__lshift>
 800de5c:	4621      	mov	r1, r4
 800de5e:	4605      	mov	r5, r0
 800de60:	f000 fb0a 	bl	800e478 <__mcmp>
 800de64:	2800      	cmp	r0, #0
 800de66:	dcb1      	bgt.n	800ddcc <_dtoa_r+0x9bc>
 800de68:	d102      	bne.n	800de70 <_dtoa_r+0xa60>
 800de6a:	9b02      	ldr	r3, [sp, #8]
 800de6c:	07db      	lsls	r3, r3, #31
 800de6e:	d4ad      	bmi.n	800ddcc <_dtoa_r+0x9bc>
 800de70:	4643      	mov	r3, r8
 800de72:	4698      	mov	r8, r3
 800de74:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800de78:	2a30      	cmp	r2, #48	; 0x30
 800de7a:	d0fa      	beq.n	800de72 <_dtoa_r+0xa62>
 800de7c:	e6f7      	b.n	800dc6e <_dtoa_r+0x85e>
 800de7e:	9a01      	ldr	r2, [sp, #4]
 800de80:	429a      	cmp	r2, r3
 800de82:	d1a4      	bne.n	800ddce <_dtoa_r+0x9be>
 800de84:	f10b 0b01 	add.w	fp, fp, #1
 800de88:	2331      	movs	r3, #49	; 0x31
 800de8a:	e778      	b.n	800dd7e <_dtoa_r+0x96e>
 800de8c:	4b14      	ldr	r3, [pc, #80]	; (800dee0 <_dtoa_r+0xad0>)
 800de8e:	f7ff bb2a 	b.w	800d4e6 <_dtoa_r+0xd6>
 800de92:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800de94:	2b00      	cmp	r3, #0
 800de96:	f47f ab05 	bne.w	800d4a4 <_dtoa_r+0x94>
 800de9a:	4b12      	ldr	r3, [pc, #72]	; (800dee4 <_dtoa_r+0xad4>)
 800de9c:	f7ff bb23 	b.w	800d4e6 <_dtoa_r+0xd6>
 800dea0:	f1ba 0f00 	cmp.w	sl, #0
 800dea4:	dc03      	bgt.n	800deae <_dtoa_r+0xa9e>
 800dea6:	9b06      	ldr	r3, [sp, #24]
 800dea8:	2b02      	cmp	r3, #2
 800deaa:	f73f aec8 	bgt.w	800dc3e <_dtoa_r+0x82e>
 800deae:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800deb2:	4621      	mov	r1, r4
 800deb4:	4628      	mov	r0, r5
 800deb6:	f7ff fa20 	bl	800d2fa <quorem>
 800deba:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800debe:	f808 3b01 	strb.w	r3, [r8], #1
 800dec2:	9a01      	ldr	r2, [sp, #4]
 800dec4:	eba8 0202 	sub.w	r2, r8, r2
 800dec8:	4592      	cmp	sl, r2
 800deca:	ddb7      	ble.n	800de3c <_dtoa_r+0xa2c>
 800decc:	4629      	mov	r1, r5
 800dece:	2300      	movs	r3, #0
 800ded0:	220a      	movs	r2, #10
 800ded2:	4630      	mov	r0, r6
 800ded4:	f000 f8b6 	bl	800e044 <__multadd>
 800ded8:	4605      	mov	r5, r0
 800deda:	e7ea      	b.n	800deb2 <_dtoa_r+0xaa2>
 800dedc:	0800f2b8 	.word	0x0800f2b8
 800dee0:	0800f218 	.word	0x0800f218
 800dee4:	0800f23c 	.word	0x0800f23c

0800dee8 <_free_r>:
 800dee8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800deea:	2900      	cmp	r1, #0
 800deec:	d044      	beq.n	800df78 <_free_r+0x90>
 800deee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800def2:	9001      	str	r0, [sp, #4]
 800def4:	2b00      	cmp	r3, #0
 800def6:	f1a1 0404 	sub.w	r4, r1, #4
 800defa:	bfb8      	it	lt
 800defc:	18e4      	addlt	r4, r4, r3
 800defe:	f7fe fbe9 	bl	800c6d4 <__malloc_lock>
 800df02:	4a1e      	ldr	r2, [pc, #120]	; (800df7c <_free_r+0x94>)
 800df04:	9801      	ldr	r0, [sp, #4]
 800df06:	6813      	ldr	r3, [r2, #0]
 800df08:	b933      	cbnz	r3, 800df18 <_free_r+0x30>
 800df0a:	6063      	str	r3, [r4, #4]
 800df0c:	6014      	str	r4, [r2, #0]
 800df0e:	b003      	add	sp, #12
 800df10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800df14:	f7fe bbe4 	b.w	800c6e0 <__malloc_unlock>
 800df18:	42a3      	cmp	r3, r4
 800df1a:	d908      	bls.n	800df2e <_free_r+0x46>
 800df1c:	6825      	ldr	r5, [r4, #0]
 800df1e:	1961      	adds	r1, r4, r5
 800df20:	428b      	cmp	r3, r1
 800df22:	bf01      	itttt	eq
 800df24:	6819      	ldreq	r1, [r3, #0]
 800df26:	685b      	ldreq	r3, [r3, #4]
 800df28:	1949      	addeq	r1, r1, r5
 800df2a:	6021      	streq	r1, [r4, #0]
 800df2c:	e7ed      	b.n	800df0a <_free_r+0x22>
 800df2e:	461a      	mov	r2, r3
 800df30:	685b      	ldr	r3, [r3, #4]
 800df32:	b10b      	cbz	r3, 800df38 <_free_r+0x50>
 800df34:	42a3      	cmp	r3, r4
 800df36:	d9fa      	bls.n	800df2e <_free_r+0x46>
 800df38:	6811      	ldr	r1, [r2, #0]
 800df3a:	1855      	adds	r5, r2, r1
 800df3c:	42a5      	cmp	r5, r4
 800df3e:	d10b      	bne.n	800df58 <_free_r+0x70>
 800df40:	6824      	ldr	r4, [r4, #0]
 800df42:	4421      	add	r1, r4
 800df44:	1854      	adds	r4, r2, r1
 800df46:	42a3      	cmp	r3, r4
 800df48:	6011      	str	r1, [r2, #0]
 800df4a:	d1e0      	bne.n	800df0e <_free_r+0x26>
 800df4c:	681c      	ldr	r4, [r3, #0]
 800df4e:	685b      	ldr	r3, [r3, #4]
 800df50:	6053      	str	r3, [r2, #4]
 800df52:	440c      	add	r4, r1
 800df54:	6014      	str	r4, [r2, #0]
 800df56:	e7da      	b.n	800df0e <_free_r+0x26>
 800df58:	d902      	bls.n	800df60 <_free_r+0x78>
 800df5a:	230c      	movs	r3, #12
 800df5c:	6003      	str	r3, [r0, #0]
 800df5e:	e7d6      	b.n	800df0e <_free_r+0x26>
 800df60:	6825      	ldr	r5, [r4, #0]
 800df62:	1961      	adds	r1, r4, r5
 800df64:	428b      	cmp	r3, r1
 800df66:	bf04      	itt	eq
 800df68:	6819      	ldreq	r1, [r3, #0]
 800df6a:	685b      	ldreq	r3, [r3, #4]
 800df6c:	6063      	str	r3, [r4, #4]
 800df6e:	bf04      	itt	eq
 800df70:	1949      	addeq	r1, r1, r5
 800df72:	6021      	streq	r1, [r4, #0]
 800df74:	6054      	str	r4, [r2, #4]
 800df76:	e7ca      	b.n	800df0e <_free_r+0x26>
 800df78:	b003      	add	sp, #12
 800df7a:	bd30      	pop	{r4, r5, pc}
 800df7c:	24010d68 	.word	0x24010d68

0800df80 <_Balloc>:
 800df80:	b570      	push	{r4, r5, r6, lr}
 800df82:	69c6      	ldr	r6, [r0, #28]
 800df84:	4604      	mov	r4, r0
 800df86:	460d      	mov	r5, r1
 800df88:	b976      	cbnz	r6, 800dfa8 <_Balloc+0x28>
 800df8a:	2010      	movs	r0, #16
 800df8c:	f7fe faf2 	bl	800c574 <malloc>
 800df90:	4602      	mov	r2, r0
 800df92:	61e0      	str	r0, [r4, #28]
 800df94:	b920      	cbnz	r0, 800dfa0 <_Balloc+0x20>
 800df96:	4b18      	ldr	r3, [pc, #96]	; (800dff8 <_Balloc+0x78>)
 800df98:	4818      	ldr	r0, [pc, #96]	; (800dffc <_Balloc+0x7c>)
 800df9a:	216b      	movs	r1, #107	; 0x6b
 800df9c:	f000 fd8c 	bl	800eab8 <__assert_func>
 800dfa0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dfa4:	6006      	str	r6, [r0, #0]
 800dfa6:	60c6      	str	r6, [r0, #12]
 800dfa8:	69e6      	ldr	r6, [r4, #28]
 800dfaa:	68f3      	ldr	r3, [r6, #12]
 800dfac:	b183      	cbz	r3, 800dfd0 <_Balloc+0x50>
 800dfae:	69e3      	ldr	r3, [r4, #28]
 800dfb0:	68db      	ldr	r3, [r3, #12]
 800dfb2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dfb6:	b9b8      	cbnz	r0, 800dfe8 <_Balloc+0x68>
 800dfb8:	2101      	movs	r1, #1
 800dfba:	fa01 f605 	lsl.w	r6, r1, r5
 800dfbe:	1d72      	adds	r2, r6, #5
 800dfc0:	0092      	lsls	r2, r2, #2
 800dfc2:	4620      	mov	r0, r4
 800dfc4:	f000 fd96 	bl	800eaf4 <_calloc_r>
 800dfc8:	b160      	cbz	r0, 800dfe4 <_Balloc+0x64>
 800dfca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dfce:	e00e      	b.n	800dfee <_Balloc+0x6e>
 800dfd0:	2221      	movs	r2, #33	; 0x21
 800dfd2:	2104      	movs	r1, #4
 800dfd4:	4620      	mov	r0, r4
 800dfd6:	f000 fd8d 	bl	800eaf4 <_calloc_r>
 800dfda:	69e3      	ldr	r3, [r4, #28]
 800dfdc:	60f0      	str	r0, [r6, #12]
 800dfde:	68db      	ldr	r3, [r3, #12]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d1e4      	bne.n	800dfae <_Balloc+0x2e>
 800dfe4:	2000      	movs	r0, #0
 800dfe6:	bd70      	pop	{r4, r5, r6, pc}
 800dfe8:	6802      	ldr	r2, [r0, #0]
 800dfea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dfee:	2300      	movs	r3, #0
 800dff0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dff4:	e7f7      	b.n	800dfe6 <_Balloc+0x66>
 800dff6:	bf00      	nop
 800dff8:	0800f249 	.word	0x0800f249
 800dffc:	0800f2c9 	.word	0x0800f2c9

0800e000 <_Bfree>:
 800e000:	b570      	push	{r4, r5, r6, lr}
 800e002:	69c6      	ldr	r6, [r0, #28]
 800e004:	4605      	mov	r5, r0
 800e006:	460c      	mov	r4, r1
 800e008:	b976      	cbnz	r6, 800e028 <_Bfree+0x28>
 800e00a:	2010      	movs	r0, #16
 800e00c:	f7fe fab2 	bl	800c574 <malloc>
 800e010:	4602      	mov	r2, r0
 800e012:	61e8      	str	r0, [r5, #28]
 800e014:	b920      	cbnz	r0, 800e020 <_Bfree+0x20>
 800e016:	4b09      	ldr	r3, [pc, #36]	; (800e03c <_Bfree+0x3c>)
 800e018:	4809      	ldr	r0, [pc, #36]	; (800e040 <_Bfree+0x40>)
 800e01a:	218f      	movs	r1, #143	; 0x8f
 800e01c:	f000 fd4c 	bl	800eab8 <__assert_func>
 800e020:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e024:	6006      	str	r6, [r0, #0]
 800e026:	60c6      	str	r6, [r0, #12]
 800e028:	b13c      	cbz	r4, 800e03a <_Bfree+0x3a>
 800e02a:	69eb      	ldr	r3, [r5, #28]
 800e02c:	6862      	ldr	r2, [r4, #4]
 800e02e:	68db      	ldr	r3, [r3, #12]
 800e030:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e034:	6021      	str	r1, [r4, #0]
 800e036:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e03a:	bd70      	pop	{r4, r5, r6, pc}
 800e03c:	0800f249 	.word	0x0800f249
 800e040:	0800f2c9 	.word	0x0800f2c9

0800e044 <__multadd>:
 800e044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e048:	690d      	ldr	r5, [r1, #16]
 800e04a:	4607      	mov	r7, r0
 800e04c:	460c      	mov	r4, r1
 800e04e:	461e      	mov	r6, r3
 800e050:	f101 0c14 	add.w	ip, r1, #20
 800e054:	2000      	movs	r0, #0
 800e056:	f8dc 3000 	ldr.w	r3, [ip]
 800e05a:	b299      	uxth	r1, r3
 800e05c:	fb02 6101 	mla	r1, r2, r1, r6
 800e060:	0c1e      	lsrs	r6, r3, #16
 800e062:	0c0b      	lsrs	r3, r1, #16
 800e064:	fb02 3306 	mla	r3, r2, r6, r3
 800e068:	b289      	uxth	r1, r1
 800e06a:	3001      	adds	r0, #1
 800e06c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e070:	4285      	cmp	r5, r0
 800e072:	f84c 1b04 	str.w	r1, [ip], #4
 800e076:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e07a:	dcec      	bgt.n	800e056 <__multadd+0x12>
 800e07c:	b30e      	cbz	r6, 800e0c2 <__multadd+0x7e>
 800e07e:	68a3      	ldr	r3, [r4, #8]
 800e080:	42ab      	cmp	r3, r5
 800e082:	dc19      	bgt.n	800e0b8 <__multadd+0x74>
 800e084:	6861      	ldr	r1, [r4, #4]
 800e086:	4638      	mov	r0, r7
 800e088:	3101      	adds	r1, #1
 800e08a:	f7ff ff79 	bl	800df80 <_Balloc>
 800e08e:	4680      	mov	r8, r0
 800e090:	b928      	cbnz	r0, 800e09e <__multadd+0x5a>
 800e092:	4602      	mov	r2, r0
 800e094:	4b0c      	ldr	r3, [pc, #48]	; (800e0c8 <__multadd+0x84>)
 800e096:	480d      	ldr	r0, [pc, #52]	; (800e0cc <__multadd+0x88>)
 800e098:	21ba      	movs	r1, #186	; 0xba
 800e09a:	f000 fd0d 	bl	800eab8 <__assert_func>
 800e09e:	6922      	ldr	r2, [r4, #16]
 800e0a0:	3202      	adds	r2, #2
 800e0a2:	f104 010c 	add.w	r1, r4, #12
 800e0a6:	0092      	lsls	r2, r2, #2
 800e0a8:	300c      	adds	r0, #12
 800e0aa:	f7ff f918 	bl	800d2de <memcpy>
 800e0ae:	4621      	mov	r1, r4
 800e0b0:	4638      	mov	r0, r7
 800e0b2:	f7ff ffa5 	bl	800e000 <_Bfree>
 800e0b6:	4644      	mov	r4, r8
 800e0b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e0bc:	3501      	adds	r5, #1
 800e0be:	615e      	str	r6, [r3, #20]
 800e0c0:	6125      	str	r5, [r4, #16]
 800e0c2:	4620      	mov	r0, r4
 800e0c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0c8:	0800f2b8 	.word	0x0800f2b8
 800e0cc:	0800f2c9 	.word	0x0800f2c9

0800e0d0 <__hi0bits>:
 800e0d0:	0c03      	lsrs	r3, r0, #16
 800e0d2:	041b      	lsls	r3, r3, #16
 800e0d4:	b9d3      	cbnz	r3, 800e10c <__hi0bits+0x3c>
 800e0d6:	0400      	lsls	r0, r0, #16
 800e0d8:	2310      	movs	r3, #16
 800e0da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e0de:	bf04      	itt	eq
 800e0e0:	0200      	lsleq	r0, r0, #8
 800e0e2:	3308      	addeq	r3, #8
 800e0e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e0e8:	bf04      	itt	eq
 800e0ea:	0100      	lsleq	r0, r0, #4
 800e0ec:	3304      	addeq	r3, #4
 800e0ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e0f2:	bf04      	itt	eq
 800e0f4:	0080      	lsleq	r0, r0, #2
 800e0f6:	3302      	addeq	r3, #2
 800e0f8:	2800      	cmp	r0, #0
 800e0fa:	db05      	blt.n	800e108 <__hi0bits+0x38>
 800e0fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e100:	f103 0301 	add.w	r3, r3, #1
 800e104:	bf08      	it	eq
 800e106:	2320      	moveq	r3, #32
 800e108:	4618      	mov	r0, r3
 800e10a:	4770      	bx	lr
 800e10c:	2300      	movs	r3, #0
 800e10e:	e7e4      	b.n	800e0da <__hi0bits+0xa>

0800e110 <__lo0bits>:
 800e110:	6803      	ldr	r3, [r0, #0]
 800e112:	f013 0207 	ands.w	r2, r3, #7
 800e116:	d00c      	beq.n	800e132 <__lo0bits+0x22>
 800e118:	07d9      	lsls	r1, r3, #31
 800e11a:	d422      	bmi.n	800e162 <__lo0bits+0x52>
 800e11c:	079a      	lsls	r2, r3, #30
 800e11e:	bf49      	itett	mi
 800e120:	085b      	lsrmi	r3, r3, #1
 800e122:	089b      	lsrpl	r3, r3, #2
 800e124:	6003      	strmi	r3, [r0, #0]
 800e126:	2201      	movmi	r2, #1
 800e128:	bf5c      	itt	pl
 800e12a:	6003      	strpl	r3, [r0, #0]
 800e12c:	2202      	movpl	r2, #2
 800e12e:	4610      	mov	r0, r2
 800e130:	4770      	bx	lr
 800e132:	b299      	uxth	r1, r3
 800e134:	b909      	cbnz	r1, 800e13a <__lo0bits+0x2a>
 800e136:	0c1b      	lsrs	r3, r3, #16
 800e138:	2210      	movs	r2, #16
 800e13a:	b2d9      	uxtb	r1, r3
 800e13c:	b909      	cbnz	r1, 800e142 <__lo0bits+0x32>
 800e13e:	3208      	adds	r2, #8
 800e140:	0a1b      	lsrs	r3, r3, #8
 800e142:	0719      	lsls	r1, r3, #28
 800e144:	bf04      	itt	eq
 800e146:	091b      	lsreq	r3, r3, #4
 800e148:	3204      	addeq	r2, #4
 800e14a:	0799      	lsls	r1, r3, #30
 800e14c:	bf04      	itt	eq
 800e14e:	089b      	lsreq	r3, r3, #2
 800e150:	3202      	addeq	r2, #2
 800e152:	07d9      	lsls	r1, r3, #31
 800e154:	d403      	bmi.n	800e15e <__lo0bits+0x4e>
 800e156:	085b      	lsrs	r3, r3, #1
 800e158:	f102 0201 	add.w	r2, r2, #1
 800e15c:	d003      	beq.n	800e166 <__lo0bits+0x56>
 800e15e:	6003      	str	r3, [r0, #0]
 800e160:	e7e5      	b.n	800e12e <__lo0bits+0x1e>
 800e162:	2200      	movs	r2, #0
 800e164:	e7e3      	b.n	800e12e <__lo0bits+0x1e>
 800e166:	2220      	movs	r2, #32
 800e168:	e7e1      	b.n	800e12e <__lo0bits+0x1e>
	...

0800e16c <__i2b>:
 800e16c:	b510      	push	{r4, lr}
 800e16e:	460c      	mov	r4, r1
 800e170:	2101      	movs	r1, #1
 800e172:	f7ff ff05 	bl	800df80 <_Balloc>
 800e176:	4602      	mov	r2, r0
 800e178:	b928      	cbnz	r0, 800e186 <__i2b+0x1a>
 800e17a:	4b05      	ldr	r3, [pc, #20]	; (800e190 <__i2b+0x24>)
 800e17c:	4805      	ldr	r0, [pc, #20]	; (800e194 <__i2b+0x28>)
 800e17e:	f240 1145 	movw	r1, #325	; 0x145
 800e182:	f000 fc99 	bl	800eab8 <__assert_func>
 800e186:	2301      	movs	r3, #1
 800e188:	6144      	str	r4, [r0, #20]
 800e18a:	6103      	str	r3, [r0, #16]
 800e18c:	bd10      	pop	{r4, pc}
 800e18e:	bf00      	nop
 800e190:	0800f2b8 	.word	0x0800f2b8
 800e194:	0800f2c9 	.word	0x0800f2c9

0800e198 <__multiply>:
 800e198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e19c:	4691      	mov	r9, r2
 800e19e:	690a      	ldr	r2, [r1, #16]
 800e1a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e1a4:	429a      	cmp	r2, r3
 800e1a6:	bfb8      	it	lt
 800e1a8:	460b      	movlt	r3, r1
 800e1aa:	460c      	mov	r4, r1
 800e1ac:	bfbc      	itt	lt
 800e1ae:	464c      	movlt	r4, r9
 800e1b0:	4699      	movlt	r9, r3
 800e1b2:	6927      	ldr	r7, [r4, #16]
 800e1b4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e1b8:	68a3      	ldr	r3, [r4, #8]
 800e1ba:	6861      	ldr	r1, [r4, #4]
 800e1bc:	eb07 060a 	add.w	r6, r7, sl
 800e1c0:	42b3      	cmp	r3, r6
 800e1c2:	b085      	sub	sp, #20
 800e1c4:	bfb8      	it	lt
 800e1c6:	3101      	addlt	r1, #1
 800e1c8:	f7ff feda 	bl	800df80 <_Balloc>
 800e1cc:	b930      	cbnz	r0, 800e1dc <__multiply+0x44>
 800e1ce:	4602      	mov	r2, r0
 800e1d0:	4b44      	ldr	r3, [pc, #272]	; (800e2e4 <__multiply+0x14c>)
 800e1d2:	4845      	ldr	r0, [pc, #276]	; (800e2e8 <__multiply+0x150>)
 800e1d4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800e1d8:	f000 fc6e 	bl	800eab8 <__assert_func>
 800e1dc:	f100 0514 	add.w	r5, r0, #20
 800e1e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e1e4:	462b      	mov	r3, r5
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	4543      	cmp	r3, r8
 800e1ea:	d321      	bcc.n	800e230 <__multiply+0x98>
 800e1ec:	f104 0314 	add.w	r3, r4, #20
 800e1f0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e1f4:	f109 0314 	add.w	r3, r9, #20
 800e1f8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e1fc:	9202      	str	r2, [sp, #8]
 800e1fe:	1b3a      	subs	r2, r7, r4
 800e200:	3a15      	subs	r2, #21
 800e202:	f022 0203 	bic.w	r2, r2, #3
 800e206:	3204      	adds	r2, #4
 800e208:	f104 0115 	add.w	r1, r4, #21
 800e20c:	428f      	cmp	r7, r1
 800e20e:	bf38      	it	cc
 800e210:	2204      	movcc	r2, #4
 800e212:	9201      	str	r2, [sp, #4]
 800e214:	9a02      	ldr	r2, [sp, #8]
 800e216:	9303      	str	r3, [sp, #12]
 800e218:	429a      	cmp	r2, r3
 800e21a:	d80c      	bhi.n	800e236 <__multiply+0x9e>
 800e21c:	2e00      	cmp	r6, #0
 800e21e:	dd03      	ble.n	800e228 <__multiply+0x90>
 800e220:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e224:	2b00      	cmp	r3, #0
 800e226:	d05b      	beq.n	800e2e0 <__multiply+0x148>
 800e228:	6106      	str	r6, [r0, #16]
 800e22a:	b005      	add	sp, #20
 800e22c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e230:	f843 2b04 	str.w	r2, [r3], #4
 800e234:	e7d8      	b.n	800e1e8 <__multiply+0x50>
 800e236:	f8b3 a000 	ldrh.w	sl, [r3]
 800e23a:	f1ba 0f00 	cmp.w	sl, #0
 800e23e:	d024      	beq.n	800e28a <__multiply+0xf2>
 800e240:	f104 0e14 	add.w	lr, r4, #20
 800e244:	46a9      	mov	r9, r5
 800e246:	f04f 0c00 	mov.w	ip, #0
 800e24a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e24e:	f8d9 1000 	ldr.w	r1, [r9]
 800e252:	fa1f fb82 	uxth.w	fp, r2
 800e256:	b289      	uxth	r1, r1
 800e258:	fb0a 110b 	mla	r1, sl, fp, r1
 800e25c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e260:	f8d9 2000 	ldr.w	r2, [r9]
 800e264:	4461      	add	r1, ip
 800e266:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e26a:	fb0a c20b 	mla	r2, sl, fp, ip
 800e26e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e272:	b289      	uxth	r1, r1
 800e274:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e278:	4577      	cmp	r7, lr
 800e27a:	f849 1b04 	str.w	r1, [r9], #4
 800e27e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e282:	d8e2      	bhi.n	800e24a <__multiply+0xb2>
 800e284:	9a01      	ldr	r2, [sp, #4]
 800e286:	f845 c002 	str.w	ip, [r5, r2]
 800e28a:	9a03      	ldr	r2, [sp, #12]
 800e28c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e290:	3304      	adds	r3, #4
 800e292:	f1b9 0f00 	cmp.w	r9, #0
 800e296:	d021      	beq.n	800e2dc <__multiply+0x144>
 800e298:	6829      	ldr	r1, [r5, #0]
 800e29a:	f104 0c14 	add.w	ip, r4, #20
 800e29e:	46ae      	mov	lr, r5
 800e2a0:	f04f 0a00 	mov.w	sl, #0
 800e2a4:	f8bc b000 	ldrh.w	fp, [ip]
 800e2a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e2ac:	fb09 220b 	mla	r2, r9, fp, r2
 800e2b0:	4452      	add	r2, sl
 800e2b2:	b289      	uxth	r1, r1
 800e2b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e2b8:	f84e 1b04 	str.w	r1, [lr], #4
 800e2bc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e2c0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e2c4:	f8be 1000 	ldrh.w	r1, [lr]
 800e2c8:	fb09 110a 	mla	r1, r9, sl, r1
 800e2cc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800e2d0:	4567      	cmp	r7, ip
 800e2d2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e2d6:	d8e5      	bhi.n	800e2a4 <__multiply+0x10c>
 800e2d8:	9a01      	ldr	r2, [sp, #4]
 800e2da:	50a9      	str	r1, [r5, r2]
 800e2dc:	3504      	adds	r5, #4
 800e2de:	e799      	b.n	800e214 <__multiply+0x7c>
 800e2e0:	3e01      	subs	r6, #1
 800e2e2:	e79b      	b.n	800e21c <__multiply+0x84>
 800e2e4:	0800f2b8 	.word	0x0800f2b8
 800e2e8:	0800f2c9 	.word	0x0800f2c9

0800e2ec <__pow5mult>:
 800e2ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2f0:	4615      	mov	r5, r2
 800e2f2:	f012 0203 	ands.w	r2, r2, #3
 800e2f6:	4606      	mov	r6, r0
 800e2f8:	460f      	mov	r7, r1
 800e2fa:	d007      	beq.n	800e30c <__pow5mult+0x20>
 800e2fc:	4c25      	ldr	r4, [pc, #148]	; (800e394 <__pow5mult+0xa8>)
 800e2fe:	3a01      	subs	r2, #1
 800e300:	2300      	movs	r3, #0
 800e302:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e306:	f7ff fe9d 	bl	800e044 <__multadd>
 800e30a:	4607      	mov	r7, r0
 800e30c:	10ad      	asrs	r5, r5, #2
 800e30e:	d03d      	beq.n	800e38c <__pow5mult+0xa0>
 800e310:	69f4      	ldr	r4, [r6, #28]
 800e312:	b97c      	cbnz	r4, 800e334 <__pow5mult+0x48>
 800e314:	2010      	movs	r0, #16
 800e316:	f7fe f92d 	bl	800c574 <malloc>
 800e31a:	4602      	mov	r2, r0
 800e31c:	61f0      	str	r0, [r6, #28]
 800e31e:	b928      	cbnz	r0, 800e32c <__pow5mult+0x40>
 800e320:	4b1d      	ldr	r3, [pc, #116]	; (800e398 <__pow5mult+0xac>)
 800e322:	481e      	ldr	r0, [pc, #120]	; (800e39c <__pow5mult+0xb0>)
 800e324:	f240 11b3 	movw	r1, #435	; 0x1b3
 800e328:	f000 fbc6 	bl	800eab8 <__assert_func>
 800e32c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e330:	6004      	str	r4, [r0, #0]
 800e332:	60c4      	str	r4, [r0, #12]
 800e334:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800e338:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e33c:	b94c      	cbnz	r4, 800e352 <__pow5mult+0x66>
 800e33e:	f240 2171 	movw	r1, #625	; 0x271
 800e342:	4630      	mov	r0, r6
 800e344:	f7ff ff12 	bl	800e16c <__i2b>
 800e348:	2300      	movs	r3, #0
 800e34a:	f8c8 0008 	str.w	r0, [r8, #8]
 800e34e:	4604      	mov	r4, r0
 800e350:	6003      	str	r3, [r0, #0]
 800e352:	f04f 0900 	mov.w	r9, #0
 800e356:	07eb      	lsls	r3, r5, #31
 800e358:	d50a      	bpl.n	800e370 <__pow5mult+0x84>
 800e35a:	4639      	mov	r1, r7
 800e35c:	4622      	mov	r2, r4
 800e35e:	4630      	mov	r0, r6
 800e360:	f7ff ff1a 	bl	800e198 <__multiply>
 800e364:	4639      	mov	r1, r7
 800e366:	4680      	mov	r8, r0
 800e368:	4630      	mov	r0, r6
 800e36a:	f7ff fe49 	bl	800e000 <_Bfree>
 800e36e:	4647      	mov	r7, r8
 800e370:	106d      	asrs	r5, r5, #1
 800e372:	d00b      	beq.n	800e38c <__pow5mult+0xa0>
 800e374:	6820      	ldr	r0, [r4, #0]
 800e376:	b938      	cbnz	r0, 800e388 <__pow5mult+0x9c>
 800e378:	4622      	mov	r2, r4
 800e37a:	4621      	mov	r1, r4
 800e37c:	4630      	mov	r0, r6
 800e37e:	f7ff ff0b 	bl	800e198 <__multiply>
 800e382:	6020      	str	r0, [r4, #0]
 800e384:	f8c0 9000 	str.w	r9, [r0]
 800e388:	4604      	mov	r4, r0
 800e38a:	e7e4      	b.n	800e356 <__pow5mult+0x6a>
 800e38c:	4638      	mov	r0, r7
 800e38e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e392:	bf00      	nop
 800e394:	0800f418 	.word	0x0800f418
 800e398:	0800f249 	.word	0x0800f249
 800e39c:	0800f2c9 	.word	0x0800f2c9

0800e3a0 <__lshift>:
 800e3a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3a4:	460c      	mov	r4, r1
 800e3a6:	6849      	ldr	r1, [r1, #4]
 800e3a8:	6923      	ldr	r3, [r4, #16]
 800e3aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e3ae:	68a3      	ldr	r3, [r4, #8]
 800e3b0:	4607      	mov	r7, r0
 800e3b2:	4691      	mov	r9, r2
 800e3b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e3b8:	f108 0601 	add.w	r6, r8, #1
 800e3bc:	42b3      	cmp	r3, r6
 800e3be:	db0b      	blt.n	800e3d8 <__lshift+0x38>
 800e3c0:	4638      	mov	r0, r7
 800e3c2:	f7ff fddd 	bl	800df80 <_Balloc>
 800e3c6:	4605      	mov	r5, r0
 800e3c8:	b948      	cbnz	r0, 800e3de <__lshift+0x3e>
 800e3ca:	4602      	mov	r2, r0
 800e3cc:	4b28      	ldr	r3, [pc, #160]	; (800e470 <__lshift+0xd0>)
 800e3ce:	4829      	ldr	r0, [pc, #164]	; (800e474 <__lshift+0xd4>)
 800e3d0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800e3d4:	f000 fb70 	bl	800eab8 <__assert_func>
 800e3d8:	3101      	adds	r1, #1
 800e3da:	005b      	lsls	r3, r3, #1
 800e3dc:	e7ee      	b.n	800e3bc <__lshift+0x1c>
 800e3de:	2300      	movs	r3, #0
 800e3e0:	f100 0114 	add.w	r1, r0, #20
 800e3e4:	f100 0210 	add.w	r2, r0, #16
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	4553      	cmp	r3, sl
 800e3ec:	db33      	blt.n	800e456 <__lshift+0xb6>
 800e3ee:	6920      	ldr	r0, [r4, #16]
 800e3f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e3f4:	f104 0314 	add.w	r3, r4, #20
 800e3f8:	f019 091f 	ands.w	r9, r9, #31
 800e3fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e400:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e404:	d02b      	beq.n	800e45e <__lshift+0xbe>
 800e406:	f1c9 0e20 	rsb	lr, r9, #32
 800e40a:	468a      	mov	sl, r1
 800e40c:	2200      	movs	r2, #0
 800e40e:	6818      	ldr	r0, [r3, #0]
 800e410:	fa00 f009 	lsl.w	r0, r0, r9
 800e414:	4310      	orrs	r0, r2
 800e416:	f84a 0b04 	str.w	r0, [sl], #4
 800e41a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e41e:	459c      	cmp	ip, r3
 800e420:	fa22 f20e 	lsr.w	r2, r2, lr
 800e424:	d8f3      	bhi.n	800e40e <__lshift+0x6e>
 800e426:	ebac 0304 	sub.w	r3, ip, r4
 800e42a:	3b15      	subs	r3, #21
 800e42c:	f023 0303 	bic.w	r3, r3, #3
 800e430:	3304      	adds	r3, #4
 800e432:	f104 0015 	add.w	r0, r4, #21
 800e436:	4584      	cmp	ip, r0
 800e438:	bf38      	it	cc
 800e43a:	2304      	movcc	r3, #4
 800e43c:	50ca      	str	r2, [r1, r3]
 800e43e:	b10a      	cbz	r2, 800e444 <__lshift+0xa4>
 800e440:	f108 0602 	add.w	r6, r8, #2
 800e444:	3e01      	subs	r6, #1
 800e446:	4638      	mov	r0, r7
 800e448:	612e      	str	r6, [r5, #16]
 800e44a:	4621      	mov	r1, r4
 800e44c:	f7ff fdd8 	bl	800e000 <_Bfree>
 800e450:	4628      	mov	r0, r5
 800e452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e456:	f842 0f04 	str.w	r0, [r2, #4]!
 800e45a:	3301      	adds	r3, #1
 800e45c:	e7c5      	b.n	800e3ea <__lshift+0x4a>
 800e45e:	3904      	subs	r1, #4
 800e460:	f853 2b04 	ldr.w	r2, [r3], #4
 800e464:	f841 2f04 	str.w	r2, [r1, #4]!
 800e468:	459c      	cmp	ip, r3
 800e46a:	d8f9      	bhi.n	800e460 <__lshift+0xc0>
 800e46c:	e7ea      	b.n	800e444 <__lshift+0xa4>
 800e46e:	bf00      	nop
 800e470:	0800f2b8 	.word	0x0800f2b8
 800e474:	0800f2c9 	.word	0x0800f2c9

0800e478 <__mcmp>:
 800e478:	b530      	push	{r4, r5, lr}
 800e47a:	6902      	ldr	r2, [r0, #16]
 800e47c:	690c      	ldr	r4, [r1, #16]
 800e47e:	1b12      	subs	r2, r2, r4
 800e480:	d10e      	bne.n	800e4a0 <__mcmp+0x28>
 800e482:	f100 0314 	add.w	r3, r0, #20
 800e486:	3114      	adds	r1, #20
 800e488:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e48c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e490:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e494:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e498:	42a5      	cmp	r5, r4
 800e49a:	d003      	beq.n	800e4a4 <__mcmp+0x2c>
 800e49c:	d305      	bcc.n	800e4aa <__mcmp+0x32>
 800e49e:	2201      	movs	r2, #1
 800e4a0:	4610      	mov	r0, r2
 800e4a2:	bd30      	pop	{r4, r5, pc}
 800e4a4:	4283      	cmp	r3, r0
 800e4a6:	d3f3      	bcc.n	800e490 <__mcmp+0x18>
 800e4a8:	e7fa      	b.n	800e4a0 <__mcmp+0x28>
 800e4aa:	f04f 32ff 	mov.w	r2, #4294967295
 800e4ae:	e7f7      	b.n	800e4a0 <__mcmp+0x28>

0800e4b0 <__mdiff>:
 800e4b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4b4:	460c      	mov	r4, r1
 800e4b6:	4606      	mov	r6, r0
 800e4b8:	4611      	mov	r1, r2
 800e4ba:	4620      	mov	r0, r4
 800e4bc:	4690      	mov	r8, r2
 800e4be:	f7ff ffdb 	bl	800e478 <__mcmp>
 800e4c2:	1e05      	subs	r5, r0, #0
 800e4c4:	d110      	bne.n	800e4e8 <__mdiff+0x38>
 800e4c6:	4629      	mov	r1, r5
 800e4c8:	4630      	mov	r0, r6
 800e4ca:	f7ff fd59 	bl	800df80 <_Balloc>
 800e4ce:	b930      	cbnz	r0, 800e4de <__mdiff+0x2e>
 800e4d0:	4b3a      	ldr	r3, [pc, #232]	; (800e5bc <__mdiff+0x10c>)
 800e4d2:	4602      	mov	r2, r0
 800e4d4:	f240 2137 	movw	r1, #567	; 0x237
 800e4d8:	4839      	ldr	r0, [pc, #228]	; (800e5c0 <__mdiff+0x110>)
 800e4da:	f000 faed 	bl	800eab8 <__assert_func>
 800e4de:	2301      	movs	r3, #1
 800e4e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e4e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4e8:	bfa4      	itt	ge
 800e4ea:	4643      	movge	r3, r8
 800e4ec:	46a0      	movge	r8, r4
 800e4ee:	4630      	mov	r0, r6
 800e4f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e4f4:	bfa6      	itte	ge
 800e4f6:	461c      	movge	r4, r3
 800e4f8:	2500      	movge	r5, #0
 800e4fa:	2501      	movlt	r5, #1
 800e4fc:	f7ff fd40 	bl	800df80 <_Balloc>
 800e500:	b920      	cbnz	r0, 800e50c <__mdiff+0x5c>
 800e502:	4b2e      	ldr	r3, [pc, #184]	; (800e5bc <__mdiff+0x10c>)
 800e504:	4602      	mov	r2, r0
 800e506:	f240 2145 	movw	r1, #581	; 0x245
 800e50a:	e7e5      	b.n	800e4d8 <__mdiff+0x28>
 800e50c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e510:	6926      	ldr	r6, [r4, #16]
 800e512:	60c5      	str	r5, [r0, #12]
 800e514:	f104 0914 	add.w	r9, r4, #20
 800e518:	f108 0514 	add.w	r5, r8, #20
 800e51c:	f100 0e14 	add.w	lr, r0, #20
 800e520:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e524:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e528:	f108 0210 	add.w	r2, r8, #16
 800e52c:	46f2      	mov	sl, lr
 800e52e:	2100      	movs	r1, #0
 800e530:	f859 3b04 	ldr.w	r3, [r9], #4
 800e534:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e538:	fa11 f88b 	uxtah	r8, r1, fp
 800e53c:	b299      	uxth	r1, r3
 800e53e:	0c1b      	lsrs	r3, r3, #16
 800e540:	eba8 0801 	sub.w	r8, r8, r1
 800e544:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e548:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e54c:	fa1f f888 	uxth.w	r8, r8
 800e550:	1419      	asrs	r1, r3, #16
 800e552:	454e      	cmp	r6, r9
 800e554:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e558:	f84a 3b04 	str.w	r3, [sl], #4
 800e55c:	d8e8      	bhi.n	800e530 <__mdiff+0x80>
 800e55e:	1b33      	subs	r3, r6, r4
 800e560:	3b15      	subs	r3, #21
 800e562:	f023 0303 	bic.w	r3, r3, #3
 800e566:	3304      	adds	r3, #4
 800e568:	3415      	adds	r4, #21
 800e56a:	42a6      	cmp	r6, r4
 800e56c:	bf38      	it	cc
 800e56e:	2304      	movcc	r3, #4
 800e570:	441d      	add	r5, r3
 800e572:	4473      	add	r3, lr
 800e574:	469e      	mov	lr, r3
 800e576:	462e      	mov	r6, r5
 800e578:	4566      	cmp	r6, ip
 800e57a:	d30e      	bcc.n	800e59a <__mdiff+0xea>
 800e57c:	f10c 0203 	add.w	r2, ip, #3
 800e580:	1b52      	subs	r2, r2, r5
 800e582:	f022 0203 	bic.w	r2, r2, #3
 800e586:	3d03      	subs	r5, #3
 800e588:	45ac      	cmp	ip, r5
 800e58a:	bf38      	it	cc
 800e58c:	2200      	movcc	r2, #0
 800e58e:	4413      	add	r3, r2
 800e590:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e594:	b17a      	cbz	r2, 800e5b6 <__mdiff+0x106>
 800e596:	6107      	str	r7, [r0, #16]
 800e598:	e7a4      	b.n	800e4e4 <__mdiff+0x34>
 800e59a:	f856 8b04 	ldr.w	r8, [r6], #4
 800e59e:	fa11 f288 	uxtah	r2, r1, r8
 800e5a2:	1414      	asrs	r4, r2, #16
 800e5a4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e5a8:	b292      	uxth	r2, r2
 800e5aa:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e5ae:	f84e 2b04 	str.w	r2, [lr], #4
 800e5b2:	1421      	asrs	r1, r4, #16
 800e5b4:	e7e0      	b.n	800e578 <__mdiff+0xc8>
 800e5b6:	3f01      	subs	r7, #1
 800e5b8:	e7ea      	b.n	800e590 <__mdiff+0xe0>
 800e5ba:	bf00      	nop
 800e5bc:	0800f2b8 	.word	0x0800f2b8
 800e5c0:	0800f2c9 	.word	0x0800f2c9

0800e5c4 <__d2b>:
 800e5c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e5c8:	460f      	mov	r7, r1
 800e5ca:	2101      	movs	r1, #1
 800e5cc:	ec59 8b10 	vmov	r8, r9, d0
 800e5d0:	4616      	mov	r6, r2
 800e5d2:	f7ff fcd5 	bl	800df80 <_Balloc>
 800e5d6:	4604      	mov	r4, r0
 800e5d8:	b930      	cbnz	r0, 800e5e8 <__d2b+0x24>
 800e5da:	4602      	mov	r2, r0
 800e5dc:	4b24      	ldr	r3, [pc, #144]	; (800e670 <__d2b+0xac>)
 800e5de:	4825      	ldr	r0, [pc, #148]	; (800e674 <__d2b+0xb0>)
 800e5e0:	f240 310f 	movw	r1, #783	; 0x30f
 800e5e4:	f000 fa68 	bl	800eab8 <__assert_func>
 800e5e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e5ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e5f0:	bb2d      	cbnz	r5, 800e63e <__d2b+0x7a>
 800e5f2:	9301      	str	r3, [sp, #4]
 800e5f4:	f1b8 0300 	subs.w	r3, r8, #0
 800e5f8:	d026      	beq.n	800e648 <__d2b+0x84>
 800e5fa:	4668      	mov	r0, sp
 800e5fc:	9300      	str	r3, [sp, #0]
 800e5fe:	f7ff fd87 	bl	800e110 <__lo0bits>
 800e602:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e606:	b1e8      	cbz	r0, 800e644 <__d2b+0x80>
 800e608:	f1c0 0320 	rsb	r3, r0, #32
 800e60c:	fa02 f303 	lsl.w	r3, r2, r3
 800e610:	430b      	orrs	r3, r1
 800e612:	40c2      	lsrs	r2, r0
 800e614:	6163      	str	r3, [r4, #20]
 800e616:	9201      	str	r2, [sp, #4]
 800e618:	9b01      	ldr	r3, [sp, #4]
 800e61a:	61a3      	str	r3, [r4, #24]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	bf14      	ite	ne
 800e620:	2202      	movne	r2, #2
 800e622:	2201      	moveq	r2, #1
 800e624:	6122      	str	r2, [r4, #16]
 800e626:	b1bd      	cbz	r5, 800e658 <__d2b+0x94>
 800e628:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e62c:	4405      	add	r5, r0
 800e62e:	603d      	str	r5, [r7, #0]
 800e630:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e634:	6030      	str	r0, [r6, #0]
 800e636:	4620      	mov	r0, r4
 800e638:	b003      	add	sp, #12
 800e63a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e63e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e642:	e7d6      	b.n	800e5f2 <__d2b+0x2e>
 800e644:	6161      	str	r1, [r4, #20]
 800e646:	e7e7      	b.n	800e618 <__d2b+0x54>
 800e648:	a801      	add	r0, sp, #4
 800e64a:	f7ff fd61 	bl	800e110 <__lo0bits>
 800e64e:	9b01      	ldr	r3, [sp, #4]
 800e650:	6163      	str	r3, [r4, #20]
 800e652:	3020      	adds	r0, #32
 800e654:	2201      	movs	r2, #1
 800e656:	e7e5      	b.n	800e624 <__d2b+0x60>
 800e658:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e65c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e660:	6038      	str	r0, [r7, #0]
 800e662:	6918      	ldr	r0, [r3, #16]
 800e664:	f7ff fd34 	bl	800e0d0 <__hi0bits>
 800e668:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e66c:	e7e2      	b.n	800e634 <__d2b+0x70>
 800e66e:	bf00      	nop
 800e670:	0800f2b8 	.word	0x0800f2b8
 800e674:	0800f2c9 	.word	0x0800f2c9

0800e678 <__ssputs_r>:
 800e678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e67c:	688e      	ldr	r6, [r1, #8]
 800e67e:	461f      	mov	r7, r3
 800e680:	42be      	cmp	r6, r7
 800e682:	680b      	ldr	r3, [r1, #0]
 800e684:	4682      	mov	sl, r0
 800e686:	460c      	mov	r4, r1
 800e688:	4690      	mov	r8, r2
 800e68a:	d82c      	bhi.n	800e6e6 <__ssputs_r+0x6e>
 800e68c:	898a      	ldrh	r2, [r1, #12]
 800e68e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e692:	d026      	beq.n	800e6e2 <__ssputs_r+0x6a>
 800e694:	6965      	ldr	r5, [r4, #20]
 800e696:	6909      	ldr	r1, [r1, #16]
 800e698:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e69c:	eba3 0901 	sub.w	r9, r3, r1
 800e6a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e6a4:	1c7b      	adds	r3, r7, #1
 800e6a6:	444b      	add	r3, r9
 800e6a8:	106d      	asrs	r5, r5, #1
 800e6aa:	429d      	cmp	r5, r3
 800e6ac:	bf38      	it	cc
 800e6ae:	461d      	movcc	r5, r3
 800e6b0:	0553      	lsls	r3, r2, #21
 800e6b2:	d527      	bpl.n	800e704 <__ssputs_r+0x8c>
 800e6b4:	4629      	mov	r1, r5
 800e6b6:	f7fd ff8d 	bl	800c5d4 <_malloc_r>
 800e6ba:	4606      	mov	r6, r0
 800e6bc:	b360      	cbz	r0, 800e718 <__ssputs_r+0xa0>
 800e6be:	6921      	ldr	r1, [r4, #16]
 800e6c0:	464a      	mov	r2, r9
 800e6c2:	f7fe fe0c 	bl	800d2de <memcpy>
 800e6c6:	89a3      	ldrh	r3, [r4, #12]
 800e6c8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e6cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e6d0:	81a3      	strh	r3, [r4, #12]
 800e6d2:	6126      	str	r6, [r4, #16]
 800e6d4:	6165      	str	r5, [r4, #20]
 800e6d6:	444e      	add	r6, r9
 800e6d8:	eba5 0509 	sub.w	r5, r5, r9
 800e6dc:	6026      	str	r6, [r4, #0]
 800e6de:	60a5      	str	r5, [r4, #8]
 800e6e0:	463e      	mov	r6, r7
 800e6e2:	42be      	cmp	r6, r7
 800e6e4:	d900      	bls.n	800e6e8 <__ssputs_r+0x70>
 800e6e6:	463e      	mov	r6, r7
 800e6e8:	6820      	ldr	r0, [r4, #0]
 800e6ea:	4632      	mov	r2, r6
 800e6ec:	4641      	mov	r1, r8
 800e6ee:	f000 f9c9 	bl	800ea84 <memmove>
 800e6f2:	68a3      	ldr	r3, [r4, #8]
 800e6f4:	1b9b      	subs	r3, r3, r6
 800e6f6:	60a3      	str	r3, [r4, #8]
 800e6f8:	6823      	ldr	r3, [r4, #0]
 800e6fa:	4433      	add	r3, r6
 800e6fc:	6023      	str	r3, [r4, #0]
 800e6fe:	2000      	movs	r0, #0
 800e700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e704:	462a      	mov	r2, r5
 800e706:	f000 fa1d 	bl	800eb44 <_realloc_r>
 800e70a:	4606      	mov	r6, r0
 800e70c:	2800      	cmp	r0, #0
 800e70e:	d1e0      	bne.n	800e6d2 <__ssputs_r+0x5a>
 800e710:	6921      	ldr	r1, [r4, #16]
 800e712:	4650      	mov	r0, sl
 800e714:	f7ff fbe8 	bl	800dee8 <_free_r>
 800e718:	230c      	movs	r3, #12
 800e71a:	f8ca 3000 	str.w	r3, [sl]
 800e71e:	89a3      	ldrh	r3, [r4, #12]
 800e720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e724:	81a3      	strh	r3, [r4, #12]
 800e726:	f04f 30ff 	mov.w	r0, #4294967295
 800e72a:	e7e9      	b.n	800e700 <__ssputs_r+0x88>

0800e72c <_svfiprintf_r>:
 800e72c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e730:	4698      	mov	r8, r3
 800e732:	898b      	ldrh	r3, [r1, #12]
 800e734:	061b      	lsls	r3, r3, #24
 800e736:	b09d      	sub	sp, #116	; 0x74
 800e738:	4607      	mov	r7, r0
 800e73a:	460d      	mov	r5, r1
 800e73c:	4614      	mov	r4, r2
 800e73e:	d50e      	bpl.n	800e75e <_svfiprintf_r+0x32>
 800e740:	690b      	ldr	r3, [r1, #16]
 800e742:	b963      	cbnz	r3, 800e75e <_svfiprintf_r+0x32>
 800e744:	2140      	movs	r1, #64	; 0x40
 800e746:	f7fd ff45 	bl	800c5d4 <_malloc_r>
 800e74a:	6028      	str	r0, [r5, #0]
 800e74c:	6128      	str	r0, [r5, #16]
 800e74e:	b920      	cbnz	r0, 800e75a <_svfiprintf_r+0x2e>
 800e750:	230c      	movs	r3, #12
 800e752:	603b      	str	r3, [r7, #0]
 800e754:	f04f 30ff 	mov.w	r0, #4294967295
 800e758:	e0d0      	b.n	800e8fc <_svfiprintf_r+0x1d0>
 800e75a:	2340      	movs	r3, #64	; 0x40
 800e75c:	616b      	str	r3, [r5, #20]
 800e75e:	2300      	movs	r3, #0
 800e760:	9309      	str	r3, [sp, #36]	; 0x24
 800e762:	2320      	movs	r3, #32
 800e764:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e768:	f8cd 800c 	str.w	r8, [sp, #12]
 800e76c:	2330      	movs	r3, #48	; 0x30
 800e76e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e914 <_svfiprintf_r+0x1e8>
 800e772:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e776:	f04f 0901 	mov.w	r9, #1
 800e77a:	4623      	mov	r3, r4
 800e77c:	469a      	mov	sl, r3
 800e77e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e782:	b10a      	cbz	r2, 800e788 <_svfiprintf_r+0x5c>
 800e784:	2a25      	cmp	r2, #37	; 0x25
 800e786:	d1f9      	bne.n	800e77c <_svfiprintf_r+0x50>
 800e788:	ebba 0b04 	subs.w	fp, sl, r4
 800e78c:	d00b      	beq.n	800e7a6 <_svfiprintf_r+0x7a>
 800e78e:	465b      	mov	r3, fp
 800e790:	4622      	mov	r2, r4
 800e792:	4629      	mov	r1, r5
 800e794:	4638      	mov	r0, r7
 800e796:	f7ff ff6f 	bl	800e678 <__ssputs_r>
 800e79a:	3001      	adds	r0, #1
 800e79c:	f000 80a9 	beq.w	800e8f2 <_svfiprintf_r+0x1c6>
 800e7a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e7a2:	445a      	add	r2, fp
 800e7a4:	9209      	str	r2, [sp, #36]	; 0x24
 800e7a6:	f89a 3000 	ldrb.w	r3, [sl]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	f000 80a1 	beq.w	800e8f2 <_svfiprintf_r+0x1c6>
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	f04f 32ff 	mov.w	r2, #4294967295
 800e7b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e7ba:	f10a 0a01 	add.w	sl, sl, #1
 800e7be:	9304      	str	r3, [sp, #16]
 800e7c0:	9307      	str	r3, [sp, #28]
 800e7c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e7c6:	931a      	str	r3, [sp, #104]	; 0x68
 800e7c8:	4654      	mov	r4, sl
 800e7ca:	2205      	movs	r2, #5
 800e7cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7d0:	4850      	ldr	r0, [pc, #320]	; (800e914 <_svfiprintf_r+0x1e8>)
 800e7d2:	f7f1 fd85 	bl	80002e0 <memchr>
 800e7d6:	9a04      	ldr	r2, [sp, #16]
 800e7d8:	b9d8      	cbnz	r0, 800e812 <_svfiprintf_r+0xe6>
 800e7da:	06d0      	lsls	r0, r2, #27
 800e7dc:	bf44      	itt	mi
 800e7de:	2320      	movmi	r3, #32
 800e7e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e7e4:	0711      	lsls	r1, r2, #28
 800e7e6:	bf44      	itt	mi
 800e7e8:	232b      	movmi	r3, #43	; 0x2b
 800e7ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e7ee:	f89a 3000 	ldrb.w	r3, [sl]
 800e7f2:	2b2a      	cmp	r3, #42	; 0x2a
 800e7f4:	d015      	beq.n	800e822 <_svfiprintf_r+0xf6>
 800e7f6:	9a07      	ldr	r2, [sp, #28]
 800e7f8:	4654      	mov	r4, sl
 800e7fa:	2000      	movs	r0, #0
 800e7fc:	f04f 0c0a 	mov.w	ip, #10
 800e800:	4621      	mov	r1, r4
 800e802:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e806:	3b30      	subs	r3, #48	; 0x30
 800e808:	2b09      	cmp	r3, #9
 800e80a:	d94d      	bls.n	800e8a8 <_svfiprintf_r+0x17c>
 800e80c:	b1b0      	cbz	r0, 800e83c <_svfiprintf_r+0x110>
 800e80e:	9207      	str	r2, [sp, #28]
 800e810:	e014      	b.n	800e83c <_svfiprintf_r+0x110>
 800e812:	eba0 0308 	sub.w	r3, r0, r8
 800e816:	fa09 f303 	lsl.w	r3, r9, r3
 800e81a:	4313      	orrs	r3, r2
 800e81c:	9304      	str	r3, [sp, #16]
 800e81e:	46a2      	mov	sl, r4
 800e820:	e7d2      	b.n	800e7c8 <_svfiprintf_r+0x9c>
 800e822:	9b03      	ldr	r3, [sp, #12]
 800e824:	1d19      	adds	r1, r3, #4
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	9103      	str	r1, [sp, #12]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	bfbb      	ittet	lt
 800e82e:	425b      	neglt	r3, r3
 800e830:	f042 0202 	orrlt.w	r2, r2, #2
 800e834:	9307      	strge	r3, [sp, #28]
 800e836:	9307      	strlt	r3, [sp, #28]
 800e838:	bfb8      	it	lt
 800e83a:	9204      	strlt	r2, [sp, #16]
 800e83c:	7823      	ldrb	r3, [r4, #0]
 800e83e:	2b2e      	cmp	r3, #46	; 0x2e
 800e840:	d10c      	bne.n	800e85c <_svfiprintf_r+0x130>
 800e842:	7863      	ldrb	r3, [r4, #1]
 800e844:	2b2a      	cmp	r3, #42	; 0x2a
 800e846:	d134      	bne.n	800e8b2 <_svfiprintf_r+0x186>
 800e848:	9b03      	ldr	r3, [sp, #12]
 800e84a:	1d1a      	adds	r2, r3, #4
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	9203      	str	r2, [sp, #12]
 800e850:	2b00      	cmp	r3, #0
 800e852:	bfb8      	it	lt
 800e854:	f04f 33ff 	movlt.w	r3, #4294967295
 800e858:	3402      	adds	r4, #2
 800e85a:	9305      	str	r3, [sp, #20]
 800e85c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e924 <_svfiprintf_r+0x1f8>
 800e860:	7821      	ldrb	r1, [r4, #0]
 800e862:	2203      	movs	r2, #3
 800e864:	4650      	mov	r0, sl
 800e866:	f7f1 fd3b 	bl	80002e0 <memchr>
 800e86a:	b138      	cbz	r0, 800e87c <_svfiprintf_r+0x150>
 800e86c:	9b04      	ldr	r3, [sp, #16]
 800e86e:	eba0 000a 	sub.w	r0, r0, sl
 800e872:	2240      	movs	r2, #64	; 0x40
 800e874:	4082      	lsls	r2, r0
 800e876:	4313      	orrs	r3, r2
 800e878:	3401      	adds	r4, #1
 800e87a:	9304      	str	r3, [sp, #16]
 800e87c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e880:	4825      	ldr	r0, [pc, #148]	; (800e918 <_svfiprintf_r+0x1ec>)
 800e882:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e886:	2206      	movs	r2, #6
 800e888:	f7f1 fd2a 	bl	80002e0 <memchr>
 800e88c:	2800      	cmp	r0, #0
 800e88e:	d038      	beq.n	800e902 <_svfiprintf_r+0x1d6>
 800e890:	4b22      	ldr	r3, [pc, #136]	; (800e91c <_svfiprintf_r+0x1f0>)
 800e892:	bb1b      	cbnz	r3, 800e8dc <_svfiprintf_r+0x1b0>
 800e894:	9b03      	ldr	r3, [sp, #12]
 800e896:	3307      	adds	r3, #7
 800e898:	f023 0307 	bic.w	r3, r3, #7
 800e89c:	3308      	adds	r3, #8
 800e89e:	9303      	str	r3, [sp, #12]
 800e8a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8a2:	4433      	add	r3, r6
 800e8a4:	9309      	str	r3, [sp, #36]	; 0x24
 800e8a6:	e768      	b.n	800e77a <_svfiprintf_r+0x4e>
 800e8a8:	fb0c 3202 	mla	r2, ip, r2, r3
 800e8ac:	460c      	mov	r4, r1
 800e8ae:	2001      	movs	r0, #1
 800e8b0:	e7a6      	b.n	800e800 <_svfiprintf_r+0xd4>
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	3401      	adds	r4, #1
 800e8b6:	9305      	str	r3, [sp, #20]
 800e8b8:	4619      	mov	r1, r3
 800e8ba:	f04f 0c0a 	mov.w	ip, #10
 800e8be:	4620      	mov	r0, r4
 800e8c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e8c4:	3a30      	subs	r2, #48	; 0x30
 800e8c6:	2a09      	cmp	r2, #9
 800e8c8:	d903      	bls.n	800e8d2 <_svfiprintf_r+0x1a6>
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d0c6      	beq.n	800e85c <_svfiprintf_r+0x130>
 800e8ce:	9105      	str	r1, [sp, #20]
 800e8d0:	e7c4      	b.n	800e85c <_svfiprintf_r+0x130>
 800e8d2:	fb0c 2101 	mla	r1, ip, r1, r2
 800e8d6:	4604      	mov	r4, r0
 800e8d8:	2301      	movs	r3, #1
 800e8da:	e7f0      	b.n	800e8be <_svfiprintf_r+0x192>
 800e8dc:	ab03      	add	r3, sp, #12
 800e8de:	9300      	str	r3, [sp, #0]
 800e8e0:	462a      	mov	r2, r5
 800e8e2:	4b0f      	ldr	r3, [pc, #60]	; (800e920 <_svfiprintf_r+0x1f4>)
 800e8e4:	a904      	add	r1, sp, #16
 800e8e6:	4638      	mov	r0, r7
 800e8e8:	f7fd ff92 	bl	800c810 <_printf_float>
 800e8ec:	1c42      	adds	r2, r0, #1
 800e8ee:	4606      	mov	r6, r0
 800e8f0:	d1d6      	bne.n	800e8a0 <_svfiprintf_r+0x174>
 800e8f2:	89ab      	ldrh	r3, [r5, #12]
 800e8f4:	065b      	lsls	r3, r3, #25
 800e8f6:	f53f af2d 	bmi.w	800e754 <_svfiprintf_r+0x28>
 800e8fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e8fc:	b01d      	add	sp, #116	; 0x74
 800e8fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e902:	ab03      	add	r3, sp, #12
 800e904:	9300      	str	r3, [sp, #0]
 800e906:	462a      	mov	r2, r5
 800e908:	4b05      	ldr	r3, [pc, #20]	; (800e920 <_svfiprintf_r+0x1f4>)
 800e90a:	a904      	add	r1, sp, #16
 800e90c:	4638      	mov	r0, r7
 800e90e:	f7fe fa07 	bl	800cd20 <_printf_i>
 800e912:	e7eb      	b.n	800e8ec <_svfiprintf_r+0x1c0>
 800e914:	0800f424 	.word	0x0800f424
 800e918:	0800f42e 	.word	0x0800f42e
 800e91c:	0800c811 	.word	0x0800c811
 800e920:	0800e679 	.word	0x0800e679
 800e924:	0800f42a 	.word	0x0800f42a

0800e928 <__sflush_r>:
 800e928:	898a      	ldrh	r2, [r1, #12]
 800e92a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e92e:	4605      	mov	r5, r0
 800e930:	0710      	lsls	r0, r2, #28
 800e932:	460c      	mov	r4, r1
 800e934:	d458      	bmi.n	800e9e8 <__sflush_r+0xc0>
 800e936:	684b      	ldr	r3, [r1, #4]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	dc05      	bgt.n	800e948 <__sflush_r+0x20>
 800e93c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e93e:	2b00      	cmp	r3, #0
 800e940:	dc02      	bgt.n	800e948 <__sflush_r+0x20>
 800e942:	2000      	movs	r0, #0
 800e944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e948:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e94a:	2e00      	cmp	r6, #0
 800e94c:	d0f9      	beq.n	800e942 <__sflush_r+0x1a>
 800e94e:	2300      	movs	r3, #0
 800e950:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e954:	682f      	ldr	r7, [r5, #0]
 800e956:	6a21      	ldr	r1, [r4, #32]
 800e958:	602b      	str	r3, [r5, #0]
 800e95a:	d032      	beq.n	800e9c2 <__sflush_r+0x9a>
 800e95c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e95e:	89a3      	ldrh	r3, [r4, #12]
 800e960:	075a      	lsls	r2, r3, #29
 800e962:	d505      	bpl.n	800e970 <__sflush_r+0x48>
 800e964:	6863      	ldr	r3, [r4, #4]
 800e966:	1ac0      	subs	r0, r0, r3
 800e968:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e96a:	b10b      	cbz	r3, 800e970 <__sflush_r+0x48>
 800e96c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e96e:	1ac0      	subs	r0, r0, r3
 800e970:	2300      	movs	r3, #0
 800e972:	4602      	mov	r2, r0
 800e974:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e976:	6a21      	ldr	r1, [r4, #32]
 800e978:	4628      	mov	r0, r5
 800e97a:	47b0      	blx	r6
 800e97c:	1c43      	adds	r3, r0, #1
 800e97e:	89a3      	ldrh	r3, [r4, #12]
 800e980:	d106      	bne.n	800e990 <__sflush_r+0x68>
 800e982:	6829      	ldr	r1, [r5, #0]
 800e984:	291d      	cmp	r1, #29
 800e986:	d82b      	bhi.n	800e9e0 <__sflush_r+0xb8>
 800e988:	4a29      	ldr	r2, [pc, #164]	; (800ea30 <__sflush_r+0x108>)
 800e98a:	410a      	asrs	r2, r1
 800e98c:	07d6      	lsls	r6, r2, #31
 800e98e:	d427      	bmi.n	800e9e0 <__sflush_r+0xb8>
 800e990:	2200      	movs	r2, #0
 800e992:	6062      	str	r2, [r4, #4]
 800e994:	04d9      	lsls	r1, r3, #19
 800e996:	6922      	ldr	r2, [r4, #16]
 800e998:	6022      	str	r2, [r4, #0]
 800e99a:	d504      	bpl.n	800e9a6 <__sflush_r+0x7e>
 800e99c:	1c42      	adds	r2, r0, #1
 800e99e:	d101      	bne.n	800e9a4 <__sflush_r+0x7c>
 800e9a0:	682b      	ldr	r3, [r5, #0]
 800e9a2:	b903      	cbnz	r3, 800e9a6 <__sflush_r+0x7e>
 800e9a4:	6560      	str	r0, [r4, #84]	; 0x54
 800e9a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e9a8:	602f      	str	r7, [r5, #0]
 800e9aa:	2900      	cmp	r1, #0
 800e9ac:	d0c9      	beq.n	800e942 <__sflush_r+0x1a>
 800e9ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e9b2:	4299      	cmp	r1, r3
 800e9b4:	d002      	beq.n	800e9bc <__sflush_r+0x94>
 800e9b6:	4628      	mov	r0, r5
 800e9b8:	f7ff fa96 	bl	800dee8 <_free_r>
 800e9bc:	2000      	movs	r0, #0
 800e9be:	6360      	str	r0, [r4, #52]	; 0x34
 800e9c0:	e7c0      	b.n	800e944 <__sflush_r+0x1c>
 800e9c2:	2301      	movs	r3, #1
 800e9c4:	4628      	mov	r0, r5
 800e9c6:	47b0      	blx	r6
 800e9c8:	1c41      	adds	r1, r0, #1
 800e9ca:	d1c8      	bne.n	800e95e <__sflush_r+0x36>
 800e9cc:	682b      	ldr	r3, [r5, #0]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d0c5      	beq.n	800e95e <__sflush_r+0x36>
 800e9d2:	2b1d      	cmp	r3, #29
 800e9d4:	d001      	beq.n	800e9da <__sflush_r+0xb2>
 800e9d6:	2b16      	cmp	r3, #22
 800e9d8:	d101      	bne.n	800e9de <__sflush_r+0xb6>
 800e9da:	602f      	str	r7, [r5, #0]
 800e9dc:	e7b1      	b.n	800e942 <__sflush_r+0x1a>
 800e9de:	89a3      	ldrh	r3, [r4, #12]
 800e9e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9e4:	81a3      	strh	r3, [r4, #12]
 800e9e6:	e7ad      	b.n	800e944 <__sflush_r+0x1c>
 800e9e8:	690f      	ldr	r7, [r1, #16]
 800e9ea:	2f00      	cmp	r7, #0
 800e9ec:	d0a9      	beq.n	800e942 <__sflush_r+0x1a>
 800e9ee:	0793      	lsls	r3, r2, #30
 800e9f0:	680e      	ldr	r6, [r1, #0]
 800e9f2:	bf08      	it	eq
 800e9f4:	694b      	ldreq	r3, [r1, #20]
 800e9f6:	600f      	str	r7, [r1, #0]
 800e9f8:	bf18      	it	ne
 800e9fa:	2300      	movne	r3, #0
 800e9fc:	eba6 0807 	sub.w	r8, r6, r7
 800ea00:	608b      	str	r3, [r1, #8]
 800ea02:	f1b8 0f00 	cmp.w	r8, #0
 800ea06:	dd9c      	ble.n	800e942 <__sflush_r+0x1a>
 800ea08:	6a21      	ldr	r1, [r4, #32]
 800ea0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ea0c:	4643      	mov	r3, r8
 800ea0e:	463a      	mov	r2, r7
 800ea10:	4628      	mov	r0, r5
 800ea12:	47b0      	blx	r6
 800ea14:	2800      	cmp	r0, #0
 800ea16:	dc06      	bgt.n	800ea26 <__sflush_r+0xfe>
 800ea18:	89a3      	ldrh	r3, [r4, #12]
 800ea1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea1e:	81a3      	strh	r3, [r4, #12]
 800ea20:	f04f 30ff 	mov.w	r0, #4294967295
 800ea24:	e78e      	b.n	800e944 <__sflush_r+0x1c>
 800ea26:	4407      	add	r7, r0
 800ea28:	eba8 0800 	sub.w	r8, r8, r0
 800ea2c:	e7e9      	b.n	800ea02 <__sflush_r+0xda>
 800ea2e:	bf00      	nop
 800ea30:	dfbffffe 	.word	0xdfbffffe

0800ea34 <_fflush_r>:
 800ea34:	b538      	push	{r3, r4, r5, lr}
 800ea36:	690b      	ldr	r3, [r1, #16]
 800ea38:	4605      	mov	r5, r0
 800ea3a:	460c      	mov	r4, r1
 800ea3c:	b913      	cbnz	r3, 800ea44 <_fflush_r+0x10>
 800ea3e:	2500      	movs	r5, #0
 800ea40:	4628      	mov	r0, r5
 800ea42:	bd38      	pop	{r3, r4, r5, pc}
 800ea44:	b118      	cbz	r0, 800ea4e <_fflush_r+0x1a>
 800ea46:	6a03      	ldr	r3, [r0, #32]
 800ea48:	b90b      	cbnz	r3, 800ea4e <_fflush_r+0x1a>
 800ea4a:	f7fe fb17 	bl	800d07c <__sinit>
 800ea4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d0f3      	beq.n	800ea3e <_fflush_r+0xa>
 800ea56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ea58:	07d0      	lsls	r0, r2, #31
 800ea5a:	d404      	bmi.n	800ea66 <_fflush_r+0x32>
 800ea5c:	0599      	lsls	r1, r3, #22
 800ea5e:	d402      	bmi.n	800ea66 <_fflush_r+0x32>
 800ea60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ea62:	f7fe fc32 	bl	800d2ca <__retarget_lock_acquire_recursive>
 800ea66:	4628      	mov	r0, r5
 800ea68:	4621      	mov	r1, r4
 800ea6a:	f7ff ff5d 	bl	800e928 <__sflush_r>
 800ea6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ea70:	07da      	lsls	r2, r3, #31
 800ea72:	4605      	mov	r5, r0
 800ea74:	d4e4      	bmi.n	800ea40 <_fflush_r+0xc>
 800ea76:	89a3      	ldrh	r3, [r4, #12]
 800ea78:	059b      	lsls	r3, r3, #22
 800ea7a:	d4e1      	bmi.n	800ea40 <_fflush_r+0xc>
 800ea7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ea7e:	f7fe fc25 	bl	800d2cc <__retarget_lock_release_recursive>
 800ea82:	e7dd      	b.n	800ea40 <_fflush_r+0xc>

0800ea84 <memmove>:
 800ea84:	4288      	cmp	r0, r1
 800ea86:	b510      	push	{r4, lr}
 800ea88:	eb01 0402 	add.w	r4, r1, r2
 800ea8c:	d902      	bls.n	800ea94 <memmove+0x10>
 800ea8e:	4284      	cmp	r4, r0
 800ea90:	4623      	mov	r3, r4
 800ea92:	d807      	bhi.n	800eaa4 <memmove+0x20>
 800ea94:	1e43      	subs	r3, r0, #1
 800ea96:	42a1      	cmp	r1, r4
 800ea98:	d008      	beq.n	800eaac <memmove+0x28>
 800ea9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ea9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eaa2:	e7f8      	b.n	800ea96 <memmove+0x12>
 800eaa4:	4402      	add	r2, r0
 800eaa6:	4601      	mov	r1, r0
 800eaa8:	428a      	cmp	r2, r1
 800eaaa:	d100      	bne.n	800eaae <memmove+0x2a>
 800eaac:	bd10      	pop	{r4, pc}
 800eaae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800eab2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800eab6:	e7f7      	b.n	800eaa8 <memmove+0x24>

0800eab8 <__assert_func>:
 800eab8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eaba:	4614      	mov	r4, r2
 800eabc:	461a      	mov	r2, r3
 800eabe:	4b09      	ldr	r3, [pc, #36]	; (800eae4 <__assert_func+0x2c>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	4605      	mov	r5, r0
 800eac4:	68d8      	ldr	r0, [r3, #12]
 800eac6:	b14c      	cbz	r4, 800eadc <__assert_func+0x24>
 800eac8:	4b07      	ldr	r3, [pc, #28]	; (800eae8 <__assert_func+0x30>)
 800eaca:	9100      	str	r1, [sp, #0]
 800eacc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ead0:	4906      	ldr	r1, [pc, #24]	; (800eaec <__assert_func+0x34>)
 800ead2:	462b      	mov	r3, r5
 800ead4:	f000 f872 	bl	800ebbc <fiprintf>
 800ead8:	f000 f882 	bl	800ebe0 <abort>
 800eadc:	4b04      	ldr	r3, [pc, #16]	; (800eaf0 <__assert_func+0x38>)
 800eade:	461c      	mov	r4, r3
 800eae0:	e7f3      	b.n	800eaca <__assert_func+0x12>
 800eae2:	bf00      	nop
 800eae4:	2400019c 	.word	0x2400019c
 800eae8:	0800f43f 	.word	0x0800f43f
 800eaec:	0800f44c 	.word	0x0800f44c
 800eaf0:	0800f47a 	.word	0x0800f47a

0800eaf4 <_calloc_r>:
 800eaf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eaf6:	fba1 2402 	umull	r2, r4, r1, r2
 800eafa:	b94c      	cbnz	r4, 800eb10 <_calloc_r+0x1c>
 800eafc:	4611      	mov	r1, r2
 800eafe:	9201      	str	r2, [sp, #4]
 800eb00:	f7fd fd68 	bl	800c5d4 <_malloc_r>
 800eb04:	9a01      	ldr	r2, [sp, #4]
 800eb06:	4605      	mov	r5, r0
 800eb08:	b930      	cbnz	r0, 800eb18 <_calloc_r+0x24>
 800eb0a:	4628      	mov	r0, r5
 800eb0c:	b003      	add	sp, #12
 800eb0e:	bd30      	pop	{r4, r5, pc}
 800eb10:	220c      	movs	r2, #12
 800eb12:	6002      	str	r2, [r0, #0]
 800eb14:	2500      	movs	r5, #0
 800eb16:	e7f8      	b.n	800eb0a <_calloc_r+0x16>
 800eb18:	4621      	mov	r1, r4
 800eb1a:	f7fe fb48 	bl	800d1ae <memset>
 800eb1e:	e7f4      	b.n	800eb0a <_calloc_r+0x16>

0800eb20 <__ascii_mbtowc>:
 800eb20:	b082      	sub	sp, #8
 800eb22:	b901      	cbnz	r1, 800eb26 <__ascii_mbtowc+0x6>
 800eb24:	a901      	add	r1, sp, #4
 800eb26:	b142      	cbz	r2, 800eb3a <__ascii_mbtowc+0x1a>
 800eb28:	b14b      	cbz	r3, 800eb3e <__ascii_mbtowc+0x1e>
 800eb2a:	7813      	ldrb	r3, [r2, #0]
 800eb2c:	600b      	str	r3, [r1, #0]
 800eb2e:	7812      	ldrb	r2, [r2, #0]
 800eb30:	1e10      	subs	r0, r2, #0
 800eb32:	bf18      	it	ne
 800eb34:	2001      	movne	r0, #1
 800eb36:	b002      	add	sp, #8
 800eb38:	4770      	bx	lr
 800eb3a:	4610      	mov	r0, r2
 800eb3c:	e7fb      	b.n	800eb36 <__ascii_mbtowc+0x16>
 800eb3e:	f06f 0001 	mvn.w	r0, #1
 800eb42:	e7f8      	b.n	800eb36 <__ascii_mbtowc+0x16>

0800eb44 <_realloc_r>:
 800eb44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb48:	4680      	mov	r8, r0
 800eb4a:	4614      	mov	r4, r2
 800eb4c:	460e      	mov	r6, r1
 800eb4e:	b921      	cbnz	r1, 800eb5a <_realloc_r+0x16>
 800eb50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb54:	4611      	mov	r1, r2
 800eb56:	f7fd bd3d 	b.w	800c5d4 <_malloc_r>
 800eb5a:	b92a      	cbnz	r2, 800eb68 <_realloc_r+0x24>
 800eb5c:	f7ff f9c4 	bl	800dee8 <_free_r>
 800eb60:	4625      	mov	r5, r4
 800eb62:	4628      	mov	r0, r5
 800eb64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb68:	f000 f841 	bl	800ebee <_malloc_usable_size_r>
 800eb6c:	4284      	cmp	r4, r0
 800eb6e:	4607      	mov	r7, r0
 800eb70:	d802      	bhi.n	800eb78 <_realloc_r+0x34>
 800eb72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800eb76:	d812      	bhi.n	800eb9e <_realloc_r+0x5a>
 800eb78:	4621      	mov	r1, r4
 800eb7a:	4640      	mov	r0, r8
 800eb7c:	f7fd fd2a 	bl	800c5d4 <_malloc_r>
 800eb80:	4605      	mov	r5, r0
 800eb82:	2800      	cmp	r0, #0
 800eb84:	d0ed      	beq.n	800eb62 <_realloc_r+0x1e>
 800eb86:	42bc      	cmp	r4, r7
 800eb88:	4622      	mov	r2, r4
 800eb8a:	4631      	mov	r1, r6
 800eb8c:	bf28      	it	cs
 800eb8e:	463a      	movcs	r2, r7
 800eb90:	f7fe fba5 	bl	800d2de <memcpy>
 800eb94:	4631      	mov	r1, r6
 800eb96:	4640      	mov	r0, r8
 800eb98:	f7ff f9a6 	bl	800dee8 <_free_r>
 800eb9c:	e7e1      	b.n	800eb62 <_realloc_r+0x1e>
 800eb9e:	4635      	mov	r5, r6
 800eba0:	e7df      	b.n	800eb62 <_realloc_r+0x1e>

0800eba2 <__ascii_wctomb>:
 800eba2:	b149      	cbz	r1, 800ebb8 <__ascii_wctomb+0x16>
 800eba4:	2aff      	cmp	r2, #255	; 0xff
 800eba6:	bf85      	ittet	hi
 800eba8:	238a      	movhi	r3, #138	; 0x8a
 800ebaa:	6003      	strhi	r3, [r0, #0]
 800ebac:	700a      	strbls	r2, [r1, #0]
 800ebae:	f04f 30ff 	movhi.w	r0, #4294967295
 800ebb2:	bf98      	it	ls
 800ebb4:	2001      	movls	r0, #1
 800ebb6:	4770      	bx	lr
 800ebb8:	4608      	mov	r0, r1
 800ebba:	4770      	bx	lr

0800ebbc <fiprintf>:
 800ebbc:	b40e      	push	{r1, r2, r3}
 800ebbe:	b503      	push	{r0, r1, lr}
 800ebc0:	4601      	mov	r1, r0
 800ebc2:	ab03      	add	r3, sp, #12
 800ebc4:	4805      	ldr	r0, [pc, #20]	; (800ebdc <fiprintf+0x20>)
 800ebc6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ebca:	6800      	ldr	r0, [r0, #0]
 800ebcc:	9301      	str	r3, [sp, #4]
 800ebce:	f000 f83f 	bl	800ec50 <_vfiprintf_r>
 800ebd2:	b002      	add	sp, #8
 800ebd4:	f85d eb04 	ldr.w	lr, [sp], #4
 800ebd8:	b003      	add	sp, #12
 800ebda:	4770      	bx	lr
 800ebdc:	2400019c 	.word	0x2400019c

0800ebe0 <abort>:
 800ebe0:	b508      	push	{r3, lr}
 800ebe2:	2006      	movs	r0, #6
 800ebe4:	f000 fa0c 	bl	800f000 <raise>
 800ebe8:	2001      	movs	r0, #1
 800ebea:	f7f2 fee3 	bl	80019b4 <_exit>

0800ebee <_malloc_usable_size_r>:
 800ebee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ebf2:	1f18      	subs	r0, r3, #4
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	bfbc      	itt	lt
 800ebf8:	580b      	ldrlt	r3, [r1, r0]
 800ebfa:	18c0      	addlt	r0, r0, r3
 800ebfc:	4770      	bx	lr

0800ebfe <__sfputc_r>:
 800ebfe:	6893      	ldr	r3, [r2, #8]
 800ec00:	3b01      	subs	r3, #1
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	b410      	push	{r4}
 800ec06:	6093      	str	r3, [r2, #8]
 800ec08:	da08      	bge.n	800ec1c <__sfputc_r+0x1e>
 800ec0a:	6994      	ldr	r4, [r2, #24]
 800ec0c:	42a3      	cmp	r3, r4
 800ec0e:	db01      	blt.n	800ec14 <__sfputc_r+0x16>
 800ec10:	290a      	cmp	r1, #10
 800ec12:	d103      	bne.n	800ec1c <__sfputc_r+0x1e>
 800ec14:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec18:	f000 b934 	b.w	800ee84 <__swbuf_r>
 800ec1c:	6813      	ldr	r3, [r2, #0]
 800ec1e:	1c58      	adds	r0, r3, #1
 800ec20:	6010      	str	r0, [r2, #0]
 800ec22:	7019      	strb	r1, [r3, #0]
 800ec24:	4608      	mov	r0, r1
 800ec26:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec2a:	4770      	bx	lr

0800ec2c <__sfputs_r>:
 800ec2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec2e:	4606      	mov	r6, r0
 800ec30:	460f      	mov	r7, r1
 800ec32:	4614      	mov	r4, r2
 800ec34:	18d5      	adds	r5, r2, r3
 800ec36:	42ac      	cmp	r4, r5
 800ec38:	d101      	bne.n	800ec3e <__sfputs_r+0x12>
 800ec3a:	2000      	movs	r0, #0
 800ec3c:	e007      	b.n	800ec4e <__sfputs_r+0x22>
 800ec3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec42:	463a      	mov	r2, r7
 800ec44:	4630      	mov	r0, r6
 800ec46:	f7ff ffda 	bl	800ebfe <__sfputc_r>
 800ec4a:	1c43      	adds	r3, r0, #1
 800ec4c:	d1f3      	bne.n	800ec36 <__sfputs_r+0xa>
 800ec4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ec50 <_vfiprintf_r>:
 800ec50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec54:	460d      	mov	r5, r1
 800ec56:	b09d      	sub	sp, #116	; 0x74
 800ec58:	4614      	mov	r4, r2
 800ec5a:	4698      	mov	r8, r3
 800ec5c:	4606      	mov	r6, r0
 800ec5e:	b118      	cbz	r0, 800ec68 <_vfiprintf_r+0x18>
 800ec60:	6a03      	ldr	r3, [r0, #32]
 800ec62:	b90b      	cbnz	r3, 800ec68 <_vfiprintf_r+0x18>
 800ec64:	f7fe fa0a 	bl	800d07c <__sinit>
 800ec68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ec6a:	07d9      	lsls	r1, r3, #31
 800ec6c:	d405      	bmi.n	800ec7a <_vfiprintf_r+0x2a>
 800ec6e:	89ab      	ldrh	r3, [r5, #12]
 800ec70:	059a      	lsls	r2, r3, #22
 800ec72:	d402      	bmi.n	800ec7a <_vfiprintf_r+0x2a>
 800ec74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ec76:	f7fe fb28 	bl	800d2ca <__retarget_lock_acquire_recursive>
 800ec7a:	89ab      	ldrh	r3, [r5, #12]
 800ec7c:	071b      	lsls	r3, r3, #28
 800ec7e:	d501      	bpl.n	800ec84 <_vfiprintf_r+0x34>
 800ec80:	692b      	ldr	r3, [r5, #16]
 800ec82:	b99b      	cbnz	r3, 800ecac <_vfiprintf_r+0x5c>
 800ec84:	4629      	mov	r1, r5
 800ec86:	4630      	mov	r0, r6
 800ec88:	f000 f93a 	bl	800ef00 <__swsetup_r>
 800ec8c:	b170      	cbz	r0, 800ecac <_vfiprintf_r+0x5c>
 800ec8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ec90:	07dc      	lsls	r4, r3, #31
 800ec92:	d504      	bpl.n	800ec9e <_vfiprintf_r+0x4e>
 800ec94:	f04f 30ff 	mov.w	r0, #4294967295
 800ec98:	b01d      	add	sp, #116	; 0x74
 800ec9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec9e:	89ab      	ldrh	r3, [r5, #12]
 800eca0:	0598      	lsls	r0, r3, #22
 800eca2:	d4f7      	bmi.n	800ec94 <_vfiprintf_r+0x44>
 800eca4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eca6:	f7fe fb11 	bl	800d2cc <__retarget_lock_release_recursive>
 800ecaa:	e7f3      	b.n	800ec94 <_vfiprintf_r+0x44>
 800ecac:	2300      	movs	r3, #0
 800ecae:	9309      	str	r3, [sp, #36]	; 0x24
 800ecb0:	2320      	movs	r3, #32
 800ecb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ecb6:	f8cd 800c 	str.w	r8, [sp, #12]
 800ecba:	2330      	movs	r3, #48	; 0x30
 800ecbc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ee70 <_vfiprintf_r+0x220>
 800ecc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ecc4:	f04f 0901 	mov.w	r9, #1
 800ecc8:	4623      	mov	r3, r4
 800ecca:	469a      	mov	sl, r3
 800eccc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ecd0:	b10a      	cbz	r2, 800ecd6 <_vfiprintf_r+0x86>
 800ecd2:	2a25      	cmp	r2, #37	; 0x25
 800ecd4:	d1f9      	bne.n	800ecca <_vfiprintf_r+0x7a>
 800ecd6:	ebba 0b04 	subs.w	fp, sl, r4
 800ecda:	d00b      	beq.n	800ecf4 <_vfiprintf_r+0xa4>
 800ecdc:	465b      	mov	r3, fp
 800ecde:	4622      	mov	r2, r4
 800ece0:	4629      	mov	r1, r5
 800ece2:	4630      	mov	r0, r6
 800ece4:	f7ff ffa2 	bl	800ec2c <__sfputs_r>
 800ece8:	3001      	adds	r0, #1
 800ecea:	f000 80a9 	beq.w	800ee40 <_vfiprintf_r+0x1f0>
 800ecee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ecf0:	445a      	add	r2, fp
 800ecf2:	9209      	str	r2, [sp, #36]	; 0x24
 800ecf4:	f89a 3000 	ldrb.w	r3, [sl]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	f000 80a1 	beq.w	800ee40 <_vfiprintf_r+0x1f0>
 800ecfe:	2300      	movs	r3, #0
 800ed00:	f04f 32ff 	mov.w	r2, #4294967295
 800ed04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed08:	f10a 0a01 	add.w	sl, sl, #1
 800ed0c:	9304      	str	r3, [sp, #16]
 800ed0e:	9307      	str	r3, [sp, #28]
 800ed10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ed14:	931a      	str	r3, [sp, #104]	; 0x68
 800ed16:	4654      	mov	r4, sl
 800ed18:	2205      	movs	r2, #5
 800ed1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed1e:	4854      	ldr	r0, [pc, #336]	; (800ee70 <_vfiprintf_r+0x220>)
 800ed20:	f7f1 fade 	bl	80002e0 <memchr>
 800ed24:	9a04      	ldr	r2, [sp, #16]
 800ed26:	b9d8      	cbnz	r0, 800ed60 <_vfiprintf_r+0x110>
 800ed28:	06d1      	lsls	r1, r2, #27
 800ed2a:	bf44      	itt	mi
 800ed2c:	2320      	movmi	r3, #32
 800ed2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ed32:	0713      	lsls	r3, r2, #28
 800ed34:	bf44      	itt	mi
 800ed36:	232b      	movmi	r3, #43	; 0x2b
 800ed38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ed3c:	f89a 3000 	ldrb.w	r3, [sl]
 800ed40:	2b2a      	cmp	r3, #42	; 0x2a
 800ed42:	d015      	beq.n	800ed70 <_vfiprintf_r+0x120>
 800ed44:	9a07      	ldr	r2, [sp, #28]
 800ed46:	4654      	mov	r4, sl
 800ed48:	2000      	movs	r0, #0
 800ed4a:	f04f 0c0a 	mov.w	ip, #10
 800ed4e:	4621      	mov	r1, r4
 800ed50:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ed54:	3b30      	subs	r3, #48	; 0x30
 800ed56:	2b09      	cmp	r3, #9
 800ed58:	d94d      	bls.n	800edf6 <_vfiprintf_r+0x1a6>
 800ed5a:	b1b0      	cbz	r0, 800ed8a <_vfiprintf_r+0x13a>
 800ed5c:	9207      	str	r2, [sp, #28]
 800ed5e:	e014      	b.n	800ed8a <_vfiprintf_r+0x13a>
 800ed60:	eba0 0308 	sub.w	r3, r0, r8
 800ed64:	fa09 f303 	lsl.w	r3, r9, r3
 800ed68:	4313      	orrs	r3, r2
 800ed6a:	9304      	str	r3, [sp, #16]
 800ed6c:	46a2      	mov	sl, r4
 800ed6e:	e7d2      	b.n	800ed16 <_vfiprintf_r+0xc6>
 800ed70:	9b03      	ldr	r3, [sp, #12]
 800ed72:	1d19      	adds	r1, r3, #4
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	9103      	str	r1, [sp, #12]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	bfbb      	ittet	lt
 800ed7c:	425b      	neglt	r3, r3
 800ed7e:	f042 0202 	orrlt.w	r2, r2, #2
 800ed82:	9307      	strge	r3, [sp, #28]
 800ed84:	9307      	strlt	r3, [sp, #28]
 800ed86:	bfb8      	it	lt
 800ed88:	9204      	strlt	r2, [sp, #16]
 800ed8a:	7823      	ldrb	r3, [r4, #0]
 800ed8c:	2b2e      	cmp	r3, #46	; 0x2e
 800ed8e:	d10c      	bne.n	800edaa <_vfiprintf_r+0x15a>
 800ed90:	7863      	ldrb	r3, [r4, #1]
 800ed92:	2b2a      	cmp	r3, #42	; 0x2a
 800ed94:	d134      	bne.n	800ee00 <_vfiprintf_r+0x1b0>
 800ed96:	9b03      	ldr	r3, [sp, #12]
 800ed98:	1d1a      	adds	r2, r3, #4
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	9203      	str	r2, [sp, #12]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	bfb8      	it	lt
 800eda2:	f04f 33ff 	movlt.w	r3, #4294967295
 800eda6:	3402      	adds	r4, #2
 800eda8:	9305      	str	r3, [sp, #20]
 800edaa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ee80 <_vfiprintf_r+0x230>
 800edae:	7821      	ldrb	r1, [r4, #0]
 800edb0:	2203      	movs	r2, #3
 800edb2:	4650      	mov	r0, sl
 800edb4:	f7f1 fa94 	bl	80002e0 <memchr>
 800edb8:	b138      	cbz	r0, 800edca <_vfiprintf_r+0x17a>
 800edba:	9b04      	ldr	r3, [sp, #16]
 800edbc:	eba0 000a 	sub.w	r0, r0, sl
 800edc0:	2240      	movs	r2, #64	; 0x40
 800edc2:	4082      	lsls	r2, r0
 800edc4:	4313      	orrs	r3, r2
 800edc6:	3401      	adds	r4, #1
 800edc8:	9304      	str	r3, [sp, #16]
 800edca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edce:	4829      	ldr	r0, [pc, #164]	; (800ee74 <_vfiprintf_r+0x224>)
 800edd0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800edd4:	2206      	movs	r2, #6
 800edd6:	f7f1 fa83 	bl	80002e0 <memchr>
 800edda:	2800      	cmp	r0, #0
 800eddc:	d03f      	beq.n	800ee5e <_vfiprintf_r+0x20e>
 800edde:	4b26      	ldr	r3, [pc, #152]	; (800ee78 <_vfiprintf_r+0x228>)
 800ede0:	bb1b      	cbnz	r3, 800ee2a <_vfiprintf_r+0x1da>
 800ede2:	9b03      	ldr	r3, [sp, #12]
 800ede4:	3307      	adds	r3, #7
 800ede6:	f023 0307 	bic.w	r3, r3, #7
 800edea:	3308      	adds	r3, #8
 800edec:	9303      	str	r3, [sp, #12]
 800edee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edf0:	443b      	add	r3, r7
 800edf2:	9309      	str	r3, [sp, #36]	; 0x24
 800edf4:	e768      	b.n	800ecc8 <_vfiprintf_r+0x78>
 800edf6:	fb0c 3202 	mla	r2, ip, r2, r3
 800edfa:	460c      	mov	r4, r1
 800edfc:	2001      	movs	r0, #1
 800edfe:	e7a6      	b.n	800ed4e <_vfiprintf_r+0xfe>
 800ee00:	2300      	movs	r3, #0
 800ee02:	3401      	adds	r4, #1
 800ee04:	9305      	str	r3, [sp, #20]
 800ee06:	4619      	mov	r1, r3
 800ee08:	f04f 0c0a 	mov.w	ip, #10
 800ee0c:	4620      	mov	r0, r4
 800ee0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee12:	3a30      	subs	r2, #48	; 0x30
 800ee14:	2a09      	cmp	r2, #9
 800ee16:	d903      	bls.n	800ee20 <_vfiprintf_r+0x1d0>
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d0c6      	beq.n	800edaa <_vfiprintf_r+0x15a>
 800ee1c:	9105      	str	r1, [sp, #20]
 800ee1e:	e7c4      	b.n	800edaa <_vfiprintf_r+0x15a>
 800ee20:	fb0c 2101 	mla	r1, ip, r1, r2
 800ee24:	4604      	mov	r4, r0
 800ee26:	2301      	movs	r3, #1
 800ee28:	e7f0      	b.n	800ee0c <_vfiprintf_r+0x1bc>
 800ee2a:	ab03      	add	r3, sp, #12
 800ee2c:	9300      	str	r3, [sp, #0]
 800ee2e:	462a      	mov	r2, r5
 800ee30:	4b12      	ldr	r3, [pc, #72]	; (800ee7c <_vfiprintf_r+0x22c>)
 800ee32:	a904      	add	r1, sp, #16
 800ee34:	4630      	mov	r0, r6
 800ee36:	f7fd fceb 	bl	800c810 <_printf_float>
 800ee3a:	4607      	mov	r7, r0
 800ee3c:	1c78      	adds	r0, r7, #1
 800ee3e:	d1d6      	bne.n	800edee <_vfiprintf_r+0x19e>
 800ee40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ee42:	07d9      	lsls	r1, r3, #31
 800ee44:	d405      	bmi.n	800ee52 <_vfiprintf_r+0x202>
 800ee46:	89ab      	ldrh	r3, [r5, #12]
 800ee48:	059a      	lsls	r2, r3, #22
 800ee4a:	d402      	bmi.n	800ee52 <_vfiprintf_r+0x202>
 800ee4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ee4e:	f7fe fa3d 	bl	800d2cc <__retarget_lock_release_recursive>
 800ee52:	89ab      	ldrh	r3, [r5, #12]
 800ee54:	065b      	lsls	r3, r3, #25
 800ee56:	f53f af1d 	bmi.w	800ec94 <_vfiprintf_r+0x44>
 800ee5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ee5c:	e71c      	b.n	800ec98 <_vfiprintf_r+0x48>
 800ee5e:	ab03      	add	r3, sp, #12
 800ee60:	9300      	str	r3, [sp, #0]
 800ee62:	462a      	mov	r2, r5
 800ee64:	4b05      	ldr	r3, [pc, #20]	; (800ee7c <_vfiprintf_r+0x22c>)
 800ee66:	a904      	add	r1, sp, #16
 800ee68:	4630      	mov	r0, r6
 800ee6a:	f7fd ff59 	bl	800cd20 <_printf_i>
 800ee6e:	e7e4      	b.n	800ee3a <_vfiprintf_r+0x1ea>
 800ee70:	0800f424 	.word	0x0800f424
 800ee74:	0800f42e 	.word	0x0800f42e
 800ee78:	0800c811 	.word	0x0800c811
 800ee7c:	0800ec2d 	.word	0x0800ec2d
 800ee80:	0800f42a 	.word	0x0800f42a

0800ee84 <__swbuf_r>:
 800ee84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee86:	460e      	mov	r6, r1
 800ee88:	4614      	mov	r4, r2
 800ee8a:	4605      	mov	r5, r0
 800ee8c:	b118      	cbz	r0, 800ee96 <__swbuf_r+0x12>
 800ee8e:	6a03      	ldr	r3, [r0, #32]
 800ee90:	b90b      	cbnz	r3, 800ee96 <__swbuf_r+0x12>
 800ee92:	f7fe f8f3 	bl	800d07c <__sinit>
 800ee96:	69a3      	ldr	r3, [r4, #24]
 800ee98:	60a3      	str	r3, [r4, #8]
 800ee9a:	89a3      	ldrh	r3, [r4, #12]
 800ee9c:	071a      	lsls	r2, r3, #28
 800ee9e:	d525      	bpl.n	800eeec <__swbuf_r+0x68>
 800eea0:	6923      	ldr	r3, [r4, #16]
 800eea2:	b31b      	cbz	r3, 800eeec <__swbuf_r+0x68>
 800eea4:	6823      	ldr	r3, [r4, #0]
 800eea6:	6922      	ldr	r2, [r4, #16]
 800eea8:	1a98      	subs	r0, r3, r2
 800eeaa:	6963      	ldr	r3, [r4, #20]
 800eeac:	b2f6      	uxtb	r6, r6
 800eeae:	4283      	cmp	r3, r0
 800eeb0:	4637      	mov	r7, r6
 800eeb2:	dc04      	bgt.n	800eebe <__swbuf_r+0x3a>
 800eeb4:	4621      	mov	r1, r4
 800eeb6:	4628      	mov	r0, r5
 800eeb8:	f7ff fdbc 	bl	800ea34 <_fflush_r>
 800eebc:	b9e0      	cbnz	r0, 800eef8 <__swbuf_r+0x74>
 800eebe:	68a3      	ldr	r3, [r4, #8]
 800eec0:	3b01      	subs	r3, #1
 800eec2:	60a3      	str	r3, [r4, #8]
 800eec4:	6823      	ldr	r3, [r4, #0]
 800eec6:	1c5a      	adds	r2, r3, #1
 800eec8:	6022      	str	r2, [r4, #0]
 800eeca:	701e      	strb	r6, [r3, #0]
 800eecc:	6962      	ldr	r2, [r4, #20]
 800eece:	1c43      	adds	r3, r0, #1
 800eed0:	429a      	cmp	r2, r3
 800eed2:	d004      	beq.n	800eede <__swbuf_r+0x5a>
 800eed4:	89a3      	ldrh	r3, [r4, #12]
 800eed6:	07db      	lsls	r3, r3, #31
 800eed8:	d506      	bpl.n	800eee8 <__swbuf_r+0x64>
 800eeda:	2e0a      	cmp	r6, #10
 800eedc:	d104      	bne.n	800eee8 <__swbuf_r+0x64>
 800eede:	4621      	mov	r1, r4
 800eee0:	4628      	mov	r0, r5
 800eee2:	f7ff fda7 	bl	800ea34 <_fflush_r>
 800eee6:	b938      	cbnz	r0, 800eef8 <__swbuf_r+0x74>
 800eee8:	4638      	mov	r0, r7
 800eeea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eeec:	4621      	mov	r1, r4
 800eeee:	4628      	mov	r0, r5
 800eef0:	f000 f806 	bl	800ef00 <__swsetup_r>
 800eef4:	2800      	cmp	r0, #0
 800eef6:	d0d5      	beq.n	800eea4 <__swbuf_r+0x20>
 800eef8:	f04f 37ff 	mov.w	r7, #4294967295
 800eefc:	e7f4      	b.n	800eee8 <__swbuf_r+0x64>
	...

0800ef00 <__swsetup_r>:
 800ef00:	b538      	push	{r3, r4, r5, lr}
 800ef02:	4b2a      	ldr	r3, [pc, #168]	; (800efac <__swsetup_r+0xac>)
 800ef04:	4605      	mov	r5, r0
 800ef06:	6818      	ldr	r0, [r3, #0]
 800ef08:	460c      	mov	r4, r1
 800ef0a:	b118      	cbz	r0, 800ef14 <__swsetup_r+0x14>
 800ef0c:	6a03      	ldr	r3, [r0, #32]
 800ef0e:	b90b      	cbnz	r3, 800ef14 <__swsetup_r+0x14>
 800ef10:	f7fe f8b4 	bl	800d07c <__sinit>
 800ef14:	89a3      	ldrh	r3, [r4, #12]
 800ef16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ef1a:	0718      	lsls	r0, r3, #28
 800ef1c:	d422      	bmi.n	800ef64 <__swsetup_r+0x64>
 800ef1e:	06d9      	lsls	r1, r3, #27
 800ef20:	d407      	bmi.n	800ef32 <__swsetup_r+0x32>
 800ef22:	2309      	movs	r3, #9
 800ef24:	602b      	str	r3, [r5, #0]
 800ef26:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ef2a:	81a3      	strh	r3, [r4, #12]
 800ef2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ef30:	e034      	b.n	800ef9c <__swsetup_r+0x9c>
 800ef32:	0758      	lsls	r0, r3, #29
 800ef34:	d512      	bpl.n	800ef5c <__swsetup_r+0x5c>
 800ef36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ef38:	b141      	cbz	r1, 800ef4c <__swsetup_r+0x4c>
 800ef3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ef3e:	4299      	cmp	r1, r3
 800ef40:	d002      	beq.n	800ef48 <__swsetup_r+0x48>
 800ef42:	4628      	mov	r0, r5
 800ef44:	f7fe ffd0 	bl	800dee8 <_free_r>
 800ef48:	2300      	movs	r3, #0
 800ef4a:	6363      	str	r3, [r4, #52]	; 0x34
 800ef4c:	89a3      	ldrh	r3, [r4, #12]
 800ef4e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ef52:	81a3      	strh	r3, [r4, #12]
 800ef54:	2300      	movs	r3, #0
 800ef56:	6063      	str	r3, [r4, #4]
 800ef58:	6923      	ldr	r3, [r4, #16]
 800ef5a:	6023      	str	r3, [r4, #0]
 800ef5c:	89a3      	ldrh	r3, [r4, #12]
 800ef5e:	f043 0308 	orr.w	r3, r3, #8
 800ef62:	81a3      	strh	r3, [r4, #12]
 800ef64:	6923      	ldr	r3, [r4, #16]
 800ef66:	b94b      	cbnz	r3, 800ef7c <__swsetup_r+0x7c>
 800ef68:	89a3      	ldrh	r3, [r4, #12]
 800ef6a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ef6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ef72:	d003      	beq.n	800ef7c <__swsetup_r+0x7c>
 800ef74:	4621      	mov	r1, r4
 800ef76:	4628      	mov	r0, r5
 800ef78:	f000 f884 	bl	800f084 <__smakebuf_r>
 800ef7c:	89a0      	ldrh	r0, [r4, #12]
 800ef7e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ef82:	f010 0301 	ands.w	r3, r0, #1
 800ef86:	d00a      	beq.n	800ef9e <__swsetup_r+0x9e>
 800ef88:	2300      	movs	r3, #0
 800ef8a:	60a3      	str	r3, [r4, #8]
 800ef8c:	6963      	ldr	r3, [r4, #20]
 800ef8e:	425b      	negs	r3, r3
 800ef90:	61a3      	str	r3, [r4, #24]
 800ef92:	6923      	ldr	r3, [r4, #16]
 800ef94:	b943      	cbnz	r3, 800efa8 <__swsetup_r+0xa8>
 800ef96:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ef9a:	d1c4      	bne.n	800ef26 <__swsetup_r+0x26>
 800ef9c:	bd38      	pop	{r3, r4, r5, pc}
 800ef9e:	0781      	lsls	r1, r0, #30
 800efa0:	bf58      	it	pl
 800efa2:	6963      	ldrpl	r3, [r4, #20]
 800efa4:	60a3      	str	r3, [r4, #8]
 800efa6:	e7f4      	b.n	800ef92 <__swsetup_r+0x92>
 800efa8:	2000      	movs	r0, #0
 800efaa:	e7f7      	b.n	800ef9c <__swsetup_r+0x9c>
 800efac:	2400019c 	.word	0x2400019c

0800efb0 <_raise_r>:
 800efb0:	291f      	cmp	r1, #31
 800efb2:	b538      	push	{r3, r4, r5, lr}
 800efb4:	4604      	mov	r4, r0
 800efb6:	460d      	mov	r5, r1
 800efb8:	d904      	bls.n	800efc4 <_raise_r+0x14>
 800efba:	2316      	movs	r3, #22
 800efbc:	6003      	str	r3, [r0, #0]
 800efbe:	f04f 30ff 	mov.w	r0, #4294967295
 800efc2:	bd38      	pop	{r3, r4, r5, pc}
 800efc4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800efc6:	b112      	cbz	r2, 800efce <_raise_r+0x1e>
 800efc8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800efcc:	b94b      	cbnz	r3, 800efe2 <_raise_r+0x32>
 800efce:	4620      	mov	r0, r4
 800efd0:	f000 f830 	bl	800f034 <_getpid_r>
 800efd4:	462a      	mov	r2, r5
 800efd6:	4601      	mov	r1, r0
 800efd8:	4620      	mov	r0, r4
 800efda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800efde:	f000 b817 	b.w	800f010 <_kill_r>
 800efe2:	2b01      	cmp	r3, #1
 800efe4:	d00a      	beq.n	800effc <_raise_r+0x4c>
 800efe6:	1c59      	adds	r1, r3, #1
 800efe8:	d103      	bne.n	800eff2 <_raise_r+0x42>
 800efea:	2316      	movs	r3, #22
 800efec:	6003      	str	r3, [r0, #0]
 800efee:	2001      	movs	r0, #1
 800eff0:	e7e7      	b.n	800efc2 <_raise_r+0x12>
 800eff2:	2400      	movs	r4, #0
 800eff4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800eff8:	4628      	mov	r0, r5
 800effa:	4798      	blx	r3
 800effc:	2000      	movs	r0, #0
 800effe:	e7e0      	b.n	800efc2 <_raise_r+0x12>

0800f000 <raise>:
 800f000:	4b02      	ldr	r3, [pc, #8]	; (800f00c <raise+0xc>)
 800f002:	4601      	mov	r1, r0
 800f004:	6818      	ldr	r0, [r3, #0]
 800f006:	f7ff bfd3 	b.w	800efb0 <_raise_r>
 800f00a:	bf00      	nop
 800f00c:	2400019c 	.word	0x2400019c

0800f010 <_kill_r>:
 800f010:	b538      	push	{r3, r4, r5, lr}
 800f012:	4d07      	ldr	r5, [pc, #28]	; (800f030 <_kill_r+0x20>)
 800f014:	2300      	movs	r3, #0
 800f016:	4604      	mov	r4, r0
 800f018:	4608      	mov	r0, r1
 800f01a:	4611      	mov	r1, r2
 800f01c:	602b      	str	r3, [r5, #0]
 800f01e:	f7f2 fcb9 	bl	8001994 <_kill>
 800f022:	1c43      	adds	r3, r0, #1
 800f024:	d102      	bne.n	800f02c <_kill_r+0x1c>
 800f026:	682b      	ldr	r3, [r5, #0]
 800f028:	b103      	cbz	r3, 800f02c <_kill_r+0x1c>
 800f02a:	6023      	str	r3, [r4, #0]
 800f02c:	bd38      	pop	{r3, r4, r5, pc}
 800f02e:	bf00      	nop
 800f030:	24010eac 	.word	0x24010eac

0800f034 <_getpid_r>:
 800f034:	f7f2 bca6 	b.w	8001984 <_getpid>

0800f038 <__swhatbuf_r>:
 800f038:	b570      	push	{r4, r5, r6, lr}
 800f03a:	460c      	mov	r4, r1
 800f03c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f040:	2900      	cmp	r1, #0
 800f042:	b096      	sub	sp, #88	; 0x58
 800f044:	4615      	mov	r5, r2
 800f046:	461e      	mov	r6, r3
 800f048:	da0d      	bge.n	800f066 <__swhatbuf_r+0x2e>
 800f04a:	89a3      	ldrh	r3, [r4, #12]
 800f04c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f050:	f04f 0100 	mov.w	r1, #0
 800f054:	bf0c      	ite	eq
 800f056:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f05a:	2340      	movne	r3, #64	; 0x40
 800f05c:	2000      	movs	r0, #0
 800f05e:	6031      	str	r1, [r6, #0]
 800f060:	602b      	str	r3, [r5, #0]
 800f062:	b016      	add	sp, #88	; 0x58
 800f064:	bd70      	pop	{r4, r5, r6, pc}
 800f066:	466a      	mov	r2, sp
 800f068:	f000 f848 	bl	800f0fc <_fstat_r>
 800f06c:	2800      	cmp	r0, #0
 800f06e:	dbec      	blt.n	800f04a <__swhatbuf_r+0x12>
 800f070:	9901      	ldr	r1, [sp, #4]
 800f072:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f076:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f07a:	4259      	negs	r1, r3
 800f07c:	4159      	adcs	r1, r3
 800f07e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f082:	e7eb      	b.n	800f05c <__swhatbuf_r+0x24>

0800f084 <__smakebuf_r>:
 800f084:	898b      	ldrh	r3, [r1, #12]
 800f086:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f088:	079d      	lsls	r5, r3, #30
 800f08a:	4606      	mov	r6, r0
 800f08c:	460c      	mov	r4, r1
 800f08e:	d507      	bpl.n	800f0a0 <__smakebuf_r+0x1c>
 800f090:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f094:	6023      	str	r3, [r4, #0]
 800f096:	6123      	str	r3, [r4, #16]
 800f098:	2301      	movs	r3, #1
 800f09a:	6163      	str	r3, [r4, #20]
 800f09c:	b002      	add	sp, #8
 800f09e:	bd70      	pop	{r4, r5, r6, pc}
 800f0a0:	ab01      	add	r3, sp, #4
 800f0a2:	466a      	mov	r2, sp
 800f0a4:	f7ff ffc8 	bl	800f038 <__swhatbuf_r>
 800f0a8:	9900      	ldr	r1, [sp, #0]
 800f0aa:	4605      	mov	r5, r0
 800f0ac:	4630      	mov	r0, r6
 800f0ae:	f7fd fa91 	bl	800c5d4 <_malloc_r>
 800f0b2:	b948      	cbnz	r0, 800f0c8 <__smakebuf_r+0x44>
 800f0b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0b8:	059a      	lsls	r2, r3, #22
 800f0ba:	d4ef      	bmi.n	800f09c <__smakebuf_r+0x18>
 800f0bc:	f023 0303 	bic.w	r3, r3, #3
 800f0c0:	f043 0302 	orr.w	r3, r3, #2
 800f0c4:	81a3      	strh	r3, [r4, #12]
 800f0c6:	e7e3      	b.n	800f090 <__smakebuf_r+0xc>
 800f0c8:	89a3      	ldrh	r3, [r4, #12]
 800f0ca:	6020      	str	r0, [r4, #0]
 800f0cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f0d0:	81a3      	strh	r3, [r4, #12]
 800f0d2:	9b00      	ldr	r3, [sp, #0]
 800f0d4:	6163      	str	r3, [r4, #20]
 800f0d6:	9b01      	ldr	r3, [sp, #4]
 800f0d8:	6120      	str	r0, [r4, #16]
 800f0da:	b15b      	cbz	r3, 800f0f4 <__smakebuf_r+0x70>
 800f0dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f0e0:	4630      	mov	r0, r6
 800f0e2:	f000 f81d 	bl	800f120 <_isatty_r>
 800f0e6:	b128      	cbz	r0, 800f0f4 <__smakebuf_r+0x70>
 800f0e8:	89a3      	ldrh	r3, [r4, #12]
 800f0ea:	f023 0303 	bic.w	r3, r3, #3
 800f0ee:	f043 0301 	orr.w	r3, r3, #1
 800f0f2:	81a3      	strh	r3, [r4, #12]
 800f0f4:	89a3      	ldrh	r3, [r4, #12]
 800f0f6:	431d      	orrs	r5, r3
 800f0f8:	81a5      	strh	r5, [r4, #12]
 800f0fa:	e7cf      	b.n	800f09c <__smakebuf_r+0x18>

0800f0fc <_fstat_r>:
 800f0fc:	b538      	push	{r3, r4, r5, lr}
 800f0fe:	4d07      	ldr	r5, [pc, #28]	; (800f11c <_fstat_r+0x20>)
 800f100:	2300      	movs	r3, #0
 800f102:	4604      	mov	r4, r0
 800f104:	4608      	mov	r0, r1
 800f106:	4611      	mov	r1, r2
 800f108:	602b      	str	r3, [r5, #0]
 800f10a:	f7f2 fca2 	bl	8001a52 <_fstat>
 800f10e:	1c43      	adds	r3, r0, #1
 800f110:	d102      	bne.n	800f118 <_fstat_r+0x1c>
 800f112:	682b      	ldr	r3, [r5, #0]
 800f114:	b103      	cbz	r3, 800f118 <_fstat_r+0x1c>
 800f116:	6023      	str	r3, [r4, #0]
 800f118:	bd38      	pop	{r3, r4, r5, pc}
 800f11a:	bf00      	nop
 800f11c:	24010eac 	.word	0x24010eac

0800f120 <_isatty_r>:
 800f120:	b538      	push	{r3, r4, r5, lr}
 800f122:	4d06      	ldr	r5, [pc, #24]	; (800f13c <_isatty_r+0x1c>)
 800f124:	2300      	movs	r3, #0
 800f126:	4604      	mov	r4, r0
 800f128:	4608      	mov	r0, r1
 800f12a:	602b      	str	r3, [r5, #0]
 800f12c:	f7f2 fca1 	bl	8001a72 <_isatty>
 800f130:	1c43      	adds	r3, r0, #1
 800f132:	d102      	bne.n	800f13a <_isatty_r+0x1a>
 800f134:	682b      	ldr	r3, [r5, #0]
 800f136:	b103      	cbz	r3, 800f13a <_isatty_r+0x1a>
 800f138:	6023      	str	r3, [r4, #0]
 800f13a:	bd38      	pop	{r3, r4, r5, pc}
 800f13c:	24010eac 	.word	0x24010eac

0800f140 <_init>:
 800f140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f142:	bf00      	nop
 800f144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f146:	bc08      	pop	{r3}
 800f148:	469e      	mov	lr, r3
 800f14a:	4770      	bx	lr

0800f14c <_fini>:
 800f14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f14e:	bf00      	nop
 800f150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f152:	bc08      	pop	{r3}
 800f154:	469e      	mov	lr, r3
 800f156:	4770      	bx	lr
