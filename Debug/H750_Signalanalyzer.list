
H750_Signalanalyzer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dfa4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  0800e248  0800e248  0001e248  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800e634  0800e634  0001e634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800e638  0800e638  0001e638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000002cc  24000000  0800e63c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001f58  240002cc  0800e908  000202cc  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24002224  0800e908  00022224  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  000202cc  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  000202fa  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018d70  00000000  00000000  0002033d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003bee  00000000  00000000  000390ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000013d8  00000000  00000000  0003cca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000ed8  00000000  00000000  0003e078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b6fa  00000000  00000000  0003ef50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a13a  00000000  00000000  0007a64a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016b35f  00000000  00000000  00094784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000614c  00000000  00000000  001ffae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000073  00000000  00000000  00205c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002cc 	.word	0x240002cc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800e22c 	.word	0x0800e22c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002d0 	.word	0x240002d0
 80002dc:	0800e22c 	.word	0x0800e22c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <CubeM_DefChNamesInit>:
uint8_t connector[CUBEMONSMALLBUFSIZE] = ":";
uint8_t EOL[CUBEMONSMALLBUFSIZE] = ";\n";

uint8_t channelnames[CUBEMONMAXSIGNALS][CUBEMONSMALLBUFSIZE];

void CubeM_DefChNamesInit() {
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
	for(uint8_t i=0; i<CUBEMONMAXSIGNALS; i++) {
 8000396:	2300      	movs	r3, #0
 8000398:	71fb      	strb	r3, [r7, #7]
 800039a:	e00e      	b.n	80003ba <CubeM_DefChNamesInit+0x2a>
		sprintf((char*)channelnames[i], "Ch%d", i);
 800039c:	79fa      	ldrb	r2, [r7, #7]
 800039e:	4613      	mov	r3, r2
 80003a0:	009b      	lsls	r3, r3, #2
 80003a2:	4413      	add	r3, r2
 80003a4:	009b      	lsls	r3, r3, #2
 80003a6:	4a09      	ldr	r2, [pc, #36]	; (80003cc <CubeM_DefChNamesInit+0x3c>)
 80003a8:	4413      	add	r3, r2
 80003aa:	79fa      	ldrb	r2, [r7, #7]
 80003ac:	4908      	ldr	r1, [pc, #32]	; (80003d0 <CubeM_DefChNamesInit+0x40>)
 80003ae:	4618      	mov	r0, r3
 80003b0:	f00b ff1a 	bl	800c1e8 <siprintf>
	for(uint8_t i=0; i<CUBEMONMAXSIGNALS; i++) {
 80003b4:	79fb      	ldrb	r3, [r7, #7]
 80003b6:	3301      	adds	r3, #1
 80003b8:	71fb      	strb	r3, [r7, #7]
 80003ba:	79fb      	ldrb	r3, [r7, #7]
 80003bc:	2b07      	cmp	r3, #7
 80003be:	d9ed      	bls.n	800039c <CubeM_DefChNamesInit+0xc>
	}
}
 80003c0:	bf00      	nop
 80003c2:	bf00      	nop
 80003c4:	3708      	adds	r7, #8
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	240002f4 	.word	0x240002f4
 80003d0:	0800e248 	.word	0x0800e248

080003d4 <CubeM_init>:

void CubeM_init() {
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
	CubeM_DefChNamesInit();
 80003d8:	f7ff ffda 	bl	8000390 <CubeM_DefChNamesInit>

	CubeM_setBufferSize(50);
 80003dc:	2032      	movs	r0, #50	; 0x32
 80003de:	f000 f807 	bl	80003f0 <CubeM_setBufferSize>

	isInit = 1;
 80003e2:	4b02      	ldr	r3, [pc, #8]	; (80003ec <CubeM_init+0x18>)
 80003e4:	2201      	movs	r2, #1
 80003e6:	701a      	strb	r2, [r3, #0]
}
 80003e8:	bf00      	nop
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	240002e8 	.word	0x240002e8

080003f0 <CubeM_setBufferSize>:
//Currently not used
void CubeM_setUART() {

}

uint32_t CubeM_setBufferSize(uint32_t sizeb) {
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b084      	sub	sp, #16
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
	if(sizeb != buffersize) {
 80003f8:	4b0e      	ldr	r3, [pc, #56]	; (8000434 <CubeM_setBufferSize+0x44>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	687a      	ldr	r2, [r7, #4]
 80003fe:	429a      	cmp	r2, r3
 8000400:	d012      	beq.n	8000428 <CubeM_setBufferSize+0x38>
		uint8_t *temppointer = malloc(sizeb);
 8000402:	6878      	ldr	r0, [r7, #4]
 8000404:	f00b f936 	bl	800b674 <malloc>
 8000408:	4603      	mov	r3, r0
 800040a:	60fb      	str	r3, [r7, #12]
		if(temppointer != NULL) {
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	2b00      	cmp	r3, #0
 8000410:	d00a      	beq.n	8000428 <CubeM_setBufferSize+0x38>
			free(buffer);
 8000412:	4b09      	ldr	r3, [pc, #36]	; (8000438 <CubeM_setBufferSize+0x48>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	4618      	mov	r0, r3
 8000418:	f00b f934 	bl	800b684 <free>
			buffer = temppointer;
 800041c:	4a06      	ldr	r2, [pc, #24]	; (8000438 <CubeM_setBufferSize+0x48>)
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	6013      	str	r3, [r2, #0]
			buffersize = sizeb;
 8000422:	4a04      	ldr	r2, [pc, #16]	; (8000434 <CubeM_setBufferSize+0x44>)
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	6013      	str	r3, [r2, #0]
		}
	}
	return buffersize;
 8000428:	4b02      	ldr	r3, [pc, #8]	; (8000434 <CubeM_setBufferSize+0x44>)
 800042a:	681b      	ldr	r3, [r3, #0]
}
 800042c:	4618      	mov	r0, r3
 800042e:	3710      	adds	r7, #16
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	240002ec 	.word	0x240002ec
 8000438:	240002f0 	.word	0x240002f0

0800043c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	CubeM_init();
 8000440:	f7ff ffc8 	bl	80003d4 <CubeM_init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000444:	f000 fcfc 	bl	8000e40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000448:	f000 f80e 	bl	8000468 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800044c:	f000 f8ba 	bl	80005c4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000450:	f000 fa32 	bl	80008b8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000454:	f000 f8e6 	bl	8000624 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000458:	f000 f95e 	bl	8000718 <MX_ADC2_Init>
  MX_ADC3_Init();
 800045c:	f000 f9c4 	bl	80007e8 <MX_ADC3_Init>
  MX_USB_DEVICE_Init();
 8000460:	f00a fbee 	bl	800ac40 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000464:	e7fe      	b.n	8000464 <main+0x28>
	...

08000468 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b09e      	sub	sp, #120	; 0x78
 800046c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800046e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000472:	224c      	movs	r2, #76	; 0x4c
 8000474:	2100      	movs	r1, #0
 8000476:	4618      	mov	r0, r3
 8000478:	f00b ff19 	bl	800c2ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800047c:	f107 030c 	add.w	r3, r7, #12
 8000480:	2220      	movs	r2, #32
 8000482:	2100      	movs	r1, #0
 8000484:	4618      	mov	r0, r3
 8000486:	f00b ff12 	bl	800c2ae <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800048a:	2002      	movs	r0, #2
 800048c:	f003 fbb8 	bl	8003c00 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000490:	2300      	movs	r3, #0
 8000492:	60bb      	str	r3, [r7, #8]
 8000494:	4b48      	ldr	r3, [pc, #288]	; (80005b8 <SystemClock_Config+0x150>)
 8000496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000498:	4a47      	ldr	r2, [pc, #284]	; (80005b8 <SystemClock_Config+0x150>)
 800049a:	f023 0301 	bic.w	r3, r3, #1
 800049e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80004a0:	4b45      	ldr	r3, [pc, #276]	; (80005b8 <SystemClock_Config+0x150>)
 80004a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004a4:	f003 0301 	and.w	r3, r3, #1
 80004a8:	60bb      	str	r3, [r7, #8]
 80004aa:	4b44      	ldr	r3, [pc, #272]	; (80005bc <SystemClock_Config+0x154>)
 80004ac:	699b      	ldr	r3, [r3, #24]
 80004ae:	4a43      	ldr	r2, [pc, #268]	; (80005bc <SystemClock_Config+0x154>)
 80004b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80004b4:	6193      	str	r3, [r2, #24]
 80004b6:	4b41      	ldr	r3, [pc, #260]	; (80005bc <SystemClock_Config+0x154>)
 80004b8:	699b      	ldr	r3, [r3, #24]
 80004ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80004be:	60bb      	str	r3, [r7, #8]
 80004c0:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004c2:	bf00      	nop
 80004c4:	4b3d      	ldr	r3, [pc, #244]	; (80005bc <SystemClock_Config+0x154>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004d0:	d1f8      	bne.n	80004c4 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004d2:	4b3b      	ldr	r3, [pc, #236]	; (80005c0 <SystemClock_Config+0x158>)
 80004d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80004d8:	4a39      	ldr	r2, [pc, #228]	; (80005c0 <SystemClock_Config+0x158>)
 80004da:	f043 0302 	orr.w	r3, r3, #2
 80004de:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80004e2:	4b37      	ldr	r3, [pc, #220]	; (80005c0 <SystemClock_Config+0x158>)
 80004e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80004e8:	f003 0302 	and.w	r3, r3, #2
 80004ec:	607b      	str	r3, [r7, #4]
 80004ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80004f0:	2300      	movs	r3, #0
 80004f2:	603b      	str	r3, [r7, #0]
 80004f4:	4b31      	ldr	r3, [pc, #196]	; (80005bc <SystemClock_Config+0x154>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	4a30      	ldr	r2, [pc, #192]	; (80005bc <SystemClock_Config+0x154>)
 80004fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80004fe:	6193      	str	r3, [r2, #24]
 8000500:	4b2e      	ldr	r3, [pc, #184]	; (80005bc <SystemClock_Config+0x154>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000508:	603b      	str	r3, [r7, #0]
 800050a:	4b2b      	ldr	r3, [pc, #172]	; (80005b8 <SystemClock_Config+0x150>)
 800050c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800050e:	4a2a      	ldr	r2, [pc, #168]	; (80005b8 <SystemClock_Config+0x150>)
 8000510:	f043 0301 	orr.w	r3, r3, #1
 8000514:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000516:	4b28      	ldr	r3, [pc, #160]	; (80005b8 <SystemClock_Config+0x150>)
 8000518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800051a:	f003 0301 	and.w	r3, r3, #1
 800051e:	603b      	str	r3, [r7, #0]
 8000520:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000522:	bf00      	nop
 8000524:	4b25      	ldr	r3, [pc, #148]	; (80005bc <SystemClock_Config+0x154>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800052c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000530:	d1f8      	bne.n	8000524 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000532:	2301      	movs	r3, #1
 8000534:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000536:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800053a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800053c:	2302      	movs	r3, #2
 800053e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000540:	2302      	movs	r3, #2
 8000542:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000544:	2305      	movs	r3, #5
 8000546:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000548:	23c0      	movs	r3, #192	; 0xc0
 800054a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 800054c:	2302      	movs	r3, #2
 800054e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8000550:	230f      	movs	r3, #15
 8000552:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000554:	2302      	movs	r3, #2
 8000556:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000558:	2308      	movs	r3, #8
 800055a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800055c:	2300      	movs	r3, #0
 800055e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000560:	2300      	movs	r3, #0
 8000562:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000564:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000568:	4618      	mov	r0, r3
 800056a:	f003 fb93 	bl	8003c94 <HAL_RCC_OscConfig>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000574:	f000 f9d8 	bl	8000928 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000578:	233f      	movs	r3, #63	; 0x3f
 800057a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800057c:	2303      	movs	r3, #3
 800057e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000580:	2300      	movs	r3, #0
 8000582:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000584:	2308      	movs	r3, #8
 8000586:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000588:	2340      	movs	r3, #64	; 0x40
 800058a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800058c:	2340      	movs	r3, #64	; 0x40
 800058e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000590:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000594:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000596:	2340      	movs	r3, #64	; 0x40
 8000598:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800059a:	f107 030c 	add.w	r3, r7, #12
 800059e:	2104      	movs	r1, #4
 80005a0:	4618      	mov	r0, r3
 80005a2:	f003 ffd1 	bl	8004548 <HAL_RCC_ClockConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x148>
  {
    Error_Handler();
 80005ac:	f000 f9bc 	bl	8000928 <Error_Handler>
  }
}
 80005b0:	bf00      	nop
 80005b2:	3778      	adds	r7, #120	; 0x78
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	58000400 	.word	0x58000400
 80005bc:	58024800 	.word	0x58024800
 80005c0:	58024400 	.word	0x58024400

080005c4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b0b0      	sub	sp, #192	; 0xc0
 80005c8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005ca:	463b      	mov	r3, r7
 80005cc:	22c0      	movs	r2, #192	; 0xc0
 80005ce:	2100      	movs	r1, #0
 80005d0:	4618      	mov	r0, r3
 80005d2:	f00b fe6c 	bl	800c2ae <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80005d6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80005da:	f04f 0300 	mov.w	r3, #0
 80005de:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80005e2:	2302      	movs	r3, #2
 80005e4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80005e6:	230c      	movs	r3, #12
 80005e8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80005ea:	2302      	movs	r3, #2
 80005ec:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80005ee:	2302      	movs	r3, #2
 80005f0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80005f2:	2302      	movs	r3, #2
 80005f4:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80005f6:	23c0      	movs	r3, #192	; 0xc0
 80005f8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80005fa:	2320      	movs	r3, #32
 80005fc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000602:	2300      	movs	r3, #0
 8000604:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000608:	463b      	mov	r3, r7
 800060a:	4618      	mov	r0, r3
 800060c:	f004 fb12 	bl	8004c34 <HAL_RCCEx_PeriphCLKConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000616:	f000 f987 	bl	8000928 <Error_Handler>
  }
}
 800061a:	bf00      	nop
 800061c:	37c0      	adds	r7, #192	; 0xc0
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
	...

08000624 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b08a      	sub	sp, #40	; 0x28
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800062a:	f107 031c 	add.w	r3, r7, #28
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000636:	463b      	mov	r3, r7
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]
 8000644:	615a      	str	r2, [r3, #20]
 8000646:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000648:	4b2f      	ldr	r3, [pc, #188]	; (8000708 <MX_ADC1_Init+0xe4>)
 800064a:	4a30      	ldr	r2, [pc, #192]	; (800070c <MX_ADC1_Init+0xe8>)
 800064c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800064e:	4b2e      	ldr	r3, [pc, #184]	; (8000708 <MX_ADC1_Init+0xe4>)
 8000650:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000654:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000656:	4b2c      	ldr	r3, [pc, #176]	; (8000708 <MX_ADC1_Init+0xe4>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800065c:	4b2a      	ldr	r3, [pc, #168]	; (8000708 <MX_ADC1_Init+0xe4>)
 800065e:	2200      	movs	r2, #0
 8000660:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000662:	4b29      	ldr	r3, [pc, #164]	; (8000708 <MX_ADC1_Init+0xe4>)
 8000664:	2204      	movs	r2, #4
 8000666:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000668:	4b27      	ldr	r3, [pc, #156]	; (8000708 <MX_ADC1_Init+0xe4>)
 800066a:	2200      	movs	r2, #0
 800066c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800066e:	4b26      	ldr	r3, [pc, #152]	; (8000708 <MX_ADC1_Init+0xe4>)
 8000670:	2200      	movs	r2, #0
 8000672:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000674:	4b24      	ldr	r3, [pc, #144]	; (8000708 <MX_ADC1_Init+0xe4>)
 8000676:	2201      	movs	r2, #1
 8000678:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800067a:	4b23      	ldr	r3, [pc, #140]	; (8000708 <MX_ADC1_Init+0xe4>)
 800067c:	2200      	movs	r2, #0
 800067e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000680:	4b21      	ldr	r3, [pc, #132]	; (8000708 <MX_ADC1_Init+0xe4>)
 8000682:	2200      	movs	r2, #0
 8000684:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000686:	4b20      	ldr	r3, [pc, #128]	; (8000708 <MX_ADC1_Init+0xe4>)
 8000688:	2200      	movs	r2, #0
 800068a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800068c:	4b1e      	ldr	r3, [pc, #120]	; (8000708 <MX_ADC1_Init+0xe4>)
 800068e:	2200      	movs	r2, #0
 8000690:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000692:	4b1d      	ldr	r3, [pc, #116]	; (8000708 <MX_ADC1_Init+0xe4>)
 8000694:	2200      	movs	r2, #0
 8000696:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000698:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <MX_ADC1_Init+0xe4>)
 800069a:	2200      	movs	r2, #0
 800069c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800069e:	4b1a      	ldr	r3, [pc, #104]	; (8000708 <MX_ADC1_Init+0xe4>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006a6:	4818      	ldr	r0, [pc, #96]	; (8000708 <MX_ADC1_Init+0xe4>)
 80006a8:	f000 fe2e 	bl	8001308 <HAL_ADC_Init>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80006b2:	f000 f939 	bl	8000928 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006ba:	f107 031c 	add.w	r3, r7, #28
 80006be:	4619      	mov	r1, r3
 80006c0:	4811      	ldr	r0, [pc, #68]	; (8000708 <MX_ADC1_Init+0xe4>)
 80006c2:	f001 fc45 	bl	8001f50 <HAL_ADCEx_MultiModeConfigChannel>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80006cc:	f000 f92c 	bl	8000928 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <MX_ADC1_Init+0xec>)
 80006d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006d4:	2306      	movs	r3, #6
 80006d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80006d8:	2300      	movs	r3, #0
 80006da:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80006dc:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <MX_ADC1_Init+0xf0>)
 80006de:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006e0:	2304      	movs	r3, #4
 80006e2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006e8:	2300      	movs	r3, #0
 80006ea:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ec:	463b      	mov	r3, r7
 80006ee:	4619      	mov	r1, r3
 80006f0:	4805      	ldr	r0, [pc, #20]	; (8000708 <MX_ADC1_Init+0xe4>)
 80006f2:	f000 ffab 	bl	800164c <HAL_ADC_ConfigChannel>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80006fc:	f000 f914 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000700:	bf00      	nop
 8000702:	3728      	adds	r7, #40	; 0x28
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	24000394 	.word	0x24000394
 800070c:	40022000 	.word	0x40022000
 8000710:	0c900008 	.word	0x0c900008
 8000714:	47ff0000 	.word	0x47ff0000

08000718 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b088      	sub	sp, #32
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
 800072c:	615a      	str	r2, [r3, #20]
 800072e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000730:	4b29      	ldr	r3, [pc, #164]	; (80007d8 <MX_ADC2_Init+0xc0>)
 8000732:	4a2a      	ldr	r2, [pc, #168]	; (80007dc <MX_ADC2_Init+0xc4>)
 8000734:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000736:	4b28      	ldr	r3, [pc, #160]	; (80007d8 <MX_ADC2_Init+0xc0>)
 8000738:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800073c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 800073e:	4b26      	ldr	r3, [pc, #152]	; (80007d8 <MX_ADC2_Init+0xc0>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000744:	4b24      	ldr	r3, [pc, #144]	; (80007d8 <MX_ADC2_Init+0xc0>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800074a:	4b23      	ldr	r3, [pc, #140]	; (80007d8 <MX_ADC2_Init+0xc0>)
 800074c:	2204      	movs	r2, #4
 800074e:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000750:	4b21      	ldr	r3, [pc, #132]	; (80007d8 <MX_ADC2_Init+0xc0>)
 8000752:	2200      	movs	r2, #0
 8000754:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000756:	4b20      	ldr	r3, [pc, #128]	; (80007d8 <MX_ADC2_Init+0xc0>)
 8000758:	2200      	movs	r2, #0
 800075a:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 800075c:	4b1e      	ldr	r3, [pc, #120]	; (80007d8 <MX_ADC2_Init+0xc0>)
 800075e:	2201      	movs	r2, #1
 8000760:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000762:	4b1d      	ldr	r3, [pc, #116]	; (80007d8 <MX_ADC2_Init+0xc0>)
 8000764:	2200      	movs	r2, #0
 8000766:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000768:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <MX_ADC2_Init+0xc0>)
 800076a:	2200      	movs	r2, #0
 800076c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800076e:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <MX_ADC2_Init+0xc0>)
 8000770:	2200      	movs	r2, #0
 8000772:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000774:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <MX_ADC2_Init+0xc0>)
 8000776:	2200      	movs	r2, #0
 8000778:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800077a:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <MX_ADC2_Init+0xc0>)
 800077c:	2200      	movs	r2, #0
 800077e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000780:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <MX_ADC2_Init+0xc0>)
 8000782:	2200      	movs	r2, #0
 8000784:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000786:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <MX_ADC2_Init+0xc0>)
 8000788:	2200      	movs	r2, #0
 800078a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800078e:	4812      	ldr	r0, [pc, #72]	; (80007d8 <MX_ADC2_Init+0xc0>)
 8000790:	f000 fdba 	bl	8001308 <HAL_ADC_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 800079a:	f000 f8c5 	bl	8000928 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800079e:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <MX_ADC2_Init+0xc8>)
 80007a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007a2:	2306      	movs	r3, #6
 80007a4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_ADC2_Init+0xcc>)
 80007ac:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007ae:	2304      	movs	r3, #4
 80007b0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80007b6:	2300      	movs	r3, #0
 80007b8:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	4619      	mov	r1, r3
 80007be:	4806      	ldr	r0, [pc, #24]	; (80007d8 <MX_ADC2_Init+0xc0>)
 80007c0:	f000 ff44 	bl	800164c <HAL_ADC_ConfigChannel>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80007ca:	f000 f8ad 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	3720      	adds	r7, #32
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	240003f8 	.word	0x240003f8
 80007dc:	40022100 	.word	0x40022100
 80007e0:	10c00010 	.word	0x10c00010
 80007e4:	47ff0000 	.word	0x47ff0000

080007e8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b088      	sub	sp, #32
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]
 80007fc:	615a      	str	r2, [r3, #20]
 80007fe:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000800:	4b29      	ldr	r3, [pc, #164]	; (80008a8 <MX_ADC3_Init+0xc0>)
 8000802:	4a2a      	ldr	r2, [pc, #168]	; (80008ac <MX_ADC3_Init+0xc4>)
 8000804:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000806:	4b28      	ldr	r3, [pc, #160]	; (80008a8 <MX_ADC3_Init+0xc0>)
 8000808:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800080c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 800080e:	4b26      	ldr	r3, [pc, #152]	; (80008a8 <MX_ADC3_Init+0xc0>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000814:	4b24      	ldr	r3, [pc, #144]	; (80008a8 <MX_ADC3_Init+0xc0>)
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800081a:	4b23      	ldr	r3, [pc, #140]	; (80008a8 <MX_ADC3_Init+0xc0>)
 800081c:	2204      	movs	r2, #4
 800081e:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000820:	4b21      	ldr	r3, [pc, #132]	; (80008a8 <MX_ADC3_Init+0xc0>)
 8000822:	2200      	movs	r2, #0
 8000824:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000826:	4b20      	ldr	r3, [pc, #128]	; (80008a8 <MX_ADC3_Init+0xc0>)
 8000828:	2200      	movs	r2, #0
 800082a:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 800082c:	4b1e      	ldr	r3, [pc, #120]	; (80008a8 <MX_ADC3_Init+0xc0>)
 800082e:	2201      	movs	r2, #1
 8000830:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000832:	4b1d      	ldr	r3, [pc, #116]	; (80008a8 <MX_ADC3_Init+0xc0>)
 8000834:	2200      	movs	r2, #0
 8000836:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000838:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <MX_ADC3_Init+0xc0>)
 800083a:	2200      	movs	r2, #0
 800083c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800083e:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <MX_ADC3_Init+0xc0>)
 8000840:	2200      	movs	r2, #0
 8000842:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000844:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <MX_ADC3_Init+0xc0>)
 8000846:	2200      	movs	r2, #0
 8000848:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800084a:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <MX_ADC3_Init+0xc0>)
 800084c:	2200      	movs	r2, #0
 800084e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000850:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <MX_ADC3_Init+0xc0>)
 8000852:	2200      	movs	r2, #0
 8000854:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000856:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <MX_ADC3_Init+0xc0>)
 8000858:	2200      	movs	r2, #0
 800085a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800085e:	4812      	ldr	r0, [pc, #72]	; (80008a8 <MX_ADC3_Init+0xc0>)
 8000860:	f000 fd52 	bl	8001308 <HAL_ADC_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 800086a:	f000 f85d 	bl	8000928 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800086e:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <MX_ADC3_Init+0xc8>)
 8000870:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000872:	2306      	movs	r3, #6
 8000874:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <MX_ADC3_Init+0xcc>)
 800087c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800087e:	2304      	movs	r3, #4
 8000880:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000886:	2300      	movs	r3, #0
 8000888:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	4619      	mov	r1, r3
 800088e:	4806      	ldr	r0, [pc, #24]	; (80008a8 <MX_ADC3_Init+0xc0>)
 8000890:	f000 fedc 	bl	800164c <HAL_ADC_ConfigChannel>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_ADC3_Init+0xb6>
  {
    Error_Handler();
 800089a:	f000 f845 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	3720      	adds	r7, #32
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	2400045c 	.word	0x2400045c
 80008ac:	58026000 	.word	0x58026000
 80008b0:	04300002 	.word	0x04300002
 80008b4:	47ff0000 	.word	0x47ff0000

080008b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008be:	4b19      	ldr	r3, [pc, #100]	; (8000924 <MX_GPIO_Init+0x6c>)
 80008c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c4:	4a17      	ldr	r2, [pc, #92]	; (8000924 <MX_GPIO_Init+0x6c>)
 80008c6:	f043 0304 	orr.w	r3, r3, #4
 80008ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008ce:	4b15      	ldr	r3, [pc, #84]	; (8000924 <MX_GPIO_Init+0x6c>)
 80008d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d4:	f003 0304 	and.w	r3, r3, #4
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008dc:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_GPIO_Init+0x6c>)
 80008de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e2:	4a10      	ldr	r2, [pc, #64]	; (8000924 <MX_GPIO_Init+0x6c>)
 80008e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008ec:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <MX_GPIO_Init+0x6c>)
 80008ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <MX_GPIO_Init+0x6c>)
 80008fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000900:	4a08      	ldr	r2, [pc, #32]	; (8000924 <MX_GPIO_Init+0x6c>)
 8000902:	f043 0301 	orr.w	r3, r3, #1
 8000906:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_GPIO_Init+0x6c>)
 800090c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000910:	f003 0301 	and.w	r3, r3, #1
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000918:	bf00      	nop
 800091a:	3714      	adds	r7, #20
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	58024400 	.word	0x58024400

08000928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800092c:	b672      	cpsid	i
}
 800092e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000930:	e7fe      	b.n	8000930 <Error_Handler+0x8>
	...

08000934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093a:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <HAL_MspInit+0x30>)
 800093c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000940:	4a08      	ldr	r2, [pc, #32]	; (8000964 <HAL_MspInit+0x30>)
 8000942:	f043 0302 	orr.w	r3, r3, #2
 8000946:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <HAL_MspInit+0x30>)
 800094c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000950:	f003 0302 	and.w	r3, r3, #2
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	58024400 	.word	0x58024400

08000968 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08e      	sub	sp, #56	; 0x38
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a51      	ldr	r2, [pc, #324]	; (8000acc <HAL_ADC_MspInit+0x164>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d133      	bne.n	80009f2 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800098a:	4b51      	ldr	r3, [pc, #324]	; (8000ad0 <HAL_ADC_MspInit+0x168>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	3301      	adds	r3, #1
 8000990:	4a4f      	ldr	r2, [pc, #316]	; (8000ad0 <HAL_ADC_MspInit+0x168>)
 8000992:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000994:	4b4e      	ldr	r3, [pc, #312]	; (8000ad0 <HAL_ADC_MspInit+0x168>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2b01      	cmp	r3, #1
 800099a:	d10e      	bne.n	80009ba <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800099c:	4b4d      	ldr	r3, [pc, #308]	; (8000ad4 <HAL_ADC_MspInit+0x16c>)
 800099e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80009a2:	4a4c      	ldr	r2, [pc, #304]	; (8000ad4 <HAL_ADC_MspInit+0x16c>)
 80009a4:	f043 0320 	orr.w	r3, r3, #32
 80009a8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80009ac:	4b49      	ldr	r3, [pc, #292]	; (8000ad4 <HAL_ADC_MspInit+0x16c>)
 80009ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80009b2:	f003 0320 	and.w	r3, r3, #32
 80009b6:	623b      	str	r3, [r7, #32]
 80009b8:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	4b46      	ldr	r3, [pc, #280]	; (8000ad4 <HAL_ADC_MspInit+0x16c>)
 80009bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c0:	4a44      	ldr	r2, [pc, #272]	; (8000ad4 <HAL_ADC_MspInit+0x16c>)
 80009c2:	f043 0301 	orr.w	r3, r3, #1
 80009c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ca:	4b42      	ldr	r3, [pc, #264]	; (8000ad4 <HAL_ADC_MspInit+0x16c>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	f003 0301 	and.w	r3, r3, #1
 80009d4:	61fb      	str	r3, [r7, #28]
 80009d6:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PA7     ------> ADC1_INN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009d8:	23c0      	movs	r3, #192	; 0xc0
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009dc:	2303      	movs	r3, #3
 80009de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e8:	4619      	mov	r1, r3
 80009ea:	483b      	ldr	r0, [pc, #236]	; (8000ad8 <HAL_ADC_MspInit+0x170>)
 80009ec:	f001 fc9e 	bl	800232c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80009f0:	e067      	b.n	8000ac2 <HAL_ADC_MspInit+0x15a>
  else if(hadc->Instance==ADC2)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4a39      	ldr	r2, [pc, #228]	; (8000adc <HAL_ADC_MspInit+0x174>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d133      	bne.n	8000a64 <HAL_ADC_MspInit+0xfc>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80009fc:	4b34      	ldr	r3, [pc, #208]	; (8000ad0 <HAL_ADC_MspInit+0x168>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	3301      	adds	r3, #1
 8000a02:	4a33      	ldr	r2, [pc, #204]	; (8000ad0 <HAL_ADC_MspInit+0x168>)
 8000a04:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000a06:	4b32      	ldr	r3, [pc, #200]	; (8000ad0 <HAL_ADC_MspInit+0x168>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d10e      	bne.n	8000a2c <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000a0e:	4b31      	ldr	r3, [pc, #196]	; (8000ad4 <HAL_ADC_MspInit+0x16c>)
 8000a10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a14:	4a2f      	ldr	r2, [pc, #188]	; (8000ad4 <HAL_ADC_MspInit+0x16c>)
 8000a16:	f043 0320 	orr.w	r3, r3, #32
 8000a1a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a1e:	4b2d      	ldr	r3, [pc, #180]	; (8000ad4 <HAL_ADC_MspInit+0x16c>)
 8000a20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a24:	f003 0320 	and.w	r3, r3, #32
 8000a28:	61bb      	str	r3, [r7, #24]
 8000a2a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2c:	4b29      	ldr	r3, [pc, #164]	; (8000ad4 <HAL_ADC_MspInit+0x16c>)
 8000a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a32:	4a28      	ldr	r2, [pc, #160]	; (8000ad4 <HAL_ADC_MspInit+0x16c>)
 8000a34:	f043 0304 	orr.w	r3, r3, #4
 8000a38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a3c:	4b25      	ldr	r3, [pc, #148]	; (8000ad4 <HAL_ADC_MspInit+0x16c>)
 8000a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a42:	f003 0304 	and.w	r3, r3, #4
 8000a46:	617b      	str	r3, [r7, #20]
 8000a48:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000a4a:	2330      	movs	r3, #48	; 0x30
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4820      	ldr	r0, [pc, #128]	; (8000ae0 <HAL_ADC_MspInit+0x178>)
 8000a5e:	f001 fc65 	bl	800232c <HAL_GPIO_Init>
}
 8000a62:	e02e      	b.n	8000ac2 <HAL_ADC_MspInit+0x15a>
  else if(hadc->Instance==ADC3)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a1e      	ldr	r2, [pc, #120]	; (8000ae4 <HAL_ADC_MspInit+0x17c>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d129      	bne.n	8000ac2 <HAL_ADC_MspInit+0x15a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a6e:	4b19      	ldr	r3, [pc, #100]	; (8000ad4 <HAL_ADC_MspInit+0x16c>)
 8000a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a74:	4a17      	ldr	r2, [pc, #92]	; (8000ad4 <HAL_ADC_MspInit+0x16c>)
 8000a76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a7e:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <HAL_ADC_MspInit+0x16c>)
 8000a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000a88:	613b      	str	r3, [r7, #16]
 8000a8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8c:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <HAL_ADC_MspInit+0x16c>)
 8000a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a92:	4a10      	ldr	r2, [pc, #64]	; (8000ad4 <HAL_ADC_MspInit+0x16c>)
 8000a94:	f043 0304 	orr.w	r3, r3, #4
 8000a98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a9c:	4b0d      	ldr	r3, [pc, #52]	; (8000ad4 <HAL_ADC_MspInit+0x16c>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	f003 0304 	and.w	r3, r3, #4
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000aaa:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000aae:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ab2:	f000 fa87 	bl	8000fc4 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000ab6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000aba:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000abe:	f000 fa81 	bl	8000fc4 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8000ac2:	bf00      	nop
 8000ac4:	3738      	adds	r7, #56	; 0x38
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40022000 	.word	0x40022000
 8000ad0:	240004c0 	.word	0x240004c0
 8000ad4:	58024400 	.word	0x58024400
 8000ad8:	58020000 	.word	0x58020000
 8000adc:	40022100 	.word	0x40022100
 8000ae0:	58020800 	.word	0x58020800
 8000ae4:	58026000 	.word	0x58026000

08000ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aec:	e7fe      	b.n	8000aec <NMI_Handler+0x4>

08000aee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af2:	e7fe      	b.n	8000af2 <HardFault_Handler+0x4>

08000af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <MemManage_Handler+0x4>

08000afa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <BusFault_Handler+0x4>

08000b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <UsageFault_Handler+0x4>

08000b06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b34:	f000 f9f6 	bl	8000f24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b40:	4802      	ldr	r0, [pc, #8]	; (8000b4c <OTG_FS_IRQHandler+0x10>)
 8000b42:	f001 fefc 	bl	800293e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	240019ac 	.word	0x240019ac

08000b50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  return 1;
 8000b54:	2301      	movs	r3, #1
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <_kill>:

int _kill(int pid, int sig)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000b6a:	f00b fc03 	bl	800c374 <__errno>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2216      	movs	r2, #22
 8000b72:	601a      	str	r2, [r3, #0]
  return -1;
 8000b74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <_exit>:

void _exit (int status)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000b88:	f04f 31ff 	mov.w	r1, #4294967295
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f7ff ffe7 	bl	8000b60 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000b92:	e7fe      	b.n	8000b92 <_exit+0x12>

08000b94 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	60b9      	str	r1, [r7, #8]
 8000b9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]
 8000ba4:	e00a      	b.n	8000bbc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ba6:	f3af 8000 	nop.w
 8000baa:	4601      	mov	r1, r0
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	1c5a      	adds	r2, r3, #1
 8000bb0:	60ba      	str	r2, [r7, #8]
 8000bb2:	b2ca      	uxtb	r2, r1
 8000bb4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	617b      	str	r3, [r7, #20]
 8000bbc:	697a      	ldr	r2, [r7, #20]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	dbf0      	blt.n	8000ba6 <_read+0x12>
  }

  return len;
 8000bc4:	687b      	ldr	r3, [r7, #4]
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3718      	adds	r7, #24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b086      	sub	sp, #24
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	60f8      	str	r0, [r7, #12]
 8000bd6:	60b9      	str	r1, [r7, #8]
 8000bd8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bda:	2300      	movs	r3, #0
 8000bdc:	617b      	str	r3, [r7, #20]
 8000bde:	e009      	b.n	8000bf4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	1c5a      	adds	r2, r3, #1
 8000be4:	60ba      	str	r2, [r7, #8]
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	4618      	mov	r0, r3
 8000bea:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	617b      	str	r3, [r7, #20]
 8000bf4:	697a      	ldr	r2, [r7, #20]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	dbf1      	blt.n	8000be0 <_write+0x12>
  }
  return len;
 8000bfc:	687b      	ldr	r3, [r7, #4]
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3718      	adds	r7, #24
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <_close>:

int _close(int file)
{
 8000c06:	b480      	push	{r7}
 8000c08:	b083      	sub	sp, #12
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	b083      	sub	sp, #12
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
 8000c26:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c2e:	605a      	str	r2, [r3, #4]
  return 0;
 8000c30:	2300      	movs	r3, #0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <_isatty>:

int _isatty(int file)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b083      	sub	sp, #12
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c46:	2301      	movs	r3, #1
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3714      	adds	r7, #20
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
	...

08000c70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c78:	4a14      	ldr	r2, [pc, #80]	; (8000ccc <_sbrk+0x5c>)
 8000c7a:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <_sbrk+0x60>)
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c84:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <_sbrk+0x64>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d102      	bne.n	8000c92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c8c:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <_sbrk+0x64>)
 8000c8e:	4a12      	ldr	r2, [pc, #72]	; (8000cd8 <_sbrk+0x68>)
 8000c90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c92:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <_sbrk+0x64>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4413      	add	r3, r2
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d207      	bcs.n	8000cb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ca0:	f00b fb68 	bl	800c374 <__errno>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	220c      	movs	r2, #12
 8000ca8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000caa:	f04f 33ff 	mov.w	r3, #4294967295
 8000cae:	e009      	b.n	8000cc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cb0:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <_sbrk+0x64>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cb6:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <_sbrk+0x64>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	4a05      	ldr	r2, [pc, #20]	; (8000cd4 <_sbrk+0x64>)
 8000cc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3718      	adds	r7, #24
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	24080000 	.word	0x24080000
 8000cd0:	00000400 	.word	0x00000400
 8000cd4:	240004c4 	.word	0x240004c4
 8000cd8:	24002228 	.word	0x24002228

08000cdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ce0:	4b37      	ldr	r3, [pc, #220]	; (8000dc0 <SystemInit+0xe4>)
 8000ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ce6:	4a36      	ldr	r2, [pc, #216]	; (8000dc0 <SystemInit+0xe4>)
 8000ce8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000cf0:	4b34      	ldr	r3, [pc, #208]	; (8000dc4 <SystemInit+0xe8>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f003 030f 	and.w	r3, r3, #15
 8000cf8:	2b06      	cmp	r3, #6
 8000cfa:	d807      	bhi.n	8000d0c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000cfc:	4b31      	ldr	r3, [pc, #196]	; (8000dc4 <SystemInit+0xe8>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f023 030f 	bic.w	r3, r3, #15
 8000d04:	4a2f      	ldr	r2, [pc, #188]	; (8000dc4 <SystemInit+0xe8>)
 8000d06:	f043 0307 	orr.w	r3, r3, #7
 8000d0a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d0c:	4b2e      	ldr	r3, [pc, #184]	; (8000dc8 <SystemInit+0xec>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a2d      	ldr	r2, [pc, #180]	; (8000dc8 <SystemInit+0xec>)
 8000d12:	f043 0301 	orr.w	r3, r3, #1
 8000d16:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d18:	4b2b      	ldr	r3, [pc, #172]	; (8000dc8 <SystemInit+0xec>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d1e:	4b2a      	ldr	r3, [pc, #168]	; (8000dc8 <SystemInit+0xec>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	4929      	ldr	r1, [pc, #164]	; (8000dc8 <SystemInit+0xec>)
 8000d24:	4b29      	ldr	r3, [pc, #164]	; (8000dcc <SystemInit+0xf0>)
 8000d26:	4013      	ands	r3, r2
 8000d28:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d2a:	4b26      	ldr	r3, [pc, #152]	; (8000dc4 <SystemInit+0xe8>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f003 0308 	and.w	r3, r3, #8
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d007      	beq.n	8000d46 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d36:	4b23      	ldr	r3, [pc, #140]	; (8000dc4 <SystemInit+0xe8>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f023 030f 	bic.w	r3, r3, #15
 8000d3e:	4a21      	ldr	r2, [pc, #132]	; (8000dc4 <SystemInit+0xe8>)
 8000d40:	f043 0307 	orr.w	r3, r3, #7
 8000d44:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000d46:	4b20      	ldr	r3, [pc, #128]	; (8000dc8 <SystemInit+0xec>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000d4c:	4b1e      	ldr	r3, [pc, #120]	; (8000dc8 <SystemInit+0xec>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000d52:	4b1d      	ldr	r3, [pc, #116]	; (8000dc8 <SystemInit+0xec>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d58:	4b1b      	ldr	r3, [pc, #108]	; (8000dc8 <SystemInit+0xec>)
 8000d5a:	4a1d      	ldr	r2, [pc, #116]	; (8000dd0 <SystemInit+0xf4>)
 8000d5c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d5e:	4b1a      	ldr	r3, [pc, #104]	; (8000dc8 <SystemInit+0xec>)
 8000d60:	4a1c      	ldr	r2, [pc, #112]	; (8000dd4 <SystemInit+0xf8>)
 8000d62:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d64:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <SystemInit+0xec>)
 8000d66:	4a1c      	ldr	r2, [pc, #112]	; (8000dd8 <SystemInit+0xfc>)
 8000d68:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d6a:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <SystemInit+0xec>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d70:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <SystemInit+0xec>)
 8000d72:	4a19      	ldr	r2, [pc, #100]	; (8000dd8 <SystemInit+0xfc>)
 8000d74:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d76:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <SystemInit+0xec>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <SystemInit+0xec>)
 8000d7e:	4a16      	ldr	r2, [pc, #88]	; (8000dd8 <SystemInit+0xfc>)
 8000d80:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d82:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <SystemInit+0xec>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d88:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <SystemInit+0xec>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a0e      	ldr	r2, [pc, #56]	; (8000dc8 <SystemInit+0xec>)
 8000d8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d92:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <SystemInit+0xec>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000d9a:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <SystemInit+0x100>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <SystemInit+0x104>)
 8000da0:	4013      	ands	r3, r2
 8000da2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000da6:	d202      	bcs.n	8000dae <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000da8:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <SystemInit+0x108>)
 8000daa:	2201      	movs	r2, #1
 8000dac:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000dae:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <SystemInit+0x10c>)
 8000db0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000db4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000ed00 	.word	0xe000ed00
 8000dc4:	52002000 	.word	0x52002000
 8000dc8:	58024400 	.word	0x58024400
 8000dcc:	eaf6ed7f 	.word	0xeaf6ed7f
 8000dd0:	02020200 	.word	0x02020200
 8000dd4:	01ff0000 	.word	0x01ff0000
 8000dd8:	01010280 	.word	0x01010280
 8000ddc:	5c001000 	.word	0x5c001000
 8000de0:	ffff0000 	.word	0xffff0000
 8000de4:	51008108 	.word	0x51008108
 8000de8:	52004000 	.word	0x52004000

08000dec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000dec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e24 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000df0:	f7ff ff74 	bl	8000cdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000df4:	480c      	ldr	r0, [pc, #48]	; (8000e28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000df6:	490d      	ldr	r1, [pc, #52]	; (8000e2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000df8:	4a0d      	ldr	r2, [pc, #52]	; (8000e30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dfc:	e002      	b.n	8000e04 <LoopCopyDataInit>

08000dfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e02:	3304      	adds	r3, #4

08000e04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e08:	d3f9      	bcc.n	8000dfe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0a:	4a0a      	ldr	r2, [pc, #40]	; (8000e34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e0c:	4c0a      	ldr	r4, [pc, #40]	; (8000e38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e10:	e001      	b.n	8000e16 <LoopFillZerobss>

08000e12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e14:	3204      	adds	r2, #4

08000e16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e18:	d3fb      	bcc.n	8000e12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e1a:	f00b fab1 	bl	800c380 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e1e:	f7ff fb0d 	bl	800043c <main>
  bx  lr
 8000e22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e24:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000e28:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e2c:	240002cc 	.word	0x240002cc
  ldr r2, =_sidata
 8000e30:	0800e63c 	.word	0x0800e63c
  ldr r2, =_sbss
 8000e34:	240002cc 	.word	0x240002cc
  ldr r4, =_ebss
 8000e38:	24002224 	.word	0x24002224

08000e3c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e3c:	e7fe      	b.n	8000e3c <ADC3_IRQHandler>
	...

08000e40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e46:	2003      	movs	r0, #3
 8000e48:	f001 fa30 	bl	80022ac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e4c:	f003 fd32 	bl	80048b4 <HAL_RCC_GetSysClockFreq>
 8000e50:	4602      	mov	r2, r0
 8000e52:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <HAL_Init+0x68>)
 8000e54:	699b      	ldr	r3, [r3, #24]
 8000e56:	0a1b      	lsrs	r3, r3, #8
 8000e58:	f003 030f 	and.w	r3, r3, #15
 8000e5c:	4913      	ldr	r1, [pc, #76]	; (8000eac <HAL_Init+0x6c>)
 8000e5e:	5ccb      	ldrb	r3, [r1, r3]
 8000e60:	f003 031f 	and.w	r3, r3, #31
 8000e64:	fa22 f303 	lsr.w	r3, r2, r3
 8000e68:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000e6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ea8 <HAL_Init+0x68>)
 8000e6c:	699b      	ldr	r3, [r3, #24]
 8000e6e:	f003 030f 	and.w	r3, r3, #15
 8000e72:	4a0e      	ldr	r2, [pc, #56]	; (8000eac <HAL_Init+0x6c>)
 8000e74:	5cd3      	ldrb	r3, [r2, r3]
 8000e76:	f003 031f 	and.w	r3, r3, #31
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e80:	4a0b      	ldr	r2, [pc, #44]	; (8000eb0 <HAL_Init+0x70>)
 8000e82:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e84:	4a0b      	ldr	r2, [pc, #44]	; (8000eb4 <HAL_Init+0x74>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e8a:	200f      	movs	r0, #15
 8000e8c:	f000 f814 	bl	8000eb8 <HAL_InitTick>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e002      	b.n	8000ea0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e9a:	f7ff fd4b 	bl	8000934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e9e:	2300      	movs	r3, #0
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	58024400 	.word	0x58024400
 8000eac:	0800e2b0 	.word	0x0800e2b0
 8000eb0:	24000004 	.word	0x24000004
 8000eb4:	24000000 	.word	0x24000000

08000eb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000ec0:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <HAL_InitTick+0x60>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d101      	bne.n	8000ecc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e021      	b.n	8000f10 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000ecc:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <HAL_InitTick+0x64>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <HAL_InitTick+0x60>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f001 fa15 	bl	8002312 <HAL_SYSTICK_Config>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e00e      	b.n	8000f10 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2b0f      	cmp	r3, #15
 8000ef6:	d80a      	bhi.n	8000f0e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	f04f 30ff 	mov.w	r0, #4294967295
 8000f00:	f001 f9df 	bl	80022c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f04:	4a06      	ldr	r2, [pc, #24]	; (8000f20 <HAL_InitTick+0x68>)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	e000      	b.n	8000f10 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	2400000c 	.word	0x2400000c
 8000f1c:	24000000 	.word	0x24000000
 8000f20:	24000008 	.word	0x24000008

08000f24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <HAL_IncTick+0x20>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <HAL_IncTick+0x24>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4413      	add	r3, r2
 8000f34:	4a04      	ldr	r2, [pc, #16]	; (8000f48 <HAL_IncTick+0x24>)
 8000f36:	6013      	str	r3, [r2, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	2400000c 	.word	0x2400000c
 8000f48:	240004c8 	.word	0x240004c8

08000f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f50:	4b03      	ldr	r3, [pc, #12]	; (8000f60 <HAL_GetTick+0x14>)
 8000f52:	681b      	ldr	r3, [r3, #0]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	240004c8 	.word	0x240004c8

08000f64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f6c:	f7ff ffee 	bl	8000f4c <HAL_GetTick>
 8000f70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f7c:	d005      	beq.n	8000f8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <HAL_Delay+0x44>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	461a      	mov	r2, r3
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	4413      	add	r3, r2
 8000f88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f8a:	bf00      	nop
 8000f8c:	f7ff ffde 	bl	8000f4c <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d8f7      	bhi.n	8000f8c <HAL_Delay+0x28>
  {
  }
}
 8000f9c:	bf00      	nop
 8000f9e:	bf00      	nop
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	2400000c 	.word	0x2400000c

08000fac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000fb0:	4b03      	ldr	r3, [pc, #12]	; (8000fc0 <HAL_GetREVID+0x14>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	0c1b      	lsrs	r3, r3, #16
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	5c001000 	.word	0x5c001000

08000fc4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8000fce:	4b07      	ldr	r3, [pc, #28]	; (8000fec <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8000fd0:	685a      	ldr	r2, [r3, #4]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	401a      	ands	r2, r3
 8000fd8:	4904      	ldr	r1, [pc, #16]	; (8000fec <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	604b      	str	r3, [r1, #4]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	58000400 	.word	0x58000400

08000ff0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	431a      	orrs	r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	609a      	str	r2, [r3, #8]
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001016:	b480      	push	{r7}
 8001018:	b083      	sub	sp, #12
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
 800101e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	431a      	orrs	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	609a      	str	r2, [r3, #8]
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800104c:	4618      	mov	r0, r3
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001058:	b480      	push	{r7}
 800105a:	b087      	sub	sp, #28
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
 8001064:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	3360      	adds	r3, #96	; 0x60
 800106a:	461a      	mov	r2, r3
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	4413      	add	r3, r2
 8001072:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	430b      	orrs	r3, r1
 8001086:	431a      	orrs	r2, r3
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800108c:	bf00      	nop
 800108e:	371c      	adds	r7, #28
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	691b      	ldr	r3, [r3, #16]
 80010a8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	f003 031f 	and.w	r3, r3, #31
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	fa01 f303 	lsl.w	r3, r1, r3
 80010b8:	431a      	orrs	r2, r3
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	611a      	str	r2, [r3, #16]
}
 80010be:	bf00      	nop
 80010c0:	3714      	adds	r7, #20
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr

080010ca <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80010ca:	b480      	push	{r7}
 80010cc:	b087      	sub	sp, #28
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	60f8      	str	r0, [r7, #12]
 80010d2:	60b9      	str	r1, [r7, #8]
 80010d4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	3360      	adds	r3, #96	; 0x60
 80010da:	461a      	mov	r2, r3
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	4413      	add	r3, r2
 80010e2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	431a      	orrs	r2, r3
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	601a      	str	r2, [r3, #0]
  }
}
 80010f4:	bf00      	nop
 80010f6:	371c      	adds	r7, #28
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001100:	b480      	push	{r7}
 8001102:	b087      	sub	sp, #28
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	3330      	adds	r3, #48	; 0x30
 8001110:	461a      	mov	r2, r3
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	0a1b      	lsrs	r3, r3, #8
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	f003 030c 	and.w	r3, r3, #12
 800111c:	4413      	add	r3, r2
 800111e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	f003 031f 	and.w	r3, r3, #31
 800112a:	211f      	movs	r1, #31
 800112c:	fa01 f303 	lsl.w	r3, r1, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	401a      	ands	r2, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	0e9b      	lsrs	r3, r3, #26
 8001138:	f003 011f 	and.w	r1, r3, #31
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	f003 031f 	and.w	r3, r3, #31
 8001142:	fa01 f303 	lsl.w	r3, r1, r3
 8001146:	431a      	orrs	r2, r3
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800114c:	bf00      	nop
 800114e:	371c      	adds	r7, #28
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001158:	b480      	push	{r7}
 800115a:	b087      	sub	sp, #28
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	3314      	adds	r3, #20
 8001168:	461a      	mov	r2, r3
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	0e5b      	lsrs	r3, r3, #25
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	f003 0304 	and.w	r3, r3, #4
 8001174:	4413      	add	r3, r2
 8001176:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	0d1b      	lsrs	r3, r3, #20
 8001180:	f003 031f 	and.w	r3, r3, #31
 8001184:	2107      	movs	r1, #7
 8001186:	fa01 f303 	lsl.w	r3, r1, r3
 800118a:	43db      	mvns	r3, r3
 800118c:	401a      	ands	r2, r3
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	0d1b      	lsrs	r3, r3, #20
 8001192:	f003 031f 	and.w	r3, r3, #31
 8001196:	6879      	ldr	r1, [r7, #4]
 8001198:	fa01 f303 	lsl.w	r3, r1, r3
 800119c:	431a      	orrs	r2, r3
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80011a2:	bf00      	nop
 80011a4:	371c      	adds	r7, #28
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
	...

080011b0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80011c8:	43db      	mvns	r3, r3
 80011ca:	401a      	ands	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f003 0318 	and.w	r3, r3, #24
 80011d2:	4908      	ldr	r1, [pc, #32]	; (80011f4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80011d4:	40d9      	lsrs	r1, r3
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	400b      	ands	r3, r1
 80011da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80011de:	431a      	orrs	r2, r3
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80011e6:	bf00      	nop
 80011e8:	3714      	adds	r7, #20
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	000fffff 	.word	0x000fffff

080011f8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	689a      	ldr	r2, [r3, #8]
 8001204:	4b04      	ldr	r3, [pc, #16]	; (8001218 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001206:	4013      	ands	r3, r2
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	6093      	str	r3, [r2, #8]
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	5fffffc0 	.word	0x5fffffc0

0800121c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800122c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001230:	d101      	bne.n	8001236 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001232:	2301      	movs	r3, #1
 8001234:	e000      	b.n	8001238 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001236:	2300      	movs	r3, #0
}
 8001238:	4618      	mov	r0, r3
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689a      	ldr	r2, [r3, #8]
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <LL_ADC_EnableInternalRegulator+0x24>)
 8001252:	4013      	ands	r3, r2
 8001254:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	6fffffc0 	.word	0x6fffffc0

0800126c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001280:	d101      	bne.n	8001286 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001282:	2301      	movs	r3, #1
 8001284:	e000      	b.n	8001288 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001286:	2300      	movs	r3, #0
}
 8001288:	4618      	mov	r0, r3
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	f003 0301 	and.w	r3, r3, #1
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d101      	bne.n	80012ac <LL_ADC_IsEnabled+0x18>
 80012a8:	2301      	movs	r3, #1
 80012aa:	e000      	b.n	80012ae <LL_ADC_IsEnabled+0x1a>
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80012ba:	b480      	push	{r7}
 80012bc:	b083      	sub	sp, #12
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f003 0304 	and.w	r3, r3, #4
 80012ca:	2b04      	cmp	r3, #4
 80012cc:	d101      	bne.n	80012d2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80012ce:	2301      	movs	r3, #1
 80012d0:	e000      	b.n	80012d4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f003 0308 	and.w	r3, r3, #8
 80012f0:	2b08      	cmp	r3, #8
 80012f2:	d101      	bne.n	80012f8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80012f4:	2301      	movs	r3, #1
 80012f6:	e000      	b.n	80012fa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
	...

08001308 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001308:	b590      	push	{r4, r7, lr}
 800130a:	b089      	sub	sp, #36	; 0x24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001310:	2300      	movs	r3, #0
 8001312:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001314:	2300      	movs	r3, #0
 8001316:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e18f      	b.n	8001642 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800132c:	2b00      	cmp	r3, #0
 800132e:	d109      	bne.n	8001344 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff fb19 	bl	8000968 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2200      	movs	r2, #0
 800133a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2200      	movs	r2, #0
 8001340:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff ff67 	bl	800121c <LL_ADC_IsDeepPowerDownEnabled>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d004      	beq.n	800135e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff ff4d 	bl	80011f8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff ff82 	bl	800126c <LL_ADC_IsInternalRegulatorEnabled>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d114      	bne.n	8001398 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff ff66 	bl	8001244 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001378:	4b87      	ldr	r3, [pc, #540]	; (8001598 <HAL_ADC_Init+0x290>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	099b      	lsrs	r3, r3, #6
 800137e:	4a87      	ldr	r2, [pc, #540]	; (800159c <HAL_ADC_Init+0x294>)
 8001380:	fba2 2303 	umull	r2, r3, r2, r3
 8001384:	099b      	lsrs	r3, r3, #6
 8001386:	3301      	adds	r3, #1
 8001388:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800138a:	e002      	b.n	8001392 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	3b01      	subs	r3, #1
 8001390:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d1f9      	bne.n	800138c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff ff65 	bl	800126c <LL_ADC_IsInternalRegulatorEnabled>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d10d      	bne.n	80013c4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ac:	f043 0210 	orr.w	r2, r3, #16
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b8:	f043 0201 	orr.w	r2, r3, #1
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff ff76 	bl	80012ba <LL_ADC_REG_IsConversionOngoing>
 80013ce:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013d4:	f003 0310 	and.w	r3, r3, #16
 80013d8:	2b00      	cmp	r3, #0
 80013da:	f040 8129 	bne.w	8001630 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	f040 8125 	bne.w	8001630 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ea:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80013ee:	f043 0202 	orr.w	r2, r3, #2
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff ff4a 	bl	8001294 <LL_ADC_IsEnabled>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d136      	bne.n	8001474 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a65      	ldr	r2, [pc, #404]	; (80015a0 <HAL_ADC_Init+0x298>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d004      	beq.n	800141a <HAL_ADC_Init+0x112>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a63      	ldr	r2, [pc, #396]	; (80015a4 <HAL_ADC_Init+0x29c>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d10e      	bne.n	8001438 <HAL_ADC_Init+0x130>
 800141a:	4861      	ldr	r0, [pc, #388]	; (80015a0 <HAL_ADC_Init+0x298>)
 800141c:	f7ff ff3a 	bl	8001294 <LL_ADC_IsEnabled>
 8001420:	4604      	mov	r4, r0
 8001422:	4860      	ldr	r0, [pc, #384]	; (80015a4 <HAL_ADC_Init+0x29c>)
 8001424:	f7ff ff36 	bl	8001294 <LL_ADC_IsEnabled>
 8001428:	4603      	mov	r3, r0
 800142a:	4323      	orrs	r3, r4
 800142c:	2b00      	cmp	r3, #0
 800142e:	bf0c      	ite	eq
 8001430:	2301      	moveq	r3, #1
 8001432:	2300      	movne	r3, #0
 8001434:	b2db      	uxtb	r3, r3
 8001436:	e008      	b.n	800144a <HAL_ADC_Init+0x142>
 8001438:	485b      	ldr	r0, [pc, #364]	; (80015a8 <HAL_ADC_Init+0x2a0>)
 800143a:	f7ff ff2b 	bl	8001294 <LL_ADC_IsEnabled>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	bf0c      	ite	eq
 8001444:	2301      	moveq	r3, #1
 8001446:	2300      	movne	r3, #0
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	d012      	beq.n	8001474 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a53      	ldr	r2, [pc, #332]	; (80015a0 <HAL_ADC_Init+0x298>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d004      	beq.n	8001462 <HAL_ADC_Init+0x15a>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a51      	ldr	r2, [pc, #324]	; (80015a4 <HAL_ADC_Init+0x29c>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d101      	bne.n	8001466 <HAL_ADC_Init+0x15e>
 8001462:	4a52      	ldr	r2, [pc, #328]	; (80015ac <HAL_ADC_Init+0x2a4>)
 8001464:	e000      	b.n	8001468 <HAL_ADC_Init+0x160>
 8001466:	4a52      	ldr	r2, [pc, #328]	; (80015b0 <HAL_ADC_Init+0x2a8>)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	4619      	mov	r1, r3
 800146e:	4610      	mov	r0, r2
 8001470:	f7ff fdbe 	bl	8000ff0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001474:	f7ff fd9a 	bl	8000fac <HAL_GetREVID>
 8001478:	4603      	mov	r3, r0
 800147a:	f241 0203 	movw	r2, #4099	; 0x1003
 800147e:	4293      	cmp	r3, r2
 8001480:	d914      	bls.n	80014ac <HAL_ADC_Init+0x1a4>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	2b10      	cmp	r3, #16
 8001488:	d110      	bne.n	80014ac <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	7d5b      	ldrb	r3, [r3, #21]
 800148e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001494:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800149a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	7f1b      	ldrb	r3, [r3, #28]
 80014a0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80014a2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80014a4:	f043 030c 	orr.w	r3, r3, #12
 80014a8:	61bb      	str	r3, [r7, #24]
 80014aa:	e00d      	b.n	80014c8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	7d5b      	ldrb	r3, [r3, #21]
 80014b0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80014b6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80014bc:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	7f1b      	ldrb	r3, [r3, #28]
 80014c2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80014c4:	4313      	orrs	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	7f1b      	ldrb	r3, [r3, #28]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d106      	bne.n	80014de <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a1b      	ldr	r3, [r3, #32]
 80014d4:	3b01      	subs	r3, #1
 80014d6:	045b      	lsls	r3, r3, #17
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	4313      	orrs	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d009      	beq.n	80014fa <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ea:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	68da      	ldr	r2, [r3, #12]
 8001500:	4b2c      	ldr	r3, [pc, #176]	; (80015b4 <HAL_ADC_Init+0x2ac>)
 8001502:	4013      	ands	r3, r2
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	6812      	ldr	r2, [r2, #0]
 8001508:	69b9      	ldr	r1, [r7, #24]
 800150a:	430b      	orrs	r3, r1
 800150c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff fed1 	bl	80012ba <LL_ADC_REG_IsConversionOngoing>
 8001518:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff fede 	bl	80012e0 <LL_ADC_INJ_IsConversionOngoing>
 8001524:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d15f      	bne.n	80015ec <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d15c      	bne.n	80015ec <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	7d1b      	ldrb	r3, [r3, #20]
 8001536:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800153c:	4313      	orrs	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	68da      	ldr	r2, [r3, #12]
 8001546:	4b1c      	ldr	r3, [pc, #112]	; (80015b8 <HAL_ADC_Init+0x2b0>)
 8001548:	4013      	ands	r3, r2
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	6812      	ldr	r2, [r2, #0]
 800154e:	69b9      	ldr	r1, [r7, #24]
 8001550:	430b      	orrs	r3, r1
 8001552:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800155a:	2b01      	cmp	r3, #1
 800155c:	d130      	bne.n	80015c0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001562:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	691a      	ldr	r2, [r3, #16]
 800156a:	4b14      	ldr	r3, [pc, #80]	; (80015bc <HAL_ADC_Init+0x2b4>)
 800156c:	4013      	ands	r3, r2
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001572:	3a01      	subs	r2, #1
 8001574:	0411      	lsls	r1, r2, #16
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800157a:	4311      	orrs	r1, r2
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001580:	4311      	orrs	r1, r2
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001586:	430a      	orrs	r2, r1
 8001588:	431a      	orrs	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f042 0201 	orr.w	r2, r2, #1
 8001592:	611a      	str	r2, [r3, #16]
 8001594:	e01c      	b.n	80015d0 <HAL_ADC_Init+0x2c8>
 8001596:	bf00      	nop
 8001598:	24000000 	.word	0x24000000
 800159c:	053e2d63 	.word	0x053e2d63
 80015a0:	40022000 	.word	0x40022000
 80015a4:	40022100 	.word	0x40022100
 80015a8:	58026000 	.word	0x58026000
 80015ac:	40022300 	.word	0x40022300
 80015b0:	58026300 	.word	0x58026300
 80015b4:	fff0c003 	.word	0xfff0c003
 80015b8:	ffffbffc 	.word	0xffffbffc
 80015bc:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	691a      	ldr	r2, [r3, #16]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f022 0201 	bic.w	r2, r2, #1
 80015ce:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	430a      	orrs	r2, r1
 80015e4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 fb80 	bl	8001cec <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d10c      	bne.n	800160e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f023 010f 	bic.w	r1, r3, #15
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	1e5a      	subs	r2, r3, #1
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	430a      	orrs	r2, r1
 800160a:	631a      	str	r2, [r3, #48]	; 0x30
 800160c:	e007      	b.n	800161e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 020f 	bic.w	r2, r2, #15
 800161c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001622:	f023 0303 	bic.w	r3, r3, #3
 8001626:	f043 0201 	orr.w	r2, r3, #1
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	655a      	str	r2, [r3, #84]	; 0x54
 800162e:	e007      	b.n	8001640 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001634:	f043 0210 	orr.w	r2, r3, #16
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001640:	7ffb      	ldrb	r3, [r7, #31]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3724      	adds	r7, #36	; 0x24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd90      	pop	{r4, r7, pc}
 800164a:	bf00      	nop

0800164c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800164c:	b590      	push	{r4, r7, lr}
 800164e:	b0a1      	sub	sp, #132	; 0x84
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001656:	2300      	movs	r3, #0
 8001658:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	4a9d      	ldr	r2, [pc, #628]	; (80018dc <HAL_ADC_ConfigChannel+0x290>)
 8001666:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800166e:	2b01      	cmp	r3, #1
 8001670:	d101      	bne.n	8001676 <HAL_ADC_ConfigChannel+0x2a>
 8001672:	2302      	movs	r3, #2
 8001674:	e321      	b.n	8001cba <HAL_ADC_ConfigChannel+0x66e>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2201      	movs	r2, #1
 800167a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff fe19 	bl	80012ba <LL_ADC_REG_IsConversionOngoing>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	f040 8306 	bne.w	8001c9c <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001698:	2b00      	cmp	r3, #0
 800169a:	d108      	bne.n	80016ae <HAL_ADC_ConfigChannel+0x62>
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	0e9b      	lsrs	r3, r3, #26
 80016a2:	f003 031f 	and.w	r3, r3, #31
 80016a6:	2201      	movs	r2, #1
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	e016      	b.n	80016dc <HAL_ADC_ConfigChannel+0x90>
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80016b6:	fa93 f3a3 	rbit	r3, r3
 80016ba:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80016be:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80016c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d101      	bne.n	80016ca <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80016c6:	2320      	movs	r3, #32
 80016c8:	e003      	b.n	80016d2 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80016ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016cc:	fab3 f383 	clz	r3, r3
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	f003 031f 	and.w	r3, r3, #31
 80016d6:	2201      	movs	r2, #1
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	6812      	ldr	r2, [r2, #0]
 80016e0:	69d1      	ldr	r1, [r2, #28]
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	6812      	ldr	r2, [r2, #0]
 80016e6:	430b      	orrs	r3, r1
 80016e8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6818      	ldr	r0, [r3, #0]
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	6859      	ldr	r1, [r3, #4]
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	461a      	mov	r2, r3
 80016f8:	f7ff fd02 	bl	8001100 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff fdda 	bl	80012ba <LL_ADC_REG_IsConversionOngoing>
 8001706:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff fde7 	bl	80012e0 <LL_ADC_INJ_IsConversionOngoing>
 8001712:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001714:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001716:	2b00      	cmp	r3, #0
 8001718:	f040 80b3 	bne.w	8001882 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800171c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800171e:	2b00      	cmp	r3, #0
 8001720:	f040 80af 	bne.w	8001882 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6818      	ldr	r0, [r3, #0]
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	6819      	ldr	r1, [r3, #0]
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	461a      	mov	r2, r3
 8001732:	f7ff fd11 	bl	8001158 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001736:	4b6a      	ldr	r3, [pc, #424]	; (80018e0 <HAL_ADC_ConfigChannel+0x294>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800173e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001742:	d10b      	bne.n	800175c <HAL_ADC_ConfigChannel+0x110>
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	695a      	ldr	r2, [r3, #20]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	089b      	lsrs	r3, r3, #2
 8001750:	f003 0307 	and.w	r3, r3, #7
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	e01d      	b.n	8001798 <HAL_ADC_ConfigChannel+0x14c>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	f003 0310 	and.w	r3, r3, #16
 8001766:	2b00      	cmp	r3, #0
 8001768:	d10b      	bne.n	8001782 <HAL_ADC_ConfigChannel+0x136>
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	695a      	ldr	r2, [r3, #20]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	089b      	lsrs	r3, r3, #2
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	e00a      	b.n	8001798 <HAL_ADC_ConfigChannel+0x14c>
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	695a      	ldr	r2, [r3, #20]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	089b      	lsrs	r3, r3, #2
 800178e:	f003 0304 	and.w	r3, r3, #4
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	2b04      	cmp	r3, #4
 80017a0:	d027      	beq.n	80017f2 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6818      	ldr	r0, [r3, #0]
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	6919      	ldr	r1, [r3, #16]
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017b0:	f7ff fc52 	bl	8001058 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6818      	ldr	r0, [r3, #0]
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	6919      	ldr	r1, [r3, #16]
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	7e5b      	ldrb	r3, [r3, #25]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d102      	bne.n	80017ca <HAL_ADC_ConfigChannel+0x17e>
 80017c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80017c8:	e000      	b.n	80017cc <HAL_ADC_ConfigChannel+0x180>
 80017ca:	2300      	movs	r3, #0
 80017cc:	461a      	mov	r2, r3
 80017ce:	f7ff fc7c 	bl	80010ca <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6818      	ldr	r0, [r3, #0]
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	6919      	ldr	r1, [r3, #16]
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	7e1b      	ldrb	r3, [r3, #24]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d102      	bne.n	80017e8 <HAL_ADC_ConfigChannel+0x19c>
 80017e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017e6:	e000      	b.n	80017ea <HAL_ADC_ConfigChannel+0x19e>
 80017e8:	2300      	movs	r3, #0
 80017ea:	461a      	mov	r2, r3
 80017ec:	f7ff fc54 	bl	8001098 <LL_ADC_SetDataRightShift>
 80017f0:	e047      	b.n	8001882 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	069b      	lsls	r3, r3, #26
 8001802:	429a      	cmp	r2, r3
 8001804:	d107      	bne.n	8001816 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001814:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800181c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	069b      	lsls	r3, r3, #26
 8001826:	429a      	cmp	r2, r3
 8001828:	d107      	bne.n	800183a <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001838:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001840:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	069b      	lsls	r3, r3, #26
 800184a:	429a      	cmp	r2, r3
 800184c:	d107      	bne.n	800185e <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800185c:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001864:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	069b      	lsls	r3, r3, #26
 800186e:	429a      	cmp	r2, r3
 8001870:	d107      	bne.n	8001882 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001880:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff fd04 	bl	8001294 <LL_ADC_IsEnabled>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	f040 820d 	bne.w	8001cae <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6818      	ldr	r0, [r3, #0]
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	6819      	ldr	r1, [r3, #0]
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	461a      	mov	r2, r3
 80018a2:	f7ff fc85 	bl	80011b0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	4a0c      	ldr	r2, [pc, #48]	; (80018dc <HAL_ADC_ConfigChannel+0x290>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	f040 8133 	bne.w	8001b18 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d110      	bne.n	80018e4 <HAL_ADC_ConfigChannel+0x298>
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	0e9b      	lsrs	r3, r3, #26
 80018c8:	3301      	adds	r3, #1
 80018ca:	f003 031f 	and.w	r3, r3, #31
 80018ce:	2b09      	cmp	r3, #9
 80018d0:	bf94      	ite	ls
 80018d2:	2301      	movls	r3, #1
 80018d4:	2300      	movhi	r3, #0
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	e01e      	b.n	8001918 <HAL_ADC_ConfigChannel+0x2cc>
 80018da:	bf00      	nop
 80018dc:	47ff0000 	.word	0x47ff0000
 80018e0:	5c001000 	.word	0x5c001000
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018ec:	fa93 f3a3 	rbit	r3, r3
 80018f0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80018f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80018f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d101      	bne.n	8001900 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80018fc:	2320      	movs	r3, #32
 80018fe:	e003      	b.n	8001908 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8001900:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001902:	fab3 f383 	clz	r3, r3
 8001906:	b2db      	uxtb	r3, r3
 8001908:	3301      	adds	r3, #1
 800190a:	f003 031f 	and.w	r3, r3, #31
 800190e:	2b09      	cmp	r3, #9
 8001910:	bf94      	ite	ls
 8001912:	2301      	movls	r3, #1
 8001914:	2300      	movhi	r3, #0
 8001916:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001918:	2b00      	cmp	r3, #0
 800191a:	d079      	beq.n	8001a10 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001924:	2b00      	cmp	r3, #0
 8001926:	d107      	bne.n	8001938 <HAL_ADC_ConfigChannel+0x2ec>
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	0e9b      	lsrs	r3, r3, #26
 800192e:	3301      	adds	r3, #1
 8001930:	069b      	lsls	r3, r3, #26
 8001932:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001936:	e015      	b.n	8001964 <HAL_ADC_ConfigChannel+0x318>
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001940:	fa93 f3a3 	rbit	r3, r3
 8001944:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001946:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001948:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800194a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800194c:	2b00      	cmp	r3, #0
 800194e:	d101      	bne.n	8001954 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8001950:	2320      	movs	r3, #32
 8001952:	e003      	b.n	800195c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001954:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001956:	fab3 f383 	clz	r3, r3
 800195a:	b2db      	uxtb	r3, r3
 800195c:	3301      	adds	r3, #1
 800195e:	069b      	lsls	r3, r3, #26
 8001960:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800196c:	2b00      	cmp	r3, #0
 800196e:	d109      	bne.n	8001984 <HAL_ADC_ConfigChannel+0x338>
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	0e9b      	lsrs	r3, r3, #26
 8001976:	3301      	adds	r3, #1
 8001978:	f003 031f 	and.w	r3, r3, #31
 800197c:	2101      	movs	r1, #1
 800197e:	fa01 f303 	lsl.w	r3, r1, r3
 8001982:	e017      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x368>
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800198c:	fa93 f3a3 	rbit	r3, r3
 8001990:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001994:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001996:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001998:	2b00      	cmp	r3, #0
 800199a:	d101      	bne.n	80019a0 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 800199c:	2320      	movs	r3, #32
 800199e:	e003      	b.n	80019a8 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80019a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019a2:	fab3 f383 	clz	r3, r3
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	3301      	adds	r3, #1
 80019aa:	f003 031f 	and.w	r3, r3, #31
 80019ae:	2101      	movs	r1, #1
 80019b0:	fa01 f303 	lsl.w	r3, r1, r3
 80019b4:	ea42 0103 	orr.w	r1, r2, r3
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d10a      	bne.n	80019da <HAL_ADC_ConfigChannel+0x38e>
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	0e9b      	lsrs	r3, r3, #26
 80019ca:	3301      	adds	r3, #1
 80019cc:	f003 021f 	and.w	r2, r3, #31
 80019d0:	4613      	mov	r3, r2
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	4413      	add	r3, r2
 80019d6:	051b      	lsls	r3, r3, #20
 80019d8:	e018      	b.n	8001a0c <HAL_ADC_ConfigChannel+0x3c0>
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019e2:	fa93 f3a3 	rbit	r3, r3
 80019e6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80019e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ea:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80019ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80019f2:	2320      	movs	r3, #32
 80019f4:	e003      	b.n	80019fe <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80019f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019f8:	fab3 f383 	clz	r3, r3
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	3301      	adds	r3, #1
 8001a00:	f003 021f 	and.w	r2, r3, #31
 8001a04:	4613      	mov	r3, r2
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	4413      	add	r3, r2
 8001a0a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a0c:	430b      	orrs	r3, r1
 8001a0e:	e07e      	b.n	8001b0e <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d107      	bne.n	8001a2c <HAL_ADC_ConfigChannel+0x3e0>
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	0e9b      	lsrs	r3, r3, #26
 8001a22:	3301      	adds	r3, #1
 8001a24:	069b      	lsls	r3, r3, #26
 8001a26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a2a:	e015      	b.n	8001a58 <HAL_ADC_ConfigChannel+0x40c>
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a34:	fa93 f3a3 	rbit	r3, r3
 8001a38:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d101      	bne.n	8001a48 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001a44:	2320      	movs	r3, #32
 8001a46:	e003      	b.n	8001a50 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a4a:	fab3 f383 	clz	r3, r3
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	3301      	adds	r3, #1
 8001a52:	069b      	lsls	r3, r3, #26
 8001a54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d109      	bne.n	8001a78 <HAL_ADC_ConfigChannel+0x42c>
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	0e9b      	lsrs	r3, r3, #26
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	f003 031f 	and.w	r3, r3, #31
 8001a70:	2101      	movs	r1, #1
 8001a72:	fa01 f303 	lsl.w	r3, r1, r3
 8001a76:	e017      	b.n	8001aa8 <HAL_ADC_ConfigChannel+0x45c>
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	fa93 f3a3 	rbit	r3, r3
 8001a84:	61bb      	str	r3, [r7, #24]
  return result;
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001a8a:	6a3b      	ldr	r3, [r7, #32]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d101      	bne.n	8001a94 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8001a90:	2320      	movs	r3, #32
 8001a92:	e003      	b.n	8001a9c <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8001a94:	6a3b      	ldr	r3, [r7, #32]
 8001a96:	fab3 f383 	clz	r3, r3
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	f003 031f 	and.w	r3, r3, #31
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa8:	ea42 0103 	orr.w	r1, r2, r3
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d10d      	bne.n	8001ad4 <HAL_ADC_ConfigChannel+0x488>
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	0e9b      	lsrs	r3, r3, #26
 8001abe:	3301      	adds	r3, #1
 8001ac0:	f003 021f 	and.w	r2, r3, #31
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	4413      	add	r3, r2
 8001aca:	3b1e      	subs	r3, #30
 8001acc:	051b      	lsls	r3, r3, #20
 8001ace:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ad2:	e01b      	b.n	8001b0c <HAL_ADC_ConfigChannel+0x4c0>
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	fa93 f3a3 	rbit	r3, r3
 8001ae0:	60fb      	str	r3, [r7, #12]
  return result;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d101      	bne.n	8001af0 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8001aec:	2320      	movs	r3, #32
 8001aee:	e003      	b.n	8001af8 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	fab3 f383 	clz	r3, r3
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	3301      	adds	r3, #1
 8001afa:	f003 021f 	and.w	r2, r3, #31
 8001afe:	4613      	mov	r3, r2
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	4413      	add	r3, r2
 8001b04:	3b1e      	subs	r3, #30
 8001b06:	051b      	lsls	r3, r3, #20
 8001b08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b0c:	430b      	orrs	r3, r1
 8001b0e:	683a      	ldr	r2, [r7, #0]
 8001b10:	6892      	ldr	r2, [r2, #8]
 8001b12:	4619      	mov	r1, r3
 8001b14:	f7ff fb20 	bl	8001158 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f280 80c6 	bge.w	8001cae <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a67      	ldr	r2, [pc, #412]	; (8001cc4 <HAL_ADC_ConfigChannel+0x678>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d004      	beq.n	8001b36 <HAL_ADC_ConfigChannel+0x4ea>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a65      	ldr	r2, [pc, #404]	; (8001cc8 <HAL_ADC_ConfigChannel+0x67c>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d101      	bne.n	8001b3a <HAL_ADC_ConfigChannel+0x4ee>
 8001b36:	4b65      	ldr	r3, [pc, #404]	; (8001ccc <HAL_ADC_ConfigChannel+0x680>)
 8001b38:	e000      	b.n	8001b3c <HAL_ADC_ConfigChannel+0x4f0>
 8001b3a:	4b65      	ldr	r3, [pc, #404]	; (8001cd0 <HAL_ADC_ConfigChannel+0x684>)
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff fa7d 	bl	800103c <LL_ADC_GetCommonPathInternalCh>
 8001b42:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a5e      	ldr	r2, [pc, #376]	; (8001cc4 <HAL_ADC_ConfigChannel+0x678>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d004      	beq.n	8001b58 <HAL_ADC_ConfigChannel+0x50c>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a5d      	ldr	r2, [pc, #372]	; (8001cc8 <HAL_ADC_ConfigChannel+0x67c>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d10e      	bne.n	8001b76 <HAL_ADC_ConfigChannel+0x52a>
 8001b58:	485a      	ldr	r0, [pc, #360]	; (8001cc4 <HAL_ADC_ConfigChannel+0x678>)
 8001b5a:	f7ff fb9b 	bl	8001294 <LL_ADC_IsEnabled>
 8001b5e:	4604      	mov	r4, r0
 8001b60:	4859      	ldr	r0, [pc, #356]	; (8001cc8 <HAL_ADC_ConfigChannel+0x67c>)
 8001b62:	f7ff fb97 	bl	8001294 <LL_ADC_IsEnabled>
 8001b66:	4603      	mov	r3, r0
 8001b68:	4323      	orrs	r3, r4
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	bf0c      	ite	eq
 8001b6e:	2301      	moveq	r3, #1
 8001b70:	2300      	movne	r3, #0
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	e008      	b.n	8001b88 <HAL_ADC_ConfigChannel+0x53c>
 8001b76:	4857      	ldr	r0, [pc, #348]	; (8001cd4 <HAL_ADC_ConfigChannel+0x688>)
 8001b78:	f7ff fb8c 	bl	8001294 <LL_ADC_IsEnabled>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	bf0c      	ite	eq
 8001b82:	2301      	moveq	r3, #1
 8001b84:	2300      	movne	r3, #0
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d07d      	beq.n	8001c88 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a51      	ldr	r2, [pc, #324]	; (8001cd8 <HAL_ADC_ConfigChannel+0x68c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d130      	bne.n	8001bf8 <HAL_ADC_ConfigChannel+0x5ac>
 8001b96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d12b      	bne.n	8001bf8 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a4b      	ldr	r2, [pc, #300]	; (8001cd4 <HAL_ADC_ConfigChannel+0x688>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	f040 8081 	bne.w	8001cae <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a44      	ldr	r2, [pc, #272]	; (8001cc4 <HAL_ADC_ConfigChannel+0x678>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d004      	beq.n	8001bc0 <HAL_ADC_ConfigChannel+0x574>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a43      	ldr	r2, [pc, #268]	; (8001cc8 <HAL_ADC_ConfigChannel+0x67c>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d101      	bne.n	8001bc4 <HAL_ADC_ConfigChannel+0x578>
 8001bc0:	4a42      	ldr	r2, [pc, #264]	; (8001ccc <HAL_ADC_ConfigChannel+0x680>)
 8001bc2:	e000      	b.n	8001bc6 <HAL_ADC_ConfigChannel+0x57a>
 8001bc4:	4a42      	ldr	r2, [pc, #264]	; (8001cd0 <HAL_ADC_ConfigChannel+0x684>)
 8001bc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bc8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4610      	mov	r0, r2
 8001bd0:	f7ff fa21 	bl	8001016 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bd4:	4b41      	ldr	r3, [pc, #260]	; (8001cdc <HAL_ADC_ConfigChannel+0x690>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	099b      	lsrs	r3, r3, #6
 8001bda:	4a41      	ldr	r2, [pc, #260]	; (8001ce0 <HAL_ADC_ConfigChannel+0x694>)
 8001bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8001be0:	099b      	lsrs	r3, r3, #6
 8001be2:	3301      	adds	r3, #1
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001be8:	e002      	b.n	8001bf0 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	3b01      	subs	r3, #1
 8001bee:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1f9      	bne.n	8001bea <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001bf6:	e05a      	b.n	8001cae <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a39      	ldr	r2, [pc, #228]	; (8001ce4 <HAL_ADC_ConfigChannel+0x698>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d11e      	bne.n	8001c40 <HAL_ADC_ConfigChannel+0x5f4>
 8001c02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d119      	bne.n	8001c40 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a30      	ldr	r2, [pc, #192]	; (8001cd4 <HAL_ADC_ConfigChannel+0x688>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d14b      	bne.n	8001cae <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a2a      	ldr	r2, [pc, #168]	; (8001cc4 <HAL_ADC_ConfigChannel+0x678>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d004      	beq.n	8001c2a <HAL_ADC_ConfigChannel+0x5de>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a28      	ldr	r2, [pc, #160]	; (8001cc8 <HAL_ADC_ConfigChannel+0x67c>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d101      	bne.n	8001c2e <HAL_ADC_ConfigChannel+0x5e2>
 8001c2a:	4a28      	ldr	r2, [pc, #160]	; (8001ccc <HAL_ADC_ConfigChannel+0x680>)
 8001c2c:	e000      	b.n	8001c30 <HAL_ADC_ConfigChannel+0x5e4>
 8001c2e:	4a28      	ldr	r2, [pc, #160]	; (8001cd0 <HAL_ADC_ConfigChannel+0x684>)
 8001c30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c36:	4619      	mov	r1, r3
 8001c38:	4610      	mov	r0, r2
 8001c3a:	f7ff f9ec 	bl	8001016 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c3e:	e036      	b.n	8001cae <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a28      	ldr	r2, [pc, #160]	; (8001ce8 <HAL_ADC_ConfigChannel+0x69c>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d131      	bne.n	8001cae <HAL_ADC_ConfigChannel+0x662>
 8001c4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d12c      	bne.n	8001cae <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a1e      	ldr	r2, [pc, #120]	; (8001cd4 <HAL_ADC_ConfigChannel+0x688>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d127      	bne.n	8001cae <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a18      	ldr	r2, [pc, #96]	; (8001cc4 <HAL_ADC_ConfigChannel+0x678>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d004      	beq.n	8001c72 <HAL_ADC_ConfigChannel+0x626>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a16      	ldr	r2, [pc, #88]	; (8001cc8 <HAL_ADC_ConfigChannel+0x67c>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d101      	bne.n	8001c76 <HAL_ADC_ConfigChannel+0x62a>
 8001c72:	4a16      	ldr	r2, [pc, #88]	; (8001ccc <HAL_ADC_ConfigChannel+0x680>)
 8001c74:	e000      	b.n	8001c78 <HAL_ADC_ConfigChannel+0x62c>
 8001c76:	4a16      	ldr	r2, [pc, #88]	; (8001cd0 <HAL_ADC_ConfigChannel+0x684>)
 8001c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c7a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4610      	mov	r0, r2
 8001c82:	f7ff f9c8 	bl	8001016 <LL_ADC_SetCommonPathInternalCh>
 8001c86:	e012      	b.n	8001cae <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c8c:	f043 0220 	orr.w	r2, r3, #32
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001c9a:	e008      	b.n	8001cae <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca0:	f043 0220 	orr.w	r2, r3, #32
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001cb6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3784      	adds	r7, #132	; 0x84
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd90      	pop	{r4, r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40022000 	.word	0x40022000
 8001cc8:	40022100 	.word	0x40022100
 8001ccc:	40022300 	.word	0x40022300
 8001cd0:	58026300 	.word	0x58026300
 8001cd4:	58026000 	.word	0x58026000
 8001cd8:	cb840000 	.word	0xcb840000
 8001cdc:	24000000 	.word	0x24000000
 8001ce0:	053e2d63 	.word	0x053e2d63
 8001ce4:	c7520000 	.word	0xc7520000
 8001ce8:	cfb80000 	.word	0xcfb80000

08001cec <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a7a      	ldr	r2, [pc, #488]	; (8001ee4 <ADC_ConfigureBoostMode+0x1f8>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d004      	beq.n	8001d08 <ADC_ConfigureBoostMode+0x1c>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a79      	ldr	r2, [pc, #484]	; (8001ee8 <ADC_ConfigureBoostMode+0x1fc>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d109      	bne.n	8001d1c <ADC_ConfigureBoostMode+0x30>
 8001d08:	4b78      	ldr	r3, [pc, #480]	; (8001eec <ADC_ConfigureBoostMode+0x200>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	bf14      	ite	ne
 8001d14:	2301      	movne	r3, #1
 8001d16:	2300      	moveq	r3, #0
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	e008      	b.n	8001d2e <ADC_ConfigureBoostMode+0x42>
 8001d1c:	4b74      	ldr	r3, [pc, #464]	; (8001ef0 <ADC_ConfigureBoostMode+0x204>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	bf14      	ite	ne
 8001d28:	2301      	movne	r3, #1
 8001d2a:	2300      	moveq	r3, #0
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d01c      	beq.n	8001d6c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8001d32:	f002 ff39 	bl	8004ba8 <HAL_RCC_GetHCLKFreq>
 8001d36:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001d40:	d010      	beq.n	8001d64 <ADC_ConfigureBoostMode+0x78>
 8001d42:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001d46:	d873      	bhi.n	8001e30 <ADC_ConfigureBoostMode+0x144>
 8001d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d4c:	d002      	beq.n	8001d54 <ADC_ConfigureBoostMode+0x68>
 8001d4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001d52:	d16d      	bne.n	8001e30 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	0c1b      	lsrs	r3, r3, #16
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d60:	60fb      	str	r3, [r7, #12]
        break;
 8001d62:	e068      	b.n	8001e36 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	089b      	lsrs	r3, r3, #2
 8001d68:	60fb      	str	r3, [r7, #12]
        break;
 8001d6a:	e064      	b.n	8001e36 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8001d6c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001d70:	f04f 0100 	mov.w	r1, #0
 8001d74:	f004 f968 	bl	8006048 <HAL_RCCEx_GetPeriphCLKFreq>
 8001d78:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001d82:	d051      	beq.n	8001e28 <ADC_ConfigureBoostMode+0x13c>
 8001d84:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001d88:	d854      	bhi.n	8001e34 <ADC_ConfigureBoostMode+0x148>
 8001d8a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001d8e:	d047      	beq.n	8001e20 <ADC_ConfigureBoostMode+0x134>
 8001d90:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001d94:	d84e      	bhi.n	8001e34 <ADC_ConfigureBoostMode+0x148>
 8001d96:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001d9a:	d03d      	beq.n	8001e18 <ADC_ConfigureBoostMode+0x12c>
 8001d9c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001da0:	d848      	bhi.n	8001e34 <ADC_ConfigureBoostMode+0x148>
 8001da2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001da6:	d033      	beq.n	8001e10 <ADC_ConfigureBoostMode+0x124>
 8001da8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001dac:	d842      	bhi.n	8001e34 <ADC_ConfigureBoostMode+0x148>
 8001dae:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001db2:	d029      	beq.n	8001e08 <ADC_ConfigureBoostMode+0x11c>
 8001db4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001db8:	d83c      	bhi.n	8001e34 <ADC_ConfigureBoostMode+0x148>
 8001dba:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001dbe:	d01a      	beq.n	8001df6 <ADC_ConfigureBoostMode+0x10a>
 8001dc0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001dc4:	d836      	bhi.n	8001e34 <ADC_ConfigureBoostMode+0x148>
 8001dc6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8001dca:	d014      	beq.n	8001df6 <ADC_ConfigureBoostMode+0x10a>
 8001dcc:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8001dd0:	d830      	bhi.n	8001e34 <ADC_ConfigureBoostMode+0x148>
 8001dd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001dd6:	d00e      	beq.n	8001df6 <ADC_ConfigureBoostMode+0x10a>
 8001dd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ddc:	d82a      	bhi.n	8001e34 <ADC_ConfigureBoostMode+0x148>
 8001dde:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001de2:	d008      	beq.n	8001df6 <ADC_ConfigureBoostMode+0x10a>
 8001de4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001de8:	d824      	bhi.n	8001e34 <ADC_ConfigureBoostMode+0x148>
 8001dea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001dee:	d002      	beq.n	8001df6 <ADC_ConfigureBoostMode+0x10a>
 8001df0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001df4:	d11e      	bne.n	8001e34 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	0c9b      	lsrs	r3, r3, #18
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e04:	60fb      	str	r3, [r7, #12]
        break;
 8001e06:	e016      	b.n	8001e36 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	091b      	lsrs	r3, r3, #4
 8001e0c:	60fb      	str	r3, [r7, #12]
        break;
 8001e0e:	e012      	b.n	8001e36 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	095b      	lsrs	r3, r3, #5
 8001e14:	60fb      	str	r3, [r7, #12]
        break;
 8001e16:	e00e      	b.n	8001e36 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	099b      	lsrs	r3, r3, #6
 8001e1c:	60fb      	str	r3, [r7, #12]
        break;
 8001e1e:	e00a      	b.n	8001e36 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	09db      	lsrs	r3, r3, #7
 8001e24:	60fb      	str	r3, [r7, #12]
        break;
 8001e26:	e006      	b.n	8001e36 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	0a1b      	lsrs	r3, r3, #8
 8001e2c:	60fb      	str	r3, [r7, #12]
        break;
 8001e2e:	e002      	b.n	8001e36 <ADC_ConfigureBoostMode+0x14a>
        break;
 8001e30:	bf00      	nop
 8001e32:	e000      	b.n	8001e36 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8001e34:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8001e36:	f7ff f8b9 	bl	8000fac <HAL_GetREVID>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	f241 0203 	movw	r2, #4099	; 0x1003
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d815      	bhi.n	8001e70 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	4a2b      	ldr	r2, [pc, #172]	; (8001ef4 <ADC_ConfigureBoostMode+0x208>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d908      	bls.n	8001e5e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689a      	ldr	r2, [r3, #8]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e5a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8001e5c:	e03e      	b.n	8001edc <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e6c:	609a      	str	r2, [r3, #8]
}
 8001e6e:	e035      	b.n	8001edc <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	085b      	lsrs	r3, r3, #1
 8001e74:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	4a1f      	ldr	r2, [pc, #124]	; (8001ef8 <ADC_ConfigureBoostMode+0x20c>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d808      	bhi.n	8001e90 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001e8c:	609a      	str	r2, [r3, #8]
}
 8001e8e:	e025      	b.n	8001edc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	4a1a      	ldr	r2, [pc, #104]	; (8001efc <ADC_ConfigureBoostMode+0x210>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d80a      	bhi.n	8001eae <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001eaa:	609a      	str	r2, [r3, #8]
}
 8001eac:	e016      	b.n	8001edc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	4a13      	ldr	r2, [pc, #76]	; (8001f00 <ADC_ConfigureBoostMode+0x214>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d80a      	bhi.n	8001ecc <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ec8:	609a      	str	r2, [r3, #8]
}
 8001eca:	e007      	b.n	8001edc <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	689a      	ldr	r2, [r3, #8]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8001eda:	609a      	str	r2, [r3, #8]
}
 8001edc:	bf00      	nop
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40022000 	.word	0x40022000
 8001ee8:	40022100 	.word	0x40022100
 8001eec:	40022300 	.word	0x40022300
 8001ef0:	58026300 	.word	0x58026300
 8001ef4:	01312d00 	.word	0x01312d00
 8001ef8:	005f5e10 	.word	0x005f5e10
 8001efc:	00bebc20 	.word	0x00bebc20
 8001f00:	017d7840 	.word	0x017d7840

08001f04 <LL_ADC_IsEnabled>:
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d101      	bne.n	8001f1c <LL_ADC_IsEnabled+0x18>
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e000      	b.n	8001f1e <LL_ADC_IsEnabled+0x1a>
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <LL_ADC_REG_IsConversionOngoing>:
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 0304 	and.w	r3, r3, #4
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	d101      	bne.n	8001f42 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e000      	b.n	8001f44 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001f50:	b590      	push	{r4, r7, lr}
 8001f52:	b09f      	sub	sp, #124	; 0x7c
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d101      	bne.n	8001f6e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	e0be      	b.n	80020ec <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8001f76:	2300      	movs	r3, #0
 8001f78:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a5c      	ldr	r2, [pc, #368]	; (80020f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d102      	bne.n	8001f8e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001f88:	4b5b      	ldr	r3, [pc, #364]	; (80020f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8001f8a:	60bb      	str	r3, [r7, #8]
 8001f8c:	e001      	b.n	8001f92 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d10b      	bne.n	8001fb0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f9c:	f043 0220 	orr.w	r2, r3, #32
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e09d      	b.n	80020ec <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff ffb9 	bl	8001f2a <LL_ADC_REG_IsConversionOngoing>
 8001fb8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff ffb3 	bl	8001f2a <LL_ADC_REG_IsConversionOngoing>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d17f      	bne.n	80020ca <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001fca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d17c      	bne.n	80020ca <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a47      	ldr	r2, [pc, #284]	; (80020f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d004      	beq.n	8001fe4 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a46      	ldr	r2, [pc, #280]	; (80020f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d101      	bne.n	8001fe8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8001fe4:	4b45      	ldr	r3, [pc, #276]	; (80020fc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8001fe6:	e000      	b.n	8001fea <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8001fe8:	4b45      	ldr	r3, [pc, #276]	; (8002100 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8001fea:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d039      	beq.n	8002068 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8001ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	431a      	orrs	r2, r3
 8002002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002004:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a3a      	ldr	r2, [pc, #232]	; (80020f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d004      	beq.n	800201a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a38      	ldr	r2, [pc, #224]	; (80020f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d10e      	bne.n	8002038 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800201a:	4836      	ldr	r0, [pc, #216]	; (80020f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800201c:	f7ff ff72 	bl	8001f04 <LL_ADC_IsEnabled>
 8002020:	4604      	mov	r4, r0
 8002022:	4835      	ldr	r0, [pc, #212]	; (80020f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002024:	f7ff ff6e 	bl	8001f04 <LL_ADC_IsEnabled>
 8002028:	4603      	mov	r3, r0
 800202a:	4323      	orrs	r3, r4
 800202c:	2b00      	cmp	r3, #0
 800202e:	bf0c      	ite	eq
 8002030:	2301      	moveq	r3, #1
 8002032:	2300      	movne	r3, #0
 8002034:	b2db      	uxtb	r3, r3
 8002036:	e008      	b.n	800204a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002038:	4832      	ldr	r0, [pc, #200]	; (8002104 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800203a:	f7ff ff63 	bl	8001f04 <LL_ADC_IsEnabled>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	bf0c      	ite	eq
 8002044:	2301      	moveq	r3, #1
 8002046:	2300      	movne	r3, #0
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d047      	beq.n	80020de <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800204e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002050:	689a      	ldr	r2, [r3, #8]
 8002052:	4b2d      	ldr	r3, [pc, #180]	; (8002108 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002054:	4013      	ands	r3, r2
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	6811      	ldr	r1, [r2, #0]
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	6892      	ldr	r2, [r2, #8]
 800205e:	430a      	orrs	r2, r1
 8002060:	431a      	orrs	r2, r3
 8002062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002064:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002066:	e03a      	b.n	80020de <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002068:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002072:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a1e      	ldr	r2, [pc, #120]	; (80020f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d004      	beq.n	8002088 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a1d      	ldr	r2, [pc, #116]	; (80020f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d10e      	bne.n	80020a6 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002088:	481a      	ldr	r0, [pc, #104]	; (80020f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800208a:	f7ff ff3b 	bl	8001f04 <LL_ADC_IsEnabled>
 800208e:	4604      	mov	r4, r0
 8002090:	4819      	ldr	r0, [pc, #100]	; (80020f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002092:	f7ff ff37 	bl	8001f04 <LL_ADC_IsEnabled>
 8002096:	4603      	mov	r3, r0
 8002098:	4323      	orrs	r3, r4
 800209a:	2b00      	cmp	r3, #0
 800209c:	bf0c      	ite	eq
 800209e:	2301      	moveq	r3, #1
 80020a0:	2300      	movne	r3, #0
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	e008      	b.n	80020b8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80020a6:	4817      	ldr	r0, [pc, #92]	; (8002104 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80020a8:	f7ff ff2c 	bl	8001f04 <LL_ADC_IsEnabled>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	bf0c      	ite	eq
 80020b2:	2301      	moveq	r3, #1
 80020b4:	2300      	movne	r3, #0
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d010      	beq.n	80020de <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80020bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	4b11      	ldr	r3, [pc, #68]	; (8002108 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80020c2:	4013      	ands	r3, r2
 80020c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80020c6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80020c8:	e009      	b.n	80020de <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ce:	f043 0220 	orr.w	r2, r3, #32
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80020dc:	e000      	b.n	80020e0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80020de:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80020e8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	377c      	adds	r7, #124	; 0x7c
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd90      	pop	{r4, r7, pc}
 80020f4:	40022000 	.word	0x40022000
 80020f8:	40022100 	.word	0x40022100
 80020fc:	40022300 	.word	0x40022300
 8002100:	58026300 	.word	0x58026300
 8002104:	58026000 	.word	0x58026000
 8002108:	fffff0e0 	.word	0xfffff0e0

0800210c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800211c:	4b0b      	ldr	r3, [pc, #44]	; (800214c <__NVIC_SetPriorityGrouping+0x40>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002122:	68ba      	ldr	r2, [r7, #8]
 8002124:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002128:	4013      	ands	r3, r2
 800212a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002134:	4b06      	ldr	r3, [pc, #24]	; (8002150 <__NVIC_SetPriorityGrouping+0x44>)
 8002136:	4313      	orrs	r3, r2
 8002138:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800213a:	4a04      	ldr	r2, [pc, #16]	; (800214c <__NVIC_SetPriorityGrouping+0x40>)
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	60d3      	str	r3, [r2, #12]
}
 8002140:	bf00      	nop
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	e000ed00 	.word	0xe000ed00
 8002150:	05fa0000 	.word	0x05fa0000

08002154 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002158:	4b04      	ldr	r3, [pc, #16]	; (800216c <__NVIC_GetPriorityGrouping+0x18>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	0a1b      	lsrs	r3, r3, #8
 800215e:	f003 0307 	and.w	r3, r3, #7
}
 8002162:	4618      	mov	r0, r3
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	e000ed00 	.word	0xe000ed00

08002170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800217a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800217e:	2b00      	cmp	r3, #0
 8002180:	db0b      	blt.n	800219a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002182:	88fb      	ldrh	r3, [r7, #6]
 8002184:	f003 021f 	and.w	r2, r3, #31
 8002188:	4907      	ldr	r1, [pc, #28]	; (80021a8 <__NVIC_EnableIRQ+0x38>)
 800218a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800218e:	095b      	lsrs	r3, r3, #5
 8002190:	2001      	movs	r0, #1
 8002192:	fa00 f202 	lsl.w	r2, r0, r2
 8002196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	e000e100 	.word	0xe000e100

080021ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	6039      	str	r1, [r7, #0]
 80021b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80021b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	db0a      	blt.n	80021d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	490c      	ldr	r1, [pc, #48]	; (80021f8 <__NVIC_SetPriority+0x4c>)
 80021c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021ca:	0112      	lsls	r2, r2, #4
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	440b      	add	r3, r1
 80021d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021d4:	e00a      	b.n	80021ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	b2da      	uxtb	r2, r3
 80021da:	4908      	ldr	r1, [pc, #32]	; (80021fc <__NVIC_SetPriority+0x50>)
 80021dc:	88fb      	ldrh	r3, [r7, #6]
 80021de:	f003 030f 	and.w	r3, r3, #15
 80021e2:	3b04      	subs	r3, #4
 80021e4:	0112      	lsls	r2, r2, #4
 80021e6:	b2d2      	uxtb	r2, r2
 80021e8:	440b      	add	r3, r1
 80021ea:	761a      	strb	r2, [r3, #24]
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	e000e100 	.word	0xe000e100
 80021fc:	e000ed00 	.word	0xe000ed00

08002200 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002200:	b480      	push	{r7}
 8002202:	b089      	sub	sp, #36	; 0x24
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	f1c3 0307 	rsb	r3, r3, #7
 800221a:	2b04      	cmp	r3, #4
 800221c:	bf28      	it	cs
 800221e:	2304      	movcs	r3, #4
 8002220:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	3304      	adds	r3, #4
 8002226:	2b06      	cmp	r3, #6
 8002228:	d902      	bls.n	8002230 <NVIC_EncodePriority+0x30>
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	3b03      	subs	r3, #3
 800222e:	e000      	b.n	8002232 <NVIC_EncodePriority+0x32>
 8002230:	2300      	movs	r3, #0
 8002232:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002234:	f04f 32ff 	mov.w	r2, #4294967295
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	43da      	mvns	r2, r3
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	401a      	ands	r2, r3
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002248:	f04f 31ff 	mov.w	r1, #4294967295
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	fa01 f303 	lsl.w	r3, r1, r3
 8002252:	43d9      	mvns	r1, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002258:	4313      	orrs	r3, r2
         );
}
 800225a:	4618      	mov	r0, r3
 800225c:	3724      	adds	r7, #36	; 0x24
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
	...

08002268 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3b01      	subs	r3, #1
 8002274:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002278:	d301      	bcc.n	800227e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800227a:	2301      	movs	r3, #1
 800227c:	e00f      	b.n	800229e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800227e:	4a0a      	ldr	r2, [pc, #40]	; (80022a8 <SysTick_Config+0x40>)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3b01      	subs	r3, #1
 8002284:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002286:	210f      	movs	r1, #15
 8002288:	f04f 30ff 	mov.w	r0, #4294967295
 800228c:	f7ff ff8e 	bl	80021ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002290:	4b05      	ldr	r3, [pc, #20]	; (80022a8 <SysTick_Config+0x40>)
 8002292:	2200      	movs	r2, #0
 8002294:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002296:	4b04      	ldr	r3, [pc, #16]	; (80022a8 <SysTick_Config+0x40>)
 8002298:	2207      	movs	r2, #7
 800229a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	e000e010 	.word	0xe000e010

080022ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f7ff ff29 	bl	800210c <__NVIC_SetPriorityGrouping>
}
 80022ba:	bf00      	nop
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b086      	sub	sp, #24
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	4603      	mov	r3, r0
 80022ca:	60b9      	str	r1, [r7, #8]
 80022cc:	607a      	str	r2, [r7, #4]
 80022ce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022d0:	f7ff ff40 	bl	8002154 <__NVIC_GetPriorityGrouping>
 80022d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	68b9      	ldr	r1, [r7, #8]
 80022da:	6978      	ldr	r0, [r7, #20]
 80022dc:	f7ff ff90 	bl	8002200 <NVIC_EncodePriority>
 80022e0:	4602      	mov	r2, r0
 80022e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022e6:	4611      	mov	r1, r2
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff ff5f 	bl	80021ac <__NVIC_SetPriority>
}
 80022ee:	bf00      	nop
 80022f0:	3718      	adds	r7, #24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	4603      	mov	r3, r0
 80022fe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002300:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff ff33 	bl	8002170 <__NVIC_EnableIRQ>
}
 800230a:	bf00      	nop
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f7ff ffa4 	bl	8002268 <SysTick_Config>
 8002320:	4603      	mov	r3, r0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
	...

0800232c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800232c:	b480      	push	{r7}
 800232e:	b089      	sub	sp, #36	; 0x24
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002336:	2300      	movs	r3, #0
 8002338:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800233a:	4b89      	ldr	r3, [pc, #548]	; (8002560 <HAL_GPIO_Init+0x234>)
 800233c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800233e:	e194      	b.n	800266a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	2101      	movs	r1, #1
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	fa01 f303 	lsl.w	r3, r1, r3
 800234c:	4013      	ands	r3, r2
 800234e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	2b00      	cmp	r3, #0
 8002354:	f000 8186 	beq.w	8002664 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f003 0303 	and.w	r3, r3, #3
 8002360:	2b01      	cmp	r3, #1
 8002362:	d005      	beq.n	8002370 <HAL_GPIO_Init+0x44>
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f003 0303 	and.w	r3, r3, #3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d130      	bne.n	80023d2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	2203      	movs	r2, #3
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43db      	mvns	r3, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4013      	ands	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	68da      	ldr	r2, [r3, #12]
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4313      	orrs	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023a6:	2201      	movs	r2, #1
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	43db      	mvns	r3, r3
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	4013      	ands	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	091b      	lsrs	r3, r3, #4
 80023bc:	f003 0201 	and.w	r2, r3, #1
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f003 0303 	and.w	r3, r3, #3
 80023da:	2b03      	cmp	r3, #3
 80023dc:	d017      	beq.n	800240e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	2203      	movs	r2, #3
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43db      	mvns	r3, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4013      	ands	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	689a      	ldr	r2, [r3, #8]
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	4313      	orrs	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d123      	bne.n	8002462 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	08da      	lsrs	r2, r3, #3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3208      	adds	r2, #8
 8002422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002426:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	220f      	movs	r2, #15
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	43db      	mvns	r3, r3
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	4013      	ands	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	691a      	ldr	r2, [r3, #16]
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4313      	orrs	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	08da      	lsrs	r2, r3, #3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3208      	adds	r2, #8
 800245c:	69b9      	ldr	r1, [r7, #24]
 800245e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	2203      	movs	r2, #3
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	43db      	mvns	r3, r3
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	4013      	ands	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f003 0203 	and.w	r2, r3, #3
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4313      	orrs	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f000 80e0 	beq.w	8002664 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024a4:	4b2f      	ldr	r3, [pc, #188]	; (8002564 <HAL_GPIO_Init+0x238>)
 80024a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80024aa:	4a2e      	ldr	r2, [pc, #184]	; (8002564 <HAL_GPIO_Init+0x238>)
 80024ac:	f043 0302 	orr.w	r3, r3, #2
 80024b0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80024b4:	4b2b      	ldr	r3, [pc, #172]	; (8002564 <HAL_GPIO_Init+0x238>)
 80024b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024c2:	4a29      	ldr	r2, [pc, #164]	; (8002568 <HAL_GPIO_Init+0x23c>)
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	089b      	lsrs	r3, r3, #2
 80024c8:	3302      	adds	r3, #2
 80024ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	f003 0303 	and.w	r3, r3, #3
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	220f      	movs	r2, #15
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	43db      	mvns	r3, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4013      	ands	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a20      	ldr	r2, [pc, #128]	; (800256c <HAL_GPIO_Init+0x240>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d052      	beq.n	8002594 <HAL_GPIO_Init+0x268>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a1f      	ldr	r2, [pc, #124]	; (8002570 <HAL_GPIO_Init+0x244>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d031      	beq.n	800255a <HAL_GPIO_Init+0x22e>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a1e      	ldr	r2, [pc, #120]	; (8002574 <HAL_GPIO_Init+0x248>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d02b      	beq.n	8002556 <HAL_GPIO_Init+0x22a>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a1d      	ldr	r2, [pc, #116]	; (8002578 <HAL_GPIO_Init+0x24c>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d025      	beq.n	8002552 <HAL_GPIO_Init+0x226>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a1c      	ldr	r2, [pc, #112]	; (800257c <HAL_GPIO_Init+0x250>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d01f      	beq.n	800254e <HAL_GPIO_Init+0x222>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a1b      	ldr	r2, [pc, #108]	; (8002580 <HAL_GPIO_Init+0x254>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d019      	beq.n	800254a <HAL_GPIO_Init+0x21e>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a1a      	ldr	r2, [pc, #104]	; (8002584 <HAL_GPIO_Init+0x258>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d013      	beq.n	8002546 <HAL_GPIO_Init+0x21a>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a19      	ldr	r2, [pc, #100]	; (8002588 <HAL_GPIO_Init+0x25c>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d00d      	beq.n	8002542 <HAL_GPIO_Init+0x216>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a18      	ldr	r2, [pc, #96]	; (800258c <HAL_GPIO_Init+0x260>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d007      	beq.n	800253e <HAL_GPIO_Init+0x212>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a17      	ldr	r2, [pc, #92]	; (8002590 <HAL_GPIO_Init+0x264>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d101      	bne.n	800253a <HAL_GPIO_Init+0x20e>
 8002536:	2309      	movs	r3, #9
 8002538:	e02d      	b.n	8002596 <HAL_GPIO_Init+0x26a>
 800253a:	230a      	movs	r3, #10
 800253c:	e02b      	b.n	8002596 <HAL_GPIO_Init+0x26a>
 800253e:	2308      	movs	r3, #8
 8002540:	e029      	b.n	8002596 <HAL_GPIO_Init+0x26a>
 8002542:	2307      	movs	r3, #7
 8002544:	e027      	b.n	8002596 <HAL_GPIO_Init+0x26a>
 8002546:	2306      	movs	r3, #6
 8002548:	e025      	b.n	8002596 <HAL_GPIO_Init+0x26a>
 800254a:	2305      	movs	r3, #5
 800254c:	e023      	b.n	8002596 <HAL_GPIO_Init+0x26a>
 800254e:	2304      	movs	r3, #4
 8002550:	e021      	b.n	8002596 <HAL_GPIO_Init+0x26a>
 8002552:	2303      	movs	r3, #3
 8002554:	e01f      	b.n	8002596 <HAL_GPIO_Init+0x26a>
 8002556:	2302      	movs	r3, #2
 8002558:	e01d      	b.n	8002596 <HAL_GPIO_Init+0x26a>
 800255a:	2301      	movs	r3, #1
 800255c:	e01b      	b.n	8002596 <HAL_GPIO_Init+0x26a>
 800255e:	bf00      	nop
 8002560:	58000080 	.word	0x58000080
 8002564:	58024400 	.word	0x58024400
 8002568:	58000400 	.word	0x58000400
 800256c:	58020000 	.word	0x58020000
 8002570:	58020400 	.word	0x58020400
 8002574:	58020800 	.word	0x58020800
 8002578:	58020c00 	.word	0x58020c00
 800257c:	58021000 	.word	0x58021000
 8002580:	58021400 	.word	0x58021400
 8002584:	58021800 	.word	0x58021800
 8002588:	58021c00 	.word	0x58021c00
 800258c:	58022000 	.word	0x58022000
 8002590:	58022400 	.word	0x58022400
 8002594:	2300      	movs	r3, #0
 8002596:	69fa      	ldr	r2, [r7, #28]
 8002598:	f002 0203 	and.w	r2, r2, #3
 800259c:	0092      	lsls	r2, r2, #2
 800259e:	4093      	lsls	r3, r2
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025a6:	4938      	ldr	r1, [pc, #224]	; (8002688 <HAL_GPIO_Init+0x35c>)
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	089b      	lsrs	r3, r3, #2
 80025ac:	3302      	adds	r3, #2
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	43db      	mvns	r3, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4013      	ands	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80025da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80025e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	43db      	mvns	r3, r3
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4013      	ands	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d003      	beq.n	8002608 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	4313      	orrs	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002608:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	43db      	mvns	r3, r3
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	4013      	ands	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d003      	beq.n	8002634 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4313      	orrs	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	43db      	mvns	r3, r3
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	4013      	ands	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d003      	beq.n	800265e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	4313      	orrs	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	3301      	adds	r3, #1
 8002668:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	fa22 f303 	lsr.w	r3, r2, r3
 8002674:	2b00      	cmp	r3, #0
 8002676:	f47f ae63 	bne.w	8002340 <HAL_GPIO_Init+0x14>
  }
}
 800267a:	bf00      	nop
 800267c:	bf00      	nop
 800267e:	3724      	adds	r7, #36	; 0x24
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	58000400 	.word	0x58000400

0800268c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800268c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800268e:	b08f      	sub	sp, #60	; 0x3c
 8002690:	af0a      	add	r7, sp, #40	; 0x28
 8002692:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e116      	b.n	80028cc <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d106      	bne.n	80026be <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f008 fca3 	bl	800b004 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2203      	movs	r2, #3
 80026c2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d102      	bne.n	80026d8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4618      	mov	r0, r3
 80026de:	f005 f8c8 	bl	8007872 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	603b      	str	r3, [r7, #0]
 80026e8:	687e      	ldr	r6, [r7, #4]
 80026ea:	466d      	mov	r5, sp
 80026ec:	f106 0410 	add.w	r4, r6, #16
 80026f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8002700:	1d33      	adds	r3, r6, #4
 8002702:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002704:	6838      	ldr	r0, [r7, #0]
 8002706:	f004 ff93 	bl	8007630 <USB_CoreInit>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d005      	beq.n	800271c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2202      	movs	r2, #2
 8002714:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e0d7      	b.n	80028cc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2100      	movs	r1, #0
 8002722:	4618      	mov	r0, r3
 8002724:	f005 f8b6 	bl	8007894 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002728:	2300      	movs	r3, #0
 800272a:	73fb      	strb	r3, [r7, #15]
 800272c:	e04a      	b.n	80027c4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800272e:	7bfa      	ldrb	r2, [r7, #15]
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	4613      	mov	r3, r2
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	4413      	add	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	440b      	add	r3, r1
 800273c:	333d      	adds	r3, #61	; 0x3d
 800273e:	2201      	movs	r2, #1
 8002740:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002742:	7bfa      	ldrb	r2, [r7, #15]
 8002744:	6879      	ldr	r1, [r7, #4]
 8002746:	4613      	mov	r3, r2
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	4413      	add	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	440b      	add	r3, r1
 8002750:	333c      	adds	r3, #60	; 0x3c
 8002752:	7bfa      	ldrb	r2, [r7, #15]
 8002754:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002756:	7bfa      	ldrb	r2, [r7, #15]
 8002758:	7bfb      	ldrb	r3, [r7, #15]
 800275a:	b298      	uxth	r0, r3
 800275c:	6879      	ldr	r1, [r7, #4]
 800275e:	4613      	mov	r3, r2
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	4413      	add	r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	440b      	add	r3, r1
 8002768:	3356      	adds	r3, #86	; 0x56
 800276a:	4602      	mov	r2, r0
 800276c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800276e:	7bfa      	ldrb	r2, [r7, #15]
 8002770:	6879      	ldr	r1, [r7, #4]
 8002772:	4613      	mov	r3, r2
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	4413      	add	r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	440b      	add	r3, r1
 800277c:	3340      	adds	r3, #64	; 0x40
 800277e:	2200      	movs	r2, #0
 8002780:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002782:	7bfa      	ldrb	r2, [r7, #15]
 8002784:	6879      	ldr	r1, [r7, #4]
 8002786:	4613      	mov	r3, r2
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	4413      	add	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	440b      	add	r3, r1
 8002790:	3344      	adds	r3, #68	; 0x44
 8002792:	2200      	movs	r2, #0
 8002794:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002796:	7bfa      	ldrb	r2, [r7, #15]
 8002798:	6879      	ldr	r1, [r7, #4]
 800279a:	4613      	mov	r3, r2
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	4413      	add	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	440b      	add	r3, r1
 80027a4:	3348      	adds	r3, #72	; 0x48
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80027aa:	7bfa      	ldrb	r2, [r7, #15]
 80027ac:	6879      	ldr	r1, [r7, #4]
 80027ae:	4613      	mov	r3, r2
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	4413      	add	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	440b      	add	r3, r1
 80027b8:	334c      	adds	r3, #76	; 0x4c
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027be:	7bfb      	ldrb	r3, [r7, #15]
 80027c0:	3301      	adds	r3, #1
 80027c2:	73fb      	strb	r3, [r7, #15]
 80027c4:	7bfa      	ldrb	r2, [r7, #15]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d3af      	bcc.n	800272e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027ce:	2300      	movs	r3, #0
 80027d0:	73fb      	strb	r3, [r7, #15]
 80027d2:	e044      	b.n	800285e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027d4:	7bfa      	ldrb	r2, [r7, #15]
 80027d6:	6879      	ldr	r1, [r7, #4]
 80027d8:	4613      	mov	r3, r2
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	4413      	add	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	440b      	add	r3, r1
 80027e2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80027e6:	2200      	movs	r2, #0
 80027e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027ea:	7bfa      	ldrb	r2, [r7, #15]
 80027ec:	6879      	ldr	r1, [r7, #4]
 80027ee:	4613      	mov	r3, r2
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	4413      	add	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	440b      	add	r3, r1
 80027f8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80027fc:	7bfa      	ldrb	r2, [r7, #15]
 80027fe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002800:	7bfa      	ldrb	r2, [r7, #15]
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	4613      	mov	r3, r2
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	4413      	add	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	440b      	add	r3, r1
 800280e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002812:	2200      	movs	r2, #0
 8002814:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002816:	7bfa      	ldrb	r2, [r7, #15]
 8002818:	6879      	ldr	r1, [r7, #4]
 800281a:	4613      	mov	r3, r2
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	4413      	add	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	440b      	add	r3, r1
 8002824:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800282c:	7bfa      	ldrb	r2, [r7, #15]
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	4613      	mov	r3, r2
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	4413      	add	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800283e:	2200      	movs	r2, #0
 8002840:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002842:	7bfa      	ldrb	r2, [r7, #15]
 8002844:	6879      	ldr	r1, [r7, #4]
 8002846:	4613      	mov	r3, r2
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	4413      	add	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	440b      	add	r3, r1
 8002850:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002858:	7bfb      	ldrb	r3, [r7, #15]
 800285a:	3301      	adds	r3, #1
 800285c:	73fb      	strb	r3, [r7, #15]
 800285e:	7bfa      	ldrb	r2, [r7, #15]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	429a      	cmp	r2, r3
 8002866:	d3b5      	bcc.n	80027d4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	603b      	str	r3, [r7, #0]
 800286e:	687e      	ldr	r6, [r7, #4]
 8002870:	466d      	mov	r5, sp
 8002872:	f106 0410 	add.w	r4, r6, #16
 8002876:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002878:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800287a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800287c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800287e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002882:	e885 0003 	stmia.w	r5, {r0, r1}
 8002886:	1d33      	adds	r3, r6, #4
 8002888:	cb0e      	ldmia	r3, {r1, r2, r3}
 800288a:	6838      	ldr	r0, [r7, #0]
 800288c:	f005 f84e 	bl	800792c <USB_DevInit>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d005      	beq.n	80028a2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2202      	movs	r2, #2
 800289a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e014      	b.n	80028cc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d102      	bne.n	80028c0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f001 f970 	bl	8003ba0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f006 f890 	bl	80089ea <USB_DevDisconnect>

  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3714      	adds	r7, #20
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028d4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d101      	bne.n	80028f0 <HAL_PCD_Start+0x1c>
 80028ec:	2302      	movs	r3, #2
 80028ee:	e022      	b.n	8002936 <HAL_PCD_Start+0x62>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002900:	2b00      	cmp	r3, #0
 8002902:	d109      	bne.n	8002918 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8002908:	2b01      	cmp	r3, #1
 800290a:	d105      	bne.n	8002918 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002910:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4618      	mov	r0, r3
 800291e:	f004 ff97 	bl	8007850 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f006 f83e 	bl	80089a8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800293e:	b590      	push	{r4, r7, lr}
 8002940:	b08d      	sub	sp, #52	; 0x34
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800294c:	6a3b      	ldr	r3, [r7, #32]
 800294e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4618      	mov	r0, r3
 8002956:	f006 f8fc 	bl	8008b52 <USB_GetMode>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	f040 84b7 	bne.w	80032d0 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4618      	mov	r0, r3
 8002968:	f006 f860 	bl	8008a2c <USB_ReadInterrupts>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	f000 84ad 	beq.w	80032ce <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	0a1b      	lsrs	r3, r3, #8
 800297e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4618      	mov	r0, r3
 800298e:	f006 f84d 	bl	8008a2c <USB_ReadInterrupts>
 8002992:	4603      	mov	r3, r0
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b02      	cmp	r3, #2
 800299a:	d107      	bne.n	80029ac <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	695a      	ldr	r2, [r3, #20]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f002 0202 	and.w	r2, r2, #2
 80029aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f006 f83b 	bl	8008a2c <USB_ReadInterrupts>
 80029b6:	4603      	mov	r3, r0
 80029b8:	f003 0310 	and.w	r3, r3, #16
 80029bc:	2b10      	cmp	r3, #16
 80029be:	d161      	bne.n	8002a84 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	699a      	ldr	r2, [r3, #24]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 0210 	bic.w	r2, r2, #16
 80029ce:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80029d0:	6a3b      	ldr	r3, [r7, #32]
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	f003 020f 	and.w	r2, r3, #15
 80029dc:	4613      	mov	r3, r2
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	4413      	add	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	4413      	add	r3, r2
 80029ec:	3304      	adds	r3, #4
 80029ee:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	0c5b      	lsrs	r3, r3, #17
 80029f4:	f003 030f 	and.w	r3, r3, #15
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d124      	bne.n	8002a46 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002a02:	4013      	ands	r3, r2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d035      	beq.n	8002a74 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	091b      	lsrs	r3, r3, #4
 8002a10:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002a12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	461a      	mov	r2, r3
 8002a1a:	6a38      	ldr	r0, [r7, #32]
 8002a1c:	f005 fe72 	bl	8008704 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	68da      	ldr	r2, [r3, #12]
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	091b      	lsrs	r3, r3, #4
 8002a28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a2c:	441a      	add	r2, r3
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	695a      	ldr	r2, [r3, #20]
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	091b      	lsrs	r3, r3, #4
 8002a3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a3e:	441a      	add	r2, r3
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	615a      	str	r2, [r3, #20]
 8002a44:	e016      	b.n	8002a74 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	0c5b      	lsrs	r3, r3, #17
 8002a4a:	f003 030f 	and.w	r3, r3, #15
 8002a4e:	2b06      	cmp	r3, #6
 8002a50:	d110      	bne.n	8002a74 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a58:	2208      	movs	r2, #8
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	6a38      	ldr	r0, [r7, #32]
 8002a5e:	f005 fe51 	bl	8008704 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	695a      	ldr	r2, [r3, #20]
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	091b      	lsrs	r3, r3, #4
 8002a6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a6e:	441a      	add	r2, r3
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	699a      	ldr	r2, [r3, #24]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f042 0210 	orr.w	r2, r2, #16
 8002a82:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f005 ffcf 	bl	8008a2c <USB_ReadInterrupts>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a94:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a98:	f040 80a7 	bne.w	8002bea <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f005 ffd4 	bl	8008a52 <USB_ReadDevAllOutEpInterrupt>
 8002aaa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002aac:	e099      	b.n	8002be2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 808e 	beq.w	8002bd6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ac0:	b2d2      	uxtb	r2, r2
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f005 fff8 	bl	8008aba <USB_ReadDevOutEPInterrupt>
 8002aca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00c      	beq.n	8002af0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	015a      	lsls	r2, r3, #5
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	4413      	add	r3, r2
 8002ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002ae8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 fed2 	bl	8003894 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	f003 0308 	and.w	r3, r3, #8
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00c      	beq.n	8002b14 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afc:	015a      	lsls	r2, r3, #5
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	4413      	add	r3, r2
 8002b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b06:	461a      	mov	r2, r3
 8002b08:	2308      	movs	r3, #8
 8002b0a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002b0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 ffa8 	bl	8003a64 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	f003 0310 	and.w	r3, r3, #16
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d008      	beq.n	8002b30 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b20:	015a      	lsls	r2, r3, #5
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	4413      	add	r3, r2
 8002b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	2310      	movs	r3, #16
 8002b2e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d030      	beq.n	8002b9c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002b3a:	6a3b      	ldr	r3, [r7, #32]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b42:	2b80      	cmp	r3, #128	; 0x80
 8002b44:	d109      	bne.n	8002b5a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	69fa      	ldr	r2, [r7, #28]
 8002b50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b58:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	4413      	add	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	3304      	adds	r3, #4
 8002b6e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	78db      	ldrb	r3, [r3, #3]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d108      	bne.n	8002b8a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	4619      	mov	r1, r3
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f008 fb63 	bl	800b250 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	015a      	lsls	r2, r3, #5
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	4413      	add	r3, r2
 8002b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b96:	461a      	mov	r2, r3
 8002b98:	2302      	movs	r3, #2
 8002b9a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	f003 0320 	and.w	r3, r3, #32
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d008      	beq.n	8002bb8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba8:	015a      	lsls	r2, r3, #5
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	4413      	add	r3, r2
 8002bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	2320      	movs	r3, #32
 8002bb6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d009      	beq.n	8002bd6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	015a      	lsls	r2, r3, #5
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	4413      	add	r3, r2
 8002bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bce:	461a      	mov	r2, r3
 8002bd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bd4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd8:	3301      	adds	r3, #1
 8002bda:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bde:	085b      	lsrs	r3, r3, #1
 8002be0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f47f af62 	bne.w	8002aae <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f005 ff1c 	bl	8008a2c <USB_ReadInterrupts>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bfa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bfe:	f040 80db 	bne.w	8002db8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f005 ff3d 	bl	8008a86 <USB_ReadDevAllInEpInterrupt>
 8002c0c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002c12:	e0cd      	b.n	8002db0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f000 80c2 	beq.w	8002da4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c26:	b2d2      	uxtb	r2, r2
 8002c28:	4611      	mov	r1, r2
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f005 ff63 	bl	8008af6 <USB_ReadDevInEPInterrupt>
 8002c30:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d057      	beq.n	8002cec <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3e:	f003 030f 	and.w	r3, r3, #15
 8002c42:	2201      	movs	r2, #1
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	43db      	mvns	r3, r3
 8002c56:	69f9      	ldr	r1, [r7, #28]
 8002c58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c62:	015a      	lsls	r2, r3, #5
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	4413      	add	r3, r2
 8002c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	2301      	movs	r3, #1
 8002c70:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d132      	bne.n	8002ce0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002c7a:	6879      	ldr	r1, [r7, #4]
 8002c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c7e:	4613      	mov	r3, r2
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	4413      	add	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	440b      	add	r3, r1
 8002c88:	3348      	adds	r3, #72	; 0x48
 8002c8a:	6819      	ldr	r1, [r3, #0]
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c90:	4613      	mov	r3, r2
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	4413      	add	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4403      	add	r3, r0
 8002c9a:	3344      	adds	r3, #68	; 0x44
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4419      	add	r1, r3
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	4413      	add	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4403      	add	r3, r0
 8002cae:	3348      	adds	r3, #72	; 0x48
 8002cb0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d113      	bne.n	8002ce0 <HAL_PCD_IRQHandler+0x3a2>
 8002cb8:	6879      	ldr	r1, [r7, #4]
 8002cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	4413      	add	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	440b      	add	r3, r1
 8002cc6:	334c      	adds	r3, #76	; 0x4c
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d108      	bne.n	8002ce0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6818      	ldr	r0, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002cd8:	461a      	mov	r2, r3
 8002cda:	2101      	movs	r1, #1
 8002cdc:	f005 ff6c 	bl	8008bb8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f008 fa2d 	bl	800b146 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	f003 0308 	and.w	r3, r3, #8
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d008      	beq.n	8002d08 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf8:	015a      	lsls	r2, r3, #5
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d02:	461a      	mov	r2, r3
 8002d04:	2308      	movs	r3, #8
 8002d06:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	f003 0310 	and.w	r3, r3, #16
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d008      	beq.n	8002d24 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d14:	015a      	lsls	r2, r3, #5
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	4413      	add	r3, r2
 8002d1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d1e:	461a      	mov	r2, r3
 8002d20:	2310      	movs	r3, #16
 8002d22:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d008      	beq.n	8002d40 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	015a      	lsls	r2, r3, #5
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	4413      	add	r3, r2
 8002d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	2340      	movs	r3, #64	; 0x40
 8002d3e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d023      	beq.n	8002d92 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002d4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d4c:	6a38      	ldr	r0, [r7, #32]
 8002d4e:	f004 ff4b 	bl	8007be8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d54:	4613      	mov	r3, r2
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	4413      	add	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	3338      	adds	r3, #56	; 0x38
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	4413      	add	r3, r2
 8002d62:	3304      	adds	r3, #4
 8002d64:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	78db      	ldrb	r3, [r3, #3]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d108      	bne.n	8002d80 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	2200      	movs	r2, #0
 8002d72:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	4619      	mov	r1, r3
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f008 fa7a 	bl	800b274 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d82:	015a      	lsls	r2, r3, #5
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	4413      	add	r3, r2
 8002d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	2302      	movs	r3, #2
 8002d90:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d003      	beq.n	8002da4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002d9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 fcea 	bl	8003778 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da6:	3301      	adds	r3, #1
 8002da8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dac:	085b      	lsrs	r3, r3, #1
 8002dae:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f47f af2e 	bne.w	8002c14 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f005 fe35 	bl	8008a2c <USB_ReadInterrupts>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002dc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002dcc:	d122      	bne.n	8002e14 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	69fa      	ldr	r2, [r7, #28]
 8002dd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ddc:	f023 0301 	bic.w	r3, r3, #1
 8002de0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d108      	bne.n	8002dfe <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002df4:	2100      	movs	r1, #0
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 fef6 	bl	8003be8 <HAL_PCDEx_LPM_Callback>
 8002dfc:	e002      	b.n	8002e04 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f008 fa18 	bl	800b234 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	695a      	ldr	r2, [r3, #20]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002e12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f005 fe07 	bl	8008a2c <USB_ReadInterrupts>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e28:	d112      	bne.n	8002e50 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d102      	bne.n	8002e40 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f008 f9d4 	bl	800b1e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	695a      	ldr	r2, [r3, #20]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002e4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f005 fde9 	bl	8008a2c <USB_ReadInterrupts>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e64:	d121      	bne.n	8002eaa <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	695a      	ldr	r2, [r3, #20]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002e74:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d111      	bne.n	8002ea4 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e8e:	089b      	lsrs	r3, r3, #2
 8002e90:	f003 020f 	and.w	r2, r3, #15
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 fea3 	bl	8003be8 <HAL_PCDEx_LPM_Callback>
 8002ea2:	e002      	b.n	8002eaa <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f008 f99f 	bl	800b1e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f005 fdbc 	bl	8008a2c <USB_ReadInterrupts>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002eba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ebe:	f040 80b7 	bne.w	8003030 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	69fa      	ldr	r2, [r7, #28]
 8002ecc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ed0:	f023 0301 	bic.w	r3, r3, #1
 8002ed4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2110      	movs	r1, #16
 8002edc:	4618      	mov	r0, r3
 8002ede:	f004 fe83 	bl	8007be8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ee6:	e046      	b.n	8002f76 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eea:	015a      	lsls	r2, r3, #5
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	4413      	add	r3, r2
 8002ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002efa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002efe:	015a      	lsls	r2, r3, #5
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	4413      	add	r3, r2
 8002f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f0c:	0151      	lsls	r1, r2, #5
 8002f0e:	69fa      	ldr	r2, [r7, #28]
 8002f10:	440a      	add	r2, r1
 8002f12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002f16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002f1a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f1e:	015a      	lsls	r2, r3, #5
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	4413      	add	r3, r2
 8002f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f28:	461a      	mov	r2, r3
 8002f2a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f2e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f32:	015a      	lsls	r2, r3, #5
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	4413      	add	r3, r2
 8002f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f40:	0151      	lsls	r1, r2, #5
 8002f42:	69fa      	ldr	r2, [r7, #28]
 8002f44:	440a      	add	r2, r1
 8002f46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002f4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002f4e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f52:	015a      	lsls	r2, r3, #5
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	4413      	add	r3, r2
 8002f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f60:	0151      	lsls	r1, r2, #5
 8002f62:	69fa      	ldr	r2, [r7, #28]
 8002f64:	440a      	add	r2, r1
 8002f66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002f6a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002f6e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f72:	3301      	adds	r3, #1
 8002f74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d3b3      	bcc.n	8002ee8 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f86:	69db      	ldr	r3, [r3, #28]
 8002f88:	69fa      	ldr	r2, [r7, #28]
 8002f8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f8e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002f92:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d016      	beq.n	8002fca <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fa6:	69fa      	ldr	r2, [r7, #28]
 8002fa8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fac:	f043 030b 	orr.w	r3, r3, #11
 8002fb0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fbc:	69fa      	ldr	r2, [r7, #28]
 8002fbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fc2:	f043 030b 	orr.w	r3, r3, #11
 8002fc6:	6453      	str	r3, [r2, #68]	; 0x44
 8002fc8:	e015      	b.n	8002ff6 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fd0:	695a      	ldr	r2, [r3, #20]
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fd8:	4619      	mov	r1, r3
 8002fda:	f242 032b 	movw	r3, #8235	; 0x202b
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	69fa      	ldr	r2, [r7, #28]
 8002fec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ff0:	f043 030b 	orr.w	r3, r3, #11
 8002ff4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	69fa      	ldr	r2, [r7, #28]
 8003000:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003004:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003008:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6818      	ldr	r0, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800301a:	461a      	mov	r2, r3
 800301c:	f005 fdcc 	bl	8008bb8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	695a      	ldr	r2, [r3, #20]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800302e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4618      	mov	r0, r3
 8003036:	f005 fcf9 	bl	8008a2c <USB_ReadInterrupts>
 800303a:	4603      	mov	r3, r0
 800303c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003040:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003044:	d124      	bne.n	8003090 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4618      	mov	r0, r3
 800304c:	f005 fd90 	bl	8008b70 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4618      	mov	r0, r3
 8003056:	f004 fe44 	bl	8007ce2 <USB_GetDevSpeed>
 800305a:	4603      	mov	r3, r0
 800305c:	461a      	mov	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681c      	ldr	r4, [r3, #0]
 8003066:	f001 fd9f 	bl	8004ba8 <HAL_RCC_GetHCLKFreq>
 800306a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003070:	b2db      	uxtb	r3, r3
 8003072:	461a      	mov	r2, r3
 8003074:	4620      	mov	r0, r4
 8003076:	f004 fb49 	bl	800770c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f008 f88b 	bl	800b196 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	695a      	ldr	r2, [r3, #20]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800308e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4618      	mov	r0, r3
 8003096:	f005 fcc9 	bl	8008a2c <USB_ReadInterrupts>
 800309a:	4603      	mov	r3, r0
 800309c:	f003 0308 	and.w	r3, r3, #8
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d10a      	bne.n	80030ba <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f008 f868 	bl	800b17a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	695a      	ldr	r2, [r3, #20]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f002 0208 	and.w	r2, r2, #8
 80030b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f005 fcb4 	bl	8008a2c <USB_ReadInterrupts>
 80030c4:	4603      	mov	r3, r0
 80030c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ca:	2b80      	cmp	r3, #128	; 0x80
 80030cc:	d122      	bne.n	8003114 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80030ce:	6a3b      	ldr	r3, [r7, #32]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030d6:	6a3b      	ldr	r3, [r7, #32]
 80030d8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030da:	2301      	movs	r3, #1
 80030dc:	627b      	str	r3, [r7, #36]	; 0x24
 80030de:	e014      	b.n	800310a <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030e4:	4613      	mov	r3, r2
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	4413      	add	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	440b      	add	r3, r1
 80030ee:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d105      	bne.n	8003104 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80030f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	4619      	mov	r1, r3
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 fb09 	bl	8003716 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003106:	3301      	adds	r3, #1
 8003108:	627b      	str	r3, [r7, #36]	; 0x24
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003110:	429a      	cmp	r2, r3
 8003112:	d3e5      	bcc.n	80030e0 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4618      	mov	r0, r3
 800311a:	f005 fc87 	bl	8008a2c <USB_ReadInterrupts>
 800311e:	4603      	mov	r3, r0
 8003120:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003124:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003128:	d13b      	bne.n	80031a2 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800312a:	2301      	movs	r3, #1
 800312c:	627b      	str	r3, [r7, #36]	; 0x24
 800312e:	e02b      	b.n	8003188 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003132:	015a      	lsls	r2, r3, #5
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	4413      	add	r3, r2
 8003138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003140:	6879      	ldr	r1, [r7, #4]
 8003142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003144:	4613      	mov	r3, r2
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	4413      	add	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	440b      	add	r3, r1
 800314e:	3340      	adds	r3, #64	; 0x40
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d115      	bne.n	8003182 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003156:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003158:	2b00      	cmp	r3, #0
 800315a:	da12      	bge.n	8003182 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800315c:	6879      	ldr	r1, [r7, #4]
 800315e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003160:	4613      	mov	r3, r2
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	4413      	add	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	440b      	add	r3, r1
 800316a:	333f      	adds	r3, #63	; 0x3f
 800316c:	2201      	movs	r2, #1
 800316e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003172:	b2db      	uxtb	r3, r3
 8003174:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003178:	b2db      	uxtb	r3, r3
 800317a:	4619      	mov	r1, r3
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 faca 	bl	8003716 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003184:	3301      	adds	r3, #1
 8003186:	627b      	str	r3, [r7, #36]	; 0x24
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800318e:	429a      	cmp	r2, r3
 8003190:	d3ce      	bcc.n	8003130 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	695a      	ldr	r2, [r3, #20]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80031a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f005 fc40 	bl	8008a2c <USB_ReadInterrupts>
 80031ac:	4603      	mov	r3, r0
 80031ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031b6:	d155      	bne.n	8003264 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031b8:	2301      	movs	r3, #1
 80031ba:	627b      	str	r3, [r7, #36]	; 0x24
 80031bc:	e045      	b.n	800324a <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80031be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c0:	015a      	lsls	r2, r3, #5
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	4413      	add	r3, r2
 80031c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80031ce:	6879      	ldr	r1, [r7, #4]
 80031d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d2:	4613      	mov	r3, r2
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	4413      	add	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	440b      	add	r3, r1
 80031dc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d12e      	bne.n	8003244 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80031e6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	da2b      	bge.n	8003244 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80031f8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d121      	bne.n	8003244 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003200:	6879      	ldr	r1, [r7, #4]
 8003202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003204:	4613      	mov	r3, r2
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	4413      	add	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	440b      	add	r3, r1
 800320e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003212:	2201      	movs	r2, #1
 8003214:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003216:	6a3b      	ldr	r3, [r7, #32]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800321e:	6a3b      	ldr	r3, [r7, #32]
 8003220:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003222:	6a3b      	ldr	r3, [r7, #32]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800322a:	2b00      	cmp	r3, #0
 800322c:	d10a      	bne.n	8003244 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	69fa      	ldr	r2, [r7, #28]
 8003238:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800323c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003240:	6053      	str	r3, [r2, #4]
            break;
 8003242:	e007      	b.n	8003254 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003246:	3301      	adds	r3, #1
 8003248:	627b      	str	r3, [r7, #36]	; 0x24
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003250:	429a      	cmp	r2, r3
 8003252:	d3b4      	bcc.n	80031be <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	695a      	ldr	r2, [r3, #20]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003262:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4618      	mov	r0, r3
 800326a:	f005 fbdf 	bl	8008a2c <USB_ReadInterrupts>
 800326e:	4603      	mov	r3, r0
 8003270:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003278:	d10a      	bne.n	8003290 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f008 f80c 	bl	800b298 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	695a      	ldr	r2, [r3, #20]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800328e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4618      	mov	r0, r3
 8003296:	f005 fbc9 	bl	8008a2c <USB_ReadInterrupts>
 800329a:	4603      	mov	r3, r0
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b04      	cmp	r3, #4
 80032a2:	d115      	bne.n	80032d0 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	f003 0304 	and.w	r3, r3, #4
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d002      	beq.n	80032bc <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f007 fffc 	bl	800b2b4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6859      	ldr	r1, [r3, #4]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	605a      	str	r2, [r3, #4]
 80032cc:	e000      	b.n	80032d0 <HAL_PCD_IRQHandler+0x992>
      return;
 80032ce:	bf00      	nop
    }
  }
}
 80032d0:	3734      	adds	r7, #52	; 0x34
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd90      	pop	{r4, r7, pc}

080032d6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b082      	sub	sp, #8
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
 80032de:	460b      	mov	r3, r1
 80032e0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d101      	bne.n	80032f0 <HAL_PCD_SetAddress+0x1a>
 80032ec:	2302      	movs	r3, #2
 80032ee:	e013      	b.n	8003318 <HAL_PCD_SetAddress+0x42>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	78fa      	ldrb	r2, [r7, #3]
 80032fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	78fa      	ldrb	r2, [r7, #3]
 8003306:	4611      	mov	r1, r2
 8003308:	4618      	mov	r0, r3
 800330a:	f005 fb27 	bl	800895c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3708      	adds	r7, #8
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	4608      	mov	r0, r1
 800332a:	4611      	mov	r1, r2
 800332c:	461a      	mov	r2, r3
 800332e:	4603      	mov	r3, r0
 8003330:	70fb      	strb	r3, [r7, #3]
 8003332:	460b      	mov	r3, r1
 8003334:	803b      	strh	r3, [r7, #0]
 8003336:	4613      	mov	r3, r2
 8003338:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800333a:	2300      	movs	r3, #0
 800333c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800333e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003342:	2b00      	cmp	r3, #0
 8003344:	da0f      	bge.n	8003366 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003346:	78fb      	ldrb	r3, [r7, #3]
 8003348:	f003 020f 	and.w	r2, r3, #15
 800334c:	4613      	mov	r3, r2
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	4413      	add	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	3338      	adds	r3, #56	; 0x38
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	4413      	add	r3, r2
 800335a:	3304      	adds	r3, #4
 800335c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2201      	movs	r2, #1
 8003362:	705a      	strb	r2, [r3, #1]
 8003364:	e00f      	b.n	8003386 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003366:	78fb      	ldrb	r3, [r7, #3]
 8003368:	f003 020f 	and.w	r2, r3, #15
 800336c:	4613      	mov	r3, r2
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	4413      	add	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	4413      	add	r3, r2
 800337c:	3304      	adds	r3, #4
 800337e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003386:	78fb      	ldrb	r3, [r7, #3]
 8003388:	f003 030f 	and.w	r3, r3, #15
 800338c:	b2da      	uxtb	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003392:	883a      	ldrh	r2, [r7, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	78ba      	ldrb	r2, [r7, #2]
 800339c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	785b      	ldrb	r3, [r3, #1]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d004      	beq.n	80033b0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80033b0:	78bb      	ldrb	r3, [r7, #2]
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d102      	bne.n	80033bc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d101      	bne.n	80033ca <HAL_PCD_EP_Open+0xaa>
 80033c6:	2302      	movs	r3, #2
 80033c8:	e00e      	b.n	80033e8 <HAL_PCD_EP_Open+0xc8>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68f9      	ldr	r1, [r7, #12]
 80033d8:	4618      	mov	r0, r3
 80033da:	f004 fca7 	bl	8007d2c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80033e6:	7afb      	ldrb	r3, [r7, #11]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3710      	adds	r7, #16
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	460b      	mov	r3, r1
 80033fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80033fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003400:	2b00      	cmp	r3, #0
 8003402:	da0f      	bge.n	8003424 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003404:	78fb      	ldrb	r3, [r7, #3]
 8003406:	f003 020f 	and.w	r2, r3, #15
 800340a:	4613      	mov	r3, r2
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	4413      	add	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	3338      	adds	r3, #56	; 0x38
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	4413      	add	r3, r2
 8003418:	3304      	adds	r3, #4
 800341a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2201      	movs	r2, #1
 8003420:	705a      	strb	r2, [r3, #1]
 8003422:	e00f      	b.n	8003444 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003424:	78fb      	ldrb	r3, [r7, #3]
 8003426:	f003 020f 	and.w	r2, r3, #15
 800342a:	4613      	mov	r3, r2
 800342c:	00db      	lsls	r3, r3, #3
 800342e:	4413      	add	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	4413      	add	r3, r2
 800343a:	3304      	adds	r3, #4
 800343c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003444:	78fb      	ldrb	r3, [r7, #3]
 8003446:	f003 030f 	and.w	r3, r3, #15
 800344a:	b2da      	uxtb	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003456:	2b01      	cmp	r3, #1
 8003458:	d101      	bne.n	800345e <HAL_PCD_EP_Close+0x6e>
 800345a:	2302      	movs	r3, #2
 800345c:	e00e      	b.n	800347c <HAL_PCD_EP_Close+0x8c>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68f9      	ldr	r1, [r7, #12]
 800346c:	4618      	mov	r0, r3
 800346e:	f004 fce5 	bl	8007e3c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	3710      	adds	r7, #16
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	607a      	str	r2, [r7, #4]
 800348e:	603b      	str	r3, [r7, #0]
 8003490:	460b      	mov	r3, r1
 8003492:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003494:	7afb      	ldrb	r3, [r7, #11]
 8003496:	f003 020f 	and.w	r2, r3, #15
 800349a:	4613      	mov	r3, r2
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	4413      	add	r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	4413      	add	r3, r2
 80034aa:	3304      	adds	r3, #4
 80034ac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	2200      	movs	r2, #0
 80034be:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	2200      	movs	r2, #0
 80034c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034c6:	7afb      	ldrb	r3, [r7, #11]
 80034c8:	f003 030f 	and.w	r3, r3, #15
 80034cc:	b2da      	uxtb	r2, r3
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d102      	bne.n	80034e0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6818      	ldr	r0, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	461a      	mov	r2, r3
 80034ec:	6979      	ldr	r1, [r7, #20]
 80034ee:	f004 fd81 	bl	8007ff4 <USB_EPStartXfer>

  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3718      	adds	r7, #24
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	460b      	mov	r3, r1
 8003506:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003508:	78fb      	ldrb	r3, [r7, #3]
 800350a:	f003 020f 	and.w	r2, r3, #15
 800350e:	6879      	ldr	r1, [r7, #4]
 8003510:	4613      	mov	r3, r2
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	4413      	add	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	440b      	add	r3, r1
 800351a:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800351e:	681b      	ldr	r3, [r3, #0]
}
 8003520:	4618      	mov	r0, r3
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	607a      	str	r2, [r7, #4]
 8003536:	603b      	str	r3, [r7, #0]
 8003538:	460b      	mov	r3, r1
 800353a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800353c:	7afb      	ldrb	r3, [r7, #11]
 800353e:	f003 020f 	and.w	r2, r3, #15
 8003542:	4613      	mov	r3, r2
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	4413      	add	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	3338      	adds	r3, #56	; 0x38
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	4413      	add	r3, r2
 8003550:	3304      	adds	r3, #4
 8003552:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	2200      	movs	r2, #0
 8003564:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	2201      	movs	r2, #1
 800356a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800356c:	7afb      	ldrb	r3, [r7, #11]
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	b2da      	uxtb	r2, r3
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d102      	bne.n	8003586 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6818      	ldr	r0, [r3, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	b2db      	uxtb	r3, r3
 8003590:	461a      	mov	r2, r3
 8003592:	6979      	ldr	r1, [r7, #20]
 8003594:	f004 fd2e 	bl	8007ff4 <USB_EPStartXfer>

  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3718      	adds	r7, #24
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b084      	sub	sp, #16
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
 80035aa:	460b      	mov	r3, r1
 80035ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80035ae:	78fb      	ldrb	r3, [r7, #3]
 80035b0:	f003 020f 	and.w	r2, r3, #15
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d901      	bls.n	80035c0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e050      	b.n	8003662 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	da0f      	bge.n	80035e8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035c8:	78fb      	ldrb	r3, [r7, #3]
 80035ca:	f003 020f 	and.w	r2, r3, #15
 80035ce:	4613      	mov	r3, r2
 80035d0:	00db      	lsls	r3, r3, #3
 80035d2:	4413      	add	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	3338      	adds	r3, #56	; 0x38
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	4413      	add	r3, r2
 80035dc:	3304      	adds	r3, #4
 80035de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2201      	movs	r2, #1
 80035e4:	705a      	strb	r2, [r3, #1]
 80035e6:	e00d      	b.n	8003604 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80035e8:	78fa      	ldrb	r2, [r7, #3]
 80035ea:	4613      	mov	r3, r2
 80035ec:	00db      	lsls	r3, r3, #3
 80035ee:	4413      	add	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	4413      	add	r3, r2
 80035fa:	3304      	adds	r3, #4
 80035fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2201      	movs	r2, #1
 8003608:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800360a:	78fb      	ldrb	r3, [r7, #3]
 800360c:	f003 030f 	and.w	r3, r3, #15
 8003610:	b2da      	uxtb	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800361c:	2b01      	cmp	r3, #1
 800361e:	d101      	bne.n	8003624 <HAL_PCD_EP_SetStall+0x82>
 8003620:	2302      	movs	r3, #2
 8003622:	e01e      	b.n	8003662 <HAL_PCD_EP_SetStall+0xc0>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68f9      	ldr	r1, [r7, #12]
 8003632:	4618      	mov	r0, r3
 8003634:	f005 f8be 	bl	80087b4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003638:	78fb      	ldrb	r3, [r7, #3]
 800363a:	f003 030f 	and.w	r3, r3, #15
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10a      	bne.n	8003658 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6818      	ldr	r0, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	b2d9      	uxtb	r1, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003652:	461a      	mov	r2, r3
 8003654:	f005 fab0 	bl	8008bb8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b084      	sub	sp, #16
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
 8003672:	460b      	mov	r3, r1
 8003674:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003676:	78fb      	ldrb	r3, [r7, #3]
 8003678:	f003 020f 	and.w	r2, r3, #15
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	429a      	cmp	r2, r3
 8003682:	d901      	bls.n	8003688 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e042      	b.n	800370e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003688:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800368c:	2b00      	cmp	r3, #0
 800368e:	da0f      	bge.n	80036b0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003690:	78fb      	ldrb	r3, [r7, #3]
 8003692:	f003 020f 	and.w	r2, r3, #15
 8003696:	4613      	mov	r3, r2
 8003698:	00db      	lsls	r3, r3, #3
 800369a:	4413      	add	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	3338      	adds	r3, #56	; 0x38
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	4413      	add	r3, r2
 80036a4:	3304      	adds	r3, #4
 80036a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2201      	movs	r2, #1
 80036ac:	705a      	strb	r2, [r3, #1]
 80036ae:	e00f      	b.n	80036d0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036b0:	78fb      	ldrb	r3, [r7, #3]
 80036b2:	f003 020f 	and.w	r2, r3, #15
 80036b6:	4613      	mov	r3, r2
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	4413      	add	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	4413      	add	r3, r2
 80036c6:	3304      	adds	r3, #4
 80036c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036d6:	78fb      	ldrb	r3, [r7, #3]
 80036d8:	f003 030f 	and.w	r3, r3, #15
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d101      	bne.n	80036f0 <HAL_PCD_EP_ClrStall+0x86>
 80036ec:	2302      	movs	r3, #2
 80036ee:	e00e      	b.n	800370e <HAL_PCD_EP_ClrStall+0xa4>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68f9      	ldr	r1, [r7, #12]
 80036fe:	4618      	mov	r0, r3
 8003700:	f005 f8c6 	bl	8008890 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b084      	sub	sp, #16
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
 800371e:	460b      	mov	r3, r1
 8003720:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003722:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003726:	2b00      	cmp	r3, #0
 8003728:	da0c      	bge.n	8003744 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800372a:	78fb      	ldrb	r3, [r7, #3]
 800372c:	f003 020f 	and.w	r2, r3, #15
 8003730:	4613      	mov	r3, r2
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	4413      	add	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	3338      	adds	r3, #56	; 0x38
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	4413      	add	r3, r2
 800373e:	3304      	adds	r3, #4
 8003740:	60fb      	str	r3, [r7, #12]
 8003742:	e00c      	b.n	800375e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003744:	78fb      	ldrb	r3, [r7, #3]
 8003746:	f003 020f 	and.w	r2, r3, #15
 800374a:	4613      	mov	r3, r2
 800374c:	00db      	lsls	r3, r3, #3
 800374e:	4413      	add	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	4413      	add	r3, r2
 800375a:	3304      	adds	r3, #4
 800375c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68f9      	ldr	r1, [r7, #12]
 8003764:	4618      	mov	r0, r3
 8003766:	f004 fee5 	bl	8008534 <USB_EPStopXfer>
 800376a:	4603      	mov	r3, r0
 800376c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800376e:	7afb      	ldrb	r3, [r7, #11]
}
 8003770:	4618      	mov	r0, r3
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b08a      	sub	sp, #40	; 0x28
 800377c:	af02      	add	r7, sp, #8
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	4613      	mov	r3, r2
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	4413      	add	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	3338      	adds	r3, #56	; 0x38
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	4413      	add	r3, r2
 800379c:	3304      	adds	r3, #4
 800379e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	695a      	ldr	r2, [r3, #20]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d901      	bls.n	80037b0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e06c      	b.n	800388a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	691a      	ldr	r2, [r3, #16]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	695b      	ldr	r3, [r3, #20]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	69fa      	ldr	r2, [r7, #28]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d902      	bls.n	80037cc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	3303      	adds	r3, #3
 80037d0:	089b      	lsrs	r3, r3, #2
 80037d2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037d4:	e02b      	b.n	800382e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	691a      	ldr	r2, [r3, #16]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	69fa      	ldr	r2, [r7, #28]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d902      	bls.n	80037f2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	3303      	adds	r3, #3
 80037f6:	089b      	lsrs	r3, r3, #2
 80037f8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	68d9      	ldr	r1, [r3, #12]
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	b2da      	uxtb	r2, r3
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800380a:	b2db      	uxtb	r3, r3
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	4603      	mov	r3, r0
 8003810:	6978      	ldr	r0, [r7, #20]
 8003812:	f004 ff39 	bl	8008688 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	68da      	ldr	r2, [r3, #12]
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	441a      	add	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	695a      	ldr	r2, [r3, #20]
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	441a      	add	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	015a      	lsls	r2, r3, #5
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	4413      	add	r3, r2
 8003836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	429a      	cmp	r2, r3
 8003842:	d809      	bhi.n	8003858 <PCD_WriteEmptyTxFifo+0xe0>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	695a      	ldr	r2, [r3, #20]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800384c:	429a      	cmp	r2, r3
 800384e:	d203      	bcs.n	8003858 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1be      	bne.n	80037d6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	691a      	ldr	r2, [r3, #16]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	695b      	ldr	r3, [r3, #20]
 8003860:	429a      	cmp	r2, r3
 8003862:	d811      	bhi.n	8003888 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	f003 030f 	and.w	r3, r3, #15
 800386a:	2201      	movs	r2, #1
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003878:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	43db      	mvns	r3, r3
 800387e:	6939      	ldr	r1, [r7, #16]
 8003880:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003884:	4013      	ands	r3, r2
 8003886:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3720      	adds	r7, #32
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
	...

08003894 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b088      	sub	sp, #32
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	333c      	adds	r3, #60	; 0x3c
 80038ac:	3304      	adds	r3, #4
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	015a      	lsls	r2, r3, #5
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	4413      	add	r3, r2
 80038ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d17b      	bne.n	80039c2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	f003 0308 	and.w	r3, r3, #8
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d015      	beq.n	8003900 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	4a61      	ldr	r2, [pc, #388]	; (8003a5c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	f240 80b9 	bls.w	8003a50 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f000 80b3 	beq.w	8003a50 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	015a      	lsls	r2, r3, #5
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	4413      	add	r3, r2
 80038f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038f6:	461a      	mov	r2, r3
 80038f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038fc:	6093      	str	r3, [r2, #8]
 80038fe:	e0a7      	b.n	8003a50 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	f003 0320 	and.w	r3, r3, #32
 8003906:	2b00      	cmp	r3, #0
 8003908:	d009      	beq.n	800391e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	015a      	lsls	r2, r3, #5
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	4413      	add	r3, r2
 8003912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003916:	461a      	mov	r2, r3
 8003918:	2320      	movs	r3, #32
 800391a:	6093      	str	r3, [r2, #8]
 800391c:	e098      	b.n	8003a50 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003924:	2b00      	cmp	r3, #0
 8003926:	f040 8093 	bne.w	8003a50 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	4a4b      	ldr	r2, [pc, #300]	; (8003a5c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d90f      	bls.n	8003952 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00a      	beq.n	8003952 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	015a      	lsls	r2, r3, #5
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	4413      	add	r3, r2
 8003944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003948:	461a      	mov	r2, r3
 800394a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800394e:	6093      	str	r3, [r2, #8]
 8003950:	e07e      	b.n	8003a50 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	4613      	mov	r3, r2
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	4413      	add	r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	4413      	add	r3, r2
 8003964:	3304      	adds	r3, #4
 8003966:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6a1a      	ldr	r2, [r3, #32]
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	0159      	lsls	r1, r3, #5
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	440b      	add	r3, r1
 8003974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800397e:	1ad2      	subs	r2, r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d114      	bne.n	80039b4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d109      	bne.n	80039a6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6818      	ldr	r0, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800399c:	461a      	mov	r2, r3
 800399e:	2101      	movs	r1, #1
 80039a0:	f005 f90a 	bl	8008bb8 <USB_EP0_OutStart>
 80039a4:	e006      	b.n	80039b4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	68da      	ldr	r2, [r3, #12]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	441a      	add	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	4619      	mov	r1, r3
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f007 fba8 	bl	800b110 <HAL_PCD_DataOutStageCallback>
 80039c0:	e046      	b.n	8003a50 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	4a26      	ldr	r2, [pc, #152]	; (8003a60 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d124      	bne.n	8003a14 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00a      	beq.n	80039ea <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	015a      	lsls	r2, r3, #5
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	4413      	add	r3, r2
 80039dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039e0:	461a      	mov	r2, r3
 80039e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039e6:	6093      	str	r3, [r2, #8]
 80039e8:	e032      	b.n	8003a50 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	f003 0320 	and.w	r3, r3, #32
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d008      	beq.n	8003a06 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	015a      	lsls	r2, r3, #5
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	4413      	add	r3, r2
 80039fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a00:	461a      	mov	r2, r3
 8003a02:	2320      	movs	r3, #32
 8003a04:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f007 fb7f 	bl	800b110 <HAL_PCD_DataOutStageCallback>
 8003a12:	e01d      	b.n	8003a50 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d114      	bne.n	8003a44 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003a1a:	6879      	ldr	r1, [r7, #4]
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	00db      	lsls	r3, r3, #3
 8003a22:	4413      	add	r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	440b      	add	r3, r1
 8003a28:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d108      	bne.n	8003a44 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6818      	ldr	r0, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	2100      	movs	r1, #0
 8003a40:	f005 f8ba 	bl	8008bb8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	4619      	mov	r1, r3
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f007 fb60 	bl	800b110 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3720      	adds	r7, #32
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	4f54300a 	.word	0x4f54300a
 8003a60:	4f54310a 	.word	0x4f54310a

08003a64 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b086      	sub	sp, #24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	333c      	adds	r3, #60	; 0x3c
 8003a7c:	3304      	adds	r3, #4
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	015a      	lsls	r2, r3, #5
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	4413      	add	r3, r2
 8003a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	4a15      	ldr	r2, [pc, #84]	; (8003aec <PCD_EP_OutSetupPacket_int+0x88>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d90e      	bls.n	8003ab8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d009      	beq.n	8003ab8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	015a      	lsls	r2, r3, #5
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	4413      	add	r3, r2
 8003aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ab6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f007 fb17 	bl	800b0ec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	4a0a      	ldr	r2, [pc, #40]	; (8003aec <PCD_EP_OutSetupPacket_int+0x88>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d90c      	bls.n	8003ae0 <PCD_EP_OutSetupPacket_int+0x7c>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d108      	bne.n	8003ae0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6818      	ldr	r0, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ad8:	461a      	mov	r2, r3
 8003ada:	2101      	movs	r1, #1
 8003adc:	f005 f86c 	bl	8008bb8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3718      	adds	r7, #24
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	4f54300a 	.word	0x4f54300a

08003af0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	460b      	mov	r3, r1
 8003afa:	70fb      	strb	r3, [r7, #3]
 8003afc:	4613      	mov	r3, r2
 8003afe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b06:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003b08:	78fb      	ldrb	r3, [r7, #3]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d107      	bne.n	8003b1e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003b0e:	883b      	ldrh	r3, [r7, #0]
 8003b10:	0419      	lsls	r1, r3, #16
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68ba      	ldr	r2, [r7, #8]
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	629a      	str	r2, [r3, #40]	; 0x28
 8003b1c:	e028      	b.n	8003b70 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b24:	0c1b      	lsrs	r3, r3, #16
 8003b26:	68ba      	ldr	r2, [r7, #8]
 8003b28:	4413      	add	r3, r2
 8003b2a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	73fb      	strb	r3, [r7, #15]
 8003b30:	e00d      	b.n	8003b4e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	7bfb      	ldrb	r3, [r7, #15]
 8003b38:	3340      	adds	r3, #64	; 0x40
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4413      	add	r3, r2
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	0c1b      	lsrs	r3, r3, #16
 8003b42:	68ba      	ldr	r2, [r7, #8]
 8003b44:	4413      	add	r3, r2
 8003b46:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b48:	7bfb      	ldrb	r3, [r7, #15]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	73fb      	strb	r3, [r7, #15]
 8003b4e:	7bfa      	ldrb	r2, [r7, #15]
 8003b50:	78fb      	ldrb	r3, [r7, #3]
 8003b52:	3b01      	subs	r3, #1
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d3ec      	bcc.n	8003b32 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003b58:	883b      	ldrh	r3, [r7, #0]
 8003b5a:	0418      	lsls	r0, r3, #16
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6819      	ldr	r1, [r3, #0]
 8003b60:	78fb      	ldrb	r3, [r7, #3]
 8003b62:	3b01      	subs	r3, #1
 8003b64:	68ba      	ldr	r2, [r7, #8]
 8003b66:	4302      	orrs	r2, r0
 8003b68:	3340      	adds	r3, #64	; 0x40
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	440b      	add	r3, r1
 8003b6e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3714      	adds	r7, #20
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b083      	sub	sp, #12
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
 8003b86:	460b      	mov	r3, r1
 8003b88:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	887a      	ldrh	r2, [r7, #2]
 8003b90:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bce:	4b05      	ldr	r3, [pc, #20]	; (8003be4 <HAL_PCDEx_ActivateLPM+0x44>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3714      	adds	r7, #20
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr
 8003be4:	10000003 	.word	0x10000003

08003be8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003bf4:	bf00      	nop
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003c08:	4b19      	ldr	r3, [pc, #100]	; (8003c70 <HAL_PWREx_ConfigSupply+0x70>)
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	f003 0304 	and.w	r3, r3, #4
 8003c10:	2b04      	cmp	r3, #4
 8003c12:	d00a      	beq.n	8003c2a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003c14:	4b16      	ldr	r3, [pc, #88]	; (8003c70 <HAL_PWREx_ConfigSupply+0x70>)
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	f003 0307 	and.w	r3, r3, #7
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d001      	beq.n	8003c26 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e01f      	b.n	8003c66 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003c26:	2300      	movs	r3, #0
 8003c28:	e01d      	b.n	8003c66 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003c2a:	4b11      	ldr	r3, [pc, #68]	; (8003c70 <HAL_PWREx_ConfigSupply+0x70>)
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	f023 0207 	bic.w	r2, r3, #7
 8003c32:	490f      	ldr	r1, [pc, #60]	; (8003c70 <HAL_PWREx_ConfigSupply+0x70>)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003c3a:	f7fd f987 	bl	8000f4c <HAL_GetTick>
 8003c3e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003c40:	e009      	b.n	8003c56 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003c42:	f7fd f983 	bl	8000f4c <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c50:	d901      	bls.n	8003c56 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e007      	b.n	8003c66 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003c56:	4b06      	ldr	r3, [pc, #24]	; (8003c70 <HAL_PWREx_ConfigSupply+0x70>)
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c62:	d1ee      	bne.n	8003c42 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	58024800 	.word	0x58024800

08003c74 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003c74:	b480      	push	{r7}
 8003c76:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003c78:	4b05      	ldr	r3, [pc, #20]	; (8003c90 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	4a04      	ldr	r2, [pc, #16]	; (8003c90 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003c7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c82:	60d3      	str	r3, [r2, #12]
}
 8003c84:	bf00      	nop
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	58024800 	.word	0x58024800

08003c94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b08c      	sub	sp, #48	; 0x30
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d102      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	f000 bc48 	b.w	8004538 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 8088 	beq.w	8003dc6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cb6:	4b99      	ldr	r3, [pc, #612]	; (8003f1c <HAL_RCC_OscConfig+0x288>)
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003cc0:	4b96      	ldr	r3, [pc, #600]	; (8003f1c <HAL_RCC_OscConfig+0x288>)
 8003cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc8:	2b10      	cmp	r3, #16
 8003cca:	d007      	beq.n	8003cdc <HAL_RCC_OscConfig+0x48>
 8003ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cce:	2b18      	cmp	r3, #24
 8003cd0:	d111      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x62>
 8003cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd4:	f003 0303 	and.w	r3, r3, #3
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d10c      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cdc:	4b8f      	ldr	r3, [pc, #572]	; (8003f1c <HAL_RCC_OscConfig+0x288>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d06d      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x130>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d169      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	f000 bc21 	b.w	8004538 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cfe:	d106      	bne.n	8003d0e <HAL_RCC_OscConfig+0x7a>
 8003d00:	4b86      	ldr	r3, [pc, #536]	; (8003f1c <HAL_RCC_OscConfig+0x288>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a85      	ldr	r2, [pc, #532]	; (8003f1c <HAL_RCC_OscConfig+0x288>)
 8003d06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d0a:	6013      	str	r3, [r2, #0]
 8003d0c:	e02e      	b.n	8003d6c <HAL_RCC_OscConfig+0xd8>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10c      	bne.n	8003d30 <HAL_RCC_OscConfig+0x9c>
 8003d16:	4b81      	ldr	r3, [pc, #516]	; (8003f1c <HAL_RCC_OscConfig+0x288>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a80      	ldr	r2, [pc, #512]	; (8003f1c <HAL_RCC_OscConfig+0x288>)
 8003d1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d20:	6013      	str	r3, [r2, #0]
 8003d22:	4b7e      	ldr	r3, [pc, #504]	; (8003f1c <HAL_RCC_OscConfig+0x288>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a7d      	ldr	r2, [pc, #500]	; (8003f1c <HAL_RCC_OscConfig+0x288>)
 8003d28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d2c:	6013      	str	r3, [r2, #0]
 8003d2e:	e01d      	b.n	8003d6c <HAL_RCC_OscConfig+0xd8>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d38:	d10c      	bne.n	8003d54 <HAL_RCC_OscConfig+0xc0>
 8003d3a:	4b78      	ldr	r3, [pc, #480]	; (8003f1c <HAL_RCC_OscConfig+0x288>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a77      	ldr	r2, [pc, #476]	; (8003f1c <HAL_RCC_OscConfig+0x288>)
 8003d40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d44:	6013      	str	r3, [r2, #0]
 8003d46:	4b75      	ldr	r3, [pc, #468]	; (8003f1c <HAL_RCC_OscConfig+0x288>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a74      	ldr	r2, [pc, #464]	; (8003f1c <HAL_RCC_OscConfig+0x288>)
 8003d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d50:	6013      	str	r3, [r2, #0]
 8003d52:	e00b      	b.n	8003d6c <HAL_RCC_OscConfig+0xd8>
 8003d54:	4b71      	ldr	r3, [pc, #452]	; (8003f1c <HAL_RCC_OscConfig+0x288>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a70      	ldr	r2, [pc, #448]	; (8003f1c <HAL_RCC_OscConfig+0x288>)
 8003d5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d5e:	6013      	str	r3, [r2, #0]
 8003d60:	4b6e      	ldr	r3, [pc, #440]	; (8003f1c <HAL_RCC_OscConfig+0x288>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a6d      	ldr	r2, [pc, #436]	; (8003f1c <HAL_RCC_OscConfig+0x288>)
 8003d66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d013      	beq.n	8003d9c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d74:	f7fd f8ea 	bl	8000f4c <HAL_GetTick>
 8003d78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d7a:	e008      	b.n	8003d8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d7c:	f7fd f8e6 	bl	8000f4c <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b64      	cmp	r3, #100	; 0x64
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e3d4      	b.n	8004538 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d8e:	4b63      	ldr	r3, [pc, #396]	; (8003f1c <HAL_RCC_OscConfig+0x288>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d0f0      	beq.n	8003d7c <HAL_RCC_OscConfig+0xe8>
 8003d9a:	e014      	b.n	8003dc6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d9c:	f7fd f8d6 	bl	8000f4c <HAL_GetTick>
 8003da0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003da2:	e008      	b.n	8003db6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003da4:	f7fd f8d2 	bl	8000f4c <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b64      	cmp	r3, #100	; 0x64
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e3c0      	b.n	8004538 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003db6:	4b59      	ldr	r3, [pc, #356]	; (8003f1c <HAL_RCC_OscConfig+0x288>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1f0      	bne.n	8003da4 <HAL_RCC_OscConfig+0x110>
 8003dc2:	e000      	b.n	8003dc6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f000 80ca 	beq.w	8003f68 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dd4:	4b51      	ldr	r3, [pc, #324]	; (8003f1c <HAL_RCC_OscConfig+0x288>)
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ddc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003dde:	4b4f      	ldr	r3, [pc, #316]	; (8003f1c <HAL_RCC_OscConfig+0x288>)
 8003de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003de4:	6a3b      	ldr	r3, [r7, #32]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d007      	beq.n	8003dfa <HAL_RCC_OscConfig+0x166>
 8003dea:	6a3b      	ldr	r3, [r7, #32]
 8003dec:	2b18      	cmp	r3, #24
 8003dee:	d156      	bne.n	8003e9e <HAL_RCC_OscConfig+0x20a>
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	f003 0303 	and.w	r3, r3, #3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d151      	bne.n	8003e9e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003dfa:	4b48      	ldr	r3, [pc, #288]	; (8003f1c <HAL_RCC_OscConfig+0x288>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0304 	and.w	r3, r3, #4
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d005      	beq.n	8003e12 <HAL_RCC_OscConfig+0x17e>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e392      	b.n	8004538 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003e12:	4b42      	ldr	r3, [pc, #264]	; (8003f1c <HAL_RCC_OscConfig+0x288>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f023 0219 	bic.w	r2, r3, #25
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	493f      	ldr	r1, [pc, #252]	; (8003f1c <HAL_RCC_OscConfig+0x288>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e24:	f7fd f892 	bl	8000f4c <HAL_GetTick>
 8003e28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e2a:	e008      	b.n	8003e3e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e2c:	f7fd f88e 	bl	8000f4c <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e37c      	b.n	8004538 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e3e:	4b37      	ldr	r3, [pc, #220]	; (8003f1c <HAL_RCC_OscConfig+0x288>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0304 	and.w	r3, r3, #4
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d0f0      	beq.n	8003e2c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e4a:	f7fd f8af 	bl	8000fac <HAL_GetREVID>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	f241 0203 	movw	r2, #4099	; 0x1003
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d817      	bhi.n	8003e88 <HAL_RCC_OscConfig+0x1f4>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	2b40      	cmp	r3, #64	; 0x40
 8003e5e:	d108      	bne.n	8003e72 <HAL_RCC_OscConfig+0x1de>
 8003e60:	4b2e      	ldr	r3, [pc, #184]	; (8003f1c <HAL_RCC_OscConfig+0x288>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003e68:	4a2c      	ldr	r2, [pc, #176]	; (8003f1c <HAL_RCC_OscConfig+0x288>)
 8003e6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e6e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e70:	e07a      	b.n	8003f68 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e72:	4b2a      	ldr	r3, [pc, #168]	; (8003f1c <HAL_RCC_OscConfig+0x288>)
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	031b      	lsls	r3, r3, #12
 8003e80:	4926      	ldr	r1, [pc, #152]	; (8003f1c <HAL_RCC_OscConfig+0x288>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e86:	e06f      	b.n	8003f68 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e88:	4b24      	ldr	r3, [pc, #144]	; (8003f1c <HAL_RCC_OscConfig+0x288>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	061b      	lsls	r3, r3, #24
 8003e96:	4921      	ldr	r1, [pc, #132]	; (8003f1c <HAL_RCC_OscConfig+0x288>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e9c:	e064      	b.n	8003f68 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d047      	beq.n	8003f36 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003ea6:	4b1d      	ldr	r3, [pc, #116]	; (8003f1c <HAL_RCC_OscConfig+0x288>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f023 0219 	bic.w	r2, r3, #25
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	491a      	ldr	r1, [pc, #104]	; (8003f1c <HAL_RCC_OscConfig+0x288>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb8:	f7fd f848 	bl	8000f4c <HAL_GetTick>
 8003ebc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ec0:	f7fd f844 	bl	8000f4c <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e332      	b.n	8004538 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ed2:	4b12      	ldr	r3, [pc, #72]	; (8003f1c <HAL_RCC_OscConfig+0x288>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0304 	and.w	r3, r3, #4
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0f0      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ede:	f7fd f865 	bl	8000fac <HAL_GetREVID>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	f241 0203 	movw	r2, #4099	; 0x1003
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d819      	bhi.n	8003f20 <HAL_RCC_OscConfig+0x28c>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	2b40      	cmp	r3, #64	; 0x40
 8003ef2:	d108      	bne.n	8003f06 <HAL_RCC_OscConfig+0x272>
 8003ef4:	4b09      	ldr	r3, [pc, #36]	; (8003f1c <HAL_RCC_OscConfig+0x288>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003efc:	4a07      	ldr	r2, [pc, #28]	; (8003f1c <HAL_RCC_OscConfig+0x288>)
 8003efe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f02:	6053      	str	r3, [r2, #4]
 8003f04:	e030      	b.n	8003f68 <HAL_RCC_OscConfig+0x2d4>
 8003f06:	4b05      	ldr	r3, [pc, #20]	; (8003f1c <HAL_RCC_OscConfig+0x288>)
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	031b      	lsls	r3, r3, #12
 8003f14:	4901      	ldr	r1, [pc, #4]	; (8003f1c <HAL_RCC_OscConfig+0x288>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	604b      	str	r3, [r1, #4]
 8003f1a:	e025      	b.n	8003f68 <HAL_RCC_OscConfig+0x2d4>
 8003f1c:	58024400 	.word	0x58024400
 8003f20:	4b9a      	ldr	r3, [pc, #616]	; (800418c <HAL_RCC_OscConfig+0x4f8>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	061b      	lsls	r3, r3, #24
 8003f2e:	4997      	ldr	r1, [pc, #604]	; (800418c <HAL_RCC_OscConfig+0x4f8>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	604b      	str	r3, [r1, #4]
 8003f34:	e018      	b.n	8003f68 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f36:	4b95      	ldr	r3, [pc, #596]	; (800418c <HAL_RCC_OscConfig+0x4f8>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a94      	ldr	r2, [pc, #592]	; (800418c <HAL_RCC_OscConfig+0x4f8>)
 8003f3c:	f023 0301 	bic.w	r3, r3, #1
 8003f40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f42:	f7fd f803 	bl	8000f4c <HAL_GetTick>
 8003f46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003f48:	e008      	b.n	8003f5c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f4a:	f7fc ffff 	bl	8000f4c <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d901      	bls.n	8003f5c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e2ed      	b.n	8004538 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003f5c:	4b8b      	ldr	r3, [pc, #556]	; (800418c <HAL_RCC_OscConfig+0x4f8>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0304 	and.w	r3, r3, #4
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1f0      	bne.n	8003f4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0310 	and.w	r3, r3, #16
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 80a9 	beq.w	80040c8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f76:	4b85      	ldr	r3, [pc, #532]	; (800418c <HAL_RCC_OscConfig+0x4f8>)
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f7e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003f80:	4b82      	ldr	r3, [pc, #520]	; (800418c <HAL_RCC_OscConfig+0x4f8>)
 8003f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f84:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	2b08      	cmp	r3, #8
 8003f8a:	d007      	beq.n	8003f9c <HAL_RCC_OscConfig+0x308>
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	2b18      	cmp	r3, #24
 8003f90:	d13a      	bne.n	8004008 <HAL_RCC_OscConfig+0x374>
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	f003 0303 	and.w	r3, r3, #3
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d135      	bne.n	8004008 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003f9c:	4b7b      	ldr	r3, [pc, #492]	; (800418c <HAL_RCC_OscConfig+0x4f8>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d005      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x320>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	69db      	ldr	r3, [r3, #28]
 8003fac:	2b80      	cmp	r3, #128	; 0x80
 8003fae:	d001      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e2c1      	b.n	8004538 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003fb4:	f7fc fffa 	bl	8000fac <HAL_GetREVID>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	f241 0203 	movw	r2, #4099	; 0x1003
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d817      	bhi.n	8003ff2 <HAL_RCC_OscConfig+0x35e>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	2b20      	cmp	r3, #32
 8003fc8:	d108      	bne.n	8003fdc <HAL_RCC_OscConfig+0x348>
 8003fca:	4b70      	ldr	r3, [pc, #448]	; (800418c <HAL_RCC_OscConfig+0x4f8>)
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003fd2:	4a6e      	ldr	r2, [pc, #440]	; (800418c <HAL_RCC_OscConfig+0x4f8>)
 8003fd4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003fd8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003fda:	e075      	b.n	80040c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003fdc:	4b6b      	ldr	r3, [pc, #428]	; (800418c <HAL_RCC_OscConfig+0x4f8>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a1b      	ldr	r3, [r3, #32]
 8003fe8:	069b      	lsls	r3, r3, #26
 8003fea:	4968      	ldr	r1, [pc, #416]	; (800418c <HAL_RCC_OscConfig+0x4f8>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ff0:	e06a      	b.n	80040c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ff2:	4b66      	ldr	r3, [pc, #408]	; (800418c <HAL_RCC_OscConfig+0x4f8>)
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	061b      	lsls	r3, r3, #24
 8004000:	4962      	ldr	r1, [pc, #392]	; (800418c <HAL_RCC_OscConfig+0x4f8>)
 8004002:	4313      	orrs	r3, r2
 8004004:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004006:	e05f      	b.n	80040c8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	69db      	ldr	r3, [r3, #28]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d042      	beq.n	8004096 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004010:	4b5e      	ldr	r3, [pc, #376]	; (800418c <HAL_RCC_OscConfig+0x4f8>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a5d      	ldr	r2, [pc, #372]	; (800418c <HAL_RCC_OscConfig+0x4f8>)
 8004016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800401a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800401c:	f7fc ff96 	bl	8000f4c <HAL_GetTick>
 8004020:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004022:	e008      	b.n	8004036 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004024:	f7fc ff92 	bl	8000f4c <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b02      	cmp	r3, #2
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e280      	b.n	8004538 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004036:	4b55      	ldr	r3, [pc, #340]	; (800418c <HAL_RCC_OscConfig+0x4f8>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800403e:	2b00      	cmp	r3, #0
 8004040:	d0f0      	beq.n	8004024 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004042:	f7fc ffb3 	bl	8000fac <HAL_GetREVID>
 8004046:	4603      	mov	r3, r0
 8004048:	f241 0203 	movw	r2, #4099	; 0x1003
 800404c:	4293      	cmp	r3, r2
 800404e:	d817      	bhi.n	8004080 <HAL_RCC_OscConfig+0x3ec>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a1b      	ldr	r3, [r3, #32]
 8004054:	2b20      	cmp	r3, #32
 8004056:	d108      	bne.n	800406a <HAL_RCC_OscConfig+0x3d6>
 8004058:	4b4c      	ldr	r3, [pc, #304]	; (800418c <HAL_RCC_OscConfig+0x4f8>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004060:	4a4a      	ldr	r2, [pc, #296]	; (800418c <HAL_RCC_OscConfig+0x4f8>)
 8004062:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004066:	6053      	str	r3, [r2, #4]
 8004068:	e02e      	b.n	80040c8 <HAL_RCC_OscConfig+0x434>
 800406a:	4b48      	ldr	r3, [pc, #288]	; (800418c <HAL_RCC_OscConfig+0x4f8>)
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	069b      	lsls	r3, r3, #26
 8004078:	4944      	ldr	r1, [pc, #272]	; (800418c <HAL_RCC_OscConfig+0x4f8>)
 800407a:	4313      	orrs	r3, r2
 800407c:	604b      	str	r3, [r1, #4]
 800407e:	e023      	b.n	80040c8 <HAL_RCC_OscConfig+0x434>
 8004080:	4b42      	ldr	r3, [pc, #264]	; (800418c <HAL_RCC_OscConfig+0x4f8>)
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a1b      	ldr	r3, [r3, #32]
 800408c:	061b      	lsls	r3, r3, #24
 800408e:	493f      	ldr	r1, [pc, #252]	; (800418c <HAL_RCC_OscConfig+0x4f8>)
 8004090:	4313      	orrs	r3, r2
 8004092:	60cb      	str	r3, [r1, #12]
 8004094:	e018      	b.n	80040c8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004096:	4b3d      	ldr	r3, [pc, #244]	; (800418c <HAL_RCC_OscConfig+0x4f8>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a3c      	ldr	r2, [pc, #240]	; (800418c <HAL_RCC_OscConfig+0x4f8>)
 800409c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a2:	f7fc ff53 	bl	8000f4c <HAL_GetTick>
 80040a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80040a8:	e008      	b.n	80040bc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80040aa:	f7fc ff4f 	bl	8000f4c <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d901      	bls.n	80040bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e23d      	b.n	8004538 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80040bc:	4b33      	ldr	r3, [pc, #204]	; (800418c <HAL_RCC_OscConfig+0x4f8>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1f0      	bne.n	80040aa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0308 	and.w	r3, r3, #8
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d036      	beq.n	8004142 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d019      	beq.n	8004110 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040dc:	4b2b      	ldr	r3, [pc, #172]	; (800418c <HAL_RCC_OscConfig+0x4f8>)
 80040de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040e0:	4a2a      	ldr	r2, [pc, #168]	; (800418c <HAL_RCC_OscConfig+0x4f8>)
 80040e2:	f043 0301 	orr.w	r3, r3, #1
 80040e6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040e8:	f7fc ff30 	bl	8000f4c <HAL_GetTick>
 80040ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80040ee:	e008      	b.n	8004102 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040f0:	f7fc ff2c 	bl	8000f4c <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e21a      	b.n	8004538 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004102:	4b22      	ldr	r3, [pc, #136]	; (800418c <HAL_RCC_OscConfig+0x4f8>)
 8004104:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d0f0      	beq.n	80040f0 <HAL_RCC_OscConfig+0x45c>
 800410e:	e018      	b.n	8004142 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004110:	4b1e      	ldr	r3, [pc, #120]	; (800418c <HAL_RCC_OscConfig+0x4f8>)
 8004112:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004114:	4a1d      	ldr	r2, [pc, #116]	; (800418c <HAL_RCC_OscConfig+0x4f8>)
 8004116:	f023 0301 	bic.w	r3, r3, #1
 800411a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800411c:	f7fc ff16 	bl	8000f4c <HAL_GetTick>
 8004120:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004122:	e008      	b.n	8004136 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004124:	f7fc ff12 	bl	8000f4c <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b02      	cmp	r3, #2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e200      	b.n	8004538 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004136:	4b15      	ldr	r3, [pc, #84]	; (800418c <HAL_RCC_OscConfig+0x4f8>)
 8004138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1f0      	bne.n	8004124 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0320 	and.w	r3, r3, #32
 800414a:	2b00      	cmp	r3, #0
 800414c:	d039      	beq.n	80041c2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d01c      	beq.n	8004190 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004156:	4b0d      	ldr	r3, [pc, #52]	; (800418c <HAL_RCC_OscConfig+0x4f8>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a0c      	ldr	r2, [pc, #48]	; (800418c <HAL_RCC_OscConfig+0x4f8>)
 800415c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004160:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004162:	f7fc fef3 	bl	8000f4c <HAL_GetTick>
 8004166:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004168:	e008      	b.n	800417c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800416a:	f7fc feef 	bl	8000f4c <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	2b02      	cmp	r3, #2
 8004176:	d901      	bls.n	800417c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e1dd      	b.n	8004538 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800417c:	4b03      	ldr	r3, [pc, #12]	; (800418c <HAL_RCC_OscConfig+0x4f8>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d0f0      	beq.n	800416a <HAL_RCC_OscConfig+0x4d6>
 8004188:	e01b      	b.n	80041c2 <HAL_RCC_OscConfig+0x52e>
 800418a:	bf00      	nop
 800418c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004190:	4b9b      	ldr	r3, [pc, #620]	; (8004400 <HAL_RCC_OscConfig+0x76c>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a9a      	ldr	r2, [pc, #616]	; (8004400 <HAL_RCC_OscConfig+0x76c>)
 8004196:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800419a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800419c:	f7fc fed6 	bl	8000f4c <HAL_GetTick>
 80041a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80041a2:	e008      	b.n	80041b6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041a4:	f7fc fed2 	bl	8000f4c <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e1c0      	b.n	8004538 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80041b6:	4b92      	ldr	r3, [pc, #584]	; (8004400 <HAL_RCC_OscConfig+0x76c>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1f0      	bne.n	80041a4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0304 	and.w	r3, r3, #4
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f000 8081 	beq.w	80042d2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80041d0:	4b8c      	ldr	r3, [pc, #560]	; (8004404 <HAL_RCC_OscConfig+0x770>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a8b      	ldr	r2, [pc, #556]	; (8004404 <HAL_RCC_OscConfig+0x770>)
 80041d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041dc:	f7fc feb6 	bl	8000f4c <HAL_GetTick>
 80041e0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041e2:	e008      	b.n	80041f6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041e4:	f7fc feb2 	bl	8000f4c <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b64      	cmp	r3, #100	; 0x64
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e1a0      	b.n	8004538 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041f6:	4b83      	ldr	r3, [pc, #524]	; (8004404 <HAL_RCC_OscConfig+0x770>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d0f0      	beq.n	80041e4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d106      	bne.n	8004218 <HAL_RCC_OscConfig+0x584>
 800420a:	4b7d      	ldr	r3, [pc, #500]	; (8004400 <HAL_RCC_OscConfig+0x76c>)
 800420c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800420e:	4a7c      	ldr	r2, [pc, #496]	; (8004400 <HAL_RCC_OscConfig+0x76c>)
 8004210:	f043 0301 	orr.w	r3, r3, #1
 8004214:	6713      	str	r3, [r2, #112]	; 0x70
 8004216:	e02d      	b.n	8004274 <HAL_RCC_OscConfig+0x5e0>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d10c      	bne.n	800423a <HAL_RCC_OscConfig+0x5a6>
 8004220:	4b77      	ldr	r3, [pc, #476]	; (8004400 <HAL_RCC_OscConfig+0x76c>)
 8004222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004224:	4a76      	ldr	r2, [pc, #472]	; (8004400 <HAL_RCC_OscConfig+0x76c>)
 8004226:	f023 0301 	bic.w	r3, r3, #1
 800422a:	6713      	str	r3, [r2, #112]	; 0x70
 800422c:	4b74      	ldr	r3, [pc, #464]	; (8004400 <HAL_RCC_OscConfig+0x76c>)
 800422e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004230:	4a73      	ldr	r2, [pc, #460]	; (8004400 <HAL_RCC_OscConfig+0x76c>)
 8004232:	f023 0304 	bic.w	r3, r3, #4
 8004236:	6713      	str	r3, [r2, #112]	; 0x70
 8004238:	e01c      	b.n	8004274 <HAL_RCC_OscConfig+0x5e0>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	2b05      	cmp	r3, #5
 8004240:	d10c      	bne.n	800425c <HAL_RCC_OscConfig+0x5c8>
 8004242:	4b6f      	ldr	r3, [pc, #444]	; (8004400 <HAL_RCC_OscConfig+0x76c>)
 8004244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004246:	4a6e      	ldr	r2, [pc, #440]	; (8004400 <HAL_RCC_OscConfig+0x76c>)
 8004248:	f043 0304 	orr.w	r3, r3, #4
 800424c:	6713      	str	r3, [r2, #112]	; 0x70
 800424e:	4b6c      	ldr	r3, [pc, #432]	; (8004400 <HAL_RCC_OscConfig+0x76c>)
 8004250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004252:	4a6b      	ldr	r2, [pc, #428]	; (8004400 <HAL_RCC_OscConfig+0x76c>)
 8004254:	f043 0301 	orr.w	r3, r3, #1
 8004258:	6713      	str	r3, [r2, #112]	; 0x70
 800425a:	e00b      	b.n	8004274 <HAL_RCC_OscConfig+0x5e0>
 800425c:	4b68      	ldr	r3, [pc, #416]	; (8004400 <HAL_RCC_OscConfig+0x76c>)
 800425e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004260:	4a67      	ldr	r2, [pc, #412]	; (8004400 <HAL_RCC_OscConfig+0x76c>)
 8004262:	f023 0301 	bic.w	r3, r3, #1
 8004266:	6713      	str	r3, [r2, #112]	; 0x70
 8004268:	4b65      	ldr	r3, [pc, #404]	; (8004400 <HAL_RCC_OscConfig+0x76c>)
 800426a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426c:	4a64      	ldr	r2, [pc, #400]	; (8004400 <HAL_RCC_OscConfig+0x76c>)
 800426e:	f023 0304 	bic.w	r3, r3, #4
 8004272:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d015      	beq.n	80042a8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800427c:	f7fc fe66 	bl	8000f4c <HAL_GetTick>
 8004280:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004282:	e00a      	b.n	800429a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004284:	f7fc fe62 	bl	8000f4c <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004292:	4293      	cmp	r3, r2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e14e      	b.n	8004538 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800429a:	4b59      	ldr	r3, [pc, #356]	; (8004400 <HAL_RCC_OscConfig+0x76c>)
 800429c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d0ee      	beq.n	8004284 <HAL_RCC_OscConfig+0x5f0>
 80042a6:	e014      	b.n	80042d2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a8:	f7fc fe50 	bl	8000f4c <HAL_GetTick>
 80042ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80042ae:	e00a      	b.n	80042c6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042b0:	f7fc fe4c 	bl	8000f4c <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80042be:	4293      	cmp	r3, r2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e138      	b.n	8004538 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80042c6:	4b4e      	ldr	r3, [pc, #312]	; (8004400 <HAL_RCC_OscConfig+0x76c>)
 80042c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1ee      	bne.n	80042b0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f000 812d 	beq.w	8004536 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80042dc:	4b48      	ldr	r3, [pc, #288]	; (8004400 <HAL_RCC_OscConfig+0x76c>)
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042e4:	2b18      	cmp	r3, #24
 80042e6:	f000 80bd 	beq.w	8004464 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	f040 809e 	bne.w	8004430 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042f4:	4b42      	ldr	r3, [pc, #264]	; (8004400 <HAL_RCC_OscConfig+0x76c>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a41      	ldr	r2, [pc, #260]	; (8004400 <HAL_RCC_OscConfig+0x76c>)
 80042fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004300:	f7fc fe24 	bl	8000f4c <HAL_GetTick>
 8004304:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004306:	e008      	b.n	800431a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004308:	f7fc fe20 	bl	8000f4c <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b02      	cmp	r3, #2
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e10e      	b.n	8004538 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800431a:	4b39      	ldr	r3, [pc, #228]	; (8004400 <HAL_RCC_OscConfig+0x76c>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1f0      	bne.n	8004308 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004326:	4b36      	ldr	r3, [pc, #216]	; (8004400 <HAL_RCC_OscConfig+0x76c>)
 8004328:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800432a:	4b37      	ldr	r3, [pc, #220]	; (8004408 <HAL_RCC_OscConfig+0x774>)
 800432c:	4013      	ands	r3, r2
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004336:	0112      	lsls	r2, r2, #4
 8004338:	430a      	orrs	r2, r1
 800433a:	4931      	ldr	r1, [pc, #196]	; (8004400 <HAL_RCC_OscConfig+0x76c>)
 800433c:	4313      	orrs	r3, r2
 800433e:	628b      	str	r3, [r1, #40]	; 0x28
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004344:	3b01      	subs	r3, #1
 8004346:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800434e:	3b01      	subs	r3, #1
 8004350:	025b      	lsls	r3, r3, #9
 8004352:	b29b      	uxth	r3, r3
 8004354:	431a      	orrs	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435a:	3b01      	subs	r3, #1
 800435c:	041b      	lsls	r3, r3, #16
 800435e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004362:	431a      	orrs	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004368:	3b01      	subs	r3, #1
 800436a:	061b      	lsls	r3, r3, #24
 800436c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004370:	4923      	ldr	r1, [pc, #140]	; (8004400 <HAL_RCC_OscConfig+0x76c>)
 8004372:	4313      	orrs	r3, r2
 8004374:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004376:	4b22      	ldr	r3, [pc, #136]	; (8004400 <HAL_RCC_OscConfig+0x76c>)
 8004378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437a:	4a21      	ldr	r2, [pc, #132]	; (8004400 <HAL_RCC_OscConfig+0x76c>)
 800437c:	f023 0301 	bic.w	r3, r3, #1
 8004380:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004382:	4b1f      	ldr	r3, [pc, #124]	; (8004400 <HAL_RCC_OscConfig+0x76c>)
 8004384:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004386:	4b21      	ldr	r3, [pc, #132]	; (800440c <HAL_RCC_OscConfig+0x778>)
 8004388:	4013      	ands	r3, r2
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800438e:	00d2      	lsls	r2, r2, #3
 8004390:	491b      	ldr	r1, [pc, #108]	; (8004400 <HAL_RCC_OscConfig+0x76c>)
 8004392:	4313      	orrs	r3, r2
 8004394:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004396:	4b1a      	ldr	r3, [pc, #104]	; (8004400 <HAL_RCC_OscConfig+0x76c>)
 8004398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439a:	f023 020c 	bic.w	r2, r3, #12
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	4917      	ldr	r1, [pc, #92]	; (8004400 <HAL_RCC_OscConfig+0x76c>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80043a8:	4b15      	ldr	r3, [pc, #84]	; (8004400 <HAL_RCC_OscConfig+0x76c>)
 80043aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ac:	f023 0202 	bic.w	r2, r3, #2
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b4:	4912      	ldr	r1, [pc, #72]	; (8004400 <HAL_RCC_OscConfig+0x76c>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80043ba:	4b11      	ldr	r3, [pc, #68]	; (8004400 <HAL_RCC_OscConfig+0x76c>)
 80043bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043be:	4a10      	ldr	r2, [pc, #64]	; (8004400 <HAL_RCC_OscConfig+0x76c>)
 80043c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043c6:	4b0e      	ldr	r3, [pc, #56]	; (8004400 <HAL_RCC_OscConfig+0x76c>)
 80043c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ca:	4a0d      	ldr	r2, [pc, #52]	; (8004400 <HAL_RCC_OscConfig+0x76c>)
 80043cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80043d2:	4b0b      	ldr	r3, [pc, #44]	; (8004400 <HAL_RCC_OscConfig+0x76c>)
 80043d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d6:	4a0a      	ldr	r2, [pc, #40]	; (8004400 <HAL_RCC_OscConfig+0x76c>)
 80043d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80043de:	4b08      	ldr	r3, [pc, #32]	; (8004400 <HAL_RCC_OscConfig+0x76c>)
 80043e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e2:	4a07      	ldr	r2, [pc, #28]	; (8004400 <HAL_RCC_OscConfig+0x76c>)
 80043e4:	f043 0301 	orr.w	r3, r3, #1
 80043e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043ea:	4b05      	ldr	r3, [pc, #20]	; (8004400 <HAL_RCC_OscConfig+0x76c>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a04      	ldr	r2, [pc, #16]	; (8004400 <HAL_RCC_OscConfig+0x76c>)
 80043f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f6:	f7fc fda9 	bl	8000f4c <HAL_GetTick>
 80043fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80043fc:	e011      	b.n	8004422 <HAL_RCC_OscConfig+0x78e>
 80043fe:	bf00      	nop
 8004400:	58024400 	.word	0x58024400
 8004404:	58024800 	.word	0x58024800
 8004408:	fffffc0c 	.word	0xfffffc0c
 800440c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004410:	f7fc fd9c 	bl	8000f4c <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e08a      	b.n	8004538 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004422:	4b47      	ldr	r3, [pc, #284]	; (8004540 <HAL_RCC_OscConfig+0x8ac>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d0f0      	beq.n	8004410 <HAL_RCC_OscConfig+0x77c>
 800442e:	e082      	b.n	8004536 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004430:	4b43      	ldr	r3, [pc, #268]	; (8004540 <HAL_RCC_OscConfig+0x8ac>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a42      	ldr	r2, [pc, #264]	; (8004540 <HAL_RCC_OscConfig+0x8ac>)
 8004436:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800443a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800443c:	f7fc fd86 	bl	8000f4c <HAL_GetTick>
 8004440:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004442:	e008      	b.n	8004456 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004444:	f7fc fd82 	bl	8000f4c <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b02      	cmp	r3, #2
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e070      	b.n	8004538 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004456:	4b3a      	ldr	r3, [pc, #232]	; (8004540 <HAL_RCC_OscConfig+0x8ac>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1f0      	bne.n	8004444 <HAL_RCC_OscConfig+0x7b0>
 8004462:	e068      	b.n	8004536 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004464:	4b36      	ldr	r3, [pc, #216]	; (8004540 <HAL_RCC_OscConfig+0x8ac>)
 8004466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004468:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800446a:	4b35      	ldr	r3, [pc, #212]	; (8004540 <HAL_RCC_OscConfig+0x8ac>)
 800446c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004474:	2b01      	cmp	r3, #1
 8004476:	d031      	beq.n	80044dc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	f003 0203 	and.w	r2, r3, #3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004482:	429a      	cmp	r2, r3
 8004484:	d12a      	bne.n	80044dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	091b      	lsrs	r3, r3, #4
 800448a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004492:	429a      	cmp	r2, r3
 8004494:	d122      	bne.n	80044dc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d11a      	bne.n	80044dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	0a5b      	lsrs	r3, r3, #9
 80044aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044b2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d111      	bne.n	80044dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	0c1b      	lsrs	r3, r3, #16
 80044bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d108      	bne.n	80044dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	0e1b      	lsrs	r3, r3, #24
 80044ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80044d8:	429a      	cmp	r2, r3
 80044da:	d001      	beq.n	80044e0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e02b      	b.n	8004538 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80044e0:	4b17      	ldr	r3, [pc, #92]	; (8004540 <HAL_RCC_OscConfig+0x8ac>)
 80044e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044e4:	08db      	lsrs	r3, r3, #3
 80044e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80044ea:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d01f      	beq.n	8004536 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80044f6:	4b12      	ldr	r3, [pc, #72]	; (8004540 <HAL_RCC_OscConfig+0x8ac>)
 80044f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fa:	4a11      	ldr	r2, [pc, #68]	; (8004540 <HAL_RCC_OscConfig+0x8ac>)
 80044fc:	f023 0301 	bic.w	r3, r3, #1
 8004500:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004502:	f7fc fd23 	bl	8000f4c <HAL_GetTick>
 8004506:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004508:	bf00      	nop
 800450a:	f7fc fd1f 	bl	8000f4c <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004512:	4293      	cmp	r3, r2
 8004514:	d0f9      	beq.n	800450a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004516:	4b0a      	ldr	r3, [pc, #40]	; (8004540 <HAL_RCC_OscConfig+0x8ac>)
 8004518:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800451a:	4b0a      	ldr	r3, [pc, #40]	; (8004544 <HAL_RCC_OscConfig+0x8b0>)
 800451c:	4013      	ands	r3, r2
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004522:	00d2      	lsls	r2, r2, #3
 8004524:	4906      	ldr	r1, [pc, #24]	; (8004540 <HAL_RCC_OscConfig+0x8ac>)
 8004526:	4313      	orrs	r3, r2
 8004528:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800452a:	4b05      	ldr	r3, [pc, #20]	; (8004540 <HAL_RCC_OscConfig+0x8ac>)
 800452c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452e:	4a04      	ldr	r2, [pc, #16]	; (8004540 <HAL_RCC_OscConfig+0x8ac>)
 8004530:	f043 0301 	orr.w	r3, r3, #1
 8004534:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3730      	adds	r7, #48	; 0x30
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	58024400 	.word	0x58024400
 8004544:	ffff0007 	.word	0xffff0007

08004548 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b086      	sub	sp, #24
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d101      	bne.n	800455c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e19c      	b.n	8004896 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800455c:	4b8a      	ldr	r3, [pc, #552]	; (8004788 <HAL_RCC_ClockConfig+0x240>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 030f 	and.w	r3, r3, #15
 8004564:	683a      	ldr	r2, [r7, #0]
 8004566:	429a      	cmp	r2, r3
 8004568:	d910      	bls.n	800458c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800456a:	4b87      	ldr	r3, [pc, #540]	; (8004788 <HAL_RCC_ClockConfig+0x240>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f023 020f 	bic.w	r2, r3, #15
 8004572:	4985      	ldr	r1, [pc, #532]	; (8004788 <HAL_RCC_ClockConfig+0x240>)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	4313      	orrs	r3, r2
 8004578:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800457a:	4b83      	ldr	r3, [pc, #524]	; (8004788 <HAL_RCC_ClockConfig+0x240>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 030f 	and.w	r3, r3, #15
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	429a      	cmp	r2, r3
 8004586:	d001      	beq.n	800458c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e184      	b.n	8004896 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0304 	and.w	r3, r3, #4
 8004594:	2b00      	cmp	r3, #0
 8004596:	d010      	beq.n	80045ba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	691a      	ldr	r2, [r3, #16]
 800459c:	4b7b      	ldr	r3, [pc, #492]	; (800478c <HAL_RCC_ClockConfig+0x244>)
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d908      	bls.n	80045ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80045a8:	4b78      	ldr	r3, [pc, #480]	; (800478c <HAL_RCC_ClockConfig+0x244>)
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	4975      	ldr	r1, [pc, #468]	; (800478c <HAL_RCC_ClockConfig+0x244>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0308 	and.w	r3, r3, #8
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d010      	beq.n	80045e8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	695a      	ldr	r2, [r3, #20]
 80045ca:	4b70      	ldr	r3, [pc, #448]	; (800478c <HAL_RCC_ClockConfig+0x244>)
 80045cc:	69db      	ldr	r3, [r3, #28]
 80045ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d908      	bls.n	80045e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80045d6:	4b6d      	ldr	r3, [pc, #436]	; (800478c <HAL_RCC_ClockConfig+0x244>)
 80045d8:	69db      	ldr	r3, [r3, #28]
 80045da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	496a      	ldr	r1, [pc, #424]	; (800478c <HAL_RCC_ClockConfig+0x244>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0310 	and.w	r3, r3, #16
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d010      	beq.n	8004616 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	699a      	ldr	r2, [r3, #24]
 80045f8:	4b64      	ldr	r3, [pc, #400]	; (800478c <HAL_RCC_ClockConfig+0x244>)
 80045fa:	69db      	ldr	r3, [r3, #28]
 80045fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004600:	429a      	cmp	r2, r3
 8004602:	d908      	bls.n	8004616 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004604:	4b61      	ldr	r3, [pc, #388]	; (800478c <HAL_RCC_ClockConfig+0x244>)
 8004606:	69db      	ldr	r3, [r3, #28]
 8004608:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	495e      	ldr	r1, [pc, #376]	; (800478c <HAL_RCC_ClockConfig+0x244>)
 8004612:	4313      	orrs	r3, r2
 8004614:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0320 	and.w	r3, r3, #32
 800461e:	2b00      	cmp	r3, #0
 8004620:	d010      	beq.n	8004644 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	69da      	ldr	r2, [r3, #28]
 8004626:	4b59      	ldr	r3, [pc, #356]	; (800478c <HAL_RCC_ClockConfig+0x244>)
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800462e:	429a      	cmp	r2, r3
 8004630:	d908      	bls.n	8004644 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004632:	4b56      	ldr	r3, [pc, #344]	; (800478c <HAL_RCC_ClockConfig+0x244>)
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	69db      	ldr	r3, [r3, #28]
 800463e:	4953      	ldr	r1, [pc, #332]	; (800478c <HAL_RCC_ClockConfig+0x244>)
 8004640:	4313      	orrs	r3, r2
 8004642:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	2b00      	cmp	r3, #0
 800464e:	d010      	beq.n	8004672 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68da      	ldr	r2, [r3, #12]
 8004654:	4b4d      	ldr	r3, [pc, #308]	; (800478c <HAL_RCC_ClockConfig+0x244>)
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	f003 030f 	and.w	r3, r3, #15
 800465c:	429a      	cmp	r2, r3
 800465e:	d908      	bls.n	8004672 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004660:	4b4a      	ldr	r3, [pc, #296]	; (800478c <HAL_RCC_ClockConfig+0x244>)
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	f023 020f 	bic.w	r2, r3, #15
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	4947      	ldr	r1, [pc, #284]	; (800478c <HAL_RCC_ClockConfig+0x244>)
 800466e:	4313      	orrs	r3, r2
 8004670:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0301 	and.w	r3, r3, #1
 800467a:	2b00      	cmp	r3, #0
 800467c:	d055      	beq.n	800472a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800467e:	4b43      	ldr	r3, [pc, #268]	; (800478c <HAL_RCC_ClockConfig+0x244>)
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	4940      	ldr	r1, [pc, #256]	; (800478c <HAL_RCC_ClockConfig+0x244>)
 800468c:	4313      	orrs	r3, r2
 800468e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	2b02      	cmp	r3, #2
 8004696:	d107      	bne.n	80046a8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004698:	4b3c      	ldr	r3, [pc, #240]	; (800478c <HAL_RCC_ClockConfig+0x244>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d121      	bne.n	80046e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e0f6      	b.n	8004896 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	2b03      	cmp	r3, #3
 80046ae:	d107      	bne.n	80046c0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80046b0:	4b36      	ldr	r3, [pc, #216]	; (800478c <HAL_RCC_ClockConfig+0x244>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d115      	bne.n	80046e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e0ea      	b.n	8004896 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d107      	bne.n	80046d8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80046c8:	4b30      	ldr	r3, [pc, #192]	; (800478c <HAL_RCC_ClockConfig+0x244>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d109      	bne.n	80046e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e0de      	b.n	8004896 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046d8:	4b2c      	ldr	r3, [pc, #176]	; (800478c <HAL_RCC_ClockConfig+0x244>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0304 	and.w	r3, r3, #4
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d101      	bne.n	80046e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e0d6      	b.n	8004896 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80046e8:	4b28      	ldr	r3, [pc, #160]	; (800478c <HAL_RCC_ClockConfig+0x244>)
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	f023 0207 	bic.w	r2, r3, #7
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	4925      	ldr	r1, [pc, #148]	; (800478c <HAL_RCC_ClockConfig+0x244>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046fa:	f7fc fc27 	bl	8000f4c <HAL_GetTick>
 80046fe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004700:	e00a      	b.n	8004718 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004702:	f7fc fc23 	bl	8000f4c <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004710:	4293      	cmp	r3, r2
 8004712:	d901      	bls.n	8004718 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e0be      	b.n	8004896 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004718:	4b1c      	ldr	r3, [pc, #112]	; (800478c <HAL_RCC_ClockConfig+0x244>)
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	00db      	lsls	r3, r3, #3
 8004726:	429a      	cmp	r2, r3
 8004728:	d1eb      	bne.n	8004702 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d010      	beq.n	8004758 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68da      	ldr	r2, [r3, #12]
 800473a:	4b14      	ldr	r3, [pc, #80]	; (800478c <HAL_RCC_ClockConfig+0x244>)
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	f003 030f 	and.w	r3, r3, #15
 8004742:	429a      	cmp	r2, r3
 8004744:	d208      	bcs.n	8004758 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004746:	4b11      	ldr	r3, [pc, #68]	; (800478c <HAL_RCC_ClockConfig+0x244>)
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	f023 020f 	bic.w	r2, r3, #15
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	490e      	ldr	r1, [pc, #56]	; (800478c <HAL_RCC_ClockConfig+0x244>)
 8004754:	4313      	orrs	r3, r2
 8004756:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004758:	4b0b      	ldr	r3, [pc, #44]	; (8004788 <HAL_RCC_ClockConfig+0x240>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 030f 	and.w	r3, r3, #15
 8004760:	683a      	ldr	r2, [r7, #0]
 8004762:	429a      	cmp	r2, r3
 8004764:	d214      	bcs.n	8004790 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004766:	4b08      	ldr	r3, [pc, #32]	; (8004788 <HAL_RCC_ClockConfig+0x240>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f023 020f 	bic.w	r2, r3, #15
 800476e:	4906      	ldr	r1, [pc, #24]	; (8004788 <HAL_RCC_ClockConfig+0x240>)
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	4313      	orrs	r3, r2
 8004774:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004776:	4b04      	ldr	r3, [pc, #16]	; (8004788 <HAL_RCC_ClockConfig+0x240>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 030f 	and.w	r3, r3, #15
 800477e:	683a      	ldr	r2, [r7, #0]
 8004780:	429a      	cmp	r2, r3
 8004782:	d005      	beq.n	8004790 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e086      	b.n	8004896 <HAL_RCC_ClockConfig+0x34e>
 8004788:	52002000 	.word	0x52002000
 800478c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0304 	and.w	r3, r3, #4
 8004798:	2b00      	cmp	r3, #0
 800479a:	d010      	beq.n	80047be <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	691a      	ldr	r2, [r3, #16]
 80047a0:	4b3f      	ldr	r3, [pc, #252]	; (80048a0 <HAL_RCC_ClockConfig+0x358>)
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d208      	bcs.n	80047be <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80047ac:	4b3c      	ldr	r3, [pc, #240]	; (80048a0 <HAL_RCC_ClockConfig+0x358>)
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	4939      	ldr	r1, [pc, #228]	; (80048a0 <HAL_RCC_ClockConfig+0x358>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0308 	and.w	r3, r3, #8
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d010      	beq.n	80047ec <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	695a      	ldr	r2, [r3, #20]
 80047ce:	4b34      	ldr	r3, [pc, #208]	; (80048a0 <HAL_RCC_ClockConfig+0x358>)
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d208      	bcs.n	80047ec <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80047da:	4b31      	ldr	r3, [pc, #196]	; (80048a0 <HAL_RCC_ClockConfig+0x358>)
 80047dc:	69db      	ldr	r3, [r3, #28]
 80047de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	492e      	ldr	r1, [pc, #184]	; (80048a0 <HAL_RCC_ClockConfig+0x358>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0310 	and.w	r3, r3, #16
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d010      	beq.n	800481a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	699a      	ldr	r2, [r3, #24]
 80047fc:	4b28      	ldr	r3, [pc, #160]	; (80048a0 <HAL_RCC_ClockConfig+0x358>)
 80047fe:	69db      	ldr	r3, [r3, #28]
 8004800:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004804:	429a      	cmp	r2, r3
 8004806:	d208      	bcs.n	800481a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004808:	4b25      	ldr	r3, [pc, #148]	; (80048a0 <HAL_RCC_ClockConfig+0x358>)
 800480a:	69db      	ldr	r3, [r3, #28]
 800480c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	4922      	ldr	r1, [pc, #136]	; (80048a0 <HAL_RCC_ClockConfig+0x358>)
 8004816:	4313      	orrs	r3, r2
 8004818:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0320 	and.w	r3, r3, #32
 8004822:	2b00      	cmp	r3, #0
 8004824:	d010      	beq.n	8004848 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	69da      	ldr	r2, [r3, #28]
 800482a:	4b1d      	ldr	r3, [pc, #116]	; (80048a0 <HAL_RCC_ClockConfig+0x358>)
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004832:	429a      	cmp	r2, r3
 8004834:	d208      	bcs.n	8004848 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004836:	4b1a      	ldr	r3, [pc, #104]	; (80048a0 <HAL_RCC_ClockConfig+0x358>)
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	69db      	ldr	r3, [r3, #28]
 8004842:	4917      	ldr	r1, [pc, #92]	; (80048a0 <HAL_RCC_ClockConfig+0x358>)
 8004844:	4313      	orrs	r3, r2
 8004846:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004848:	f000 f834 	bl	80048b4 <HAL_RCC_GetSysClockFreq>
 800484c:	4602      	mov	r2, r0
 800484e:	4b14      	ldr	r3, [pc, #80]	; (80048a0 <HAL_RCC_ClockConfig+0x358>)
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	0a1b      	lsrs	r3, r3, #8
 8004854:	f003 030f 	and.w	r3, r3, #15
 8004858:	4912      	ldr	r1, [pc, #72]	; (80048a4 <HAL_RCC_ClockConfig+0x35c>)
 800485a:	5ccb      	ldrb	r3, [r1, r3]
 800485c:	f003 031f 	and.w	r3, r3, #31
 8004860:	fa22 f303 	lsr.w	r3, r2, r3
 8004864:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004866:	4b0e      	ldr	r3, [pc, #56]	; (80048a0 <HAL_RCC_ClockConfig+0x358>)
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	f003 030f 	and.w	r3, r3, #15
 800486e:	4a0d      	ldr	r2, [pc, #52]	; (80048a4 <HAL_RCC_ClockConfig+0x35c>)
 8004870:	5cd3      	ldrb	r3, [r2, r3]
 8004872:	f003 031f 	and.w	r3, r3, #31
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	fa22 f303 	lsr.w	r3, r2, r3
 800487c:	4a0a      	ldr	r2, [pc, #40]	; (80048a8 <HAL_RCC_ClockConfig+0x360>)
 800487e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004880:	4a0a      	ldr	r2, [pc, #40]	; (80048ac <HAL_RCC_ClockConfig+0x364>)
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004886:	4b0a      	ldr	r3, [pc, #40]	; (80048b0 <HAL_RCC_ClockConfig+0x368>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4618      	mov	r0, r3
 800488c:	f7fc fb14 	bl	8000eb8 <HAL_InitTick>
 8004890:	4603      	mov	r3, r0
 8004892:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004894:	7bfb      	ldrb	r3, [r7, #15]
}
 8004896:	4618      	mov	r0, r3
 8004898:	3718      	adds	r7, #24
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	58024400 	.word	0x58024400
 80048a4:	0800e2b0 	.word	0x0800e2b0
 80048a8:	24000004 	.word	0x24000004
 80048ac:	24000000 	.word	0x24000000
 80048b0:	24000008 	.word	0x24000008

080048b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b089      	sub	sp, #36	; 0x24
 80048b8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048ba:	4bb3      	ldr	r3, [pc, #716]	; (8004b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048c2:	2b18      	cmp	r3, #24
 80048c4:	f200 8155 	bhi.w	8004b72 <HAL_RCC_GetSysClockFreq+0x2be>
 80048c8:	a201      	add	r2, pc, #4	; (adr r2, 80048d0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80048ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ce:	bf00      	nop
 80048d0:	08004935 	.word	0x08004935
 80048d4:	08004b73 	.word	0x08004b73
 80048d8:	08004b73 	.word	0x08004b73
 80048dc:	08004b73 	.word	0x08004b73
 80048e0:	08004b73 	.word	0x08004b73
 80048e4:	08004b73 	.word	0x08004b73
 80048e8:	08004b73 	.word	0x08004b73
 80048ec:	08004b73 	.word	0x08004b73
 80048f0:	0800495b 	.word	0x0800495b
 80048f4:	08004b73 	.word	0x08004b73
 80048f8:	08004b73 	.word	0x08004b73
 80048fc:	08004b73 	.word	0x08004b73
 8004900:	08004b73 	.word	0x08004b73
 8004904:	08004b73 	.word	0x08004b73
 8004908:	08004b73 	.word	0x08004b73
 800490c:	08004b73 	.word	0x08004b73
 8004910:	08004961 	.word	0x08004961
 8004914:	08004b73 	.word	0x08004b73
 8004918:	08004b73 	.word	0x08004b73
 800491c:	08004b73 	.word	0x08004b73
 8004920:	08004b73 	.word	0x08004b73
 8004924:	08004b73 	.word	0x08004b73
 8004928:	08004b73 	.word	0x08004b73
 800492c:	08004b73 	.word	0x08004b73
 8004930:	08004967 	.word	0x08004967
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004934:	4b94      	ldr	r3, [pc, #592]	; (8004b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0320 	and.w	r3, r3, #32
 800493c:	2b00      	cmp	r3, #0
 800493e:	d009      	beq.n	8004954 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004940:	4b91      	ldr	r3, [pc, #580]	; (8004b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	08db      	lsrs	r3, r3, #3
 8004946:	f003 0303 	and.w	r3, r3, #3
 800494a:	4a90      	ldr	r2, [pc, #576]	; (8004b8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800494c:	fa22 f303 	lsr.w	r3, r2, r3
 8004950:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004952:	e111      	b.n	8004b78 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004954:	4b8d      	ldr	r3, [pc, #564]	; (8004b8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004956:	61bb      	str	r3, [r7, #24]
      break;
 8004958:	e10e      	b.n	8004b78 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800495a:	4b8d      	ldr	r3, [pc, #564]	; (8004b90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800495c:	61bb      	str	r3, [r7, #24]
      break;
 800495e:	e10b      	b.n	8004b78 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004960:	4b8c      	ldr	r3, [pc, #560]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004962:	61bb      	str	r3, [r7, #24]
      break;
 8004964:	e108      	b.n	8004b78 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004966:	4b88      	ldr	r3, [pc, #544]	; (8004b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496a:	f003 0303 	and.w	r3, r3, #3
 800496e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004970:	4b85      	ldr	r3, [pc, #532]	; (8004b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004974:	091b      	lsrs	r3, r3, #4
 8004976:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800497a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800497c:	4b82      	ldr	r3, [pc, #520]	; (8004b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800497e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004980:	f003 0301 	and.w	r3, r3, #1
 8004984:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004986:	4b80      	ldr	r3, [pc, #512]	; (8004b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800498a:	08db      	lsrs	r3, r3, #3
 800498c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	fb02 f303 	mul.w	r3, r2, r3
 8004996:	ee07 3a90 	vmov	s15, r3
 800499a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800499e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f000 80e1 	beq.w	8004b6c <HAL_RCC_GetSysClockFreq+0x2b8>
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	f000 8083 	beq.w	8004ab8 <HAL_RCC_GetSysClockFreq+0x204>
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	f200 80a1 	bhi.w	8004afc <HAL_RCC_GetSysClockFreq+0x248>
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d003      	beq.n	80049c8 <HAL_RCC_GetSysClockFreq+0x114>
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d056      	beq.n	8004a74 <HAL_RCC_GetSysClockFreq+0x1c0>
 80049c6:	e099      	b.n	8004afc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049c8:	4b6f      	ldr	r3, [pc, #444]	; (8004b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0320 	and.w	r3, r3, #32
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d02d      	beq.n	8004a30 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80049d4:	4b6c      	ldr	r3, [pc, #432]	; (8004b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	08db      	lsrs	r3, r3, #3
 80049da:	f003 0303 	and.w	r3, r3, #3
 80049de:	4a6b      	ldr	r2, [pc, #428]	; (8004b8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80049e0:	fa22 f303 	lsr.w	r3, r2, r3
 80049e4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	ee07 3a90 	vmov	s15, r3
 80049ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	ee07 3a90 	vmov	s15, r3
 80049f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049fe:	4b62      	ldr	r3, [pc, #392]	; (8004b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a06:	ee07 3a90 	vmov	s15, r3
 8004a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a12:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004b98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a2a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004a2e:	e087      	b.n	8004b40 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	ee07 3a90 	vmov	s15, r3
 8004a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a3a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004b9c <HAL_RCC_GetSysClockFreq+0x2e8>
 8004a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a42:	4b51      	ldr	r3, [pc, #324]	; (8004b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a4a:	ee07 3a90 	vmov	s15, r3
 8004a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a52:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a56:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004b98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004a72:	e065      	b.n	8004b40 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	ee07 3a90 	vmov	s15, r3
 8004a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a7e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004ba0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a86:	4b40      	ldr	r3, [pc, #256]	; (8004b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a8e:	ee07 3a90 	vmov	s15, r3
 8004a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a96:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a9a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004b98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ab2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004ab6:	e043      	b.n	8004b40 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	ee07 3a90 	vmov	s15, r3
 8004abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ac2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004ba4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004ac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aca:	4b2f      	ldr	r3, [pc, #188]	; (8004b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ad2:	ee07 3a90 	vmov	s15, r3
 8004ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ada:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ade:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004b98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004aee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004af6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004afa:	e021      	b.n	8004b40 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	ee07 3a90 	vmov	s15, r3
 8004b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b06:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004ba0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b0e:	4b1e      	ldr	r3, [pc, #120]	; (8004b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b16:	ee07 3a90 	vmov	s15, r3
 8004b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b22:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004b98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004b3e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004b40:	4b11      	ldr	r3, [pc, #68]	; (8004b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b44:	0a5b      	lsrs	r3, r3, #9
 8004b46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	ee07 3a90 	vmov	s15, r3
 8004b54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004b58:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b64:	ee17 3a90 	vmov	r3, s15
 8004b68:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004b6a:	e005      	b.n	8004b78 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	61bb      	str	r3, [r7, #24]
      break;
 8004b70:	e002      	b.n	8004b78 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004b72:	4b07      	ldr	r3, [pc, #28]	; (8004b90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004b74:	61bb      	str	r3, [r7, #24]
      break;
 8004b76:	bf00      	nop
  }

  return sysclockfreq;
 8004b78:	69bb      	ldr	r3, [r7, #24]
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3724      	adds	r7, #36	; 0x24
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	58024400 	.word	0x58024400
 8004b8c:	03d09000 	.word	0x03d09000
 8004b90:	003d0900 	.word	0x003d0900
 8004b94:	017d7840 	.word	0x017d7840
 8004b98:	46000000 	.word	0x46000000
 8004b9c:	4c742400 	.word	0x4c742400
 8004ba0:	4a742400 	.word	0x4a742400
 8004ba4:	4bbebc20 	.word	0x4bbebc20

08004ba8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004bae:	f7ff fe81 	bl	80048b4 <HAL_RCC_GetSysClockFreq>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	4b10      	ldr	r3, [pc, #64]	; (8004bf8 <HAL_RCC_GetHCLKFreq+0x50>)
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	0a1b      	lsrs	r3, r3, #8
 8004bba:	f003 030f 	and.w	r3, r3, #15
 8004bbe:	490f      	ldr	r1, [pc, #60]	; (8004bfc <HAL_RCC_GetHCLKFreq+0x54>)
 8004bc0:	5ccb      	ldrb	r3, [r1, r3]
 8004bc2:	f003 031f 	and.w	r3, r3, #31
 8004bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8004bca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004bcc:	4b0a      	ldr	r3, [pc, #40]	; (8004bf8 <HAL_RCC_GetHCLKFreq+0x50>)
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	f003 030f 	and.w	r3, r3, #15
 8004bd4:	4a09      	ldr	r2, [pc, #36]	; (8004bfc <HAL_RCC_GetHCLKFreq+0x54>)
 8004bd6:	5cd3      	ldrb	r3, [r2, r3]
 8004bd8:	f003 031f 	and.w	r3, r3, #31
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	fa22 f303 	lsr.w	r3, r2, r3
 8004be2:	4a07      	ldr	r2, [pc, #28]	; (8004c00 <HAL_RCC_GetHCLKFreq+0x58>)
 8004be4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004be6:	4a07      	ldr	r2, [pc, #28]	; (8004c04 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004bec:	4b04      	ldr	r3, [pc, #16]	; (8004c00 <HAL_RCC_GetHCLKFreq+0x58>)
 8004bee:	681b      	ldr	r3, [r3, #0]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3708      	adds	r7, #8
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	58024400 	.word	0x58024400
 8004bfc:	0800e2b0 	.word	0x0800e2b0
 8004c00:	24000004 	.word	0x24000004
 8004c04:	24000000 	.word	0x24000000

08004c08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004c0c:	f7ff ffcc 	bl	8004ba8 <HAL_RCC_GetHCLKFreq>
 8004c10:	4602      	mov	r2, r0
 8004c12:	4b06      	ldr	r3, [pc, #24]	; (8004c2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	091b      	lsrs	r3, r3, #4
 8004c18:	f003 0307 	and.w	r3, r3, #7
 8004c1c:	4904      	ldr	r1, [pc, #16]	; (8004c30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c1e:	5ccb      	ldrb	r3, [r1, r3]
 8004c20:	f003 031f 	and.w	r3, r3, #31
 8004c24:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	58024400 	.word	0x58024400
 8004c30:	0800e2b0 	.word	0x0800e2b0

08004c34 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c38:	b0ca      	sub	sp, #296	; 0x128
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c40:	2300      	movs	r3, #0
 8004c42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c46:	2300      	movs	r3, #0
 8004c48:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c54:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8004c58:	2500      	movs	r5, #0
 8004c5a:	ea54 0305 	orrs.w	r3, r4, r5
 8004c5e:	d049      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c66:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c6a:	d02f      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004c6c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c70:	d828      	bhi.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004c72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c76:	d01a      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004c78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c7c:	d822      	bhi.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d003      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004c82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c86:	d007      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004c88:	e01c      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c8a:	4bb8      	ldr	r3, [pc, #736]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8e:	4ab7      	ldr	r2, [pc, #732]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c94:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004c96:	e01a      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c9c:	3308      	adds	r3, #8
 8004c9e:	2102      	movs	r1, #2
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f002 fb61 	bl	8007368 <RCCEx_PLL2_Config>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004cac:	e00f      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cb2:	3328      	adds	r3, #40	; 0x28
 8004cb4:	2102      	movs	r1, #2
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f002 fc08 	bl	80074cc <RCCEx_PLL3_Config>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004cc2:	e004      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004cca:	e000      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004ccc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d10a      	bne.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004cd6:	4ba5      	ldr	r3, [pc, #660]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cda:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ce2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ce4:	4aa1      	ldr	r2, [pc, #644]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ce6:	430b      	orrs	r3, r1
 8004ce8:	6513      	str	r3, [r2, #80]	; 0x50
 8004cea:	e003      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cf0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cfc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8004d00:	f04f 0900 	mov.w	r9, #0
 8004d04:	ea58 0309 	orrs.w	r3, r8, r9
 8004d08:	d047      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d10:	2b04      	cmp	r3, #4
 8004d12:	d82a      	bhi.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004d14:	a201      	add	r2, pc, #4	; (adr r2, 8004d1c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d1a:	bf00      	nop
 8004d1c:	08004d31 	.word	0x08004d31
 8004d20:	08004d3f 	.word	0x08004d3f
 8004d24:	08004d55 	.word	0x08004d55
 8004d28:	08004d73 	.word	0x08004d73
 8004d2c:	08004d73 	.word	0x08004d73
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d30:	4b8e      	ldr	r3, [pc, #568]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d34:	4a8d      	ldr	r2, [pc, #564]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004d3c:	e01a      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d42:	3308      	adds	r3, #8
 8004d44:	2100      	movs	r1, #0
 8004d46:	4618      	mov	r0, r3
 8004d48:	f002 fb0e 	bl	8007368 <RCCEx_PLL2_Config>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004d52:	e00f      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d58:	3328      	adds	r3, #40	; 0x28
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f002 fbb5 	bl	80074cc <RCCEx_PLL3_Config>
 8004d62:	4603      	mov	r3, r0
 8004d64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004d68:	e004      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004d70:	e000      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004d72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d10a      	bne.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d7c:	4b7b      	ldr	r3, [pc, #492]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d80:	f023 0107 	bic.w	r1, r3, #7
 8004d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d8a:	4a78      	ldr	r2, [pc, #480]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d8c:	430b      	orrs	r3, r1
 8004d8e:	6513      	str	r3, [r2, #80]	; 0x50
 8004d90:	e003      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8004da6:	f04f 0b00 	mov.w	fp, #0
 8004daa:	ea5a 030b 	orrs.w	r3, sl, fp
 8004dae:	d04c      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004db6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dba:	d030      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004dbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dc0:	d829      	bhi.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004dc2:	2bc0      	cmp	r3, #192	; 0xc0
 8004dc4:	d02d      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004dc6:	2bc0      	cmp	r3, #192	; 0xc0
 8004dc8:	d825      	bhi.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004dca:	2b80      	cmp	r3, #128	; 0x80
 8004dcc:	d018      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004dce:	2b80      	cmp	r3, #128	; 0x80
 8004dd0:	d821      	bhi.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d002      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004dd6:	2b40      	cmp	r3, #64	; 0x40
 8004dd8:	d007      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004dda:	e01c      	b.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ddc:	4b63      	ldr	r3, [pc, #396]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de0:	4a62      	ldr	r2, [pc, #392]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004de2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004de6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004de8:	e01c      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dee:	3308      	adds	r3, #8
 8004df0:	2100      	movs	r1, #0
 8004df2:	4618      	mov	r0, r3
 8004df4:	f002 fab8 	bl	8007368 <RCCEx_PLL2_Config>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004dfe:	e011      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e04:	3328      	adds	r3, #40	; 0x28
 8004e06:	2100      	movs	r1, #0
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f002 fb5f 	bl	80074cc <RCCEx_PLL3_Config>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004e14:	e006      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004e1c:	e002      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004e1e:	bf00      	nop
 8004e20:	e000      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004e22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d10a      	bne.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004e2c:	4b4f      	ldr	r3, [pc, #316]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e30:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e3a:	4a4c      	ldr	r2, [pc, #304]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e3c:	430b      	orrs	r3, r1
 8004e3e:	6513      	str	r3, [r2, #80]	; 0x50
 8004e40:	e003      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e52:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004e56:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004e60:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8004e64:	460b      	mov	r3, r1
 8004e66:	4313      	orrs	r3, r2
 8004e68:	d053      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e6e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004e72:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e76:	d035      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004e78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e7c:	d82e      	bhi.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004e7e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004e82:	d031      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004e84:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004e88:	d828      	bhi.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004e8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e8e:	d01a      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004e90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e94:	d822      	bhi.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d003      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004e9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e9e:	d007      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004ea0:	e01c      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ea2:	4b32      	ldr	r3, [pc, #200]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea6:	4a31      	ldr	r2, [pc, #196]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004eac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004eae:	e01c      	b.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004eb4:	3308      	adds	r3, #8
 8004eb6:	2100      	movs	r1, #0
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f002 fa55 	bl	8007368 <RCCEx_PLL2_Config>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004ec4:	e011      	b.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004eca:	3328      	adds	r3, #40	; 0x28
 8004ecc:	2100      	movs	r1, #0
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f002 fafc 	bl	80074cc <RCCEx_PLL3_Config>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004eda:	e006      	b.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004ee2:	e002      	b.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004ee4:	bf00      	nop
 8004ee6:	e000      	b.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004ee8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d10b      	bne.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004ef2:	4b1e      	ldr	r3, [pc, #120]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ef6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8004efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004efe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004f02:	4a1a      	ldr	r2, [pc, #104]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f04:	430b      	orrs	r3, r1
 8004f06:	6593      	str	r3, [r2, #88]	; 0x58
 8004f08:	e003      	b.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004f1e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004f22:	2300      	movs	r3, #0
 8004f24:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004f28:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	d056      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f36:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004f3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f3e:	d038      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004f40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f44:	d831      	bhi.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004f46:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004f4a:	d034      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004f4c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004f50:	d82b      	bhi.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004f52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f56:	d01d      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004f58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f5c:	d825      	bhi.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d006      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004f62:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f66:	d00a      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004f68:	e01f      	b.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004f6a:	bf00      	nop
 8004f6c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f70:	4ba2      	ldr	r3, [pc, #648]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f74:	4aa1      	ldr	r2, [pc, #644]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004f7c:	e01c      	b.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f82:	3308      	adds	r3, #8
 8004f84:	2100      	movs	r1, #0
 8004f86:	4618      	mov	r0, r3
 8004f88:	f002 f9ee 	bl	8007368 <RCCEx_PLL2_Config>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004f92:	e011      	b.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f98:	3328      	adds	r3, #40	; 0x28
 8004f9a:	2100      	movs	r1, #0
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f002 fa95 	bl	80074cc <RCCEx_PLL3_Config>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004fa8:	e006      	b.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004fb0:	e002      	b.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004fb2:	bf00      	nop
 8004fb4:	e000      	b.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004fb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fb8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d10b      	bne.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004fc0:	4b8e      	ldr	r3, [pc, #568]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fcc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004fd0:	4a8a      	ldr	r2, [pc, #552]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004fd2:	430b      	orrs	r3, r1
 8004fd4:	6593      	str	r3, [r2, #88]	; 0x58
 8004fd6:	e003      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fd8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004fdc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004fec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004ff6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	d03a      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005000:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005006:	2b30      	cmp	r3, #48	; 0x30
 8005008:	d01f      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800500a:	2b30      	cmp	r3, #48	; 0x30
 800500c:	d819      	bhi.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800500e:	2b20      	cmp	r3, #32
 8005010:	d00c      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005012:	2b20      	cmp	r3, #32
 8005014:	d815      	bhi.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005016:	2b00      	cmp	r3, #0
 8005018:	d019      	beq.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800501a:	2b10      	cmp	r3, #16
 800501c:	d111      	bne.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800501e:	4b77      	ldr	r3, [pc, #476]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005022:	4a76      	ldr	r2, [pc, #472]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005028:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800502a:	e011      	b.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800502c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005030:	3308      	adds	r3, #8
 8005032:	2102      	movs	r1, #2
 8005034:	4618      	mov	r0, r3
 8005036:	f002 f997 	bl	8007368 <RCCEx_PLL2_Config>
 800503a:	4603      	mov	r3, r0
 800503c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005040:	e006      	b.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005048:	e002      	b.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800504a:	bf00      	nop
 800504c:	e000      	b.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800504e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005050:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005054:	2b00      	cmp	r3, #0
 8005056:	d10a      	bne.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005058:	4b68      	ldr	r3, [pc, #416]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800505a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800505c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005060:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005066:	4a65      	ldr	r2, [pc, #404]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005068:	430b      	orrs	r3, r1
 800506a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800506c:	e003      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800506e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005072:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005076:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800507a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005082:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005086:	2300      	movs	r3, #0
 8005088:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800508c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005090:	460b      	mov	r3, r1
 8005092:	4313      	orrs	r3, r2
 8005094:	d051      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005096:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800509a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800509c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050a0:	d035      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80050a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050a6:	d82e      	bhi.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80050a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80050ac:	d031      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80050ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80050b2:	d828      	bhi.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80050b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050b8:	d01a      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80050ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050be:	d822      	bhi.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d003      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x498>
 80050c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050c8:	d007      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80050ca:	e01c      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050cc:	4b4b      	ldr	r3, [pc, #300]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80050ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d0:	4a4a      	ldr	r2, [pc, #296]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80050d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80050d8:	e01c      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80050da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050de:	3308      	adds	r3, #8
 80050e0:	2100      	movs	r1, #0
 80050e2:	4618      	mov	r0, r3
 80050e4:	f002 f940 	bl	8007368 <RCCEx_PLL2_Config>
 80050e8:	4603      	mov	r3, r0
 80050ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80050ee:	e011      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80050f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050f4:	3328      	adds	r3, #40	; 0x28
 80050f6:	2100      	movs	r1, #0
 80050f8:	4618      	mov	r0, r3
 80050fa:	f002 f9e7 	bl	80074cc <RCCEx_PLL3_Config>
 80050fe:	4603      	mov	r3, r0
 8005100:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005104:	e006      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800510c:	e002      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800510e:	bf00      	nop
 8005110:	e000      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005112:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005114:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005118:	2b00      	cmp	r3, #0
 800511a:	d10a      	bne.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800511c:	4b37      	ldr	r3, [pc, #220]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800511e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005120:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005124:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800512a:	4a34      	ldr	r2, [pc, #208]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800512c:	430b      	orrs	r3, r1
 800512e:	6513      	str	r3, [r2, #80]	; 0x50
 8005130:	e003      	b.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005132:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005136:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800513a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800513e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005142:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005146:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800514a:	2300      	movs	r3, #0
 800514c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005150:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005154:	460b      	mov	r3, r1
 8005156:	4313      	orrs	r3, r2
 8005158:	d056      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800515a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800515e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005160:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005164:	d033      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005166:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800516a:	d82c      	bhi.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800516c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005170:	d02f      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005172:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005176:	d826      	bhi.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005178:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800517c:	d02b      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800517e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005182:	d820      	bhi.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005184:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005188:	d012      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800518a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800518e:	d81a      	bhi.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005190:	2b00      	cmp	r3, #0
 8005192:	d022      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005198:	d115      	bne.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800519a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800519e:	3308      	adds	r3, #8
 80051a0:	2101      	movs	r1, #1
 80051a2:	4618      	mov	r0, r3
 80051a4:	f002 f8e0 	bl	8007368 <RCCEx_PLL2_Config>
 80051a8:	4603      	mov	r3, r0
 80051aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80051ae:	e015      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80051b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051b4:	3328      	adds	r3, #40	; 0x28
 80051b6:	2101      	movs	r1, #1
 80051b8:	4618      	mov	r0, r3
 80051ba:	f002 f987 	bl	80074cc <RCCEx_PLL3_Config>
 80051be:	4603      	mov	r3, r0
 80051c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80051c4:	e00a      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80051cc:	e006      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80051ce:	bf00      	nop
 80051d0:	e004      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80051d2:	bf00      	nop
 80051d4:	e002      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80051d6:	bf00      	nop
 80051d8:	e000      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80051da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d10d      	bne.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80051e4:	4b05      	ldr	r3, [pc, #20]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80051e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051e8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80051ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051f2:	4a02      	ldr	r2, [pc, #8]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80051f4:	430b      	orrs	r3, r1
 80051f6:	6513      	str	r3, [r2, #80]	; 0x50
 80051f8:	e006      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80051fa:	bf00      	nop
 80051fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005200:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005204:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005208:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800520c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005210:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005214:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005218:	2300      	movs	r3, #0
 800521a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800521e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005222:	460b      	mov	r3, r1
 8005224:	4313      	orrs	r3, r2
 8005226:	d055      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005228:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800522c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005230:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005234:	d033      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005236:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800523a:	d82c      	bhi.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800523c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005240:	d02f      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005246:	d826      	bhi.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005248:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800524c:	d02b      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800524e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005252:	d820      	bhi.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005254:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005258:	d012      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800525a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800525e:	d81a      	bhi.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005260:	2b00      	cmp	r3, #0
 8005262:	d022      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005264:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005268:	d115      	bne.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800526a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800526e:	3308      	adds	r3, #8
 8005270:	2101      	movs	r1, #1
 8005272:	4618      	mov	r0, r3
 8005274:	f002 f878 	bl	8007368 <RCCEx_PLL2_Config>
 8005278:	4603      	mov	r3, r0
 800527a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800527e:	e015      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005280:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005284:	3328      	adds	r3, #40	; 0x28
 8005286:	2101      	movs	r1, #1
 8005288:	4618      	mov	r0, r3
 800528a:	f002 f91f 	bl	80074cc <RCCEx_PLL3_Config>
 800528e:	4603      	mov	r3, r0
 8005290:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005294:	e00a      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800529c:	e006      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800529e:	bf00      	nop
 80052a0:	e004      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80052a2:	bf00      	nop
 80052a4:	e002      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80052a6:	bf00      	nop
 80052a8:	e000      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80052aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d10b      	bne.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80052b4:	4ba3      	ldr	r3, [pc, #652]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052b8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80052bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80052c4:	4a9f      	ldr	r2, [pc, #636]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052c6:	430b      	orrs	r3, r1
 80052c8:	6593      	str	r3, [r2, #88]	; 0x58
 80052ca:	e003      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80052d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052dc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80052e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80052e4:	2300      	movs	r3, #0
 80052e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80052ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80052ee:	460b      	mov	r3, r1
 80052f0:	4313      	orrs	r3, r2
 80052f2:	d037      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80052f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052fe:	d00e      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005300:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005304:	d816      	bhi.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005306:	2b00      	cmp	r3, #0
 8005308:	d018      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800530a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800530e:	d111      	bne.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005310:	4b8c      	ldr	r3, [pc, #560]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005314:	4a8b      	ldr	r2, [pc, #556]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005316:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800531a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800531c:	e00f      	b.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800531e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005322:	3308      	adds	r3, #8
 8005324:	2101      	movs	r1, #1
 8005326:	4618      	mov	r0, r3
 8005328:	f002 f81e 	bl	8007368 <RCCEx_PLL2_Config>
 800532c:	4603      	mov	r3, r0
 800532e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005332:	e004      	b.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800533a:	e000      	b.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800533c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800533e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005342:	2b00      	cmp	r3, #0
 8005344:	d10a      	bne.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005346:	4b7f      	ldr	r3, [pc, #508]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800534a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800534e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005354:	4a7b      	ldr	r2, [pc, #492]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005356:	430b      	orrs	r3, r1
 8005358:	6513      	str	r3, [r2, #80]	; 0x50
 800535a:	e003      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800535c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005360:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005364:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005370:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005374:	2300      	movs	r3, #0
 8005376:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800537a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800537e:	460b      	mov	r3, r1
 8005380:	4313      	orrs	r3, r2
 8005382:	d039      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005384:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800538a:	2b03      	cmp	r3, #3
 800538c:	d81c      	bhi.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800538e:	a201      	add	r2, pc, #4	; (adr r2, 8005394 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005394:	080053d1 	.word	0x080053d1
 8005398:	080053a5 	.word	0x080053a5
 800539c:	080053b3 	.word	0x080053b3
 80053a0:	080053d1 	.word	0x080053d1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053a4:	4b67      	ldr	r3, [pc, #412]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a8:	4a66      	ldr	r2, [pc, #408]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80053b0:	e00f      	b.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80053b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053b6:	3308      	adds	r3, #8
 80053b8:	2102      	movs	r1, #2
 80053ba:	4618      	mov	r0, r3
 80053bc:	f001 ffd4 	bl	8007368 <RCCEx_PLL2_Config>
 80053c0:	4603      	mov	r3, r0
 80053c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80053c6:	e004      	b.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80053ce:	e000      	b.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80053d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d10a      	bne.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80053da:	4b5a      	ldr	r3, [pc, #360]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053de:	f023 0103 	bic.w	r1, r3, #3
 80053e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053e8:	4a56      	ldr	r2, [pc, #344]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053ea:	430b      	orrs	r3, r1
 80053ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80053ee:	e003      	b.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005400:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005404:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005408:	2300      	movs	r3, #0
 800540a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800540e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005412:	460b      	mov	r3, r1
 8005414:	4313      	orrs	r3, r2
 8005416:	f000 809f 	beq.w	8005558 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800541a:	4b4b      	ldr	r3, [pc, #300]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a4a      	ldr	r2, [pc, #296]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005424:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005426:	f7fb fd91 	bl	8000f4c <HAL_GetTick>
 800542a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800542e:	e00b      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005430:	f7fb fd8c 	bl	8000f4c <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	2b64      	cmp	r3, #100	; 0x64
 800543e:	d903      	bls.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005446:	e005      	b.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005448:	4b3f      	ldr	r3, [pc, #252]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005450:	2b00      	cmp	r3, #0
 8005452:	d0ed      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005454:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005458:	2b00      	cmp	r3, #0
 800545a:	d179      	bne.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800545c:	4b39      	ldr	r3, [pc, #228]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800545e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005460:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005464:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005468:	4053      	eors	r3, r2
 800546a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800546e:	2b00      	cmp	r3, #0
 8005470:	d015      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005472:	4b34      	ldr	r3, [pc, #208]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005476:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800547a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800547e:	4b31      	ldr	r3, [pc, #196]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005482:	4a30      	ldr	r2, [pc, #192]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005488:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800548a:	4b2e      	ldr	r3, [pc, #184]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800548c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800548e:	4a2d      	ldr	r2, [pc, #180]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005490:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005494:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005496:	4a2b      	ldr	r2, [pc, #172]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005498:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800549c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800549e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80054a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054aa:	d118      	bne.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ac:	f7fb fd4e 	bl	8000f4c <HAL_GetTick>
 80054b0:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054b4:	e00d      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054b6:	f7fb fd49 	bl	8000f4c <HAL_GetTick>
 80054ba:	4602      	mov	r2, r0
 80054bc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80054c0:	1ad2      	subs	r2, r2, r3
 80054c2:	f241 3388 	movw	r3, #5000	; 0x1388
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d903      	bls.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80054d0:	e005      	b.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054d2:	4b1c      	ldr	r3, [pc, #112]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d6:	f003 0302 	and.w	r3, r3, #2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d0eb      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80054de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d129      	bne.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80054ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054f6:	d10e      	bne.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80054f8:	4b12      	ldr	r3, [pc, #72]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005500:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005504:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005508:	091a      	lsrs	r2, r3, #4
 800550a:	4b10      	ldr	r3, [pc, #64]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800550c:	4013      	ands	r3, r2
 800550e:	4a0d      	ldr	r2, [pc, #52]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005510:	430b      	orrs	r3, r1
 8005512:	6113      	str	r3, [r2, #16]
 8005514:	e005      	b.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005516:	4b0b      	ldr	r3, [pc, #44]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	4a0a      	ldr	r2, [pc, #40]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800551c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005520:	6113      	str	r3, [r2, #16]
 8005522:	4b08      	ldr	r3, [pc, #32]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005524:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005526:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800552a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800552e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005532:	4a04      	ldr	r2, [pc, #16]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005534:	430b      	orrs	r3, r1
 8005536:	6713      	str	r3, [r2, #112]	; 0x70
 8005538:	e00e      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800553a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800553e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8005542:	e009      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005544:	58024400 	.word	0x58024400
 8005548:	58024800 	.word	0x58024800
 800554c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005550:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005554:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005558:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800555c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005560:	f002 0301 	and.w	r3, r2, #1
 8005564:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005568:	2300      	movs	r3, #0
 800556a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800556e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005572:	460b      	mov	r3, r1
 8005574:	4313      	orrs	r3, r2
 8005576:	f000 8089 	beq.w	800568c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800557a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800557e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005580:	2b28      	cmp	r3, #40	; 0x28
 8005582:	d86b      	bhi.n	800565c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005584:	a201      	add	r2, pc, #4	; (adr r2, 800558c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800558a:	bf00      	nop
 800558c:	08005665 	.word	0x08005665
 8005590:	0800565d 	.word	0x0800565d
 8005594:	0800565d 	.word	0x0800565d
 8005598:	0800565d 	.word	0x0800565d
 800559c:	0800565d 	.word	0x0800565d
 80055a0:	0800565d 	.word	0x0800565d
 80055a4:	0800565d 	.word	0x0800565d
 80055a8:	0800565d 	.word	0x0800565d
 80055ac:	08005631 	.word	0x08005631
 80055b0:	0800565d 	.word	0x0800565d
 80055b4:	0800565d 	.word	0x0800565d
 80055b8:	0800565d 	.word	0x0800565d
 80055bc:	0800565d 	.word	0x0800565d
 80055c0:	0800565d 	.word	0x0800565d
 80055c4:	0800565d 	.word	0x0800565d
 80055c8:	0800565d 	.word	0x0800565d
 80055cc:	08005647 	.word	0x08005647
 80055d0:	0800565d 	.word	0x0800565d
 80055d4:	0800565d 	.word	0x0800565d
 80055d8:	0800565d 	.word	0x0800565d
 80055dc:	0800565d 	.word	0x0800565d
 80055e0:	0800565d 	.word	0x0800565d
 80055e4:	0800565d 	.word	0x0800565d
 80055e8:	0800565d 	.word	0x0800565d
 80055ec:	08005665 	.word	0x08005665
 80055f0:	0800565d 	.word	0x0800565d
 80055f4:	0800565d 	.word	0x0800565d
 80055f8:	0800565d 	.word	0x0800565d
 80055fc:	0800565d 	.word	0x0800565d
 8005600:	0800565d 	.word	0x0800565d
 8005604:	0800565d 	.word	0x0800565d
 8005608:	0800565d 	.word	0x0800565d
 800560c:	08005665 	.word	0x08005665
 8005610:	0800565d 	.word	0x0800565d
 8005614:	0800565d 	.word	0x0800565d
 8005618:	0800565d 	.word	0x0800565d
 800561c:	0800565d 	.word	0x0800565d
 8005620:	0800565d 	.word	0x0800565d
 8005624:	0800565d 	.word	0x0800565d
 8005628:	0800565d 	.word	0x0800565d
 800562c:	08005665 	.word	0x08005665
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005630:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005634:	3308      	adds	r3, #8
 8005636:	2101      	movs	r1, #1
 8005638:	4618      	mov	r0, r3
 800563a:	f001 fe95 	bl	8007368 <RCCEx_PLL2_Config>
 800563e:	4603      	mov	r3, r0
 8005640:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005644:	e00f      	b.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005646:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800564a:	3328      	adds	r3, #40	; 0x28
 800564c:	2101      	movs	r1, #1
 800564e:	4618      	mov	r0, r3
 8005650:	f001 ff3c 	bl	80074cc <RCCEx_PLL3_Config>
 8005654:	4603      	mov	r3, r0
 8005656:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800565a:	e004      	b.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005662:	e000      	b.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005664:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005666:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800566a:	2b00      	cmp	r3, #0
 800566c:	d10a      	bne.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800566e:	4bbf      	ldr	r3, [pc, #764]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005672:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005676:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800567a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800567c:	4abb      	ldr	r2, [pc, #748]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800567e:	430b      	orrs	r3, r1
 8005680:	6553      	str	r3, [r2, #84]	; 0x54
 8005682:	e003      	b.n	800568c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005684:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005688:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800568c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005694:	f002 0302 	and.w	r3, r2, #2
 8005698:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800569c:	2300      	movs	r3, #0
 800569e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80056a2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80056a6:	460b      	mov	r3, r1
 80056a8:	4313      	orrs	r3, r2
 80056aa:	d041      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80056ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056b2:	2b05      	cmp	r3, #5
 80056b4:	d824      	bhi.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80056b6:	a201      	add	r2, pc, #4	; (adr r2, 80056bc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80056b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056bc:	08005709 	.word	0x08005709
 80056c0:	080056d5 	.word	0x080056d5
 80056c4:	080056eb 	.word	0x080056eb
 80056c8:	08005709 	.word	0x08005709
 80056cc:	08005709 	.word	0x08005709
 80056d0:	08005709 	.word	0x08005709
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80056d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056d8:	3308      	adds	r3, #8
 80056da:	2101      	movs	r1, #1
 80056dc:	4618      	mov	r0, r3
 80056de:	f001 fe43 	bl	8007368 <RCCEx_PLL2_Config>
 80056e2:	4603      	mov	r3, r0
 80056e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80056e8:	e00f      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80056ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056ee:	3328      	adds	r3, #40	; 0x28
 80056f0:	2101      	movs	r1, #1
 80056f2:	4618      	mov	r0, r3
 80056f4:	f001 feea 	bl	80074cc <RCCEx_PLL3_Config>
 80056f8:	4603      	mov	r3, r0
 80056fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80056fe:	e004      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005706:	e000      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005708:	bf00      	nop
    }

    if (ret == HAL_OK)
 800570a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800570e:	2b00      	cmp	r3, #0
 8005710:	d10a      	bne.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005712:	4b96      	ldr	r3, [pc, #600]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005716:	f023 0107 	bic.w	r1, r3, #7
 800571a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800571e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005720:	4a92      	ldr	r2, [pc, #584]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005722:	430b      	orrs	r3, r1
 8005724:	6553      	str	r3, [r2, #84]	; 0x54
 8005726:	e003      	b.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005728:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800572c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005730:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005738:	f002 0304 	and.w	r3, r2, #4
 800573c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005740:	2300      	movs	r3, #0
 8005742:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005746:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800574a:	460b      	mov	r3, r1
 800574c:	4313      	orrs	r3, r2
 800574e:	d044      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005750:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005754:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005758:	2b05      	cmp	r3, #5
 800575a:	d825      	bhi.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800575c:	a201      	add	r2, pc, #4	; (adr r2, 8005764 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800575e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005762:	bf00      	nop
 8005764:	080057b1 	.word	0x080057b1
 8005768:	0800577d 	.word	0x0800577d
 800576c:	08005793 	.word	0x08005793
 8005770:	080057b1 	.word	0x080057b1
 8005774:	080057b1 	.word	0x080057b1
 8005778:	080057b1 	.word	0x080057b1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800577c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005780:	3308      	adds	r3, #8
 8005782:	2101      	movs	r1, #1
 8005784:	4618      	mov	r0, r3
 8005786:	f001 fdef 	bl	8007368 <RCCEx_PLL2_Config>
 800578a:	4603      	mov	r3, r0
 800578c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005790:	e00f      	b.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005792:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005796:	3328      	adds	r3, #40	; 0x28
 8005798:	2101      	movs	r1, #1
 800579a:	4618      	mov	r0, r3
 800579c:	f001 fe96 	bl	80074cc <RCCEx_PLL3_Config>
 80057a0:	4603      	mov	r3, r0
 80057a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80057a6:	e004      	b.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80057ae:	e000      	b.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80057b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d10b      	bne.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80057ba:	4b6c      	ldr	r3, [pc, #432]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80057bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057be:	f023 0107 	bic.w	r1, r3, #7
 80057c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057ca:	4a68      	ldr	r2, [pc, #416]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80057cc:	430b      	orrs	r3, r1
 80057ce:	6593      	str	r3, [r2, #88]	; 0x58
 80057d0:	e003      	b.n	80057da <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80057da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e2:	f002 0320 	and.w	r3, r2, #32
 80057e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80057ea:	2300      	movs	r3, #0
 80057ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80057f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80057f4:	460b      	mov	r3, r1
 80057f6:	4313      	orrs	r3, r2
 80057f8:	d055      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80057fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005802:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005806:	d033      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005808:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800580c:	d82c      	bhi.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800580e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005812:	d02f      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005818:	d826      	bhi.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800581a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800581e:	d02b      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005820:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005824:	d820      	bhi.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005826:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800582a:	d012      	beq.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800582c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005830:	d81a      	bhi.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005832:	2b00      	cmp	r3, #0
 8005834:	d022      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005836:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800583a:	d115      	bne.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800583c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005840:	3308      	adds	r3, #8
 8005842:	2100      	movs	r1, #0
 8005844:	4618      	mov	r0, r3
 8005846:	f001 fd8f 	bl	8007368 <RCCEx_PLL2_Config>
 800584a:	4603      	mov	r3, r0
 800584c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005850:	e015      	b.n	800587e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005852:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005856:	3328      	adds	r3, #40	; 0x28
 8005858:	2102      	movs	r1, #2
 800585a:	4618      	mov	r0, r3
 800585c:	f001 fe36 	bl	80074cc <RCCEx_PLL3_Config>
 8005860:	4603      	mov	r3, r0
 8005862:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005866:	e00a      	b.n	800587e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800586e:	e006      	b.n	800587e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005870:	bf00      	nop
 8005872:	e004      	b.n	800587e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005874:	bf00      	nop
 8005876:	e002      	b.n	800587e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005878:	bf00      	nop
 800587a:	e000      	b.n	800587e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800587c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800587e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005882:	2b00      	cmp	r3, #0
 8005884:	d10b      	bne.n	800589e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005886:	4b39      	ldr	r3, [pc, #228]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800588a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800588e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005896:	4a35      	ldr	r2, [pc, #212]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005898:	430b      	orrs	r3, r1
 800589a:	6553      	str	r3, [r2, #84]	; 0x54
 800589c:	e003      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800589e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80058a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ae:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80058b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80058b6:	2300      	movs	r3, #0
 80058b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80058bc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80058c0:	460b      	mov	r3, r1
 80058c2:	4313      	orrs	r3, r2
 80058c4:	d058      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80058c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058ce:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80058d2:	d033      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80058d4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80058d8:	d82c      	bhi.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80058da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058de:	d02f      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80058e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058e4:	d826      	bhi.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80058e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058ea:	d02b      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80058ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058f0:	d820      	bhi.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80058f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058f6:	d012      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80058f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058fc:	d81a      	bhi.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d022      	beq.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005902:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005906:	d115      	bne.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005908:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800590c:	3308      	adds	r3, #8
 800590e:	2100      	movs	r1, #0
 8005910:	4618      	mov	r0, r3
 8005912:	f001 fd29 	bl	8007368 <RCCEx_PLL2_Config>
 8005916:	4603      	mov	r3, r0
 8005918:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800591c:	e015      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800591e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005922:	3328      	adds	r3, #40	; 0x28
 8005924:	2102      	movs	r1, #2
 8005926:	4618      	mov	r0, r3
 8005928:	f001 fdd0 	bl	80074cc <RCCEx_PLL3_Config>
 800592c:	4603      	mov	r3, r0
 800592e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005932:	e00a      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800593a:	e006      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800593c:	bf00      	nop
 800593e:	e004      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005940:	bf00      	nop
 8005942:	e002      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005944:	bf00      	nop
 8005946:	e000      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005948:	bf00      	nop
    }

    if (ret == HAL_OK)
 800594a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800594e:	2b00      	cmp	r3, #0
 8005950:	d10e      	bne.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005952:	4b06      	ldr	r3, [pc, #24]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005956:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800595a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800595e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005962:	4a02      	ldr	r2, [pc, #8]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005964:	430b      	orrs	r3, r1
 8005966:	6593      	str	r3, [r2, #88]	; 0x58
 8005968:	e006      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800596a:	bf00      	nop
 800596c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005970:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005974:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005978:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800597c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005980:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005984:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005988:	2300      	movs	r3, #0
 800598a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800598e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005992:	460b      	mov	r3, r1
 8005994:	4313      	orrs	r3, r2
 8005996:	d055      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005998:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800599c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80059a0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80059a4:	d033      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80059a6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80059aa:	d82c      	bhi.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80059ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059b0:	d02f      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80059b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059b6:	d826      	bhi.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80059b8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80059bc:	d02b      	beq.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80059be:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80059c2:	d820      	bhi.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80059c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059c8:	d012      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80059ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059ce:	d81a      	bhi.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d022      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80059d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059d8:	d115      	bne.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059de:	3308      	adds	r3, #8
 80059e0:	2100      	movs	r1, #0
 80059e2:	4618      	mov	r0, r3
 80059e4:	f001 fcc0 	bl	8007368 <RCCEx_PLL2_Config>
 80059e8:	4603      	mov	r3, r0
 80059ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80059ee:	e015      	b.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80059f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059f4:	3328      	adds	r3, #40	; 0x28
 80059f6:	2102      	movs	r1, #2
 80059f8:	4618      	mov	r0, r3
 80059fa:	f001 fd67 	bl	80074cc <RCCEx_PLL3_Config>
 80059fe:	4603      	mov	r3, r0
 8005a00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005a04:	e00a      	b.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005a0c:	e006      	b.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005a0e:	bf00      	nop
 8005a10:	e004      	b.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005a12:	bf00      	nop
 8005a14:	e002      	b.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005a16:	bf00      	nop
 8005a18:	e000      	b.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005a1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d10b      	bne.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005a24:	4ba1      	ldr	r3, [pc, #644]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a28:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a30:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005a34:	4a9d      	ldr	r2, [pc, #628]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a36:	430b      	orrs	r3, r1
 8005a38:	6593      	str	r3, [r2, #88]	; 0x58
 8005a3a:	e003      	b.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a40:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a4c:	f002 0308 	and.w	r3, r2, #8
 8005a50:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005a54:	2300      	movs	r3, #0
 8005a56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005a5a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005a5e:	460b      	mov	r3, r1
 8005a60:	4313      	orrs	r3, r2
 8005a62:	d01e      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a70:	d10c      	bne.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a76:	3328      	adds	r3, #40	; 0x28
 8005a78:	2102      	movs	r1, #2
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f001 fd26 	bl	80074cc <RCCEx_PLL3_Config>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d002      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005a8c:	4b87      	ldr	r3, [pc, #540]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a90:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a9c:	4a83      	ldr	r2, [pc, #524]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a9e:	430b      	orrs	r3, r1
 8005aa0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aaa:	f002 0310 	and.w	r3, r2, #16
 8005aae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005ab8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005abc:	460b      	mov	r3, r1
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	d01e      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ac6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005aca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ace:	d10c      	bne.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ad4:	3328      	adds	r3, #40	; 0x28
 8005ad6:	2102      	movs	r1, #2
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f001 fcf7 	bl	80074cc <RCCEx_PLL3_Config>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d002      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005aea:	4b70      	ldr	r3, [pc, #448]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005af6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005afa:	4a6c      	ldr	r2, [pc, #432]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005afc:	430b      	orrs	r3, r1
 8005afe:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b08:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005b0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b10:	2300      	movs	r3, #0
 8005b12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005b16:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	d03e      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b24:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005b28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b2c:	d022      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005b2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b32:	d81b      	bhi.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d003      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b3c:	d00b      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005b3e:	e015      	b.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b44:	3308      	adds	r3, #8
 8005b46:	2100      	movs	r1, #0
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f001 fc0d 	bl	8007368 <RCCEx_PLL2_Config>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005b54:	e00f      	b.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b5a:	3328      	adds	r3, #40	; 0x28
 8005b5c:	2102      	movs	r1, #2
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f001 fcb4 	bl	80074cc <RCCEx_PLL3_Config>
 8005b64:	4603      	mov	r3, r0
 8005b66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005b6a:	e004      	b.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b72:	e000      	b.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005b74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10b      	bne.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b7e:	4b4b      	ldr	r3, [pc, #300]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b82:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b8a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005b8e:	4a47      	ldr	r2, [pc, #284]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b90:	430b      	orrs	r3, r1
 8005b92:	6593      	str	r3, [r2, #88]	; 0x58
 8005b94:	e003      	b.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005baa:	67bb      	str	r3, [r7, #120]	; 0x78
 8005bac:	2300      	movs	r3, #0
 8005bae:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005bb0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	d03b      	beq.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bc2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005bc6:	d01f      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005bc8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005bcc:	d818      	bhi.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005bce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bd2:	d003      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005bd4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005bd8:	d007      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005bda:	e011      	b.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bdc:	4b33      	ldr	r3, [pc, #204]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be0:	4a32      	ldr	r2, [pc, #200]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005be2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005be6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005be8:	e00f      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bee:	3328      	adds	r3, #40	; 0x28
 8005bf0:	2101      	movs	r1, #1
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f001 fc6a 	bl	80074cc <RCCEx_PLL3_Config>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005bfe:	e004      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005c06:	e000      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005c08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d10b      	bne.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c12:	4b26      	ldr	r3, [pc, #152]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c16:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c22:	4a22      	ldr	r2, [pc, #136]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c24:	430b      	orrs	r3, r1
 8005c26:	6553      	str	r3, [r2, #84]	; 0x54
 8005c28:	e003      	b.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005c3e:	673b      	str	r3, [r7, #112]	; 0x70
 8005c40:	2300      	movs	r3, #0
 8005c42:	677b      	str	r3, [r7, #116]	; 0x74
 8005c44:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005c48:	460b      	mov	r3, r1
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	d034      	beq.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d003      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c5c:	d007      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005c5e:	e011      	b.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c60:	4b12      	ldr	r3, [pc, #72]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c64:	4a11      	ldr	r2, [pc, #68]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005c6c:	e00e      	b.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c72:	3308      	adds	r3, #8
 8005c74:	2102      	movs	r1, #2
 8005c76:	4618      	mov	r0, r3
 8005c78:	f001 fb76 	bl	8007368 <RCCEx_PLL2_Config>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005c82:	e003      	b.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005c8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d10d      	bne.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005c94:	4b05      	ldr	r3, [pc, #20]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ca2:	4a02      	ldr	r2, [pc, #8]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ca4:	430b      	orrs	r3, r1
 8005ca6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005ca8:	e006      	b.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005caa:	bf00      	nop
 8005cac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cb4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005cc4:	66bb      	str	r3, [r7, #104]	; 0x68
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005cca:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005cce:	460b      	mov	r3, r1
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	d00c      	beq.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cd8:	3328      	adds	r3, #40	; 0x28
 8005cda:	2102      	movs	r1, #2
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f001 fbf5 	bl	80074cc <RCCEx_PLL3_Config>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d002      	beq.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005cfa:	663b      	str	r3, [r7, #96]	; 0x60
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	667b      	str	r3, [r7, #100]	; 0x64
 8005d00:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005d04:	460b      	mov	r3, r1
 8005d06:	4313      	orrs	r3, r2
 8005d08:	d038      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d16:	d018      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005d18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d1c:	d811      	bhi.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005d1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d22:	d014      	beq.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005d24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d28:	d80b      	bhi.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d011      	beq.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005d2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d32:	d106      	bne.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d34:	4bc3      	ldr	r3, [pc, #780]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d38:	4ac2      	ldr	r2, [pc, #776]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005d40:	e008      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005d48:	e004      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005d4a:	bf00      	nop
 8005d4c:	e002      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005d4e:	bf00      	nop
 8005d50:	e000      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005d52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d10b      	bne.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d5c:	4bb9      	ldr	r3, [pc, #740]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d60:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d6c:	4ab5      	ldr	r2, [pc, #724]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d6e:	430b      	orrs	r3, r1
 8005d70:	6553      	str	r3, [r2, #84]	; 0x54
 8005d72:	e003      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d78:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d84:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005d88:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d8e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005d92:	460b      	mov	r3, r1
 8005d94:	4313      	orrs	r3, r2
 8005d96:	d009      	beq.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005d98:	4baa      	ldr	r3, [pc, #680]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d9c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005da6:	4aa7      	ldr	r2, [pc, #668]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005da8:	430b      	orrs	r3, r1
 8005daa:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8005db8:	653b      	str	r3, [r7, #80]	; 0x50
 8005dba:	2300      	movs	r3, #0
 8005dbc:	657b      	str	r3, [r7, #84]	; 0x54
 8005dbe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	d00a      	beq.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005dc8:	4b9e      	ldr	r3, [pc, #632]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8005dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dd4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005dd8:	4a9a      	ldr	r2, [pc, #616]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005dda:	430b      	orrs	r3, r1
 8005ddc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005dea:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dec:	2300      	movs	r3, #0
 8005dee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005df0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005df4:	460b      	mov	r3, r1
 8005df6:	4313      	orrs	r3, r2
 8005df8:	d009      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005dfa:	4b92      	ldr	r3, [pc, #584]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005dfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dfe:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8005e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e08:	4a8e      	ldr	r2, [pc, #568]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e0a:	430b      	orrs	r3, r1
 8005e0c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e16:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8005e1a:	643b      	str	r3, [r7, #64]	; 0x40
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	647b      	str	r3, [r7, #68]	; 0x44
 8005e20:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005e24:	460b      	mov	r3, r1
 8005e26:	4313      	orrs	r3, r2
 8005e28:	d00e      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005e2a:	4b86      	ldr	r3, [pc, #536]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	4a85      	ldr	r2, [pc, #532]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005e34:	6113      	str	r3, [r2, #16]
 8005e36:	4b83      	ldr	r3, [pc, #524]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e38:	6919      	ldr	r1, [r3, #16]
 8005e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e3e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005e42:	4a80      	ldr	r2, [pc, #512]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e44:	430b      	orrs	r3, r1
 8005e46:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e50:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005e54:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e56:	2300      	movs	r3, #0
 8005e58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e5a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005e5e:	460b      	mov	r3, r1
 8005e60:	4313      	orrs	r3, r2
 8005e62:	d009      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005e64:	4b77      	ldr	r3, [pc, #476]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e68:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e72:	4a74      	ldr	r2, [pc, #464]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e74:	430b      	orrs	r3, r1
 8005e76:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e80:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005e84:	633b      	str	r3, [r7, #48]	; 0x30
 8005e86:	2300      	movs	r3, #0
 8005e88:	637b      	str	r3, [r7, #52]	; 0x34
 8005e8a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005e8e:	460b      	mov	r3, r1
 8005e90:	4313      	orrs	r3, r2
 8005e92:	d00a      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005e94:	4b6b      	ldr	r3, [pc, #428]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e98:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ea4:	4a67      	ldr	r2, [pc, #412]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ea6:	430b      	orrs	r3, r1
 8005ea8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb2:	2100      	movs	r1, #0
 8005eb4:	62b9      	str	r1, [r7, #40]	; 0x28
 8005eb6:	f003 0301 	and.w	r3, r3, #1
 8005eba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ebc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	d011      	beq.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eca:	3308      	adds	r3, #8
 8005ecc:	2100      	movs	r1, #0
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f001 fa4a 	bl	8007368 <RCCEx_PLL2_Config>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005eda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d003      	beq.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ee2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ee6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef2:	2100      	movs	r1, #0
 8005ef4:	6239      	str	r1, [r7, #32]
 8005ef6:	f003 0302 	and.w	r3, r3, #2
 8005efa:	627b      	str	r3, [r7, #36]	; 0x24
 8005efc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005f00:	460b      	mov	r3, r1
 8005f02:	4313      	orrs	r3, r2
 8005f04:	d011      	beq.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f0a:	3308      	adds	r3, #8
 8005f0c:	2101      	movs	r1, #1
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f001 fa2a 	bl	8007368 <RCCEx_PLL2_Config>
 8005f14:	4603      	mov	r3, r0
 8005f16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005f1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d003      	beq.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f32:	2100      	movs	r1, #0
 8005f34:	61b9      	str	r1, [r7, #24]
 8005f36:	f003 0304 	and.w	r3, r3, #4
 8005f3a:	61fb      	str	r3, [r7, #28]
 8005f3c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005f40:	460b      	mov	r3, r1
 8005f42:	4313      	orrs	r3, r2
 8005f44:	d011      	beq.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f4a:	3308      	adds	r3, #8
 8005f4c:	2102      	movs	r1, #2
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f001 fa0a 	bl	8007368 <RCCEx_PLL2_Config>
 8005f54:	4603      	mov	r3, r0
 8005f56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005f5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d003      	beq.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f72:	2100      	movs	r1, #0
 8005f74:	6139      	str	r1, [r7, #16]
 8005f76:	f003 0308 	and.w	r3, r3, #8
 8005f7a:	617b      	str	r3, [r7, #20]
 8005f7c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005f80:	460b      	mov	r3, r1
 8005f82:	4313      	orrs	r3, r2
 8005f84:	d011      	beq.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f8a:	3328      	adds	r3, #40	; 0x28
 8005f8c:	2100      	movs	r1, #0
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f001 fa9c 	bl	80074cc <RCCEx_PLL3_Config>
 8005f94:	4603      	mov	r3, r0
 8005f96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8005f9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d003      	beq.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fa2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005fa6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb2:	2100      	movs	r1, #0
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	f003 0310 	and.w	r3, r3, #16
 8005fba:	60fb      	str	r3, [r7, #12]
 8005fbc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	d011      	beq.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fca:	3328      	adds	r3, #40	; 0x28
 8005fcc:	2101      	movs	r1, #1
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f001 fa7c 	bl	80074cc <RCCEx_PLL3_Config>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005fda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d003      	beq.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fe2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005fe6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff2:	2100      	movs	r1, #0
 8005ff4:	6039      	str	r1, [r7, #0]
 8005ff6:	f003 0320 	and.w	r3, r3, #32
 8005ffa:	607b      	str	r3, [r7, #4]
 8005ffc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006000:	460b      	mov	r3, r1
 8006002:	4313      	orrs	r3, r2
 8006004:	d011      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006006:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800600a:	3328      	adds	r3, #40	; 0x28
 800600c:	2102      	movs	r1, #2
 800600e:	4618      	mov	r0, r3
 8006010:	f001 fa5c 	bl	80074cc <RCCEx_PLL3_Config>
 8006014:	4603      	mov	r3, r0
 8006016:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800601a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800601e:	2b00      	cmp	r3, #0
 8006020:	d003      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006022:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006026:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800602a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800602e:	2b00      	cmp	r3, #0
 8006030:	d101      	bne.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006032:	2300      	movs	r3, #0
 8006034:	e000      	b.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
}
 8006038:	4618      	mov	r0, r3
 800603a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800603e:	46bd      	mov	sp, r7
 8006040:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006044:	58024400 	.word	0x58024400

08006048 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b090      	sub	sp, #64	; 0x40
 800604c:	af00      	add	r7, sp, #0
 800604e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006052:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006056:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800605a:	430b      	orrs	r3, r1
 800605c:	f040 8094 	bne.w	8006188 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006060:	4b9e      	ldr	r3, [pc, #632]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006064:	f003 0307 	and.w	r3, r3, #7
 8006068:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800606a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606c:	2b04      	cmp	r3, #4
 800606e:	f200 8087 	bhi.w	8006180 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006072:	a201      	add	r2, pc, #4	; (adr r2, 8006078 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006078:	0800608d 	.word	0x0800608d
 800607c:	080060b5 	.word	0x080060b5
 8006080:	080060dd 	.word	0x080060dd
 8006084:	08006179 	.word	0x08006179
 8006088:	08006105 	.word	0x08006105
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800608c:	4b93      	ldr	r3, [pc, #588]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006094:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006098:	d108      	bne.n	80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800609a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800609e:	4618      	mov	r0, r3
 80060a0:	f001 f810 	bl	80070c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80060a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060a8:	f000 bd45 	b.w	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80060ac:	2300      	movs	r3, #0
 80060ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060b0:	f000 bd41 	b.w	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80060b4:	4b89      	ldr	r3, [pc, #548]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060c0:	d108      	bne.n	80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060c2:	f107 0318 	add.w	r3, r7, #24
 80060c6:	4618      	mov	r0, r3
 80060c8:	f000 fd54 	bl	8006b74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060d0:	f000 bd31 	b.w	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80060d4:	2300      	movs	r3, #0
 80060d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060d8:	f000 bd2d 	b.w	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80060dc:	4b7f      	ldr	r3, [pc, #508]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060e8:	d108      	bne.n	80060fc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060ea:	f107 030c 	add.w	r3, r7, #12
 80060ee:	4618      	mov	r0, r3
 80060f0:	f000 fe94 	bl	8006e1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060f8:	f000 bd1d 	b.w	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80060fc:	2300      	movs	r3, #0
 80060fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006100:	f000 bd19 	b.w	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006104:	4b75      	ldr	r3, [pc, #468]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006108:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800610c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800610e:	4b73      	ldr	r3, [pc, #460]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 0304 	and.w	r3, r3, #4
 8006116:	2b04      	cmp	r3, #4
 8006118:	d10c      	bne.n	8006134 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800611a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800611c:	2b00      	cmp	r3, #0
 800611e:	d109      	bne.n	8006134 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006120:	4b6e      	ldr	r3, [pc, #440]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	08db      	lsrs	r3, r3, #3
 8006126:	f003 0303 	and.w	r3, r3, #3
 800612a:	4a6d      	ldr	r2, [pc, #436]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800612c:	fa22 f303 	lsr.w	r3, r2, r3
 8006130:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006132:	e01f      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006134:	4b69      	ldr	r3, [pc, #420]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800613c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006140:	d106      	bne.n	8006150 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006144:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006148:	d102      	bne.n	8006150 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800614a:	4b66      	ldr	r3, [pc, #408]	; (80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800614c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800614e:	e011      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006150:	4b62      	ldr	r3, [pc, #392]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006158:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800615c:	d106      	bne.n	800616c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800615e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006160:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006164:	d102      	bne.n	800616c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006166:	4b60      	ldr	r3, [pc, #384]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006168:	63fb      	str	r3, [r7, #60]	; 0x3c
 800616a:	e003      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800616c:	2300      	movs	r3, #0
 800616e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006170:	f000 bce1 	b.w	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006174:	f000 bcdf 	b.w	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006178:	4b5c      	ldr	r3, [pc, #368]	; (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800617a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800617c:	f000 bcdb 	b.w	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006180:	2300      	movs	r3, #0
 8006182:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006184:	f000 bcd7 	b.w	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006188:	e9d7 2300 	ldrd	r2, r3, [r7]
 800618c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8006190:	430b      	orrs	r3, r1
 8006192:	f040 80ad 	bne.w	80062f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006196:	4b51      	ldr	r3, [pc, #324]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800619a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800619e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80061a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061a6:	d056      	beq.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80061a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061ae:	f200 8090 	bhi.w	80062d2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80061b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b4:	2bc0      	cmp	r3, #192	; 0xc0
 80061b6:	f000 8088 	beq.w	80062ca <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80061ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061bc:	2bc0      	cmp	r3, #192	; 0xc0
 80061be:	f200 8088 	bhi.w	80062d2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80061c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c4:	2b80      	cmp	r3, #128	; 0x80
 80061c6:	d032      	beq.n	800622e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80061c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ca:	2b80      	cmp	r3, #128	; 0x80
 80061cc:	f200 8081 	bhi.w	80062d2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80061d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d003      	beq.n	80061de <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80061d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d8:	2b40      	cmp	r3, #64	; 0x40
 80061da:	d014      	beq.n	8006206 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80061dc:	e079      	b.n	80062d2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80061de:	4b3f      	ldr	r3, [pc, #252]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061ea:	d108      	bne.n	80061fe <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80061ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061f0:	4618      	mov	r0, r3
 80061f2:	f000 ff67 	bl	80070c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80061f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061fa:	f000 bc9c 	b.w	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80061fe:	2300      	movs	r3, #0
 8006200:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006202:	f000 bc98 	b.w	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006206:	4b35      	ldr	r3, [pc, #212]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800620e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006212:	d108      	bne.n	8006226 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006214:	f107 0318 	add.w	r3, r7, #24
 8006218:	4618      	mov	r0, r3
 800621a:	f000 fcab 	bl	8006b74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006222:	f000 bc88 	b.w	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006226:	2300      	movs	r3, #0
 8006228:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800622a:	f000 bc84 	b.w	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800622e:	4b2b      	ldr	r3, [pc, #172]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006236:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800623a:	d108      	bne.n	800624e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800623c:	f107 030c 	add.w	r3, r7, #12
 8006240:	4618      	mov	r0, r3
 8006242:	f000 fdeb 	bl	8006e1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800624a:	f000 bc74 	b.w	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800624e:	2300      	movs	r3, #0
 8006250:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006252:	f000 bc70 	b.w	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006256:	4b21      	ldr	r3, [pc, #132]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800625a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800625e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006260:	4b1e      	ldr	r3, [pc, #120]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 0304 	and.w	r3, r3, #4
 8006268:	2b04      	cmp	r3, #4
 800626a:	d10c      	bne.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800626c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800626e:	2b00      	cmp	r3, #0
 8006270:	d109      	bne.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006272:	4b1a      	ldr	r3, [pc, #104]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	08db      	lsrs	r3, r3, #3
 8006278:	f003 0303 	and.w	r3, r3, #3
 800627c:	4a18      	ldr	r2, [pc, #96]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800627e:	fa22 f303 	lsr.w	r3, r2, r3
 8006282:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006284:	e01f      	b.n	80062c6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006286:	4b15      	ldr	r3, [pc, #84]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800628e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006292:	d106      	bne.n	80062a2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006296:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800629a:	d102      	bne.n	80062a2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800629c:	4b11      	ldr	r3, [pc, #68]	; (80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800629e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062a0:	e011      	b.n	80062c6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80062a2:	4b0e      	ldr	r3, [pc, #56]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062ae:	d106      	bne.n	80062be <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80062b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062b6:	d102      	bne.n	80062be <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80062b8:	4b0b      	ldr	r3, [pc, #44]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80062ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062bc:	e003      	b.n	80062c6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80062be:	2300      	movs	r3, #0
 80062c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80062c2:	f000 bc38 	b.w	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80062c6:	f000 bc36 	b.w	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80062ca:	4b08      	ldr	r3, [pc, #32]	; (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80062cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062ce:	f000 bc32 	b.w	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80062d2:	2300      	movs	r3, #0
 80062d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062d6:	f000 bc2e 	b.w	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80062da:	bf00      	nop
 80062dc:	58024400 	.word	0x58024400
 80062e0:	03d09000 	.word	0x03d09000
 80062e4:	003d0900 	.word	0x003d0900
 80062e8:	017d7840 	.word	0x017d7840
 80062ec:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80062f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062f4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80062f8:	430b      	orrs	r3, r1
 80062fa:	f040 809c 	bne.w	8006436 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80062fe:	4b9e      	ldr	r3, [pc, #632]	; (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006302:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006306:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800630e:	d054      	beq.n	80063ba <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006312:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006316:	f200 808b 	bhi.w	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800631a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006320:	f000 8083 	beq.w	800642a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006326:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800632a:	f200 8081 	bhi.w	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800632e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006330:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006334:	d02f      	beq.n	8006396 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8006336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006338:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800633c:	d878      	bhi.n	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800633e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006340:	2b00      	cmp	r3, #0
 8006342:	d004      	beq.n	800634e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006346:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800634a:	d012      	beq.n	8006372 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800634c:	e070      	b.n	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800634e:	4b8a      	ldr	r3, [pc, #552]	; (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006356:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800635a:	d107      	bne.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800635c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006360:	4618      	mov	r0, r3
 8006362:	f000 feaf 	bl	80070c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006368:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800636a:	e3e4      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800636c:	2300      	movs	r3, #0
 800636e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006370:	e3e1      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006372:	4b81      	ldr	r3, [pc, #516]	; (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800637a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800637e:	d107      	bne.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006380:	f107 0318 	add.w	r3, r7, #24
 8006384:	4618      	mov	r0, r3
 8006386:	f000 fbf5 	bl	8006b74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800638e:	e3d2      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006390:	2300      	movs	r3, #0
 8006392:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006394:	e3cf      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006396:	4b78      	ldr	r3, [pc, #480]	; (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800639e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063a2:	d107      	bne.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063a4:	f107 030c 	add.w	r3, r7, #12
 80063a8:	4618      	mov	r0, r3
 80063aa:	f000 fd37 	bl	8006e1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80063b2:	e3c0      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80063b4:	2300      	movs	r3, #0
 80063b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063b8:	e3bd      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80063ba:	4b6f      	ldr	r3, [pc, #444]	; (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80063bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80063c2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80063c4:	4b6c      	ldr	r3, [pc, #432]	; (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f003 0304 	and.w	r3, r3, #4
 80063cc:	2b04      	cmp	r3, #4
 80063ce:	d10c      	bne.n	80063ea <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80063d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d109      	bne.n	80063ea <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80063d6:	4b68      	ldr	r3, [pc, #416]	; (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	08db      	lsrs	r3, r3, #3
 80063dc:	f003 0303 	and.w	r3, r3, #3
 80063e0:	4a66      	ldr	r2, [pc, #408]	; (800657c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80063e2:	fa22 f303 	lsr.w	r3, r2, r3
 80063e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063e8:	e01e      	b.n	8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80063ea:	4b63      	ldr	r3, [pc, #396]	; (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063f6:	d106      	bne.n	8006406 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80063f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063fe:	d102      	bne.n	8006406 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006400:	4b5f      	ldr	r3, [pc, #380]	; (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006402:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006404:	e010      	b.n	8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006406:	4b5c      	ldr	r3, [pc, #368]	; (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800640e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006412:	d106      	bne.n	8006422 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006416:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800641a:	d102      	bne.n	8006422 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800641c:	4b59      	ldr	r3, [pc, #356]	; (8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800641e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006420:	e002      	b.n	8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006422:	2300      	movs	r3, #0
 8006424:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006426:	e386      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006428:	e385      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800642a:	4b57      	ldr	r3, [pc, #348]	; (8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800642c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800642e:	e382      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006430:	2300      	movs	r3, #0
 8006432:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006434:	e37f      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006436:	e9d7 2300 	ldrd	r2, r3, [r7]
 800643a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800643e:	430b      	orrs	r3, r1
 8006440:	f040 80a7 	bne.w	8006592 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006444:	4b4c      	ldr	r3, [pc, #304]	; (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006448:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800644c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800644e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006450:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006454:	d055      	beq.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8006456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006458:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800645c:	f200 8096 	bhi.w	800658c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006462:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006466:	f000 8084 	beq.w	8006572 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800646a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006470:	f200 808c 	bhi.w	800658c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006476:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800647a:	d030      	beq.n	80064de <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800647c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006482:	f200 8083 	bhi.w	800658c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006488:	2b00      	cmp	r3, #0
 800648a:	d004      	beq.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800648c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800648e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006492:	d012      	beq.n	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006494:	e07a      	b.n	800658c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006496:	4b38      	ldr	r3, [pc, #224]	; (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800649e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064a2:	d107      	bne.n	80064b4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80064a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064a8:	4618      	mov	r0, r3
 80064aa:	f000 fe0b 	bl	80070c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80064ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064b2:	e340      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80064b4:	2300      	movs	r3, #0
 80064b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064b8:	e33d      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80064ba:	4b2f      	ldr	r3, [pc, #188]	; (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064c6:	d107      	bne.n	80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064c8:	f107 0318 	add.w	r3, r7, #24
 80064cc:	4618      	mov	r0, r3
 80064ce:	f000 fb51 	bl	8006b74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064d6:	e32e      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80064d8:	2300      	movs	r3, #0
 80064da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064dc:	e32b      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80064de:	4b26      	ldr	r3, [pc, #152]	; (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064ea:	d107      	bne.n	80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064ec:	f107 030c 	add.w	r3, r7, #12
 80064f0:	4618      	mov	r0, r3
 80064f2:	f000 fc93 	bl	8006e1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064fa:	e31c      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80064fc:	2300      	movs	r3, #0
 80064fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006500:	e319      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006502:	4b1d      	ldr	r3, [pc, #116]	; (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006506:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800650a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800650c:	4b1a      	ldr	r3, [pc, #104]	; (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 0304 	and.w	r3, r3, #4
 8006514:	2b04      	cmp	r3, #4
 8006516:	d10c      	bne.n	8006532 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800651a:	2b00      	cmp	r3, #0
 800651c:	d109      	bne.n	8006532 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800651e:	4b16      	ldr	r3, [pc, #88]	; (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	08db      	lsrs	r3, r3, #3
 8006524:	f003 0303 	and.w	r3, r3, #3
 8006528:	4a14      	ldr	r2, [pc, #80]	; (800657c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800652a:	fa22 f303 	lsr.w	r3, r2, r3
 800652e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006530:	e01e      	b.n	8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006532:	4b11      	ldr	r3, [pc, #68]	; (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800653a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800653e:	d106      	bne.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006542:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006546:	d102      	bne.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006548:	4b0d      	ldr	r3, [pc, #52]	; (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800654a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800654c:	e010      	b.n	8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800654e:	4b0a      	ldr	r3, [pc, #40]	; (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006556:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800655a:	d106      	bne.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800655c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800655e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006562:	d102      	bne.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006564:	4b07      	ldr	r3, [pc, #28]	; (8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006566:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006568:	e002      	b.n	8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800656a:	2300      	movs	r3, #0
 800656c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800656e:	e2e2      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006570:	e2e1      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006572:	4b05      	ldr	r3, [pc, #20]	; (8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006574:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006576:	e2de      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006578:	58024400 	.word	0x58024400
 800657c:	03d09000 	.word	0x03d09000
 8006580:	003d0900 	.word	0x003d0900
 8006584:	017d7840 	.word	0x017d7840
 8006588:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800658c:	2300      	movs	r3, #0
 800658e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006590:	e2d1      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006592:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006596:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800659a:	430b      	orrs	r3, r1
 800659c:	f040 809c 	bne.w	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80065a0:	4b93      	ldr	r3, [pc, #588]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80065a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065a4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80065a8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80065aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065b0:	d054      	beq.n	800665c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80065b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065b8:	f200 808b 	bhi.w	80066d2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80065bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80065c2:	f000 8083 	beq.w	80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80065c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80065cc:	f200 8081 	bhi.w	80066d2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80065d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065d6:	d02f      	beq.n	8006638 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80065d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065de:	d878      	bhi.n	80066d2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80065e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d004      	beq.n	80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80065e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ec:	d012      	beq.n	8006614 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80065ee:	e070      	b.n	80066d2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80065f0:	4b7f      	ldr	r3, [pc, #508]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80065fc:	d107      	bne.n	800660e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80065fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006602:	4618      	mov	r0, r3
 8006604:	f000 fd5e 	bl	80070c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800660c:	e293      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800660e:	2300      	movs	r3, #0
 8006610:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006612:	e290      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006614:	4b76      	ldr	r3, [pc, #472]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800661c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006620:	d107      	bne.n	8006632 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006622:	f107 0318 	add.w	r3, r7, #24
 8006626:	4618      	mov	r0, r3
 8006628:	f000 faa4 	bl	8006b74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800662c:	69bb      	ldr	r3, [r7, #24]
 800662e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006630:	e281      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006632:	2300      	movs	r3, #0
 8006634:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006636:	e27e      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006638:	4b6d      	ldr	r3, [pc, #436]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006640:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006644:	d107      	bne.n	8006656 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006646:	f107 030c 	add.w	r3, r7, #12
 800664a:	4618      	mov	r0, r3
 800664c:	f000 fbe6 	bl	8006e1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006654:	e26f      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006656:	2300      	movs	r3, #0
 8006658:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800665a:	e26c      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800665c:	4b64      	ldr	r3, [pc, #400]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800665e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006660:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006664:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006666:	4b62      	ldr	r3, [pc, #392]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 0304 	and.w	r3, r3, #4
 800666e:	2b04      	cmp	r3, #4
 8006670:	d10c      	bne.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006674:	2b00      	cmp	r3, #0
 8006676:	d109      	bne.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006678:	4b5d      	ldr	r3, [pc, #372]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	08db      	lsrs	r3, r3, #3
 800667e:	f003 0303 	and.w	r3, r3, #3
 8006682:	4a5c      	ldr	r2, [pc, #368]	; (80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006684:	fa22 f303 	lsr.w	r3, r2, r3
 8006688:	63fb      	str	r3, [r7, #60]	; 0x3c
 800668a:	e01e      	b.n	80066ca <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800668c:	4b58      	ldr	r3, [pc, #352]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006694:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006698:	d106      	bne.n	80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800669a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800669c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066a0:	d102      	bne.n	80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80066a2:	4b55      	ldr	r3, [pc, #340]	; (80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80066a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066a6:	e010      	b.n	80066ca <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80066a8:	4b51      	ldr	r3, [pc, #324]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066b4:	d106      	bne.n	80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80066b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066bc:	d102      	bne.n	80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80066be:	4b4f      	ldr	r3, [pc, #316]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80066c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066c2:	e002      	b.n	80066ca <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80066c4:	2300      	movs	r3, #0
 80066c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80066c8:	e235      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80066ca:	e234      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80066cc:	4b4c      	ldr	r3, [pc, #304]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80066ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066d0:	e231      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80066d2:	2300      	movs	r3, #0
 80066d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066d6:	e22e      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80066d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066dc:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80066e0:	430b      	orrs	r3, r1
 80066e2:	f040 808f 	bne.w	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80066e6:	4b42      	ldr	r3, [pc, #264]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80066e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066ea:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80066ee:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80066f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066f6:	d06b      	beq.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80066f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066fe:	d874      	bhi.n	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006702:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006706:	d056      	beq.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800670a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800670e:	d86c      	bhi.n	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006712:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006716:	d03b      	beq.n	8006790 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800671a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800671e:	d864      	bhi.n	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006722:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006726:	d021      	beq.n	800676c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800672a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800672e:	d85c      	bhi.n	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006732:	2b00      	cmp	r3, #0
 8006734:	d004      	beq.n	8006740 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800673c:	d004      	beq.n	8006748 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800673e:	e054      	b.n	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006740:	f7fe fa62 	bl	8004c08 <HAL_RCC_GetPCLK1Freq>
 8006744:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006746:	e1f6      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006748:	4b29      	ldr	r3, [pc, #164]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006750:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006754:	d107      	bne.n	8006766 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006756:	f107 0318 	add.w	r3, r7, #24
 800675a:	4618      	mov	r0, r3
 800675c:	f000 fa0a 	bl	8006b74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006764:	e1e7      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006766:	2300      	movs	r3, #0
 8006768:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800676a:	e1e4      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800676c:	4b20      	ldr	r3, [pc, #128]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006774:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006778:	d107      	bne.n	800678a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800677a:	f107 030c 	add.w	r3, r7, #12
 800677e:	4618      	mov	r0, r3
 8006780:	f000 fb4c 	bl	8006e1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006788:	e1d5      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800678a:	2300      	movs	r3, #0
 800678c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800678e:	e1d2      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006790:	4b17      	ldr	r3, [pc, #92]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 0304 	and.w	r3, r3, #4
 8006798:	2b04      	cmp	r3, #4
 800679a:	d109      	bne.n	80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800679c:	4b14      	ldr	r3, [pc, #80]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	08db      	lsrs	r3, r3, #3
 80067a2:	f003 0303 	and.w	r3, r3, #3
 80067a6:	4a13      	ldr	r2, [pc, #76]	; (80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80067a8:	fa22 f303 	lsr.w	r3, r2, r3
 80067ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067ae:	e1c2      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80067b0:	2300      	movs	r3, #0
 80067b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067b4:	e1bf      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80067b6:	4b0e      	ldr	r3, [pc, #56]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067c2:	d102      	bne.n	80067ca <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80067c4:	4b0c      	ldr	r3, [pc, #48]	; (80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80067c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067c8:	e1b5      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80067ca:	2300      	movs	r3, #0
 80067cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067ce:	e1b2      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80067d0:	4b07      	ldr	r3, [pc, #28]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067dc:	d102      	bne.n	80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80067de:	4b07      	ldr	r3, [pc, #28]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80067e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067e2:	e1a8      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80067e4:	2300      	movs	r3, #0
 80067e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067e8:	e1a5      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80067ea:	2300      	movs	r3, #0
 80067ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067ee:	e1a2      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80067f0:	58024400 	.word	0x58024400
 80067f4:	03d09000 	.word	0x03d09000
 80067f8:	003d0900 	.word	0x003d0900
 80067fc:	017d7840 	.word	0x017d7840
 8006800:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006804:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006808:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800680c:	430b      	orrs	r3, r1
 800680e:	d173      	bne.n	80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006810:	4b9c      	ldr	r3, [pc, #624]	; (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006814:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006818:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800681a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800681c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006820:	d02f      	beq.n	8006882 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006824:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006828:	d863      	bhi.n	80068f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800682a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800682c:	2b00      	cmp	r3, #0
 800682e:	d004      	beq.n	800683a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8006830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006832:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006836:	d012      	beq.n	800685e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006838:	e05b      	b.n	80068f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800683a:	4b92      	ldr	r3, [pc, #584]	; (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006842:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006846:	d107      	bne.n	8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006848:	f107 0318 	add.w	r3, r7, #24
 800684c:	4618      	mov	r0, r3
 800684e:	f000 f991 	bl	8006b74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006856:	e16e      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006858:	2300      	movs	r3, #0
 800685a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800685c:	e16b      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800685e:	4b89      	ldr	r3, [pc, #548]	; (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006866:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800686a:	d107      	bne.n	800687c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800686c:	f107 030c 	add.w	r3, r7, #12
 8006870:	4618      	mov	r0, r3
 8006872:	f000 fad3 	bl	8006e1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800687a:	e15c      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800687c:	2300      	movs	r3, #0
 800687e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006880:	e159      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006882:	4b80      	ldr	r3, [pc, #512]	; (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006886:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800688a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800688c:	4b7d      	ldr	r3, [pc, #500]	; (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 0304 	and.w	r3, r3, #4
 8006894:	2b04      	cmp	r3, #4
 8006896:	d10c      	bne.n	80068b2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800689a:	2b00      	cmp	r3, #0
 800689c:	d109      	bne.n	80068b2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800689e:	4b79      	ldr	r3, [pc, #484]	; (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	08db      	lsrs	r3, r3, #3
 80068a4:	f003 0303 	and.w	r3, r3, #3
 80068a8:	4a77      	ldr	r2, [pc, #476]	; (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80068aa:	fa22 f303 	lsr.w	r3, r2, r3
 80068ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068b0:	e01e      	b.n	80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80068b2:	4b74      	ldr	r3, [pc, #464]	; (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068be:	d106      	bne.n	80068ce <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80068c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068c6:	d102      	bne.n	80068ce <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80068c8:	4b70      	ldr	r3, [pc, #448]	; (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80068ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068cc:	e010      	b.n	80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80068ce:	4b6d      	ldr	r3, [pc, #436]	; (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068da:	d106      	bne.n	80068ea <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80068dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068e2:	d102      	bne.n	80068ea <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80068e4:	4b6a      	ldr	r3, [pc, #424]	; (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80068e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068e8:	e002      	b.n	80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80068ea:	2300      	movs	r3, #0
 80068ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80068ee:	e122      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80068f0:	e121      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80068f2:	2300      	movs	r3, #0
 80068f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068f6:	e11e      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80068f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068fc:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8006900:	430b      	orrs	r3, r1
 8006902:	d133      	bne.n	800696c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006904:	4b5f      	ldr	r3, [pc, #380]	; (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006908:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800690c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800690e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006910:	2b00      	cmp	r3, #0
 8006912:	d004      	beq.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006916:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800691a:	d012      	beq.n	8006942 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800691c:	e023      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800691e:	4b59      	ldr	r3, [pc, #356]	; (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006926:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800692a:	d107      	bne.n	800693c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800692c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006930:	4618      	mov	r0, r3
 8006932:	f000 fbc7 	bl	80070c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006938:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800693a:	e0fc      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800693c:	2300      	movs	r3, #0
 800693e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006940:	e0f9      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006942:	4b50      	ldr	r3, [pc, #320]	; (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800694a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800694e:	d107      	bne.n	8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006950:	f107 0318 	add.w	r3, r7, #24
 8006954:	4618      	mov	r0, r3
 8006956:	f000 f90d 	bl	8006b74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800695a:	6a3b      	ldr	r3, [r7, #32]
 800695c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800695e:	e0ea      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006960:	2300      	movs	r3, #0
 8006962:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006964:	e0e7      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006966:	2300      	movs	r3, #0
 8006968:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800696a:	e0e4      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800696c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006970:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8006974:	430b      	orrs	r3, r1
 8006976:	f040 808d 	bne.w	8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800697a:	4b42      	ldr	r3, [pc, #264]	; (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800697c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800697e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006982:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006986:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800698a:	d06b      	beq.n	8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800698c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800698e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006992:	d874      	bhi.n	8006a7e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800699a:	d056      	beq.n	8006a4a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800699c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800699e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069a2:	d86c      	bhi.n	8006a7e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80069a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80069aa:	d03b      	beq.n	8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80069ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80069b2:	d864      	bhi.n	8006a7e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80069b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069ba:	d021      	beq.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80069bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069c2:	d85c      	bhi.n	8006a7e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80069c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d004      	beq.n	80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80069ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069d0:	d004      	beq.n	80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80069d2:	e054      	b.n	8006a7e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80069d4:	f000 f8b8 	bl	8006b48 <HAL_RCCEx_GetD3PCLK1Freq>
 80069d8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80069da:	e0ac      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80069dc:	4b29      	ldr	r3, [pc, #164]	; (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069e8:	d107      	bne.n	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069ea:	f107 0318 	add.w	r3, r7, #24
 80069ee:	4618      	mov	r0, r3
 80069f0:	f000 f8c0 	bl	8006b74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069f8:	e09d      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069fa:	2300      	movs	r3, #0
 80069fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069fe:	e09a      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a00:	4b20      	ldr	r3, [pc, #128]	; (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a0c:	d107      	bne.n	8006a1e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a0e:	f107 030c 	add.w	r3, r7, #12
 8006a12:	4618      	mov	r0, r3
 8006a14:	f000 fa02 	bl	8006e1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a1c:	e08b      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a22:	e088      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a24:	4b17      	ldr	r3, [pc, #92]	; (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 0304 	and.w	r3, r3, #4
 8006a2c:	2b04      	cmp	r3, #4
 8006a2e:	d109      	bne.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a30:	4b14      	ldr	r3, [pc, #80]	; (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	08db      	lsrs	r3, r3, #3
 8006a36:	f003 0303 	and.w	r3, r3, #3
 8006a3a:	4a13      	ldr	r2, [pc, #76]	; (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a42:	e078      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a44:	2300      	movs	r3, #0
 8006a46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a48:	e075      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006a4a:	4b0e      	ldr	r3, [pc, #56]	; (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a56:	d102      	bne.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8006a58:	4b0c      	ldr	r3, [pc, #48]	; (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a5c:	e06b      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a62:	e068      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006a64:	4b07      	ldr	r3, [pc, #28]	; (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a70:	d102      	bne.n	8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8006a72:	4b07      	ldr	r3, [pc, #28]	; (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006a74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a76:	e05e      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a7c:	e05b      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a82:	e058      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006a84:	58024400 	.word	0x58024400
 8006a88:	03d09000 	.word	0x03d09000
 8006a8c:	003d0900 	.word	0x003d0900
 8006a90:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006a94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a98:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8006a9c:	430b      	orrs	r3, r1
 8006a9e:	d148      	bne.n	8006b32 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006aa0:	4b27      	ldr	r3, [pc, #156]	; (8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aa4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006aa8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ab0:	d02a      	beq.n	8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8006ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ab8:	d838      	bhi.n	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8006aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d004      	beq.n	8006aca <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8006ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ac6:	d00d      	beq.n	8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8006ac8:	e030      	b.n	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006aca:	4b1d      	ldr	r3, [pc, #116]	; (8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ad2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ad6:	d102      	bne.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8006ad8:	4b1a      	ldr	r3, [pc, #104]	; (8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006ada:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006adc:	e02b      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ae2:	e028      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006ae4:	4b16      	ldr	r3, [pc, #88]	; (8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006af0:	d107      	bne.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006af2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006af6:	4618      	mov	r0, r3
 8006af8:	f000 fae4 	bl	80070c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006afe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b00:	e019      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b02:	2300      	movs	r3, #0
 8006b04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b06:	e016      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b08:	4b0d      	ldr	r3, [pc, #52]	; (8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b14:	d107      	bne.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b16:	f107 0318 	add.w	r3, r7, #24
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f000 f82a 	bl	8006b74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b24:	e007      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b26:	2300      	movs	r3, #0
 8006b28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b2a:	e004      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b30:	e001      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8006b32:	2300      	movs	r3, #0
 8006b34:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8006b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3740      	adds	r7, #64	; 0x40
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	58024400 	.word	0x58024400
 8006b44:	017d7840 	.word	0x017d7840

08006b48 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006b4c:	f7fe f82c 	bl	8004ba8 <HAL_RCC_GetHCLKFreq>
 8006b50:	4602      	mov	r2, r0
 8006b52:	4b06      	ldr	r3, [pc, #24]	; (8006b6c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006b54:	6a1b      	ldr	r3, [r3, #32]
 8006b56:	091b      	lsrs	r3, r3, #4
 8006b58:	f003 0307 	and.w	r3, r3, #7
 8006b5c:	4904      	ldr	r1, [pc, #16]	; (8006b70 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006b5e:	5ccb      	ldrb	r3, [r1, r3]
 8006b60:	f003 031f 	and.w	r3, r3, #31
 8006b64:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	58024400 	.word	0x58024400
 8006b70:	0800e2b0 	.word	0x0800e2b0

08006b74 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b089      	sub	sp, #36	; 0x24
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b7c:	4ba1      	ldr	r3, [pc, #644]	; (8006e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b80:	f003 0303 	and.w	r3, r3, #3
 8006b84:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006b86:	4b9f      	ldr	r3, [pc, #636]	; (8006e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b8a:	0b1b      	lsrs	r3, r3, #12
 8006b8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b90:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006b92:	4b9c      	ldr	r3, [pc, #624]	; (8006e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b96:	091b      	lsrs	r3, r3, #4
 8006b98:	f003 0301 	and.w	r3, r3, #1
 8006b9c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006b9e:	4b99      	ldr	r3, [pc, #612]	; (8006e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ba2:	08db      	lsrs	r3, r3, #3
 8006ba4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ba8:	693a      	ldr	r2, [r7, #16]
 8006baa:	fb02 f303 	mul.w	r3, r2, r3
 8006bae:	ee07 3a90 	vmov	s15, r3
 8006bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bb6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f000 8111 	beq.w	8006de4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	2b02      	cmp	r3, #2
 8006bc6:	f000 8083 	beq.w	8006cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	2b02      	cmp	r3, #2
 8006bce:	f200 80a1 	bhi.w	8006d14 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d003      	beq.n	8006be0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d056      	beq.n	8006c8c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006bde:	e099      	b.n	8006d14 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006be0:	4b88      	ldr	r3, [pc, #544]	; (8006e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 0320 	and.w	r3, r3, #32
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d02d      	beq.n	8006c48 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006bec:	4b85      	ldr	r3, [pc, #532]	; (8006e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	08db      	lsrs	r3, r3, #3
 8006bf2:	f003 0303 	and.w	r3, r3, #3
 8006bf6:	4a84      	ldr	r2, [pc, #528]	; (8006e08 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8006bfc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	ee07 3a90 	vmov	s15, r3
 8006c04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	ee07 3a90 	vmov	s15, r3
 8006c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c16:	4b7b      	ldr	r3, [pc, #492]	; (8006e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c1e:	ee07 3a90 	vmov	s15, r3
 8006c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c26:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c2a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006e0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c42:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006c46:	e087      	b.n	8006d58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	ee07 3a90 	vmov	s15, r3
 8006c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c52:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006e10 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c5a:	4b6a      	ldr	r3, [pc, #424]	; (8006e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c62:	ee07 3a90 	vmov	s15, r3
 8006c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c6e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006e0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c8a:	e065      	b.n	8006d58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	ee07 3a90 	vmov	s15, r3
 8006c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c96:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006e14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c9e:	4b59      	ldr	r3, [pc, #356]	; (8006e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ca6:	ee07 3a90 	vmov	s15, r3
 8006caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cae:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cb2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006e0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cce:	e043      	b.n	8006d58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	ee07 3a90 	vmov	s15, r3
 8006cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cda:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006e18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006cde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ce2:	4b48      	ldr	r3, [pc, #288]	; (8006e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cea:	ee07 3a90 	vmov	s15, r3
 8006cee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cf6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006e0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006cfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d12:	e021      	b.n	8006d58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	ee07 3a90 	vmov	s15, r3
 8006d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d1e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006e14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006d22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d26:	4b37      	ldr	r3, [pc, #220]	; (8006e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d2e:	ee07 3a90 	vmov	s15, r3
 8006d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d36:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d3a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006e0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d56:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006d58:	4b2a      	ldr	r3, [pc, #168]	; (8006e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d5c:	0a5b      	lsrs	r3, r3, #9
 8006d5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d62:	ee07 3a90 	vmov	s15, r3
 8006d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d72:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d7e:	ee17 2a90 	vmov	r2, s15
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006d86:	4b1f      	ldr	r3, [pc, #124]	; (8006e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8a:	0c1b      	lsrs	r3, r3, #16
 8006d8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d90:	ee07 3a90 	vmov	s15, r3
 8006d94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006da0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006da4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006da8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dac:	ee17 2a90 	vmov	r2, s15
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006db4:	4b13      	ldr	r3, [pc, #76]	; (8006e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db8:	0e1b      	lsrs	r3, r3, #24
 8006dba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dbe:	ee07 3a90 	vmov	s15, r3
 8006dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006dca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006dce:	edd7 6a07 	vldr	s13, [r7, #28]
 8006dd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dda:	ee17 2a90 	vmov	r2, s15
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006de2:	e008      	b.n	8006df6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	609a      	str	r2, [r3, #8]
}
 8006df6:	bf00      	nop
 8006df8:	3724      	adds	r7, #36	; 0x24
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop
 8006e04:	58024400 	.word	0x58024400
 8006e08:	03d09000 	.word	0x03d09000
 8006e0c:	46000000 	.word	0x46000000
 8006e10:	4c742400 	.word	0x4c742400
 8006e14:	4a742400 	.word	0x4a742400
 8006e18:	4bbebc20 	.word	0x4bbebc20

08006e1c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b089      	sub	sp, #36	; 0x24
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e24:	4ba1      	ldr	r3, [pc, #644]	; (80070ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e28:	f003 0303 	and.w	r3, r3, #3
 8006e2c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006e2e:	4b9f      	ldr	r3, [pc, #636]	; (80070ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e32:	0d1b      	lsrs	r3, r3, #20
 8006e34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e38:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006e3a:	4b9c      	ldr	r3, [pc, #624]	; (80070ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e3e:	0a1b      	lsrs	r3, r3, #8
 8006e40:	f003 0301 	and.w	r3, r3, #1
 8006e44:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006e46:	4b99      	ldr	r3, [pc, #612]	; (80070ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e4a:	08db      	lsrs	r3, r3, #3
 8006e4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e50:	693a      	ldr	r2, [r7, #16]
 8006e52:	fb02 f303 	mul.w	r3, r2, r3
 8006e56:	ee07 3a90 	vmov	s15, r3
 8006e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e5e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	f000 8111 	beq.w	800708c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	2b02      	cmp	r3, #2
 8006e6e:	f000 8083 	beq.w	8006f78 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	2b02      	cmp	r3, #2
 8006e76:	f200 80a1 	bhi.w	8006fbc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d003      	beq.n	8006e88 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d056      	beq.n	8006f34 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006e86:	e099      	b.n	8006fbc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e88:	4b88      	ldr	r3, [pc, #544]	; (80070ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 0320 	and.w	r3, r3, #32
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d02d      	beq.n	8006ef0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e94:	4b85      	ldr	r3, [pc, #532]	; (80070ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	08db      	lsrs	r3, r3, #3
 8006e9a:	f003 0303 	and.w	r3, r3, #3
 8006e9e:	4a84      	ldr	r2, [pc, #528]	; (80070b0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ea4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	ee07 3a90 	vmov	s15, r3
 8006eac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	ee07 3a90 	vmov	s15, r3
 8006eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ebe:	4b7b      	ldr	r3, [pc, #492]	; (80070ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ec6:	ee07 3a90 	vmov	s15, r3
 8006eca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ece:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ed2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80070b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ede:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006eee:	e087      	b.n	8007000 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	ee07 3a90 	vmov	s15, r3
 8006ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006efa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80070b8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006efe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f02:	4b6a      	ldr	r3, [pc, #424]	; (80070ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f0a:	ee07 3a90 	vmov	s15, r3
 8006f0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f12:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f16:	eddf 5a67 	vldr	s11, [pc, #412]	; 80070b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f32:	e065      	b.n	8007000 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	ee07 3a90 	vmov	s15, r3
 8006f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f3e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80070bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006f42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f46:	4b59      	ldr	r3, [pc, #356]	; (80070ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f4e:	ee07 3a90 	vmov	s15, r3
 8006f52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f56:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f5a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80070b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f76:	e043      	b.n	8007000 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	ee07 3a90 	vmov	s15, r3
 8006f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f82:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80070c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006f86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f8a:	4b48      	ldr	r3, [pc, #288]	; (80070ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f92:	ee07 3a90 	vmov	s15, r3
 8006f96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f9e:	eddf 5a45 	vldr	s11, [pc, #276]	; 80070b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006fa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006faa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fba:	e021      	b.n	8007000 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	ee07 3a90 	vmov	s15, r3
 8006fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fc6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80070bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006fca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fce:	4b37      	ldr	r3, [pc, #220]	; (80070ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fd6:	ee07 3a90 	vmov	s15, r3
 8006fda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fde:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fe2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80070b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006fe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ffa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ffe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007000:	4b2a      	ldr	r3, [pc, #168]	; (80070ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007004:	0a5b      	lsrs	r3, r3, #9
 8007006:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800700a:	ee07 3a90 	vmov	s15, r3
 800700e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007012:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007016:	ee37 7a87 	vadd.f32	s14, s15, s14
 800701a:	edd7 6a07 	vldr	s13, [r7, #28]
 800701e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007022:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007026:	ee17 2a90 	vmov	r2, s15
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800702e:	4b1f      	ldr	r3, [pc, #124]	; (80070ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007032:	0c1b      	lsrs	r3, r3, #16
 8007034:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007038:	ee07 3a90 	vmov	s15, r3
 800703c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007040:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007044:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007048:	edd7 6a07 	vldr	s13, [r7, #28]
 800704c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007050:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007054:	ee17 2a90 	vmov	r2, s15
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800705c:	4b13      	ldr	r3, [pc, #76]	; (80070ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800705e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007060:	0e1b      	lsrs	r3, r3, #24
 8007062:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007066:	ee07 3a90 	vmov	s15, r3
 800706a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800706e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007072:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007076:	edd7 6a07 	vldr	s13, [r7, #28]
 800707a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800707e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007082:	ee17 2a90 	vmov	r2, s15
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800708a:	e008      	b.n	800709e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	609a      	str	r2, [r3, #8]
}
 800709e:	bf00      	nop
 80070a0:	3724      	adds	r7, #36	; 0x24
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr
 80070aa:	bf00      	nop
 80070ac:	58024400 	.word	0x58024400
 80070b0:	03d09000 	.word	0x03d09000
 80070b4:	46000000 	.word	0x46000000
 80070b8:	4c742400 	.word	0x4c742400
 80070bc:	4a742400 	.word	0x4a742400
 80070c0:	4bbebc20 	.word	0x4bbebc20

080070c4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b089      	sub	sp, #36	; 0x24
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070cc:	4ba0      	ldr	r3, [pc, #640]	; (8007350 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d0:	f003 0303 	and.w	r3, r3, #3
 80070d4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80070d6:	4b9e      	ldr	r3, [pc, #632]	; (8007350 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070da:	091b      	lsrs	r3, r3, #4
 80070dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070e0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80070e2:	4b9b      	ldr	r3, [pc, #620]	; (8007350 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e6:	f003 0301 	and.w	r3, r3, #1
 80070ea:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80070ec:	4b98      	ldr	r3, [pc, #608]	; (8007350 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070f0:	08db      	lsrs	r3, r3, #3
 80070f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070f6:	693a      	ldr	r2, [r7, #16]
 80070f8:	fb02 f303 	mul.w	r3, r2, r3
 80070fc:	ee07 3a90 	vmov	s15, r3
 8007100:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007104:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	2b00      	cmp	r3, #0
 800710c:	f000 8111 	beq.w	8007332 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007110:	69bb      	ldr	r3, [r7, #24]
 8007112:	2b02      	cmp	r3, #2
 8007114:	f000 8083 	beq.w	800721e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	2b02      	cmp	r3, #2
 800711c:	f200 80a1 	bhi.w	8007262 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007120:	69bb      	ldr	r3, [r7, #24]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d003      	beq.n	800712e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	2b01      	cmp	r3, #1
 800712a:	d056      	beq.n	80071da <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800712c:	e099      	b.n	8007262 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800712e:	4b88      	ldr	r3, [pc, #544]	; (8007350 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 0320 	and.w	r3, r3, #32
 8007136:	2b00      	cmp	r3, #0
 8007138:	d02d      	beq.n	8007196 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800713a:	4b85      	ldr	r3, [pc, #532]	; (8007350 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	08db      	lsrs	r3, r3, #3
 8007140:	f003 0303 	and.w	r3, r3, #3
 8007144:	4a83      	ldr	r2, [pc, #524]	; (8007354 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007146:	fa22 f303 	lsr.w	r3, r2, r3
 800714a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	ee07 3a90 	vmov	s15, r3
 8007152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	ee07 3a90 	vmov	s15, r3
 800715c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007160:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007164:	4b7a      	ldr	r3, [pc, #488]	; (8007350 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007168:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800716c:	ee07 3a90 	vmov	s15, r3
 8007170:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007174:	ed97 6a03 	vldr	s12, [r7, #12]
 8007178:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007358 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800717c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007180:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007184:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007188:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800718c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007190:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007194:	e087      	b.n	80072a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	ee07 3a90 	vmov	s15, r3
 800719c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071a0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800735c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80071a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071a8:	4b69      	ldr	r3, [pc, #420]	; (8007350 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80071aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071b0:	ee07 3a90 	vmov	s15, r3
 80071b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80071bc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007358 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80071c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071d8:	e065      	b.n	80072a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	ee07 3a90 	vmov	s15, r3
 80071e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071e4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007360 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80071e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071ec:	4b58      	ldr	r3, [pc, #352]	; (8007350 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80071ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071f4:	ee07 3a90 	vmov	s15, r3
 80071f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8007200:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007358 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007204:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007208:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800720c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007210:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007214:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007218:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800721c:	e043      	b.n	80072a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	ee07 3a90 	vmov	s15, r3
 8007224:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007228:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007364 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800722c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007230:	4b47      	ldr	r3, [pc, #284]	; (8007350 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007234:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007238:	ee07 3a90 	vmov	s15, r3
 800723c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007240:	ed97 6a03 	vldr	s12, [r7, #12]
 8007244:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007358 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007248:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800724c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007250:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007254:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007258:	ee67 7a27 	vmul.f32	s15, s14, s15
 800725c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007260:	e021      	b.n	80072a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	ee07 3a90 	vmov	s15, r3
 8007268:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800726c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800735c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007270:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007274:	4b36      	ldr	r3, [pc, #216]	; (8007350 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007278:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800727c:	ee07 3a90 	vmov	s15, r3
 8007280:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007284:	ed97 6a03 	vldr	s12, [r7, #12]
 8007288:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007358 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800728c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007290:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007294:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007298:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800729c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072a4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80072a6:	4b2a      	ldr	r3, [pc, #168]	; (8007350 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80072a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072aa:	0a5b      	lsrs	r3, r3, #9
 80072ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072b0:	ee07 3a90 	vmov	s15, r3
 80072b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80072c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072cc:	ee17 2a90 	vmov	r2, s15
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80072d4:	4b1e      	ldr	r3, [pc, #120]	; (8007350 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80072d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d8:	0c1b      	lsrs	r3, r3, #16
 80072da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072de:	ee07 3a90 	vmov	s15, r3
 80072e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80072f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072fa:	ee17 2a90 	vmov	r2, s15
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007302:	4b13      	ldr	r3, [pc, #76]	; (8007350 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007306:	0e1b      	lsrs	r3, r3, #24
 8007308:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800730c:	ee07 3a90 	vmov	s15, r3
 8007310:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007314:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007318:	ee37 7a87 	vadd.f32	s14, s15, s14
 800731c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007320:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007324:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007328:	ee17 2a90 	vmov	r2, s15
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007330:	e008      	b.n	8007344 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	609a      	str	r2, [r3, #8]
}
 8007344:	bf00      	nop
 8007346:	3724      	adds	r7, #36	; 0x24
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr
 8007350:	58024400 	.word	0x58024400
 8007354:	03d09000 	.word	0x03d09000
 8007358:	46000000 	.word	0x46000000
 800735c:	4c742400 	.word	0x4c742400
 8007360:	4a742400 	.word	0x4a742400
 8007364:	4bbebc20 	.word	0x4bbebc20

08007368 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007372:	2300      	movs	r3, #0
 8007374:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007376:	4b53      	ldr	r3, [pc, #332]	; (80074c4 <RCCEx_PLL2_Config+0x15c>)
 8007378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800737a:	f003 0303 	and.w	r3, r3, #3
 800737e:	2b03      	cmp	r3, #3
 8007380:	d101      	bne.n	8007386 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e099      	b.n	80074ba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007386:	4b4f      	ldr	r3, [pc, #316]	; (80074c4 <RCCEx_PLL2_Config+0x15c>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a4e      	ldr	r2, [pc, #312]	; (80074c4 <RCCEx_PLL2_Config+0x15c>)
 800738c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007390:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007392:	f7f9 fddb 	bl	8000f4c <HAL_GetTick>
 8007396:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007398:	e008      	b.n	80073ac <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800739a:	f7f9 fdd7 	bl	8000f4c <HAL_GetTick>
 800739e:	4602      	mov	r2, r0
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	1ad3      	subs	r3, r2, r3
 80073a4:	2b02      	cmp	r3, #2
 80073a6:	d901      	bls.n	80073ac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80073a8:	2303      	movs	r3, #3
 80073aa:	e086      	b.n	80074ba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80073ac:	4b45      	ldr	r3, [pc, #276]	; (80074c4 <RCCEx_PLL2_Config+0x15c>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d1f0      	bne.n	800739a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80073b8:	4b42      	ldr	r3, [pc, #264]	; (80074c4 <RCCEx_PLL2_Config+0x15c>)
 80073ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073bc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	031b      	lsls	r3, r3, #12
 80073c6:	493f      	ldr	r1, [pc, #252]	; (80074c4 <RCCEx_PLL2_Config+0x15c>)
 80073c8:	4313      	orrs	r3, r2
 80073ca:	628b      	str	r3, [r1, #40]	; 0x28
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	3b01      	subs	r3, #1
 80073d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	3b01      	subs	r3, #1
 80073dc:	025b      	lsls	r3, r3, #9
 80073de:	b29b      	uxth	r3, r3
 80073e0:	431a      	orrs	r2, r3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	3b01      	subs	r3, #1
 80073e8:	041b      	lsls	r3, r3, #16
 80073ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80073ee:	431a      	orrs	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	691b      	ldr	r3, [r3, #16]
 80073f4:	3b01      	subs	r3, #1
 80073f6:	061b      	lsls	r3, r3, #24
 80073f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80073fc:	4931      	ldr	r1, [pc, #196]	; (80074c4 <RCCEx_PLL2_Config+0x15c>)
 80073fe:	4313      	orrs	r3, r2
 8007400:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007402:	4b30      	ldr	r3, [pc, #192]	; (80074c4 <RCCEx_PLL2_Config+0x15c>)
 8007404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007406:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	695b      	ldr	r3, [r3, #20]
 800740e:	492d      	ldr	r1, [pc, #180]	; (80074c4 <RCCEx_PLL2_Config+0x15c>)
 8007410:	4313      	orrs	r3, r2
 8007412:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007414:	4b2b      	ldr	r3, [pc, #172]	; (80074c4 <RCCEx_PLL2_Config+0x15c>)
 8007416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007418:	f023 0220 	bic.w	r2, r3, #32
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	699b      	ldr	r3, [r3, #24]
 8007420:	4928      	ldr	r1, [pc, #160]	; (80074c4 <RCCEx_PLL2_Config+0x15c>)
 8007422:	4313      	orrs	r3, r2
 8007424:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007426:	4b27      	ldr	r3, [pc, #156]	; (80074c4 <RCCEx_PLL2_Config+0x15c>)
 8007428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800742a:	4a26      	ldr	r2, [pc, #152]	; (80074c4 <RCCEx_PLL2_Config+0x15c>)
 800742c:	f023 0310 	bic.w	r3, r3, #16
 8007430:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007432:	4b24      	ldr	r3, [pc, #144]	; (80074c4 <RCCEx_PLL2_Config+0x15c>)
 8007434:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007436:	4b24      	ldr	r3, [pc, #144]	; (80074c8 <RCCEx_PLL2_Config+0x160>)
 8007438:	4013      	ands	r3, r2
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	69d2      	ldr	r2, [r2, #28]
 800743e:	00d2      	lsls	r2, r2, #3
 8007440:	4920      	ldr	r1, [pc, #128]	; (80074c4 <RCCEx_PLL2_Config+0x15c>)
 8007442:	4313      	orrs	r3, r2
 8007444:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007446:	4b1f      	ldr	r3, [pc, #124]	; (80074c4 <RCCEx_PLL2_Config+0x15c>)
 8007448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800744a:	4a1e      	ldr	r2, [pc, #120]	; (80074c4 <RCCEx_PLL2_Config+0x15c>)
 800744c:	f043 0310 	orr.w	r3, r3, #16
 8007450:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d106      	bne.n	8007466 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007458:	4b1a      	ldr	r3, [pc, #104]	; (80074c4 <RCCEx_PLL2_Config+0x15c>)
 800745a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800745c:	4a19      	ldr	r2, [pc, #100]	; (80074c4 <RCCEx_PLL2_Config+0x15c>)
 800745e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007462:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007464:	e00f      	b.n	8007486 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	2b01      	cmp	r3, #1
 800746a:	d106      	bne.n	800747a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800746c:	4b15      	ldr	r3, [pc, #84]	; (80074c4 <RCCEx_PLL2_Config+0x15c>)
 800746e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007470:	4a14      	ldr	r2, [pc, #80]	; (80074c4 <RCCEx_PLL2_Config+0x15c>)
 8007472:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007476:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007478:	e005      	b.n	8007486 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800747a:	4b12      	ldr	r3, [pc, #72]	; (80074c4 <RCCEx_PLL2_Config+0x15c>)
 800747c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800747e:	4a11      	ldr	r2, [pc, #68]	; (80074c4 <RCCEx_PLL2_Config+0x15c>)
 8007480:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007484:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007486:	4b0f      	ldr	r3, [pc, #60]	; (80074c4 <RCCEx_PLL2_Config+0x15c>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a0e      	ldr	r2, [pc, #56]	; (80074c4 <RCCEx_PLL2_Config+0x15c>)
 800748c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007490:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007492:	f7f9 fd5b 	bl	8000f4c <HAL_GetTick>
 8007496:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007498:	e008      	b.n	80074ac <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800749a:	f7f9 fd57 	bl	8000f4c <HAL_GetTick>
 800749e:	4602      	mov	r2, r0
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	1ad3      	subs	r3, r2, r3
 80074a4:	2b02      	cmp	r3, #2
 80074a6:	d901      	bls.n	80074ac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80074a8:	2303      	movs	r3, #3
 80074aa:	e006      	b.n	80074ba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80074ac:	4b05      	ldr	r3, [pc, #20]	; (80074c4 <RCCEx_PLL2_Config+0x15c>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d0f0      	beq.n	800749a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80074b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3710      	adds	r7, #16
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop
 80074c4:	58024400 	.word	0x58024400
 80074c8:	ffff0007 	.word	0xffff0007

080074cc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80074d6:	2300      	movs	r3, #0
 80074d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80074da:	4b53      	ldr	r3, [pc, #332]	; (8007628 <RCCEx_PLL3_Config+0x15c>)
 80074dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074de:	f003 0303 	and.w	r3, r3, #3
 80074e2:	2b03      	cmp	r3, #3
 80074e4:	d101      	bne.n	80074ea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	e099      	b.n	800761e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80074ea:	4b4f      	ldr	r3, [pc, #316]	; (8007628 <RCCEx_PLL3_Config+0x15c>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a4e      	ldr	r2, [pc, #312]	; (8007628 <RCCEx_PLL3_Config+0x15c>)
 80074f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074f6:	f7f9 fd29 	bl	8000f4c <HAL_GetTick>
 80074fa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80074fc:	e008      	b.n	8007510 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80074fe:	f7f9 fd25 	bl	8000f4c <HAL_GetTick>
 8007502:	4602      	mov	r2, r0
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	1ad3      	subs	r3, r2, r3
 8007508:	2b02      	cmp	r3, #2
 800750a:	d901      	bls.n	8007510 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800750c:	2303      	movs	r3, #3
 800750e:	e086      	b.n	800761e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007510:	4b45      	ldr	r3, [pc, #276]	; (8007628 <RCCEx_PLL3_Config+0x15c>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007518:	2b00      	cmp	r3, #0
 800751a:	d1f0      	bne.n	80074fe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800751c:	4b42      	ldr	r3, [pc, #264]	; (8007628 <RCCEx_PLL3_Config+0x15c>)
 800751e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007520:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	051b      	lsls	r3, r3, #20
 800752a:	493f      	ldr	r1, [pc, #252]	; (8007628 <RCCEx_PLL3_Config+0x15c>)
 800752c:	4313      	orrs	r3, r2
 800752e:	628b      	str	r3, [r1, #40]	; 0x28
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	3b01      	subs	r3, #1
 8007536:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	3b01      	subs	r3, #1
 8007540:	025b      	lsls	r3, r3, #9
 8007542:	b29b      	uxth	r3, r3
 8007544:	431a      	orrs	r2, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	68db      	ldr	r3, [r3, #12]
 800754a:	3b01      	subs	r3, #1
 800754c:	041b      	lsls	r3, r3, #16
 800754e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007552:	431a      	orrs	r2, r3
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	3b01      	subs	r3, #1
 800755a:	061b      	lsls	r3, r3, #24
 800755c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007560:	4931      	ldr	r1, [pc, #196]	; (8007628 <RCCEx_PLL3_Config+0x15c>)
 8007562:	4313      	orrs	r3, r2
 8007564:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007566:	4b30      	ldr	r3, [pc, #192]	; (8007628 <RCCEx_PLL3_Config+0x15c>)
 8007568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800756a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	695b      	ldr	r3, [r3, #20]
 8007572:	492d      	ldr	r1, [pc, #180]	; (8007628 <RCCEx_PLL3_Config+0x15c>)
 8007574:	4313      	orrs	r3, r2
 8007576:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007578:	4b2b      	ldr	r3, [pc, #172]	; (8007628 <RCCEx_PLL3_Config+0x15c>)
 800757a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800757c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	699b      	ldr	r3, [r3, #24]
 8007584:	4928      	ldr	r1, [pc, #160]	; (8007628 <RCCEx_PLL3_Config+0x15c>)
 8007586:	4313      	orrs	r3, r2
 8007588:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800758a:	4b27      	ldr	r3, [pc, #156]	; (8007628 <RCCEx_PLL3_Config+0x15c>)
 800758c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800758e:	4a26      	ldr	r2, [pc, #152]	; (8007628 <RCCEx_PLL3_Config+0x15c>)
 8007590:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007594:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007596:	4b24      	ldr	r3, [pc, #144]	; (8007628 <RCCEx_PLL3_Config+0x15c>)
 8007598:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800759a:	4b24      	ldr	r3, [pc, #144]	; (800762c <RCCEx_PLL3_Config+0x160>)
 800759c:	4013      	ands	r3, r2
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	69d2      	ldr	r2, [r2, #28]
 80075a2:	00d2      	lsls	r2, r2, #3
 80075a4:	4920      	ldr	r1, [pc, #128]	; (8007628 <RCCEx_PLL3_Config+0x15c>)
 80075a6:	4313      	orrs	r3, r2
 80075a8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80075aa:	4b1f      	ldr	r3, [pc, #124]	; (8007628 <RCCEx_PLL3_Config+0x15c>)
 80075ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ae:	4a1e      	ldr	r2, [pc, #120]	; (8007628 <RCCEx_PLL3_Config+0x15c>)
 80075b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d106      	bne.n	80075ca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80075bc:	4b1a      	ldr	r3, [pc, #104]	; (8007628 <RCCEx_PLL3_Config+0x15c>)
 80075be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c0:	4a19      	ldr	r2, [pc, #100]	; (8007628 <RCCEx_PLL3_Config+0x15c>)
 80075c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80075c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80075c8:	e00f      	b.n	80075ea <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d106      	bne.n	80075de <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80075d0:	4b15      	ldr	r3, [pc, #84]	; (8007628 <RCCEx_PLL3_Config+0x15c>)
 80075d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d4:	4a14      	ldr	r2, [pc, #80]	; (8007628 <RCCEx_PLL3_Config+0x15c>)
 80075d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80075da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80075dc:	e005      	b.n	80075ea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80075de:	4b12      	ldr	r3, [pc, #72]	; (8007628 <RCCEx_PLL3_Config+0x15c>)
 80075e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e2:	4a11      	ldr	r2, [pc, #68]	; (8007628 <RCCEx_PLL3_Config+0x15c>)
 80075e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80075e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80075ea:	4b0f      	ldr	r3, [pc, #60]	; (8007628 <RCCEx_PLL3_Config+0x15c>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a0e      	ldr	r2, [pc, #56]	; (8007628 <RCCEx_PLL3_Config+0x15c>)
 80075f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075f6:	f7f9 fca9 	bl	8000f4c <HAL_GetTick>
 80075fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80075fc:	e008      	b.n	8007610 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80075fe:	f7f9 fca5 	bl	8000f4c <HAL_GetTick>
 8007602:	4602      	mov	r2, r0
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	1ad3      	subs	r3, r2, r3
 8007608:	2b02      	cmp	r3, #2
 800760a:	d901      	bls.n	8007610 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800760c:	2303      	movs	r3, #3
 800760e:	e006      	b.n	800761e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007610:	4b05      	ldr	r3, [pc, #20]	; (8007628 <RCCEx_PLL3_Config+0x15c>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007618:	2b00      	cmp	r3, #0
 800761a:	d0f0      	beq.n	80075fe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800761c:	7bfb      	ldrb	r3, [r7, #15]
}
 800761e:	4618      	mov	r0, r3
 8007620:	3710      	adds	r7, #16
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop
 8007628:	58024400 	.word	0x58024400
 800762c:	ffff0007 	.word	0xffff0007

08007630 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007630:	b084      	sub	sp, #16
 8007632:	b580      	push	{r7, lr}
 8007634:	b084      	sub	sp, #16
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
 800763a:	f107 001c 	add.w	r0, r7, #28
 800763e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007644:	2b01      	cmp	r3, #1
 8007646:	d120      	bne.n	800768a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800764c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	68da      	ldr	r2, [r3, #12]
 8007658:	4b2a      	ldr	r3, [pc, #168]	; (8007704 <USB_CoreInit+0xd4>)
 800765a:	4013      	ands	r3, r2
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800766c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800766e:	2b01      	cmp	r3, #1
 8007670:	d105      	bne.n	800767e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f001 faf8 	bl	8008c74 <USB_CoreReset>
 8007684:	4603      	mov	r3, r0
 8007686:	73fb      	strb	r3, [r7, #15]
 8007688:	e01a      	b.n	80076c0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f001 faec 	bl	8008c74 <USB_CoreReset>
 800769c:	4603      	mov	r3, r0
 800769e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80076a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d106      	bne.n	80076b4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	639a      	str	r2, [r3, #56]	; 0x38
 80076b2:	e005      	b.n	80076c0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80076c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d116      	bne.n	80076f4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076ca:	b29a      	uxth	r2, r3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80076d4:	4b0c      	ldr	r3, [pc, #48]	; (8007708 <USB_CoreInit+0xd8>)
 80076d6:	4313      	orrs	r3, r2
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	f043 0206 	orr.w	r2, r3, #6
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	f043 0220 	orr.w	r2, r3, #32
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80076f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3710      	adds	r7, #16
 80076fa:	46bd      	mov	sp, r7
 80076fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007700:	b004      	add	sp, #16
 8007702:	4770      	bx	lr
 8007704:	ffbdffbf 	.word	0xffbdffbf
 8007708:	03ee0000 	.word	0x03ee0000

0800770c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800770c:	b480      	push	{r7}
 800770e:	b087      	sub	sp, #28
 8007710:	af00      	add	r7, sp, #0
 8007712:	60f8      	str	r0, [r7, #12]
 8007714:	60b9      	str	r1, [r7, #8]
 8007716:	4613      	mov	r3, r2
 8007718:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800771a:	79fb      	ldrb	r3, [r7, #7]
 800771c:	2b02      	cmp	r3, #2
 800771e:	d165      	bne.n	80077ec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	4a41      	ldr	r2, [pc, #260]	; (8007828 <USB_SetTurnaroundTime+0x11c>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d906      	bls.n	8007736 <USB_SetTurnaroundTime+0x2a>
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	4a40      	ldr	r2, [pc, #256]	; (800782c <USB_SetTurnaroundTime+0x120>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d202      	bcs.n	8007736 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007730:	230f      	movs	r3, #15
 8007732:	617b      	str	r3, [r7, #20]
 8007734:	e062      	b.n	80077fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	4a3c      	ldr	r2, [pc, #240]	; (800782c <USB_SetTurnaroundTime+0x120>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d306      	bcc.n	800774c <USB_SetTurnaroundTime+0x40>
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	4a3b      	ldr	r2, [pc, #236]	; (8007830 <USB_SetTurnaroundTime+0x124>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d202      	bcs.n	800774c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007746:	230e      	movs	r3, #14
 8007748:	617b      	str	r3, [r7, #20]
 800774a:	e057      	b.n	80077fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	4a38      	ldr	r2, [pc, #224]	; (8007830 <USB_SetTurnaroundTime+0x124>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d306      	bcc.n	8007762 <USB_SetTurnaroundTime+0x56>
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	4a37      	ldr	r2, [pc, #220]	; (8007834 <USB_SetTurnaroundTime+0x128>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d202      	bcs.n	8007762 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800775c:	230d      	movs	r3, #13
 800775e:	617b      	str	r3, [r7, #20]
 8007760:	e04c      	b.n	80077fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	4a33      	ldr	r2, [pc, #204]	; (8007834 <USB_SetTurnaroundTime+0x128>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d306      	bcc.n	8007778 <USB_SetTurnaroundTime+0x6c>
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	4a32      	ldr	r2, [pc, #200]	; (8007838 <USB_SetTurnaroundTime+0x12c>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d802      	bhi.n	8007778 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007772:	230c      	movs	r3, #12
 8007774:	617b      	str	r3, [r7, #20]
 8007776:	e041      	b.n	80077fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	4a2f      	ldr	r2, [pc, #188]	; (8007838 <USB_SetTurnaroundTime+0x12c>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d906      	bls.n	800778e <USB_SetTurnaroundTime+0x82>
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	4a2e      	ldr	r2, [pc, #184]	; (800783c <USB_SetTurnaroundTime+0x130>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d802      	bhi.n	800778e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007788:	230b      	movs	r3, #11
 800778a:	617b      	str	r3, [r7, #20]
 800778c:	e036      	b.n	80077fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	4a2a      	ldr	r2, [pc, #168]	; (800783c <USB_SetTurnaroundTime+0x130>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d906      	bls.n	80077a4 <USB_SetTurnaroundTime+0x98>
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	4a29      	ldr	r2, [pc, #164]	; (8007840 <USB_SetTurnaroundTime+0x134>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d802      	bhi.n	80077a4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800779e:	230a      	movs	r3, #10
 80077a0:	617b      	str	r3, [r7, #20]
 80077a2:	e02b      	b.n	80077fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	4a26      	ldr	r2, [pc, #152]	; (8007840 <USB_SetTurnaroundTime+0x134>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d906      	bls.n	80077ba <USB_SetTurnaroundTime+0xae>
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	4a25      	ldr	r2, [pc, #148]	; (8007844 <USB_SetTurnaroundTime+0x138>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d202      	bcs.n	80077ba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80077b4:	2309      	movs	r3, #9
 80077b6:	617b      	str	r3, [r7, #20]
 80077b8:	e020      	b.n	80077fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	4a21      	ldr	r2, [pc, #132]	; (8007844 <USB_SetTurnaroundTime+0x138>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d306      	bcc.n	80077d0 <USB_SetTurnaroundTime+0xc4>
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	4a20      	ldr	r2, [pc, #128]	; (8007848 <USB_SetTurnaroundTime+0x13c>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d802      	bhi.n	80077d0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80077ca:	2308      	movs	r3, #8
 80077cc:	617b      	str	r3, [r7, #20]
 80077ce:	e015      	b.n	80077fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	4a1d      	ldr	r2, [pc, #116]	; (8007848 <USB_SetTurnaroundTime+0x13c>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d906      	bls.n	80077e6 <USB_SetTurnaroundTime+0xda>
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	4a1c      	ldr	r2, [pc, #112]	; (800784c <USB_SetTurnaroundTime+0x140>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d202      	bcs.n	80077e6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80077e0:	2307      	movs	r3, #7
 80077e2:	617b      	str	r3, [r7, #20]
 80077e4:	e00a      	b.n	80077fc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80077e6:	2306      	movs	r3, #6
 80077e8:	617b      	str	r3, [r7, #20]
 80077ea:	e007      	b.n	80077fc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80077ec:	79fb      	ldrb	r3, [r7, #7]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d102      	bne.n	80077f8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80077f2:	2309      	movs	r3, #9
 80077f4:	617b      	str	r3, [r7, #20]
 80077f6:	e001      	b.n	80077fc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80077f8:	2309      	movs	r3, #9
 80077fa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	68da      	ldr	r2, [r3, #12]
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	029b      	lsls	r3, r3, #10
 8007810:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007814:	431a      	orrs	r2, r3
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800781a:	2300      	movs	r3, #0
}
 800781c:	4618      	mov	r0, r3
 800781e:	371c      	adds	r7, #28
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr
 8007828:	00d8acbf 	.word	0x00d8acbf
 800782c:	00e4e1c0 	.word	0x00e4e1c0
 8007830:	00f42400 	.word	0x00f42400
 8007834:	01067380 	.word	0x01067380
 8007838:	011a499f 	.word	0x011a499f
 800783c:	01312cff 	.word	0x01312cff
 8007840:	014ca43f 	.word	0x014ca43f
 8007844:	016e3600 	.word	0x016e3600
 8007848:	01a6ab1f 	.word	0x01a6ab1f
 800784c:	01e84800 	.word	0x01e84800

08007850 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007850:	b480      	push	{r7}
 8007852:	b083      	sub	sp, #12
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	f043 0201 	orr.w	r2, r3, #1
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	370c      	adds	r7, #12
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr

08007872 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007872:	b480      	push	{r7}
 8007874:	b083      	sub	sp, #12
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	f023 0201 	bic.w	r2, r3, #1
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007886:	2300      	movs	r3, #0
}
 8007888:	4618      	mov	r0, r3
 800788a:	370c      	adds	r7, #12
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr

08007894 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	460b      	mov	r3, r1
 800789e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80078a0:	2300      	movs	r3, #0
 80078a2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80078b0:	78fb      	ldrb	r3, [r7, #3]
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d115      	bne.n	80078e2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80078c2:	2001      	movs	r0, #1
 80078c4:	f7f9 fb4e 	bl	8000f64 <HAL_Delay>
      ms++;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	3301      	adds	r3, #1
 80078cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f001 f93f 	bl	8008b52 <USB_GetMode>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d01e      	beq.n	8007918 <USB_SetCurrentMode+0x84>
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2b31      	cmp	r3, #49	; 0x31
 80078de:	d9f0      	bls.n	80078c2 <USB_SetCurrentMode+0x2e>
 80078e0:	e01a      	b.n	8007918 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80078e2:	78fb      	ldrb	r3, [r7, #3]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d115      	bne.n	8007914 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	68db      	ldr	r3, [r3, #12]
 80078ec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80078f4:	2001      	movs	r0, #1
 80078f6:	f7f9 fb35 	bl	8000f64 <HAL_Delay>
      ms++;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	3301      	adds	r3, #1
 80078fe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f001 f926 	bl	8008b52 <USB_GetMode>
 8007906:	4603      	mov	r3, r0
 8007908:	2b00      	cmp	r3, #0
 800790a:	d005      	beq.n	8007918 <USB_SetCurrentMode+0x84>
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2b31      	cmp	r3, #49	; 0x31
 8007910:	d9f0      	bls.n	80078f4 <USB_SetCurrentMode+0x60>
 8007912:	e001      	b.n	8007918 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	e005      	b.n	8007924 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2b32      	cmp	r3, #50	; 0x32
 800791c:	d101      	bne.n	8007922 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	e000      	b.n	8007924 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007922:	2300      	movs	r3, #0
}
 8007924:	4618      	mov	r0, r3
 8007926:	3710      	adds	r7, #16
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800792c:	b084      	sub	sp, #16
 800792e:	b580      	push	{r7, lr}
 8007930:	b086      	sub	sp, #24
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
 8007936:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800793a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800793e:	2300      	movs	r3, #0
 8007940:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007946:	2300      	movs	r3, #0
 8007948:	613b      	str	r3, [r7, #16]
 800794a:	e009      	b.n	8007960 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	3340      	adds	r3, #64	; 0x40
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	4413      	add	r3, r2
 8007956:	2200      	movs	r2, #0
 8007958:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	3301      	adds	r3, #1
 800795e:	613b      	str	r3, [r7, #16]
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	2b0e      	cmp	r3, #14
 8007964:	d9f2      	bls.n	800794c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007968:	2b00      	cmp	r3, #0
 800796a:	d11c      	bne.n	80079a6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	68fa      	ldr	r2, [r7, #12]
 8007976:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800797a:	f043 0302 	orr.w	r3, r3, #2
 800797e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007984:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	601a      	str	r2, [r3, #0]
 80079a4:	e005      	b.n	80079b2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80079b8:	461a      	mov	r2, r3
 80079ba:	2300      	movs	r3, #0
 80079bc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079c4:	4619      	mov	r1, r3
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079cc:	461a      	mov	r2, r3
 80079ce:	680b      	ldr	r3, [r1, #0]
 80079d0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80079d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d10c      	bne.n	80079f2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80079d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d104      	bne.n	80079e8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80079de:	2100      	movs	r1, #0
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 f965 	bl	8007cb0 <USB_SetDevSpeed>
 80079e6:	e008      	b.n	80079fa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80079e8:	2101      	movs	r1, #1
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 f960 	bl	8007cb0 <USB_SetDevSpeed>
 80079f0:	e003      	b.n	80079fa <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80079f2:	2103      	movs	r1, #3
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 f95b 	bl	8007cb0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80079fa:	2110      	movs	r1, #16
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 f8f3 	bl	8007be8 <USB_FlushTxFifo>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d001      	beq.n	8007a0c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 f91f 	bl	8007c50 <USB_FlushRxFifo>
 8007a12:	4603      	mov	r3, r0
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d001      	beq.n	8007a1c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a22:	461a      	mov	r2, r3
 8007a24:	2300      	movs	r3, #0
 8007a26:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a2e:	461a      	mov	r2, r3
 8007a30:	2300      	movs	r3, #0
 8007a32:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a40:	2300      	movs	r3, #0
 8007a42:	613b      	str	r3, [r7, #16]
 8007a44:	e043      	b.n	8007ace <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	015a      	lsls	r2, r3, #5
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	4413      	add	r3, r2
 8007a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a5c:	d118      	bne.n	8007a90 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d10a      	bne.n	8007a7a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	015a      	lsls	r2, r3, #5
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a70:	461a      	mov	r2, r3
 8007a72:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007a76:	6013      	str	r3, [r2, #0]
 8007a78:	e013      	b.n	8007aa2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	015a      	lsls	r2, r3, #5
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	4413      	add	r3, r2
 8007a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a86:	461a      	mov	r2, r3
 8007a88:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007a8c:	6013      	str	r3, [r2, #0]
 8007a8e:	e008      	b.n	8007aa2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	015a      	lsls	r2, r3, #5
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	4413      	add	r3, r2
 8007a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	015a      	lsls	r2, r3, #5
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aae:	461a      	mov	r2, r3
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	015a      	lsls	r2, r3, #5
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	4413      	add	r3, r2
 8007abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007ac6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	3301      	adds	r3, #1
 8007acc:	613b      	str	r3, [r7, #16]
 8007ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad0:	693a      	ldr	r2, [r7, #16]
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d3b7      	bcc.n	8007a46 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	613b      	str	r3, [r7, #16]
 8007ada:	e043      	b.n	8007b64 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	015a      	lsls	r2, r3, #5
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	4413      	add	r3, r2
 8007ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007aee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007af2:	d118      	bne.n	8007b26 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d10a      	bne.n	8007b10 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	015a      	lsls	r2, r3, #5
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	4413      	add	r3, r2
 8007b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b06:	461a      	mov	r2, r3
 8007b08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007b0c:	6013      	str	r3, [r2, #0]
 8007b0e:	e013      	b.n	8007b38 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	015a      	lsls	r2, r3, #5
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	4413      	add	r3, r2
 8007b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007b22:	6013      	str	r3, [r2, #0]
 8007b24:	e008      	b.n	8007b38 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	015a      	lsls	r2, r3, #5
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	4413      	add	r3, r2
 8007b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b32:	461a      	mov	r2, r3
 8007b34:	2300      	movs	r3, #0
 8007b36:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	015a      	lsls	r2, r3, #5
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	4413      	add	r3, r2
 8007b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b44:	461a      	mov	r2, r3
 8007b46:	2300      	movs	r3, #0
 8007b48:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	015a      	lsls	r2, r3, #5
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	4413      	add	r3, r2
 8007b52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b56:	461a      	mov	r2, r3
 8007b58:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007b5c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	3301      	adds	r3, #1
 8007b62:	613b      	str	r3, [r7, #16]
 8007b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b66:	693a      	ldr	r2, [r7, #16]
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d3b7      	bcc.n	8007adc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b72:	691b      	ldr	r3, [r3, #16]
 8007b74:	68fa      	ldr	r2, [r7, #12]
 8007b76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b7e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007b8c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d105      	bne.n	8007ba0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	699b      	ldr	r3, [r3, #24]
 8007b98:	f043 0210 	orr.w	r2, r3, #16
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	699a      	ldr	r2, [r3, #24]
 8007ba4:	4b0e      	ldr	r3, [pc, #56]	; (8007be0 <USB_DevInit+0x2b4>)
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d005      	beq.n	8007bbe <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	699b      	ldr	r3, [r3, #24]
 8007bb6:	f043 0208 	orr.w	r2, r3, #8
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007bbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d105      	bne.n	8007bd0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	699a      	ldr	r2, [r3, #24]
 8007bc8:	4b06      	ldr	r3, [pc, #24]	; (8007be4 <USB_DevInit+0x2b8>)
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007bd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3718      	adds	r7, #24
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007bdc:	b004      	add	sp, #16
 8007bde:	4770      	bx	lr
 8007be0:	803c3800 	.word	0x803c3800
 8007be4:	40000004 	.word	0x40000004

08007be8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b085      	sub	sp, #20
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	4a13      	ldr	r2, [pc, #76]	; (8007c4c <USB_FlushTxFifo+0x64>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d901      	bls.n	8007c08 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007c04:	2303      	movs	r3, #3
 8007c06:	e01b      	b.n	8007c40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	691b      	ldr	r3, [r3, #16]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	daf2      	bge.n	8007bf6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007c10:	2300      	movs	r3, #0
 8007c12:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	019b      	lsls	r3, r3, #6
 8007c18:	f043 0220 	orr.w	r2, r3, #32
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	3301      	adds	r3, #1
 8007c24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	4a08      	ldr	r2, [pc, #32]	; (8007c4c <USB_FlushTxFifo+0x64>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d901      	bls.n	8007c32 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007c2e:	2303      	movs	r3, #3
 8007c30:	e006      	b.n	8007c40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	f003 0320 	and.w	r3, r3, #32
 8007c3a:	2b20      	cmp	r3, #32
 8007c3c:	d0f0      	beq.n	8007c20 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007c3e:	2300      	movs	r3, #0
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3714      	adds	r7, #20
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr
 8007c4c:	00030d40 	.word	0x00030d40

08007c50 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b085      	sub	sp, #20
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	3301      	adds	r3, #1
 8007c60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	4a11      	ldr	r2, [pc, #68]	; (8007cac <USB_FlushRxFifo+0x5c>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d901      	bls.n	8007c6e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007c6a:	2303      	movs	r3, #3
 8007c6c:	e018      	b.n	8007ca0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	691b      	ldr	r3, [r3, #16]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	daf2      	bge.n	8007c5c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007c76:	2300      	movs	r3, #0
 8007c78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2210      	movs	r2, #16
 8007c7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	3301      	adds	r3, #1
 8007c84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	4a08      	ldr	r2, [pc, #32]	; (8007cac <USB_FlushRxFifo+0x5c>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d901      	bls.n	8007c92 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007c8e:	2303      	movs	r3, #3
 8007c90:	e006      	b.n	8007ca0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	691b      	ldr	r3, [r3, #16]
 8007c96:	f003 0310 	and.w	r3, r3, #16
 8007c9a:	2b10      	cmp	r3, #16
 8007c9c:	d0f0      	beq.n	8007c80 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007c9e:	2300      	movs	r3, #0
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3714      	adds	r7, #20
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr
 8007cac:	00030d40 	.word	0x00030d40

08007cb0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b085      	sub	sp, #20
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	460b      	mov	r3, r1
 8007cba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	78fb      	ldrb	r3, [r7, #3]
 8007cca:	68f9      	ldr	r1, [r7, #12]
 8007ccc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3714      	adds	r7, #20
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr

08007ce2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007ce2:	b480      	push	{r7}
 8007ce4:	b087      	sub	sp, #28
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cf4:	689b      	ldr	r3, [r3, #8]
 8007cf6:	f003 0306 	and.w	r3, r3, #6
 8007cfa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d102      	bne.n	8007d08 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007d02:	2300      	movs	r3, #0
 8007d04:	75fb      	strb	r3, [r7, #23]
 8007d06:	e00a      	b.n	8007d1e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2b02      	cmp	r3, #2
 8007d0c:	d002      	beq.n	8007d14 <USB_GetDevSpeed+0x32>
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2b06      	cmp	r3, #6
 8007d12:	d102      	bne.n	8007d1a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007d14:	2302      	movs	r3, #2
 8007d16:	75fb      	strb	r3, [r7, #23]
 8007d18:	e001      	b.n	8007d1e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007d1a:	230f      	movs	r3, #15
 8007d1c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	371c      	adds	r7, #28
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b085      	sub	sp, #20
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	785b      	ldrb	r3, [r3, #1]
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d139      	bne.n	8007dbc <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d4e:	69da      	ldr	r2, [r3, #28]
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	f003 030f 	and.w	r3, r3, #15
 8007d58:	2101      	movs	r1, #1
 8007d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	68f9      	ldr	r1, [r7, #12]
 8007d62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d66:	4313      	orrs	r3, r2
 8007d68:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	015a      	lsls	r2, r3, #5
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	4413      	add	r3, r2
 8007d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d153      	bne.n	8007e28 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	015a      	lsls	r2, r3, #5
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	4413      	add	r3, r2
 8007d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	791b      	ldrb	r3, [r3, #4]
 8007d9a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d9c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	059b      	lsls	r3, r3, #22
 8007da2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007da4:	431a      	orrs	r2, r3
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	0159      	lsls	r1, r3, #5
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	440b      	add	r3, r1
 8007dae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007db2:	4619      	mov	r1, r3
 8007db4:	4b20      	ldr	r3, [pc, #128]	; (8007e38 <USB_ActivateEndpoint+0x10c>)
 8007db6:	4313      	orrs	r3, r2
 8007db8:	600b      	str	r3, [r1, #0]
 8007dba:	e035      	b.n	8007e28 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dc2:	69da      	ldr	r2, [r3, #28]
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	f003 030f 	and.w	r3, r3, #15
 8007dcc:	2101      	movs	r1, #1
 8007dce:	fa01 f303 	lsl.w	r3, r1, r3
 8007dd2:	041b      	lsls	r3, r3, #16
 8007dd4:	68f9      	ldr	r1, [r7, #12]
 8007dd6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	015a      	lsls	r2, r3, #5
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	4413      	add	r3, r2
 8007de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d119      	bne.n	8007e28 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	015a      	lsls	r2, r3, #5
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	4413      	add	r3, r2
 8007dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	791b      	ldrb	r3, [r3, #4]
 8007e0e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007e10:	430b      	orrs	r3, r1
 8007e12:	431a      	orrs	r2, r3
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	0159      	lsls	r1, r3, #5
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	440b      	add	r3, r1
 8007e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e20:	4619      	mov	r1, r3
 8007e22:	4b05      	ldr	r3, [pc, #20]	; (8007e38 <USB_ActivateEndpoint+0x10c>)
 8007e24:	4313      	orrs	r3, r2
 8007e26:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007e28:	2300      	movs	r3, #0
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3714      	adds	r7, #20
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr
 8007e36:	bf00      	nop
 8007e38:	10008000 	.word	0x10008000

08007e3c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b085      	sub	sp, #20
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	785b      	ldrb	r3, [r3, #1]
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d161      	bne.n	8007f1c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	015a      	lsls	r2, r3, #5
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	4413      	add	r3, r2
 8007e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e6e:	d11f      	bne.n	8007eb0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	015a      	lsls	r2, r3, #5
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	4413      	add	r3, r2
 8007e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	68ba      	ldr	r2, [r7, #8]
 8007e80:	0151      	lsls	r1, r2, #5
 8007e82:	68fa      	ldr	r2, [r7, #12]
 8007e84:	440a      	add	r2, r1
 8007e86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e8a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007e8e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	015a      	lsls	r2, r3, #5
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	4413      	add	r3, r2
 8007e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	68ba      	ldr	r2, [r7, #8]
 8007ea0:	0151      	lsls	r1, r2, #5
 8007ea2:	68fa      	ldr	r2, [r7, #12]
 8007ea4:	440a      	add	r2, r1
 8007ea6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007eaa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007eae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	f003 030f 	and.w	r3, r3, #15
 8007ec0:	2101      	movs	r1, #1
 8007ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	43db      	mvns	r3, r3
 8007eca:	68f9      	ldr	r1, [r7, #12]
 8007ecc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ed0:	4013      	ands	r3, r2
 8007ed2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eda:	69da      	ldr	r2, [r3, #28]
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	f003 030f 	and.w	r3, r3, #15
 8007ee4:	2101      	movs	r1, #1
 8007ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	43db      	mvns	r3, r3
 8007eee:	68f9      	ldr	r1, [r7, #12]
 8007ef0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ef4:	4013      	ands	r3, r2
 8007ef6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	015a      	lsls	r2, r3, #5
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	4413      	add	r3, r2
 8007f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	0159      	lsls	r1, r3, #5
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	440b      	add	r3, r1
 8007f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f12:	4619      	mov	r1, r3
 8007f14:	4b35      	ldr	r3, [pc, #212]	; (8007fec <USB_DeactivateEndpoint+0x1b0>)
 8007f16:	4013      	ands	r3, r2
 8007f18:	600b      	str	r3, [r1, #0]
 8007f1a:	e060      	b.n	8007fde <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	015a      	lsls	r2, r3, #5
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	4413      	add	r3, r2
 8007f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f32:	d11f      	bne.n	8007f74 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	015a      	lsls	r2, r3, #5
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	4413      	add	r3, r2
 8007f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	68ba      	ldr	r2, [r7, #8]
 8007f44:	0151      	lsls	r1, r2, #5
 8007f46:	68fa      	ldr	r2, [r7, #12]
 8007f48:	440a      	add	r2, r1
 8007f4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f4e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007f52:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	015a      	lsls	r2, r3, #5
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	4413      	add	r3, r2
 8007f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	68ba      	ldr	r2, [r7, #8]
 8007f64:	0151      	lsls	r1, r2, #5
 8007f66:	68fa      	ldr	r2, [r7, #12]
 8007f68:	440a      	add	r2, r1
 8007f6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f72:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	f003 030f 	and.w	r3, r3, #15
 8007f84:	2101      	movs	r1, #1
 8007f86:	fa01 f303 	lsl.w	r3, r1, r3
 8007f8a:	041b      	lsls	r3, r3, #16
 8007f8c:	43db      	mvns	r3, r3
 8007f8e:	68f9      	ldr	r1, [r7, #12]
 8007f90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f94:	4013      	ands	r3, r2
 8007f96:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f9e:	69da      	ldr	r2, [r3, #28]
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	f003 030f 	and.w	r3, r3, #15
 8007fa8:	2101      	movs	r1, #1
 8007faa:	fa01 f303 	lsl.w	r3, r1, r3
 8007fae:	041b      	lsls	r3, r3, #16
 8007fb0:	43db      	mvns	r3, r3
 8007fb2:	68f9      	ldr	r1, [r7, #12]
 8007fb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007fb8:	4013      	ands	r3, r2
 8007fba:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	015a      	lsls	r2, r3, #5
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	4413      	add	r3, r2
 8007fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	0159      	lsls	r1, r3, #5
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	440b      	add	r3, r1
 8007fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	4b05      	ldr	r3, [pc, #20]	; (8007ff0 <USB_DeactivateEndpoint+0x1b4>)
 8007fda:	4013      	ands	r3, r2
 8007fdc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007fde:	2300      	movs	r3, #0
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3714      	adds	r7, #20
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr
 8007fec:	ec337800 	.word	0xec337800
 8007ff0:	eff37800 	.word	0xeff37800

08007ff4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b08a      	sub	sp, #40	; 0x28
 8007ff8:	af02      	add	r7, sp, #8
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	4613      	mov	r3, r2
 8008000:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	785b      	ldrb	r3, [r3, #1]
 8008010:	2b01      	cmp	r3, #1
 8008012:	f040 8181 	bne.w	8008318 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	691b      	ldr	r3, [r3, #16]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d132      	bne.n	8008084 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800801e:	69bb      	ldr	r3, [r7, #24]
 8008020:	015a      	lsls	r2, r3, #5
 8008022:	69fb      	ldr	r3, [r7, #28]
 8008024:	4413      	add	r3, r2
 8008026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800802a:	691a      	ldr	r2, [r3, #16]
 800802c:	69bb      	ldr	r3, [r7, #24]
 800802e:	0159      	lsls	r1, r3, #5
 8008030:	69fb      	ldr	r3, [r7, #28]
 8008032:	440b      	add	r3, r1
 8008034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008038:	4619      	mov	r1, r3
 800803a:	4ba5      	ldr	r3, [pc, #660]	; (80082d0 <USB_EPStartXfer+0x2dc>)
 800803c:	4013      	ands	r3, r2
 800803e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008040:	69bb      	ldr	r3, [r7, #24]
 8008042:	015a      	lsls	r2, r3, #5
 8008044:	69fb      	ldr	r3, [r7, #28]
 8008046:	4413      	add	r3, r2
 8008048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800804c:	691b      	ldr	r3, [r3, #16]
 800804e:	69ba      	ldr	r2, [r7, #24]
 8008050:	0151      	lsls	r1, r2, #5
 8008052:	69fa      	ldr	r2, [r7, #28]
 8008054:	440a      	add	r2, r1
 8008056:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800805a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800805e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008060:	69bb      	ldr	r3, [r7, #24]
 8008062:	015a      	lsls	r2, r3, #5
 8008064:	69fb      	ldr	r3, [r7, #28]
 8008066:	4413      	add	r3, r2
 8008068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800806c:	691a      	ldr	r2, [r3, #16]
 800806e:	69bb      	ldr	r3, [r7, #24]
 8008070:	0159      	lsls	r1, r3, #5
 8008072:	69fb      	ldr	r3, [r7, #28]
 8008074:	440b      	add	r3, r1
 8008076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800807a:	4619      	mov	r1, r3
 800807c:	4b95      	ldr	r3, [pc, #596]	; (80082d4 <USB_EPStartXfer+0x2e0>)
 800807e:	4013      	ands	r3, r2
 8008080:	610b      	str	r3, [r1, #16]
 8008082:	e092      	b.n	80081aa <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008084:	69bb      	ldr	r3, [r7, #24]
 8008086:	015a      	lsls	r2, r3, #5
 8008088:	69fb      	ldr	r3, [r7, #28]
 800808a:	4413      	add	r3, r2
 800808c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008090:	691a      	ldr	r2, [r3, #16]
 8008092:	69bb      	ldr	r3, [r7, #24]
 8008094:	0159      	lsls	r1, r3, #5
 8008096:	69fb      	ldr	r3, [r7, #28]
 8008098:	440b      	add	r3, r1
 800809a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800809e:	4619      	mov	r1, r3
 80080a0:	4b8c      	ldr	r3, [pc, #560]	; (80082d4 <USB_EPStartXfer+0x2e0>)
 80080a2:	4013      	ands	r3, r2
 80080a4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80080a6:	69bb      	ldr	r3, [r7, #24]
 80080a8:	015a      	lsls	r2, r3, #5
 80080aa:	69fb      	ldr	r3, [r7, #28]
 80080ac:	4413      	add	r3, r2
 80080ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080b2:	691a      	ldr	r2, [r3, #16]
 80080b4:	69bb      	ldr	r3, [r7, #24]
 80080b6:	0159      	lsls	r1, r3, #5
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	440b      	add	r3, r1
 80080bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080c0:	4619      	mov	r1, r3
 80080c2:	4b83      	ldr	r3, [pc, #524]	; (80082d0 <USB_EPStartXfer+0x2dc>)
 80080c4:	4013      	ands	r3, r2
 80080c6:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 80080c8:	69bb      	ldr	r3, [r7, #24]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d11a      	bne.n	8008104 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	691a      	ldr	r2, [r3, #16]
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d903      	bls.n	80080e2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	689a      	ldr	r2, [r3, #8]
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80080e2:	69bb      	ldr	r3, [r7, #24]
 80080e4:	015a      	lsls	r2, r3, #5
 80080e6:	69fb      	ldr	r3, [r7, #28]
 80080e8:	4413      	add	r3, r2
 80080ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080ee:	691b      	ldr	r3, [r3, #16]
 80080f0:	69ba      	ldr	r2, [r7, #24]
 80080f2:	0151      	lsls	r1, r2, #5
 80080f4:	69fa      	ldr	r2, [r7, #28]
 80080f6:	440a      	add	r2, r1
 80080f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008100:	6113      	str	r3, [r2, #16]
 8008102:	e01b      	b.n	800813c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008104:	69bb      	ldr	r3, [r7, #24]
 8008106:	015a      	lsls	r2, r3, #5
 8008108:	69fb      	ldr	r3, [r7, #28]
 800810a:	4413      	add	r3, r2
 800810c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008110:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	6919      	ldr	r1, [r3, #16]
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	440b      	add	r3, r1
 800811c:	1e59      	subs	r1, r3, #1
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	fbb1 f3f3 	udiv	r3, r1, r3
 8008126:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008128:	4b6b      	ldr	r3, [pc, #428]	; (80082d8 <USB_EPStartXfer+0x2e4>)
 800812a:	400b      	ands	r3, r1
 800812c:	69b9      	ldr	r1, [r7, #24]
 800812e:	0148      	lsls	r0, r1, #5
 8008130:	69f9      	ldr	r1, [r7, #28]
 8008132:	4401      	add	r1, r0
 8008134:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008138:	4313      	orrs	r3, r2
 800813a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800813c:	69bb      	ldr	r3, [r7, #24]
 800813e:	015a      	lsls	r2, r3, #5
 8008140:	69fb      	ldr	r3, [r7, #28]
 8008142:	4413      	add	r3, r2
 8008144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008148:	691a      	ldr	r2, [r3, #16]
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	691b      	ldr	r3, [r3, #16]
 800814e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008152:	69b9      	ldr	r1, [r7, #24]
 8008154:	0148      	lsls	r0, r1, #5
 8008156:	69f9      	ldr	r1, [r7, #28]
 8008158:	4401      	add	r1, r0
 800815a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800815e:	4313      	orrs	r3, r2
 8008160:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	791b      	ldrb	r3, [r3, #4]
 8008166:	2b01      	cmp	r3, #1
 8008168:	d11f      	bne.n	80081aa <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800816a:	69bb      	ldr	r3, [r7, #24]
 800816c:	015a      	lsls	r2, r3, #5
 800816e:	69fb      	ldr	r3, [r7, #28]
 8008170:	4413      	add	r3, r2
 8008172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008176:	691b      	ldr	r3, [r3, #16]
 8008178:	69ba      	ldr	r2, [r7, #24]
 800817a:	0151      	lsls	r1, r2, #5
 800817c:	69fa      	ldr	r2, [r7, #28]
 800817e:	440a      	add	r2, r1
 8008180:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008184:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008188:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800818a:	69bb      	ldr	r3, [r7, #24]
 800818c:	015a      	lsls	r2, r3, #5
 800818e:	69fb      	ldr	r3, [r7, #28]
 8008190:	4413      	add	r3, r2
 8008192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008196:	691b      	ldr	r3, [r3, #16]
 8008198:	69ba      	ldr	r2, [r7, #24]
 800819a:	0151      	lsls	r1, r2, #5
 800819c:	69fa      	ldr	r2, [r7, #28]
 800819e:	440a      	add	r2, r1
 80081a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80081a8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80081aa:	79fb      	ldrb	r3, [r7, #7]
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d14b      	bne.n	8008248 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	69db      	ldr	r3, [r3, #28]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d009      	beq.n	80081cc <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80081b8:	69bb      	ldr	r3, [r7, #24]
 80081ba:	015a      	lsls	r2, r3, #5
 80081bc:	69fb      	ldr	r3, [r7, #28]
 80081be:	4413      	add	r3, r2
 80081c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081c4:	461a      	mov	r2, r3
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	69db      	ldr	r3, [r3, #28]
 80081ca:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	791b      	ldrb	r3, [r3, #4]
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d128      	bne.n	8008226 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80081d4:	69fb      	ldr	r3, [r7, #28]
 80081d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d110      	bne.n	8008206 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80081e4:	69bb      	ldr	r3, [r7, #24]
 80081e6:	015a      	lsls	r2, r3, #5
 80081e8:	69fb      	ldr	r3, [r7, #28]
 80081ea:	4413      	add	r3, r2
 80081ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	69ba      	ldr	r2, [r7, #24]
 80081f4:	0151      	lsls	r1, r2, #5
 80081f6:	69fa      	ldr	r2, [r7, #28]
 80081f8:	440a      	add	r2, r1
 80081fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008202:	6013      	str	r3, [r2, #0]
 8008204:	e00f      	b.n	8008226 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008206:	69bb      	ldr	r3, [r7, #24]
 8008208:	015a      	lsls	r2, r3, #5
 800820a:	69fb      	ldr	r3, [r7, #28]
 800820c:	4413      	add	r3, r2
 800820e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	69ba      	ldr	r2, [r7, #24]
 8008216:	0151      	lsls	r1, r2, #5
 8008218:	69fa      	ldr	r2, [r7, #28]
 800821a:	440a      	add	r2, r1
 800821c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008224:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008226:	69bb      	ldr	r3, [r7, #24]
 8008228:	015a      	lsls	r2, r3, #5
 800822a:	69fb      	ldr	r3, [r7, #28]
 800822c:	4413      	add	r3, r2
 800822e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	69ba      	ldr	r2, [r7, #24]
 8008236:	0151      	lsls	r1, r2, #5
 8008238:	69fa      	ldr	r2, [r7, #28]
 800823a:	440a      	add	r2, r1
 800823c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008240:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008244:	6013      	str	r3, [r2, #0]
 8008246:	e16a      	b.n	800851e <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008248:	69bb      	ldr	r3, [r7, #24]
 800824a:	015a      	lsls	r2, r3, #5
 800824c:	69fb      	ldr	r3, [r7, #28]
 800824e:	4413      	add	r3, r2
 8008250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	69ba      	ldr	r2, [r7, #24]
 8008258:	0151      	lsls	r1, r2, #5
 800825a:	69fa      	ldr	r2, [r7, #28]
 800825c:	440a      	add	r2, r1
 800825e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008262:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008266:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	791b      	ldrb	r3, [r3, #4]
 800826c:	2b01      	cmp	r3, #1
 800826e:	d015      	beq.n	800829c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	691b      	ldr	r3, [r3, #16]
 8008274:	2b00      	cmp	r3, #0
 8008276:	f000 8152 	beq.w	800851e <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800827a:	69fb      	ldr	r3, [r7, #28]
 800827c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008280:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	f003 030f 	and.w	r3, r3, #15
 800828a:	2101      	movs	r1, #1
 800828c:	fa01 f303 	lsl.w	r3, r1, r3
 8008290:	69f9      	ldr	r1, [r7, #28]
 8008292:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008296:	4313      	orrs	r3, r2
 8008298:	634b      	str	r3, [r1, #52]	; 0x34
 800829a:	e140      	b.n	800851e <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800829c:	69fb      	ldr	r3, [r7, #28]
 800829e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d117      	bne.n	80082dc <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80082ac:	69bb      	ldr	r3, [r7, #24]
 80082ae:	015a      	lsls	r2, r3, #5
 80082b0:	69fb      	ldr	r3, [r7, #28]
 80082b2:	4413      	add	r3, r2
 80082b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	69ba      	ldr	r2, [r7, #24]
 80082bc:	0151      	lsls	r1, r2, #5
 80082be:	69fa      	ldr	r2, [r7, #28]
 80082c0:	440a      	add	r2, r1
 80082c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80082ca:	6013      	str	r3, [r2, #0]
 80082cc:	e016      	b.n	80082fc <USB_EPStartXfer+0x308>
 80082ce:	bf00      	nop
 80082d0:	e007ffff 	.word	0xe007ffff
 80082d4:	fff80000 	.word	0xfff80000
 80082d8:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80082dc:	69bb      	ldr	r3, [r7, #24]
 80082de:	015a      	lsls	r2, r3, #5
 80082e0:	69fb      	ldr	r3, [r7, #28]
 80082e2:	4413      	add	r3, r2
 80082e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	69ba      	ldr	r2, [r7, #24]
 80082ec:	0151      	lsls	r1, r2, #5
 80082ee:	69fa      	ldr	r2, [r7, #28]
 80082f0:	440a      	add	r2, r1
 80082f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082fa:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	68d9      	ldr	r1, [r3, #12]
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	781a      	ldrb	r2, [r3, #0]
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	691b      	ldr	r3, [r3, #16]
 8008308:	b298      	uxth	r0, r3
 800830a:	79fb      	ldrb	r3, [r7, #7]
 800830c:	9300      	str	r3, [sp, #0]
 800830e:	4603      	mov	r3, r0
 8008310:	68f8      	ldr	r0, [r7, #12]
 8008312:	f000 f9b9 	bl	8008688 <USB_WritePacket>
 8008316:	e102      	b.n	800851e <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008318:	69bb      	ldr	r3, [r7, #24]
 800831a:	015a      	lsls	r2, r3, #5
 800831c:	69fb      	ldr	r3, [r7, #28]
 800831e:	4413      	add	r3, r2
 8008320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008324:	691a      	ldr	r2, [r3, #16]
 8008326:	69bb      	ldr	r3, [r7, #24]
 8008328:	0159      	lsls	r1, r3, #5
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	440b      	add	r3, r1
 800832e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008332:	4619      	mov	r1, r3
 8008334:	4b7c      	ldr	r3, [pc, #496]	; (8008528 <USB_EPStartXfer+0x534>)
 8008336:	4013      	ands	r3, r2
 8008338:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800833a:	69bb      	ldr	r3, [r7, #24]
 800833c:	015a      	lsls	r2, r3, #5
 800833e:	69fb      	ldr	r3, [r7, #28]
 8008340:	4413      	add	r3, r2
 8008342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008346:	691a      	ldr	r2, [r3, #16]
 8008348:	69bb      	ldr	r3, [r7, #24]
 800834a:	0159      	lsls	r1, r3, #5
 800834c:	69fb      	ldr	r3, [r7, #28]
 800834e:	440b      	add	r3, r1
 8008350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008354:	4619      	mov	r1, r3
 8008356:	4b75      	ldr	r3, [pc, #468]	; (800852c <USB_EPStartXfer+0x538>)
 8008358:	4013      	ands	r3, r2
 800835a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800835c:	69bb      	ldr	r3, [r7, #24]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d12f      	bne.n	80083c2 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	691b      	ldr	r3, [r3, #16]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d003      	beq.n	8008372 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	689a      	ldr	r2, [r3, #8]
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	689a      	ldr	r2, [r3, #8]
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800837a:	69bb      	ldr	r3, [r7, #24]
 800837c:	015a      	lsls	r2, r3, #5
 800837e:	69fb      	ldr	r3, [r7, #28]
 8008380:	4413      	add	r3, r2
 8008382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008386:	691a      	ldr	r2, [r3, #16]
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	6a1b      	ldr	r3, [r3, #32]
 800838c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008390:	69b9      	ldr	r1, [r7, #24]
 8008392:	0148      	lsls	r0, r1, #5
 8008394:	69f9      	ldr	r1, [r7, #28]
 8008396:	4401      	add	r1, r0
 8008398:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800839c:	4313      	orrs	r3, r2
 800839e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80083a0:	69bb      	ldr	r3, [r7, #24]
 80083a2:	015a      	lsls	r2, r3, #5
 80083a4:	69fb      	ldr	r3, [r7, #28]
 80083a6:	4413      	add	r3, r2
 80083a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ac:	691b      	ldr	r3, [r3, #16]
 80083ae:	69ba      	ldr	r2, [r7, #24]
 80083b0:	0151      	lsls	r1, r2, #5
 80083b2:	69fa      	ldr	r2, [r7, #28]
 80083b4:	440a      	add	r2, r1
 80083b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80083be:	6113      	str	r3, [r2, #16]
 80083c0:	e05f      	b.n	8008482 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d123      	bne.n	8008412 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80083ca:	69bb      	ldr	r3, [r7, #24]
 80083cc:	015a      	lsls	r2, r3, #5
 80083ce:	69fb      	ldr	r3, [r7, #28]
 80083d0:	4413      	add	r3, r2
 80083d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083d6:	691a      	ldr	r2, [r3, #16]
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	689b      	ldr	r3, [r3, #8]
 80083dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083e0:	69b9      	ldr	r1, [r7, #24]
 80083e2:	0148      	lsls	r0, r1, #5
 80083e4:	69f9      	ldr	r1, [r7, #28]
 80083e6:	4401      	add	r1, r0
 80083e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80083ec:	4313      	orrs	r3, r2
 80083ee:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80083f0:	69bb      	ldr	r3, [r7, #24]
 80083f2:	015a      	lsls	r2, r3, #5
 80083f4:	69fb      	ldr	r3, [r7, #28]
 80083f6:	4413      	add	r3, r2
 80083f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083fc:	691b      	ldr	r3, [r3, #16]
 80083fe:	69ba      	ldr	r2, [r7, #24]
 8008400:	0151      	lsls	r1, r2, #5
 8008402:	69fa      	ldr	r2, [r7, #28]
 8008404:	440a      	add	r2, r1
 8008406:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800840a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800840e:	6113      	str	r3, [r2, #16]
 8008410:	e037      	b.n	8008482 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	691a      	ldr	r2, [r3, #16]
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	689b      	ldr	r3, [r3, #8]
 800841a:	4413      	add	r3, r2
 800841c:	1e5a      	subs	r2, r3, #1
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	fbb2 f3f3 	udiv	r3, r2, r3
 8008426:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	8afa      	ldrh	r2, [r7, #22]
 800842e:	fb03 f202 	mul.w	r2, r3, r2
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008436:	69bb      	ldr	r3, [r7, #24]
 8008438:	015a      	lsls	r2, r3, #5
 800843a:	69fb      	ldr	r3, [r7, #28]
 800843c:	4413      	add	r3, r2
 800843e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008442:	691a      	ldr	r2, [r3, #16]
 8008444:	8afb      	ldrh	r3, [r7, #22]
 8008446:	04d9      	lsls	r1, r3, #19
 8008448:	4b39      	ldr	r3, [pc, #228]	; (8008530 <USB_EPStartXfer+0x53c>)
 800844a:	400b      	ands	r3, r1
 800844c:	69b9      	ldr	r1, [r7, #24]
 800844e:	0148      	lsls	r0, r1, #5
 8008450:	69f9      	ldr	r1, [r7, #28]
 8008452:	4401      	add	r1, r0
 8008454:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008458:	4313      	orrs	r3, r2
 800845a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800845c:	69bb      	ldr	r3, [r7, #24]
 800845e:	015a      	lsls	r2, r3, #5
 8008460:	69fb      	ldr	r3, [r7, #28]
 8008462:	4413      	add	r3, r2
 8008464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008468:	691a      	ldr	r2, [r3, #16]
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	6a1b      	ldr	r3, [r3, #32]
 800846e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008472:	69b9      	ldr	r1, [r7, #24]
 8008474:	0148      	lsls	r0, r1, #5
 8008476:	69f9      	ldr	r1, [r7, #28]
 8008478:	4401      	add	r1, r0
 800847a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800847e:	4313      	orrs	r3, r2
 8008480:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008482:	79fb      	ldrb	r3, [r7, #7]
 8008484:	2b01      	cmp	r3, #1
 8008486:	d10d      	bne.n	80084a4 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	68db      	ldr	r3, [r3, #12]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d009      	beq.n	80084a4 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	68d9      	ldr	r1, [r3, #12]
 8008494:	69bb      	ldr	r3, [r7, #24]
 8008496:	015a      	lsls	r2, r3, #5
 8008498:	69fb      	ldr	r3, [r7, #28]
 800849a:	4413      	add	r3, r2
 800849c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084a0:	460a      	mov	r2, r1
 80084a2:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	791b      	ldrb	r3, [r3, #4]
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	d128      	bne.n	80084fe <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80084ac:	69fb      	ldr	r3, [r7, #28]
 80084ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d110      	bne.n	80084de <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80084bc:	69bb      	ldr	r3, [r7, #24]
 80084be:	015a      	lsls	r2, r3, #5
 80084c0:	69fb      	ldr	r3, [r7, #28]
 80084c2:	4413      	add	r3, r2
 80084c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	69ba      	ldr	r2, [r7, #24]
 80084cc:	0151      	lsls	r1, r2, #5
 80084ce:	69fa      	ldr	r2, [r7, #28]
 80084d0:	440a      	add	r2, r1
 80084d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80084da:	6013      	str	r3, [r2, #0]
 80084dc:	e00f      	b.n	80084fe <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80084de:	69bb      	ldr	r3, [r7, #24]
 80084e0:	015a      	lsls	r2, r3, #5
 80084e2:	69fb      	ldr	r3, [r7, #28]
 80084e4:	4413      	add	r3, r2
 80084e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	69ba      	ldr	r2, [r7, #24]
 80084ee:	0151      	lsls	r1, r2, #5
 80084f0:	69fa      	ldr	r2, [r7, #28]
 80084f2:	440a      	add	r2, r1
 80084f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084fc:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80084fe:	69bb      	ldr	r3, [r7, #24]
 8008500:	015a      	lsls	r2, r3, #5
 8008502:	69fb      	ldr	r3, [r7, #28]
 8008504:	4413      	add	r3, r2
 8008506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	69ba      	ldr	r2, [r7, #24]
 800850e:	0151      	lsls	r1, r2, #5
 8008510:	69fa      	ldr	r2, [r7, #28]
 8008512:	440a      	add	r2, r1
 8008514:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008518:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800851c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800851e:	2300      	movs	r3, #0
}
 8008520:	4618      	mov	r0, r3
 8008522:	3720      	adds	r7, #32
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}
 8008528:	fff80000 	.word	0xfff80000
 800852c:	e007ffff 	.word	0xe007ffff
 8008530:	1ff80000 	.word	0x1ff80000

08008534 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008534:	b480      	push	{r7}
 8008536:	b087      	sub	sp, #28
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800853e:	2300      	movs	r3, #0
 8008540:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008542:	2300      	movs	r3, #0
 8008544:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	785b      	ldrb	r3, [r3, #1]
 800854e:	2b01      	cmp	r3, #1
 8008550:	d14a      	bne.n	80085e8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	015a      	lsls	r2, r3, #5
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	4413      	add	r3, r2
 800855c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008566:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800856a:	f040 8086 	bne.w	800867a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	015a      	lsls	r2, r3, #5
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	4413      	add	r3, r2
 8008578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	683a      	ldr	r2, [r7, #0]
 8008580:	7812      	ldrb	r2, [r2, #0]
 8008582:	0151      	lsls	r1, r2, #5
 8008584:	693a      	ldr	r2, [r7, #16]
 8008586:	440a      	add	r2, r1
 8008588:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800858c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008590:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	015a      	lsls	r2, r3, #5
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	4413      	add	r3, r2
 800859c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	683a      	ldr	r2, [r7, #0]
 80085a4:	7812      	ldrb	r2, [r2, #0]
 80085a6:	0151      	lsls	r1, r2, #5
 80085a8:	693a      	ldr	r2, [r7, #16]
 80085aa:	440a      	add	r2, r1
 80085ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80085b4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	3301      	adds	r3, #1
 80085ba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f242 7210 	movw	r2, #10000	; 0x2710
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d902      	bls.n	80085cc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80085c6:	2301      	movs	r3, #1
 80085c8:	75fb      	strb	r3, [r7, #23]
          break;
 80085ca:	e056      	b.n	800867a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	015a      	lsls	r2, r3, #5
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	4413      	add	r3, r2
 80085d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085e4:	d0e7      	beq.n	80085b6 <USB_EPStopXfer+0x82>
 80085e6:	e048      	b.n	800867a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	015a      	lsls	r2, r3, #5
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	4413      	add	r3, r2
 80085f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008600:	d13b      	bne.n	800867a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	015a      	lsls	r2, r3, #5
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	4413      	add	r3, r2
 800860c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	683a      	ldr	r2, [r7, #0]
 8008614:	7812      	ldrb	r2, [r2, #0]
 8008616:	0151      	lsls	r1, r2, #5
 8008618:	693a      	ldr	r2, [r7, #16]
 800861a:	440a      	add	r2, r1
 800861c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008620:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008624:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	781b      	ldrb	r3, [r3, #0]
 800862a:	015a      	lsls	r2, r3, #5
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	4413      	add	r3, r2
 8008630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	683a      	ldr	r2, [r7, #0]
 8008638:	7812      	ldrb	r2, [r2, #0]
 800863a:	0151      	lsls	r1, r2, #5
 800863c:	693a      	ldr	r2, [r7, #16]
 800863e:	440a      	add	r2, r1
 8008640:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008644:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008648:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	3301      	adds	r3, #1
 800864e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f242 7210 	movw	r2, #10000	; 0x2710
 8008656:	4293      	cmp	r3, r2
 8008658:	d902      	bls.n	8008660 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800865a:	2301      	movs	r3, #1
 800865c:	75fb      	strb	r3, [r7, #23]
          break;
 800865e:	e00c      	b.n	800867a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	015a      	lsls	r2, r3, #5
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	4413      	add	r3, r2
 800866a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008674:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008678:	d0e7      	beq.n	800864a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800867a:	7dfb      	ldrb	r3, [r7, #23]
}
 800867c:	4618      	mov	r0, r3
 800867e:	371c      	adds	r7, #28
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008688:	b480      	push	{r7}
 800868a:	b089      	sub	sp, #36	; 0x24
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	4611      	mov	r1, r2
 8008694:	461a      	mov	r2, r3
 8008696:	460b      	mov	r3, r1
 8008698:	71fb      	strb	r3, [r7, #7]
 800869a:	4613      	mov	r3, r2
 800869c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80086a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d123      	bne.n	80086f6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80086ae:	88bb      	ldrh	r3, [r7, #4]
 80086b0:	3303      	adds	r3, #3
 80086b2:	089b      	lsrs	r3, r3, #2
 80086b4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80086b6:	2300      	movs	r3, #0
 80086b8:	61bb      	str	r3, [r7, #24]
 80086ba:	e018      	b.n	80086ee <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80086bc:	79fb      	ldrb	r3, [r7, #7]
 80086be:	031a      	lsls	r2, r3, #12
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	4413      	add	r3, r2
 80086c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086c8:	461a      	mov	r2, r3
 80086ca:	69fb      	ldr	r3, [r7, #28]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	6013      	str	r3, [r2, #0]
      pSrc++;
 80086d0:	69fb      	ldr	r3, [r7, #28]
 80086d2:	3301      	adds	r3, #1
 80086d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80086d6:	69fb      	ldr	r3, [r7, #28]
 80086d8:	3301      	adds	r3, #1
 80086da:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80086dc:	69fb      	ldr	r3, [r7, #28]
 80086de:	3301      	adds	r3, #1
 80086e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80086e2:	69fb      	ldr	r3, [r7, #28]
 80086e4:	3301      	adds	r3, #1
 80086e6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80086e8:	69bb      	ldr	r3, [r7, #24]
 80086ea:	3301      	adds	r3, #1
 80086ec:	61bb      	str	r3, [r7, #24]
 80086ee:	69ba      	ldr	r2, [r7, #24]
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	429a      	cmp	r2, r3
 80086f4:	d3e2      	bcc.n	80086bc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80086f6:	2300      	movs	r3, #0
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3724      	adds	r7, #36	; 0x24
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr

08008704 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008704:	b480      	push	{r7}
 8008706:	b08b      	sub	sp, #44	; 0x2c
 8008708:	af00      	add	r7, sp, #0
 800870a:	60f8      	str	r0, [r7, #12]
 800870c:	60b9      	str	r1, [r7, #8]
 800870e:	4613      	mov	r3, r2
 8008710:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800871a:	88fb      	ldrh	r3, [r7, #6]
 800871c:	089b      	lsrs	r3, r3, #2
 800871e:	b29b      	uxth	r3, r3
 8008720:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008722:	88fb      	ldrh	r3, [r7, #6]
 8008724:	f003 0303 	and.w	r3, r3, #3
 8008728:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800872a:	2300      	movs	r3, #0
 800872c:	623b      	str	r3, [r7, #32]
 800872e:	e014      	b.n	800875a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008730:	69bb      	ldr	r3, [r7, #24]
 8008732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008736:	681a      	ldr	r2, [r3, #0]
 8008738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873a:	601a      	str	r2, [r3, #0]
    pDest++;
 800873c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873e:	3301      	adds	r3, #1
 8008740:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008744:	3301      	adds	r3, #1
 8008746:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874a:	3301      	adds	r3, #1
 800874c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800874e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008750:	3301      	adds	r3, #1
 8008752:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008754:	6a3b      	ldr	r3, [r7, #32]
 8008756:	3301      	adds	r3, #1
 8008758:	623b      	str	r3, [r7, #32]
 800875a:	6a3a      	ldr	r2, [r7, #32]
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	429a      	cmp	r2, r3
 8008760:	d3e6      	bcc.n	8008730 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008762:	8bfb      	ldrh	r3, [r7, #30]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d01e      	beq.n	80087a6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008768:	2300      	movs	r3, #0
 800876a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800876c:	69bb      	ldr	r3, [r7, #24]
 800876e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008772:	461a      	mov	r2, r3
 8008774:	f107 0310 	add.w	r3, r7, #16
 8008778:	6812      	ldr	r2, [r2, #0]
 800877a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800877c:	693a      	ldr	r2, [r7, #16]
 800877e:	6a3b      	ldr	r3, [r7, #32]
 8008780:	b2db      	uxtb	r3, r3
 8008782:	00db      	lsls	r3, r3, #3
 8008784:	fa22 f303 	lsr.w	r3, r2, r3
 8008788:	b2da      	uxtb	r2, r3
 800878a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878c:	701a      	strb	r2, [r3, #0]
      i++;
 800878e:	6a3b      	ldr	r3, [r7, #32]
 8008790:	3301      	adds	r3, #1
 8008792:	623b      	str	r3, [r7, #32]
      pDest++;
 8008794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008796:	3301      	adds	r3, #1
 8008798:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800879a:	8bfb      	ldrh	r3, [r7, #30]
 800879c:	3b01      	subs	r3, #1
 800879e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80087a0:	8bfb      	ldrh	r3, [r7, #30]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d1ea      	bne.n	800877c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80087a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	372c      	adds	r7, #44	; 0x2c
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr

080087b4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b085      	sub	sp, #20
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	785b      	ldrb	r3, [r3, #1]
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d12c      	bne.n	800882a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	015a      	lsls	r2, r3, #5
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	4413      	add	r3, r2
 80087d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	db12      	blt.n	8008808 <USB_EPSetStall+0x54>
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d00f      	beq.n	8008808 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	015a      	lsls	r2, r3, #5
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	4413      	add	r3, r2
 80087f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	68ba      	ldr	r2, [r7, #8]
 80087f8:	0151      	lsls	r1, r2, #5
 80087fa:	68fa      	ldr	r2, [r7, #12]
 80087fc:	440a      	add	r2, r1
 80087fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008802:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008806:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	015a      	lsls	r2, r3, #5
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	4413      	add	r3, r2
 8008810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	68ba      	ldr	r2, [r7, #8]
 8008818:	0151      	lsls	r1, r2, #5
 800881a:	68fa      	ldr	r2, [r7, #12]
 800881c:	440a      	add	r2, r1
 800881e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008822:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008826:	6013      	str	r3, [r2, #0]
 8008828:	e02b      	b.n	8008882 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	015a      	lsls	r2, r3, #5
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	4413      	add	r3, r2
 8008832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	2b00      	cmp	r3, #0
 800883a:	db12      	blt.n	8008862 <USB_EPSetStall+0xae>
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d00f      	beq.n	8008862 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	015a      	lsls	r2, r3, #5
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	4413      	add	r3, r2
 800884a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	68ba      	ldr	r2, [r7, #8]
 8008852:	0151      	lsls	r1, r2, #5
 8008854:	68fa      	ldr	r2, [r7, #12]
 8008856:	440a      	add	r2, r1
 8008858:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800885c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008860:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	015a      	lsls	r2, r3, #5
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	4413      	add	r3, r2
 800886a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	68ba      	ldr	r2, [r7, #8]
 8008872:	0151      	lsls	r1, r2, #5
 8008874:	68fa      	ldr	r2, [r7, #12]
 8008876:	440a      	add	r2, r1
 8008878:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800887c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008880:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008882:	2300      	movs	r3, #0
}
 8008884:	4618      	mov	r0, r3
 8008886:	3714      	adds	r7, #20
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008890:	b480      	push	{r7}
 8008892:	b085      	sub	sp, #20
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	781b      	ldrb	r3, [r3, #0]
 80088a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	785b      	ldrb	r3, [r3, #1]
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d128      	bne.n	80088fe <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	015a      	lsls	r2, r3, #5
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	4413      	add	r3, r2
 80088b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	68ba      	ldr	r2, [r7, #8]
 80088bc:	0151      	lsls	r1, r2, #5
 80088be:	68fa      	ldr	r2, [r7, #12]
 80088c0:	440a      	add	r2, r1
 80088c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80088ca:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	791b      	ldrb	r3, [r3, #4]
 80088d0:	2b03      	cmp	r3, #3
 80088d2:	d003      	beq.n	80088dc <USB_EPClearStall+0x4c>
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	791b      	ldrb	r3, [r3, #4]
 80088d8:	2b02      	cmp	r3, #2
 80088da:	d138      	bne.n	800894e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	015a      	lsls	r2, r3, #5
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	4413      	add	r3, r2
 80088e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	68ba      	ldr	r2, [r7, #8]
 80088ec:	0151      	lsls	r1, r2, #5
 80088ee:	68fa      	ldr	r2, [r7, #12]
 80088f0:	440a      	add	r2, r1
 80088f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088fa:	6013      	str	r3, [r2, #0]
 80088fc:	e027      	b.n	800894e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	015a      	lsls	r2, r3, #5
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	4413      	add	r3, r2
 8008906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	68ba      	ldr	r2, [r7, #8]
 800890e:	0151      	lsls	r1, r2, #5
 8008910:	68fa      	ldr	r2, [r7, #12]
 8008912:	440a      	add	r2, r1
 8008914:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008918:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800891c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	791b      	ldrb	r3, [r3, #4]
 8008922:	2b03      	cmp	r3, #3
 8008924:	d003      	beq.n	800892e <USB_EPClearStall+0x9e>
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	791b      	ldrb	r3, [r3, #4]
 800892a:	2b02      	cmp	r3, #2
 800892c:	d10f      	bne.n	800894e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	015a      	lsls	r2, r3, #5
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	4413      	add	r3, r2
 8008936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	68ba      	ldr	r2, [r7, #8]
 800893e:	0151      	lsls	r1, r2, #5
 8008940:	68fa      	ldr	r2, [r7, #12]
 8008942:	440a      	add	r2, r1
 8008944:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800894c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800894e:	2300      	movs	r3, #0
}
 8008950:	4618      	mov	r0, r3
 8008952:	3714      	adds	r7, #20
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800895c:	b480      	push	{r7}
 800895e:	b085      	sub	sp, #20
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	460b      	mov	r3, r1
 8008966:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	68fa      	ldr	r2, [r7, #12]
 8008976:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800897a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800897e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	78fb      	ldrb	r3, [r7, #3]
 800898a:	011b      	lsls	r3, r3, #4
 800898c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008990:	68f9      	ldr	r1, [r7, #12]
 8008992:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008996:	4313      	orrs	r3, r2
 8008998:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800899a:	2300      	movs	r3, #0
}
 800899c:	4618      	mov	r0, r3
 800899e:	3714      	adds	r7, #20
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr

080089a8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b085      	sub	sp, #20
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	68fa      	ldr	r2, [r7, #12]
 80089be:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80089c2:	f023 0303 	bic.w	r3, r3, #3
 80089c6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	68fa      	ldr	r2, [r7, #12]
 80089d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089d6:	f023 0302 	bic.w	r3, r3, #2
 80089da:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80089dc:	2300      	movs	r3, #0
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3714      	adds	r7, #20
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr

080089ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80089ea:	b480      	push	{r7}
 80089ec:	b085      	sub	sp, #20
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	68fa      	ldr	r2, [r7, #12]
 8008a00:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008a04:	f023 0303 	bic.w	r3, r3, #3
 8008a08:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	68fa      	ldr	r2, [r7, #12]
 8008a14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a18:	f043 0302 	orr.w	r3, r3, #2
 8008a1c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008a1e:	2300      	movs	r3, #0
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3714      	adds	r7, #20
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr

08008a2c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b085      	sub	sp, #20
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	695b      	ldr	r3, [r3, #20]
 8008a38:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	699b      	ldr	r3, [r3, #24]
 8008a3e:	68fa      	ldr	r2, [r7, #12]
 8008a40:	4013      	ands	r3, r2
 8008a42:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008a44:	68fb      	ldr	r3, [r7, #12]
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3714      	adds	r7, #20
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a50:	4770      	bx	lr

08008a52 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a52:	b480      	push	{r7}
 8008a54:	b085      	sub	sp, #20
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a64:	699b      	ldr	r3, [r3, #24]
 8008a66:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a6e:	69db      	ldr	r3, [r3, #28]
 8008a70:	68ba      	ldr	r2, [r7, #8]
 8008a72:	4013      	ands	r3, r2
 8008a74:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	0c1b      	lsrs	r3, r3, #16
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3714      	adds	r7, #20
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr

08008a86 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a86:	b480      	push	{r7}
 8008a88:	b085      	sub	sp, #20
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a98:	699b      	ldr	r3, [r3, #24]
 8008a9a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008aa2:	69db      	ldr	r3, [r3, #28]
 8008aa4:	68ba      	ldr	r2, [r7, #8]
 8008aa6:	4013      	ands	r3, r2
 8008aa8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	b29b      	uxth	r3, r3
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3714      	adds	r7, #20
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr

08008aba <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008aba:	b480      	push	{r7}
 8008abc:	b085      	sub	sp, #20
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
 8008ac2:	460b      	mov	r3, r1
 8008ac4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008aca:	78fb      	ldrb	r3, [r7, #3]
 8008acc:	015a      	lsls	r2, r3, #5
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	4413      	add	r3, r2
 8008ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ad6:	689b      	ldr	r3, [r3, #8]
 8008ad8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ae0:	695b      	ldr	r3, [r3, #20]
 8008ae2:	68ba      	ldr	r2, [r7, #8]
 8008ae4:	4013      	ands	r3, r2
 8008ae6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008ae8:	68bb      	ldr	r3, [r7, #8]
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3714      	adds	r7, #20
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr

08008af6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008af6:	b480      	push	{r7}
 8008af8:	b087      	sub	sp, #28
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	6078      	str	r0, [r7, #4]
 8008afe:	460b      	mov	r3, r1
 8008b00:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b0c:	691b      	ldr	r3, [r3, #16]
 8008b0e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b18:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008b1a:	78fb      	ldrb	r3, [r7, #3]
 8008b1c:	f003 030f 	and.w	r3, r3, #15
 8008b20:	68fa      	ldr	r2, [r7, #12]
 8008b22:	fa22 f303 	lsr.w	r3, r2, r3
 8008b26:	01db      	lsls	r3, r3, #7
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	693a      	ldr	r2, [r7, #16]
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008b30:	78fb      	ldrb	r3, [r7, #3]
 8008b32:	015a      	lsls	r2, r3, #5
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	4413      	add	r3, r2
 8008b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	693a      	ldr	r2, [r7, #16]
 8008b40:	4013      	ands	r3, r2
 8008b42:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008b44:	68bb      	ldr	r3, [r7, #8]
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	371c      	adds	r7, #28
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b50:	4770      	bx	lr

08008b52 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008b52:	b480      	push	{r7}
 8008b54:	b083      	sub	sp, #12
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	695b      	ldr	r3, [r3, #20]
 8008b5e:	f003 0301 	and.w	r3, r3, #1
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	370c      	adds	r7, #12
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr
	...

08008b70 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b085      	sub	sp, #20
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b82:	681a      	ldr	r2, [r3, #0]
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	4b09      	ldr	r3, [pc, #36]	; (8008bb4 <USB_ActivateSetup+0x44>)
 8008b8e:	4013      	ands	r3, r2
 8008b90:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	68fa      	ldr	r2, [r7, #12]
 8008b9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ba0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ba4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008ba6:	2300      	movs	r3, #0
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3714      	adds	r7, #20
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr
 8008bb4:	fffff800 	.word	0xfffff800

08008bb8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b087      	sub	sp, #28
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	60f8      	str	r0, [r7, #12]
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	607a      	str	r2, [r7, #4]
 8008bc4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	333c      	adds	r3, #60	; 0x3c
 8008bce:	3304      	adds	r3, #4
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	4a26      	ldr	r2, [pc, #152]	; (8008c70 <USB_EP0_OutStart+0xb8>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d90a      	bls.n	8008bf2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008be8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008bec:	d101      	bne.n	8008bf2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	e037      	b.n	8008c62 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c04:	691b      	ldr	r3, [r3, #16]
 8008c06:	697a      	ldr	r2, [r7, #20]
 8008c08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c18:	691b      	ldr	r3, [r3, #16]
 8008c1a:	697a      	ldr	r2, [r7, #20]
 8008c1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c20:	f043 0318 	orr.w	r3, r3, #24
 8008c24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c2c:	691b      	ldr	r3, [r3, #16]
 8008c2e:	697a      	ldr	r2, [r7, #20]
 8008c30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c34:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008c38:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008c3a:	7afb      	ldrb	r3, [r7, #11]
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	d10f      	bne.n	8008c60 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c46:	461a      	mov	r2, r3
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	697a      	ldr	r2, [r7, #20]
 8008c56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c5a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008c5e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008c60:	2300      	movs	r3, #0
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	371c      	adds	r7, #28
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr
 8008c6e:	bf00      	nop
 8008c70:	4f54300a 	.word	0x4f54300a

08008c74 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b085      	sub	sp, #20
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	3301      	adds	r3, #1
 8008c84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	4a13      	ldr	r2, [pc, #76]	; (8008cd8 <USB_CoreReset+0x64>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d901      	bls.n	8008c92 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008c8e:	2303      	movs	r3, #3
 8008c90:	e01b      	b.n	8008cca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	691b      	ldr	r3, [r3, #16]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	daf2      	bge.n	8008c80 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	691b      	ldr	r3, [r3, #16]
 8008ca2:	f043 0201 	orr.w	r2, r3, #1
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	3301      	adds	r3, #1
 8008cae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	4a09      	ldr	r2, [pc, #36]	; (8008cd8 <USB_CoreReset+0x64>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d901      	bls.n	8008cbc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008cb8:	2303      	movs	r3, #3
 8008cba:	e006      	b.n	8008cca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	691b      	ldr	r3, [r3, #16]
 8008cc0:	f003 0301 	and.w	r3, r3, #1
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d0f0      	beq.n	8008caa <USB_CoreReset+0x36>

  return HAL_OK;
 8008cc8:	2300      	movs	r3, #0
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3714      	adds	r7, #20
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr
 8008cd6:	bf00      	nop
 8008cd8:	00030d40 	.word	0x00030d40

08008cdc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008ce8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008cec:	f002 fc7e 	bl	800b5ec <USBD_static_malloc>
 8008cf0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d109      	bne.n	8008d0c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	32b0      	adds	r2, #176	; 0xb0
 8008d02:	2100      	movs	r1, #0
 8008d04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008d08:	2302      	movs	r3, #2
 8008d0a:	e0d4      	b.n	8008eb6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008d0c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008d10:	2100      	movs	r1, #0
 8008d12:	68f8      	ldr	r0, [r7, #12]
 8008d14:	f003 facb 	bl	800c2ae <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	32b0      	adds	r2, #176	; 0xb0
 8008d22:	68f9      	ldr	r1, [r7, #12]
 8008d24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	32b0      	adds	r2, #176	; 0xb0
 8008d32:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	7c1b      	ldrb	r3, [r3, #16]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d138      	bne.n	8008db6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008d44:	4b5e      	ldr	r3, [pc, #376]	; (8008ec0 <USBD_CDC_Init+0x1e4>)
 8008d46:	7819      	ldrb	r1, [r3, #0]
 8008d48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d4c:	2202      	movs	r2, #2
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f002 fb29 	bl	800b3a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008d54:	4b5a      	ldr	r3, [pc, #360]	; (8008ec0 <USBD_CDC_Init+0x1e4>)
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	f003 020f 	and.w	r2, r3, #15
 8008d5c:	6879      	ldr	r1, [r7, #4]
 8008d5e:	4613      	mov	r3, r2
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	4413      	add	r3, r2
 8008d64:	009b      	lsls	r3, r3, #2
 8008d66:	440b      	add	r3, r1
 8008d68:	3324      	adds	r3, #36	; 0x24
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008d6e:	4b55      	ldr	r3, [pc, #340]	; (8008ec4 <USBD_CDC_Init+0x1e8>)
 8008d70:	7819      	ldrb	r1, [r3, #0]
 8008d72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d76:	2202      	movs	r2, #2
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f002 fb14 	bl	800b3a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008d7e:	4b51      	ldr	r3, [pc, #324]	; (8008ec4 <USBD_CDC_Init+0x1e8>)
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	f003 020f 	and.w	r2, r3, #15
 8008d86:	6879      	ldr	r1, [r7, #4]
 8008d88:	4613      	mov	r3, r2
 8008d8a:	009b      	lsls	r3, r3, #2
 8008d8c:	4413      	add	r3, r2
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	440b      	add	r3, r1
 8008d92:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008d96:	2201      	movs	r2, #1
 8008d98:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008d9a:	4b4b      	ldr	r3, [pc, #300]	; (8008ec8 <USBD_CDC_Init+0x1ec>)
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	f003 020f 	and.w	r2, r3, #15
 8008da2:	6879      	ldr	r1, [r7, #4]
 8008da4:	4613      	mov	r3, r2
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	4413      	add	r3, r2
 8008daa:	009b      	lsls	r3, r3, #2
 8008dac:	440b      	add	r3, r1
 8008dae:	3326      	adds	r3, #38	; 0x26
 8008db0:	2210      	movs	r2, #16
 8008db2:	801a      	strh	r2, [r3, #0]
 8008db4:	e035      	b.n	8008e22 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008db6:	4b42      	ldr	r3, [pc, #264]	; (8008ec0 <USBD_CDC_Init+0x1e4>)
 8008db8:	7819      	ldrb	r1, [r3, #0]
 8008dba:	2340      	movs	r3, #64	; 0x40
 8008dbc:	2202      	movs	r2, #2
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f002 faf1 	bl	800b3a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008dc4:	4b3e      	ldr	r3, [pc, #248]	; (8008ec0 <USBD_CDC_Init+0x1e4>)
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	f003 020f 	and.w	r2, r3, #15
 8008dcc:	6879      	ldr	r1, [r7, #4]
 8008dce:	4613      	mov	r3, r2
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	4413      	add	r3, r2
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	440b      	add	r3, r1
 8008dd8:	3324      	adds	r3, #36	; 0x24
 8008dda:	2201      	movs	r2, #1
 8008ddc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008dde:	4b39      	ldr	r3, [pc, #228]	; (8008ec4 <USBD_CDC_Init+0x1e8>)
 8008de0:	7819      	ldrb	r1, [r3, #0]
 8008de2:	2340      	movs	r3, #64	; 0x40
 8008de4:	2202      	movs	r2, #2
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f002 fadd 	bl	800b3a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008dec:	4b35      	ldr	r3, [pc, #212]	; (8008ec4 <USBD_CDC_Init+0x1e8>)
 8008dee:	781b      	ldrb	r3, [r3, #0]
 8008df0:	f003 020f 	and.w	r2, r3, #15
 8008df4:	6879      	ldr	r1, [r7, #4]
 8008df6:	4613      	mov	r3, r2
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	4413      	add	r3, r2
 8008dfc:	009b      	lsls	r3, r3, #2
 8008dfe:	440b      	add	r3, r1
 8008e00:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008e04:	2201      	movs	r2, #1
 8008e06:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008e08:	4b2f      	ldr	r3, [pc, #188]	; (8008ec8 <USBD_CDC_Init+0x1ec>)
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	f003 020f 	and.w	r2, r3, #15
 8008e10:	6879      	ldr	r1, [r7, #4]
 8008e12:	4613      	mov	r3, r2
 8008e14:	009b      	lsls	r3, r3, #2
 8008e16:	4413      	add	r3, r2
 8008e18:	009b      	lsls	r3, r3, #2
 8008e1a:	440b      	add	r3, r1
 8008e1c:	3326      	adds	r3, #38	; 0x26
 8008e1e:	2210      	movs	r2, #16
 8008e20:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008e22:	4b29      	ldr	r3, [pc, #164]	; (8008ec8 <USBD_CDC_Init+0x1ec>)
 8008e24:	7819      	ldrb	r1, [r3, #0]
 8008e26:	2308      	movs	r3, #8
 8008e28:	2203      	movs	r2, #3
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f002 fabb 	bl	800b3a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008e30:	4b25      	ldr	r3, [pc, #148]	; (8008ec8 <USBD_CDC_Init+0x1ec>)
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	f003 020f 	and.w	r2, r3, #15
 8008e38:	6879      	ldr	r1, [r7, #4]
 8008e3a:	4613      	mov	r3, r2
 8008e3c:	009b      	lsls	r3, r3, #2
 8008e3e:	4413      	add	r3, r2
 8008e40:	009b      	lsls	r3, r3, #2
 8008e42:	440b      	add	r3, r1
 8008e44:	3324      	adds	r3, #36	; 0x24
 8008e46:	2201      	movs	r2, #1
 8008e48:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	33b0      	adds	r3, #176	; 0xb0
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	4413      	add	r3, r2
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2200      	movs	r2, #0
 8008e72:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d101      	bne.n	8008e84 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008e80:	2302      	movs	r3, #2
 8008e82:	e018      	b.n	8008eb6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	7c1b      	ldrb	r3, [r3, #16]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d10a      	bne.n	8008ea2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008e8c:	4b0d      	ldr	r3, [pc, #52]	; (8008ec4 <USBD_CDC_Init+0x1e8>)
 8008e8e:	7819      	ldrb	r1, [r3, #0]
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f002 fb72 	bl	800b584 <USBD_LL_PrepareReceive>
 8008ea0:	e008      	b.n	8008eb4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008ea2:	4b08      	ldr	r3, [pc, #32]	; (8008ec4 <USBD_CDC_Init+0x1e8>)
 8008ea4:	7819      	ldrb	r1, [r3, #0]
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008eac:	2340      	movs	r3, #64	; 0x40
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f002 fb68 	bl	800b584 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008eb4:	2300      	movs	r3, #0
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3710      	adds	r7, #16
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
 8008ebe:	bf00      	nop
 8008ec0:	24000097 	.word	0x24000097
 8008ec4:	24000098 	.word	0x24000098
 8008ec8:	24000099 	.word	0x24000099

08008ecc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b082      	sub	sp, #8
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	460b      	mov	r3, r1
 8008ed6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008ed8:	4b3a      	ldr	r3, [pc, #232]	; (8008fc4 <USBD_CDC_DeInit+0xf8>)
 8008eda:	781b      	ldrb	r3, [r3, #0]
 8008edc:	4619      	mov	r1, r3
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f002 fa87 	bl	800b3f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008ee4:	4b37      	ldr	r3, [pc, #220]	; (8008fc4 <USBD_CDC_DeInit+0xf8>)
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	f003 020f 	and.w	r2, r3, #15
 8008eec:	6879      	ldr	r1, [r7, #4]
 8008eee:	4613      	mov	r3, r2
 8008ef0:	009b      	lsls	r3, r3, #2
 8008ef2:	4413      	add	r3, r2
 8008ef4:	009b      	lsls	r3, r3, #2
 8008ef6:	440b      	add	r3, r1
 8008ef8:	3324      	adds	r3, #36	; 0x24
 8008efa:	2200      	movs	r2, #0
 8008efc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008efe:	4b32      	ldr	r3, [pc, #200]	; (8008fc8 <USBD_CDC_DeInit+0xfc>)
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	4619      	mov	r1, r3
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f002 fa74 	bl	800b3f2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008f0a:	4b2f      	ldr	r3, [pc, #188]	; (8008fc8 <USBD_CDC_DeInit+0xfc>)
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	f003 020f 	and.w	r2, r3, #15
 8008f12:	6879      	ldr	r1, [r7, #4]
 8008f14:	4613      	mov	r3, r2
 8008f16:	009b      	lsls	r3, r3, #2
 8008f18:	4413      	add	r3, r2
 8008f1a:	009b      	lsls	r3, r3, #2
 8008f1c:	440b      	add	r3, r1
 8008f1e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008f22:	2200      	movs	r2, #0
 8008f24:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008f26:	4b29      	ldr	r3, [pc, #164]	; (8008fcc <USBD_CDC_DeInit+0x100>)
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f002 fa60 	bl	800b3f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008f32:	4b26      	ldr	r3, [pc, #152]	; (8008fcc <USBD_CDC_DeInit+0x100>)
 8008f34:	781b      	ldrb	r3, [r3, #0]
 8008f36:	f003 020f 	and.w	r2, r3, #15
 8008f3a:	6879      	ldr	r1, [r7, #4]
 8008f3c:	4613      	mov	r3, r2
 8008f3e:	009b      	lsls	r3, r3, #2
 8008f40:	4413      	add	r3, r2
 8008f42:	009b      	lsls	r3, r3, #2
 8008f44:	440b      	add	r3, r1
 8008f46:	3324      	adds	r3, #36	; 0x24
 8008f48:	2200      	movs	r2, #0
 8008f4a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008f4c:	4b1f      	ldr	r3, [pc, #124]	; (8008fcc <USBD_CDC_DeInit+0x100>)
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	f003 020f 	and.w	r2, r3, #15
 8008f54:	6879      	ldr	r1, [r7, #4]
 8008f56:	4613      	mov	r3, r2
 8008f58:	009b      	lsls	r3, r3, #2
 8008f5a:	4413      	add	r3, r2
 8008f5c:	009b      	lsls	r3, r3, #2
 8008f5e:	440b      	add	r3, r1
 8008f60:	3326      	adds	r3, #38	; 0x26
 8008f62:	2200      	movs	r2, #0
 8008f64:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	32b0      	adds	r2, #176	; 0xb0
 8008f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d01f      	beq.n	8008fb8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	33b0      	adds	r3, #176	; 0xb0
 8008f82:	009b      	lsls	r3, r3, #2
 8008f84:	4413      	add	r3, r2
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	32b0      	adds	r2, #176	; 0xb0
 8008f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f002 fb34 	bl	800b608 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	32b0      	adds	r2, #176	; 0xb0
 8008faa:	2100      	movs	r1, #0
 8008fac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008fb8:	2300      	movs	r3, #0
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3708      	adds	r7, #8
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}
 8008fc2:	bf00      	nop
 8008fc4:	24000097 	.word	0x24000097
 8008fc8:	24000098 	.word	0x24000098
 8008fcc:	24000099 	.word	0x24000099

08008fd0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b086      	sub	sp, #24
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	32b0      	adds	r2, #176	; 0xb0
 8008fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fe8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008fea:	2300      	movs	r3, #0
 8008fec:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d101      	bne.n	8009000 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008ffc:	2303      	movs	r3, #3
 8008ffe:	e0bf      	b.n	8009180 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009008:	2b00      	cmp	r3, #0
 800900a:	d050      	beq.n	80090ae <USBD_CDC_Setup+0xde>
 800900c:	2b20      	cmp	r3, #32
 800900e:	f040 80af 	bne.w	8009170 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	88db      	ldrh	r3, [r3, #6]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d03a      	beq.n	8009090 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	b25b      	sxtb	r3, r3
 8009020:	2b00      	cmp	r3, #0
 8009022:	da1b      	bge.n	800905c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	33b0      	adds	r3, #176	; 0xb0
 800902e:	009b      	lsls	r3, r3, #2
 8009030:	4413      	add	r3, r2
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	689b      	ldr	r3, [r3, #8]
 8009036:	683a      	ldr	r2, [r7, #0]
 8009038:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800903a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800903c:	683a      	ldr	r2, [r7, #0]
 800903e:	88d2      	ldrh	r2, [r2, #6]
 8009040:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	88db      	ldrh	r3, [r3, #6]
 8009046:	2b07      	cmp	r3, #7
 8009048:	bf28      	it	cs
 800904a:	2307      	movcs	r3, #7
 800904c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	89fa      	ldrh	r2, [r7, #14]
 8009052:	4619      	mov	r1, r3
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f001 fd73 	bl	800ab40 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800905a:	e090      	b.n	800917e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	785a      	ldrb	r2, [r3, #1]
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	88db      	ldrh	r3, [r3, #6]
 800906a:	2b3f      	cmp	r3, #63	; 0x3f
 800906c:	d803      	bhi.n	8009076 <USBD_CDC_Setup+0xa6>
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	88db      	ldrh	r3, [r3, #6]
 8009072:	b2da      	uxtb	r2, r3
 8009074:	e000      	b.n	8009078 <USBD_CDC_Setup+0xa8>
 8009076:	2240      	movs	r2, #64	; 0x40
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800907e:	6939      	ldr	r1, [r7, #16]
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009086:	461a      	mov	r2, r3
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f001 fd85 	bl	800ab98 <USBD_CtlPrepareRx>
      break;
 800908e:	e076      	b.n	800917e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	33b0      	adds	r3, #176	; 0xb0
 800909a:	009b      	lsls	r3, r3, #2
 800909c:	4413      	add	r3, r2
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	683a      	ldr	r2, [r7, #0]
 80090a4:	7850      	ldrb	r0, [r2, #1]
 80090a6:	2200      	movs	r2, #0
 80090a8:	6839      	ldr	r1, [r7, #0]
 80090aa:	4798      	blx	r3
      break;
 80090ac:	e067      	b.n	800917e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	785b      	ldrb	r3, [r3, #1]
 80090b2:	2b0b      	cmp	r3, #11
 80090b4:	d851      	bhi.n	800915a <USBD_CDC_Setup+0x18a>
 80090b6:	a201      	add	r2, pc, #4	; (adr r2, 80090bc <USBD_CDC_Setup+0xec>)
 80090b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090bc:	080090ed 	.word	0x080090ed
 80090c0:	08009169 	.word	0x08009169
 80090c4:	0800915b 	.word	0x0800915b
 80090c8:	0800915b 	.word	0x0800915b
 80090cc:	0800915b 	.word	0x0800915b
 80090d0:	0800915b 	.word	0x0800915b
 80090d4:	0800915b 	.word	0x0800915b
 80090d8:	0800915b 	.word	0x0800915b
 80090dc:	0800915b 	.word	0x0800915b
 80090e0:	0800915b 	.word	0x0800915b
 80090e4:	08009117 	.word	0x08009117
 80090e8:	08009141 	.word	0x08009141
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090f2:	b2db      	uxtb	r3, r3
 80090f4:	2b03      	cmp	r3, #3
 80090f6:	d107      	bne.n	8009108 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80090f8:	f107 030a 	add.w	r3, r7, #10
 80090fc:	2202      	movs	r2, #2
 80090fe:	4619      	mov	r1, r3
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f001 fd1d 	bl	800ab40 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009106:	e032      	b.n	800916e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009108:	6839      	ldr	r1, [r7, #0]
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f001 fca7 	bl	800aa5e <USBD_CtlError>
            ret = USBD_FAIL;
 8009110:	2303      	movs	r3, #3
 8009112:	75fb      	strb	r3, [r7, #23]
          break;
 8009114:	e02b      	b.n	800916e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800911c:	b2db      	uxtb	r3, r3
 800911e:	2b03      	cmp	r3, #3
 8009120:	d107      	bne.n	8009132 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009122:	f107 030d 	add.w	r3, r7, #13
 8009126:	2201      	movs	r2, #1
 8009128:	4619      	mov	r1, r3
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f001 fd08 	bl	800ab40 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009130:	e01d      	b.n	800916e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009132:	6839      	ldr	r1, [r7, #0]
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f001 fc92 	bl	800aa5e <USBD_CtlError>
            ret = USBD_FAIL;
 800913a:	2303      	movs	r3, #3
 800913c:	75fb      	strb	r3, [r7, #23]
          break;
 800913e:	e016      	b.n	800916e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009146:	b2db      	uxtb	r3, r3
 8009148:	2b03      	cmp	r3, #3
 800914a:	d00f      	beq.n	800916c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800914c:	6839      	ldr	r1, [r7, #0]
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f001 fc85 	bl	800aa5e <USBD_CtlError>
            ret = USBD_FAIL;
 8009154:	2303      	movs	r3, #3
 8009156:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009158:	e008      	b.n	800916c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800915a:	6839      	ldr	r1, [r7, #0]
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f001 fc7e 	bl	800aa5e <USBD_CtlError>
          ret = USBD_FAIL;
 8009162:	2303      	movs	r3, #3
 8009164:	75fb      	strb	r3, [r7, #23]
          break;
 8009166:	e002      	b.n	800916e <USBD_CDC_Setup+0x19e>
          break;
 8009168:	bf00      	nop
 800916a:	e008      	b.n	800917e <USBD_CDC_Setup+0x1ae>
          break;
 800916c:	bf00      	nop
      }
      break;
 800916e:	e006      	b.n	800917e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009170:	6839      	ldr	r1, [r7, #0]
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f001 fc73 	bl	800aa5e <USBD_CtlError>
      ret = USBD_FAIL;
 8009178:	2303      	movs	r3, #3
 800917a:	75fb      	strb	r3, [r7, #23]
      break;
 800917c:	bf00      	nop
  }

  return (uint8_t)ret;
 800917e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009180:	4618      	mov	r0, r3
 8009182:	3718      	adds	r7, #24
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b084      	sub	sp, #16
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	460b      	mov	r3, r1
 8009192:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800919a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	32b0      	adds	r2, #176	; 0xb0
 80091a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d101      	bne.n	80091b2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80091ae:	2303      	movs	r3, #3
 80091b0:	e065      	b.n	800927e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	32b0      	adds	r2, #176	; 0xb0
 80091bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091c0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80091c2:	78fb      	ldrb	r3, [r7, #3]
 80091c4:	f003 020f 	and.w	r2, r3, #15
 80091c8:	6879      	ldr	r1, [r7, #4]
 80091ca:	4613      	mov	r3, r2
 80091cc:	009b      	lsls	r3, r3, #2
 80091ce:	4413      	add	r3, r2
 80091d0:	009b      	lsls	r3, r3, #2
 80091d2:	440b      	add	r3, r1
 80091d4:	3318      	adds	r3, #24
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d02f      	beq.n	800923c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80091dc:	78fb      	ldrb	r3, [r7, #3]
 80091de:	f003 020f 	and.w	r2, r3, #15
 80091e2:	6879      	ldr	r1, [r7, #4]
 80091e4:	4613      	mov	r3, r2
 80091e6:	009b      	lsls	r3, r3, #2
 80091e8:	4413      	add	r3, r2
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	440b      	add	r3, r1
 80091ee:	3318      	adds	r3, #24
 80091f0:	681a      	ldr	r2, [r3, #0]
 80091f2:	78fb      	ldrb	r3, [r7, #3]
 80091f4:	f003 010f 	and.w	r1, r3, #15
 80091f8:	68f8      	ldr	r0, [r7, #12]
 80091fa:	460b      	mov	r3, r1
 80091fc:	00db      	lsls	r3, r3, #3
 80091fe:	440b      	add	r3, r1
 8009200:	009b      	lsls	r3, r3, #2
 8009202:	4403      	add	r3, r0
 8009204:	3344      	adds	r3, #68	; 0x44
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	fbb2 f1f3 	udiv	r1, r2, r3
 800920c:	fb01 f303 	mul.w	r3, r1, r3
 8009210:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009212:	2b00      	cmp	r3, #0
 8009214:	d112      	bne.n	800923c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009216:	78fb      	ldrb	r3, [r7, #3]
 8009218:	f003 020f 	and.w	r2, r3, #15
 800921c:	6879      	ldr	r1, [r7, #4]
 800921e:	4613      	mov	r3, r2
 8009220:	009b      	lsls	r3, r3, #2
 8009222:	4413      	add	r3, r2
 8009224:	009b      	lsls	r3, r3, #2
 8009226:	440b      	add	r3, r1
 8009228:	3318      	adds	r3, #24
 800922a:	2200      	movs	r2, #0
 800922c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800922e:	78f9      	ldrb	r1, [r7, #3]
 8009230:	2300      	movs	r3, #0
 8009232:	2200      	movs	r2, #0
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f002 f984 	bl	800b542 <USBD_LL_Transmit>
 800923a:	e01f      	b.n	800927c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	2200      	movs	r2, #0
 8009240:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800924a:	687a      	ldr	r2, [r7, #4]
 800924c:	33b0      	adds	r3, #176	; 0xb0
 800924e:	009b      	lsls	r3, r3, #2
 8009250:	4413      	add	r3, r2
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	691b      	ldr	r3, [r3, #16]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d010      	beq.n	800927c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009260:	687a      	ldr	r2, [r7, #4]
 8009262:	33b0      	adds	r3, #176	; 0xb0
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	4413      	add	r3, r2
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	691b      	ldr	r3, [r3, #16]
 800926c:	68ba      	ldr	r2, [r7, #8]
 800926e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009272:	68ba      	ldr	r2, [r7, #8]
 8009274:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009278:	78fa      	ldrb	r2, [r7, #3]
 800927a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800927c:	2300      	movs	r3, #0
}
 800927e:	4618      	mov	r0, r3
 8009280:	3710      	adds	r7, #16
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}

08009286 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009286:	b580      	push	{r7, lr}
 8009288:	b084      	sub	sp, #16
 800928a:	af00      	add	r7, sp, #0
 800928c:	6078      	str	r0, [r7, #4]
 800928e:	460b      	mov	r3, r1
 8009290:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	32b0      	adds	r2, #176	; 0xb0
 800929c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092a0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	32b0      	adds	r2, #176	; 0xb0
 80092ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d101      	bne.n	80092b8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80092b4:	2303      	movs	r3, #3
 80092b6:	e01a      	b.n	80092ee <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80092b8:	78fb      	ldrb	r3, [r7, #3]
 80092ba:	4619      	mov	r1, r3
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f002 f982 	bl	800b5c6 <USBD_LL_GetRxDataSize>
 80092c2:	4602      	mov	r2, r0
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80092d0:	687a      	ldr	r2, [r7, #4]
 80092d2:	33b0      	adds	r3, #176	; 0xb0
 80092d4:	009b      	lsls	r3, r3, #2
 80092d6:	4413      	add	r3, r2
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	68db      	ldr	r3, [r3, #12]
 80092dc:	68fa      	ldr	r2, [r7, #12]
 80092de:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80092e2:	68fa      	ldr	r2, [r7, #12]
 80092e4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80092e8:	4611      	mov	r1, r2
 80092ea:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80092ec:	2300      	movs	r3, #0
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3710      	adds	r7, #16
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}

080092f6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80092f6:	b580      	push	{r7, lr}
 80092f8:	b084      	sub	sp, #16
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	32b0      	adds	r2, #176	; 0xb0
 8009308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800930c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d101      	bne.n	8009318 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009314:	2303      	movs	r3, #3
 8009316:	e025      	b.n	8009364 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	33b0      	adds	r3, #176	; 0xb0
 8009322:	009b      	lsls	r3, r3, #2
 8009324:	4413      	add	r3, r2
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d01a      	beq.n	8009362 <USBD_CDC_EP0_RxReady+0x6c>
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009332:	2bff      	cmp	r3, #255	; 0xff
 8009334:	d015      	beq.n	8009362 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800933c:	687a      	ldr	r2, [r7, #4]
 800933e:	33b0      	adds	r3, #176	; 0xb0
 8009340:	009b      	lsls	r3, r3, #2
 8009342:	4413      	add	r3, r2
 8009344:	685b      	ldr	r3, [r3, #4]
 8009346:	689b      	ldr	r3, [r3, #8]
 8009348:	68fa      	ldr	r2, [r7, #12]
 800934a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800934e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009350:	68fa      	ldr	r2, [r7, #12]
 8009352:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009356:	b292      	uxth	r2, r2
 8009358:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	22ff      	movs	r2, #255	; 0xff
 800935e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009362:	2300      	movs	r3, #0
}
 8009364:	4618      	mov	r0, r3
 8009366:	3710      	adds	r7, #16
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}

0800936c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b086      	sub	sp, #24
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009374:	2182      	movs	r1, #130	; 0x82
 8009376:	4818      	ldr	r0, [pc, #96]	; (80093d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009378:	f000 fd0f 	bl	8009d9a <USBD_GetEpDesc>
 800937c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800937e:	2101      	movs	r1, #1
 8009380:	4815      	ldr	r0, [pc, #84]	; (80093d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009382:	f000 fd0a 	bl	8009d9a <USBD_GetEpDesc>
 8009386:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009388:	2181      	movs	r1, #129	; 0x81
 800938a:	4813      	ldr	r0, [pc, #76]	; (80093d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800938c:	f000 fd05 	bl	8009d9a <USBD_GetEpDesc>
 8009390:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d002      	beq.n	800939e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	2210      	movs	r2, #16
 800939c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d006      	beq.n	80093b2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	2200      	movs	r2, #0
 80093a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093ac:	711a      	strb	r2, [r3, #4]
 80093ae:	2200      	movs	r2, #0
 80093b0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d006      	beq.n	80093c6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2200      	movs	r2, #0
 80093bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093c0:	711a      	strb	r2, [r3, #4]
 80093c2:	2200      	movs	r2, #0
 80093c4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2243      	movs	r2, #67	; 0x43
 80093ca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80093cc:	4b02      	ldr	r3, [pc, #8]	; (80093d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3718      	adds	r7, #24
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	bf00      	nop
 80093d8:	24000054 	.word	0x24000054

080093dc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b086      	sub	sp, #24
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80093e4:	2182      	movs	r1, #130	; 0x82
 80093e6:	4818      	ldr	r0, [pc, #96]	; (8009448 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80093e8:	f000 fcd7 	bl	8009d9a <USBD_GetEpDesc>
 80093ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80093ee:	2101      	movs	r1, #1
 80093f0:	4815      	ldr	r0, [pc, #84]	; (8009448 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80093f2:	f000 fcd2 	bl	8009d9a <USBD_GetEpDesc>
 80093f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80093f8:	2181      	movs	r1, #129	; 0x81
 80093fa:	4813      	ldr	r0, [pc, #76]	; (8009448 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80093fc:	f000 fccd 	bl	8009d9a <USBD_GetEpDesc>
 8009400:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d002      	beq.n	800940e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	2210      	movs	r2, #16
 800940c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d006      	beq.n	8009422 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	2200      	movs	r2, #0
 8009418:	711a      	strb	r2, [r3, #4]
 800941a:	2200      	movs	r2, #0
 800941c:	f042 0202 	orr.w	r2, r2, #2
 8009420:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d006      	beq.n	8009436 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2200      	movs	r2, #0
 800942c:	711a      	strb	r2, [r3, #4]
 800942e:	2200      	movs	r2, #0
 8009430:	f042 0202 	orr.w	r2, r2, #2
 8009434:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2243      	movs	r2, #67	; 0x43
 800943a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800943c:	4b02      	ldr	r3, [pc, #8]	; (8009448 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800943e:	4618      	mov	r0, r3
 8009440:	3718      	adds	r7, #24
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}
 8009446:	bf00      	nop
 8009448:	24000054 	.word	0x24000054

0800944c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b086      	sub	sp, #24
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009454:	2182      	movs	r1, #130	; 0x82
 8009456:	4818      	ldr	r0, [pc, #96]	; (80094b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009458:	f000 fc9f 	bl	8009d9a <USBD_GetEpDesc>
 800945c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800945e:	2101      	movs	r1, #1
 8009460:	4815      	ldr	r0, [pc, #84]	; (80094b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009462:	f000 fc9a 	bl	8009d9a <USBD_GetEpDesc>
 8009466:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009468:	2181      	movs	r1, #129	; 0x81
 800946a:	4813      	ldr	r0, [pc, #76]	; (80094b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800946c:	f000 fc95 	bl	8009d9a <USBD_GetEpDesc>
 8009470:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d002      	beq.n	800947e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	2210      	movs	r2, #16
 800947c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d006      	beq.n	8009492 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	2200      	movs	r2, #0
 8009488:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800948c:	711a      	strb	r2, [r3, #4]
 800948e:	2200      	movs	r2, #0
 8009490:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d006      	beq.n	80094a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	2200      	movs	r2, #0
 800949c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80094a0:	711a      	strb	r2, [r3, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2243      	movs	r2, #67	; 0x43
 80094aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80094ac:	4b02      	ldr	r3, [pc, #8]	; (80094b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3718      	adds	r7, #24
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}
 80094b6:	bf00      	nop
 80094b8:	24000054 	.word	0x24000054

080094bc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80094bc:	b480      	push	{r7}
 80094be:	b083      	sub	sp, #12
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	220a      	movs	r2, #10
 80094c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80094ca:	4b03      	ldr	r3, [pc, #12]	; (80094d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	370c      	adds	r7, #12
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr
 80094d8:	24000010 	.word	0x24000010

080094dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80094dc:	b480      	push	{r7}
 80094de:	b083      	sub	sp, #12
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d101      	bne.n	80094f0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80094ec:	2303      	movs	r3, #3
 80094ee:	e009      	b.n	8009504 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80094f6:	687a      	ldr	r2, [r7, #4]
 80094f8:	33b0      	adds	r3, #176	; 0xb0
 80094fa:	009b      	lsls	r3, r3, #2
 80094fc:	4413      	add	r3, r2
 80094fe:	683a      	ldr	r2, [r7, #0]
 8009500:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009502:	2300      	movs	r3, #0
}
 8009504:	4618      	mov	r0, r3
 8009506:	370c      	adds	r7, #12
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr

08009510 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009510:	b480      	push	{r7}
 8009512:	b087      	sub	sp, #28
 8009514:	af00      	add	r7, sp, #0
 8009516:	60f8      	str	r0, [r7, #12]
 8009518:	60b9      	str	r1, [r7, #8]
 800951a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	32b0      	adds	r2, #176	; 0xb0
 8009526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800952a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d101      	bne.n	8009536 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009532:	2303      	movs	r3, #3
 8009534:	e008      	b.n	8009548 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	68ba      	ldr	r2, [r7, #8]
 800953a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	687a      	ldr	r2, [r7, #4]
 8009542:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009546:	2300      	movs	r3, #0
}
 8009548:	4618      	mov	r0, r3
 800954a:	371c      	adds	r7, #28
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr

08009554 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009554:	b480      	push	{r7}
 8009556:	b085      	sub	sp, #20
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	32b0      	adds	r2, #176	; 0xb0
 8009568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800956c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d101      	bne.n	8009578 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009574:	2303      	movs	r3, #3
 8009576:	e004      	b.n	8009582 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	683a      	ldr	r2, [r7, #0]
 800957c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009580:	2300      	movs	r3, #0
}
 8009582:	4618      	mov	r0, r3
 8009584:	3714      	adds	r7, #20
 8009586:	46bd      	mov	sp, r7
 8009588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958c:	4770      	bx	lr
	...

08009590 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b084      	sub	sp, #16
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	32b0      	adds	r2, #176	; 0xb0
 80095a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095a6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	32b0      	adds	r2, #176	; 0xb0
 80095b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d101      	bne.n	80095be <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80095ba:	2303      	movs	r3, #3
 80095bc:	e018      	b.n	80095f0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	7c1b      	ldrb	r3, [r3, #16]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d10a      	bne.n	80095dc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80095c6:	4b0c      	ldr	r3, [pc, #48]	; (80095f8 <USBD_CDC_ReceivePacket+0x68>)
 80095c8:	7819      	ldrb	r1, [r3, #0]
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80095d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f001 ffd5 	bl	800b584 <USBD_LL_PrepareReceive>
 80095da:	e008      	b.n	80095ee <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80095dc:	4b06      	ldr	r3, [pc, #24]	; (80095f8 <USBD_CDC_ReceivePacket+0x68>)
 80095de:	7819      	ldrb	r1, [r3, #0]
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80095e6:	2340      	movs	r3, #64	; 0x40
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f001 ffcb 	bl	800b584 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80095ee:	2300      	movs	r3, #0
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3710      	adds	r7, #16
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}
 80095f8:	24000098 	.word	0x24000098

080095fc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b086      	sub	sp, #24
 8009600:	af00      	add	r7, sp, #0
 8009602:	60f8      	str	r0, [r7, #12]
 8009604:	60b9      	str	r1, [r7, #8]
 8009606:	4613      	mov	r3, r2
 8009608:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d101      	bne.n	8009614 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009610:	2303      	movs	r3, #3
 8009612:	e01f      	b.n	8009654 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2200      	movs	r2, #0
 8009618:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2200      	movs	r2, #0
 8009620:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	2200      	movs	r2, #0
 8009628:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d003      	beq.n	800963a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	68ba      	ldr	r2, [r7, #8]
 8009636:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	2201      	movs	r2, #1
 800963e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	79fa      	ldrb	r2, [r7, #7]
 8009646:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009648:	68f8      	ldr	r0, [r7, #12]
 800964a:	f001 fe41 	bl	800b2d0 <USBD_LL_Init>
 800964e:	4603      	mov	r3, r0
 8009650:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009652:	7dfb      	ldrb	r3, [r7, #23]
}
 8009654:	4618      	mov	r0, r3
 8009656:	3718      	adds	r7, #24
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009666:	2300      	movs	r3, #0
 8009668:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d101      	bne.n	8009674 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009670:	2303      	movs	r3, #3
 8009672:	e025      	b.n	80096c0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	683a      	ldr	r2, [r7, #0]
 8009678:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	32ae      	adds	r2, #174	; 0xae
 8009686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800968a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800968c:	2b00      	cmp	r3, #0
 800968e:	d00f      	beq.n	80096b0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	32ae      	adds	r2, #174	; 0xae
 800969a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800969e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a0:	f107 020e 	add.w	r2, r7, #14
 80096a4:	4610      	mov	r0, r2
 80096a6:	4798      	blx	r3
 80096a8:	4602      	mov	r2, r0
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80096b6:	1c5a      	adds	r2, r3, #1
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80096be:	2300      	movs	r3, #0
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3710      	adds	r7, #16
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b082      	sub	sp, #8
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f001 fe4d 	bl	800b370 <USBD_LL_Start>
 80096d6:	4603      	mov	r3, r0
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3708      	adds	r7, #8
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}

080096e0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b083      	sub	sp, #12
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80096e8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	370c      	adds	r7, #12
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr

080096f6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80096f6:	b580      	push	{r7, lr}
 80096f8:	b084      	sub	sp, #16
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	6078      	str	r0, [r7, #4]
 80096fe:	460b      	mov	r3, r1
 8009700:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009702:	2300      	movs	r3, #0
 8009704:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800970c:	2b00      	cmp	r3, #0
 800970e:	d009      	beq.n	8009724 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	78fa      	ldrb	r2, [r7, #3]
 800971a:	4611      	mov	r1, r2
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	4798      	blx	r3
 8009720:	4603      	mov	r3, r0
 8009722:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009724:	7bfb      	ldrb	r3, [r7, #15]
}
 8009726:	4618      	mov	r0, r3
 8009728:	3710      	adds	r7, #16
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}

0800972e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800972e:	b580      	push	{r7, lr}
 8009730:	b084      	sub	sp, #16
 8009732:	af00      	add	r7, sp, #0
 8009734:	6078      	str	r0, [r7, #4]
 8009736:	460b      	mov	r3, r1
 8009738:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800973a:	2300      	movs	r3, #0
 800973c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009744:	685b      	ldr	r3, [r3, #4]
 8009746:	78fa      	ldrb	r2, [r7, #3]
 8009748:	4611      	mov	r1, r2
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	4798      	blx	r3
 800974e:	4603      	mov	r3, r0
 8009750:	2b00      	cmp	r3, #0
 8009752:	d001      	beq.n	8009758 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009754:	2303      	movs	r3, #3
 8009756:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009758:	7bfb      	ldrb	r3, [r7, #15]
}
 800975a:	4618      	mov	r0, r3
 800975c:	3710      	adds	r7, #16
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}

08009762 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009762:	b580      	push	{r7, lr}
 8009764:	b084      	sub	sp, #16
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
 800976a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009772:	6839      	ldr	r1, [r7, #0]
 8009774:	4618      	mov	r0, r3
 8009776:	f001 f938 	bl	800a9ea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2201      	movs	r2, #1
 800977e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009788:	461a      	mov	r2, r3
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009796:	f003 031f 	and.w	r3, r3, #31
 800979a:	2b02      	cmp	r3, #2
 800979c:	d01a      	beq.n	80097d4 <USBD_LL_SetupStage+0x72>
 800979e:	2b02      	cmp	r3, #2
 80097a0:	d822      	bhi.n	80097e8 <USBD_LL_SetupStage+0x86>
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d002      	beq.n	80097ac <USBD_LL_SetupStage+0x4a>
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d00a      	beq.n	80097c0 <USBD_LL_SetupStage+0x5e>
 80097aa:	e01d      	b.n	80097e8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80097b2:	4619      	mov	r1, r3
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 fb65 	bl	8009e84 <USBD_StdDevReq>
 80097ba:	4603      	mov	r3, r0
 80097bc:	73fb      	strb	r3, [r7, #15]
      break;
 80097be:	e020      	b.n	8009802 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80097c6:	4619      	mov	r1, r3
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f000 fbcd 	bl	8009f68 <USBD_StdItfReq>
 80097ce:	4603      	mov	r3, r0
 80097d0:	73fb      	strb	r3, [r7, #15]
      break;
 80097d2:	e016      	b.n	8009802 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80097da:	4619      	mov	r1, r3
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f000 fc2f 	bl	800a040 <USBD_StdEPReq>
 80097e2:	4603      	mov	r3, r0
 80097e4:	73fb      	strb	r3, [r7, #15]
      break;
 80097e6:	e00c      	b.n	8009802 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80097ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	4619      	mov	r1, r3
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f001 fe1a 	bl	800b430 <USBD_LL_StallEP>
 80097fc:	4603      	mov	r3, r0
 80097fe:	73fb      	strb	r3, [r7, #15]
      break;
 8009800:	bf00      	nop
  }

  return ret;
 8009802:	7bfb      	ldrb	r3, [r7, #15]
}
 8009804:	4618      	mov	r0, r3
 8009806:	3710      	adds	r7, #16
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b086      	sub	sp, #24
 8009810:	af00      	add	r7, sp, #0
 8009812:	60f8      	str	r0, [r7, #12]
 8009814:	460b      	mov	r3, r1
 8009816:	607a      	str	r2, [r7, #4]
 8009818:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800981a:	2300      	movs	r3, #0
 800981c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800981e:	7afb      	ldrb	r3, [r7, #11]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d16e      	bne.n	8009902 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800982a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009832:	2b03      	cmp	r3, #3
 8009834:	f040 8098 	bne.w	8009968 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	689a      	ldr	r2, [r3, #8]
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	429a      	cmp	r2, r3
 8009842:	d913      	bls.n	800986c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	689a      	ldr	r2, [r3, #8]
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	68db      	ldr	r3, [r3, #12]
 800984c:	1ad2      	subs	r2, r2, r3
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	68da      	ldr	r2, [r3, #12]
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	689b      	ldr	r3, [r3, #8]
 800985a:	4293      	cmp	r3, r2
 800985c:	bf28      	it	cs
 800985e:	4613      	movcs	r3, r2
 8009860:	461a      	mov	r2, r3
 8009862:	6879      	ldr	r1, [r7, #4]
 8009864:	68f8      	ldr	r0, [r7, #12]
 8009866:	f001 f9b4 	bl	800abd2 <USBD_CtlContinueRx>
 800986a:	e07d      	b.n	8009968 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009872:	f003 031f 	and.w	r3, r3, #31
 8009876:	2b02      	cmp	r3, #2
 8009878:	d014      	beq.n	80098a4 <USBD_LL_DataOutStage+0x98>
 800987a:	2b02      	cmp	r3, #2
 800987c:	d81d      	bhi.n	80098ba <USBD_LL_DataOutStage+0xae>
 800987e:	2b00      	cmp	r3, #0
 8009880:	d002      	beq.n	8009888 <USBD_LL_DataOutStage+0x7c>
 8009882:	2b01      	cmp	r3, #1
 8009884:	d003      	beq.n	800988e <USBD_LL_DataOutStage+0x82>
 8009886:	e018      	b.n	80098ba <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009888:	2300      	movs	r3, #0
 800988a:	75bb      	strb	r3, [r7, #22]
            break;
 800988c:	e018      	b.n	80098c0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009894:	b2db      	uxtb	r3, r3
 8009896:	4619      	mov	r1, r3
 8009898:	68f8      	ldr	r0, [r7, #12]
 800989a:	f000 fa64 	bl	8009d66 <USBD_CoreFindIF>
 800989e:	4603      	mov	r3, r0
 80098a0:	75bb      	strb	r3, [r7, #22]
            break;
 80098a2:	e00d      	b.n	80098c0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80098aa:	b2db      	uxtb	r3, r3
 80098ac:	4619      	mov	r1, r3
 80098ae:	68f8      	ldr	r0, [r7, #12]
 80098b0:	f000 fa66 	bl	8009d80 <USBD_CoreFindEP>
 80098b4:	4603      	mov	r3, r0
 80098b6:	75bb      	strb	r3, [r7, #22]
            break;
 80098b8:	e002      	b.n	80098c0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80098ba:	2300      	movs	r3, #0
 80098bc:	75bb      	strb	r3, [r7, #22]
            break;
 80098be:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80098c0:	7dbb      	ldrb	r3, [r7, #22]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d119      	bne.n	80098fa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098cc:	b2db      	uxtb	r3, r3
 80098ce:	2b03      	cmp	r3, #3
 80098d0:	d113      	bne.n	80098fa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80098d2:	7dba      	ldrb	r2, [r7, #22]
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	32ae      	adds	r2, #174	; 0xae
 80098d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098dc:	691b      	ldr	r3, [r3, #16]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d00b      	beq.n	80098fa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80098e2:	7dba      	ldrb	r2, [r7, #22]
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80098ea:	7dba      	ldrb	r2, [r7, #22]
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	32ae      	adds	r2, #174	; 0xae
 80098f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098f4:	691b      	ldr	r3, [r3, #16]
 80098f6:	68f8      	ldr	r0, [r7, #12]
 80098f8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80098fa:	68f8      	ldr	r0, [r7, #12]
 80098fc:	f001 f97a 	bl	800abf4 <USBD_CtlSendStatus>
 8009900:	e032      	b.n	8009968 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009902:	7afb      	ldrb	r3, [r7, #11]
 8009904:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009908:	b2db      	uxtb	r3, r3
 800990a:	4619      	mov	r1, r3
 800990c:	68f8      	ldr	r0, [r7, #12]
 800990e:	f000 fa37 	bl	8009d80 <USBD_CoreFindEP>
 8009912:	4603      	mov	r3, r0
 8009914:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009916:	7dbb      	ldrb	r3, [r7, #22]
 8009918:	2bff      	cmp	r3, #255	; 0xff
 800991a:	d025      	beq.n	8009968 <USBD_LL_DataOutStage+0x15c>
 800991c:	7dbb      	ldrb	r3, [r7, #22]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d122      	bne.n	8009968 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009928:	b2db      	uxtb	r3, r3
 800992a:	2b03      	cmp	r3, #3
 800992c:	d117      	bne.n	800995e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800992e:	7dba      	ldrb	r2, [r7, #22]
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	32ae      	adds	r2, #174	; 0xae
 8009934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009938:	699b      	ldr	r3, [r3, #24]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d00f      	beq.n	800995e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800993e:	7dba      	ldrb	r2, [r7, #22]
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009946:	7dba      	ldrb	r2, [r7, #22]
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	32ae      	adds	r2, #174	; 0xae
 800994c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009950:	699b      	ldr	r3, [r3, #24]
 8009952:	7afa      	ldrb	r2, [r7, #11]
 8009954:	4611      	mov	r1, r2
 8009956:	68f8      	ldr	r0, [r7, #12]
 8009958:	4798      	blx	r3
 800995a:	4603      	mov	r3, r0
 800995c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800995e:	7dfb      	ldrb	r3, [r7, #23]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d001      	beq.n	8009968 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009964:	7dfb      	ldrb	r3, [r7, #23]
 8009966:	e000      	b.n	800996a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009968:	2300      	movs	r3, #0
}
 800996a:	4618      	mov	r0, r3
 800996c:	3718      	adds	r7, #24
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}

08009972 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009972:	b580      	push	{r7, lr}
 8009974:	b086      	sub	sp, #24
 8009976:	af00      	add	r7, sp, #0
 8009978:	60f8      	str	r0, [r7, #12]
 800997a:	460b      	mov	r3, r1
 800997c:	607a      	str	r2, [r7, #4]
 800997e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009980:	7afb      	ldrb	r3, [r7, #11]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d16f      	bne.n	8009a66 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	3314      	adds	r3, #20
 800998a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009992:	2b02      	cmp	r3, #2
 8009994:	d15a      	bne.n	8009a4c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009996:	693b      	ldr	r3, [r7, #16]
 8009998:	689a      	ldr	r2, [r3, #8]
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	68db      	ldr	r3, [r3, #12]
 800999e:	429a      	cmp	r2, r3
 80099a0:	d914      	bls.n	80099cc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	689a      	ldr	r2, [r3, #8]
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	68db      	ldr	r3, [r3, #12]
 80099aa:	1ad2      	subs	r2, r2, r3
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	689b      	ldr	r3, [r3, #8]
 80099b4:	461a      	mov	r2, r3
 80099b6:	6879      	ldr	r1, [r7, #4]
 80099b8:	68f8      	ldr	r0, [r7, #12]
 80099ba:	f001 f8dc 	bl	800ab76 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80099be:	2300      	movs	r3, #0
 80099c0:	2200      	movs	r2, #0
 80099c2:	2100      	movs	r1, #0
 80099c4:	68f8      	ldr	r0, [r7, #12]
 80099c6:	f001 fddd 	bl	800b584 <USBD_LL_PrepareReceive>
 80099ca:	e03f      	b.n	8009a4c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	68da      	ldr	r2, [r3, #12]
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	689b      	ldr	r3, [r3, #8]
 80099d4:	429a      	cmp	r2, r3
 80099d6:	d11c      	bne.n	8009a12 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	685a      	ldr	r2, [r3, #4]
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80099e0:	429a      	cmp	r2, r3
 80099e2:	d316      	bcc.n	8009a12 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	685a      	ldr	r2, [r3, #4]
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80099ee:	429a      	cmp	r2, r3
 80099f0:	d20f      	bcs.n	8009a12 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80099f2:	2200      	movs	r2, #0
 80099f4:	2100      	movs	r1, #0
 80099f6:	68f8      	ldr	r0, [r7, #12]
 80099f8:	f001 f8bd 	bl	800ab76 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	2200      	movs	r2, #0
 8009a00:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a04:	2300      	movs	r3, #0
 8009a06:	2200      	movs	r2, #0
 8009a08:	2100      	movs	r1, #0
 8009a0a:	68f8      	ldr	r0, [r7, #12]
 8009a0c:	f001 fdba 	bl	800b584 <USBD_LL_PrepareReceive>
 8009a10:	e01c      	b.n	8009a4c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a18:	b2db      	uxtb	r3, r3
 8009a1a:	2b03      	cmp	r3, #3
 8009a1c:	d10f      	bne.n	8009a3e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a24:	68db      	ldr	r3, [r3, #12]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d009      	beq.n	8009a3e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a38:	68db      	ldr	r3, [r3, #12]
 8009a3a:	68f8      	ldr	r0, [r7, #12]
 8009a3c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a3e:	2180      	movs	r1, #128	; 0x80
 8009a40:	68f8      	ldr	r0, [r7, #12]
 8009a42:	f001 fcf5 	bl	800b430 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009a46:	68f8      	ldr	r0, [r7, #12]
 8009a48:	f001 f8e7 	bl	800ac1a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d03a      	beq.n	8009acc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009a56:	68f8      	ldr	r0, [r7, #12]
 8009a58:	f7ff fe42 	bl	80096e0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009a64:	e032      	b.n	8009acc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009a66:	7afb      	ldrb	r3, [r7, #11]
 8009a68:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009a6c:	b2db      	uxtb	r3, r3
 8009a6e:	4619      	mov	r1, r3
 8009a70:	68f8      	ldr	r0, [r7, #12]
 8009a72:	f000 f985 	bl	8009d80 <USBD_CoreFindEP>
 8009a76:	4603      	mov	r3, r0
 8009a78:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009a7a:	7dfb      	ldrb	r3, [r7, #23]
 8009a7c:	2bff      	cmp	r3, #255	; 0xff
 8009a7e:	d025      	beq.n	8009acc <USBD_LL_DataInStage+0x15a>
 8009a80:	7dfb      	ldrb	r3, [r7, #23]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d122      	bne.n	8009acc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a8c:	b2db      	uxtb	r3, r3
 8009a8e:	2b03      	cmp	r3, #3
 8009a90:	d11c      	bne.n	8009acc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009a92:	7dfa      	ldrb	r2, [r7, #23]
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	32ae      	adds	r2, #174	; 0xae
 8009a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a9c:	695b      	ldr	r3, [r3, #20]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d014      	beq.n	8009acc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009aa2:	7dfa      	ldrb	r2, [r7, #23]
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009aaa:	7dfa      	ldrb	r2, [r7, #23]
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	32ae      	adds	r2, #174	; 0xae
 8009ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ab4:	695b      	ldr	r3, [r3, #20]
 8009ab6:	7afa      	ldrb	r2, [r7, #11]
 8009ab8:	4611      	mov	r1, r2
 8009aba:	68f8      	ldr	r0, [r7, #12]
 8009abc:	4798      	blx	r3
 8009abe:	4603      	mov	r3, r0
 8009ac0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009ac2:	7dbb      	ldrb	r3, [r7, #22]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d001      	beq.n	8009acc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009ac8:	7dbb      	ldrb	r3, [r7, #22]
 8009aca:	e000      	b.n	8009ace <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009acc:	2300      	movs	r3, #0
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3718      	adds	r7, #24
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}

08009ad6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009ad6:	b580      	push	{r7, lr}
 8009ad8:	b084      	sub	sp, #16
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2200      	movs	r2, #0
 8009aee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2200      	movs	r2, #0
 8009af6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2200      	movs	r2, #0
 8009afc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2200      	movs	r2, #0
 8009b04:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d014      	beq.n	8009b3c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b18:	685b      	ldr	r3, [r3, #4]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d00e      	beq.n	8009b3c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	687a      	ldr	r2, [r7, #4]
 8009b28:	6852      	ldr	r2, [r2, #4]
 8009b2a:	b2d2      	uxtb	r2, r2
 8009b2c:	4611      	mov	r1, r2
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	4798      	blx	r3
 8009b32:	4603      	mov	r3, r0
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d001      	beq.n	8009b3c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009b38:	2303      	movs	r3, #3
 8009b3a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009b3c:	2340      	movs	r3, #64	; 0x40
 8009b3e:	2200      	movs	r2, #0
 8009b40:	2100      	movs	r1, #0
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f001 fc2f 	bl	800b3a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2240      	movs	r2, #64	; 0x40
 8009b54:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009b58:	2340      	movs	r3, #64	; 0x40
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	2180      	movs	r1, #128	; 0x80
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f001 fc21 	bl	800b3a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2201      	movs	r2, #1
 8009b68:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2240      	movs	r2, #64	; 0x40
 8009b6e:	621a      	str	r2, [r3, #32]

  return ret;
 8009b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3710      	adds	r7, #16
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}

08009b7a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009b7a:	b480      	push	{r7}
 8009b7c:	b083      	sub	sp, #12
 8009b7e:	af00      	add	r7, sp, #0
 8009b80:	6078      	str	r0, [r7, #4]
 8009b82:	460b      	mov	r3, r1
 8009b84:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	78fa      	ldrb	r2, [r7, #3]
 8009b8a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009b8c:	2300      	movs	r3, #0
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	370c      	adds	r7, #12
 8009b92:	46bd      	mov	sp, r7
 8009b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b98:	4770      	bx	lr

08009b9a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009b9a:	b480      	push	{r7}
 8009b9c:	b083      	sub	sp, #12
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ba8:	b2db      	uxtb	r3, r3
 8009baa:	2b04      	cmp	r3, #4
 8009bac:	d006      	beq.n	8009bbc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bb4:	b2da      	uxtb	r2, r3
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2204      	movs	r2, #4
 8009bc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009bc4:	2300      	movs	r3, #0
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	370c      	adds	r7, #12
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd0:	4770      	bx	lr

08009bd2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009bd2:	b480      	push	{r7}
 8009bd4:	b083      	sub	sp, #12
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009be0:	b2db      	uxtb	r3, r3
 8009be2:	2b04      	cmp	r3, #4
 8009be4:	d106      	bne.n	8009bf4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009bec:	b2da      	uxtb	r2, r3
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009bf4:	2300      	movs	r3, #0
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	370c      	adds	r7, #12
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c00:	4770      	bx	lr

08009c02 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009c02:	b580      	push	{r7, lr}
 8009c04:	b082      	sub	sp, #8
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c10:	b2db      	uxtb	r3, r3
 8009c12:	2b03      	cmp	r3, #3
 8009c14:	d110      	bne.n	8009c38 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d00b      	beq.n	8009c38 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c26:	69db      	ldr	r3, [r3, #28]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d005      	beq.n	8009c38 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c32:	69db      	ldr	r3, [r3, #28]
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009c38:	2300      	movs	r3, #0
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3708      	adds	r7, #8
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}

08009c42 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009c42:	b580      	push	{r7, lr}
 8009c44:	b082      	sub	sp, #8
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
 8009c4a:	460b      	mov	r3, r1
 8009c4c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	32ae      	adds	r2, #174	; 0xae
 8009c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d101      	bne.n	8009c64 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009c60:	2303      	movs	r3, #3
 8009c62:	e01c      	b.n	8009c9e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c6a:	b2db      	uxtb	r3, r3
 8009c6c:	2b03      	cmp	r3, #3
 8009c6e:	d115      	bne.n	8009c9c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	32ae      	adds	r2, #174	; 0xae
 8009c7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c7e:	6a1b      	ldr	r3, [r3, #32]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d00b      	beq.n	8009c9c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	32ae      	adds	r2, #174	; 0xae
 8009c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c92:	6a1b      	ldr	r3, [r3, #32]
 8009c94:	78fa      	ldrb	r2, [r7, #3]
 8009c96:	4611      	mov	r1, r2
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009c9c:	2300      	movs	r3, #0
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3708      	adds	r7, #8
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}

08009ca6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009ca6:	b580      	push	{r7, lr}
 8009ca8:	b082      	sub	sp, #8
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	6078      	str	r0, [r7, #4]
 8009cae:	460b      	mov	r3, r1
 8009cb0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	32ae      	adds	r2, #174	; 0xae
 8009cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d101      	bne.n	8009cc8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009cc4:	2303      	movs	r3, #3
 8009cc6:	e01c      	b.n	8009d02 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cce:	b2db      	uxtb	r3, r3
 8009cd0:	2b03      	cmp	r3, #3
 8009cd2:	d115      	bne.n	8009d00 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	32ae      	adds	r2, #174	; 0xae
 8009cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d00b      	beq.n	8009d00 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	32ae      	adds	r2, #174	; 0xae
 8009cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf8:	78fa      	ldrb	r2, [r7, #3]
 8009cfa:	4611      	mov	r1, r2
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009d00:	2300      	movs	r3, #0
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3708      	adds	r7, #8
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}

08009d0a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009d0a:	b480      	push	{r7}
 8009d0c:	b083      	sub	sp, #12
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009d12:	2300      	movs	r3, #0
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	370c      	adds	r7, #12
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1e:	4770      	bx	lr

08009d20 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b084      	sub	sp, #16
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2201      	movs	r2, #1
 8009d30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d00e      	beq.n	8009d5c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d44:	685b      	ldr	r3, [r3, #4]
 8009d46:	687a      	ldr	r2, [r7, #4]
 8009d48:	6852      	ldr	r2, [r2, #4]
 8009d4a:	b2d2      	uxtb	r2, r2
 8009d4c:	4611      	mov	r1, r2
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	4798      	blx	r3
 8009d52:	4603      	mov	r3, r0
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d001      	beq.n	8009d5c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009d58:	2303      	movs	r3, #3
 8009d5a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3710      	adds	r7, #16
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}

08009d66 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009d66:	b480      	push	{r7}
 8009d68:	b083      	sub	sp, #12
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	6078      	str	r0, [r7, #4]
 8009d6e:	460b      	mov	r3, r1
 8009d70:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009d72:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	370c      	adds	r7, #12
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr

08009d80 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009d80:	b480      	push	{r7}
 8009d82:	b083      	sub	sp, #12
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	460b      	mov	r3, r1
 8009d8a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009d8c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	370c      	adds	r7, #12
 8009d92:	46bd      	mov	sp, r7
 8009d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d98:	4770      	bx	lr

08009d9a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009d9a:	b580      	push	{r7, lr}
 8009d9c:	b086      	sub	sp, #24
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	6078      	str	r0, [r7, #4]
 8009da2:	460b      	mov	r3, r1
 8009da4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009dae:	2300      	movs	r3, #0
 8009db0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	885b      	ldrh	r3, [r3, #2]
 8009db6:	b29a      	uxth	r2, r3
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	781b      	ldrb	r3, [r3, #0]
 8009dbc:	b29b      	uxth	r3, r3
 8009dbe:	429a      	cmp	r2, r3
 8009dc0:	d920      	bls.n	8009e04 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	b29b      	uxth	r3, r3
 8009dc8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009dca:	e013      	b.n	8009df4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009dcc:	f107 030a 	add.w	r3, r7, #10
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	6978      	ldr	r0, [r7, #20]
 8009dd4:	f000 f81b 	bl	8009e0e <USBD_GetNextDesc>
 8009dd8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	785b      	ldrb	r3, [r3, #1]
 8009dde:	2b05      	cmp	r3, #5
 8009de0:	d108      	bne.n	8009df4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	789b      	ldrb	r3, [r3, #2]
 8009dea:	78fa      	ldrb	r2, [r7, #3]
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d008      	beq.n	8009e02 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009df0:	2300      	movs	r3, #0
 8009df2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	885b      	ldrh	r3, [r3, #2]
 8009df8:	b29a      	uxth	r2, r3
 8009dfa:	897b      	ldrh	r3, [r7, #10]
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	d8e5      	bhi.n	8009dcc <USBD_GetEpDesc+0x32>
 8009e00:	e000      	b.n	8009e04 <USBD_GetEpDesc+0x6a>
          break;
 8009e02:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009e04:	693b      	ldr	r3, [r7, #16]
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3718      	adds	r7, #24
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}

08009e0e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009e0e:	b480      	push	{r7}
 8009e10:	b085      	sub	sp, #20
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	6078      	str	r0, [r7, #4]
 8009e16:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	881a      	ldrh	r2, [r3, #0]
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	781b      	ldrb	r3, [r3, #0]
 8009e24:	b29b      	uxth	r3, r3
 8009e26:	4413      	add	r3, r2
 8009e28:	b29a      	uxth	r2, r3
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	461a      	mov	r2, r3
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	4413      	add	r3, r2
 8009e38:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009e3a:	68fb      	ldr	r3, [r7, #12]
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3714      	adds	r7, #20
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr

08009e48 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b087      	sub	sp, #28
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	781b      	ldrb	r3, [r3, #0]
 8009e58:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	3301      	adds	r3, #1
 8009e5e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009e66:	8a3b      	ldrh	r3, [r7, #16]
 8009e68:	021b      	lsls	r3, r3, #8
 8009e6a:	b21a      	sxth	r2, r3
 8009e6c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009e70:	4313      	orrs	r3, r2
 8009e72:	b21b      	sxth	r3, r3
 8009e74:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009e76:	89fb      	ldrh	r3, [r7, #14]
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	371c      	adds	r7, #28
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e82:	4770      	bx	lr

08009e84 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b084      	sub	sp, #16
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	781b      	ldrb	r3, [r3, #0]
 8009e96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009e9a:	2b40      	cmp	r3, #64	; 0x40
 8009e9c:	d005      	beq.n	8009eaa <USBD_StdDevReq+0x26>
 8009e9e:	2b40      	cmp	r3, #64	; 0x40
 8009ea0:	d857      	bhi.n	8009f52 <USBD_StdDevReq+0xce>
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d00f      	beq.n	8009ec6 <USBD_StdDevReq+0x42>
 8009ea6:	2b20      	cmp	r3, #32
 8009ea8:	d153      	bne.n	8009f52 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	32ae      	adds	r2, #174	; 0xae
 8009eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eb8:	689b      	ldr	r3, [r3, #8]
 8009eba:	6839      	ldr	r1, [r7, #0]
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	4798      	blx	r3
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	73fb      	strb	r3, [r7, #15]
      break;
 8009ec4:	e04a      	b.n	8009f5c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	785b      	ldrb	r3, [r3, #1]
 8009eca:	2b09      	cmp	r3, #9
 8009ecc:	d83b      	bhi.n	8009f46 <USBD_StdDevReq+0xc2>
 8009ece:	a201      	add	r2, pc, #4	; (adr r2, 8009ed4 <USBD_StdDevReq+0x50>)
 8009ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ed4:	08009f29 	.word	0x08009f29
 8009ed8:	08009f3d 	.word	0x08009f3d
 8009edc:	08009f47 	.word	0x08009f47
 8009ee0:	08009f33 	.word	0x08009f33
 8009ee4:	08009f47 	.word	0x08009f47
 8009ee8:	08009f07 	.word	0x08009f07
 8009eec:	08009efd 	.word	0x08009efd
 8009ef0:	08009f47 	.word	0x08009f47
 8009ef4:	08009f1f 	.word	0x08009f1f
 8009ef8:	08009f11 	.word	0x08009f11
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009efc:	6839      	ldr	r1, [r7, #0]
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 fa3c 	bl	800a37c <USBD_GetDescriptor>
          break;
 8009f04:	e024      	b.n	8009f50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009f06:	6839      	ldr	r1, [r7, #0]
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f000 fbcb 	bl	800a6a4 <USBD_SetAddress>
          break;
 8009f0e:	e01f      	b.n	8009f50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009f10:	6839      	ldr	r1, [r7, #0]
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f000 fc0a 	bl	800a72c <USBD_SetConfig>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	73fb      	strb	r3, [r7, #15]
          break;
 8009f1c:	e018      	b.n	8009f50 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009f1e:	6839      	ldr	r1, [r7, #0]
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f000 fcad 	bl	800a880 <USBD_GetConfig>
          break;
 8009f26:	e013      	b.n	8009f50 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009f28:	6839      	ldr	r1, [r7, #0]
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f000 fcde 	bl	800a8ec <USBD_GetStatus>
          break;
 8009f30:	e00e      	b.n	8009f50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009f32:	6839      	ldr	r1, [r7, #0]
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f000 fd0d 	bl	800a954 <USBD_SetFeature>
          break;
 8009f3a:	e009      	b.n	8009f50 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009f3c:	6839      	ldr	r1, [r7, #0]
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f000 fd31 	bl	800a9a6 <USBD_ClrFeature>
          break;
 8009f44:	e004      	b.n	8009f50 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009f46:	6839      	ldr	r1, [r7, #0]
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f000 fd88 	bl	800aa5e <USBD_CtlError>
          break;
 8009f4e:	bf00      	nop
      }
      break;
 8009f50:	e004      	b.n	8009f5c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009f52:	6839      	ldr	r1, [r7, #0]
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f000 fd82 	bl	800aa5e <USBD_CtlError>
      break;
 8009f5a:	bf00      	nop
  }

  return ret;
 8009f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3710      	adds	r7, #16
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	bf00      	nop

08009f68 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b084      	sub	sp, #16
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f72:	2300      	movs	r3, #0
 8009f74:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	781b      	ldrb	r3, [r3, #0]
 8009f7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009f7e:	2b40      	cmp	r3, #64	; 0x40
 8009f80:	d005      	beq.n	8009f8e <USBD_StdItfReq+0x26>
 8009f82:	2b40      	cmp	r3, #64	; 0x40
 8009f84:	d852      	bhi.n	800a02c <USBD_StdItfReq+0xc4>
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d001      	beq.n	8009f8e <USBD_StdItfReq+0x26>
 8009f8a:	2b20      	cmp	r3, #32
 8009f8c:	d14e      	bne.n	800a02c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f94:	b2db      	uxtb	r3, r3
 8009f96:	3b01      	subs	r3, #1
 8009f98:	2b02      	cmp	r3, #2
 8009f9a:	d840      	bhi.n	800a01e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	889b      	ldrh	r3, [r3, #4]
 8009fa0:	b2db      	uxtb	r3, r3
 8009fa2:	2b01      	cmp	r3, #1
 8009fa4:	d836      	bhi.n	800a014 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	889b      	ldrh	r3, [r3, #4]
 8009faa:	b2db      	uxtb	r3, r3
 8009fac:	4619      	mov	r1, r3
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f7ff fed9 	bl	8009d66 <USBD_CoreFindIF>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009fb8:	7bbb      	ldrb	r3, [r7, #14]
 8009fba:	2bff      	cmp	r3, #255	; 0xff
 8009fbc:	d01d      	beq.n	8009ffa <USBD_StdItfReq+0x92>
 8009fbe:	7bbb      	ldrb	r3, [r7, #14]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d11a      	bne.n	8009ffa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009fc4:	7bba      	ldrb	r2, [r7, #14]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	32ae      	adds	r2, #174	; 0xae
 8009fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fce:	689b      	ldr	r3, [r3, #8]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d00f      	beq.n	8009ff4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009fd4:	7bba      	ldrb	r2, [r7, #14]
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009fdc:	7bba      	ldrb	r2, [r7, #14]
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	32ae      	adds	r2, #174	; 0xae
 8009fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fe6:	689b      	ldr	r3, [r3, #8]
 8009fe8:	6839      	ldr	r1, [r7, #0]
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	4798      	blx	r3
 8009fee:	4603      	mov	r3, r0
 8009ff0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009ff2:	e004      	b.n	8009ffe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009ff4:	2303      	movs	r3, #3
 8009ff6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009ff8:	e001      	b.n	8009ffe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009ffa:	2303      	movs	r3, #3
 8009ffc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	88db      	ldrh	r3, [r3, #6]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d110      	bne.n	800a028 <USBD_StdItfReq+0xc0>
 800a006:	7bfb      	ldrb	r3, [r7, #15]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d10d      	bne.n	800a028 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f000 fdf1 	bl	800abf4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a012:	e009      	b.n	800a028 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a014:	6839      	ldr	r1, [r7, #0]
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f000 fd21 	bl	800aa5e <USBD_CtlError>
          break;
 800a01c:	e004      	b.n	800a028 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a01e:	6839      	ldr	r1, [r7, #0]
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f000 fd1c 	bl	800aa5e <USBD_CtlError>
          break;
 800a026:	e000      	b.n	800a02a <USBD_StdItfReq+0xc2>
          break;
 800a028:	bf00      	nop
      }
      break;
 800a02a:	e004      	b.n	800a036 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a02c:	6839      	ldr	r1, [r7, #0]
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f000 fd15 	bl	800aa5e <USBD_CtlError>
      break;
 800a034:	bf00      	nop
  }

  return ret;
 800a036:	7bfb      	ldrb	r3, [r7, #15]
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3710      	adds	r7, #16
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}

0800a040 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b084      	sub	sp, #16
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a04a:	2300      	movs	r3, #0
 800a04c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	889b      	ldrh	r3, [r3, #4]
 800a052:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	781b      	ldrb	r3, [r3, #0]
 800a058:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a05c:	2b40      	cmp	r3, #64	; 0x40
 800a05e:	d007      	beq.n	800a070 <USBD_StdEPReq+0x30>
 800a060:	2b40      	cmp	r3, #64	; 0x40
 800a062:	f200 817f 	bhi.w	800a364 <USBD_StdEPReq+0x324>
 800a066:	2b00      	cmp	r3, #0
 800a068:	d02a      	beq.n	800a0c0 <USBD_StdEPReq+0x80>
 800a06a:	2b20      	cmp	r3, #32
 800a06c:	f040 817a 	bne.w	800a364 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a070:	7bbb      	ldrb	r3, [r7, #14]
 800a072:	4619      	mov	r1, r3
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f7ff fe83 	bl	8009d80 <USBD_CoreFindEP>
 800a07a:	4603      	mov	r3, r0
 800a07c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a07e:	7b7b      	ldrb	r3, [r7, #13]
 800a080:	2bff      	cmp	r3, #255	; 0xff
 800a082:	f000 8174 	beq.w	800a36e <USBD_StdEPReq+0x32e>
 800a086:	7b7b      	ldrb	r3, [r7, #13]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	f040 8170 	bne.w	800a36e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a08e:	7b7a      	ldrb	r2, [r7, #13]
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a096:	7b7a      	ldrb	r2, [r7, #13]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	32ae      	adds	r2, #174	; 0xae
 800a09c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0a0:	689b      	ldr	r3, [r3, #8]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	f000 8163 	beq.w	800a36e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a0a8:	7b7a      	ldrb	r2, [r7, #13]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	32ae      	adds	r2, #174	; 0xae
 800a0ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0b2:	689b      	ldr	r3, [r3, #8]
 800a0b4:	6839      	ldr	r1, [r7, #0]
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	4798      	blx	r3
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a0be:	e156      	b.n	800a36e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	785b      	ldrb	r3, [r3, #1]
 800a0c4:	2b03      	cmp	r3, #3
 800a0c6:	d008      	beq.n	800a0da <USBD_StdEPReq+0x9a>
 800a0c8:	2b03      	cmp	r3, #3
 800a0ca:	f300 8145 	bgt.w	800a358 <USBD_StdEPReq+0x318>
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	f000 809b 	beq.w	800a20a <USBD_StdEPReq+0x1ca>
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	d03c      	beq.n	800a152 <USBD_StdEPReq+0x112>
 800a0d8:	e13e      	b.n	800a358 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0e0:	b2db      	uxtb	r3, r3
 800a0e2:	2b02      	cmp	r3, #2
 800a0e4:	d002      	beq.n	800a0ec <USBD_StdEPReq+0xac>
 800a0e6:	2b03      	cmp	r3, #3
 800a0e8:	d016      	beq.n	800a118 <USBD_StdEPReq+0xd8>
 800a0ea:	e02c      	b.n	800a146 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a0ec:	7bbb      	ldrb	r3, [r7, #14]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d00d      	beq.n	800a10e <USBD_StdEPReq+0xce>
 800a0f2:	7bbb      	ldrb	r3, [r7, #14]
 800a0f4:	2b80      	cmp	r3, #128	; 0x80
 800a0f6:	d00a      	beq.n	800a10e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a0f8:	7bbb      	ldrb	r3, [r7, #14]
 800a0fa:	4619      	mov	r1, r3
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f001 f997 	bl	800b430 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a102:	2180      	movs	r1, #128	; 0x80
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f001 f993 	bl	800b430 <USBD_LL_StallEP>
 800a10a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a10c:	e020      	b.n	800a150 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a10e:	6839      	ldr	r1, [r7, #0]
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f000 fca4 	bl	800aa5e <USBD_CtlError>
              break;
 800a116:	e01b      	b.n	800a150 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	885b      	ldrh	r3, [r3, #2]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d10e      	bne.n	800a13e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a120:	7bbb      	ldrb	r3, [r7, #14]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d00b      	beq.n	800a13e <USBD_StdEPReq+0xfe>
 800a126:	7bbb      	ldrb	r3, [r7, #14]
 800a128:	2b80      	cmp	r3, #128	; 0x80
 800a12a:	d008      	beq.n	800a13e <USBD_StdEPReq+0xfe>
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	88db      	ldrh	r3, [r3, #6]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d104      	bne.n	800a13e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a134:	7bbb      	ldrb	r3, [r7, #14]
 800a136:	4619      	mov	r1, r3
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f001 f979 	bl	800b430 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f000 fd58 	bl	800abf4 <USBD_CtlSendStatus>

              break;
 800a144:	e004      	b.n	800a150 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a146:	6839      	ldr	r1, [r7, #0]
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f000 fc88 	bl	800aa5e <USBD_CtlError>
              break;
 800a14e:	bf00      	nop
          }
          break;
 800a150:	e107      	b.n	800a362 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	2b02      	cmp	r3, #2
 800a15c:	d002      	beq.n	800a164 <USBD_StdEPReq+0x124>
 800a15e:	2b03      	cmp	r3, #3
 800a160:	d016      	beq.n	800a190 <USBD_StdEPReq+0x150>
 800a162:	e04b      	b.n	800a1fc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a164:	7bbb      	ldrb	r3, [r7, #14]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d00d      	beq.n	800a186 <USBD_StdEPReq+0x146>
 800a16a:	7bbb      	ldrb	r3, [r7, #14]
 800a16c:	2b80      	cmp	r3, #128	; 0x80
 800a16e:	d00a      	beq.n	800a186 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a170:	7bbb      	ldrb	r3, [r7, #14]
 800a172:	4619      	mov	r1, r3
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f001 f95b 	bl	800b430 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a17a:	2180      	movs	r1, #128	; 0x80
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f001 f957 	bl	800b430 <USBD_LL_StallEP>
 800a182:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a184:	e040      	b.n	800a208 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a186:	6839      	ldr	r1, [r7, #0]
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f000 fc68 	bl	800aa5e <USBD_CtlError>
              break;
 800a18e:	e03b      	b.n	800a208 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	885b      	ldrh	r3, [r3, #2]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d136      	bne.n	800a206 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a198:	7bbb      	ldrb	r3, [r7, #14]
 800a19a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d004      	beq.n	800a1ac <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a1a2:	7bbb      	ldrb	r3, [r7, #14]
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f001 f961 	bl	800b46e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f000 fd21 	bl	800abf4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a1b2:	7bbb      	ldrb	r3, [r7, #14]
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f7ff fde2 	bl	8009d80 <USBD_CoreFindEP>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a1c0:	7b7b      	ldrb	r3, [r7, #13]
 800a1c2:	2bff      	cmp	r3, #255	; 0xff
 800a1c4:	d01f      	beq.n	800a206 <USBD_StdEPReq+0x1c6>
 800a1c6:	7b7b      	ldrb	r3, [r7, #13]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d11c      	bne.n	800a206 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a1cc:	7b7a      	ldrb	r2, [r7, #13]
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a1d4:	7b7a      	ldrb	r2, [r7, #13]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	32ae      	adds	r2, #174	; 0xae
 800a1da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1de:	689b      	ldr	r3, [r3, #8]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d010      	beq.n	800a206 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a1e4:	7b7a      	ldrb	r2, [r7, #13]
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	32ae      	adds	r2, #174	; 0xae
 800a1ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1ee:	689b      	ldr	r3, [r3, #8]
 800a1f0:	6839      	ldr	r1, [r7, #0]
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	4798      	blx	r3
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a1fa:	e004      	b.n	800a206 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a1fc:	6839      	ldr	r1, [r7, #0]
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f000 fc2d 	bl	800aa5e <USBD_CtlError>
              break;
 800a204:	e000      	b.n	800a208 <USBD_StdEPReq+0x1c8>
              break;
 800a206:	bf00      	nop
          }
          break;
 800a208:	e0ab      	b.n	800a362 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a210:	b2db      	uxtb	r3, r3
 800a212:	2b02      	cmp	r3, #2
 800a214:	d002      	beq.n	800a21c <USBD_StdEPReq+0x1dc>
 800a216:	2b03      	cmp	r3, #3
 800a218:	d032      	beq.n	800a280 <USBD_StdEPReq+0x240>
 800a21a:	e097      	b.n	800a34c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a21c:	7bbb      	ldrb	r3, [r7, #14]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d007      	beq.n	800a232 <USBD_StdEPReq+0x1f2>
 800a222:	7bbb      	ldrb	r3, [r7, #14]
 800a224:	2b80      	cmp	r3, #128	; 0x80
 800a226:	d004      	beq.n	800a232 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a228:	6839      	ldr	r1, [r7, #0]
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f000 fc17 	bl	800aa5e <USBD_CtlError>
                break;
 800a230:	e091      	b.n	800a356 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a232:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a236:	2b00      	cmp	r3, #0
 800a238:	da0b      	bge.n	800a252 <USBD_StdEPReq+0x212>
 800a23a:	7bbb      	ldrb	r3, [r7, #14]
 800a23c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a240:	4613      	mov	r3, r2
 800a242:	009b      	lsls	r3, r3, #2
 800a244:	4413      	add	r3, r2
 800a246:	009b      	lsls	r3, r3, #2
 800a248:	3310      	adds	r3, #16
 800a24a:	687a      	ldr	r2, [r7, #4]
 800a24c:	4413      	add	r3, r2
 800a24e:	3304      	adds	r3, #4
 800a250:	e00b      	b.n	800a26a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a252:	7bbb      	ldrb	r3, [r7, #14]
 800a254:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a258:	4613      	mov	r3, r2
 800a25a:	009b      	lsls	r3, r3, #2
 800a25c:	4413      	add	r3, r2
 800a25e:	009b      	lsls	r3, r3, #2
 800a260:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a264:	687a      	ldr	r2, [r7, #4]
 800a266:	4413      	add	r3, r2
 800a268:	3304      	adds	r3, #4
 800a26a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	2200      	movs	r2, #0
 800a270:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	2202      	movs	r2, #2
 800a276:	4619      	mov	r1, r3
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f000 fc61 	bl	800ab40 <USBD_CtlSendData>
              break;
 800a27e:	e06a      	b.n	800a356 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a280:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a284:	2b00      	cmp	r3, #0
 800a286:	da11      	bge.n	800a2ac <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a288:	7bbb      	ldrb	r3, [r7, #14]
 800a28a:	f003 020f 	and.w	r2, r3, #15
 800a28e:	6879      	ldr	r1, [r7, #4]
 800a290:	4613      	mov	r3, r2
 800a292:	009b      	lsls	r3, r3, #2
 800a294:	4413      	add	r3, r2
 800a296:	009b      	lsls	r3, r3, #2
 800a298:	440b      	add	r3, r1
 800a29a:	3324      	adds	r3, #36	; 0x24
 800a29c:	881b      	ldrh	r3, [r3, #0]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d117      	bne.n	800a2d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a2a2:	6839      	ldr	r1, [r7, #0]
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f000 fbda 	bl	800aa5e <USBD_CtlError>
                  break;
 800a2aa:	e054      	b.n	800a356 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a2ac:	7bbb      	ldrb	r3, [r7, #14]
 800a2ae:	f003 020f 	and.w	r2, r3, #15
 800a2b2:	6879      	ldr	r1, [r7, #4]
 800a2b4:	4613      	mov	r3, r2
 800a2b6:	009b      	lsls	r3, r3, #2
 800a2b8:	4413      	add	r3, r2
 800a2ba:	009b      	lsls	r3, r3, #2
 800a2bc:	440b      	add	r3, r1
 800a2be:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a2c2:	881b      	ldrh	r3, [r3, #0]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d104      	bne.n	800a2d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a2c8:	6839      	ldr	r1, [r7, #0]
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f000 fbc7 	bl	800aa5e <USBD_CtlError>
                  break;
 800a2d0:	e041      	b.n	800a356 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a2d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	da0b      	bge.n	800a2f2 <USBD_StdEPReq+0x2b2>
 800a2da:	7bbb      	ldrb	r3, [r7, #14]
 800a2dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a2e0:	4613      	mov	r3, r2
 800a2e2:	009b      	lsls	r3, r3, #2
 800a2e4:	4413      	add	r3, r2
 800a2e6:	009b      	lsls	r3, r3, #2
 800a2e8:	3310      	adds	r3, #16
 800a2ea:	687a      	ldr	r2, [r7, #4]
 800a2ec:	4413      	add	r3, r2
 800a2ee:	3304      	adds	r3, #4
 800a2f0:	e00b      	b.n	800a30a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a2f2:	7bbb      	ldrb	r3, [r7, #14]
 800a2f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a2f8:	4613      	mov	r3, r2
 800a2fa:	009b      	lsls	r3, r3, #2
 800a2fc:	4413      	add	r3, r2
 800a2fe:	009b      	lsls	r3, r3, #2
 800a300:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a304:	687a      	ldr	r2, [r7, #4]
 800a306:	4413      	add	r3, r2
 800a308:	3304      	adds	r3, #4
 800a30a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a30c:	7bbb      	ldrb	r3, [r7, #14]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d002      	beq.n	800a318 <USBD_StdEPReq+0x2d8>
 800a312:	7bbb      	ldrb	r3, [r7, #14]
 800a314:	2b80      	cmp	r3, #128	; 0x80
 800a316:	d103      	bne.n	800a320 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	2200      	movs	r2, #0
 800a31c:	601a      	str	r2, [r3, #0]
 800a31e:	e00e      	b.n	800a33e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a320:	7bbb      	ldrb	r3, [r7, #14]
 800a322:	4619      	mov	r1, r3
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f001 f8c1 	bl	800b4ac <USBD_LL_IsStallEP>
 800a32a:	4603      	mov	r3, r0
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d003      	beq.n	800a338 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	2201      	movs	r2, #1
 800a334:	601a      	str	r2, [r3, #0]
 800a336:	e002      	b.n	800a33e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	2200      	movs	r2, #0
 800a33c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	2202      	movs	r2, #2
 800a342:	4619      	mov	r1, r3
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f000 fbfb 	bl	800ab40 <USBD_CtlSendData>
              break;
 800a34a:	e004      	b.n	800a356 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a34c:	6839      	ldr	r1, [r7, #0]
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f000 fb85 	bl	800aa5e <USBD_CtlError>
              break;
 800a354:	bf00      	nop
          }
          break;
 800a356:	e004      	b.n	800a362 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a358:	6839      	ldr	r1, [r7, #0]
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f000 fb7f 	bl	800aa5e <USBD_CtlError>
          break;
 800a360:	bf00      	nop
      }
      break;
 800a362:	e005      	b.n	800a370 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a364:	6839      	ldr	r1, [r7, #0]
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f000 fb79 	bl	800aa5e <USBD_CtlError>
      break;
 800a36c:	e000      	b.n	800a370 <USBD_StdEPReq+0x330>
      break;
 800a36e:	bf00      	nop
  }

  return ret;
 800a370:	7bfb      	ldrb	r3, [r7, #15]
}
 800a372:	4618      	mov	r0, r3
 800a374:	3710      	adds	r7, #16
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}
	...

0800a37c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b084      	sub	sp, #16
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a386:	2300      	movs	r3, #0
 800a388:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a38a:	2300      	movs	r3, #0
 800a38c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a38e:	2300      	movs	r3, #0
 800a390:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	885b      	ldrh	r3, [r3, #2]
 800a396:	0a1b      	lsrs	r3, r3, #8
 800a398:	b29b      	uxth	r3, r3
 800a39a:	3b01      	subs	r3, #1
 800a39c:	2b0e      	cmp	r3, #14
 800a39e:	f200 8152 	bhi.w	800a646 <USBD_GetDescriptor+0x2ca>
 800a3a2:	a201      	add	r2, pc, #4	; (adr r2, 800a3a8 <USBD_GetDescriptor+0x2c>)
 800a3a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3a8:	0800a419 	.word	0x0800a419
 800a3ac:	0800a431 	.word	0x0800a431
 800a3b0:	0800a471 	.word	0x0800a471
 800a3b4:	0800a647 	.word	0x0800a647
 800a3b8:	0800a647 	.word	0x0800a647
 800a3bc:	0800a5e7 	.word	0x0800a5e7
 800a3c0:	0800a613 	.word	0x0800a613
 800a3c4:	0800a647 	.word	0x0800a647
 800a3c8:	0800a647 	.word	0x0800a647
 800a3cc:	0800a647 	.word	0x0800a647
 800a3d0:	0800a647 	.word	0x0800a647
 800a3d4:	0800a647 	.word	0x0800a647
 800a3d8:	0800a647 	.word	0x0800a647
 800a3dc:	0800a647 	.word	0x0800a647
 800a3e0:	0800a3e5 	.word	0x0800a3e5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3ea:	69db      	ldr	r3, [r3, #28]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d00b      	beq.n	800a408 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3f6:	69db      	ldr	r3, [r3, #28]
 800a3f8:	687a      	ldr	r2, [r7, #4]
 800a3fa:	7c12      	ldrb	r2, [r2, #16]
 800a3fc:	f107 0108 	add.w	r1, r7, #8
 800a400:	4610      	mov	r0, r2
 800a402:	4798      	blx	r3
 800a404:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a406:	e126      	b.n	800a656 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a408:	6839      	ldr	r1, [r7, #0]
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f000 fb27 	bl	800aa5e <USBD_CtlError>
        err++;
 800a410:	7afb      	ldrb	r3, [r7, #11]
 800a412:	3301      	adds	r3, #1
 800a414:	72fb      	strb	r3, [r7, #11]
      break;
 800a416:	e11e      	b.n	800a656 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	687a      	ldr	r2, [r7, #4]
 800a422:	7c12      	ldrb	r2, [r2, #16]
 800a424:	f107 0108 	add.w	r1, r7, #8
 800a428:	4610      	mov	r0, r2
 800a42a:	4798      	blx	r3
 800a42c:	60f8      	str	r0, [r7, #12]
      break;
 800a42e:	e112      	b.n	800a656 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	7c1b      	ldrb	r3, [r3, #16]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d10d      	bne.n	800a454 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a43e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a440:	f107 0208 	add.w	r2, r7, #8
 800a444:	4610      	mov	r0, r2
 800a446:	4798      	blx	r3
 800a448:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	3301      	adds	r3, #1
 800a44e:	2202      	movs	r2, #2
 800a450:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a452:	e100      	b.n	800a656 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a45a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a45c:	f107 0208 	add.w	r2, r7, #8
 800a460:	4610      	mov	r0, r2
 800a462:	4798      	blx	r3
 800a464:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	3301      	adds	r3, #1
 800a46a:	2202      	movs	r2, #2
 800a46c:	701a      	strb	r2, [r3, #0]
      break;
 800a46e:	e0f2      	b.n	800a656 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	885b      	ldrh	r3, [r3, #2]
 800a474:	b2db      	uxtb	r3, r3
 800a476:	2b05      	cmp	r3, #5
 800a478:	f200 80ac 	bhi.w	800a5d4 <USBD_GetDescriptor+0x258>
 800a47c:	a201      	add	r2, pc, #4	; (adr r2, 800a484 <USBD_GetDescriptor+0x108>)
 800a47e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a482:	bf00      	nop
 800a484:	0800a49d 	.word	0x0800a49d
 800a488:	0800a4d1 	.word	0x0800a4d1
 800a48c:	0800a505 	.word	0x0800a505
 800a490:	0800a539 	.word	0x0800a539
 800a494:	0800a56d 	.word	0x0800a56d
 800a498:	0800a5a1 	.word	0x0800a5a1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d00b      	beq.n	800a4c0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	687a      	ldr	r2, [r7, #4]
 800a4b2:	7c12      	ldrb	r2, [r2, #16]
 800a4b4:	f107 0108 	add.w	r1, r7, #8
 800a4b8:	4610      	mov	r0, r2
 800a4ba:	4798      	blx	r3
 800a4bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4be:	e091      	b.n	800a5e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a4c0:	6839      	ldr	r1, [r7, #0]
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f000 facb 	bl	800aa5e <USBD_CtlError>
            err++;
 800a4c8:	7afb      	ldrb	r3, [r7, #11]
 800a4ca:	3301      	adds	r3, #1
 800a4cc:	72fb      	strb	r3, [r7, #11]
          break;
 800a4ce:	e089      	b.n	800a5e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4d6:	689b      	ldr	r3, [r3, #8]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d00b      	beq.n	800a4f4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4e2:	689b      	ldr	r3, [r3, #8]
 800a4e4:	687a      	ldr	r2, [r7, #4]
 800a4e6:	7c12      	ldrb	r2, [r2, #16]
 800a4e8:	f107 0108 	add.w	r1, r7, #8
 800a4ec:	4610      	mov	r0, r2
 800a4ee:	4798      	blx	r3
 800a4f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4f2:	e077      	b.n	800a5e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a4f4:	6839      	ldr	r1, [r7, #0]
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f000 fab1 	bl	800aa5e <USBD_CtlError>
            err++;
 800a4fc:	7afb      	ldrb	r3, [r7, #11]
 800a4fe:	3301      	adds	r3, #1
 800a500:	72fb      	strb	r3, [r7, #11]
          break;
 800a502:	e06f      	b.n	800a5e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a50a:	68db      	ldr	r3, [r3, #12]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d00b      	beq.n	800a528 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a516:	68db      	ldr	r3, [r3, #12]
 800a518:	687a      	ldr	r2, [r7, #4]
 800a51a:	7c12      	ldrb	r2, [r2, #16]
 800a51c:	f107 0108 	add.w	r1, r7, #8
 800a520:	4610      	mov	r0, r2
 800a522:	4798      	blx	r3
 800a524:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a526:	e05d      	b.n	800a5e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a528:	6839      	ldr	r1, [r7, #0]
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f000 fa97 	bl	800aa5e <USBD_CtlError>
            err++;
 800a530:	7afb      	ldrb	r3, [r7, #11]
 800a532:	3301      	adds	r3, #1
 800a534:	72fb      	strb	r3, [r7, #11]
          break;
 800a536:	e055      	b.n	800a5e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a53e:	691b      	ldr	r3, [r3, #16]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d00b      	beq.n	800a55c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a54a:	691b      	ldr	r3, [r3, #16]
 800a54c:	687a      	ldr	r2, [r7, #4]
 800a54e:	7c12      	ldrb	r2, [r2, #16]
 800a550:	f107 0108 	add.w	r1, r7, #8
 800a554:	4610      	mov	r0, r2
 800a556:	4798      	blx	r3
 800a558:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a55a:	e043      	b.n	800a5e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a55c:	6839      	ldr	r1, [r7, #0]
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f000 fa7d 	bl	800aa5e <USBD_CtlError>
            err++;
 800a564:	7afb      	ldrb	r3, [r7, #11]
 800a566:	3301      	adds	r3, #1
 800a568:	72fb      	strb	r3, [r7, #11]
          break;
 800a56a:	e03b      	b.n	800a5e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a572:	695b      	ldr	r3, [r3, #20]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d00b      	beq.n	800a590 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a57e:	695b      	ldr	r3, [r3, #20]
 800a580:	687a      	ldr	r2, [r7, #4]
 800a582:	7c12      	ldrb	r2, [r2, #16]
 800a584:	f107 0108 	add.w	r1, r7, #8
 800a588:	4610      	mov	r0, r2
 800a58a:	4798      	blx	r3
 800a58c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a58e:	e029      	b.n	800a5e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a590:	6839      	ldr	r1, [r7, #0]
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f000 fa63 	bl	800aa5e <USBD_CtlError>
            err++;
 800a598:	7afb      	ldrb	r3, [r7, #11]
 800a59a:	3301      	adds	r3, #1
 800a59c:	72fb      	strb	r3, [r7, #11]
          break;
 800a59e:	e021      	b.n	800a5e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5a6:	699b      	ldr	r3, [r3, #24]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d00b      	beq.n	800a5c4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5b2:	699b      	ldr	r3, [r3, #24]
 800a5b4:	687a      	ldr	r2, [r7, #4]
 800a5b6:	7c12      	ldrb	r2, [r2, #16]
 800a5b8:	f107 0108 	add.w	r1, r7, #8
 800a5bc:	4610      	mov	r0, r2
 800a5be:	4798      	blx	r3
 800a5c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5c2:	e00f      	b.n	800a5e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a5c4:	6839      	ldr	r1, [r7, #0]
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f000 fa49 	bl	800aa5e <USBD_CtlError>
            err++;
 800a5cc:	7afb      	ldrb	r3, [r7, #11]
 800a5ce:	3301      	adds	r3, #1
 800a5d0:	72fb      	strb	r3, [r7, #11]
          break;
 800a5d2:	e007      	b.n	800a5e4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a5d4:	6839      	ldr	r1, [r7, #0]
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f000 fa41 	bl	800aa5e <USBD_CtlError>
          err++;
 800a5dc:	7afb      	ldrb	r3, [r7, #11]
 800a5de:	3301      	adds	r3, #1
 800a5e0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a5e2:	bf00      	nop
      }
      break;
 800a5e4:	e037      	b.n	800a656 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	7c1b      	ldrb	r3, [r3, #16]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d109      	bne.n	800a602 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5f6:	f107 0208 	add.w	r2, r7, #8
 800a5fa:	4610      	mov	r0, r2
 800a5fc:	4798      	blx	r3
 800a5fe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a600:	e029      	b.n	800a656 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a602:	6839      	ldr	r1, [r7, #0]
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f000 fa2a 	bl	800aa5e <USBD_CtlError>
        err++;
 800a60a:	7afb      	ldrb	r3, [r7, #11]
 800a60c:	3301      	adds	r3, #1
 800a60e:	72fb      	strb	r3, [r7, #11]
      break;
 800a610:	e021      	b.n	800a656 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	7c1b      	ldrb	r3, [r3, #16]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d10d      	bne.n	800a636 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a622:	f107 0208 	add.w	r2, r7, #8
 800a626:	4610      	mov	r0, r2
 800a628:	4798      	blx	r3
 800a62a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	3301      	adds	r3, #1
 800a630:	2207      	movs	r2, #7
 800a632:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a634:	e00f      	b.n	800a656 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a636:	6839      	ldr	r1, [r7, #0]
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f000 fa10 	bl	800aa5e <USBD_CtlError>
        err++;
 800a63e:	7afb      	ldrb	r3, [r7, #11]
 800a640:	3301      	adds	r3, #1
 800a642:	72fb      	strb	r3, [r7, #11]
      break;
 800a644:	e007      	b.n	800a656 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a646:	6839      	ldr	r1, [r7, #0]
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f000 fa08 	bl	800aa5e <USBD_CtlError>
      err++;
 800a64e:	7afb      	ldrb	r3, [r7, #11]
 800a650:	3301      	adds	r3, #1
 800a652:	72fb      	strb	r3, [r7, #11]
      break;
 800a654:	bf00      	nop
  }

  if (err != 0U)
 800a656:	7afb      	ldrb	r3, [r7, #11]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d11e      	bne.n	800a69a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	88db      	ldrh	r3, [r3, #6]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d016      	beq.n	800a692 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a664:	893b      	ldrh	r3, [r7, #8]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d00e      	beq.n	800a688 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	88da      	ldrh	r2, [r3, #6]
 800a66e:	893b      	ldrh	r3, [r7, #8]
 800a670:	4293      	cmp	r3, r2
 800a672:	bf28      	it	cs
 800a674:	4613      	movcs	r3, r2
 800a676:	b29b      	uxth	r3, r3
 800a678:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a67a:	893b      	ldrh	r3, [r7, #8]
 800a67c:	461a      	mov	r2, r3
 800a67e:	68f9      	ldr	r1, [r7, #12]
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f000 fa5d 	bl	800ab40 <USBD_CtlSendData>
 800a686:	e009      	b.n	800a69c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a688:	6839      	ldr	r1, [r7, #0]
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f000 f9e7 	bl	800aa5e <USBD_CtlError>
 800a690:	e004      	b.n	800a69c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f000 faae 	bl	800abf4 <USBD_CtlSendStatus>
 800a698:	e000      	b.n	800a69c <USBD_GetDescriptor+0x320>
    return;
 800a69a:	bf00      	nop
  }
}
 800a69c:	3710      	adds	r7, #16
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}
 800a6a2:	bf00      	nop

0800a6a4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b084      	sub	sp, #16
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	889b      	ldrh	r3, [r3, #4]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d131      	bne.n	800a71a <USBD_SetAddress+0x76>
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	88db      	ldrh	r3, [r3, #6]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d12d      	bne.n	800a71a <USBD_SetAddress+0x76>
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	885b      	ldrh	r3, [r3, #2]
 800a6c2:	2b7f      	cmp	r3, #127	; 0x7f
 800a6c4:	d829      	bhi.n	800a71a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	885b      	ldrh	r3, [r3, #2]
 800a6ca:	b2db      	uxtb	r3, r3
 800a6cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6d0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6d8:	b2db      	uxtb	r3, r3
 800a6da:	2b03      	cmp	r3, #3
 800a6dc:	d104      	bne.n	800a6e8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a6de:	6839      	ldr	r1, [r7, #0]
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f000 f9bc 	bl	800aa5e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6e6:	e01d      	b.n	800a724 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	7bfa      	ldrb	r2, [r7, #15]
 800a6ec:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a6f0:	7bfb      	ldrb	r3, [r7, #15]
 800a6f2:	4619      	mov	r1, r3
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f000 ff05 	bl	800b504 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f000 fa7a 	bl	800abf4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a700:	7bfb      	ldrb	r3, [r7, #15]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d004      	beq.n	800a710 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2202      	movs	r2, #2
 800a70a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a70e:	e009      	b.n	800a724 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2201      	movs	r2, #1
 800a714:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a718:	e004      	b.n	800a724 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a71a:	6839      	ldr	r1, [r7, #0]
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f000 f99e 	bl	800aa5e <USBD_CtlError>
  }
}
 800a722:	bf00      	nop
 800a724:	bf00      	nop
 800a726:	3710      	adds	r7, #16
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}

0800a72c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b084      	sub	sp, #16
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
 800a734:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a736:	2300      	movs	r3, #0
 800a738:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	885b      	ldrh	r3, [r3, #2]
 800a73e:	b2da      	uxtb	r2, r3
 800a740:	4b4e      	ldr	r3, [pc, #312]	; (800a87c <USBD_SetConfig+0x150>)
 800a742:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a744:	4b4d      	ldr	r3, [pc, #308]	; (800a87c <USBD_SetConfig+0x150>)
 800a746:	781b      	ldrb	r3, [r3, #0]
 800a748:	2b01      	cmp	r3, #1
 800a74a:	d905      	bls.n	800a758 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a74c:	6839      	ldr	r1, [r7, #0]
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f000 f985 	bl	800aa5e <USBD_CtlError>
    return USBD_FAIL;
 800a754:	2303      	movs	r3, #3
 800a756:	e08c      	b.n	800a872 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a75e:	b2db      	uxtb	r3, r3
 800a760:	2b02      	cmp	r3, #2
 800a762:	d002      	beq.n	800a76a <USBD_SetConfig+0x3e>
 800a764:	2b03      	cmp	r3, #3
 800a766:	d029      	beq.n	800a7bc <USBD_SetConfig+0x90>
 800a768:	e075      	b.n	800a856 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a76a:	4b44      	ldr	r3, [pc, #272]	; (800a87c <USBD_SetConfig+0x150>)
 800a76c:	781b      	ldrb	r3, [r3, #0]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d020      	beq.n	800a7b4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a772:	4b42      	ldr	r3, [pc, #264]	; (800a87c <USBD_SetConfig+0x150>)
 800a774:	781b      	ldrb	r3, [r3, #0]
 800a776:	461a      	mov	r2, r3
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a77c:	4b3f      	ldr	r3, [pc, #252]	; (800a87c <USBD_SetConfig+0x150>)
 800a77e:	781b      	ldrb	r3, [r3, #0]
 800a780:	4619      	mov	r1, r3
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f7fe ffb7 	bl	80096f6 <USBD_SetClassConfig>
 800a788:	4603      	mov	r3, r0
 800a78a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a78c:	7bfb      	ldrb	r3, [r7, #15]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d008      	beq.n	800a7a4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a792:	6839      	ldr	r1, [r7, #0]
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f000 f962 	bl	800aa5e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2202      	movs	r2, #2
 800a79e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a7a2:	e065      	b.n	800a870 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f000 fa25 	bl	800abf4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2203      	movs	r2, #3
 800a7ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a7b2:	e05d      	b.n	800a870 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f000 fa1d 	bl	800abf4 <USBD_CtlSendStatus>
      break;
 800a7ba:	e059      	b.n	800a870 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a7bc:	4b2f      	ldr	r3, [pc, #188]	; (800a87c <USBD_SetConfig+0x150>)
 800a7be:	781b      	ldrb	r3, [r3, #0]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d112      	bne.n	800a7ea <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2202      	movs	r2, #2
 800a7c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a7cc:	4b2b      	ldr	r3, [pc, #172]	; (800a87c <USBD_SetConfig+0x150>)
 800a7ce:	781b      	ldrb	r3, [r3, #0]
 800a7d0:	461a      	mov	r2, r3
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a7d6:	4b29      	ldr	r3, [pc, #164]	; (800a87c <USBD_SetConfig+0x150>)
 800a7d8:	781b      	ldrb	r3, [r3, #0]
 800a7da:	4619      	mov	r1, r3
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f7fe ffa6 	bl	800972e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f000 fa06 	bl	800abf4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a7e8:	e042      	b.n	800a870 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a7ea:	4b24      	ldr	r3, [pc, #144]	; (800a87c <USBD_SetConfig+0x150>)
 800a7ec:	781b      	ldrb	r3, [r3, #0]
 800a7ee:	461a      	mov	r2, r3
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	685b      	ldr	r3, [r3, #4]
 800a7f4:	429a      	cmp	r2, r3
 800a7f6:	d02a      	beq.n	800a84e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	685b      	ldr	r3, [r3, #4]
 800a7fc:	b2db      	uxtb	r3, r3
 800a7fe:	4619      	mov	r1, r3
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f7fe ff94 	bl	800972e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a806:	4b1d      	ldr	r3, [pc, #116]	; (800a87c <USBD_SetConfig+0x150>)
 800a808:	781b      	ldrb	r3, [r3, #0]
 800a80a:	461a      	mov	r2, r3
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a810:	4b1a      	ldr	r3, [pc, #104]	; (800a87c <USBD_SetConfig+0x150>)
 800a812:	781b      	ldrb	r3, [r3, #0]
 800a814:	4619      	mov	r1, r3
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f7fe ff6d 	bl	80096f6 <USBD_SetClassConfig>
 800a81c:	4603      	mov	r3, r0
 800a81e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a820:	7bfb      	ldrb	r3, [r7, #15]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d00f      	beq.n	800a846 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a826:	6839      	ldr	r1, [r7, #0]
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f000 f918 	bl	800aa5e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	b2db      	uxtb	r3, r3
 800a834:	4619      	mov	r1, r3
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f7fe ff79 	bl	800972e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2202      	movs	r2, #2
 800a840:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a844:	e014      	b.n	800a870 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f000 f9d4 	bl	800abf4 <USBD_CtlSendStatus>
      break;
 800a84c:	e010      	b.n	800a870 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f000 f9d0 	bl	800abf4 <USBD_CtlSendStatus>
      break;
 800a854:	e00c      	b.n	800a870 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a856:	6839      	ldr	r1, [r7, #0]
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f000 f900 	bl	800aa5e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a85e:	4b07      	ldr	r3, [pc, #28]	; (800a87c <USBD_SetConfig+0x150>)
 800a860:	781b      	ldrb	r3, [r3, #0]
 800a862:	4619      	mov	r1, r3
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f7fe ff62 	bl	800972e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a86a:	2303      	movs	r3, #3
 800a86c:	73fb      	strb	r3, [r7, #15]
      break;
 800a86e:	bf00      	nop
  }

  return ret;
 800a870:	7bfb      	ldrb	r3, [r7, #15]
}
 800a872:	4618      	mov	r0, r3
 800a874:	3710      	adds	r7, #16
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}
 800a87a:	bf00      	nop
 800a87c:	240004cc 	.word	0x240004cc

0800a880 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b082      	sub	sp, #8
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
 800a888:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	88db      	ldrh	r3, [r3, #6]
 800a88e:	2b01      	cmp	r3, #1
 800a890:	d004      	beq.n	800a89c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a892:	6839      	ldr	r1, [r7, #0]
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f000 f8e2 	bl	800aa5e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a89a:	e023      	b.n	800a8e4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8a2:	b2db      	uxtb	r3, r3
 800a8a4:	2b02      	cmp	r3, #2
 800a8a6:	dc02      	bgt.n	800a8ae <USBD_GetConfig+0x2e>
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	dc03      	bgt.n	800a8b4 <USBD_GetConfig+0x34>
 800a8ac:	e015      	b.n	800a8da <USBD_GetConfig+0x5a>
 800a8ae:	2b03      	cmp	r3, #3
 800a8b0:	d00b      	beq.n	800a8ca <USBD_GetConfig+0x4a>
 800a8b2:	e012      	b.n	800a8da <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	3308      	adds	r3, #8
 800a8be:	2201      	movs	r2, #1
 800a8c0:	4619      	mov	r1, r3
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f000 f93c 	bl	800ab40 <USBD_CtlSendData>
        break;
 800a8c8:	e00c      	b.n	800a8e4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	3304      	adds	r3, #4
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f000 f934 	bl	800ab40 <USBD_CtlSendData>
        break;
 800a8d8:	e004      	b.n	800a8e4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a8da:	6839      	ldr	r1, [r7, #0]
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f000 f8be 	bl	800aa5e <USBD_CtlError>
        break;
 800a8e2:	bf00      	nop
}
 800a8e4:	bf00      	nop
 800a8e6:	3708      	adds	r7, #8
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}

0800a8ec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b082      	sub	sp, #8
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
 800a8f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8fc:	b2db      	uxtb	r3, r3
 800a8fe:	3b01      	subs	r3, #1
 800a900:	2b02      	cmp	r3, #2
 800a902:	d81e      	bhi.n	800a942 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	88db      	ldrh	r3, [r3, #6]
 800a908:	2b02      	cmp	r3, #2
 800a90a:	d004      	beq.n	800a916 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a90c:	6839      	ldr	r1, [r7, #0]
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f000 f8a5 	bl	800aa5e <USBD_CtlError>
        break;
 800a914:	e01a      	b.n	800a94c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2201      	movs	r2, #1
 800a91a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a922:	2b00      	cmp	r3, #0
 800a924:	d005      	beq.n	800a932 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	68db      	ldr	r3, [r3, #12]
 800a92a:	f043 0202 	orr.w	r2, r3, #2
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	330c      	adds	r3, #12
 800a936:	2202      	movs	r2, #2
 800a938:	4619      	mov	r1, r3
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f000 f900 	bl	800ab40 <USBD_CtlSendData>
      break;
 800a940:	e004      	b.n	800a94c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a942:	6839      	ldr	r1, [r7, #0]
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f000 f88a 	bl	800aa5e <USBD_CtlError>
      break;
 800a94a:	bf00      	nop
  }
}
 800a94c:	bf00      	nop
 800a94e:	3708      	adds	r7, #8
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}

0800a954 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b082      	sub	sp, #8
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
 800a95c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	885b      	ldrh	r3, [r3, #2]
 800a962:	2b01      	cmp	r3, #1
 800a964:	d107      	bne.n	800a976 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2201      	movs	r2, #1
 800a96a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f000 f940 	bl	800abf4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a974:	e013      	b.n	800a99e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	885b      	ldrh	r3, [r3, #2]
 800a97a:	2b02      	cmp	r3, #2
 800a97c:	d10b      	bne.n	800a996 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	889b      	ldrh	r3, [r3, #4]
 800a982:	0a1b      	lsrs	r3, r3, #8
 800a984:	b29b      	uxth	r3, r3
 800a986:	b2da      	uxtb	r2, r3
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f000 f930 	bl	800abf4 <USBD_CtlSendStatus>
}
 800a994:	e003      	b.n	800a99e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a996:	6839      	ldr	r1, [r7, #0]
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f000 f860 	bl	800aa5e <USBD_CtlError>
}
 800a99e:	bf00      	nop
 800a9a0:	3708      	adds	r7, #8
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}

0800a9a6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9a6:	b580      	push	{r7, lr}
 800a9a8:	b082      	sub	sp, #8
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	6078      	str	r0, [r7, #4]
 800a9ae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9b6:	b2db      	uxtb	r3, r3
 800a9b8:	3b01      	subs	r3, #1
 800a9ba:	2b02      	cmp	r3, #2
 800a9bc:	d80b      	bhi.n	800a9d6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	885b      	ldrh	r3, [r3, #2]
 800a9c2:	2b01      	cmp	r3, #1
 800a9c4:	d10c      	bne.n	800a9e0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f000 f910 	bl	800abf4 <USBD_CtlSendStatus>
      }
      break;
 800a9d4:	e004      	b.n	800a9e0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a9d6:	6839      	ldr	r1, [r7, #0]
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f000 f840 	bl	800aa5e <USBD_CtlError>
      break;
 800a9de:	e000      	b.n	800a9e2 <USBD_ClrFeature+0x3c>
      break;
 800a9e0:	bf00      	nop
  }
}
 800a9e2:	bf00      	nop
 800a9e4:	3708      	adds	r7, #8
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}

0800a9ea <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a9ea:	b580      	push	{r7, lr}
 800a9ec:	b084      	sub	sp, #16
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
 800a9f2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	781a      	ldrb	r2, [r3, #0]
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	3301      	adds	r3, #1
 800aa04:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	781a      	ldrb	r2, [r3, #0]
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	3301      	adds	r3, #1
 800aa12:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800aa14:	68f8      	ldr	r0, [r7, #12]
 800aa16:	f7ff fa17 	bl	8009e48 <SWAPBYTE>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	461a      	mov	r2, r3
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	3301      	adds	r3, #1
 800aa26:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	3301      	adds	r3, #1
 800aa2c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800aa2e:	68f8      	ldr	r0, [r7, #12]
 800aa30:	f7ff fa0a 	bl	8009e48 <SWAPBYTE>
 800aa34:	4603      	mov	r3, r0
 800aa36:	461a      	mov	r2, r3
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	3301      	adds	r3, #1
 800aa40:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	3301      	adds	r3, #1
 800aa46:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800aa48:	68f8      	ldr	r0, [r7, #12]
 800aa4a:	f7ff f9fd 	bl	8009e48 <SWAPBYTE>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	461a      	mov	r2, r3
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	80da      	strh	r2, [r3, #6]
}
 800aa56:	bf00      	nop
 800aa58:	3710      	adds	r7, #16
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}

0800aa5e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa5e:	b580      	push	{r7, lr}
 800aa60:	b082      	sub	sp, #8
 800aa62:	af00      	add	r7, sp, #0
 800aa64:	6078      	str	r0, [r7, #4]
 800aa66:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa68:	2180      	movs	r1, #128	; 0x80
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f000 fce0 	bl	800b430 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800aa70:	2100      	movs	r1, #0
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f000 fcdc 	bl	800b430 <USBD_LL_StallEP>
}
 800aa78:	bf00      	nop
 800aa7a:	3708      	adds	r7, #8
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}

0800aa80 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b086      	sub	sp, #24
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	60f8      	str	r0, [r7, #12]
 800aa88:	60b9      	str	r1, [r7, #8]
 800aa8a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d036      	beq.n	800ab04 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800aa9a:	6938      	ldr	r0, [r7, #16]
 800aa9c:	f000 f836 	bl	800ab0c <USBD_GetLen>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	3301      	adds	r3, #1
 800aaa4:	b29b      	uxth	r3, r3
 800aaa6:	005b      	lsls	r3, r3, #1
 800aaa8:	b29a      	uxth	r2, r3
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800aaae:	7dfb      	ldrb	r3, [r7, #23]
 800aab0:	68ba      	ldr	r2, [r7, #8]
 800aab2:	4413      	add	r3, r2
 800aab4:	687a      	ldr	r2, [r7, #4]
 800aab6:	7812      	ldrb	r2, [r2, #0]
 800aab8:	701a      	strb	r2, [r3, #0]
  idx++;
 800aaba:	7dfb      	ldrb	r3, [r7, #23]
 800aabc:	3301      	adds	r3, #1
 800aabe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800aac0:	7dfb      	ldrb	r3, [r7, #23]
 800aac2:	68ba      	ldr	r2, [r7, #8]
 800aac4:	4413      	add	r3, r2
 800aac6:	2203      	movs	r2, #3
 800aac8:	701a      	strb	r2, [r3, #0]
  idx++;
 800aaca:	7dfb      	ldrb	r3, [r7, #23]
 800aacc:	3301      	adds	r3, #1
 800aace:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800aad0:	e013      	b.n	800aafa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800aad2:	7dfb      	ldrb	r3, [r7, #23]
 800aad4:	68ba      	ldr	r2, [r7, #8]
 800aad6:	4413      	add	r3, r2
 800aad8:	693a      	ldr	r2, [r7, #16]
 800aada:	7812      	ldrb	r2, [r2, #0]
 800aadc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800aade:	693b      	ldr	r3, [r7, #16]
 800aae0:	3301      	adds	r3, #1
 800aae2:	613b      	str	r3, [r7, #16]
    idx++;
 800aae4:	7dfb      	ldrb	r3, [r7, #23]
 800aae6:	3301      	adds	r3, #1
 800aae8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800aaea:	7dfb      	ldrb	r3, [r7, #23]
 800aaec:	68ba      	ldr	r2, [r7, #8]
 800aaee:	4413      	add	r3, r2
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	701a      	strb	r2, [r3, #0]
    idx++;
 800aaf4:	7dfb      	ldrb	r3, [r7, #23]
 800aaf6:	3301      	adds	r3, #1
 800aaf8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800aafa:	693b      	ldr	r3, [r7, #16]
 800aafc:	781b      	ldrb	r3, [r3, #0]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d1e7      	bne.n	800aad2 <USBD_GetString+0x52>
 800ab02:	e000      	b.n	800ab06 <USBD_GetString+0x86>
    return;
 800ab04:	bf00      	nop
  }
}
 800ab06:	3718      	adds	r7, #24
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}

0800ab0c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b085      	sub	sp, #20
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ab14:	2300      	movs	r3, #0
 800ab16:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ab1c:	e005      	b.n	800ab2a <USBD_GetLen+0x1e>
  {
    len++;
 800ab1e:	7bfb      	ldrb	r3, [r7, #15]
 800ab20:	3301      	adds	r3, #1
 800ab22:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	3301      	adds	r3, #1
 800ab28:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	781b      	ldrb	r3, [r3, #0]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d1f5      	bne.n	800ab1e <USBD_GetLen+0x12>
  }

  return len;
 800ab32:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3714      	adds	r7, #20
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3e:	4770      	bx	lr

0800ab40 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b084      	sub	sp, #16
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	60f8      	str	r0, [r7, #12]
 800ab48:	60b9      	str	r1, [r7, #8]
 800ab4a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	2202      	movs	r2, #2
 800ab50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	687a      	ldr	r2, [r7, #4]
 800ab58:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	687a      	ldr	r2, [r7, #4]
 800ab5e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	68ba      	ldr	r2, [r7, #8]
 800ab64:	2100      	movs	r1, #0
 800ab66:	68f8      	ldr	r0, [r7, #12]
 800ab68:	f000 fceb 	bl	800b542 <USBD_LL_Transmit>

  return USBD_OK;
 800ab6c:	2300      	movs	r3, #0
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	3710      	adds	r7, #16
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}

0800ab76 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ab76:	b580      	push	{r7, lr}
 800ab78:	b084      	sub	sp, #16
 800ab7a:	af00      	add	r7, sp, #0
 800ab7c:	60f8      	str	r0, [r7, #12]
 800ab7e:	60b9      	str	r1, [r7, #8]
 800ab80:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	68ba      	ldr	r2, [r7, #8]
 800ab86:	2100      	movs	r1, #0
 800ab88:	68f8      	ldr	r0, [r7, #12]
 800ab8a:	f000 fcda 	bl	800b542 <USBD_LL_Transmit>

  return USBD_OK;
 800ab8e:	2300      	movs	r3, #0
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	3710      	adds	r7, #16
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}

0800ab98 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b084      	sub	sp, #16
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	60f8      	str	r0, [r7, #12]
 800aba0:	60b9      	str	r1, [r7, #8]
 800aba2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2203      	movs	r2, #3
 800aba8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	687a      	ldr	r2, [r7, #4]
 800abb0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	687a      	ldr	r2, [r7, #4]
 800abb8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	68ba      	ldr	r2, [r7, #8]
 800abc0:	2100      	movs	r1, #0
 800abc2:	68f8      	ldr	r0, [r7, #12]
 800abc4:	f000 fcde 	bl	800b584 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800abc8:	2300      	movs	r3, #0
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3710      	adds	r7, #16
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}

0800abd2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800abd2:	b580      	push	{r7, lr}
 800abd4:	b084      	sub	sp, #16
 800abd6:	af00      	add	r7, sp, #0
 800abd8:	60f8      	str	r0, [r7, #12]
 800abda:	60b9      	str	r1, [r7, #8]
 800abdc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	68ba      	ldr	r2, [r7, #8]
 800abe2:	2100      	movs	r1, #0
 800abe4:	68f8      	ldr	r0, [r7, #12]
 800abe6:	f000 fccd 	bl	800b584 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800abea:	2300      	movs	r3, #0
}
 800abec:	4618      	mov	r0, r3
 800abee:	3710      	adds	r7, #16
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd80      	pop	{r7, pc}

0800abf4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b082      	sub	sp, #8
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2204      	movs	r2, #4
 800ac00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ac04:	2300      	movs	r3, #0
 800ac06:	2200      	movs	r2, #0
 800ac08:	2100      	movs	r1, #0
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f000 fc99 	bl	800b542 <USBD_LL_Transmit>

  return USBD_OK;
 800ac10:	2300      	movs	r3, #0
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3708      	adds	r7, #8
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}

0800ac1a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ac1a:	b580      	push	{r7, lr}
 800ac1c:	b082      	sub	sp, #8
 800ac1e:	af00      	add	r7, sp, #0
 800ac20:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2205      	movs	r2, #5
 800ac26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	2100      	movs	r1, #0
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f000 fca7 	bl	800b584 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ac36:	2300      	movs	r3, #0
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3708      	adds	r7, #8
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}

0800ac40 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ac44:	2200      	movs	r2, #0
 800ac46:	4913      	ldr	r1, [pc, #76]	; (800ac94 <MX_USB_DEVICE_Init+0x54>)
 800ac48:	4813      	ldr	r0, [pc, #76]	; (800ac98 <MX_USB_DEVICE_Init+0x58>)
 800ac4a:	f7fe fcd7 	bl	80095fc <USBD_Init>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d001      	beq.n	800ac58 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ac54:	f7f5 fe68 	bl	8000928 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ac58:	4910      	ldr	r1, [pc, #64]	; (800ac9c <MX_USB_DEVICE_Init+0x5c>)
 800ac5a:	480f      	ldr	r0, [pc, #60]	; (800ac98 <MX_USB_DEVICE_Init+0x58>)
 800ac5c:	f7fe fcfe 	bl	800965c <USBD_RegisterClass>
 800ac60:	4603      	mov	r3, r0
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d001      	beq.n	800ac6a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ac66:	f7f5 fe5f 	bl	8000928 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ac6a:	490d      	ldr	r1, [pc, #52]	; (800aca0 <MX_USB_DEVICE_Init+0x60>)
 800ac6c:	480a      	ldr	r0, [pc, #40]	; (800ac98 <MX_USB_DEVICE_Init+0x58>)
 800ac6e:	f7fe fc35 	bl	80094dc <USBD_CDC_RegisterInterface>
 800ac72:	4603      	mov	r3, r0
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d001      	beq.n	800ac7c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ac78:	f7f5 fe56 	bl	8000928 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ac7c:	4806      	ldr	r0, [pc, #24]	; (800ac98 <MX_USB_DEVICE_Init+0x58>)
 800ac7e:	f7fe fd23 	bl	80096c8 <USBD_Start>
 800ac82:	4603      	mov	r3, r0
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d001      	beq.n	800ac8c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ac88:	f7f5 fe4e 	bl	8000928 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800ac8c:	f7f8 fff2 	bl	8003c74 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ac90:	bf00      	nop
 800ac92:	bd80      	pop	{r7, pc}
 800ac94:	240000b0 	.word	0x240000b0
 800ac98:	240004d0 	.word	0x240004d0
 800ac9c:	2400001c 	.word	0x2400001c
 800aca0:	2400009c 	.word	0x2400009c

0800aca4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800aca8:	2200      	movs	r2, #0
 800acaa:	4905      	ldr	r1, [pc, #20]	; (800acc0 <CDC_Init_FS+0x1c>)
 800acac:	4805      	ldr	r0, [pc, #20]	; (800acc4 <CDC_Init_FS+0x20>)
 800acae:	f7fe fc2f 	bl	8009510 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800acb2:	4905      	ldr	r1, [pc, #20]	; (800acc8 <CDC_Init_FS+0x24>)
 800acb4:	4803      	ldr	r0, [pc, #12]	; (800acc4 <CDC_Init_FS+0x20>)
 800acb6:	f7fe fc4d 	bl	8009554 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800acba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	bd80      	pop	{r7, pc}
 800acc0:	24000fac 	.word	0x24000fac
 800acc4:	240004d0 	.word	0x240004d0
 800acc8:	240007ac 	.word	0x240007ac

0800accc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800accc:	b480      	push	{r7}
 800acce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800acd0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	46bd      	mov	sp, r7
 800acd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acda:	4770      	bx	lr

0800acdc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800acdc:	b480      	push	{r7}
 800acde:	b083      	sub	sp, #12
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	4603      	mov	r3, r0
 800ace4:	6039      	str	r1, [r7, #0]
 800ace6:	71fb      	strb	r3, [r7, #7]
 800ace8:	4613      	mov	r3, r2
 800acea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800acec:	79fb      	ldrb	r3, [r7, #7]
 800acee:	2b23      	cmp	r3, #35	; 0x23
 800acf0:	d84a      	bhi.n	800ad88 <CDC_Control_FS+0xac>
 800acf2:	a201      	add	r2, pc, #4	; (adr r2, 800acf8 <CDC_Control_FS+0x1c>)
 800acf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acf8:	0800ad89 	.word	0x0800ad89
 800acfc:	0800ad89 	.word	0x0800ad89
 800ad00:	0800ad89 	.word	0x0800ad89
 800ad04:	0800ad89 	.word	0x0800ad89
 800ad08:	0800ad89 	.word	0x0800ad89
 800ad0c:	0800ad89 	.word	0x0800ad89
 800ad10:	0800ad89 	.word	0x0800ad89
 800ad14:	0800ad89 	.word	0x0800ad89
 800ad18:	0800ad89 	.word	0x0800ad89
 800ad1c:	0800ad89 	.word	0x0800ad89
 800ad20:	0800ad89 	.word	0x0800ad89
 800ad24:	0800ad89 	.word	0x0800ad89
 800ad28:	0800ad89 	.word	0x0800ad89
 800ad2c:	0800ad89 	.word	0x0800ad89
 800ad30:	0800ad89 	.word	0x0800ad89
 800ad34:	0800ad89 	.word	0x0800ad89
 800ad38:	0800ad89 	.word	0x0800ad89
 800ad3c:	0800ad89 	.word	0x0800ad89
 800ad40:	0800ad89 	.word	0x0800ad89
 800ad44:	0800ad89 	.word	0x0800ad89
 800ad48:	0800ad89 	.word	0x0800ad89
 800ad4c:	0800ad89 	.word	0x0800ad89
 800ad50:	0800ad89 	.word	0x0800ad89
 800ad54:	0800ad89 	.word	0x0800ad89
 800ad58:	0800ad89 	.word	0x0800ad89
 800ad5c:	0800ad89 	.word	0x0800ad89
 800ad60:	0800ad89 	.word	0x0800ad89
 800ad64:	0800ad89 	.word	0x0800ad89
 800ad68:	0800ad89 	.word	0x0800ad89
 800ad6c:	0800ad89 	.word	0x0800ad89
 800ad70:	0800ad89 	.word	0x0800ad89
 800ad74:	0800ad89 	.word	0x0800ad89
 800ad78:	0800ad89 	.word	0x0800ad89
 800ad7c:	0800ad89 	.word	0x0800ad89
 800ad80:	0800ad89 	.word	0x0800ad89
 800ad84:	0800ad89 	.word	0x0800ad89
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ad88:	bf00      	nop
  }

  return (USBD_OK);
 800ad8a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	370c      	adds	r7, #12
 800ad90:	46bd      	mov	sp, r7
 800ad92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad96:	4770      	bx	lr

0800ad98 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b082      	sub	sp, #8
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
 800ada0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ada2:	6879      	ldr	r1, [r7, #4]
 800ada4:	4805      	ldr	r0, [pc, #20]	; (800adbc <CDC_Receive_FS+0x24>)
 800ada6:	f7fe fbd5 	bl	8009554 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800adaa:	4804      	ldr	r0, [pc, #16]	; (800adbc <CDC_Receive_FS+0x24>)
 800adac:	f7fe fbf0 	bl	8009590 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800adb0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3708      	adds	r7, #8
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}
 800adba:	bf00      	nop
 800adbc:	240004d0 	.word	0x240004d0

0800adc0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800adc0:	b480      	push	{r7}
 800adc2:	b087      	sub	sp, #28
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	60f8      	str	r0, [r7, #12]
 800adc8:	60b9      	str	r1, [r7, #8]
 800adca:	4613      	mov	r3, r2
 800adcc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800adce:	2300      	movs	r3, #0
 800add0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800add2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800add6:	4618      	mov	r0, r3
 800add8:	371c      	adds	r7, #28
 800adda:	46bd      	mov	sp, r7
 800addc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade0:	4770      	bx	lr
	...

0800ade4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ade4:	b480      	push	{r7}
 800ade6:	b083      	sub	sp, #12
 800ade8:	af00      	add	r7, sp, #0
 800adea:	4603      	mov	r3, r0
 800adec:	6039      	str	r1, [r7, #0]
 800adee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	2212      	movs	r2, #18
 800adf4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800adf6:	4b03      	ldr	r3, [pc, #12]	; (800ae04 <USBD_FS_DeviceDescriptor+0x20>)
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	370c      	adds	r7, #12
 800adfc:	46bd      	mov	sp, r7
 800adfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae02:	4770      	bx	lr
 800ae04:	240000d0 	.word	0x240000d0

0800ae08 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b083      	sub	sp, #12
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	4603      	mov	r3, r0
 800ae10:	6039      	str	r1, [r7, #0]
 800ae12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	2204      	movs	r2, #4
 800ae18:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ae1a:	4b03      	ldr	r3, [pc, #12]	; (800ae28 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	370c      	adds	r7, #12
 800ae20:	46bd      	mov	sp, r7
 800ae22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae26:	4770      	bx	lr
 800ae28:	240000e4 	.word	0x240000e4

0800ae2c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b082      	sub	sp, #8
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	4603      	mov	r3, r0
 800ae34:	6039      	str	r1, [r7, #0]
 800ae36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ae38:	79fb      	ldrb	r3, [r7, #7]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d105      	bne.n	800ae4a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ae3e:	683a      	ldr	r2, [r7, #0]
 800ae40:	4907      	ldr	r1, [pc, #28]	; (800ae60 <USBD_FS_ProductStrDescriptor+0x34>)
 800ae42:	4808      	ldr	r0, [pc, #32]	; (800ae64 <USBD_FS_ProductStrDescriptor+0x38>)
 800ae44:	f7ff fe1c 	bl	800aa80 <USBD_GetString>
 800ae48:	e004      	b.n	800ae54 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ae4a:	683a      	ldr	r2, [r7, #0]
 800ae4c:	4904      	ldr	r1, [pc, #16]	; (800ae60 <USBD_FS_ProductStrDescriptor+0x34>)
 800ae4e:	4805      	ldr	r0, [pc, #20]	; (800ae64 <USBD_FS_ProductStrDescriptor+0x38>)
 800ae50:	f7ff fe16 	bl	800aa80 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ae54:	4b02      	ldr	r3, [pc, #8]	; (800ae60 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3708      	adds	r7, #8
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}
 800ae5e:	bf00      	nop
 800ae60:	240017ac 	.word	0x240017ac
 800ae64:	0800e268 	.word	0x0800e268

0800ae68 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b082      	sub	sp, #8
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	4603      	mov	r3, r0
 800ae70:	6039      	str	r1, [r7, #0]
 800ae72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ae74:	683a      	ldr	r2, [r7, #0]
 800ae76:	4904      	ldr	r1, [pc, #16]	; (800ae88 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ae78:	4804      	ldr	r0, [pc, #16]	; (800ae8c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ae7a:	f7ff fe01 	bl	800aa80 <USBD_GetString>
  return USBD_StrDesc;
 800ae7e:	4b02      	ldr	r3, [pc, #8]	; (800ae88 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3708      	adds	r7, #8
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}
 800ae88:	240017ac 	.word	0x240017ac
 800ae8c:	0800e280 	.word	0x0800e280

0800ae90 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b082      	sub	sp, #8
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	4603      	mov	r3, r0
 800ae98:	6039      	str	r1, [r7, #0]
 800ae9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	221a      	movs	r2, #26
 800aea0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800aea2:	f000 f843 	bl	800af2c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800aea6:	4b02      	ldr	r3, [pc, #8]	; (800aeb0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3708      	adds	r7, #8
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}
 800aeb0:	240000e8 	.word	0x240000e8

0800aeb4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b082      	sub	sp, #8
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	4603      	mov	r3, r0
 800aebc:	6039      	str	r1, [r7, #0]
 800aebe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800aec0:	79fb      	ldrb	r3, [r7, #7]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d105      	bne.n	800aed2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aec6:	683a      	ldr	r2, [r7, #0]
 800aec8:	4907      	ldr	r1, [pc, #28]	; (800aee8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aeca:	4808      	ldr	r0, [pc, #32]	; (800aeec <USBD_FS_ConfigStrDescriptor+0x38>)
 800aecc:	f7ff fdd8 	bl	800aa80 <USBD_GetString>
 800aed0:	e004      	b.n	800aedc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aed2:	683a      	ldr	r2, [r7, #0]
 800aed4:	4904      	ldr	r1, [pc, #16]	; (800aee8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aed6:	4805      	ldr	r0, [pc, #20]	; (800aeec <USBD_FS_ConfigStrDescriptor+0x38>)
 800aed8:	f7ff fdd2 	bl	800aa80 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aedc:	4b02      	ldr	r3, [pc, #8]	; (800aee8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800aede:	4618      	mov	r0, r3
 800aee0:	3708      	adds	r7, #8
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}
 800aee6:	bf00      	nop
 800aee8:	240017ac 	.word	0x240017ac
 800aeec:	0800e294 	.word	0x0800e294

0800aef0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b082      	sub	sp, #8
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	4603      	mov	r3, r0
 800aef8:	6039      	str	r1, [r7, #0]
 800aefa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aefc:	79fb      	ldrb	r3, [r7, #7]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d105      	bne.n	800af0e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800af02:	683a      	ldr	r2, [r7, #0]
 800af04:	4907      	ldr	r1, [pc, #28]	; (800af24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800af06:	4808      	ldr	r0, [pc, #32]	; (800af28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800af08:	f7ff fdba 	bl	800aa80 <USBD_GetString>
 800af0c:	e004      	b.n	800af18 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800af0e:	683a      	ldr	r2, [r7, #0]
 800af10:	4904      	ldr	r1, [pc, #16]	; (800af24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800af12:	4805      	ldr	r0, [pc, #20]	; (800af28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800af14:	f7ff fdb4 	bl	800aa80 <USBD_GetString>
  }
  return USBD_StrDesc;
 800af18:	4b02      	ldr	r3, [pc, #8]	; (800af24 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3708      	adds	r7, #8
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}
 800af22:	bf00      	nop
 800af24:	240017ac 	.word	0x240017ac
 800af28:	0800e2a0 	.word	0x0800e2a0

0800af2c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b084      	sub	sp, #16
 800af30:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800af32:	4b0f      	ldr	r3, [pc, #60]	; (800af70 <Get_SerialNum+0x44>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800af38:	4b0e      	ldr	r3, [pc, #56]	; (800af74 <Get_SerialNum+0x48>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800af3e:	4b0e      	ldr	r3, [pc, #56]	; (800af78 <Get_SerialNum+0x4c>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800af44:	68fa      	ldr	r2, [r7, #12]
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	4413      	add	r3, r2
 800af4a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d009      	beq.n	800af66 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800af52:	2208      	movs	r2, #8
 800af54:	4909      	ldr	r1, [pc, #36]	; (800af7c <Get_SerialNum+0x50>)
 800af56:	68f8      	ldr	r0, [r7, #12]
 800af58:	f000 f814 	bl	800af84 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800af5c:	2204      	movs	r2, #4
 800af5e:	4908      	ldr	r1, [pc, #32]	; (800af80 <Get_SerialNum+0x54>)
 800af60:	68b8      	ldr	r0, [r7, #8]
 800af62:	f000 f80f 	bl	800af84 <IntToUnicode>
  }
}
 800af66:	bf00      	nop
 800af68:	3710      	adds	r7, #16
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}
 800af6e:	bf00      	nop
 800af70:	1ff1e800 	.word	0x1ff1e800
 800af74:	1ff1e804 	.word	0x1ff1e804
 800af78:	1ff1e808 	.word	0x1ff1e808
 800af7c:	240000ea 	.word	0x240000ea
 800af80:	240000fa 	.word	0x240000fa

0800af84 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800af84:	b480      	push	{r7}
 800af86:	b087      	sub	sp, #28
 800af88:	af00      	add	r7, sp, #0
 800af8a:	60f8      	str	r0, [r7, #12]
 800af8c:	60b9      	str	r1, [r7, #8]
 800af8e:	4613      	mov	r3, r2
 800af90:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800af92:	2300      	movs	r3, #0
 800af94:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800af96:	2300      	movs	r3, #0
 800af98:	75fb      	strb	r3, [r7, #23]
 800af9a:	e027      	b.n	800afec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	0f1b      	lsrs	r3, r3, #28
 800afa0:	2b09      	cmp	r3, #9
 800afa2:	d80b      	bhi.n	800afbc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	0f1b      	lsrs	r3, r3, #28
 800afa8:	b2da      	uxtb	r2, r3
 800afaa:	7dfb      	ldrb	r3, [r7, #23]
 800afac:	005b      	lsls	r3, r3, #1
 800afae:	4619      	mov	r1, r3
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	440b      	add	r3, r1
 800afb4:	3230      	adds	r2, #48	; 0x30
 800afb6:	b2d2      	uxtb	r2, r2
 800afb8:	701a      	strb	r2, [r3, #0]
 800afba:	e00a      	b.n	800afd2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	0f1b      	lsrs	r3, r3, #28
 800afc0:	b2da      	uxtb	r2, r3
 800afc2:	7dfb      	ldrb	r3, [r7, #23]
 800afc4:	005b      	lsls	r3, r3, #1
 800afc6:	4619      	mov	r1, r3
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	440b      	add	r3, r1
 800afcc:	3237      	adds	r2, #55	; 0x37
 800afce:	b2d2      	uxtb	r2, r2
 800afd0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	011b      	lsls	r3, r3, #4
 800afd6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800afd8:	7dfb      	ldrb	r3, [r7, #23]
 800afda:	005b      	lsls	r3, r3, #1
 800afdc:	3301      	adds	r3, #1
 800afde:	68ba      	ldr	r2, [r7, #8]
 800afe0:	4413      	add	r3, r2
 800afe2:	2200      	movs	r2, #0
 800afe4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800afe6:	7dfb      	ldrb	r3, [r7, #23]
 800afe8:	3301      	adds	r3, #1
 800afea:	75fb      	strb	r3, [r7, #23]
 800afec:	7dfa      	ldrb	r2, [r7, #23]
 800afee:	79fb      	ldrb	r3, [r7, #7]
 800aff0:	429a      	cmp	r2, r3
 800aff2:	d3d3      	bcc.n	800af9c <IntToUnicode+0x18>
  }
}
 800aff4:	bf00      	nop
 800aff6:	bf00      	nop
 800aff8:	371c      	adds	r7, #28
 800affa:	46bd      	mov	sp, r7
 800affc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b000:	4770      	bx	lr
	...

0800b004 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b0ba      	sub	sp, #232	; 0xe8
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b00c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800b010:	2200      	movs	r2, #0
 800b012:	601a      	str	r2, [r3, #0]
 800b014:	605a      	str	r2, [r3, #4]
 800b016:	609a      	str	r2, [r3, #8]
 800b018:	60da      	str	r2, [r3, #12]
 800b01a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b01c:	f107 0310 	add.w	r3, r7, #16
 800b020:	22c0      	movs	r2, #192	; 0xc0
 800b022:	2100      	movs	r1, #0
 800b024:	4618      	mov	r0, r3
 800b026:	f001 f942 	bl	800c2ae <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	4a2c      	ldr	r2, [pc, #176]	; (800b0e0 <HAL_PCD_MspInit+0xdc>)
 800b030:	4293      	cmp	r3, r2
 800b032:	d151      	bne.n	800b0d8 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b034:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800b038:	f04f 0300 	mov.w	r3, #0
 800b03c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800b040:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b044:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b048:	f107 0310 	add.w	r3, r7, #16
 800b04c:	4618      	mov	r0, r3
 800b04e:	f7f9 fdf1 	bl	8004c34 <HAL_RCCEx_PeriphCLKConfig>
 800b052:	4603      	mov	r3, r0
 800b054:	2b00      	cmp	r3, #0
 800b056:	d001      	beq.n	800b05c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800b058:	f7f5 fc66 	bl	8000928 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800b05c:	f7f8 fe0a 	bl	8003c74 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b060:	4b20      	ldr	r3, [pc, #128]	; (800b0e4 <HAL_PCD_MspInit+0xe0>)
 800b062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b066:	4a1f      	ldr	r2, [pc, #124]	; (800b0e4 <HAL_PCD_MspInit+0xe0>)
 800b068:	f043 0301 	orr.w	r3, r3, #1
 800b06c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b070:	4b1c      	ldr	r3, [pc, #112]	; (800b0e4 <HAL_PCD_MspInit+0xe0>)
 800b072:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b076:	f003 0301 	and.w	r3, r3, #1
 800b07a:	60fb      	str	r3, [r7, #12]
 800b07c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b07e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b082:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b086:	2302      	movs	r3, #2
 800b088:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b08c:	2300      	movs	r3, #0
 800b08e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b092:	2300      	movs	r3, #0
 800b094:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800b098:	230a      	movs	r3, #10
 800b09a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b09e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800b0a2:	4619      	mov	r1, r3
 800b0a4:	4810      	ldr	r0, [pc, #64]	; (800b0e8 <HAL_PCD_MspInit+0xe4>)
 800b0a6:	f7f7 f941 	bl	800232c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b0aa:	4b0e      	ldr	r3, [pc, #56]	; (800b0e4 <HAL_PCD_MspInit+0xe0>)
 800b0ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b0b0:	4a0c      	ldr	r2, [pc, #48]	; (800b0e4 <HAL_PCD_MspInit+0xe0>)
 800b0b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b0b6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800b0ba:	4b0a      	ldr	r3, [pc, #40]	; (800b0e4 <HAL_PCD_MspInit+0xe0>)
 800b0bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b0c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b0c4:	60bb      	str	r3, [r7, #8]
 800b0c6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	2100      	movs	r1, #0
 800b0cc:	2065      	movs	r0, #101	; 0x65
 800b0ce:	f7f7 f8f8 	bl	80022c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b0d2:	2065      	movs	r0, #101	; 0x65
 800b0d4:	f7f7 f90f 	bl	80022f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b0d8:	bf00      	nop
 800b0da:	37e8      	adds	r7, #232	; 0xe8
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}
 800b0e0:	40080000 	.word	0x40080000
 800b0e4:	58024400 	.word	0x58024400
 800b0e8:	58020000 	.word	0x58020000

0800b0ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b082      	sub	sp, #8
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b100:	4619      	mov	r1, r3
 800b102:	4610      	mov	r0, r2
 800b104:	f7fe fb2d 	bl	8009762 <USBD_LL_SetupStage>
}
 800b108:	bf00      	nop
 800b10a:	3708      	adds	r7, #8
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}

0800b110 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b082      	sub	sp, #8
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
 800b118:	460b      	mov	r3, r1
 800b11a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b122:	78fa      	ldrb	r2, [r7, #3]
 800b124:	6879      	ldr	r1, [r7, #4]
 800b126:	4613      	mov	r3, r2
 800b128:	00db      	lsls	r3, r3, #3
 800b12a:	4413      	add	r3, r2
 800b12c:	009b      	lsls	r3, r3, #2
 800b12e:	440b      	add	r3, r1
 800b130:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800b134:	681a      	ldr	r2, [r3, #0]
 800b136:	78fb      	ldrb	r3, [r7, #3]
 800b138:	4619      	mov	r1, r3
 800b13a:	f7fe fb67 	bl	800980c <USBD_LL_DataOutStage>
}
 800b13e:	bf00      	nop
 800b140:	3708      	adds	r7, #8
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}

0800b146 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b146:	b580      	push	{r7, lr}
 800b148:	b082      	sub	sp, #8
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	6078      	str	r0, [r7, #4]
 800b14e:	460b      	mov	r3, r1
 800b150:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b158:	78fa      	ldrb	r2, [r7, #3]
 800b15a:	6879      	ldr	r1, [r7, #4]
 800b15c:	4613      	mov	r3, r2
 800b15e:	00db      	lsls	r3, r3, #3
 800b160:	4413      	add	r3, r2
 800b162:	009b      	lsls	r3, r3, #2
 800b164:	440b      	add	r3, r1
 800b166:	3348      	adds	r3, #72	; 0x48
 800b168:	681a      	ldr	r2, [r3, #0]
 800b16a:	78fb      	ldrb	r3, [r7, #3]
 800b16c:	4619      	mov	r1, r3
 800b16e:	f7fe fc00 	bl	8009972 <USBD_LL_DataInStage>
}
 800b172:	bf00      	nop
 800b174:	3708      	adds	r7, #8
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}

0800b17a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b17a:	b580      	push	{r7, lr}
 800b17c:	b082      	sub	sp, #8
 800b17e:	af00      	add	r7, sp, #0
 800b180:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b188:	4618      	mov	r0, r3
 800b18a:	f7fe fd3a 	bl	8009c02 <USBD_LL_SOF>
}
 800b18e:	bf00      	nop
 800b190:	3708      	adds	r7, #8
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}

0800b196 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b196:	b580      	push	{r7, lr}
 800b198:	b084      	sub	sp, #16
 800b19a:	af00      	add	r7, sp, #0
 800b19c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b19e:	2301      	movs	r3, #1
 800b1a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	691b      	ldr	r3, [r3, #16]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d102      	bne.n	800b1b0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	73fb      	strb	r3, [r7, #15]
 800b1ae:	e008      	b.n	800b1c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	691b      	ldr	r3, [r3, #16]
 800b1b4:	2b02      	cmp	r3, #2
 800b1b6:	d102      	bne.n	800b1be <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	73fb      	strb	r3, [r7, #15]
 800b1bc:	e001      	b.n	800b1c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b1be:	f7f5 fbb3 	bl	8000928 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b1c8:	7bfa      	ldrb	r2, [r7, #15]
 800b1ca:	4611      	mov	r1, r2
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f7fe fcd4 	bl	8009b7a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f7fe fc7c 	bl	8009ad6 <USBD_LL_Reset>
}
 800b1de:	bf00      	nop
 800b1e0:	3710      	adds	r7, #16
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}
	...

0800b1e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b082      	sub	sp, #8
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f7fe fccf 	bl	8009b9a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	687a      	ldr	r2, [r7, #4]
 800b208:	6812      	ldr	r2, [r2, #0]
 800b20a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b20e:	f043 0301 	orr.w	r3, r3, #1
 800b212:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	6a1b      	ldr	r3, [r3, #32]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d005      	beq.n	800b228 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b21c:	4b04      	ldr	r3, [pc, #16]	; (800b230 <HAL_PCD_SuspendCallback+0x48>)
 800b21e:	691b      	ldr	r3, [r3, #16]
 800b220:	4a03      	ldr	r2, [pc, #12]	; (800b230 <HAL_PCD_SuspendCallback+0x48>)
 800b222:	f043 0306 	orr.w	r3, r3, #6
 800b226:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b228:	bf00      	nop
 800b22a:	3708      	adds	r7, #8
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}
 800b230:	e000ed00 	.word	0xe000ed00

0800b234 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b082      	sub	sp, #8
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b242:	4618      	mov	r0, r3
 800b244:	f7fe fcc5 	bl	8009bd2 <USBD_LL_Resume>
}
 800b248:	bf00      	nop
 800b24a:	3708      	adds	r7, #8
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}

0800b250 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b082      	sub	sp, #8
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
 800b258:	460b      	mov	r3, r1
 800b25a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b262:	78fa      	ldrb	r2, [r7, #3]
 800b264:	4611      	mov	r1, r2
 800b266:	4618      	mov	r0, r3
 800b268:	f7fe fd1d 	bl	8009ca6 <USBD_LL_IsoOUTIncomplete>
}
 800b26c:	bf00      	nop
 800b26e:	3708      	adds	r7, #8
 800b270:	46bd      	mov	sp, r7
 800b272:	bd80      	pop	{r7, pc}

0800b274 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b082      	sub	sp, #8
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
 800b27c:	460b      	mov	r3, r1
 800b27e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b286:	78fa      	ldrb	r2, [r7, #3]
 800b288:	4611      	mov	r1, r2
 800b28a:	4618      	mov	r0, r3
 800b28c:	f7fe fcd9 	bl	8009c42 <USBD_LL_IsoINIncomplete>
}
 800b290:	bf00      	nop
 800b292:	3708      	adds	r7, #8
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}

0800b298 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b082      	sub	sp, #8
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f7fe fd2f 	bl	8009d0a <USBD_LL_DevConnected>
}
 800b2ac:	bf00      	nop
 800b2ae:	3708      	adds	r7, #8
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}

0800b2b4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b082      	sub	sp, #8
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	f7fe fd2c 	bl	8009d20 <USBD_LL_DevDisconnected>
}
 800b2c8:	bf00      	nop
 800b2ca:	3708      	adds	r7, #8
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}

0800b2d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b082      	sub	sp, #8
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	781b      	ldrb	r3, [r3, #0]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d13e      	bne.n	800b35e <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b2e0:	4a21      	ldr	r2, [pc, #132]	; (800b368 <USBD_LL_Init+0x98>)
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	4a1f      	ldr	r2, [pc, #124]	; (800b368 <USBD_LL_Init+0x98>)
 800b2ec:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b2f0:	4b1d      	ldr	r3, [pc, #116]	; (800b368 <USBD_LL_Init+0x98>)
 800b2f2:	4a1e      	ldr	r2, [pc, #120]	; (800b36c <USBD_LL_Init+0x9c>)
 800b2f4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800b2f6:	4b1c      	ldr	r3, [pc, #112]	; (800b368 <USBD_LL_Init+0x98>)
 800b2f8:	2209      	movs	r2, #9
 800b2fa:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b2fc:	4b1a      	ldr	r3, [pc, #104]	; (800b368 <USBD_LL_Init+0x98>)
 800b2fe:	2202      	movs	r2, #2
 800b300:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b302:	4b19      	ldr	r3, [pc, #100]	; (800b368 <USBD_LL_Init+0x98>)
 800b304:	2200      	movs	r2, #0
 800b306:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b308:	4b17      	ldr	r3, [pc, #92]	; (800b368 <USBD_LL_Init+0x98>)
 800b30a:	2202      	movs	r2, #2
 800b30c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b30e:	4b16      	ldr	r3, [pc, #88]	; (800b368 <USBD_LL_Init+0x98>)
 800b310:	2200      	movs	r2, #0
 800b312:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b314:	4b14      	ldr	r3, [pc, #80]	; (800b368 <USBD_LL_Init+0x98>)
 800b316:	2200      	movs	r2, #0
 800b318:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b31a:	4b13      	ldr	r3, [pc, #76]	; (800b368 <USBD_LL_Init+0x98>)
 800b31c:	2200      	movs	r2, #0
 800b31e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800b320:	4b11      	ldr	r3, [pc, #68]	; (800b368 <USBD_LL_Init+0x98>)
 800b322:	2200      	movs	r2, #0
 800b324:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b326:	4b10      	ldr	r3, [pc, #64]	; (800b368 <USBD_LL_Init+0x98>)
 800b328:	2200      	movs	r2, #0
 800b32a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b32c:	4b0e      	ldr	r3, [pc, #56]	; (800b368 <USBD_LL_Init+0x98>)
 800b32e:	2200      	movs	r2, #0
 800b330:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b332:	480d      	ldr	r0, [pc, #52]	; (800b368 <USBD_LL_Init+0x98>)
 800b334:	f7f7 f9aa 	bl	800268c <HAL_PCD_Init>
 800b338:	4603      	mov	r3, r0
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d001      	beq.n	800b342 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800b33e:	f7f5 faf3 	bl	8000928 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b342:	2180      	movs	r1, #128	; 0x80
 800b344:	4808      	ldr	r0, [pc, #32]	; (800b368 <USBD_LL_Init+0x98>)
 800b346:	f7f8 fc1a 	bl	8003b7e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b34a:	2240      	movs	r2, #64	; 0x40
 800b34c:	2100      	movs	r1, #0
 800b34e:	4806      	ldr	r0, [pc, #24]	; (800b368 <USBD_LL_Init+0x98>)
 800b350:	f7f8 fbce 	bl	8003af0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b354:	2280      	movs	r2, #128	; 0x80
 800b356:	2101      	movs	r1, #1
 800b358:	4803      	ldr	r0, [pc, #12]	; (800b368 <USBD_LL_Init+0x98>)
 800b35a:	f7f8 fbc9 	bl	8003af0 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800b35e:	2300      	movs	r3, #0
}
 800b360:	4618      	mov	r0, r3
 800b362:	3708      	adds	r7, #8
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}
 800b368:	240019ac 	.word	0x240019ac
 800b36c:	40080000 	.word	0x40080000

0800b370 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b084      	sub	sp, #16
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b378:	2300      	movs	r3, #0
 800b37a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b37c:	2300      	movs	r3, #0
 800b37e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b386:	4618      	mov	r0, r3
 800b388:	f7f7 faa4 	bl	80028d4 <HAL_PCD_Start>
 800b38c:	4603      	mov	r3, r0
 800b38e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b390:	7bfb      	ldrb	r3, [r7, #15]
 800b392:	4618      	mov	r0, r3
 800b394:	f000 f942 	bl	800b61c <USBD_Get_USB_Status>
 800b398:	4603      	mov	r3, r0
 800b39a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b39c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3710      	adds	r7, #16
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}

0800b3a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b3a6:	b580      	push	{r7, lr}
 800b3a8:	b084      	sub	sp, #16
 800b3aa:	af00      	add	r7, sp, #0
 800b3ac:	6078      	str	r0, [r7, #4]
 800b3ae:	4608      	mov	r0, r1
 800b3b0:	4611      	mov	r1, r2
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	70fb      	strb	r3, [r7, #3]
 800b3b8:	460b      	mov	r3, r1
 800b3ba:	70bb      	strb	r3, [r7, #2]
 800b3bc:	4613      	mov	r3, r2
 800b3be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b3ce:	78bb      	ldrb	r3, [r7, #2]
 800b3d0:	883a      	ldrh	r2, [r7, #0]
 800b3d2:	78f9      	ldrb	r1, [r7, #3]
 800b3d4:	f7f7 ffa4 	bl	8003320 <HAL_PCD_EP_Open>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b3dc:	7bfb      	ldrb	r3, [r7, #15]
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f000 f91c 	bl	800b61c <USBD_Get_USB_Status>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	3710      	adds	r7, #16
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}

0800b3f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b3f2:	b580      	push	{r7, lr}
 800b3f4:	b084      	sub	sp, #16
 800b3f6:	af00      	add	r7, sp, #0
 800b3f8:	6078      	str	r0, [r7, #4]
 800b3fa:	460b      	mov	r3, r1
 800b3fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3fe:	2300      	movs	r3, #0
 800b400:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b402:	2300      	movs	r3, #0
 800b404:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b40c:	78fa      	ldrb	r2, [r7, #3]
 800b40e:	4611      	mov	r1, r2
 800b410:	4618      	mov	r0, r3
 800b412:	f7f7 ffed 	bl	80033f0 <HAL_PCD_EP_Close>
 800b416:	4603      	mov	r3, r0
 800b418:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b41a:	7bfb      	ldrb	r3, [r7, #15]
 800b41c:	4618      	mov	r0, r3
 800b41e:	f000 f8fd 	bl	800b61c <USBD_Get_USB_Status>
 800b422:	4603      	mov	r3, r0
 800b424:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b426:	7bbb      	ldrb	r3, [r7, #14]
}
 800b428:	4618      	mov	r0, r3
 800b42a:	3710      	adds	r7, #16
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}

0800b430 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b084      	sub	sp, #16
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
 800b438:	460b      	mov	r3, r1
 800b43a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b43c:	2300      	movs	r3, #0
 800b43e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b440:	2300      	movs	r3, #0
 800b442:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b44a:	78fa      	ldrb	r2, [r7, #3]
 800b44c:	4611      	mov	r1, r2
 800b44e:	4618      	mov	r0, r3
 800b450:	f7f8 f8a7 	bl	80035a2 <HAL_PCD_EP_SetStall>
 800b454:	4603      	mov	r3, r0
 800b456:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b458:	7bfb      	ldrb	r3, [r7, #15]
 800b45a:	4618      	mov	r0, r3
 800b45c:	f000 f8de 	bl	800b61c <USBD_Get_USB_Status>
 800b460:	4603      	mov	r3, r0
 800b462:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b464:	7bbb      	ldrb	r3, [r7, #14]
}
 800b466:	4618      	mov	r0, r3
 800b468:	3710      	adds	r7, #16
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}

0800b46e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b46e:	b580      	push	{r7, lr}
 800b470:	b084      	sub	sp, #16
 800b472:	af00      	add	r7, sp, #0
 800b474:	6078      	str	r0, [r7, #4]
 800b476:	460b      	mov	r3, r1
 800b478:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b47a:	2300      	movs	r3, #0
 800b47c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b47e:	2300      	movs	r3, #0
 800b480:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b488:	78fa      	ldrb	r2, [r7, #3]
 800b48a:	4611      	mov	r1, r2
 800b48c:	4618      	mov	r0, r3
 800b48e:	f7f8 f8ec 	bl	800366a <HAL_PCD_EP_ClrStall>
 800b492:	4603      	mov	r3, r0
 800b494:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b496:	7bfb      	ldrb	r3, [r7, #15]
 800b498:	4618      	mov	r0, r3
 800b49a:	f000 f8bf 	bl	800b61c <USBD_Get_USB_Status>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3710      	adds	r7, #16
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}

0800b4ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b085      	sub	sp, #20
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
 800b4b4:	460b      	mov	r3, r1
 800b4b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b4be:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b4c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	da0b      	bge.n	800b4e0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b4c8:	78fb      	ldrb	r3, [r7, #3]
 800b4ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b4ce:	68f9      	ldr	r1, [r7, #12]
 800b4d0:	4613      	mov	r3, r2
 800b4d2:	00db      	lsls	r3, r3, #3
 800b4d4:	4413      	add	r3, r2
 800b4d6:	009b      	lsls	r3, r3, #2
 800b4d8:	440b      	add	r3, r1
 800b4da:	333e      	adds	r3, #62	; 0x3e
 800b4dc:	781b      	ldrb	r3, [r3, #0]
 800b4de:	e00b      	b.n	800b4f8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b4e0:	78fb      	ldrb	r3, [r7, #3]
 800b4e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b4e6:	68f9      	ldr	r1, [r7, #12]
 800b4e8:	4613      	mov	r3, r2
 800b4ea:	00db      	lsls	r3, r3, #3
 800b4ec:	4413      	add	r3, r2
 800b4ee:	009b      	lsls	r3, r3, #2
 800b4f0:	440b      	add	r3, r1
 800b4f2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800b4f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	3714      	adds	r7, #20
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b502:	4770      	bx	lr

0800b504 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b084      	sub	sp, #16
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
 800b50c:	460b      	mov	r3, r1
 800b50e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b510:	2300      	movs	r3, #0
 800b512:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b514:	2300      	movs	r3, #0
 800b516:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b51e:	78fa      	ldrb	r2, [r7, #3]
 800b520:	4611      	mov	r1, r2
 800b522:	4618      	mov	r0, r3
 800b524:	f7f7 fed7 	bl	80032d6 <HAL_PCD_SetAddress>
 800b528:	4603      	mov	r3, r0
 800b52a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b52c:	7bfb      	ldrb	r3, [r7, #15]
 800b52e:	4618      	mov	r0, r3
 800b530:	f000 f874 	bl	800b61c <USBD_Get_USB_Status>
 800b534:	4603      	mov	r3, r0
 800b536:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b538:	7bbb      	ldrb	r3, [r7, #14]
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3710      	adds	r7, #16
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}

0800b542 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b542:	b580      	push	{r7, lr}
 800b544:	b086      	sub	sp, #24
 800b546:	af00      	add	r7, sp, #0
 800b548:	60f8      	str	r0, [r7, #12]
 800b54a:	607a      	str	r2, [r7, #4]
 800b54c:	603b      	str	r3, [r7, #0]
 800b54e:	460b      	mov	r3, r1
 800b550:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b552:	2300      	movs	r3, #0
 800b554:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b556:	2300      	movs	r3, #0
 800b558:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b560:	7af9      	ldrb	r1, [r7, #11]
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	687a      	ldr	r2, [r7, #4]
 800b566:	f7f7 ffe1 	bl	800352c <HAL_PCD_EP_Transmit>
 800b56a:	4603      	mov	r3, r0
 800b56c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b56e:	7dfb      	ldrb	r3, [r7, #23]
 800b570:	4618      	mov	r0, r3
 800b572:	f000 f853 	bl	800b61c <USBD_Get_USB_Status>
 800b576:	4603      	mov	r3, r0
 800b578:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b57a:	7dbb      	ldrb	r3, [r7, #22]
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3718      	adds	r7, #24
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}

0800b584 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b086      	sub	sp, #24
 800b588:	af00      	add	r7, sp, #0
 800b58a:	60f8      	str	r0, [r7, #12]
 800b58c:	607a      	str	r2, [r7, #4]
 800b58e:	603b      	str	r3, [r7, #0]
 800b590:	460b      	mov	r3, r1
 800b592:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b594:	2300      	movs	r3, #0
 800b596:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b598:	2300      	movs	r3, #0
 800b59a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b5a2:	7af9      	ldrb	r1, [r7, #11]
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	687a      	ldr	r2, [r7, #4]
 800b5a8:	f7f7 ff6c 	bl	8003484 <HAL_PCD_EP_Receive>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5b0:	7dfb      	ldrb	r3, [r7, #23]
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f000 f832 	bl	800b61c <USBD_Get_USB_Status>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b5bc:	7dbb      	ldrb	r3, [r7, #22]
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	3718      	adds	r7, #24
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}

0800b5c6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b5c6:	b580      	push	{r7, lr}
 800b5c8:	b082      	sub	sp, #8
 800b5ca:	af00      	add	r7, sp, #0
 800b5cc:	6078      	str	r0, [r7, #4]
 800b5ce:	460b      	mov	r3, r1
 800b5d0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b5d8:	78fa      	ldrb	r2, [r7, #3]
 800b5da:	4611      	mov	r1, r2
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f7f7 ff8d 	bl	80034fc <HAL_PCD_EP_GetRxCount>
 800b5e2:	4603      	mov	r3, r0
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	3708      	adds	r7, #8
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}

0800b5ec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b083      	sub	sp, #12
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b5f4:	4b03      	ldr	r3, [pc, #12]	; (800b604 <USBD_static_malloc+0x18>)
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	370c      	adds	r7, #12
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b600:	4770      	bx	lr
 800b602:	bf00      	nop
 800b604:	24001eb8 	.word	0x24001eb8

0800b608 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b608:	b480      	push	{r7}
 800b60a:	b083      	sub	sp, #12
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800b610:	bf00      	nop
 800b612:	370c      	adds	r7, #12
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr

0800b61c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b61c:	b480      	push	{r7}
 800b61e:	b085      	sub	sp, #20
 800b620:	af00      	add	r7, sp, #0
 800b622:	4603      	mov	r3, r0
 800b624:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b626:	2300      	movs	r3, #0
 800b628:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b62a:	79fb      	ldrb	r3, [r7, #7]
 800b62c:	2b03      	cmp	r3, #3
 800b62e:	d817      	bhi.n	800b660 <USBD_Get_USB_Status+0x44>
 800b630:	a201      	add	r2, pc, #4	; (adr r2, 800b638 <USBD_Get_USB_Status+0x1c>)
 800b632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b636:	bf00      	nop
 800b638:	0800b649 	.word	0x0800b649
 800b63c:	0800b64f 	.word	0x0800b64f
 800b640:	0800b655 	.word	0x0800b655
 800b644:	0800b65b 	.word	0x0800b65b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b648:	2300      	movs	r3, #0
 800b64a:	73fb      	strb	r3, [r7, #15]
    break;
 800b64c:	e00b      	b.n	800b666 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b64e:	2303      	movs	r3, #3
 800b650:	73fb      	strb	r3, [r7, #15]
    break;
 800b652:	e008      	b.n	800b666 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b654:	2301      	movs	r3, #1
 800b656:	73fb      	strb	r3, [r7, #15]
    break;
 800b658:	e005      	b.n	800b666 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b65a:	2303      	movs	r3, #3
 800b65c:	73fb      	strb	r3, [r7, #15]
    break;
 800b65e:	e002      	b.n	800b666 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b660:	2303      	movs	r3, #3
 800b662:	73fb      	strb	r3, [r7, #15]
    break;
 800b664:	bf00      	nop
  }
  return usb_status;
 800b666:	7bfb      	ldrb	r3, [r7, #15]
}
 800b668:	4618      	mov	r0, r3
 800b66a:	3714      	adds	r7, #20
 800b66c:	46bd      	mov	sp, r7
 800b66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b672:	4770      	bx	lr

0800b674 <malloc>:
 800b674:	4b02      	ldr	r3, [pc, #8]	; (800b680 <malloc+0xc>)
 800b676:	4601      	mov	r1, r0
 800b678:	6818      	ldr	r0, [r3, #0]
 800b67a:	f000 b82b 	b.w	800b6d4 <_malloc_r>
 800b67e:	bf00      	nop
 800b680:	2400015c 	.word	0x2400015c

0800b684 <free>:
 800b684:	4b02      	ldr	r3, [pc, #8]	; (800b690 <free+0xc>)
 800b686:	4601      	mov	r1, r0
 800b688:	6818      	ldr	r0, [r3, #0]
 800b68a:	f001 bc95 	b.w	800cfb8 <_free_r>
 800b68e:	bf00      	nop
 800b690:	2400015c 	.word	0x2400015c

0800b694 <sbrk_aligned>:
 800b694:	b570      	push	{r4, r5, r6, lr}
 800b696:	4e0e      	ldr	r6, [pc, #56]	; (800b6d0 <sbrk_aligned+0x3c>)
 800b698:	460c      	mov	r4, r1
 800b69a:	6831      	ldr	r1, [r6, #0]
 800b69c:	4605      	mov	r5, r0
 800b69e:	b911      	cbnz	r1, 800b6a6 <sbrk_aligned+0x12>
 800b6a0:	f000 fe46 	bl	800c330 <_sbrk_r>
 800b6a4:	6030      	str	r0, [r6, #0]
 800b6a6:	4621      	mov	r1, r4
 800b6a8:	4628      	mov	r0, r5
 800b6aa:	f000 fe41 	bl	800c330 <_sbrk_r>
 800b6ae:	1c43      	adds	r3, r0, #1
 800b6b0:	d00a      	beq.n	800b6c8 <sbrk_aligned+0x34>
 800b6b2:	1cc4      	adds	r4, r0, #3
 800b6b4:	f024 0403 	bic.w	r4, r4, #3
 800b6b8:	42a0      	cmp	r0, r4
 800b6ba:	d007      	beq.n	800b6cc <sbrk_aligned+0x38>
 800b6bc:	1a21      	subs	r1, r4, r0
 800b6be:	4628      	mov	r0, r5
 800b6c0:	f000 fe36 	bl	800c330 <_sbrk_r>
 800b6c4:	3001      	adds	r0, #1
 800b6c6:	d101      	bne.n	800b6cc <sbrk_aligned+0x38>
 800b6c8:	f04f 34ff 	mov.w	r4, #4294967295
 800b6cc:	4620      	mov	r0, r4
 800b6ce:	bd70      	pop	{r4, r5, r6, pc}
 800b6d0:	240020dc 	.word	0x240020dc

0800b6d4 <_malloc_r>:
 800b6d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6d8:	1ccd      	adds	r5, r1, #3
 800b6da:	f025 0503 	bic.w	r5, r5, #3
 800b6de:	3508      	adds	r5, #8
 800b6e0:	2d0c      	cmp	r5, #12
 800b6e2:	bf38      	it	cc
 800b6e4:	250c      	movcc	r5, #12
 800b6e6:	2d00      	cmp	r5, #0
 800b6e8:	4607      	mov	r7, r0
 800b6ea:	db01      	blt.n	800b6f0 <_malloc_r+0x1c>
 800b6ec:	42a9      	cmp	r1, r5
 800b6ee:	d905      	bls.n	800b6fc <_malloc_r+0x28>
 800b6f0:	230c      	movs	r3, #12
 800b6f2:	603b      	str	r3, [r7, #0]
 800b6f4:	2600      	movs	r6, #0
 800b6f6:	4630      	mov	r0, r6
 800b6f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b7d0 <_malloc_r+0xfc>
 800b700:	f000 f868 	bl	800b7d4 <__malloc_lock>
 800b704:	f8d8 3000 	ldr.w	r3, [r8]
 800b708:	461c      	mov	r4, r3
 800b70a:	bb5c      	cbnz	r4, 800b764 <_malloc_r+0x90>
 800b70c:	4629      	mov	r1, r5
 800b70e:	4638      	mov	r0, r7
 800b710:	f7ff ffc0 	bl	800b694 <sbrk_aligned>
 800b714:	1c43      	adds	r3, r0, #1
 800b716:	4604      	mov	r4, r0
 800b718:	d155      	bne.n	800b7c6 <_malloc_r+0xf2>
 800b71a:	f8d8 4000 	ldr.w	r4, [r8]
 800b71e:	4626      	mov	r6, r4
 800b720:	2e00      	cmp	r6, #0
 800b722:	d145      	bne.n	800b7b0 <_malloc_r+0xdc>
 800b724:	2c00      	cmp	r4, #0
 800b726:	d048      	beq.n	800b7ba <_malloc_r+0xe6>
 800b728:	6823      	ldr	r3, [r4, #0]
 800b72a:	4631      	mov	r1, r6
 800b72c:	4638      	mov	r0, r7
 800b72e:	eb04 0903 	add.w	r9, r4, r3
 800b732:	f000 fdfd 	bl	800c330 <_sbrk_r>
 800b736:	4581      	cmp	r9, r0
 800b738:	d13f      	bne.n	800b7ba <_malloc_r+0xe6>
 800b73a:	6821      	ldr	r1, [r4, #0]
 800b73c:	1a6d      	subs	r5, r5, r1
 800b73e:	4629      	mov	r1, r5
 800b740:	4638      	mov	r0, r7
 800b742:	f7ff ffa7 	bl	800b694 <sbrk_aligned>
 800b746:	3001      	adds	r0, #1
 800b748:	d037      	beq.n	800b7ba <_malloc_r+0xe6>
 800b74a:	6823      	ldr	r3, [r4, #0]
 800b74c:	442b      	add	r3, r5
 800b74e:	6023      	str	r3, [r4, #0]
 800b750:	f8d8 3000 	ldr.w	r3, [r8]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d038      	beq.n	800b7ca <_malloc_r+0xf6>
 800b758:	685a      	ldr	r2, [r3, #4]
 800b75a:	42a2      	cmp	r2, r4
 800b75c:	d12b      	bne.n	800b7b6 <_malloc_r+0xe2>
 800b75e:	2200      	movs	r2, #0
 800b760:	605a      	str	r2, [r3, #4]
 800b762:	e00f      	b.n	800b784 <_malloc_r+0xb0>
 800b764:	6822      	ldr	r2, [r4, #0]
 800b766:	1b52      	subs	r2, r2, r5
 800b768:	d41f      	bmi.n	800b7aa <_malloc_r+0xd6>
 800b76a:	2a0b      	cmp	r2, #11
 800b76c:	d917      	bls.n	800b79e <_malloc_r+0xca>
 800b76e:	1961      	adds	r1, r4, r5
 800b770:	42a3      	cmp	r3, r4
 800b772:	6025      	str	r5, [r4, #0]
 800b774:	bf18      	it	ne
 800b776:	6059      	strne	r1, [r3, #4]
 800b778:	6863      	ldr	r3, [r4, #4]
 800b77a:	bf08      	it	eq
 800b77c:	f8c8 1000 	streq.w	r1, [r8]
 800b780:	5162      	str	r2, [r4, r5]
 800b782:	604b      	str	r3, [r1, #4]
 800b784:	4638      	mov	r0, r7
 800b786:	f104 060b 	add.w	r6, r4, #11
 800b78a:	f000 f829 	bl	800b7e0 <__malloc_unlock>
 800b78e:	f026 0607 	bic.w	r6, r6, #7
 800b792:	1d23      	adds	r3, r4, #4
 800b794:	1af2      	subs	r2, r6, r3
 800b796:	d0ae      	beq.n	800b6f6 <_malloc_r+0x22>
 800b798:	1b9b      	subs	r3, r3, r6
 800b79a:	50a3      	str	r3, [r4, r2]
 800b79c:	e7ab      	b.n	800b6f6 <_malloc_r+0x22>
 800b79e:	42a3      	cmp	r3, r4
 800b7a0:	6862      	ldr	r2, [r4, #4]
 800b7a2:	d1dd      	bne.n	800b760 <_malloc_r+0x8c>
 800b7a4:	f8c8 2000 	str.w	r2, [r8]
 800b7a8:	e7ec      	b.n	800b784 <_malloc_r+0xb0>
 800b7aa:	4623      	mov	r3, r4
 800b7ac:	6864      	ldr	r4, [r4, #4]
 800b7ae:	e7ac      	b.n	800b70a <_malloc_r+0x36>
 800b7b0:	4634      	mov	r4, r6
 800b7b2:	6876      	ldr	r6, [r6, #4]
 800b7b4:	e7b4      	b.n	800b720 <_malloc_r+0x4c>
 800b7b6:	4613      	mov	r3, r2
 800b7b8:	e7cc      	b.n	800b754 <_malloc_r+0x80>
 800b7ba:	230c      	movs	r3, #12
 800b7bc:	603b      	str	r3, [r7, #0]
 800b7be:	4638      	mov	r0, r7
 800b7c0:	f000 f80e 	bl	800b7e0 <__malloc_unlock>
 800b7c4:	e797      	b.n	800b6f6 <_malloc_r+0x22>
 800b7c6:	6025      	str	r5, [r4, #0]
 800b7c8:	e7dc      	b.n	800b784 <_malloc_r+0xb0>
 800b7ca:	605b      	str	r3, [r3, #4]
 800b7cc:	deff      	udf	#255	; 0xff
 800b7ce:	bf00      	nop
 800b7d0:	240020d8 	.word	0x240020d8

0800b7d4 <__malloc_lock>:
 800b7d4:	4801      	ldr	r0, [pc, #4]	; (800b7dc <__malloc_lock+0x8>)
 800b7d6:	f000 bdf8 	b.w	800c3ca <__retarget_lock_acquire_recursive>
 800b7da:	bf00      	nop
 800b7dc:	24002220 	.word	0x24002220

0800b7e0 <__malloc_unlock>:
 800b7e0:	4801      	ldr	r0, [pc, #4]	; (800b7e8 <__malloc_unlock+0x8>)
 800b7e2:	f000 bdf3 	b.w	800c3cc <__retarget_lock_release_recursive>
 800b7e6:	bf00      	nop
 800b7e8:	24002220 	.word	0x24002220

0800b7ec <__cvt>:
 800b7ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7ee:	ed2d 8b02 	vpush	{d8}
 800b7f2:	eeb0 8b40 	vmov.f64	d8, d0
 800b7f6:	b085      	sub	sp, #20
 800b7f8:	4617      	mov	r7, r2
 800b7fa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b7fc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b7fe:	ee18 2a90 	vmov	r2, s17
 800b802:	f025 0520 	bic.w	r5, r5, #32
 800b806:	2a00      	cmp	r2, #0
 800b808:	bfb6      	itet	lt
 800b80a:	222d      	movlt	r2, #45	; 0x2d
 800b80c:	2200      	movge	r2, #0
 800b80e:	eeb1 8b40 	vneglt.f64	d8, d0
 800b812:	2d46      	cmp	r5, #70	; 0x46
 800b814:	460c      	mov	r4, r1
 800b816:	701a      	strb	r2, [r3, #0]
 800b818:	d004      	beq.n	800b824 <__cvt+0x38>
 800b81a:	2d45      	cmp	r5, #69	; 0x45
 800b81c:	d100      	bne.n	800b820 <__cvt+0x34>
 800b81e:	3401      	adds	r4, #1
 800b820:	2102      	movs	r1, #2
 800b822:	e000      	b.n	800b826 <__cvt+0x3a>
 800b824:	2103      	movs	r1, #3
 800b826:	ab03      	add	r3, sp, #12
 800b828:	9301      	str	r3, [sp, #4]
 800b82a:	ab02      	add	r3, sp, #8
 800b82c:	9300      	str	r3, [sp, #0]
 800b82e:	4622      	mov	r2, r4
 800b830:	4633      	mov	r3, r6
 800b832:	eeb0 0b48 	vmov.f64	d0, d8
 800b836:	f000 fe53 	bl	800c4e0 <_dtoa_r>
 800b83a:	2d47      	cmp	r5, #71	; 0x47
 800b83c:	d101      	bne.n	800b842 <__cvt+0x56>
 800b83e:	07fb      	lsls	r3, r7, #31
 800b840:	d51a      	bpl.n	800b878 <__cvt+0x8c>
 800b842:	2d46      	cmp	r5, #70	; 0x46
 800b844:	eb00 0204 	add.w	r2, r0, r4
 800b848:	d10c      	bne.n	800b864 <__cvt+0x78>
 800b84a:	7803      	ldrb	r3, [r0, #0]
 800b84c:	2b30      	cmp	r3, #48	; 0x30
 800b84e:	d107      	bne.n	800b860 <__cvt+0x74>
 800b850:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b858:	bf1c      	itt	ne
 800b85a:	f1c4 0401 	rsbne	r4, r4, #1
 800b85e:	6034      	strne	r4, [r6, #0]
 800b860:	6833      	ldr	r3, [r6, #0]
 800b862:	441a      	add	r2, r3
 800b864:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b86c:	bf08      	it	eq
 800b86e:	9203      	streq	r2, [sp, #12]
 800b870:	2130      	movs	r1, #48	; 0x30
 800b872:	9b03      	ldr	r3, [sp, #12]
 800b874:	4293      	cmp	r3, r2
 800b876:	d307      	bcc.n	800b888 <__cvt+0x9c>
 800b878:	9b03      	ldr	r3, [sp, #12]
 800b87a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b87c:	1a1b      	subs	r3, r3, r0
 800b87e:	6013      	str	r3, [r2, #0]
 800b880:	b005      	add	sp, #20
 800b882:	ecbd 8b02 	vpop	{d8}
 800b886:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b888:	1c5c      	adds	r4, r3, #1
 800b88a:	9403      	str	r4, [sp, #12]
 800b88c:	7019      	strb	r1, [r3, #0]
 800b88e:	e7f0      	b.n	800b872 <__cvt+0x86>

0800b890 <__exponent>:
 800b890:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b892:	4603      	mov	r3, r0
 800b894:	2900      	cmp	r1, #0
 800b896:	bfb8      	it	lt
 800b898:	4249      	neglt	r1, r1
 800b89a:	f803 2b02 	strb.w	r2, [r3], #2
 800b89e:	bfb4      	ite	lt
 800b8a0:	222d      	movlt	r2, #45	; 0x2d
 800b8a2:	222b      	movge	r2, #43	; 0x2b
 800b8a4:	2909      	cmp	r1, #9
 800b8a6:	7042      	strb	r2, [r0, #1]
 800b8a8:	dd2a      	ble.n	800b900 <__exponent+0x70>
 800b8aa:	f10d 0207 	add.w	r2, sp, #7
 800b8ae:	4617      	mov	r7, r2
 800b8b0:	260a      	movs	r6, #10
 800b8b2:	4694      	mov	ip, r2
 800b8b4:	fb91 f5f6 	sdiv	r5, r1, r6
 800b8b8:	fb06 1415 	mls	r4, r6, r5, r1
 800b8bc:	3430      	adds	r4, #48	; 0x30
 800b8be:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b8c2:	460c      	mov	r4, r1
 800b8c4:	2c63      	cmp	r4, #99	; 0x63
 800b8c6:	f102 32ff 	add.w	r2, r2, #4294967295
 800b8ca:	4629      	mov	r1, r5
 800b8cc:	dcf1      	bgt.n	800b8b2 <__exponent+0x22>
 800b8ce:	3130      	adds	r1, #48	; 0x30
 800b8d0:	f1ac 0402 	sub.w	r4, ip, #2
 800b8d4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b8d8:	1c41      	adds	r1, r0, #1
 800b8da:	4622      	mov	r2, r4
 800b8dc:	42ba      	cmp	r2, r7
 800b8de:	d30a      	bcc.n	800b8f6 <__exponent+0x66>
 800b8e0:	f10d 0209 	add.w	r2, sp, #9
 800b8e4:	eba2 020c 	sub.w	r2, r2, ip
 800b8e8:	42bc      	cmp	r4, r7
 800b8ea:	bf88      	it	hi
 800b8ec:	2200      	movhi	r2, #0
 800b8ee:	4413      	add	r3, r2
 800b8f0:	1a18      	subs	r0, r3, r0
 800b8f2:	b003      	add	sp, #12
 800b8f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8f6:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b8fa:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b8fe:	e7ed      	b.n	800b8dc <__exponent+0x4c>
 800b900:	2330      	movs	r3, #48	; 0x30
 800b902:	3130      	adds	r1, #48	; 0x30
 800b904:	7083      	strb	r3, [r0, #2]
 800b906:	70c1      	strb	r1, [r0, #3]
 800b908:	1d03      	adds	r3, r0, #4
 800b90a:	e7f1      	b.n	800b8f0 <__exponent+0x60>
 800b90c:	0000      	movs	r0, r0
	...

0800b910 <_printf_float>:
 800b910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b914:	b08b      	sub	sp, #44	; 0x2c
 800b916:	460c      	mov	r4, r1
 800b918:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800b91c:	4616      	mov	r6, r2
 800b91e:	461f      	mov	r7, r3
 800b920:	4605      	mov	r5, r0
 800b922:	f000 fccd 	bl	800c2c0 <_localeconv_r>
 800b926:	f8d0 b000 	ldr.w	fp, [r0]
 800b92a:	4658      	mov	r0, fp
 800b92c:	f7f4 fd28 	bl	8000380 <strlen>
 800b930:	2300      	movs	r3, #0
 800b932:	9308      	str	r3, [sp, #32]
 800b934:	f8d8 3000 	ldr.w	r3, [r8]
 800b938:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b93c:	6822      	ldr	r2, [r4, #0]
 800b93e:	3307      	adds	r3, #7
 800b940:	f023 0307 	bic.w	r3, r3, #7
 800b944:	f103 0108 	add.w	r1, r3, #8
 800b948:	f8c8 1000 	str.w	r1, [r8]
 800b94c:	ed93 0b00 	vldr	d0, [r3]
 800b950:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800bbb0 <_printf_float+0x2a0>
 800b954:	eeb0 7bc0 	vabs.f64	d7, d0
 800b958:	eeb4 7b46 	vcmp.f64	d7, d6
 800b95c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b960:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800b964:	4682      	mov	sl, r0
 800b966:	dd24      	ble.n	800b9b2 <_printf_float+0xa2>
 800b968:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b96c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b970:	d502      	bpl.n	800b978 <_printf_float+0x68>
 800b972:	232d      	movs	r3, #45	; 0x2d
 800b974:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b978:	498f      	ldr	r1, [pc, #572]	; (800bbb8 <_printf_float+0x2a8>)
 800b97a:	4b90      	ldr	r3, [pc, #576]	; (800bbbc <_printf_float+0x2ac>)
 800b97c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b980:	bf94      	ite	ls
 800b982:	4688      	movls	r8, r1
 800b984:	4698      	movhi	r8, r3
 800b986:	2303      	movs	r3, #3
 800b988:	6123      	str	r3, [r4, #16]
 800b98a:	f022 0204 	bic.w	r2, r2, #4
 800b98e:	2300      	movs	r3, #0
 800b990:	6022      	str	r2, [r4, #0]
 800b992:	9304      	str	r3, [sp, #16]
 800b994:	9700      	str	r7, [sp, #0]
 800b996:	4633      	mov	r3, r6
 800b998:	aa09      	add	r2, sp, #36	; 0x24
 800b99a:	4621      	mov	r1, r4
 800b99c:	4628      	mov	r0, r5
 800b99e:	f000 f9d1 	bl	800bd44 <_printf_common>
 800b9a2:	3001      	adds	r0, #1
 800b9a4:	f040 808a 	bne.w	800babc <_printf_float+0x1ac>
 800b9a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b9ac:	b00b      	add	sp, #44	; 0x2c
 800b9ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9b2:	eeb4 0b40 	vcmp.f64	d0, d0
 800b9b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9ba:	d709      	bvc.n	800b9d0 <_printf_float+0xc0>
 800b9bc:	ee10 3a90 	vmov	r3, s1
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	bfbc      	itt	lt
 800b9c4:	232d      	movlt	r3, #45	; 0x2d
 800b9c6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b9ca:	497d      	ldr	r1, [pc, #500]	; (800bbc0 <_printf_float+0x2b0>)
 800b9cc:	4b7d      	ldr	r3, [pc, #500]	; (800bbc4 <_printf_float+0x2b4>)
 800b9ce:	e7d5      	b.n	800b97c <_printf_float+0x6c>
 800b9d0:	6863      	ldr	r3, [r4, #4]
 800b9d2:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800b9d6:	9104      	str	r1, [sp, #16]
 800b9d8:	1c59      	adds	r1, r3, #1
 800b9da:	d13c      	bne.n	800ba56 <_printf_float+0x146>
 800b9dc:	2306      	movs	r3, #6
 800b9de:	6063      	str	r3, [r4, #4]
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	9303      	str	r3, [sp, #12]
 800b9e4:	ab08      	add	r3, sp, #32
 800b9e6:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800b9ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b9ee:	ab07      	add	r3, sp, #28
 800b9f0:	6861      	ldr	r1, [r4, #4]
 800b9f2:	9300      	str	r3, [sp, #0]
 800b9f4:	6022      	str	r2, [r4, #0]
 800b9f6:	f10d 031b 	add.w	r3, sp, #27
 800b9fa:	4628      	mov	r0, r5
 800b9fc:	f7ff fef6 	bl	800b7ec <__cvt>
 800ba00:	9b04      	ldr	r3, [sp, #16]
 800ba02:	9907      	ldr	r1, [sp, #28]
 800ba04:	2b47      	cmp	r3, #71	; 0x47
 800ba06:	4680      	mov	r8, r0
 800ba08:	d108      	bne.n	800ba1c <_printf_float+0x10c>
 800ba0a:	1cc8      	adds	r0, r1, #3
 800ba0c:	db02      	blt.n	800ba14 <_printf_float+0x104>
 800ba0e:	6863      	ldr	r3, [r4, #4]
 800ba10:	4299      	cmp	r1, r3
 800ba12:	dd41      	ble.n	800ba98 <_printf_float+0x188>
 800ba14:	f1a9 0902 	sub.w	r9, r9, #2
 800ba18:	fa5f f989 	uxtb.w	r9, r9
 800ba1c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ba20:	d820      	bhi.n	800ba64 <_printf_float+0x154>
 800ba22:	3901      	subs	r1, #1
 800ba24:	464a      	mov	r2, r9
 800ba26:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ba2a:	9107      	str	r1, [sp, #28]
 800ba2c:	f7ff ff30 	bl	800b890 <__exponent>
 800ba30:	9a08      	ldr	r2, [sp, #32]
 800ba32:	9004      	str	r0, [sp, #16]
 800ba34:	1813      	adds	r3, r2, r0
 800ba36:	2a01      	cmp	r2, #1
 800ba38:	6123      	str	r3, [r4, #16]
 800ba3a:	dc02      	bgt.n	800ba42 <_printf_float+0x132>
 800ba3c:	6822      	ldr	r2, [r4, #0]
 800ba3e:	07d2      	lsls	r2, r2, #31
 800ba40:	d501      	bpl.n	800ba46 <_printf_float+0x136>
 800ba42:	3301      	adds	r3, #1
 800ba44:	6123      	str	r3, [r4, #16]
 800ba46:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d0a2      	beq.n	800b994 <_printf_float+0x84>
 800ba4e:	232d      	movs	r3, #45	; 0x2d
 800ba50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba54:	e79e      	b.n	800b994 <_printf_float+0x84>
 800ba56:	9904      	ldr	r1, [sp, #16]
 800ba58:	2947      	cmp	r1, #71	; 0x47
 800ba5a:	d1c1      	bne.n	800b9e0 <_printf_float+0xd0>
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d1bf      	bne.n	800b9e0 <_printf_float+0xd0>
 800ba60:	2301      	movs	r3, #1
 800ba62:	e7bc      	b.n	800b9de <_printf_float+0xce>
 800ba64:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800ba68:	d118      	bne.n	800ba9c <_printf_float+0x18c>
 800ba6a:	2900      	cmp	r1, #0
 800ba6c:	6863      	ldr	r3, [r4, #4]
 800ba6e:	dd0b      	ble.n	800ba88 <_printf_float+0x178>
 800ba70:	6121      	str	r1, [r4, #16]
 800ba72:	b913      	cbnz	r3, 800ba7a <_printf_float+0x16a>
 800ba74:	6822      	ldr	r2, [r4, #0]
 800ba76:	07d0      	lsls	r0, r2, #31
 800ba78:	d502      	bpl.n	800ba80 <_printf_float+0x170>
 800ba7a:	3301      	adds	r3, #1
 800ba7c:	440b      	add	r3, r1
 800ba7e:	6123      	str	r3, [r4, #16]
 800ba80:	2300      	movs	r3, #0
 800ba82:	65a1      	str	r1, [r4, #88]	; 0x58
 800ba84:	9304      	str	r3, [sp, #16]
 800ba86:	e7de      	b.n	800ba46 <_printf_float+0x136>
 800ba88:	b913      	cbnz	r3, 800ba90 <_printf_float+0x180>
 800ba8a:	6822      	ldr	r2, [r4, #0]
 800ba8c:	07d2      	lsls	r2, r2, #31
 800ba8e:	d501      	bpl.n	800ba94 <_printf_float+0x184>
 800ba90:	3302      	adds	r3, #2
 800ba92:	e7f4      	b.n	800ba7e <_printf_float+0x16e>
 800ba94:	2301      	movs	r3, #1
 800ba96:	e7f2      	b.n	800ba7e <_printf_float+0x16e>
 800ba98:	f04f 0967 	mov.w	r9, #103	; 0x67
 800ba9c:	9b08      	ldr	r3, [sp, #32]
 800ba9e:	4299      	cmp	r1, r3
 800baa0:	db05      	blt.n	800baae <_printf_float+0x19e>
 800baa2:	6823      	ldr	r3, [r4, #0]
 800baa4:	6121      	str	r1, [r4, #16]
 800baa6:	07d8      	lsls	r0, r3, #31
 800baa8:	d5ea      	bpl.n	800ba80 <_printf_float+0x170>
 800baaa:	1c4b      	adds	r3, r1, #1
 800baac:	e7e7      	b.n	800ba7e <_printf_float+0x16e>
 800baae:	2900      	cmp	r1, #0
 800bab0:	bfd4      	ite	le
 800bab2:	f1c1 0202 	rsble	r2, r1, #2
 800bab6:	2201      	movgt	r2, #1
 800bab8:	4413      	add	r3, r2
 800baba:	e7e0      	b.n	800ba7e <_printf_float+0x16e>
 800babc:	6823      	ldr	r3, [r4, #0]
 800babe:	055a      	lsls	r2, r3, #21
 800bac0:	d407      	bmi.n	800bad2 <_printf_float+0x1c2>
 800bac2:	6923      	ldr	r3, [r4, #16]
 800bac4:	4642      	mov	r2, r8
 800bac6:	4631      	mov	r1, r6
 800bac8:	4628      	mov	r0, r5
 800baca:	47b8      	blx	r7
 800bacc:	3001      	adds	r0, #1
 800bace:	d12a      	bne.n	800bb26 <_printf_float+0x216>
 800bad0:	e76a      	b.n	800b9a8 <_printf_float+0x98>
 800bad2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800bad6:	f240 80e0 	bls.w	800bc9a <_printf_float+0x38a>
 800bada:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800bade:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bae6:	d133      	bne.n	800bb50 <_printf_float+0x240>
 800bae8:	4a37      	ldr	r2, [pc, #220]	; (800bbc8 <_printf_float+0x2b8>)
 800baea:	2301      	movs	r3, #1
 800baec:	4631      	mov	r1, r6
 800baee:	4628      	mov	r0, r5
 800baf0:	47b8      	blx	r7
 800baf2:	3001      	adds	r0, #1
 800baf4:	f43f af58 	beq.w	800b9a8 <_printf_float+0x98>
 800baf8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800bafc:	429a      	cmp	r2, r3
 800bafe:	db02      	blt.n	800bb06 <_printf_float+0x1f6>
 800bb00:	6823      	ldr	r3, [r4, #0]
 800bb02:	07d8      	lsls	r0, r3, #31
 800bb04:	d50f      	bpl.n	800bb26 <_printf_float+0x216>
 800bb06:	4653      	mov	r3, sl
 800bb08:	465a      	mov	r2, fp
 800bb0a:	4631      	mov	r1, r6
 800bb0c:	4628      	mov	r0, r5
 800bb0e:	47b8      	blx	r7
 800bb10:	3001      	adds	r0, #1
 800bb12:	f43f af49 	beq.w	800b9a8 <_printf_float+0x98>
 800bb16:	f04f 0800 	mov.w	r8, #0
 800bb1a:	f104 091a 	add.w	r9, r4, #26
 800bb1e:	9b08      	ldr	r3, [sp, #32]
 800bb20:	3b01      	subs	r3, #1
 800bb22:	4543      	cmp	r3, r8
 800bb24:	dc09      	bgt.n	800bb3a <_printf_float+0x22a>
 800bb26:	6823      	ldr	r3, [r4, #0]
 800bb28:	079b      	lsls	r3, r3, #30
 800bb2a:	f100 8106 	bmi.w	800bd3a <_printf_float+0x42a>
 800bb2e:	68e0      	ldr	r0, [r4, #12]
 800bb30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb32:	4298      	cmp	r0, r3
 800bb34:	bfb8      	it	lt
 800bb36:	4618      	movlt	r0, r3
 800bb38:	e738      	b.n	800b9ac <_printf_float+0x9c>
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	464a      	mov	r2, r9
 800bb3e:	4631      	mov	r1, r6
 800bb40:	4628      	mov	r0, r5
 800bb42:	47b8      	blx	r7
 800bb44:	3001      	adds	r0, #1
 800bb46:	f43f af2f 	beq.w	800b9a8 <_printf_float+0x98>
 800bb4a:	f108 0801 	add.w	r8, r8, #1
 800bb4e:	e7e6      	b.n	800bb1e <_printf_float+0x20e>
 800bb50:	9b07      	ldr	r3, [sp, #28]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	dc3a      	bgt.n	800bbcc <_printf_float+0x2bc>
 800bb56:	4a1c      	ldr	r2, [pc, #112]	; (800bbc8 <_printf_float+0x2b8>)
 800bb58:	2301      	movs	r3, #1
 800bb5a:	4631      	mov	r1, r6
 800bb5c:	4628      	mov	r0, r5
 800bb5e:	47b8      	blx	r7
 800bb60:	3001      	adds	r0, #1
 800bb62:	f43f af21 	beq.w	800b9a8 <_printf_float+0x98>
 800bb66:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800bb6a:	4313      	orrs	r3, r2
 800bb6c:	d102      	bne.n	800bb74 <_printf_float+0x264>
 800bb6e:	6823      	ldr	r3, [r4, #0]
 800bb70:	07d9      	lsls	r1, r3, #31
 800bb72:	d5d8      	bpl.n	800bb26 <_printf_float+0x216>
 800bb74:	4653      	mov	r3, sl
 800bb76:	465a      	mov	r2, fp
 800bb78:	4631      	mov	r1, r6
 800bb7a:	4628      	mov	r0, r5
 800bb7c:	47b8      	blx	r7
 800bb7e:	3001      	adds	r0, #1
 800bb80:	f43f af12 	beq.w	800b9a8 <_printf_float+0x98>
 800bb84:	f04f 0900 	mov.w	r9, #0
 800bb88:	f104 0a1a 	add.w	sl, r4, #26
 800bb8c:	9b07      	ldr	r3, [sp, #28]
 800bb8e:	425b      	negs	r3, r3
 800bb90:	454b      	cmp	r3, r9
 800bb92:	dc01      	bgt.n	800bb98 <_printf_float+0x288>
 800bb94:	9b08      	ldr	r3, [sp, #32]
 800bb96:	e795      	b.n	800bac4 <_printf_float+0x1b4>
 800bb98:	2301      	movs	r3, #1
 800bb9a:	4652      	mov	r2, sl
 800bb9c:	4631      	mov	r1, r6
 800bb9e:	4628      	mov	r0, r5
 800bba0:	47b8      	blx	r7
 800bba2:	3001      	adds	r0, #1
 800bba4:	f43f af00 	beq.w	800b9a8 <_printf_float+0x98>
 800bba8:	f109 0901 	add.w	r9, r9, #1
 800bbac:	e7ee      	b.n	800bb8c <_printf_float+0x27c>
 800bbae:	bf00      	nop
 800bbb0:	ffffffff 	.word	0xffffffff
 800bbb4:	7fefffff 	.word	0x7fefffff
 800bbb8:	0800e2c0 	.word	0x0800e2c0
 800bbbc:	0800e2c4 	.word	0x0800e2c4
 800bbc0:	0800e2c8 	.word	0x0800e2c8
 800bbc4:	0800e2cc 	.word	0x0800e2cc
 800bbc8:	0800e2d0 	.word	0x0800e2d0
 800bbcc:	9a08      	ldr	r2, [sp, #32]
 800bbce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bbd0:	429a      	cmp	r2, r3
 800bbd2:	bfa8      	it	ge
 800bbd4:	461a      	movge	r2, r3
 800bbd6:	2a00      	cmp	r2, #0
 800bbd8:	4691      	mov	r9, r2
 800bbda:	dc38      	bgt.n	800bc4e <_printf_float+0x33e>
 800bbdc:	2300      	movs	r3, #0
 800bbde:	9305      	str	r3, [sp, #20]
 800bbe0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bbe4:	f104 021a 	add.w	r2, r4, #26
 800bbe8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bbea:	9905      	ldr	r1, [sp, #20]
 800bbec:	9304      	str	r3, [sp, #16]
 800bbee:	eba3 0309 	sub.w	r3, r3, r9
 800bbf2:	428b      	cmp	r3, r1
 800bbf4:	dc33      	bgt.n	800bc5e <_printf_float+0x34e>
 800bbf6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	db3c      	blt.n	800bc78 <_printf_float+0x368>
 800bbfe:	6823      	ldr	r3, [r4, #0]
 800bc00:	07da      	lsls	r2, r3, #31
 800bc02:	d439      	bmi.n	800bc78 <_printf_float+0x368>
 800bc04:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800bc08:	eba2 0903 	sub.w	r9, r2, r3
 800bc0c:	9b04      	ldr	r3, [sp, #16]
 800bc0e:	1ad2      	subs	r2, r2, r3
 800bc10:	4591      	cmp	r9, r2
 800bc12:	bfa8      	it	ge
 800bc14:	4691      	movge	r9, r2
 800bc16:	f1b9 0f00 	cmp.w	r9, #0
 800bc1a:	dc35      	bgt.n	800bc88 <_printf_float+0x378>
 800bc1c:	f04f 0800 	mov.w	r8, #0
 800bc20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bc24:	f104 0a1a 	add.w	sl, r4, #26
 800bc28:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800bc2c:	1a9b      	subs	r3, r3, r2
 800bc2e:	eba3 0309 	sub.w	r3, r3, r9
 800bc32:	4543      	cmp	r3, r8
 800bc34:	f77f af77 	ble.w	800bb26 <_printf_float+0x216>
 800bc38:	2301      	movs	r3, #1
 800bc3a:	4652      	mov	r2, sl
 800bc3c:	4631      	mov	r1, r6
 800bc3e:	4628      	mov	r0, r5
 800bc40:	47b8      	blx	r7
 800bc42:	3001      	adds	r0, #1
 800bc44:	f43f aeb0 	beq.w	800b9a8 <_printf_float+0x98>
 800bc48:	f108 0801 	add.w	r8, r8, #1
 800bc4c:	e7ec      	b.n	800bc28 <_printf_float+0x318>
 800bc4e:	4613      	mov	r3, r2
 800bc50:	4631      	mov	r1, r6
 800bc52:	4642      	mov	r2, r8
 800bc54:	4628      	mov	r0, r5
 800bc56:	47b8      	blx	r7
 800bc58:	3001      	adds	r0, #1
 800bc5a:	d1bf      	bne.n	800bbdc <_printf_float+0x2cc>
 800bc5c:	e6a4      	b.n	800b9a8 <_printf_float+0x98>
 800bc5e:	2301      	movs	r3, #1
 800bc60:	4631      	mov	r1, r6
 800bc62:	4628      	mov	r0, r5
 800bc64:	9204      	str	r2, [sp, #16]
 800bc66:	47b8      	blx	r7
 800bc68:	3001      	adds	r0, #1
 800bc6a:	f43f ae9d 	beq.w	800b9a8 <_printf_float+0x98>
 800bc6e:	9b05      	ldr	r3, [sp, #20]
 800bc70:	9a04      	ldr	r2, [sp, #16]
 800bc72:	3301      	adds	r3, #1
 800bc74:	9305      	str	r3, [sp, #20]
 800bc76:	e7b7      	b.n	800bbe8 <_printf_float+0x2d8>
 800bc78:	4653      	mov	r3, sl
 800bc7a:	465a      	mov	r2, fp
 800bc7c:	4631      	mov	r1, r6
 800bc7e:	4628      	mov	r0, r5
 800bc80:	47b8      	blx	r7
 800bc82:	3001      	adds	r0, #1
 800bc84:	d1be      	bne.n	800bc04 <_printf_float+0x2f4>
 800bc86:	e68f      	b.n	800b9a8 <_printf_float+0x98>
 800bc88:	9a04      	ldr	r2, [sp, #16]
 800bc8a:	464b      	mov	r3, r9
 800bc8c:	4442      	add	r2, r8
 800bc8e:	4631      	mov	r1, r6
 800bc90:	4628      	mov	r0, r5
 800bc92:	47b8      	blx	r7
 800bc94:	3001      	adds	r0, #1
 800bc96:	d1c1      	bne.n	800bc1c <_printf_float+0x30c>
 800bc98:	e686      	b.n	800b9a8 <_printf_float+0x98>
 800bc9a:	9a08      	ldr	r2, [sp, #32]
 800bc9c:	2a01      	cmp	r2, #1
 800bc9e:	dc01      	bgt.n	800bca4 <_printf_float+0x394>
 800bca0:	07db      	lsls	r3, r3, #31
 800bca2:	d537      	bpl.n	800bd14 <_printf_float+0x404>
 800bca4:	2301      	movs	r3, #1
 800bca6:	4642      	mov	r2, r8
 800bca8:	4631      	mov	r1, r6
 800bcaa:	4628      	mov	r0, r5
 800bcac:	47b8      	blx	r7
 800bcae:	3001      	adds	r0, #1
 800bcb0:	f43f ae7a 	beq.w	800b9a8 <_printf_float+0x98>
 800bcb4:	4653      	mov	r3, sl
 800bcb6:	465a      	mov	r2, fp
 800bcb8:	4631      	mov	r1, r6
 800bcba:	4628      	mov	r0, r5
 800bcbc:	47b8      	blx	r7
 800bcbe:	3001      	adds	r0, #1
 800bcc0:	f43f ae72 	beq.w	800b9a8 <_printf_float+0x98>
 800bcc4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800bcc8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcd0:	9b08      	ldr	r3, [sp, #32]
 800bcd2:	d01a      	beq.n	800bd0a <_printf_float+0x3fa>
 800bcd4:	3b01      	subs	r3, #1
 800bcd6:	f108 0201 	add.w	r2, r8, #1
 800bcda:	4631      	mov	r1, r6
 800bcdc:	4628      	mov	r0, r5
 800bcde:	47b8      	blx	r7
 800bce0:	3001      	adds	r0, #1
 800bce2:	d10e      	bne.n	800bd02 <_printf_float+0x3f2>
 800bce4:	e660      	b.n	800b9a8 <_printf_float+0x98>
 800bce6:	2301      	movs	r3, #1
 800bce8:	464a      	mov	r2, r9
 800bcea:	4631      	mov	r1, r6
 800bcec:	4628      	mov	r0, r5
 800bcee:	47b8      	blx	r7
 800bcf0:	3001      	adds	r0, #1
 800bcf2:	f43f ae59 	beq.w	800b9a8 <_printf_float+0x98>
 800bcf6:	f108 0801 	add.w	r8, r8, #1
 800bcfa:	9b08      	ldr	r3, [sp, #32]
 800bcfc:	3b01      	subs	r3, #1
 800bcfe:	4543      	cmp	r3, r8
 800bd00:	dcf1      	bgt.n	800bce6 <_printf_float+0x3d6>
 800bd02:	9b04      	ldr	r3, [sp, #16]
 800bd04:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bd08:	e6dd      	b.n	800bac6 <_printf_float+0x1b6>
 800bd0a:	f04f 0800 	mov.w	r8, #0
 800bd0e:	f104 091a 	add.w	r9, r4, #26
 800bd12:	e7f2      	b.n	800bcfa <_printf_float+0x3ea>
 800bd14:	2301      	movs	r3, #1
 800bd16:	4642      	mov	r2, r8
 800bd18:	e7df      	b.n	800bcda <_printf_float+0x3ca>
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	464a      	mov	r2, r9
 800bd1e:	4631      	mov	r1, r6
 800bd20:	4628      	mov	r0, r5
 800bd22:	47b8      	blx	r7
 800bd24:	3001      	adds	r0, #1
 800bd26:	f43f ae3f 	beq.w	800b9a8 <_printf_float+0x98>
 800bd2a:	f108 0801 	add.w	r8, r8, #1
 800bd2e:	68e3      	ldr	r3, [r4, #12]
 800bd30:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bd32:	1a5b      	subs	r3, r3, r1
 800bd34:	4543      	cmp	r3, r8
 800bd36:	dcf0      	bgt.n	800bd1a <_printf_float+0x40a>
 800bd38:	e6f9      	b.n	800bb2e <_printf_float+0x21e>
 800bd3a:	f04f 0800 	mov.w	r8, #0
 800bd3e:	f104 0919 	add.w	r9, r4, #25
 800bd42:	e7f4      	b.n	800bd2e <_printf_float+0x41e>

0800bd44 <_printf_common>:
 800bd44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd48:	4616      	mov	r6, r2
 800bd4a:	4699      	mov	r9, r3
 800bd4c:	688a      	ldr	r2, [r1, #8]
 800bd4e:	690b      	ldr	r3, [r1, #16]
 800bd50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bd54:	4293      	cmp	r3, r2
 800bd56:	bfb8      	it	lt
 800bd58:	4613      	movlt	r3, r2
 800bd5a:	6033      	str	r3, [r6, #0]
 800bd5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bd60:	4607      	mov	r7, r0
 800bd62:	460c      	mov	r4, r1
 800bd64:	b10a      	cbz	r2, 800bd6a <_printf_common+0x26>
 800bd66:	3301      	adds	r3, #1
 800bd68:	6033      	str	r3, [r6, #0]
 800bd6a:	6823      	ldr	r3, [r4, #0]
 800bd6c:	0699      	lsls	r1, r3, #26
 800bd6e:	bf42      	ittt	mi
 800bd70:	6833      	ldrmi	r3, [r6, #0]
 800bd72:	3302      	addmi	r3, #2
 800bd74:	6033      	strmi	r3, [r6, #0]
 800bd76:	6825      	ldr	r5, [r4, #0]
 800bd78:	f015 0506 	ands.w	r5, r5, #6
 800bd7c:	d106      	bne.n	800bd8c <_printf_common+0x48>
 800bd7e:	f104 0a19 	add.w	sl, r4, #25
 800bd82:	68e3      	ldr	r3, [r4, #12]
 800bd84:	6832      	ldr	r2, [r6, #0]
 800bd86:	1a9b      	subs	r3, r3, r2
 800bd88:	42ab      	cmp	r3, r5
 800bd8a:	dc26      	bgt.n	800bdda <_printf_common+0x96>
 800bd8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bd90:	1e13      	subs	r3, r2, #0
 800bd92:	6822      	ldr	r2, [r4, #0]
 800bd94:	bf18      	it	ne
 800bd96:	2301      	movne	r3, #1
 800bd98:	0692      	lsls	r2, r2, #26
 800bd9a:	d42b      	bmi.n	800bdf4 <_printf_common+0xb0>
 800bd9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bda0:	4649      	mov	r1, r9
 800bda2:	4638      	mov	r0, r7
 800bda4:	47c0      	blx	r8
 800bda6:	3001      	adds	r0, #1
 800bda8:	d01e      	beq.n	800bde8 <_printf_common+0xa4>
 800bdaa:	6823      	ldr	r3, [r4, #0]
 800bdac:	6922      	ldr	r2, [r4, #16]
 800bdae:	f003 0306 	and.w	r3, r3, #6
 800bdb2:	2b04      	cmp	r3, #4
 800bdb4:	bf02      	ittt	eq
 800bdb6:	68e5      	ldreq	r5, [r4, #12]
 800bdb8:	6833      	ldreq	r3, [r6, #0]
 800bdba:	1aed      	subeq	r5, r5, r3
 800bdbc:	68a3      	ldr	r3, [r4, #8]
 800bdbe:	bf0c      	ite	eq
 800bdc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bdc4:	2500      	movne	r5, #0
 800bdc6:	4293      	cmp	r3, r2
 800bdc8:	bfc4      	itt	gt
 800bdca:	1a9b      	subgt	r3, r3, r2
 800bdcc:	18ed      	addgt	r5, r5, r3
 800bdce:	2600      	movs	r6, #0
 800bdd0:	341a      	adds	r4, #26
 800bdd2:	42b5      	cmp	r5, r6
 800bdd4:	d11a      	bne.n	800be0c <_printf_common+0xc8>
 800bdd6:	2000      	movs	r0, #0
 800bdd8:	e008      	b.n	800bdec <_printf_common+0xa8>
 800bdda:	2301      	movs	r3, #1
 800bddc:	4652      	mov	r2, sl
 800bdde:	4649      	mov	r1, r9
 800bde0:	4638      	mov	r0, r7
 800bde2:	47c0      	blx	r8
 800bde4:	3001      	adds	r0, #1
 800bde6:	d103      	bne.n	800bdf0 <_printf_common+0xac>
 800bde8:	f04f 30ff 	mov.w	r0, #4294967295
 800bdec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdf0:	3501      	adds	r5, #1
 800bdf2:	e7c6      	b.n	800bd82 <_printf_common+0x3e>
 800bdf4:	18e1      	adds	r1, r4, r3
 800bdf6:	1c5a      	adds	r2, r3, #1
 800bdf8:	2030      	movs	r0, #48	; 0x30
 800bdfa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bdfe:	4422      	add	r2, r4
 800be00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800be04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800be08:	3302      	adds	r3, #2
 800be0a:	e7c7      	b.n	800bd9c <_printf_common+0x58>
 800be0c:	2301      	movs	r3, #1
 800be0e:	4622      	mov	r2, r4
 800be10:	4649      	mov	r1, r9
 800be12:	4638      	mov	r0, r7
 800be14:	47c0      	blx	r8
 800be16:	3001      	adds	r0, #1
 800be18:	d0e6      	beq.n	800bde8 <_printf_common+0xa4>
 800be1a:	3601      	adds	r6, #1
 800be1c:	e7d9      	b.n	800bdd2 <_printf_common+0x8e>
	...

0800be20 <_printf_i>:
 800be20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be24:	7e0f      	ldrb	r7, [r1, #24]
 800be26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800be28:	2f78      	cmp	r7, #120	; 0x78
 800be2a:	4691      	mov	r9, r2
 800be2c:	4680      	mov	r8, r0
 800be2e:	460c      	mov	r4, r1
 800be30:	469a      	mov	sl, r3
 800be32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800be36:	d807      	bhi.n	800be48 <_printf_i+0x28>
 800be38:	2f62      	cmp	r7, #98	; 0x62
 800be3a:	d80a      	bhi.n	800be52 <_printf_i+0x32>
 800be3c:	2f00      	cmp	r7, #0
 800be3e:	f000 80d4 	beq.w	800bfea <_printf_i+0x1ca>
 800be42:	2f58      	cmp	r7, #88	; 0x58
 800be44:	f000 80c0 	beq.w	800bfc8 <_printf_i+0x1a8>
 800be48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800be50:	e03a      	b.n	800bec8 <_printf_i+0xa8>
 800be52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800be56:	2b15      	cmp	r3, #21
 800be58:	d8f6      	bhi.n	800be48 <_printf_i+0x28>
 800be5a:	a101      	add	r1, pc, #4	; (adr r1, 800be60 <_printf_i+0x40>)
 800be5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800be60:	0800beb9 	.word	0x0800beb9
 800be64:	0800becd 	.word	0x0800becd
 800be68:	0800be49 	.word	0x0800be49
 800be6c:	0800be49 	.word	0x0800be49
 800be70:	0800be49 	.word	0x0800be49
 800be74:	0800be49 	.word	0x0800be49
 800be78:	0800becd 	.word	0x0800becd
 800be7c:	0800be49 	.word	0x0800be49
 800be80:	0800be49 	.word	0x0800be49
 800be84:	0800be49 	.word	0x0800be49
 800be88:	0800be49 	.word	0x0800be49
 800be8c:	0800bfd1 	.word	0x0800bfd1
 800be90:	0800bef9 	.word	0x0800bef9
 800be94:	0800bf8b 	.word	0x0800bf8b
 800be98:	0800be49 	.word	0x0800be49
 800be9c:	0800be49 	.word	0x0800be49
 800bea0:	0800bff3 	.word	0x0800bff3
 800bea4:	0800be49 	.word	0x0800be49
 800bea8:	0800bef9 	.word	0x0800bef9
 800beac:	0800be49 	.word	0x0800be49
 800beb0:	0800be49 	.word	0x0800be49
 800beb4:	0800bf93 	.word	0x0800bf93
 800beb8:	682b      	ldr	r3, [r5, #0]
 800beba:	1d1a      	adds	r2, r3, #4
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	602a      	str	r2, [r5, #0]
 800bec0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bec4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bec8:	2301      	movs	r3, #1
 800beca:	e09f      	b.n	800c00c <_printf_i+0x1ec>
 800becc:	6820      	ldr	r0, [r4, #0]
 800bece:	682b      	ldr	r3, [r5, #0]
 800bed0:	0607      	lsls	r7, r0, #24
 800bed2:	f103 0104 	add.w	r1, r3, #4
 800bed6:	6029      	str	r1, [r5, #0]
 800bed8:	d501      	bpl.n	800bede <_printf_i+0xbe>
 800beda:	681e      	ldr	r6, [r3, #0]
 800bedc:	e003      	b.n	800bee6 <_printf_i+0xc6>
 800bede:	0646      	lsls	r6, r0, #25
 800bee0:	d5fb      	bpl.n	800beda <_printf_i+0xba>
 800bee2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bee6:	2e00      	cmp	r6, #0
 800bee8:	da03      	bge.n	800bef2 <_printf_i+0xd2>
 800beea:	232d      	movs	r3, #45	; 0x2d
 800beec:	4276      	negs	r6, r6
 800beee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bef2:	485a      	ldr	r0, [pc, #360]	; (800c05c <_printf_i+0x23c>)
 800bef4:	230a      	movs	r3, #10
 800bef6:	e012      	b.n	800bf1e <_printf_i+0xfe>
 800bef8:	682b      	ldr	r3, [r5, #0]
 800befa:	6820      	ldr	r0, [r4, #0]
 800befc:	1d19      	adds	r1, r3, #4
 800befe:	6029      	str	r1, [r5, #0]
 800bf00:	0605      	lsls	r5, r0, #24
 800bf02:	d501      	bpl.n	800bf08 <_printf_i+0xe8>
 800bf04:	681e      	ldr	r6, [r3, #0]
 800bf06:	e002      	b.n	800bf0e <_printf_i+0xee>
 800bf08:	0641      	lsls	r1, r0, #25
 800bf0a:	d5fb      	bpl.n	800bf04 <_printf_i+0xe4>
 800bf0c:	881e      	ldrh	r6, [r3, #0]
 800bf0e:	4853      	ldr	r0, [pc, #332]	; (800c05c <_printf_i+0x23c>)
 800bf10:	2f6f      	cmp	r7, #111	; 0x6f
 800bf12:	bf0c      	ite	eq
 800bf14:	2308      	moveq	r3, #8
 800bf16:	230a      	movne	r3, #10
 800bf18:	2100      	movs	r1, #0
 800bf1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bf1e:	6865      	ldr	r5, [r4, #4]
 800bf20:	60a5      	str	r5, [r4, #8]
 800bf22:	2d00      	cmp	r5, #0
 800bf24:	bfa2      	ittt	ge
 800bf26:	6821      	ldrge	r1, [r4, #0]
 800bf28:	f021 0104 	bicge.w	r1, r1, #4
 800bf2c:	6021      	strge	r1, [r4, #0]
 800bf2e:	b90e      	cbnz	r6, 800bf34 <_printf_i+0x114>
 800bf30:	2d00      	cmp	r5, #0
 800bf32:	d04b      	beq.n	800bfcc <_printf_i+0x1ac>
 800bf34:	4615      	mov	r5, r2
 800bf36:	fbb6 f1f3 	udiv	r1, r6, r3
 800bf3a:	fb03 6711 	mls	r7, r3, r1, r6
 800bf3e:	5dc7      	ldrb	r7, [r0, r7]
 800bf40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bf44:	4637      	mov	r7, r6
 800bf46:	42bb      	cmp	r3, r7
 800bf48:	460e      	mov	r6, r1
 800bf4a:	d9f4      	bls.n	800bf36 <_printf_i+0x116>
 800bf4c:	2b08      	cmp	r3, #8
 800bf4e:	d10b      	bne.n	800bf68 <_printf_i+0x148>
 800bf50:	6823      	ldr	r3, [r4, #0]
 800bf52:	07de      	lsls	r6, r3, #31
 800bf54:	d508      	bpl.n	800bf68 <_printf_i+0x148>
 800bf56:	6923      	ldr	r3, [r4, #16]
 800bf58:	6861      	ldr	r1, [r4, #4]
 800bf5a:	4299      	cmp	r1, r3
 800bf5c:	bfde      	ittt	le
 800bf5e:	2330      	movle	r3, #48	; 0x30
 800bf60:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bf64:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bf68:	1b52      	subs	r2, r2, r5
 800bf6a:	6122      	str	r2, [r4, #16]
 800bf6c:	f8cd a000 	str.w	sl, [sp]
 800bf70:	464b      	mov	r3, r9
 800bf72:	aa03      	add	r2, sp, #12
 800bf74:	4621      	mov	r1, r4
 800bf76:	4640      	mov	r0, r8
 800bf78:	f7ff fee4 	bl	800bd44 <_printf_common>
 800bf7c:	3001      	adds	r0, #1
 800bf7e:	d14a      	bne.n	800c016 <_printf_i+0x1f6>
 800bf80:	f04f 30ff 	mov.w	r0, #4294967295
 800bf84:	b004      	add	sp, #16
 800bf86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf8a:	6823      	ldr	r3, [r4, #0]
 800bf8c:	f043 0320 	orr.w	r3, r3, #32
 800bf90:	6023      	str	r3, [r4, #0]
 800bf92:	4833      	ldr	r0, [pc, #204]	; (800c060 <_printf_i+0x240>)
 800bf94:	2778      	movs	r7, #120	; 0x78
 800bf96:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bf9a:	6823      	ldr	r3, [r4, #0]
 800bf9c:	6829      	ldr	r1, [r5, #0]
 800bf9e:	061f      	lsls	r7, r3, #24
 800bfa0:	f851 6b04 	ldr.w	r6, [r1], #4
 800bfa4:	d402      	bmi.n	800bfac <_printf_i+0x18c>
 800bfa6:	065f      	lsls	r7, r3, #25
 800bfa8:	bf48      	it	mi
 800bfaa:	b2b6      	uxthmi	r6, r6
 800bfac:	07df      	lsls	r7, r3, #31
 800bfae:	bf48      	it	mi
 800bfb0:	f043 0320 	orrmi.w	r3, r3, #32
 800bfb4:	6029      	str	r1, [r5, #0]
 800bfb6:	bf48      	it	mi
 800bfb8:	6023      	strmi	r3, [r4, #0]
 800bfba:	b91e      	cbnz	r6, 800bfc4 <_printf_i+0x1a4>
 800bfbc:	6823      	ldr	r3, [r4, #0]
 800bfbe:	f023 0320 	bic.w	r3, r3, #32
 800bfc2:	6023      	str	r3, [r4, #0]
 800bfc4:	2310      	movs	r3, #16
 800bfc6:	e7a7      	b.n	800bf18 <_printf_i+0xf8>
 800bfc8:	4824      	ldr	r0, [pc, #144]	; (800c05c <_printf_i+0x23c>)
 800bfca:	e7e4      	b.n	800bf96 <_printf_i+0x176>
 800bfcc:	4615      	mov	r5, r2
 800bfce:	e7bd      	b.n	800bf4c <_printf_i+0x12c>
 800bfd0:	682b      	ldr	r3, [r5, #0]
 800bfd2:	6826      	ldr	r6, [r4, #0]
 800bfd4:	6961      	ldr	r1, [r4, #20]
 800bfd6:	1d18      	adds	r0, r3, #4
 800bfd8:	6028      	str	r0, [r5, #0]
 800bfda:	0635      	lsls	r5, r6, #24
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	d501      	bpl.n	800bfe4 <_printf_i+0x1c4>
 800bfe0:	6019      	str	r1, [r3, #0]
 800bfe2:	e002      	b.n	800bfea <_printf_i+0x1ca>
 800bfe4:	0670      	lsls	r0, r6, #25
 800bfe6:	d5fb      	bpl.n	800bfe0 <_printf_i+0x1c0>
 800bfe8:	8019      	strh	r1, [r3, #0]
 800bfea:	2300      	movs	r3, #0
 800bfec:	6123      	str	r3, [r4, #16]
 800bfee:	4615      	mov	r5, r2
 800bff0:	e7bc      	b.n	800bf6c <_printf_i+0x14c>
 800bff2:	682b      	ldr	r3, [r5, #0]
 800bff4:	1d1a      	adds	r2, r3, #4
 800bff6:	602a      	str	r2, [r5, #0]
 800bff8:	681d      	ldr	r5, [r3, #0]
 800bffa:	6862      	ldr	r2, [r4, #4]
 800bffc:	2100      	movs	r1, #0
 800bffe:	4628      	mov	r0, r5
 800c000:	f7f4 f96e 	bl	80002e0 <memchr>
 800c004:	b108      	cbz	r0, 800c00a <_printf_i+0x1ea>
 800c006:	1b40      	subs	r0, r0, r5
 800c008:	6060      	str	r0, [r4, #4]
 800c00a:	6863      	ldr	r3, [r4, #4]
 800c00c:	6123      	str	r3, [r4, #16]
 800c00e:	2300      	movs	r3, #0
 800c010:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c014:	e7aa      	b.n	800bf6c <_printf_i+0x14c>
 800c016:	6923      	ldr	r3, [r4, #16]
 800c018:	462a      	mov	r2, r5
 800c01a:	4649      	mov	r1, r9
 800c01c:	4640      	mov	r0, r8
 800c01e:	47d0      	blx	sl
 800c020:	3001      	adds	r0, #1
 800c022:	d0ad      	beq.n	800bf80 <_printf_i+0x160>
 800c024:	6823      	ldr	r3, [r4, #0]
 800c026:	079b      	lsls	r3, r3, #30
 800c028:	d413      	bmi.n	800c052 <_printf_i+0x232>
 800c02a:	68e0      	ldr	r0, [r4, #12]
 800c02c:	9b03      	ldr	r3, [sp, #12]
 800c02e:	4298      	cmp	r0, r3
 800c030:	bfb8      	it	lt
 800c032:	4618      	movlt	r0, r3
 800c034:	e7a6      	b.n	800bf84 <_printf_i+0x164>
 800c036:	2301      	movs	r3, #1
 800c038:	4632      	mov	r2, r6
 800c03a:	4649      	mov	r1, r9
 800c03c:	4640      	mov	r0, r8
 800c03e:	47d0      	blx	sl
 800c040:	3001      	adds	r0, #1
 800c042:	d09d      	beq.n	800bf80 <_printf_i+0x160>
 800c044:	3501      	adds	r5, #1
 800c046:	68e3      	ldr	r3, [r4, #12]
 800c048:	9903      	ldr	r1, [sp, #12]
 800c04a:	1a5b      	subs	r3, r3, r1
 800c04c:	42ab      	cmp	r3, r5
 800c04e:	dcf2      	bgt.n	800c036 <_printf_i+0x216>
 800c050:	e7eb      	b.n	800c02a <_printf_i+0x20a>
 800c052:	2500      	movs	r5, #0
 800c054:	f104 0619 	add.w	r6, r4, #25
 800c058:	e7f5      	b.n	800c046 <_printf_i+0x226>
 800c05a:	bf00      	nop
 800c05c:	0800e2d2 	.word	0x0800e2d2
 800c060:	0800e2e3 	.word	0x0800e2e3

0800c064 <std>:
 800c064:	2300      	movs	r3, #0
 800c066:	b510      	push	{r4, lr}
 800c068:	4604      	mov	r4, r0
 800c06a:	e9c0 3300 	strd	r3, r3, [r0]
 800c06e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c072:	6083      	str	r3, [r0, #8]
 800c074:	8181      	strh	r1, [r0, #12]
 800c076:	6643      	str	r3, [r0, #100]	; 0x64
 800c078:	81c2      	strh	r2, [r0, #14]
 800c07a:	6183      	str	r3, [r0, #24]
 800c07c:	4619      	mov	r1, r3
 800c07e:	2208      	movs	r2, #8
 800c080:	305c      	adds	r0, #92	; 0x5c
 800c082:	f000 f914 	bl	800c2ae <memset>
 800c086:	4b0d      	ldr	r3, [pc, #52]	; (800c0bc <std+0x58>)
 800c088:	6263      	str	r3, [r4, #36]	; 0x24
 800c08a:	4b0d      	ldr	r3, [pc, #52]	; (800c0c0 <std+0x5c>)
 800c08c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c08e:	4b0d      	ldr	r3, [pc, #52]	; (800c0c4 <std+0x60>)
 800c090:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c092:	4b0d      	ldr	r3, [pc, #52]	; (800c0c8 <std+0x64>)
 800c094:	6323      	str	r3, [r4, #48]	; 0x30
 800c096:	4b0d      	ldr	r3, [pc, #52]	; (800c0cc <std+0x68>)
 800c098:	6224      	str	r4, [r4, #32]
 800c09a:	429c      	cmp	r4, r3
 800c09c:	d006      	beq.n	800c0ac <std+0x48>
 800c09e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c0a2:	4294      	cmp	r4, r2
 800c0a4:	d002      	beq.n	800c0ac <std+0x48>
 800c0a6:	33d0      	adds	r3, #208	; 0xd0
 800c0a8:	429c      	cmp	r4, r3
 800c0aa:	d105      	bne.n	800c0b8 <std+0x54>
 800c0ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c0b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0b4:	f000 b988 	b.w	800c3c8 <__retarget_lock_init_recursive>
 800c0b8:	bd10      	pop	{r4, pc}
 800c0ba:	bf00      	nop
 800c0bc:	0800c229 	.word	0x0800c229
 800c0c0:	0800c24b 	.word	0x0800c24b
 800c0c4:	0800c283 	.word	0x0800c283
 800c0c8:	0800c2a7 	.word	0x0800c2a7
 800c0cc:	240020e0 	.word	0x240020e0

0800c0d0 <stdio_exit_handler>:
 800c0d0:	4a02      	ldr	r2, [pc, #8]	; (800c0dc <stdio_exit_handler+0xc>)
 800c0d2:	4903      	ldr	r1, [pc, #12]	; (800c0e0 <stdio_exit_handler+0x10>)
 800c0d4:	4803      	ldr	r0, [pc, #12]	; (800c0e4 <stdio_exit_handler+0x14>)
 800c0d6:	f000 b869 	b.w	800c1ac <_fwalk_sglue>
 800c0da:	bf00      	nop
 800c0dc:	24000104 	.word	0x24000104
 800c0e0:	0800db05 	.word	0x0800db05
 800c0e4:	24000110 	.word	0x24000110

0800c0e8 <cleanup_stdio>:
 800c0e8:	6841      	ldr	r1, [r0, #4]
 800c0ea:	4b0c      	ldr	r3, [pc, #48]	; (800c11c <cleanup_stdio+0x34>)
 800c0ec:	4299      	cmp	r1, r3
 800c0ee:	b510      	push	{r4, lr}
 800c0f0:	4604      	mov	r4, r0
 800c0f2:	d001      	beq.n	800c0f8 <cleanup_stdio+0x10>
 800c0f4:	f001 fd06 	bl	800db04 <_fflush_r>
 800c0f8:	68a1      	ldr	r1, [r4, #8]
 800c0fa:	4b09      	ldr	r3, [pc, #36]	; (800c120 <cleanup_stdio+0x38>)
 800c0fc:	4299      	cmp	r1, r3
 800c0fe:	d002      	beq.n	800c106 <cleanup_stdio+0x1e>
 800c100:	4620      	mov	r0, r4
 800c102:	f001 fcff 	bl	800db04 <_fflush_r>
 800c106:	68e1      	ldr	r1, [r4, #12]
 800c108:	4b06      	ldr	r3, [pc, #24]	; (800c124 <cleanup_stdio+0x3c>)
 800c10a:	4299      	cmp	r1, r3
 800c10c:	d004      	beq.n	800c118 <cleanup_stdio+0x30>
 800c10e:	4620      	mov	r0, r4
 800c110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c114:	f001 bcf6 	b.w	800db04 <_fflush_r>
 800c118:	bd10      	pop	{r4, pc}
 800c11a:	bf00      	nop
 800c11c:	240020e0 	.word	0x240020e0
 800c120:	24002148 	.word	0x24002148
 800c124:	240021b0 	.word	0x240021b0

0800c128 <global_stdio_init.part.0>:
 800c128:	b510      	push	{r4, lr}
 800c12a:	4b0b      	ldr	r3, [pc, #44]	; (800c158 <global_stdio_init.part.0+0x30>)
 800c12c:	4c0b      	ldr	r4, [pc, #44]	; (800c15c <global_stdio_init.part.0+0x34>)
 800c12e:	4a0c      	ldr	r2, [pc, #48]	; (800c160 <global_stdio_init.part.0+0x38>)
 800c130:	601a      	str	r2, [r3, #0]
 800c132:	4620      	mov	r0, r4
 800c134:	2200      	movs	r2, #0
 800c136:	2104      	movs	r1, #4
 800c138:	f7ff ff94 	bl	800c064 <std>
 800c13c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c140:	2201      	movs	r2, #1
 800c142:	2109      	movs	r1, #9
 800c144:	f7ff ff8e 	bl	800c064 <std>
 800c148:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c14c:	2202      	movs	r2, #2
 800c14e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c152:	2112      	movs	r1, #18
 800c154:	f7ff bf86 	b.w	800c064 <std>
 800c158:	24002218 	.word	0x24002218
 800c15c:	240020e0 	.word	0x240020e0
 800c160:	0800c0d1 	.word	0x0800c0d1

0800c164 <__sfp_lock_acquire>:
 800c164:	4801      	ldr	r0, [pc, #4]	; (800c16c <__sfp_lock_acquire+0x8>)
 800c166:	f000 b930 	b.w	800c3ca <__retarget_lock_acquire_recursive>
 800c16a:	bf00      	nop
 800c16c:	24002221 	.word	0x24002221

0800c170 <__sfp_lock_release>:
 800c170:	4801      	ldr	r0, [pc, #4]	; (800c178 <__sfp_lock_release+0x8>)
 800c172:	f000 b92b 	b.w	800c3cc <__retarget_lock_release_recursive>
 800c176:	bf00      	nop
 800c178:	24002221 	.word	0x24002221

0800c17c <__sinit>:
 800c17c:	b510      	push	{r4, lr}
 800c17e:	4604      	mov	r4, r0
 800c180:	f7ff fff0 	bl	800c164 <__sfp_lock_acquire>
 800c184:	6a23      	ldr	r3, [r4, #32]
 800c186:	b11b      	cbz	r3, 800c190 <__sinit+0x14>
 800c188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c18c:	f7ff bff0 	b.w	800c170 <__sfp_lock_release>
 800c190:	4b04      	ldr	r3, [pc, #16]	; (800c1a4 <__sinit+0x28>)
 800c192:	6223      	str	r3, [r4, #32]
 800c194:	4b04      	ldr	r3, [pc, #16]	; (800c1a8 <__sinit+0x2c>)
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d1f5      	bne.n	800c188 <__sinit+0xc>
 800c19c:	f7ff ffc4 	bl	800c128 <global_stdio_init.part.0>
 800c1a0:	e7f2      	b.n	800c188 <__sinit+0xc>
 800c1a2:	bf00      	nop
 800c1a4:	0800c0e9 	.word	0x0800c0e9
 800c1a8:	24002218 	.word	0x24002218

0800c1ac <_fwalk_sglue>:
 800c1ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1b0:	4607      	mov	r7, r0
 800c1b2:	4688      	mov	r8, r1
 800c1b4:	4614      	mov	r4, r2
 800c1b6:	2600      	movs	r6, #0
 800c1b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c1bc:	f1b9 0901 	subs.w	r9, r9, #1
 800c1c0:	d505      	bpl.n	800c1ce <_fwalk_sglue+0x22>
 800c1c2:	6824      	ldr	r4, [r4, #0]
 800c1c4:	2c00      	cmp	r4, #0
 800c1c6:	d1f7      	bne.n	800c1b8 <_fwalk_sglue+0xc>
 800c1c8:	4630      	mov	r0, r6
 800c1ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1ce:	89ab      	ldrh	r3, [r5, #12]
 800c1d0:	2b01      	cmp	r3, #1
 800c1d2:	d907      	bls.n	800c1e4 <_fwalk_sglue+0x38>
 800c1d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c1d8:	3301      	adds	r3, #1
 800c1da:	d003      	beq.n	800c1e4 <_fwalk_sglue+0x38>
 800c1dc:	4629      	mov	r1, r5
 800c1de:	4638      	mov	r0, r7
 800c1e0:	47c0      	blx	r8
 800c1e2:	4306      	orrs	r6, r0
 800c1e4:	3568      	adds	r5, #104	; 0x68
 800c1e6:	e7e9      	b.n	800c1bc <_fwalk_sglue+0x10>

0800c1e8 <siprintf>:
 800c1e8:	b40e      	push	{r1, r2, r3}
 800c1ea:	b500      	push	{lr}
 800c1ec:	b09c      	sub	sp, #112	; 0x70
 800c1ee:	ab1d      	add	r3, sp, #116	; 0x74
 800c1f0:	9002      	str	r0, [sp, #8]
 800c1f2:	9006      	str	r0, [sp, #24]
 800c1f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c1f8:	4809      	ldr	r0, [pc, #36]	; (800c220 <siprintf+0x38>)
 800c1fa:	9107      	str	r1, [sp, #28]
 800c1fc:	9104      	str	r1, [sp, #16]
 800c1fe:	4909      	ldr	r1, [pc, #36]	; (800c224 <siprintf+0x3c>)
 800c200:	f853 2b04 	ldr.w	r2, [r3], #4
 800c204:	9105      	str	r1, [sp, #20]
 800c206:	6800      	ldr	r0, [r0, #0]
 800c208:	9301      	str	r3, [sp, #4]
 800c20a:	a902      	add	r1, sp, #8
 800c20c:	f001 faf6 	bl	800d7fc <_svfiprintf_r>
 800c210:	9b02      	ldr	r3, [sp, #8]
 800c212:	2200      	movs	r2, #0
 800c214:	701a      	strb	r2, [r3, #0]
 800c216:	b01c      	add	sp, #112	; 0x70
 800c218:	f85d eb04 	ldr.w	lr, [sp], #4
 800c21c:	b003      	add	sp, #12
 800c21e:	4770      	bx	lr
 800c220:	2400015c 	.word	0x2400015c
 800c224:	ffff0208 	.word	0xffff0208

0800c228 <__sread>:
 800c228:	b510      	push	{r4, lr}
 800c22a:	460c      	mov	r4, r1
 800c22c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c230:	f000 f86c 	bl	800c30c <_read_r>
 800c234:	2800      	cmp	r0, #0
 800c236:	bfab      	itete	ge
 800c238:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c23a:	89a3      	ldrhlt	r3, [r4, #12]
 800c23c:	181b      	addge	r3, r3, r0
 800c23e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c242:	bfac      	ite	ge
 800c244:	6563      	strge	r3, [r4, #84]	; 0x54
 800c246:	81a3      	strhlt	r3, [r4, #12]
 800c248:	bd10      	pop	{r4, pc}

0800c24a <__swrite>:
 800c24a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c24e:	461f      	mov	r7, r3
 800c250:	898b      	ldrh	r3, [r1, #12]
 800c252:	05db      	lsls	r3, r3, #23
 800c254:	4605      	mov	r5, r0
 800c256:	460c      	mov	r4, r1
 800c258:	4616      	mov	r6, r2
 800c25a:	d505      	bpl.n	800c268 <__swrite+0x1e>
 800c25c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c260:	2302      	movs	r3, #2
 800c262:	2200      	movs	r2, #0
 800c264:	f000 f840 	bl	800c2e8 <_lseek_r>
 800c268:	89a3      	ldrh	r3, [r4, #12]
 800c26a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c26e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c272:	81a3      	strh	r3, [r4, #12]
 800c274:	4632      	mov	r2, r6
 800c276:	463b      	mov	r3, r7
 800c278:	4628      	mov	r0, r5
 800c27a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c27e:	f000 b867 	b.w	800c350 <_write_r>

0800c282 <__sseek>:
 800c282:	b510      	push	{r4, lr}
 800c284:	460c      	mov	r4, r1
 800c286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c28a:	f000 f82d 	bl	800c2e8 <_lseek_r>
 800c28e:	1c43      	adds	r3, r0, #1
 800c290:	89a3      	ldrh	r3, [r4, #12]
 800c292:	bf15      	itete	ne
 800c294:	6560      	strne	r0, [r4, #84]	; 0x54
 800c296:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c29a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c29e:	81a3      	strheq	r3, [r4, #12]
 800c2a0:	bf18      	it	ne
 800c2a2:	81a3      	strhne	r3, [r4, #12]
 800c2a4:	bd10      	pop	{r4, pc}

0800c2a6 <__sclose>:
 800c2a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2aa:	f000 b80d 	b.w	800c2c8 <_close_r>

0800c2ae <memset>:
 800c2ae:	4402      	add	r2, r0
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	d100      	bne.n	800c2b8 <memset+0xa>
 800c2b6:	4770      	bx	lr
 800c2b8:	f803 1b01 	strb.w	r1, [r3], #1
 800c2bc:	e7f9      	b.n	800c2b2 <memset+0x4>
	...

0800c2c0 <_localeconv_r>:
 800c2c0:	4800      	ldr	r0, [pc, #0]	; (800c2c4 <_localeconv_r+0x4>)
 800c2c2:	4770      	bx	lr
 800c2c4:	24000250 	.word	0x24000250

0800c2c8 <_close_r>:
 800c2c8:	b538      	push	{r3, r4, r5, lr}
 800c2ca:	4d06      	ldr	r5, [pc, #24]	; (800c2e4 <_close_r+0x1c>)
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	4604      	mov	r4, r0
 800c2d0:	4608      	mov	r0, r1
 800c2d2:	602b      	str	r3, [r5, #0]
 800c2d4:	f7f4 fc97 	bl	8000c06 <_close>
 800c2d8:	1c43      	adds	r3, r0, #1
 800c2da:	d102      	bne.n	800c2e2 <_close_r+0x1a>
 800c2dc:	682b      	ldr	r3, [r5, #0]
 800c2de:	b103      	cbz	r3, 800c2e2 <_close_r+0x1a>
 800c2e0:	6023      	str	r3, [r4, #0]
 800c2e2:	bd38      	pop	{r3, r4, r5, pc}
 800c2e4:	2400221c 	.word	0x2400221c

0800c2e8 <_lseek_r>:
 800c2e8:	b538      	push	{r3, r4, r5, lr}
 800c2ea:	4d07      	ldr	r5, [pc, #28]	; (800c308 <_lseek_r+0x20>)
 800c2ec:	4604      	mov	r4, r0
 800c2ee:	4608      	mov	r0, r1
 800c2f0:	4611      	mov	r1, r2
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	602a      	str	r2, [r5, #0]
 800c2f6:	461a      	mov	r2, r3
 800c2f8:	f7f4 fcac 	bl	8000c54 <_lseek>
 800c2fc:	1c43      	adds	r3, r0, #1
 800c2fe:	d102      	bne.n	800c306 <_lseek_r+0x1e>
 800c300:	682b      	ldr	r3, [r5, #0]
 800c302:	b103      	cbz	r3, 800c306 <_lseek_r+0x1e>
 800c304:	6023      	str	r3, [r4, #0]
 800c306:	bd38      	pop	{r3, r4, r5, pc}
 800c308:	2400221c 	.word	0x2400221c

0800c30c <_read_r>:
 800c30c:	b538      	push	{r3, r4, r5, lr}
 800c30e:	4d07      	ldr	r5, [pc, #28]	; (800c32c <_read_r+0x20>)
 800c310:	4604      	mov	r4, r0
 800c312:	4608      	mov	r0, r1
 800c314:	4611      	mov	r1, r2
 800c316:	2200      	movs	r2, #0
 800c318:	602a      	str	r2, [r5, #0]
 800c31a:	461a      	mov	r2, r3
 800c31c:	f7f4 fc3a 	bl	8000b94 <_read>
 800c320:	1c43      	adds	r3, r0, #1
 800c322:	d102      	bne.n	800c32a <_read_r+0x1e>
 800c324:	682b      	ldr	r3, [r5, #0]
 800c326:	b103      	cbz	r3, 800c32a <_read_r+0x1e>
 800c328:	6023      	str	r3, [r4, #0]
 800c32a:	bd38      	pop	{r3, r4, r5, pc}
 800c32c:	2400221c 	.word	0x2400221c

0800c330 <_sbrk_r>:
 800c330:	b538      	push	{r3, r4, r5, lr}
 800c332:	4d06      	ldr	r5, [pc, #24]	; (800c34c <_sbrk_r+0x1c>)
 800c334:	2300      	movs	r3, #0
 800c336:	4604      	mov	r4, r0
 800c338:	4608      	mov	r0, r1
 800c33a:	602b      	str	r3, [r5, #0]
 800c33c:	f7f4 fc98 	bl	8000c70 <_sbrk>
 800c340:	1c43      	adds	r3, r0, #1
 800c342:	d102      	bne.n	800c34a <_sbrk_r+0x1a>
 800c344:	682b      	ldr	r3, [r5, #0]
 800c346:	b103      	cbz	r3, 800c34a <_sbrk_r+0x1a>
 800c348:	6023      	str	r3, [r4, #0]
 800c34a:	bd38      	pop	{r3, r4, r5, pc}
 800c34c:	2400221c 	.word	0x2400221c

0800c350 <_write_r>:
 800c350:	b538      	push	{r3, r4, r5, lr}
 800c352:	4d07      	ldr	r5, [pc, #28]	; (800c370 <_write_r+0x20>)
 800c354:	4604      	mov	r4, r0
 800c356:	4608      	mov	r0, r1
 800c358:	4611      	mov	r1, r2
 800c35a:	2200      	movs	r2, #0
 800c35c:	602a      	str	r2, [r5, #0]
 800c35e:	461a      	mov	r2, r3
 800c360:	f7f4 fc35 	bl	8000bce <_write>
 800c364:	1c43      	adds	r3, r0, #1
 800c366:	d102      	bne.n	800c36e <_write_r+0x1e>
 800c368:	682b      	ldr	r3, [r5, #0]
 800c36a:	b103      	cbz	r3, 800c36e <_write_r+0x1e>
 800c36c:	6023      	str	r3, [r4, #0]
 800c36e:	bd38      	pop	{r3, r4, r5, pc}
 800c370:	2400221c 	.word	0x2400221c

0800c374 <__errno>:
 800c374:	4b01      	ldr	r3, [pc, #4]	; (800c37c <__errno+0x8>)
 800c376:	6818      	ldr	r0, [r3, #0]
 800c378:	4770      	bx	lr
 800c37a:	bf00      	nop
 800c37c:	2400015c 	.word	0x2400015c

0800c380 <__libc_init_array>:
 800c380:	b570      	push	{r4, r5, r6, lr}
 800c382:	4d0d      	ldr	r5, [pc, #52]	; (800c3b8 <__libc_init_array+0x38>)
 800c384:	4c0d      	ldr	r4, [pc, #52]	; (800c3bc <__libc_init_array+0x3c>)
 800c386:	1b64      	subs	r4, r4, r5
 800c388:	10a4      	asrs	r4, r4, #2
 800c38a:	2600      	movs	r6, #0
 800c38c:	42a6      	cmp	r6, r4
 800c38e:	d109      	bne.n	800c3a4 <__libc_init_array+0x24>
 800c390:	4d0b      	ldr	r5, [pc, #44]	; (800c3c0 <__libc_init_array+0x40>)
 800c392:	4c0c      	ldr	r4, [pc, #48]	; (800c3c4 <__libc_init_array+0x44>)
 800c394:	f001 ff4a 	bl	800e22c <_init>
 800c398:	1b64      	subs	r4, r4, r5
 800c39a:	10a4      	asrs	r4, r4, #2
 800c39c:	2600      	movs	r6, #0
 800c39e:	42a6      	cmp	r6, r4
 800c3a0:	d105      	bne.n	800c3ae <__libc_init_array+0x2e>
 800c3a2:	bd70      	pop	{r4, r5, r6, pc}
 800c3a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3a8:	4798      	blx	r3
 800c3aa:	3601      	adds	r6, #1
 800c3ac:	e7ee      	b.n	800c38c <__libc_init_array+0xc>
 800c3ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3b2:	4798      	blx	r3
 800c3b4:	3601      	adds	r6, #1
 800c3b6:	e7f2      	b.n	800c39e <__libc_init_array+0x1e>
 800c3b8:	0800e634 	.word	0x0800e634
 800c3bc:	0800e634 	.word	0x0800e634
 800c3c0:	0800e634 	.word	0x0800e634
 800c3c4:	0800e638 	.word	0x0800e638

0800c3c8 <__retarget_lock_init_recursive>:
 800c3c8:	4770      	bx	lr

0800c3ca <__retarget_lock_acquire_recursive>:
 800c3ca:	4770      	bx	lr

0800c3cc <__retarget_lock_release_recursive>:
 800c3cc:	4770      	bx	lr

0800c3ce <quorem>:
 800c3ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3d2:	6903      	ldr	r3, [r0, #16]
 800c3d4:	690c      	ldr	r4, [r1, #16]
 800c3d6:	42a3      	cmp	r3, r4
 800c3d8:	4607      	mov	r7, r0
 800c3da:	db7e      	blt.n	800c4da <quorem+0x10c>
 800c3dc:	3c01      	subs	r4, #1
 800c3de:	f101 0814 	add.w	r8, r1, #20
 800c3e2:	f100 0514 	add.w	r5, r0, #20
 800c3e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c3ea:	9301      	str	r3, [sp, #4]
 800c3ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c3f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c3f4:	3301      	adds	r3, #1
 800c3f6:	429a      	cmp	r2, r3
 800c3f8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c3fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c400:	fbb2 f6f3 	udiv	r6, r2, r3
 800c404:	d331      	bcc.n	800c46a <quorem+0x9c>
 800c406:	f04f 0e00 	mov.w	lr, #0
 800c40a:	4640      	mov	r0, r8
 800c40c:	46ac      	mov	ip, r5
 800c40e:	46f2      	mov	sl, lr
 800c410:	f850 2b04 	ldr.w	r2, [r0], #4
 800c414:	b293      	uxth	r3, r2
 800c416:	fb06 e303 	mla	r3, r6, r3, lr
 800c41a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c41e:	0c1a      	lsrs	r2, r3, #16
 800c420:	b29b      	uxth	r3, r3
 800c422:	ebaa 0303 	sub.w	r3, sl, r3
 800c426:	f8dc a000 	ldr.w	sl, [ip]
 800c42a:	fa13 f38a 	uxtah	r3, r3, sl
 800c42e:	fb06 220e 	mla	r2, r6, lr, r2
 800c432:	9300      	str	r3, [sp, #0]
 800c434:	9b00      	ldr	r3, [sp, #0]
 800c436:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c43a:	b292      	uxth	r2, r2
 800c43c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c440:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c444:	f8bd 3000 	ldrh.w	r3, [sp]
 800c448:	4581      	cmp	r9, r0
 800c44a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c44e:	f84c 3b04 	str.w	r3, [ip], #4
 800c452:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c456:	d2db      	bcs.n	800c410 <quorem+0x42>
 800c458:	f855 300b 	ldr.w	r3, [r5, fp]
 800c45c:	b92b      	cbnz	r3, 800c46a <quorem+0x9c>
 800c45e:	9b01      	ldr	r3, [sp, #4]
 800c460:	3b04      	subs	r3, #4
 800c462:	429d      	cmp	r5, r3
 800c464:	461a      	mov	r2, r3
 800c466:	d32c      	bcc.n	800c4c2 <quorem+0xf4>
 800c468:	613c      	str	r4, [r7, #16]
 800c46a:	4638      	mov	r0, r7
 800c46c:	f001 f86c 	bl	800d548 <__mcmp>
 800c470:	2800      	cmp	r0, #0
 800c472:	db22      	blt.n	800c4ba <quorem+0xec>
 800c474:	3601      	adds	r6, #1
 800c476:	4629      	mov	r1, r5
 800c478:	2000      	movs	r0, #0
 800c47a:	f858 2b04 	ldr.w	r2, [r8], #4
 800c47e:	f8d1 c000 	ldr.w	ip, [r1]
 800c482:	b293      	uxth	r3, r2
 800c484:	1ac3      	subs	r3, r0, r3
 800c486:	0c12      	lsrs	r2, r2, #16
 800c488:	fa13 f38c 	uxtah	r3, r3, ip
 800c48c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c490:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c494:	b29b      	uxth	r3, r3
 800c496:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c49a:	45c1      	cmp	r9, r8
 800c49c:	f841 3b04 	str.w	r3, [r1], #4
 800c4a0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c4a4:	d2e9      	bcs.n	800c47a <quorem+0xac>
 800c4a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c4aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c4ae:	b922      	cbnz	r2, 800c4ba <quorem+0xec>
 800c4b0:	3b04      	subs	r3, #4
 800c4b2:	429d      	cmp	r5, r3
 800c4b4:	461a      	mov	r2, r3
 800c4b6:	d30a      	bcc.n	800c4ce <quorem+0x100>
 800c4b8:	613c      	str	r4, [r7, #16]
 800c4ba:	4630      	mov	r0, r6
 800c4bc:	b003      	add	sp, #12
 800c4be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4c2:	6812      	ldr	r2, [r2, #0]
 800c4c4:	3b04      	subs	r3, #4
 800c4c6:	2a00      	cmp	r2, #0
 800c4c8:	d1ce      	bne.n	800c468 <quorem+0x9a>
 800c4ca:	3c01      	subs	r4, #1
 800c4cc:	e7c9      	b.n	800c462 <quorem+0x94>
 800c4ce:	6812      	ldr	r2, [r2, #0]
 800c4d0:	3b04      	subs	r3, #4
 800c4d2:	2a00      	cmp	r2, #0
 800c4d4:	d1f0      	bne.n	800c4b8 <quorem+0xea>
 800c4d6:	3c01      	subs	r4, #1
 800c4d8:	e7eb      	b.n	800c4b2 <quorem+0xe4>
 800c4da:	2000      	movs	r0, #0
 800c4dc:	e7ee      	b.n	800c4bc <quorem+0xee>
	...

0800c4e0 <_dtoa_r>:
 800c4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4e4:	ed2d 8b02 	vpush	{d8}
 800c4e8:	69c5      	ldr	r5, [r0, #28]
 800c4ea:	b091      	sub	sp, #68	; 0x44
 800c4ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c4f0:	ec59 8b10 	vmov	r8, r9, d0
 800c4f4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800c4f6:	9106      	str	r1, [sp, #24]
 800c4f8:	4606      	mov	r6, r0
 800c4fa:	9208      	str	r2, [sp, #32]
 800c4fc:	930c      	str	r3, [sp, #48]	; 0x30
 800c4fe:	b975      	cbnz	r5, 800c51e <_dtoa_r+0x3e>
 800c500:	2010      	movs	r0, #16
 800c502:	f7ff f8b7 	bl	800b674 <malloc>
 800c506:	4602      	mov	r2, r0
 800c508:	61f0      	str	r0, [r6, #28]
 800c50a:	b920      	cbnz	r0, 800c516 <_dtoa_r+0x36>
 800c50c:	4ba6      	ldr	r3, [pc, #664]	; (800c7a8 <_dtoa_r+0x2c8>)
 800c50e:	21ef      	movs	r1, #239	; 0xef
 800c510:	48a6      	ldr	r0, [pc, #664]	; (800c7ac <_dtoa_r+0x2cc>)
 800c512:	f001 fb47 	bl	800dba4 <__assert_func>
 800c516:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c51a:	6005      	str	r5, [r0, #0]
 800c51c:	60c5      	str	r5, [r0, #12]
 800c51e:	69f3      	ldr	r3, [r6, #28]
 800c520:	6819      	ldr	r1, [r3, #0]
 800c522:	b151      	cbz	r1, 800c53a <_dtoa_r+0x5a>
 800c524:	685a      	ldr	r2, [r3, #4]
 800c526:	604a      	str	r2, [r1, #4]
 800c528:	2301      	movs	r3, #1
 800c52a:	4093      	lsls	r3, r2
 800c52c:	608b      	str	r3, [r1, #8]
 800c52e:	4630      	mov	r0, r6
 800c530:	f000 fdce 	bl	800d0d0 <_Bfree>
 800c534:	69f3      	ldr	r3, [r6, #28]
 800c536:	2200      	movs	r2, #0
 800c538:	601a      	str	r2, [r3, #0]
 800c53a:	f1b9 0300 	subs.w	r3, r9, #0
 800c53e:	bfbb      	ittet	lt
 800c540:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c544:	9303      	strlt	r3, [sp, #12]
 800c546:	2300      	movge	r3, #0
 800c548:	2201      	movlt	r2, #1
 800c54a:	bfac      	ite	ge
 800c54c:	6023      	strge	r3, [r4, #0]
 800c54e:	6022      	strlt	r2, [r4, #0]
 800c550:	4b97      	ldr	r3, [pc, #604]	; (800c7b0 <_dtoa_r+0x2d0>)
 800c552:	9c03      	ldr	r4, [sp, #12]
 800c554:	43a3      	bics	r3, r4
 800c556:	d11c      	bne.n	800c592 <_dtoa_r+0xb2>
 800c558:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c55a:	f242 730f 	movw	r3, #9999	; 0x270f
 800c55e:	6013      	str	r3, [r2, #0]
 800c560:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800c564:	ea53 0308 	orrs.w	r3, r3, r8
 800c568:	f000 84fb 	beq.w	800cf62 <_dtoa_r+0xa82>
 800c56c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c56e:	b963      	cbnz	r3, 800c58a <_dtoa_r+0xaa>
 800c570:	4b90      	ldr	r3, [pc, #576]	; (800c7b4 <_dtoa_r+0x2d4>)
 800c572:	e020      	b.n	800c5b6 <_dtoa_r+0xd6>
 800c574:	4b90      	ldr	r3, [pc, #576]	; (800c7b8 <_dtoa_r+0x2d8>)
 800c576:	9301      	str	r3, [sp, #4]
 800c578:	3308      	adds	r3, #8
 800c57a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c57c:	6013      	str	r3, [r2, #0]
 800c57e:	9801      	ldr	r0, [sp, #4]
 800c580:	b011      	add	sp, #68	; 0x44
 800c582:	ecbd 8b02 	vpop	{d8}
 800c586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c58a:	4b8a      	ldr	r3, [pc, #552]	; (800c7b4 <_dtoa_r+0x2d4>)
 800c58c:	9301      	str	r3, [sp, #4]
 800c58e:	3303      	adds	r3, #3
 800c590:	e7f3      	b.n	800c57a <_dtoa_r+0x9a>
 800c592:	ed9d 8b02 	vldr	d8, [sp, #8]
 800c596:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c59a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c59e:	d10c      	bne.n	800c5ba <_dtoa_r+0xda>
 800c5a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c5a2:	2301      	movs	r3, #1
 800c5a4:	6013      	str	r3, [r2, #0]
 800c5a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	f000 84d7 	beq.w	800cf5c <_dtoa_r+0xa7c>
 800c5ae:	4b83      	ldr	r3, [pc, #524]	; (800c7bc <_dtoa_r+0x2dc>)
 800c5b0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c5b2:	6013      	str	r3, [r2, #0]
 800c5b4:	3b01      	subs	r3, #1
 800c5b6:	9301      	str	r3, [sp, #4]
 800c5b8:	e7e1      	b.n	800c57e <_dtoa_r+0x9e>
 800c5ba:	aa0e      	add	r2, sp, #56	; 0x38
 800c5bc:	a90f      	add	r1, sp, #60	; 0x3c
 800c5be:	4630      	mov	r0, r6
 800c5c0:	eeb0 0b48 	vmov.f64	d0, d8
 800c5c4:	f001 f866 	bl	800d694 <__d2b>
 800c5c8:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800c5cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c5ce:	4605      	mov	r5, r0
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d046      	beq.n	800c662 <_dtoa_r+0x182>
 800c5d4:	eeb0 7b48 	vmov.f64	d7, d8
 800c5d8:	ee18 1a90 	vmov	r1, s17
 800c5dc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c5e0:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800c5e4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800c5e8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c5ec:	2000      	movs	r0, #0
 800c5ee:	ee07 1a90 	vmov	s15, r1
 800c5f2:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800c5f6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800c790 <_dtoa_r+0x2b0>
 800c5fa:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c5fe:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800c798 <_dtoa_r+0x2b8>
 800c602:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c606:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800c7a0 <_dtoa_r+0x2c0>
 800c60a:	ee07 3a90 	vmov	s15, r3
 800c60e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800c612:	eeb0 7b46 	vmov.f64	d7, d6
 800c616:	eea4 7b05 	vfma.f64	d7, d4, d5
 800c61a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800c61e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800c622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c626:	ee16 ba90 	vmov	fp, s13
 800c62a:	9009      	str	r0, [sp, #36]	; 0x24
 800c62c:	d508      	bpl.n	800c640 <_dtoa_r+0x160>
 800c62e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800c632:	eeb4 6b47 	vcmp.f64	d6, d7
 800c636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c63a:	bf18      	it	ne
 800c63c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800c640:	f1bb 0f16 	cmp.w	fp, #22
 800c644:	d82b      	bhi.n	800c69e <_dtoa_r+0x1be>
 800c646:	495e      	ldr	r1, [pc, #376]	; (800c7c0 <_dtoa_r+0x2e0>)
 800c648:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800c64c:	ed91 7b00 	vldr	d7, [r1]
 800c650:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c658:	d501      	bpl.n	800c65e <_dtoa_r+0x17e>
 800c65a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c65e:	2100      	movs	r1, #0
 800c660:	e01e      	b.n	800c6a0 <_dtoa_r+0x1c0>
 800c662:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c664:	4413      	add	r3, r2
 800c666:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800c66a:	2920      	cmp	r1, #32
 800c66c:	bfc1      	itttt	gt
 800c66e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800c672:	408c      	lslgt	r4, r1
 800c674:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800c678:	fa28 f101 	lsrgt.w	r1, r8, r1
 800c67c:	bfd6      	itet	le
 800c67e:	f1c1 0120 	rsble	r1, r1, #32
 800c682:	4321      	orrgt	r1, r4
 800c684:	fa08 f101 	lslle.w	r1, r8, r1
 800c688:	ee07 1a90 	vmov	s15, r1
 800c68c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c690:	3b01      	subs	r3, #1
 800c692:	ee17 1a90 	vmov	r1, s15
 800c696:	2001      	movs	r0, #1
 800c698:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800c69c:	e7a7      	b.n	800c5ee <_dtoa_r+0x10e>
 800c69e:	2101      	movs	r1, #1
 800c6a0:	1ad2      	subs	r2, r2, r3
 800c6a2:	1e53      	subs	r3, r2, #1
 800c6a4:	9305      	str	r3, [sp, #20]
 800c6a6:	bf45      	ittet	mi
 800c6a8:	f1c2 0301 	rsbmi	r3, r2, #1
 800c6ac:	9304      	strmi	r3, [sp, #16]
 800c6ae:	2300      	movpl	r3, #0
 800c6b0:	2300      	movmi	r3, #0
 800c6b2:	bf4c      	ite	mi
 800c6b4:	9305      	strmi	r3, [sp, #20]
 800c6b6:	9304      	strpl	r3, [sp, #16]
 800c6b8:	f1bb 0f00 	cmp.w	fp, #0
 800c6bc:	910b      	str	r1, [sp, #44]	; 0x2c
 800c6be:	db18      	blt.n	800c6f2 <_dtoa_r+0x212>
 800c6c0:	9b05      	ldr	r3, [sp, #20]
 800c6c2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800c6c6:	445b      	add	r3, fp
 800c6c8:	9305      	str	r3, [sp, #20]
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	9a06      	ldr	r2, [sp, #24]
 800c6ce:	2a09      	cmp	r2, #9
 800c6d0:	d848      	bhi.n	800c764 <_dtoa_r+0x284>
 800c6d2:	2a05      	cmp	r2, #5
 800c6d4:	bfc4      	itt	gt
 800c6d6:	3a04      	subgt	r2, #4
 800c6d8:	9206      	strgt	r2, [sp, #24]
 800c6da:	9a06      	ldr	r2, [sp, #24]
 800c6dc:	f1a2 0202 	sub.w	r2, r2, #2
 800c6e0:	bfcc      	ite	gt
 800c6e2:	2400      	movgt	r4, #0
 800c6e4:	2401      	movle	r4, #1
 800c6e6:	2a03      	cmp	r2, #3
 800c6e8:	d847      	bhi.n	800c77a <_dtoa_r+0x29a>
 800c6ea:	e8df f002 	tbb	[pc, r2]
 800c6ee:	2d0b      	.short	0x2d0b
 800c6f0:	392b      	.short	0x392b
 800c6f2:	9b04      	ldr	r3, [sp, #16]
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	eba3 030b 	sub.w	r3, r3, fp
 800c6fa:	9304      	str	r3, [sp, #16]
 800c6fc:	920a      	str	r2, [sp, #40]	; 0x28
 800c6fe:	f1cb 0300 	rsb	r3, fp, #0
 800c702:	e7e3      	b.n	800c6cc <_dtoa_r+0x1ec>
 800c704:	2200      	movs	r2, #0
 800c706:	9207      	str	r2, [sp, #28]
 800c708:	9a08      	ldr	r2, [sp, #32]
 800c70a:	2a00      	cmp	r2, #0
 800c70c:	dc38      	bgt.n	800c780 <_dtoa_r+0x2a0>
 800c70e:	f04f 0a01 	mov.w	sl, #1
 800c712:	46d1      	mov	r9, sl
 800c714:	4652      	mov	r2, sl
 800c716:	f8cd a020 	str.w	sl, [sp, #32]
 800c71a:	69f7      	ldr	r7, [r6, #28]
 800c71c:	2100      	movs	r1, #0
 800c71e:	2004      	movs	r0, #4
 800c720:	f100 0c14 	add.w	ip, r0, #20
 800c724:	4594      	cmp	ip, r2
 800c726:	d930      	bls.n	800c78a <_dtoa_r+0x2aa>
 800c728:	6079      	str	r1, [r7, #4]
 800c72a:	4630      	mov	r0, r6
 800c72c:	930d      	str	r3, [sp, #52]	; 0x34
 800c72e:	f000 fc8f 	bl	800d050 <_Balloc>
 800c732:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c734:	9001      	str	r0, [sp, #4]
 800c736:	4602      	mov	r2, r0
 800c738:	2800      	cmp	r0, #0
 800c73a:	d145      	bne.n	800c7c8 <_dtoa_r+0x2e8>
 800c73c:	4b21      	ldr	r3, [pc, #132]	; (800c7c4 <_dtoa_r+0x2e4>)
 800c73e:	f240 11af 	movw	r1, #431	; 0x1af
 800c742:	e6e5      	b.n	800c510 <_dtoa_r+0x30>
 800c744:	2201      	movs	r2, #1
 800c746:	e7de      	b.n	800c706 <_dtoa_r+0x226>
 800c748:	2200      	movs	r2, #0
 800c74a:	9207      	str	r2, [sp, #28]
 800c74c:	9a08      	ldr	r2, [sp, #32]
 800c74e:	eb0b 0a02 	add.w	sl, fp, r2
 800c752:	f10a 0901 	add.w	r9, sl, #1
 800c756:	464a      	mov	r2, r9
 800c758:	2a01      	cmp	r2, #1
 800c75a:	bfb8      	it	lt
 800c75c:	2201      	movlt	r2, #1
 800c75e:	e7dc      	b.n	800c71a <_dtoa_r+0x23a>
 800c760:	2201      	movs	r2, #1
 800c762:	e7f2      	b.n	800c74a <_dtoa_r+0x26a>
 800c764:	2401      	movs	r4, #1
 800c766:	2200      	movs	r2, #0
 800c768:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800c76c:	f04f 3aff 	mov.w	sl, #4294967295
 800c770:	2100      	movs	r1, #0
 800c772:	46d1      	mov	r9, sl
 800c774:	2212      	movs	r2, #18
 800c776:	9108      	str	r1, [sp, #32]
 800c778:	e7cf      	b.n	800c71a <_dtoa_r+0x23a>
 800c77a:	2201      	movs	r2, #1
 800c77c:	9207      	str	r2, [sp, #28]
 800c77e:	e7f5      	b.n	800c76c <_dtoa_r+0x28c>
 800c780:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c784:	46d1      	mov	r9, sl
 800c786:	4652      	mov	r2, sl
 800c788:	e7c7      	b.n	800c71a <_dtoa_r+0x23a>
 800c78a:	3101      	adds	r1, #1
 800c78c:	0040      	lsls	r0, r0, #1
 800c78e:	e7c7      	b.n	800c720 <_dtoa_r+0x240>
 800c790:	636f4361 	.word	0x636f4361
 800c794:	3fd287a7 	.word	0x3fd287a7
 800c798:	8b60c8b3 	.word	0x8b60c8b3
 800c79c:	3fc68a28 	.word	0x3fc68a28
 800c7a0:	509f79fb 	.word	0x509f79fb
 800c7a4:	3fd34413 	.word	0x3fd34413
 800c7a8:	0800e301 	.word	0x0800e301
 800c7ac:	0800e318 	.word	0x0800e318
 800c7b0:	7ff00000 	.word	0x7ff00000
 800c7b4:	0800e2fd 	.word	0x0800e2fd
 800c7b8:	0800e2f4 	.word	0x0800e2f4
 800c7bc:	0800e2d1 	.word	0x0800e2d1
 800c7c0:	0800e408 	.word	0x0800e408
 800c7c4:	0800e370 	.word	0x0800e370
 800c7c8:	69f2      	ldr	r2, [r6, #28]
 800c7ca:	9901      	ldr	r1, [sp, #4]
 800c7cc:	6011      	str	r1, [r2, #0]
 800c7ce:	f1b9 0f0e 	cmp.w	r9, #14
 800c7d2:	d86c      	bhi.n	800c8ae <_dtoa_r+0x3ce>
 800c7d4:	2c00      	cmp	r4, #0
 800c7d6:	d06a      	beq.n	800c8ae <_dtoa_r+0x3ce>
 800c7d8:	f1bb 0f00 	cmp.w	fp, #0
 800c7dc:	f340 80a0 	ble.w	800c920 <_dtoa_r+0x440>
 800c7e0:	4ac1      	ldr	r2, [pc, #772]	; (800cae8 <_dtoa_r+0x608>)
 800c7e2:	f00b 010f 	and.w	r1, fp, #15
 800c7e6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800c7ea:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c7ee:	ed92 7b00 	vldr	d7, [r2]
 800c7f2:	ea4f 122b 	mov.w	r2, fp, asr #4
 800c7f6:	f000 8087 	beq.w	800c908 <_dtoa_r+0x428>
 800c7fa:	49bc      	ldr	r1, [pc, #752]	; (800caec <_dtoa_r+0x60c>)
 800c7fc:	ed91 6b08 	vldr	d6, [r1, #32]
 800c800:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800c804:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c808:	f002 020f 	and.w	r2, r2, #15
 800c80c:	2103      	movs	r1, #3
 800c80e:	48b7      	ldr	r0, [pc, #732]	; (800caec <_dtoa_r+0x60c>)
 800c810:	2a00      	cmp	r2, #0
 800c812:	d17b      	bne.n	800c90c <_dtoa_r+0x42c>
 800c814:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c818:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c81c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c820:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c822:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c826:	2a00      	cmp	r2, #0
 800c828:	f000 80a0 	beq.w	800c96c <_dtoa_r+0x48c>
 800c82c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800c830:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c838:	f140 8098 	bpl.w	800c96c <_dtoa_r+0x48c>
 800c83c:	f1b9 0f00 	cmp.w	r9, #0
 800c840:	f000 8094 	beq.w	800c96c <_dtoa_r+0x48c>
 800c844:	f1ba 0f00 	cmp.w	sl, #0
 800c848:	dd2f      	ble.n	800c8aa <_dtoa_r+0x3ca>
 800c84a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800c84e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c852:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c856:	f10b 32ff 	add.w	r2, fp, #4294967295
 800c85a:	3101      	adds	r1, #1
 800c85c:	4654      	mov	r4, sl
 800c85e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c862:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800c866:	ee07 1a90 	vmov	s15, r1
 800c86a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c86e:	eea7 5b06 	vfma.f64	d5, d7, d6
 800c872:	ee15 7a90 	vmov	r7, s11
 800c876:	ec51 0b15 	vmov	r0, r1, d5
 800c87a:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800c87e:	2c00      	cmp	r4, #0
 800c880:	d177      	bne.n	800c972 <_dtoa_r+0x492>
 800c882:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800c886:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c88a:	ec41 0b17 	vmov	d7, r0, r1
 800c88e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c896:	f300 826a 	bgt.w	800cd6e <_dtoa_r+0x88e>
 800c89a:	eeb1 7b47 	vneg.f64	d7, d7
 800c89e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c8a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8a6:	f100 8260 	bmi.w	800cd6a <_dtoa_r+0x88a>
 800c8aa:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c8ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c8b0:	2a00      	cmp	r2, #0
 800c8b2:	f2c0 811d 	blt.w	800caf0 <_dtoa_r+0x610>
 800c8b6:	f1bb 0f0e 	cmp.w	fp, #14
 800c8ba:	f300 8119 	bgt.w	800caf0 <_dtoa_r+0x610>
 800c8be:	4b8a      	ldr	r3, [pc, #552]	; (800cae8 <_dtoa_r+0x608>)
 800c8c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c8c4:	ed93 6b00 	vldr	d6, [r3]
 800c8c8:	9b08      	ldr	r3, [sp, #32]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	f280 80b7 	bge.w	800ca3e <_dtoa_r+0x55e>
 800c8d0:	f1b9 0f00 	cmp.w	r9, #0
 800c8d4:	f300 80b3 	bgt.w	800ca3e <_dtoa_r+0x55e>
 800c8d8:	f040 8246 	bne.w	800cd68 <_dtoa_r+0x888>
 800c8dc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800c8e0:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c8e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c8e8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c8ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8f0:	464c      	mov	r4, r9
 800c8f2:	464f      	mov	r7, r9
 800c8f4:	f280 821c 	bge.w	800cd30 <_dtoa_r+0x850>
 800c8f8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c8fc:	2331      	movs	r3, #49	; 0x31
 800c8fe:	f808 3b01 	strb.w	r3, [r8], #1
 800c902:	f10b 0b01 	add.w	fp, fp, #1
 800c906:	e218      	b.n	800cd3a <_dtoa_r+0x85a>
 800c908:	2102      	movs	r1, #2
 800c90a:	e780      	b.n	800c80e <_dtoa_r+0x32e>
 800c90c:	07d4      	lsls	r4, r2, #31
 800c90e:	d504      	bpl.n	800c91a <_dtoa_r+0x43a>
 800c910:	ed90 6b00 	vldr	d6, [r0]
 800c914:	3101      	adds	r1, #1
 800c916:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c91a:	1052      	asrs	r2, r2, #1
 800c91c:	3008      	adds	r0, #8
 800c91e:	e777      	b.n	800c810 <_dtoa_r+0x330>
 800c920:	d022      	beq.n	800c968 <_dtoa_r+0x488>
 800c922:	f1cb 0200 	rsb	r2, fp, #0
 800c926:	4970      	ldr	r1, [pc, #448]	; (800cae8 <_dtoa_r+0x608>)
 800c928:	f002 000f 	and.w	r0, r2, #15
 800c92c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c930:	ed91 7b00 	vldr	d7, [r1]
 800c934:	ee28 7b07 	vmul.f64	d7, d8, d7
 800c938:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c93c:	486b      	ldr	r0, [pc, #428]	; (800caec <_dtoa_r+0x60c>)
 800c93e:	1112      	asrs	r2, r2, #4
 800c940:	2400      	movs	r4, #0
 800c942:	2102      	movs	r1, #2
 800c944:	b92a      	cbnz	r2, 800c952 <_dtoa_r+0x472>
 800c946:	2c00      	cmp	r4, #0
 800c948:	f43f af6a 	beq.w	800c820 <_dtoa_r+0x340>
 800c94c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c950:	e766      	b.n	800c820 <_dtoa_r+0x340>
 800c952:	07d7      	lsls	r7, r2, #31
 800c954:	d505      	bpl.n	800c962 <_dtoa_r+0x482>
 800c956:	ed90 6b00 	vldr	d6, [r0]
 800c95a:	3101      	adds	r1, #1
 800c95c:	2401      	movs	r4, #1
 800c95e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c962:	1052      	asrs	r2, r2, #1
 800c964:	3008      	adds	r0, #8
 800c966:	e7ed      	b.n	800c944 <_dtoa_r+0x464>
 800c968:	2102      	movs	r1, #2
 800c96a:	e759      	b.n	800c820 <_dtoa_r+0x340>
 800c96c:	465a      	mov	r2, fp
 800c96e:	464c      	mov	r4, r9
 800c970:	e775      	b.n	800c85e <_dtoa_r+0x37e>
 800c972:	ec41 0b17 	vmov	d7, r0, r1
 800c976:	495c      	ldr	r1, [pc, #368]	; (800cae8 <_dtoa_r+0x608>)
 800c978:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800c97c:	ed11 4b02 	vldr	d4, [r1, #-8]
 800c980:	9901      	ldr	r1, [sp, #4]
 800c982:	440c      	add	r4, r1
 800c984:	9907      	ldr	r1, [sp, #28]
 800c986:	b351      	cbz	r1, 800c9de <_dtoa_r+0x4fe>
 800c988:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800c98c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800c990:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c994:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800c998:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800c99c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c9a0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c9a4:	ee14 1a90 	vmov	r1, s9
 800c9a8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c9ac:	3130      	adds	r1, #48	; 0x30
 800c9ae:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c9b2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c9b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9ba:	f808 1b01 	strb.w	r1, [r8], #1
 800c9be:	d439      	bmi.n	800ca34 <_dtoa_r+0x554>
 800c9c0:	ee32 5b46 	vsub.f64	d5, d2, d6
 800c9c4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800c9c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9cc:	d472      	bmi.n	800cab4 <_dtoa_r+0x5d4>
 800c9ce:	45a0      	cmp	r8, r4
 800c9d0:	f43f af6b 	beq.w	800c8aa <_dtoa_r+0x3ca>
 800c9d4:	ee27 7b03 	vmul.f64	d7, d7, d3
 800c9d8:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c9dc:	e7e0      	b.n	800c9a0 <_dtoa_r+0x4c0>
 800c9de:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c9e2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c9e6:	4620      	mov	r0, r4
 800c9e8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800c9ec:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c9f0:	ee14 1a90 	vmov	r1, s9
 800c9f4:	3130      	adds	r1, #48	; 0x30
 800c9f6:	f808 1b01 	strb.w	r1, [r8], #1
 800c9fa:	45a0      	cmp	r8, r4
 800c9fc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ca00:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ca04:	d118      	bne.n	800ca38 <_dtoa_r+0x558>
 800ca06:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ca0a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800ca0e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800ca12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca16:	dc4d      	bgt.n	800cab4 <_dtoa_r+0x5d4>
 800ca18:	ee35 5b47 	vsub.f64	d5, d5, d7
 800ca1c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800ca20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca24:	f57f af41 	bpl.w	800c8aa <_dtoa_r+0x3ca>
 800ca28:	4680      	mov	r8, r0
 800ca2a:	3801      	subs	r0, #1
 800ca2c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800ca30:	2b30      	cmp	r3, #48	; 0x30
 800ca32:	d0f9      	beq.n	800ca28 <_dtoa_r+0x548>
 800ca34:	4693      	mov	fp, r2
 800ca36:	e02a      	b.n	800ca8e <_dtoa_r+0x5ae>
 800ca38:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ca3c:	e7d6      	b.n	800c9ec <_dtoa_r+0x50c>
 800ca3e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ca42:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800ca46:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ca4a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800ca4e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800ca52:	ee15 3a10 	vmov	r3, s10
 800ca56:	3330      	adds	r3, #48	; 0x30
 800ca58:	f808 3b01 	strb.w	r3, [r8], #1
 800ca5c:	9b01      	ldr	r3, [sp, #4]
 800ca5e:	eba8 0303 	sub.w	r3, r8, r3
 800ca62:	4599      	cmp	r9, r3
 800ca64:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800ca68:	eea3 7b46 	vfms.f64	d7, d3, d6
 800ca6c:	d133      	bne.n	800cad6 <_dtoa_r+0x5f6>
 800ca6e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800ca72:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ca76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca7a:	dc1a      	bgt.n	800cab2 <_dtoa_r+0x5d2>
 800ca7c:	eeb4 7b46 	vcmp.f64	d7, d6
 800ca80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca84:	d103      	bne.n	800ca8e <_dtoa_r+0x5ae>
 800ca86:	ee15 3a10 	vmov	r3, s10
 800ca8a:	07d9      	lsls	r1, r3, #31
 800ca8c:	d411      	bmi.n	800cab2 <_dtoa_r+0x5d2>
 800ca8e:	4629      	mov	r1, r5
 800ca90:	4630      	mov	r0, r6
 800ca92:	f000 fb1d 	bl	800d0d0 <_Bfree>
 800ca96:	2300      	movs	r3, #0
 800ca98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ca9a:	f888 3000 	strb.w	r3, [r8]
 800ca9e:	f10b 0301 	add.w	r3, fp, #1
 800caa2:	6013      	str	r3, [r2, #0]
 800caa4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	f43f ad69 	beq.w	800c57e <_dtoa_r+0x9e>
 800caac:	f8c3 8000 	str.w	r8, [r3]
 800cab0:	e565      	b.n	800c57e <_dtoa_r+0x9e>
 800cab2:	465a      	mov	r2, fp
 800cab4:	4643      	mov	r3, r8
 800cab6:	4698      	mov	r8, r3
 800cab8:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800cabc:	2939      	cmp	r1, #57	; 0x39
 800cabe:	d106      	bne.n	800cace <_dtoa_r+0x5ee>
 800cac0:	9901      	ldr	r1, [sp, #4]
 800cac2:	4299      	cmp	r1, r3
 800cac4:	d1f7      	bne.n	800cab6 <_dtoa_r+0x5d6>
 800cac6:	9801      	ldr	r0, [sp, #4]
 800cac8:	2130      	movs	r1, #48	; 0x30
 800caca:	3201      	adds	r2, #1
 800cacc:	7001      	strb	r1, [r0, #0]
 800cace:	7819      	ldrb	r1, [r3, #0]
 800cad0:	3101      	adds	r1, #1
 800cad2:	7019      	strb	r1, [r3, #0]
 800cad4:	e7ae      	b.n	800ca34 <_dtoa_r+0x554>
 800cad6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800cada:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cae2:	d1b2      	bne.n	800ca4a <_dtoa_r+0x56a>
 800cae4:	e7d3      	b.n	800ca8e <_dtoa_r+0x5ae>
 800cae6:	bf00      	nop
 800cae8:	0800e408 	.word	0x0800e408
 800caec:	0800e3e0 	.word	0x0800e3e0
 800caf0:	9907      	ldr	r1, [sp, #28]
 800caf2:	2900      	cmp	r1, #0
 800caf4:	f000 80d0 	beq.w	800cc98 <_dtoa_r+0x7b8>
 800caf8:	9906      	ldr	r1, [sp, #24]
 800cafa:	2901      	cmp	r1, #1
 800cafc:	f300 80b4 	bgt.w	800cc68 <_dtoa_r+0x788>
 800cb00:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cb02:	2900      	cmp	r1, #0
 800cb04:	f000 80ac 	beq.w	800cc60 <_dtoa_r+0x780>
 800cb08:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800cb0c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800cb10:	461c      	mov	r4, r3
 800cb12:	9309      	str	r3, [sp, #36]	; 0x24
 800cb14:	9b04      	ldr	r3, [sp, #16]
 800cb16:	4413      	add	r3, r2
 800cb18:	9304      	str	r3, [sp, #16]
 800cb1a:	9b05      	ldr	r3, [sp, #20]
 800cb1c:	2101      	movs	r1, #1
 800cb1e:	4413      	add	r3, r2
 800cb20:	4630      	mov	r0, r6
 800cb22:	9305      	str	r3, [sp, #20]
 800cb24:	f000 fb8a 	bl	800d23c <__i2b>
 800cb28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb2a:	4607      	mov	r7, r0
 800cb2c:	f1b8 0f00 	cmp.w	r8, #0
 800cb30:	d00d      	beq.n	800cb4e <_dtoa_r+0x66e>
 800cb32:	9a05      	ldr	r2, [sp, #20]
 800cb34:	2a00      	cmp	r2, #0
 800cb36:	dd0a      	ble.n	800cb4e <_dtoa_r+0x66e>
 800cb38:	4542      	cmp	r2, r8
 800cb3a:	9904      	ldr	r1, [sp, #16]
 800cb3c:	bfa8      	it	ge
 800cb3e:	4642      	movge	r2, r8
 800cb40:	1a89      	subs	r1, r1, r2
 800cb42:	9104      	str	r1, [sp, #16]
 800cb44:	9905      	ldr	r1, [sp, #20]
 800cb46:	eba8 0802 	sub.w	r8, r8, r2
 800cb4a:	1a8a      	subs	r2, r1, r2
 800cb4c:	9205      	str	r2, [sp, #20]
 800cb4e:	b303      	cbz	r3, 800cb92 <_dtoa_r+0x6b2>
 800cb50:	9a07      	ldr	r2, [sp, #28]
 800cb52:	2a00      	cmp	r2, #0
 800cb54:	f000 80a5 	beq.w	800cca2 <_dtoa_r+0x7c2>
 800cb58:	2c00      	cmp	r4, #0
 800cb5a:	dd13      	ble.n	800cb84 <_dtoa_r+0x6a4>
 800cb5c:	4639      	mov	r1, r7
 800cb5e:	4622      	mov	r2, r4
 800cb60:	4630      	mov	r0, r6
 800cb62:	930d      	str	r3, [sp, #52]	; 0x34
 800cb64:	f000 fc2a 	bl	800d3bc <__pow5mult>
 800cb68:	462a      	mov	r2, r5
 800cb6a:	4601      	mov	r1, r0
 800cb6c:	4607      	mov	r7, r0
 800cb6e:	4630      	mov	r0, r6
 800cb70:	f000 fb7a 	bl	800d268 <__multiply>
 800cb74:	4629      	mov	r1, r5
 800cb76:	9009      	str	r0, [sp, #36]	; 0x24
 800cb78:	4630      	mov	r0, r6
 800cb7a:	f000 faa9 	bl	800d0d0 <_Bfree>
 800cb7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb82:	4615      	mov	r5, r2
 800cb84:	1b1a      	subs	r2, r3, r4
 800cb86:	d004      	beq.n	800cb92 <_dtoa_r+0x6b2>
 800cb88:	4629      	mov	r1, r5
 800cb8a:	4630      	mov	r0, r6
 800cb8c:	f000 fc16 	bl	800d3bc <__pow5mult>
 800cb90:	4605      	mov	r5, r0
 800cb92:	2101      	movs	r1, #1
 800cb94:	4630      	mov	r0, r6
 800cb96:	f000 fb51 	bl	800d23c <__i2b>
 800cb9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	4604      	mov	r4, r0
 800cba0:	f340 8081 	ble.w	800cca6 <_dtoa_r+0x7c6>
 800cba4:	461a      	mov	r2, r3
 800cba6:	4601      	mov	r1, r0
 800cba8:	4630      	mov	r0, r6
 800cbaa:	f000 fc07 	bl	800d3bc <__pow5mult>
 800cbae:	9b06      	ldr	r3, [sp, #24]
 800cbb0:	2b01      	cmp	r3, #1
 800cbb2:	4604      	mov	r4, r0
 800cbb4:	dd7a      	ble.n	800ccac <_dtoa_r+0x7cc>
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	9309      	str	r3, [sp, #36]	; 0x24
 800cbba:	6922      	ldr	r2, [r4, #16]
 800cbbc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800cbc0:	6910      	ldr	r0, [r2, #16]
 800cbc2:	f000 faed 	bl	800d1a0 <__hi0bits>
 800cbc6:	f1c0 0020 	rsb	r0, r0, #32
 800cbca:	9b05      	ldr	r3, [sp, #20]
 800cbcc:	4418      	add	r0, r3
 800cbce:	f010 001f 	ands.w	r0, r0, #31
 800cbd2:	f000 8093 	beq.w	800ccfc <_dtoa_r+0x81c>
 800cbd6:	f1c0 0220 	rsb	r2, r0, #32
 800cbda:	2a04      	cmp	r2, #4
 800cbdc:	f340 8085 	ble.w	800ccea <_dtoa_r+0x80a>
 800cbe0:	9b04      	ldr	r3, [sp, #16]
 800cbe2:	f1c0 001c 	rsb	r0, r0, #28
 800cbe6:	4403      	add	r3, r0
 800cbe8:	9304      	str	r3, [sp, #16]
 800cbea:	9b05      	ldr	r3, [sp, #20]
 800cbec:	4480      	add	r8, r0
 800cbee:	4403      	add	r3, r0
 800cbf0:	9305      	str	r3, [sp, #20]
 800cbf2:	9b04      	ldr	r3, [sp, #16]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	dd05      	ble.n	800cc04 <_dtoa_r+0x724>
 800cbf8:	4629      	mov	r1, r5
 800cbfa:	461a      	mov	r2, r3
 800cbfc:	4630      	mov	r0, r6
 800cbfe:	f000 fc37 	bl	800d470 <__lshift>
 800cc02:	4605      	mov	r5, r0
 800cc04:	9b05      	ldr	r3, [sp, #20]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	dd05      	ble.n	800cc16 <_dtoa_r+0x736>
 800cc0a:	4621      	mov	r1, r4
 800cc0c:	461a      	mov	r2, r3
 800cc0e:	4630      	mov	r0, r6
 800cc10:	f000 fc2e 	bl	800d470 <__lshift>
 800cc14:	4604      	mov	r4, r0
 800cc16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d071      	beq.n	800cd00 <_dtoa_r+0x820>
 800cc1c:	4621      	mov	r1, r4
 800cc1e:	4628      	mov	r0, r5
 800cc20:	f000 fc92 	bl	800d548 <__mcmp>
 800cc24:	2800      	cmp	r0, #0
 800cc26:	da6b      	bge.n	800cd00 <_dtoa_r+0x820>
 800cc28:	2300      	movs	r3, #0
 800cc2a:	4629      	mov	r1, r5
 800cc2c:	220a      	movs	r2, #10
 800cc2e:	4630      	mov	r0, r6
 800cc30:	f000 fa70 	bl	800d114 <__multadd>
 800cc34:	9b07      	ldr	r3, [sp, #28]
 800cc36:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cc3a:	4605      	mov	r5, r0
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	f000 8197 	beq.w	800cf70 <_dtoa_r+0xa90>
 800cc42:	4639      	mov	r1, r7
 800cc44:	2300      	movs	r3, #0
 800cc46:	220a      	movs	r2, #10
 800cc48:	4630      	mov	r0, r6
 800cc4a:	f000 fa63 	bl	800d114 <__multadd>
 800cc4e:	f1ba 0f00 	cmp.w	sl, #0
 800cc52:	4607      	mov	r7, r0
 800cc54:	f300 8093 	bgt.w	800cd7e <_dtoa_r+0x89e>
 800cc58:	9b06      	ldr	r3, [sp, #24]
 800cc5a:	2b02      	cmp	r3, #2
 800cc5c:	dc57      	bgt.n	800cd0e <_dtoa_r+0x82e>
 800cc5e:	e08e      	b.n	800cd7e <_dtoa_r+0x89e>
 800cc60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cc62:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800cc66:	e751      	b.n	800cb0c <_dtoa_r+0x62c>
 800cc68:	f109 34ff 	add.w	r4, r9, #4294967295
 800cc6c:	42a3      	cmp	r3, r4
 800cc6e:	bfbf      	itttt	lt
 800cc70:	1ae2      	sublt	r2, r4, r3
 800cc72:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800cc74:	189b      	addlt	r3, r3, r2
 800cc76:	930a      	strlt	r3, [sp, #40]	; 0x28
 800cc78:	bfae      	itee	ge
 800cc7a:	1b1c      	subge	r4, r3, r4
 800cc7c:	4623      	movlt	r3, r4
 800cc7e:	2400      	movlt	r4, #0
 800cc80:	f1b9 0f00 	cmp.w	r9, #0
 800cc84:	bfb5      	itete	lt
 800cc86:	9a04      	ldrlt	r2, [sp, #16]
 800cc88:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800cc8c:	eba2 0809 	sublt.w	r8, r2, r9
 800cc90:	464a      	movge	r2, r9
 800cc92:	bfb8      	it	lt
 800cc94:	2200      	movlt	r2, #0
 800cc96:	e73c      	b.n	800cb12 <_dtoa_r+0x632>
 800cc98:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800cc9c:	9f07      	ldr	r7, [sp, #28]
 800cc9e:	461c      	mov	r4, r3
 800cca0:	e744      	b.n	800cb2c <_dtoa_r+0x64c>
 800cca2:	461a      	mov	r2, r3
 800cca4:	e770      	b.n	800cb88 <_dtoa_r+0x6a8>
 800cca6:	9b06      	ldr	r3, [sp, #24]
 800cca8:	2b01      	cmp	r3, #1
 800ccaa:	dc18      	bgt.n	800ccde <_dtoa_r+0x7fe>
 800ccac:	9b02      	ldr	r3, [sp, #8]
 800ccae:	b9b3      	cbnz	r3, 800ccde <_dtoa_r+0x7fe>
 800ccb0:	9b03      	ldr	r3, [sp, #12]
 800ccb2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800ccb6:	b9a2      	cbnz	r2, 800cce2 <_dtoa_r+0x802>
 800ccb8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ccbc:	0d12      	lsrs	r2, r2, #20
 800ccbe:	0512      	lsls	r2, r2, #20
 800ccc0:	b18a      	cbz	r2, 800cce6 <_dtoa_r+0x806>
 800ccc2:	9b04      	ldr	r3, [sp, #16]
 800ccc4:	3301      	adds	r3, #1
 800ccc6:	9304      	str	r3, [sp, #16]
 800ccc8:	9b05      	ldr	r3, [sp, #20]
 800ccca:	3301      	adds	r3, #1
 800cccc:	9305      	str	r3, [sp, #20]
 800ccce:	2301      	movs	r3, #1
 800ccd0:	9309      	str	r3, [sp, #36]	; 0x24
 800ccd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	f47f af70 	bne.w	800cbba <_dtoa_r+0x6da>
 800ccda:	2001      	movs	r0, #1
 800ccdc:	e775      	b.n	800cbca <_dtoa_r+0x6ea>
 800ccde:	2300      	movs	r3, #0
 800cce0:	e7f6      	b.n	800ccd0 <_dtoa_r+0x7f0>
 800cce2:	9b02      	ldr	r3, [sp, #8]
 800cce4:	e7f4      	b.n	800ccd0 <_dtoa_r+0x7f0>
 800cce6:	9209      	str	r2, [sp, #36]	; 0x24
 800cce8:	e7f3      	b.n	800ccd2 <_dtoa_r+0x7f2>
 800ccea:	d082      	beq.n	800cbf2 <_dtoa_r+0x712>
 800ccec:	9b04      	ldr	r3, [sp, #16]
 800ccee:	321c      	adds	r2, #28
 800ccf0:	4413      	add	r3, r2
 800ccf2:	9304      	str	r3, [sp, #16]
 800ccf4:	9b05      	ldr	r3, [sp, #20]
 800ccf6:	4490      	add	r8, r2
 800ccf8:	4413      	add	r3, r2
 800ccfa:	e779      	b.n	800cbf0 <_dtoa_r+0x710>
 800ccfc:	4602      	mov	r2, r0
 800ccfe:	e7f5      	b.n	800ccec <_dtoa_r+0x80c>
 800cd00:	f1b9 0f00 	cmp.w	r9, #0
 800cd04:	dc36      	bgt.n	800cd74 <_dtoa_r+0x894>
 800cd06:	9b06      	ldr	r3, [sp, #24]
 800cd08:	2b02      	cmp	r3, #2
 800cd0a:	dd33      	ble.n	800cd74 <_dtoa_r+0x894>
 800cd0c:	46ca      	mov	sl, r9
 800cd0e:	f1ba 0f00 	cmp.w	sl, #0
 800cd12:	d10d      	bne.n	800cd30 <_dtoa_r+0x850>
 800cd14:	4621      	mov	r1, r4
 800cd16:	4653      	mov	r3, sl
 800cd18:	2205      	movs	r2, #5
 800cd1a:	4630      	mov	r0, r6
 800cd1c:	f000 f9fa 	bl	800d114 <__multadd>
 800cd20:	4601      	mov	r1, r0
 800cd22:	4604      	mov	r4, r0
 800cd24:	4628      	mov	r0, r5
 800cd26:	f000 fc0f 	bl	800d548 <__mcmp>
 800cd2a:	2800      	cmp	r0, #0
 800cd2c:	f73f ade4 	bgt.w	800c8f8 <_dtoa_r+0x418>
 800cd30:	9b08      	ldr	r3, [sp, #32]
 800cd32:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cd36:	ea6f 0b03 	mvn.w	fp, r3
 800cd3a:	f04f 0900 	mov.w	r9, #0
 800cd3e:	4621      	mov	r1, r4
 800cd40:	4630      	mov	r0, r6
 800cd42:	f000 f9c5 	bl	800d0d0 <_Bfree>
 800cd46:	2f00      	cmp	r7, #0
 800cd48:	f43f aea1 	beq.w	800ca8e <_dtoa_r+0x5ae>
 800cd4c:	f1b9 0f00 	cmp.w	r9, #0
 800cd50:	d005      	beq.n	800cd5e <_dtoa_r+0x87e>
 800cd52:	45b9      	cmp	r9, r7
 800cd54:	d003      	beq.n	800cd5e <_dtoa_r+0x87e>
 800cd56:	4649      	mov	r1, r9
 800cd58:	4630      	mov	r0, r6
 800cd5a:	f000 f9b9 	bl	800d0d0 <_Bfree>
 800cd5e:	4639      	mov	r1, r7
 800cd60:	4630      	mov	r0, r6
 800cd62:	f000 f9b5 	bl	800d0d0 <_Bfree>
 800cd66:	e692      	b.n	800ca8e <_dtoa_r+0x5ae>
 800cd68:	2400      	movs	r4, #0
 800cd6a:	4627      	mov	r7, r4
 800cd6c:	e7e0      	b.n	800cd30 <_dtoa_r+0x850>
 800cd6e:	4693      	mov	fp, r2
 800cd70:	4627      	mov	r7, r4
 800cd72:	e5c1      	b.n	800c8f8 <_dtoa_r+0x418>
 800cd74:	9b07      	ldr	r3, [sp, #28]
 800cd76:	46ca      	mov	sl, r9
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	f000 8100 	beq.w	800cf7e <_dtoa_r+0xa9e>
 800cd7e:	f1b8 0f00 	cmp.w	r8, #0
 800cd82:	dd05      	ble.n	800cd90 <_dtoa_r+0x8b0>
 800cd84:	4639      	mov	r1, r7
 800cd86:	4642      	mov	r2, r8
 800cd88:	4630      	mov	r0, r6
 800cd8a:	f000 fb71 	bl	800d470 <__lshift>
 800cd8e:	4607      	mov	r7, r0
 800cd90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d05d      	beq.n	800ce52 <_dtoa_r+0x972>
 800cd96:	6879      	ldr	r1, [r7, #4]
 800cd98:	4630      	mov	r0, r6
 800cd9a:	f000 f959 	bl	800d050 <_Balloc>
 800cd9e:	4680      	mov	r8, r0
 800cda0:	b928      	cbnz	r0, 800cdae <_dtoa_r+0x8ce>
 800cda2:	4b82      	ldr	r3, [pc, #520]	; (800cfac <_dtoa_r+0xacc>)
 800cda4:	4602      	mov	r2, r0
 800cda6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800cdaa:	f7ff bbb1 	b.w	800c510 <_dtoa_r+0x30>
 800cdae:	693a      	ldr	r2, [r7, #16]
 800cdb0:	3202      	adds	r2, #2
 800cdb2:	0092      	lsls	r2, r2, #2
 800cdb4:	f107 010c 	add.w	r1, r7, #12
 800cdb8:	300c      	adds	r0, #12
 800cdba:	f000 fee5 	bl	800db88 <memcpy>
 800cdbe:	2201      	movs	r2, #1
 800cdc0:	4641      	mov	r1, r8
 800cdc2:	4630      	mov	r0, r6
 800cdc4:	f000 fb54 	bl	800d470 <__lshift>
 800cdc8:	9b01      	ldr	r3, [sp, #4]
 800cdca:	3301      	adds	r3, #1
 800cdcc:	9304      	str	r3, [sp, #16]
 800cdce:	9b01      	ldr	r3, [sp, #4]
 800cdd0:	4453      	add	r3, sl
 800cdd2:	9308      	str	r3, [sp, #32]
 800cdd4:	9b02      	ldr	r3, [sp, #8]
 800cdd6:	f003 0301 	and.w	r3, r3, #1
 800cdda:	46b9      	mov	r9, r7
 800cddc:	9307      	str	r3, [sp, #28]
 800cdde:	4607      	mov	r7, r0
 800cde0:	9b04      	ldr	r3, [sp, #16]
 800cde2:	4621      	mov	r1, r4
 800cde4:	3b01      	subs	r3, #1
 800cde6:	4628      	mov	r0, r5
 800cde8:	9302      	str	r3, [sp, #8]
 800cdea:	f7ff faf0 	bl	800c3ce <quorem>
 800cdee:	4603      	mov	r3, r0
 800cdf0:	3330      	adds	r3, #48	; 0x30
 800cdf2:	9005      	str	r0, [sp, #20]
 800cdf4:	4649      	mov	r1, r9
 800cdf6:	4628      	mov	r0, r5
 800cdf8:	9309      	str	r3, [sp, #36]	; 0x24
 800cdfa:	f000 fba5 	bl	800d548 <__mcmp>
 800cdfe:	463a      	mov	r2, r7
 800ce00:	4682      	mov	sl, r0
 800ce02:	4621      	mov	r1, r4
 800ce04:	4630      	mov	r0, r6
 800ce06:	f000 fbbb 	bl	800d580 <__mdiff>
 800ce0a:	68c2      	ldr	r2, [r0, #12]
 800ce0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce0e:	4680      	mov	r8, r0
 800ce10:	bb0a      	cbnz	r2, 800ce56 <_dtoa_r+0x976>
 800ce12:	4601      	mov	r1, r0
 800ce14:	4628      	mov	r0, r5
 800ce16:	f000 fb97 	bl	800d548 <__mcmp>
 800ce1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce1c:	4602      	mov	r2, r0
 800ce1e:	4641      	mov	r1, r8
 800ce20:	4630      	mov	r0, r6
 800ce22:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800ce26:	f000 f953 	bl	800d0d0 <_Bfree>
 800ce2a:	9b06      	ldr	r3, [sp, #24]
 800ce2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce2e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ce32:	ea43 0102 	orr.w	r1, r3, r2
 800ce36:	9b07      	ldr	r3, [sp, #28]
 800ce38:	4319      	orrs	r1, r3
 800ce3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce3c:	d10d      	bne.n	800ce5a <_dtoa_r+0x97a>
 800ce3e:	2b39      	cmp	r3, #57	; 0x39
 800ce40:	d029      	beq.n	800ce96 <_dtoa_r+0x9b6>
 800ce42:	f1ba 0f00 	cmp.w	sl, #0
 800ce46:	dd01      	ble.n	800ce4c <_dtoa_r+0x96c>
 800ce48:	9b05      	ldr	r3, [sp, #20]
 800ce4a:	3331      	adds	r3, #49	; 0x31
 800ce4c:	9a02      	ldr	r2, [sp, #8]
 800ce4e:	7013      	strb	r3, [r2, #0]
 800ce50:	e775      	b.n	800cd3e <_dtoa_r+0x85e>
 800ce52:	4638      	mov	r0, r7
 800ce54:	e7b8      	b.n	800cdc8 <_dtoa_r+0x8e8>
 800ce56:	2201      	movs	r2, #1
 800ce58:	e7e1      	b.n	800ce1e <_dtoa_r+0x93e>
 800ce5a:	f1ba 0f00 	cmp.w	sl, #0
 800ce5e:	db06      	blt.n	800ce6e <_dtoa_r+0x98e>
 800ce60:	9906      	ldr	r1, [sp, #24]
 800ce62:	ea41 0a0a 	orr.w	sl, r1, sl
 800ce66:	9907      	ldr	r1, [sp, #28]
 800ce68:	ea5a 0a01 	orrs.w	sl, sl, r1
 800ce6c:	d120      	bne.n	800ceb0 <_dtoa_r+0x9d0>
 800ce6e:	2a00      	cmp	r2, #0
 800ce70:	ddec      	ble.n	800ce4c <_dtoa_r+0x96c>
 800ce72:	4629      	mov	r1, r5
 800ce74:	2201      	movs	r2, #1
 800ce76:	4630      	mov	r0, r6
 800ce78:	9304      	str	r3, [sp, #16]
 800ce7a:	f000 faf9 	bl	800d470 <__lshift>
 800ce7e:	4621      	mov	r1, r4
 800ce80:	4605      	mov	r5, r0
 800ce82:	f000 fb61 	bl	800d548 <__mcmp>
 800ce86:	2800      	cmp	r0, #0
 800ce88:	9b04      	ldr	r3, [sp, #16]
 800ce8a:	dc02      	bgt.n	800ce92 <_dtoa_r+0x9b2>
 800ce8c:	d1de      	bne.n	800ce4c <_dtoa_r+0x96c>
 800ce8e:	07da      	lsls	r2, r3, #31
 800ce90:	d5dc      	bpl.n	800ce4c <_dtoa_r+0x96c>
 800ce92:	2b39      	cmp	r3, #57	; 0x39
 800ce94:	d1d8      	bne.n	800ce48 <_dtoa_r+0x968>
 800ce96:	9a02      	ldr	r2, [sp, #8]
 800ce98:	2339      	movs	r3, #57	; 0x39
 800ce9a:	7013      	strb	r3, [r2, #0]
 800ce9c:	4643      	mov	r3, r8
 800ce9e:	4698      	mov	r8, r3
 800cea0:	3b01      	subs	r3, #1
 800cea2:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800cea6:	2a39      	cmp	r2, #57	; 0x39
 800cea8:	d051      	beq.n	800cf4e <_dtoa_r+0xa6e>
 800ceaa:	3201      	adds	r2, #1
 800ceac:	701a      	strb	r2, [r3, #0]
 800ceae:	e746      	b.n	800cd3e <_dtoa_r+0x85e>
 800ceb0:	2a00      	cmp	r2, #0
 800ceb2:	dd03      	ble.n	800cebc <_dtoa_r+0x9dc>
 800ceb4:	2b39      	cmp	r3, #57	; 0x39
 800ceb6:	d0ee      	beq.n	800ce96 <_dtoa_r+0x9b6>
 800ceb8:	3301      	adds	r3, #1
 800ceba:	e7c7      	b.n	800ce4c <_dtoa_r+0x96c>
 800cebc:	9a04      	ldr	r2, [sp, #16]
 800cebe:	9908      	ldr	r1, [sp, #32]
 800cec0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800cec4:	428a      	cmp	r2, r1
 800cec6:	d02b      	beq.n	800cf20 <_dtoa_r+0xa40>
 800cec8:	4629      	mov	r1, r5
 800ceca:	2300      	movs	r3, #0
 800cecc:	220a      	movs	r2, #10
 800cece:	4630      	mov	r0, r6
 800ced0:	f000 f920 	bl	800d114 <__multadd>
 800ced4:	45b9      	cmp	r9, r7
 800ced6:	4605      	mov	r5, r0
 800ced8:	f04f 0300 	mov.w	r3, #0
 800cedc:	f04f 020a 	mov.w	r2, #10
 800cee0:	4649      	mov	r1, r9
 800cee2:	4630      	mov	r0, r6
 800cee4:	d107      	bne.n	800cef6 <_dtoa_r+0xa16>
 800cee6:	f000 f915 	bl	800d114 <__multadd>
 800ceea:	4681      	mov	r9, r0
 800ceec:	4607      	mov	r7, r0
 800ceee:	9b04      	ldr	r3, [sp, #16]
 800cef0:	3301      	adds	r3, #1
 800cef2:	9304      	str	r3, [sp, #16]
 800cef4:	e774      	b.n	800cde0 <_dtoa_r+0x900>
 800cef6:	f000 f90d 	bl	800d114 <__multadd>
 800cefa:	4639      	mov	r1, r7
 800cefc:	4681      	mov	r9, r0
 800cefe:	2300      	movs	r3, #0
 800cf00:	220a      	movs	r2, #10
 800cf02:	4630      	mov	r0, r6
 800cf04:	f000 f906 	bl	800d114 <__multadd>
 800cf08:	4607      	mov	r7, r0
 800cf0a:	e7f0      	b.n	800ceee <_dtoa_r+0xa0e>
 800cf0c:	f1ba 0f00 	cmp.w	sl, #0
 800cf10:	9a01      	ldr	r2, [sp, #4]
 800cf12:	bfcc      	ite	gt
 800cf14:	46d0      	movgt	r8, sl
 800cf16:	f04f 0801 	movle.w	r8, #1
 800cf1a:	4490      	add	r8, r2
 800cf1c:	f04f 0900 	mov.w	r9, #0
 800cf20:	4629      	mov	r1, r5
 800cf22:	2201      	movs	r2, #1
 800cf24:	4630      	mov	r0, r6
 800cf26:	9302      	str	r3, [sp, #8]
 800cf28:	f000 faa2 	bl	800d470 <__lshift>
 800cf2c:	4621      	mov	r1, r4
 800cf2e:	4605      	mov	r5, r0
 800cf30:	f000 fb0a 	bl	800d548 <__mcmp>
 800cf34:	2800      	cmp	r0, #0
 800cf36:	dcb1      	bgt.n	800ce9c <_dtoa_r+0x9bc>
 800cf38:	d102      	bne.n	800cf40 <_dtoa_r+0xa60>
 800cf3a:	9b02      	ldr	r3, [sp, #8]
 800cf3c:	07db      	lsls	r3, r3, #31
 800cf3e:	d4ad      	bmi.n	800ce9c <_dtoa_r+0x9bc>
 800cf40:	4643      	mov	r3, r8
 800cf42:	4698      	mov	r8, r3
 800cf44:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cf48:	2a30      	cmp	r2, #48	; 0x30
 800cf4a:	d0fa      	beq.n	800cf42 <_dtoa_r+0xa62>
 800cf4c:	e6f7      	b.n	800cd3e <_dtoa_r+0x85e>
 800cf4e:	9a01      	ldr	r2, [sp, #4]
 800cf50:	429a      	cmp	r2, r3
 800cf52:	d1a4      	bne.n	800ce9e <_dtoa_r+0x9be>
 800cf54:	f10b 0b01 	add.w	fp, fp, #1
 800cf58:	2331      	movs	r3, #49	; 0x31
 800cf5a:	e778      	b.n	800ce4e <_dtoa_r+0x96e>
 800cf5c:	4b14      	ldr	r3, [pc, #80]	; (800cfb0 <_dtoa_r+0xad0>)
 800cf5e:	f7ff bb2a 	b.w	800c5b6 <_dtoa_r+0xd6>
 800cf62:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	f47f ab05 	bne.w	800c574 <_dtoa_r+0x94>
 800cf6a:	4b12      	ldr	r3, [pc, #72]	; (800cfb4 <_dtoa_r+0xad4>)
 800cf6c:	f7ff bb23 	b.w	800c5b6 <_dtoa_r+0xd6>
 800cf70:	f1ba 0f00 	cmp.w	sl, #0
 800cf74:	dc03      	bgt.n	800cf7e <_dtoa_r+0xa9e>
 800cf76:	9b06      	ldr	r3, [sp, #24]
 800cf78:	2b02      	cmp	r3, #2
 800cf7a:	f73f aec8 	bgt.w	800cd0e <_dtoa_r+0x82e>
 800cf7e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cf82:	4621      	mov	r1, r4
 800cf84:	4628      	mov	r0, r5
 800cf86:	f7ff fa22 	bl	800c3ce <quorem>
 800cf8a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800cf8e:	f808 3b01 	strb.w	r3, [r8], #1
 800cf92:	9a01      	ldr	r2, [sp, #4]
 800cf94:	eba8 0202 	sub.w	r2, r8, r2
 800cf98:	4592      	cmp	sl, r2
 800cf9a:	ddb7      	ble.n	800cf0c <_dtoa_r+0xa2c>
 800cf9c:	4629      	mov	r1, r5
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	220a      	movs	r2, #10
 800cfa2:	4630      	mov	r0, r6
 800cfa4:	f000 f8b6 	bl	800d114 <__multadd>
 800cfa8:	4605      	mov	r5, r0
 800cfaa:	e7ea      	b.n	800cf82 <_dtoa_r+0xaa2>
 800cfac:	0800e370 	.word	0x0800e370
 800cfb0:	0800e2d0 	.word	0x0800e2d0
 800cfb4:	0800e2f4 	.word	0x0800e2f4

0800cfb8 <_free_r>:
 800cfb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cfba:	2900      	cmp	r1, #0
 800cfbc:	d044      	beq.n	800d048 <_free_r+0x90>
 800cfbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfc2:	9001      	str	r0, [sp, #4]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	f1a1 0404 	sub.w	r4, r1, #4
 800cfca:	bfb8      	it	lt
 800cfcc:	18e4      	addlt	r4, r4, r3
 800cfce:	f7fe fc01 	bl	800b7d4 <__malloc_lock>
 800cfd2:	4a1e      	ldr	r2, [pc, #120]	; (800d04c <_free_r+0x94>)
 800cfd4:	9801      	ldr	r0, [sp, #4]
 800cfd6:	6813      	ldr	r3, [r2, #0]
 800cfd8:	b933      	cbnz	r3, 800cfe8 <_free_r+0x30>
 800cfda:	6063      	str	r3, [r4, #4]
 800cfdc:	6014      	str	r4, [r2, #0]
 800cfde:	b003      	add	sp, #12
 800cfe0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cfe4:	f7fe bbfc 	b.w	800b7e0 <__malloc_unlock>
 800cfe8:	42a3      	cmp	r3, r4
 800cfea:	d908      	bls.n	800cffe <_free_r+0x46>
 800cfec:	6825      	ldr	r5, [r4, #0]
 800cfee:	1961      	adds	r1, r4, r5
 800cff0:	428b      	cmp	r3, r1
 800cff2:	bf01      	itttt	eq
 800cff4:	6819      	ldreq	r1, [r3, #0]
 800cff6:	685b      	ldreq	r3, [r3, #4]
 800cff8:	1949      	addeq	r1, r1, r5
 800cffa:	6021      	streq	r1, [r4, #0]
 800cffc:	e7ed      	b.n	800cfda <_free_r+0x22>
 800cffe:	461a      	mov	r2, r3
 800d000:	685b      	ldr	r3, [r3, #4]
 800d002:	b10b      	cbz	r3, 800d008 <_free_r+0x50>
 800d004:	42a3      	cmp	r3, r4
 800d006:	d9fa      	bls.n	800cffe <_free_r+0x46>
 800d008:	6811      	ldr	r1, [r2, #0]
 800d00a:	1855      	adds	r5, r2, r1
 800d00c:	42a5      	cmp	r5, r4
 800d00e:	d10b      	bne.n	800d028 <_free_r+0x70>
 800d010:	6824      	ldr	r4, [r4, #0]
 800d012:	4421      	add	r1, r4
 800d014:	1854      	adds	r4, r2, r1
 800d016:	42a3      	cmp	r3, r4
 800d018:	6011      	str	r1, [r2, #0]
 800d01a:	d1e0      	bne.n	800cfde <_free_r+0x26>
 800d01c:	681c      	ldr	r4, [r3, #0]
 800d01e:	685b      	ldr	r3, [r3, #4]
 800d020:	6053      	str	r3, [r2, #4]
 800d022:	440c      	add	r4, r1
 800d024:	6014      	str	r4, [r2, #0]
 800d026:	e7da      	b.n	800cfde <_free_r+0x26>
 800d028:	d902      	bls.n	800d030 <_free_r+0x78>
 800d02a:	230c      	movs	r3, #12
 800d02c:	6003      	str	r3, [r0, #0]
 800d02e:	e7d6      	b.n	800cfde <_free_r+0x26>
 800d030:	6825      	ldr	r5, [r4, #0]
 800d032:	1961      	adds	r1, r4, r5
 800d034:	428b      	cmp	r3, r1
 800d036:	bf04      	itt	eq
 800d038:	6819      	ldreq	r1, [r3, #0]
 800d03a:	685b      	ldreq	r3, [r3, #4]
 800d03c:	6063      	str	r3, [r4, #4]
 800d03e:	bf04      	itt	eq
 800d040:	1949      	addeq	r1, r1, r5
 800d042:	6021      	streq	r1, [r4, #0]
 800d044:	6054      	str	r4, [r2, #4]
 800d046:	e7ca      	b.n	800cfde <_free_r+0x26>
 800d048:	b003      	add	sp, #12
 800d04a:	bd30      	pop	{r4, r5, pc}
 800d04c:	240020d8 	.word	0x240020d8

0800d050 <_Balloc>:
 800d050:	b570      	push	{r4, r5, r6, lr}
 800d052:	69c6      	ldr	r6, [r0, #28]
 800d054:	4604      	mov	r4, r0
 800d056:	460d      	mov	r5, r1
 800d058:	b976      	cbnz	r6, 800d078 <_Balloc+0x28>
 800d05a:	2010      	movs	r0, #16
 800d05c:	f7fe fb0a 	bl	800b674 <malloc>
 800d060:	4602      	mov	r2, r0
 800d062:	61e0      	str	r0, [r4, #28]
 800d064:	b920      	cbnz	r0, 800d070 <_Balloc+0x20>
 800d066:	4b18      	ldr	r3, [pc, #96]	; (800d0c8 <_Balloc+0x78>)
 800d068:	4818      	ldr	r0, [pc, #96]	; (800d0cc <_Balloc+0x7c>)
 800d06a:	216b      	movs	r1, #107	; 0x6b
 800d06c:	f000 fd9a 	bl	800dba4 <__assert_func>
 800d070:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d074:	6006      	str	r6, [r0, #0]
 800d076:	60c6      	str	r6, [r0, #12]
 800d078:	69e6      	ldr	r6, [r4, #28]
 800d07a:	68f3      	ldr	r3, [r6, #12]
 800d07c:	b183      	cbz	r3, 800d0a0 <_Balloc+0x50>
 800d07e:	69e3      	ldr	r3, [r4, #28]
 800d080:	68db      	ldr	r3, [r3, #12]
 800d082:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d086:	b9b8      	cbnz	r0, 800d0b8 <_Balloc+0x68>
 800d088:	2101      	movs	r1, #1
 800d08a:	fa01 f605 	lsl.w	r6, r1, r5
 800d08e:	1d72      	adds	r2, r6, #5
 800d090:	0092      	lsls	r2, r2, #2
 800d092:	4620      	mov	r0, r4
 800d094:	f000 fda4 	bl	800dbe0 <_calloc_r>
 800d098:	b160      	cbz	r0, 800d0b4 <_Balloc+0x64>
 800d09a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d09e:	e00e      	b.n	800d0be <_Balloc+0x6e>
 800d0a0:	2221      	movs	r2, #33	; 0x21
 800d0a2:	2104      	movs	r1, #4
 800d0a4:	4620      	mov	r0, r4
 800d0a6:	f000 fd9b 	bl	800dbe0 <_calloc_r>
 800d0aa:	69e3      	ldr	r3, [r4, #28]
 800d0ac:	60f0      	str	r0, [r6, #12]
 800d0ae:	68db      	ldr	r3, [r3, #12]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d1e4      	bne.n	800d07e <_Balloc+0x2e>
 800d0b4:	2000      	movs	r0, #0
 800d0b6:	bd70      	pop	{r4, r5, r6, pc}
 800d0b8:	6802      	ldr	r2, [r0, #0]
 800d0ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d0be:	2300      	movs	r3, #0
 800d0c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d0c4:	e7f7      	b.n	800d0b6 <_Balloc+0x66>
 800d0c6:	bf00      	nop
 800d0c8:	0800e301 	.word	0x0800e301
 800d0cc:	0800e381 	.word	0x0800e381

0800d0d0 <_Bfree>:
 800d0d0:	b570      	push	{r4, r5, r6, lr}
 800d0d2:	69c6      	ldr	r6, [r0, #28]
 800d0d4:	4605      	mov	r5, r0
 800d0d6:	460c      	mov	r4, r1
 800d0d8:	b976      	cbnz	r6, 800d0f8 <_Bfree+0x28>
 800d0da:	2010      	movs	r0, #16
 800d0dc:	f7fe faca 	bl	800b674 <malloc>
 800d0e0:	4602      	mov	r2, r0
 800d0e2:	61e8      	str	r0, [r5, #28]
 800d0e4:	b920      	cbnz	r0, 800d0f0 <_Bfree+0x20>
 800d0e6:	4b09      	ldr	r3, [pc, #36]	; (800d10c <_Bfree+0x3c>)
 800d0e8:	4809      	ldr	r0, [pc, #36]	; (800d110 <_Bfree+0x40>)
 800d0ea:	218f      	movs	r1, #143	; 0x8f
 800d0ec:	f000 fd5a 	bl	800dba4 <__assert_func>
 800d0f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d0f4:	6006      	str	r6, [r0, #0]
 800d0f6:	60c6      	str	r6, [r0, #12]
 800d0f8:	b13c      	cbz	r4, 800d10a <_Bfree+0x3a>
 800d0fa:	69eb      	ldr	r3, [r5, #28]
 800d0fc:	6862      	ldr	r2, [r4, #4]
 800d0fe:	68db      	ldr	r3, [r3, #12]
 800d100:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d104:	6021      	str	r1, [r4, #0]
 800d106:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d10a:	bd70      	pop	{r4, r5, r6, pc}
 800d10c:	0800e301 	.word	0x0800e301
 800d110:	0800e381 	.word	0x0800e381

0800d114 <__multadd>:
 800d114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d118:	690d      	ldr	r5, [r1, #16]
 800d11a:	4607      	mov	r7, r0
 800d11c:	460c      	mov	r4, r1
 800d11e:	461e      	mov	r6, r3
 800d120:	f101 0c14 	add.w	ip, r1, #20
 800d124:	2000      	movs	r0, #0
 800d126:	f8dc 3000 	ldr.w	r3, [ip]
 800d12a:	b299      	uxth	r1, r3
 800d12c:	fb02 6101 	mla	r1, r2, r1, r6
 800d130:	0c1e      	lsrs	r6, r3, #16
 800d132:	0c0b      	lsrs	r3, r1, #16
 800d134:	fb02 3306 	mla	r3, r2, r6, r3
 800d138:	b289      	uxth	r1, r1
 800d13a:	3001      	adds	r0, #1
 800d13c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d140:	4285      	cmp	r5, r0
 800d142:	f84c 1b04 	str.w	r1, [ip], #4
 800d146:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d14a:	dcec      	bgt.n	800d126 <__multadd+0x12>
 800d14c:	b30e      	cbz	r6, 800d192 <__multadd+0x7e>
 800d14e:	68a3      	ldr	r3, [r4, #8]
 800d150:	42ab      	cmp	r3, r5
 800d152:	dc19      	bgt.n	800d188 <__multadd+0x74>
 800d154:	6861      	ldr	r1, [r4, #4]
 800d156:	4638      	mov	r0, r7
 800d158:	3101      	adds	r1, #1
 800d15a:	f7ff ff79 	bl	800d050 <_Balloc>
 800d15e:	4680      	mov	r8, r0
 800d160:	b928      	cbnz	r0, 800d16e <__multadd+0x5a>
 800d162:	4602      	mov	r2, r0
 800d164:	4b0c      	ldr	r3, [pc, #48]	; (800d198 <__multadd+0x84>)
 800d166:	480d      	ldr	r0, [pc, #52]	; (800d19c <__multadd+0x88>)
 800d168:	21ba      	movs	r1, #186	; 0xba
 800d16a:	f000 fd1b 	bl	800dba4 <__assert_func>
 800d16e:	6922      	ldr	r2, [r4, #16]
 800d170:	3202      	adds	r2, #2
 800d172:	f104 010c 	add.w	r1, r4, #12
 800d176:	0092      	lsls	r2, r2, #2
 800d178:	300c      	adds	r0, #12
 800d17a:	f000 fd05 	bl	800db88 <memcpy>
 800d17e:	4621      	mov	r1, r4
 800d180:	4638      	mov	r0, r7
 800d182:	f7ff ffa5 	bl	800d0d0 <_Bfree>
 800d186:	4644      	mov	r4, r8
 800d188:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d18c:	3501      	adds	r5, #1
 800d18e:	615e      	str	r6, [r3, #20]
 800d190:	6125      	str	r5, [r4, #16]
 800d192:	4620      	mov	r0, r4
 800d194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d198:	0800e370 	.word	0x0800e370
 800d19c:	0800e381 	.word	0x0800e381

0800d1a0 <__hi0bits>:
 800d1a0:	0c03      	lsrs	r3, r0, #16
 800d1a2:	041b      	lsls	r3, r3, #16
 800d1a4:	b9d3      	cbnz	r3, 800d1dc <__hi0bits+0x3c>
 800d1a6:	0400      	lsls	r0, r0, #16
 800d1a8:	2310      	movs	r3, #16
 800d1aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d1ae:	bf04      	itt	eq
 800d1b0:	0200      	lsleq	r0, r0, #8
 800d1b2:	3308      	addeq	r3, #8
 800d1b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d1b8:	bf04      	itt	eq
 800d1ba:	0100      	lsleq	r0, r0, #4
 800d1bc:	3304      	addeq	r3, #4
 800d1be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d1c2:	bf04      	itt	eq
 800d1c4:	0080      	lsleq	r0, r0, #2
 800d1c6:	3302      	addeq	r3, #2
 800d1c8:	2800      	cmp	r0, #0
 800d1ca:	db05      	blt.n	800d1d8 <__hi0bits+0x38>
 800d1cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d1d0:	f103 0301 	add.w	r3, r3, #1
 800d1d4:	bf08      	it	eq
 800d1d6:	2320      	moveq	r3, #32
 800d1d8:	4618      	mov	r0, r3
 800d1da:	4770      	bx	lr
 800d1dc:	2300      	movs	r3, #0
 800d1de:	e7e4      	b.n	800d1aa <__hi0bits+0xa>

0800d1e0 <__lo0bits>:
 800d1e0:	6803      	ldr	r3, [r0, #0]
 800d1e2:	f013 0207 	ands.w	r2, r3, #7
 800d1e6:	d00c      	beq.n	800d202 <__lo0bits+0x22>
 800d1e8:	07d9      	lsls	r1, r3, #31
 800d1ea:	d422      	bmi.n	800d232 <__lo0bits+0x52>
 800d1ec:	079a      	lsls	r2, r3, #30
 800d1ee:	bf49      	itett	mi
 800d1f0:	085b      	lsrmi	r3, r3, #1
 800d1f2:	089b      	lsrpl	r3, r3, #2
 800d1f4:	6003      	strmi	r3, [r0, #0]
 800d1f6:	2201      	movmi	r2, #1
 800d1f8:	bf5c      	itt	pl
 800d1fa:	6003      	strpl	r3, [r0, #0]
 800d1fc:	2202      	movpl	r2, #2
 800d1fe:	4610      	mov	r0, r2
 800d200:	4770      	bx	lr
 800d202:	b299      	uxth	r1, r3
 800d204:	b909      	cbnz	r1, 800d20a <__lo0bits+0x2a>
 800d206:	0c1b      	lsrs	r3, r3, #16
 800d208:	2210      	movs	r2, #16
 800d20a:	b2d9      	uxtb	r1, r3
 800d20c:	b909      	cbnz	r1, 800d212 <__lo0bits+0x32>
 800d20e:	3208      	adds	r2, #8
 800d210:	0a1b      	lsrs	r3, r3, #8
 800d212:	0719      	lsls	r1, r3, #28
 800d214:	bf04      	itt	eq
 800d216:	091b      	lsreq	r3, r3, #4
 800d218:	3204      	addeq	r2, #4
 800d21a:	0799      	lsls	r1, r3, #30
 800d21c:	bf04      	itt	eq
 800d21e:	089b      	lsreq	r3, r3, #2
 800d220:	3202      	addeq	r2, #2
 800d222:	07d9      	lsls	r1, r3, #31
 800d224:	d403      	bmi.n	800d22e <__lo0bits+0x4e>
 800d226:	085b      	lsrs	r3, r3, #1
 800d228:	f102 0201 	add.w	r2, r2, #1
 800d22c:	d003      	beq.n	800d236 <__lo0bits+0x56>
 800d22e:	6003      	str	r3, [r0, #0]
 800d230:	e7e5      	b.n	800d1fe <__lo0bits+0x1e>
 800d232:	2200      	movs	r2, #0
 800d234:	e7e3      	b.n	800d1fe <__lo0bits+0x1e>
 800d236:	2220      	movs	r2, #32
 800d238:	e7e1      	b.n	800d1fe <__lo0bits+0x1e>
	...

0800d23c <__i2b>:
 800d23c:	b510      	push	{r4, lr}
 800d23e:	460c      	mov	r4, r1
 800d240:	2101      	movs	r1, #1
 800d242:	f7ff ff05 	bl	800d050 <_Balloc>
 800d246:	4602      	mov	r2, r0
 800d248:	b928      	cbnz	r0, 800d256 <__i2b+0x1a>
 800d24a:	4b05      	ldr	r3, [pc, #20]	; (800d260 <__i2b+0x24>)
 800d24c:	4805      	ldr	r0, [pc, #20]	; (800d264 <__i2b+0x28>)
 800d24e:	f240 1145 	movw	r1, #325	; 0x145
 800d252:	f000 fca7 	bl	800dba4 <__assert_func>
 800d256:	2301      	movs	r3, #1
 800d258:	6144      	str	r4, [r0, #20]
 800d25a:	6103      	str	r3, [r0, #16]
 800d25c:	bd10      	pop	{r4, pc}
 800d25e:	bf00      	nop
 800d260:	0800e370 	.word	0x0800e370
 800d264:	0800e381 	.word	0x0800e381

0800d268 <__multiply>:
 800d268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d26c:	4691      	mov	r9, r2
 800d26e:	690a      	ldr	r2, [r1, #16]
 800d270:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d274:	429a      	cmp	r2, r3
 800d276:	bfb8      	it	lt
 800d278:	460b      	movlt	r3, r1
 800d27a:	460c      	mov	r4, r1
 800d27c:	bfbc      	itt	lt
 800d27e:	464c      	movlt	r4, r9
 800d280:	4699      	movlt	r9, r3
 800d282:	6927      	ldr	r7, [r4, #16]
 800d284:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d288:	68a3      	ldr	r3, [r4, #8]
 800d28a:	6861      	ldr	r1, [r4, #4]
 800d28c:	eb07 060a 	add.w	r6, r7, sl
 800d290:	42b3      	cmp	r3, r6
 800d292:	b085      	sub	sp, #20
 800d294:	bfb8      	it	lt
 800d296:	3101      	addlt	r1, #1
 800d298:	f7ff feda 	bl	800d050 <_Balloc>
 800d29c:	b930      	cbnz	r0, 800d2ac <__multiply+0x44>
 800d29e:	4602      	mov	r2, r0
 800d2a0:	4b44      	ldr	r3, [pc, #272]	; (800d3b4 <__multiply+0x14c>)
 800d2a2:	4845      	ldr	r0, [pc, #276]	; (800d3b8 <__multiply+0x150>)
 800d2a4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d2a8:	f000 fc7c 	bl	800dba4 <__assert_func>
 800d2ac:	f100 0514 	add.w	r5, r0, #20
 800d2b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d2b4:	462b      	mov	r3, r5
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	4543      	cmp	r3, r8
 800d2ba:	d321      	bcc.n	800d300 <__multiply+0x98>
 800d2bc:	f104 0314 	add.w	r3, r4, #20
 800d2c0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d2c4:	f109 0314 	add.w	r3, r9, #20
 800d2c8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d2cc:	9202      	str	r2, [sp, #8]
 800d2ce:	1b3a      	subs	r2, r7, r4
 800d2d0:	3a15      	subs	r2, #21
 800d2d2:	f022 0203 	bic.w	r2, r2, #3
 800d2d6:	3204      	adds	r2, #4
 800d2d8:	f104 0115 	add.w	r1, r4, #21
 800d2dc:	428f      	cmp	r7, r1
 800d2de:	bf38      	it	cc
 800d2e0:	2204      	movcc	r2, #4
 800d2e2:	9201      	str	r2, [sp, #4]
 800d2e4:	9a02      	ldr	r2, [sp, #8]
 800d2e6:	9303      	str	r3, [sp, #12]
 800d2e8:	429a      	cmp	r2, r3
 800d2ea:	d80c      	bhi.n	800d306 <__multiply+0x9e>
 800d2ec:	2e00      	cmp	r6, #0
 800d2ee:	dd03      	ble.n	800d2f8 <__multiply+0x90>
 800d2f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d05b      	beq.n	800d3b0 <__multiply+0x148>
 800d2f8:	6106      	str	r6, [r0, #16]
 800d2fa:	b005      	add	sp, #20
 800d2fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d300:	f843 2b04 	str.w	r2, [r3], #4
 800d304:	e7d8      	b.n	800d2b8 <__multiply+0x50>
 800d306:	f8b3 a000 	ldrh.w	sl, [r3]
 800d30a:	f1ba 0f00 	cmp.w	sl, #0
 800d30e:	d024      	beq.n	800d35a <__multiply+0xf2>
 800d310:	f104 0e14 	add.w	lr, r4, #20
 800d314:	46a9      	mov	r9, r5
 800d316:	f04f 0c00 	mov.w	ip, #0
 800d31a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d31e:	f8d9 1000 	ldr.w	r1, [r9]
 800d322:	fa1f fb82 	uxth.w	fp, r2
 800d326:	b289      	uxth	r1, r1
 800d328:	fb0a 110b 	mla	r1, sl, fp, r1
 800d32c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d330:	f8d9 2000 	ldr.w	r2, [r9]
 800d334:	4461      	add	r1, ip
 800d336:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d33a:	fb0a c20b 	mla	r2, sl, fp, ip
 800d33e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d342:	b289      	uxth	r1, r1
 800d344:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d348:	4577      	cmp	r7, lr
 800d34a:	f849 1b04 	str.w	r1, [r9], #4
 800d34e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d352:	d8e2      	bhi.n	800d31a <__multiply+0xb2>
 800d354:	9a01      	ldr	r2, [sp, #4]
 800d356:	f845 c002 	str.w	ip, [r5, r2]
 800d35a:	9a03      	ldr	r2, [sp, #12]
 800d35c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d360:	3304      	adds	r3, #4
 800d362:	f1b9 0f00 	cmp.w	r9, #0
 800d366:	d021      	beq.n	800d3ac <__multiply+0x144>
 800d368:	6829      	ldr	r1, [r5, #0]
 800d36a:	f104 0c14 	add.w	ip, r4, #20
 800d36e:	46ae      	mov	lr, r5
 800d370:	f04f 0a00 	mov.w	sl, #0
 800d374:	f8bc b000 	ldrh.w	fp, [ip]
 800d378:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d37c:	fb09 220b 	mla	r2, r9, fp, r2
 800d380:	4452      	add	r2, sl
 800d382:	b289      	uxth	r1, r1
 800d384:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d388:	f84e 1b04 	str.w	r1, [lr], #4
 800d38c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d390:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d394:	f8be 1000 	ldrh.w	r1, [lr]
 800d398:	fb09 110a 	mla	r1, r9, sl, r1
 800d39c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d3a0:	4567      	cmp	r7, ip
 800d3a2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d3a6:	d8e5      	bhi.n	800d374 <__multiply+0x10c>
 800d3a8:	9a01      	ldr	r2, [sp, #4]
 800d3aa:	50a9      	str	r1, [r5, r2]
 800d3ac:	3504      	adds	r5, #4
 800d3ae:	e799      	b.n	800d2e4 <__multiply+0x7c>
 800d3b0:	3e01      	subs	r6, #1
 800d3b2:	e79b      	b.n	800d2ec <__multiply+0x84>
 800d3b4:	0800e370 	.word	0x0800e370
 800d3b8:	0800e381 	.word	0x0800e381

0800d3bc <__pow5mult>:
 800d3bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3c0:	4615      	mov	r5, r2
 800d3c2:	f012 0203 	ands.w	r2, r2, #3
 800d3c6:	4606      	mov	r6, r0
 800d3c8:	460f      	mov	r7, r1
 800d3ca:	d007      	beq.n	800d3dc <__pow5mult+0x20>
 800d3cc:	4c25      	ldr	r4, [pc, #148]	; (800d464 <__pow5mult+0xa8>)
 800d3ce:	3a01      	subs	r2, #1
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d3d6:	f7ff fe9d 	bl	800d114 <__multadd>
 800d3da:	4607      	mov	r7, r0
 800d3dc:	10ad      	asrs	r5, r5, #2
 800d3de:	d03d      	beq.n	800d45c <__pow5mult+0xa0>
 800d3e0:	69f4      	ldr	r4, [r6, #28]
 800d3e2:	b97c      	cbnz	r4, 800d404 <__pow5mult+0x48>
 800d3e4:	2010      	movs	r0, #16
 800d3e6:	f7fe f945 	bl	800b674 <malloc>
 800d3ea:	4602      	mov	r2, r0
 800d3ec:	61f0      	str	r0, [r6, #28]
 800d3ee:	b928      	cbnz	r0, 800d3fc <__pow5mult+0x40>
 800d3f0:	4b1d      	ldr	r3, [pc, #116]	; (800d468 <__pow5mult+0xac>)
 800d3f2:	481e      	ldr	r0, [pc, #120]	; (800d46c <__pow5mult+0xb0>)
 800d3f4:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d3f8:	f000 fbd4 	bl	800dba4 <__assert_func>
 800d3fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d400:	6004      	str	r4, [r0, #0]
 800d402:	60c4      	str	r4, [r0, #12]
 800d404:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d408:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d40c:	b94c      	cbnz	r4, 800d422 <__pow5mult+0x66>
 800d40e:	f240 2171 	movw	r1, #625	; 0x271
 800d412:	4630      	mov	r0, r6
 800d414:	f7ff ff12 	bl	800d23c <__i2b>
 800d418:	2300      	movs	r3, #0
 800d41a:	f8c8 0008 	str.w	r0, [r8, #8]
 800d41e:	4604      	mov	r4, r0
 800d420:	6003      	str	r3, [r0, #0]
 800d422:	f04f 0900 	mov.w	r9, #0
 800d426:	07eb      	lsls	r3, r5, #31
 800d428:	d50a      	bpl.n	800d440 <__pow5mult+0x84>
 800d42a:	4639      	mov	r1, r7
 800d42c:	4622      	mov	r2, r4
 800d42e:	4630      	mov	r0, r6
 800d430:	f7ff ff1a 	bl	800d268 <__multiply>
 800d434:	4639      	mov	r1, r7
 800d436:	4680      	mov	r8, r0
 800d438:	4630      	mov	r0, r6
 800d43a:	f7ff fe49 	bl	800d0d0 <_Bfree>
 800d43e:	4647      	mov	r7, r8
 800d440:	106d      	asrs	r5, r5, #1
 800d442:	d00b      	beq.n	800d45c <__pow5mult+0xa0>
 800d444:	6820      	ldr	r0, [r4, #0]
 800d446:	b938      	cbnz	r0, 800d458 <__pow5mult+0x9c>
 800d448:	4622      	mov	r2, r4
 800d44a:	4621      	mov	r1, r4
 800d44c:	4630      	mov	r0, r6
 800d44e:	f7ff ff0b 	bl	800d268 <__multiply>
 800d452:	6020      	str	r0, [r4, #0]
 800d454:	f8c0 9000 	str.w	r9, [r0]
 800d458:	4604      	mov	r4, r0
 800d45a:	e7e4      	b.n	800d426 <__pow5mult+0x6a>
 800d45c:	4638      	mov	r0, r7
 800d45e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d462:	bf00      	nop
 800d464:	0800e4d0 	.word	0x0800e4d0
 800d468:	0800e301 	.word	0x0800e301
 800d46c:	0800e381 	.word	0x0800e381

0800d470 <__lshift>:
 800d470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d474:	460c      	mov	r4, r1
 800d476:	6849      	ldr	r1, [r1, #4]
 800d478:	6923      	ldr	r3, [r4, #16]
 800d47a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d47e:	68a3      	ldr	r3, [r4, #8]
 800d480:	4607      	mov	r7, r0
 800d482:	4691      	mov	r9, r2
 800d484:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d488:	f108 0601 	add.w	r6, r8, #1
 800d48c:	42b3      	cmp	r3, r6
 800d48e:	db0b      	blt.n	800d4a8 <__lshift+0x38>
 800d490:	4638      	mov	r0, r7
 800d492:	f7ff fddd 	bl	800d050 <_Balloc>
 800d496:	4605      	mov	r5, r0
 800d498:	b948      	cbnz	r0, 800d4ae <__lshift+0x3e>
 800d49a:	4602      	mov	r2, r0
 800d49c:	4b28      	ldr	r3, [pc, #160]	; (800d540 <__lshift+0xd0>)
 800d49e:	4829      	ldr	r0, [pc, #164]	; (800d544 <__lshift+0xd4>)
 800d4a0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d4a4:	f000 fb7e 	bl	800dba4 <__assert_func>
 800d4a8:	3101      	adds	r1, #1
 800d4aa:	005b      	lsls	r3, r3, #1
 800d4ac:	e7ee      	b.n	800d48c <__lshift+0x1c>
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	f100 0114 	add.w	r1, r0, #20
 800d4b4:	f100 0210 	add.w	r2, r0, #16
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	4553      	cmp	r3, sl
 800d4bc:	db33      	blt.n	800d526 <__lshift+0xb6>
 800d4be:	6920      	ldr	r0, [r4, #16]
 800d4c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d4c4:	f104 0314 	add.w	r3, r4, #20
 800d4c8:	f019 091f 	ands.w	r9, r9, #31
 800d4cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d4d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d4d4:	d02b      	beq.n	800d52e <__lshift+0xbe>
 800d4d6:	f1c9 0e20 	rsb	lr, r9, #32
 800d4da:	468a      	mov	sl, r1
 800d4dc:	2200      	movs	r2, #0
 800d4de:	6818      	ldr	r0, [r3, #0]
 800d4e0:	fa00 f009 	lsl.w	r0, r0, r9
 800d4e4:	4310      	orrs	r0, r2
 800d4e6:	f84a 0b04 	str.w	r0, [sl], #4
 800d4ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4ee:	459c      	cmp	ip, r3
 800d4f0:	fa22 f20e 	lsr.w	r2, r2, lr
 800d4f4:	d8f3      	bhi.n	800d4de <__lshift+0x6e>
 800d4f6:	ebac 0304 	sub.w	r3, ip, r4
 800d4fa:	3b15      	subs	r3, #21
 800d4fc:	f023 0303 	bic.w	r3, r3, #3
 800d500:	3304      	adds	r3, #4
 800d502:	f104 0015 	add.w	r0, r4, #21
 800d506:	4584      	cmp	ip, r0
 800d508:	bf38      	it	cc
 800d50a:	2304      	movcc	r3, #4
 800d50c:	50ca      	str	r2, [r1, r3]
 800d50e:	b10a      	cbz	r2, 800d514 <__lshift+0xa4>
 800d510:	f108 0602 	add.w	r6, r8, #2
 800d514:	3e01      	subs	r6, #1
 800d516:	4638      	mov	r0, r7
 800d518:	612e      	str	r6, [r5, #16]
 800d51a:	4621      	mov	r1, r4
 800d51c:	f7ff fdd8 	bl	800d0d0 <_Bfree>
 800d520:	4628      	mov	r0, r5
 800d522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d526:	f842 0f04 	str.w	r0, [r2, #4]!
 800d52a:	3301      	adds	r3, #1
 800d52c:	e7c5      	b.n	800d4ba <__lshift+0x4a>
 800d52e:	3904      	subs	r1, #4
 800d530:	f853 2b04 	ldr.w	r2, [r3], #4
 800d534:	f841 2f04 	str.w	r2, [r1, #4]!
 800d538:	459c      	cmp	ip, r3
 800d53a:	d8f9      	bhi.n	800d530 <__lshift+0xc0>
 800d53c:	e7ea      	b.n	800d514 <__lshift+0xa4>
 800d53e:	bf00      	nop
 800d540:	0800e370 	.word	0x0800e370
 800d544:	0800e381 	.word	0x0800e381

0800d548 <__mcmp>:
 800d548:	b530      	push	{r4, r5, lr}
 800d54a:	6902      	ldr	r2, [r0, #16]
 800d54c:	690c      	ldr	r4, [r1, #16]
 800d54e:	1b12      	subs	r2, r2, r4
 800d550:	d10e      	bne.n	800d570 <__mcmp+0x28>
 800d552:	f100 0314 	add.w	r3, r0, #20
 800d556:	3114      	adds	r1, #20
 800d558:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d55c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d560:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d564:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d568:	42a5      	cmp	r5, r4
 800d56a:	d003      	beq.n	800d574 <__mcmp+0x2c>
 800d56c:	d305      	bcc.n	800d57a <__mcmp+0x32>
 800d56e:	2201      	movs	r2, #1
 800d570:	4610      	mov	r0, r2
 800d572:	bd30      	pop	{r4, r5, pc}
 800d574:	4283      	cmp	r3, r0
 800d576:	d3f3      	bcc.n	800d560 <__mcmp+0x18>
 800d578:	e7fa      	b.n	800d570 <__mcmp+0x28>
 800d57a:	f04f 32ff 	mov.w	r2, #4294967295
 800d57e:	e7f7      	b.n	800d570 <__mcmp+0x28>

0800d580 <__mdiff>:
 800d580:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d584:	460c      	mov	r4, r1
 800d586:	4606      	mov	r6, r0
 800d588:	4611      	mov	r1, r2
 800d58a:	4620      	mov	r0, r4
 800d58c:	4690      	mov	r8, r2
 800d58e:	f7ff ffdb 	bl	800d548 <__mcmp>
 800d592:	1e05      	subs	r5, r0, #0
 800d594:	d110      	bne.n	800d5b8 <__mdiff+0x38>
 800d596:	4629      	mov	r1, r5
 800d598:	4630      	mov	r0, r6
 800d59a:	f7ff fd59 	bl	800d050 <_Balloc>
 800d59e:	b930      	cbnz	r0, 800d5ae <__mdiff+0x2e>
 800d5a0:	4b3a      	ldr	r3, [pc, #232]	; (800d68c <__mdiff+0x10c>)
 800d5a2:	4602      	mov	r2, r0
 800d5a4:	f240 2137 	movw	r1, #567	; 0x237
 800d5a8:	4839      	ldr	r0, [pc, #228]	; (800d690 <__mdiff+0x110>)
 800d5aa:	f000 fafb 	bl	800dba4 <__assert_func>
 800d5ae:	2301      	movs	r3, #1
 800d5b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d5b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5b8:	bfa4      	itt	ge
 800d5ba:	4643      	movge	r3, r8
 800d5bc:	46a0      	movge	r8, r4
 800d5be:	4630      	mov	r0, r6
 800d5c0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d5c4:	bfa6      	itte	ge
 800d5c6:	461c      	movge	r4, r3
 800d5c8:	2500      	movge	r5, #0
 800d5ca:	2501      	movlt	r5, #1
 800d5cc:	f7ff fd40 	bl	800d050 <_Balloc>
 800d5d0:	b920      	cbnz	r0, 800d5dc <__mdiff+0x5c>
 800d5d2:	4b2e      	ldr	r3, [pc, #184]	; (800d68c <__mdiff+0x10c>)
 800d5d4:	4602      	mov	r2, r0
 800d5d6:	f240 2145 	movw	r1, #581	; 0x245
 800d5da:	e7e5      	b.n	800d5a8 <__mdiff+0x28>
 800d5dc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d5e0:	6926      	ldr	r6, [r4, #16]
 800d5e2:	60c5      	str	r5, [r0, #12]
 800d5e4:	f104 0914 	add.w	r9, r4, #20
 800d5e8:	f108 0514 	add.w	r5, r8, #20
 800d5ec:	f100 0e14 	add.w	lr, r0, #20
 800d5f0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d5f4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d5f8:	f108 0210 	add.w	r2, r8, #16
 800d5fc:	46f2      	mov	sl, lr
 800d5fe:	2100      	movs	r1, #0
 800d600:	f859 3b04 	ldr.w	r3, [r9], #4
 800d604:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d608:	fa11 f88b 	uxtah	r8, r1, fp
 800d60c:	b299      	uxth	r1, r3
 800d60e:	0c1b      	lsrs	r3, r3, #16
 800d610:	eba8 0801 	sub.w	r8, r8, r1
 800d614:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d618:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d61c:	fa1f f888 	uxth.w	r8, r8
 800d620:	1419      	asrs	r1, r3, #16
 800d622:	454e      	cmp	r6, r9
 800d624:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d628:	f84a 3b04 	str.w	r3, [sl], #4
 800d62c:	d8e8      	bhi.n	800d600 <__mdiff+0x80>
 800d62e:	1b33      	subs	r3, r6, r4
 800d630:	3b15      	subs	r3, #21
 800d632:	f023 0303 	bic.w	r3, r3, #3
 800d636:	3304      	adds	r3, #4
 800d638:	3415      	adds	r4, #21
 800d63a:	42a6      	cmp	r6, r4
 800d63c:	bf38      	it	cc
 800d63e:	2304      	movcc	r3, #4
 800d640:	441d      	add	r5, r3
 800d642:	4473      	add	r3, lr
 800d644:	469e      	mov	lr, r3
 800d646:	462e      	mov	r6, r5
 800d648:	4566      	cmp	r6, ip
 800d64a:	d30e      	bcc.n	800d66a <__mdiff+0xea>
 800d64c:	f10c 0203 	add.w	r2, ip, #3
 800d650:	1b52      	subs	r2, r2, r5
 800d652:	f022 0203 	bic.w	r2, r2, #3
 800d656:	3d03      	subs	r5, #3
 800d658:	45ac      	cmp	ip, r5
 800d65a:	bf38      	it	cc
 800d65c:	2200      	movcc	r2, #0
 800d65e:	4413      	add	r3, r2
 800d660:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d664:	b17a      	cbz	r2, 800d686 <__mdiff+0x106>
 800d666:	6107      	str	r7, [r0, #16]
 800d668:	e7a4      	b.n	800d5b4 <__mdiff+0x34>
 800d66a:	f856 8b04 	ldr.w	r8, [r6], #4
 800d66e:	fa11 f288 	uxtah	r2, r1, r8
 800d672:	1414      	asrs	r4, r2, #16
 800d674:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d678:	b292      	uxth	r2, r2
 800d67a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d67e:	f84e 2b04 	str.w	r2, [lr], #4
 800d682:	1421      	asrs	r1, r4, #16
 800d684:	e7e0      	b.n	800d648 <__mdiff+0xc8>
 800d686:	3f01      	subs	r7, #1
 800d688:	e7ea      	b.n	800d660 <__mdiff+0xe0>
 800d68a:	bf00      	nop
 800d68c:	0800e370 	.word	0x0800e370
 800d690:	0800e381 	.word	0x0800e381

0800d694 <__d2b>:
 800d694:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d698:	460f      	mov	r7, r1
 800d69a:	2101      	movs	r1, #1
 800d69c:	ec59 8b10 	vmov	r8, r9, d0
 800d6a0:	4616      	mov	r6, r2
 800d6a2:	f7ff fcd5 	bl	800d050 <_Balloc>
 800d6a6:	4604      	mov	r4, r0
 800d6a8:	b930      	cbnz	r0, 800d6b8 <__d2b+0x24>
 800d6aa:	4602      	mov	r2, r0
 800d6ac:	4b24      	ldr	r3, [pc, #144]	; (800d740 <__d2b+0xac>)
 800d6ae:	4825      	ldr	r0, [pc, #148]	; (800d744 <__d2b+0xb0>)
 800d6b0:	f240 310f 	movw	r1, #783	; 0x30f
 800d6b4:	f000 fa76 	bl	800dba4 <__assert_func>
 800d6b8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d6bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d6c0:	bb2d      	cbnz	r5, 800d70e <__d2b+0x7a>
 800d6c2:	9301      	str	r3, [sp, #4]
 800d6c4:	f1b8 0300 	subs.w	r3, r8, #0
 800d6c8:	d026      	beq.n	800d718 <__d2b+0x84>
 800d6ca:	4668      	mov	r0, sp
 800d6cc:	9300      	str	r3, [sp, #0]
 800d6ce:	f7ff fd87 	bl	800d1e0 <__lo0bits>
 800d6d2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d6d6:	b1e8      	cbz	r0, 800d714 <__d2b+0x80>
 800d6d8:	f1c0 0320 	rsb	r3, r0, #32
 800d6dc:	fa02 f303 	lsl.w	r3, r2, r3
 800d6e0:	430b      	orrs	r3, r1
 800d6e2:	40c2      	lsrs	r2, r0
 800d6e4:	6163      	str	r3, [r4, #20]
 800d6e6:	9201      	str	r2, [sp, #4]
 800d6e8:	9b01      	ldr	r3, [sp, #4]
 800d6ea:	61a3      	str	r3, [r4, #24]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	bf14      	ite	ne
 800d6f0:	2202      	movne	r2, #2
 800d6f2:	2201      	moveq	r2, #1
 800d6f4:	6122      	str	r2, [r4, #16]
 800d6f6:	b1bd      	cbz	r5, 800d728 <__d2b+0x94>
 800d6f8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d6fc:	4405      	add	r5, r0
 800d6fe:	603d      	str	r5, [r7, #0]
 800d700:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d704:	6030      	str	r0, [r6, #0]
 800d706:	4620      	mov	r0, r4
 800d708:	b003      	add	sp, #12
 800d70a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d70e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d712:	e7d6      	b.n	800d6c2 <__d2b+0x2e>
 800d714:	6161      	str	r1, [r4, #20]
 800d716:	e7e7      	b.n	800d6e8 <__d2b+0x54>
 800d718:	a801      	add	r0, sp, #4
 800d71a:	f7ff fd61 	bl	800d1e0 <__lo0bits>
 800d71e:	9b01      	ldr	r3, [sp, #4]
 800d720:	6163      	str	r3, [r4, #20]
 800d722:	3020      	adds	r0, #32
 800d724:	2201      	movs	r2, #1
 800d726:	e7e5      	b.n	800d6f4 <__d2b+0x60>
 800d728:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d72c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d730:	6038      	str	r0, [r7, #0]
 800d732:	6918      	ldr	r0, [r3, #16]
 800d734:	f7ff fd34 	bl	800d1a0 <__hi0bits>
 800d738:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d73c:	e7e2      	b.n	800d704 <__d2b+0x70>
 800d73e:	bf00      	nop
 800d740:	0800e370 	.word	0x0800e370
 800d744:	0800e381 	.word	0x0800e381

0800d748 <__ssputs_r>:
 800d748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d74c:	688e      	ldr	r6, [r1, #8]
 800d74e:	461f      	mov	r7, r3
 800d750:	42be      	cmp	r6, r7
 800d752:	680b      	ldr	r3, [r1, #0]
 800d754:	4682      	mov	sl, r0
 800d756:	460c      	mov	r4, r1
 800d758:	4690      	mov	r8, r2
 800d75a:	d82c      	bhi.n	800d7b6 <__ssputs_r+0x6e>
 800d75c:	898a      	ldrh	r2, [r1, #12]
 800d75e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d762:	d026      	beq.n	800d7b2 <__ssputs_r+0x6a>
 800d764:	6965      	ldr	r5, [r4, #20]
 800d766:	6909      	ldr	r1, [r1, #16]
 800d768:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d76c:	eba3 0901 	sub.w	r9, r3, r1
 800d770:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d774:	1c7b      	adds	r3, r7, #1
 800d776:	444b      	add	r3, r9
 800d778:	106d      	asrs	r5, r5, #1
 800d77a:	429d      	cmp	r5, r3
 800d77c:	bf38      	it	cc
 800d77e:	461d      	movcc	r5, r3
 800d780:	0553      	lsls	r3, r2, #21
 800d782:	d527      	bpl.n	800d7d4 <__ssputs_r+0x8c>
 800d784:	4629      	mov	r1, r5
 800d786:	f7fd ffa5 	bl	800b6d4 <_malloc_r>
 800d78a:	4606      	mov	r6, r0
 800d78c:	b360      	cbz	r0, 800d7e8 <__ssputs_r+0xa0>
 800d78e:	6921      	ldr	r1, [r4, #16]
 800d790:	464a      	mov	r2, r9
 800d792:	f000 f9f9 	bl	800db88 <memcpy>
 800d796:	89a3      	ldrh	r3, [r4, #12]
 800d798:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d79c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7a0:	81a3      	strh	r3, [r4, #12]
 800d7a2:	6126      	str	r6, [r4, #16]
 800d7a4:	6165      	str	r5, [r4, #20]
 800d7a6:	444e      	add	r6, r9
 800d7a8:	eba5 0509 	sub.w	r5, r5, r9
 800d7ac:	6026      	str	r6, [r4, #0]
 800d7ae:	60a5      	str	r5, [r4, #8]
 800d7b0:	463e      	mov	r6, r7
 800d7b2:	42be      	cmp	r6, r7
 800d7b4:	d900      	bls.n	800d7b8 <__ssputs_r+0x70>
 800d7b6:	463e      	mov	r6, r7
 800d7b8:	6820      	ldr	r0, [r4, #0]
 800d7ba:	4632      	mov	r2, r6
 800d7bc:	4641      	mov	r1, r8
 800d7be:	f000 f9c9 	bl	800db54 <memmove>
 800d7c2:	68a3      	ldr	r3, [r4, #8]
 800d7c4:	1b9b      	subs	r3, r3, r6
 800d7c6:	60a3      	str	r3, [r4, #8]
 800d7c8:	6823      	ldr	r3, [r4, #0]
 800d7ca:	4433      	add	r3, r6
 800d7cc:	6023      	str	r3, [r4, #0]
 800d7ce:	2000      	movs	r0, #0
 800d7d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7d4:	462a      	mov	r2, r5
 800d7d6:	f000 fa2b 	bl	800dc30 <_realloc_r>
 800d7da:	4606      	mov	r6, r0
 800d7dc:	2800      	cmp	r0, #0
 800d7de:	d1e0      	bne.n	800d7a2 <__ssputs_r+0x5a>
 800d7e0:	6921      	ldr	r1, [r4, #16]
 800d7e2:	4650      	mov	r0, sl
 800d7e4:	f7ff fbe8 	bl	800cfb8 <_free_r>
 800d7e8:	230c      	movs	r3, #12
 800d7ea:	f8ca 3000 	str.w	r3, [sl]
 800d7ee:	89a3      	ldrh	r3, [r4, #12]
 800d7f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7f4:	81a3      	strh	r3, [r4, #12]
 800d7f6:	f04f 30ff 	mov.w	r0, #4294967295
 800d7fa:	e7e9      	b.n	800d7d0 <__ssputs_r+0x88>

0800d7fc <_svfiprintf_r>:
 800d7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d800:	4698      	mov	r8, r3
 800d802:	898b      	ldrh	r3, [r1, #12]
 800d804:	061b      	lsls	r3, r3, #24
 800d806:	b09d      	sub	sp, #116	; 0x74
 800d808:	4607      	mov	r7, r0
 800d80a:	460d      	mov	r5, r1
 800d80c:	4614      	mov	r4, r2
 800d80e:	d50e      	bpl.n	800d82e <_svfiprintf_r+0x32>
 800d810:	690b      	ldr	r3, [r1, #16]
 800d812:	b963      	cbnz	r3, 800d82e <_svfiprintf_r+0x32>
 800d814:	2140      	movs	r1, #64	; 0x40
 800d816:	f7fd ff5d 	bl	800b6d4 <_malloc_r>
 800d81a:	6028      	str	r0, [r5, #0]
 800d81c:	6128      	str	r0, [r5, #16]
 800d81e:	b920      	cbnz	r0, 800d82a <_svfiprintf_r+0x2e>
 800d820:	230c      	movs	r3, #12
 800d822:	603b      	str	r3, [r7, #0]
 800d824:	f04f 30ff 	mov.w	r0, #4294967295
 800d828:	e0d0      	b.n	800d9cc <_svfiprintf_r+0x1d0>
 800d82a:	2340      	movs	r3, #64	; 0x40
 800d82c:	616b      	str	r3, [r5, #20]
 800d82e:	2300      	movs	r3, #0
 800d830:	9309      	str	r3, [sp, #36]	; 0x24
 800d832:	2320      	movs	r3, #32
 800d834:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d838:	f8cd 800c 	str.w	r8, [sp, #12]
 800d83c:	2330      	movs	r3, #48	; 0x30
 800d83e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d9e4 <_svfiprintf_r+0x1e8>
 800d842:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d846:	f04f 0901 	mov.w	r9, #1
 800d84a:	4623      	mov	r3, r4
 800d84c:	469a      	mov	sl, r3
 800d84e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d852:	b10a      	cbz	r2, 800d858 <_svfiprintf_r+0x5c>
 800d854:	2a25      	cmp	r2, #37	; 0x25
 800d856:	d1f9      	bne.n	800d84c <_svfiprintf_r+0x50>
 800d858:	ebba 0b04 	subs.w	fp, sl, r4
 800d85c:	d00b      	beq.n	800d876 <_svfiprintf_r+0x7a>
 800d85e:	465b      	mov	r3, fp
 800d860:	4622      	mov	r2, r4
 800d862:	4629      	mov	r1, r5
 800d864:	4638      	mov	r0, r7
 800d866:	f7ff ff6f 	bl	800d748 <__ssputs_r>
 800d86a:	3001      	adds	r0, #1
 800d86c:	f000 80a9 	beq.w	800d9c2 <_svfiprintf_r+0x1c6>
 800d870:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d872:	445a      	add	r2, fp
 800d874:	9209      	str	r2, [sp, #36]	; 0x24
 800d876:	f89a 3000 	ldrb.w	r3, [sl]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	f000 80a1 	beq.w	800d9c2 <_svfiprintf_r+0x1c6>
 800d880:	2300      	movs	r3, #0
 800d882:	f04f 32ff 	mov.w	r2, #4294967295
 800d886:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d88a:	f10a 0a01 	add.w	sl, sl, #1
 800d88e:	9304      	str	r3, [sp, #16]
 800d890:	9307      	str	r3, [sp, #28]
 800d892:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d896:	931a      	str	r3, [sp, #104]	; 0x68
 800d898:	4654      	mov	r4, sl
 800d89a:	2205      	movs	r2, #5
 800d89c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8a0:	4850      	ldr	r0, [pc, #320]	; (800d9e4 <_svfiprintf_r+0x1e8>)
 800d8a2:	f7f2 fd1d 	bl	80002e0 <memchr>
 800d8a6:	9a04      	ldr	r2, [sp, #16]
 800d8a8:	b9d8      	cbnz	r0, 800d8e2 <_svfiprintf_r+0xe6>
 800d8aa:	06d0      	lsls	r0, r2, #27
 800d8ac:	bf44      	itt	mi
 800d8ae:	2320      	movmi	r3, #32
 800d8b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d8b4:	0711      	lsls	r1, r2, #28
 800d8b6:	bf44      	itt	mi
 800d8b8:	232b      	movmi	r3, #43	; 0x2b
 800d8ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d8be:	f89a 3000 	ldrb.w	r3, [sl]
 800d8c2:	2b2a      	cmp	r3, #42	; 0x2a
 800d8c4:	d015      	beq.n	800d8f2 <_svfiprintf_r+0xf6>
 800d8c6:	9a07      	ldr	r2, [sp, #28]
 800d8c8:	4654      	mov	r4, sl
 800d8ca:	2000      	movs	r0, #0
 800d8cc:	f04f 0c0a 	mov.w	ip, #10
 800d8d0:	4621      	mov	r1, r4
 800d8d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d8d6:	3b30      	subs	r3, #48	; 0x30
 800d8d8:	2b09      	cmp	r3, #9
 800d8da:	d94d      	bls.n	800d978 <_svfiprintf_r+0x17c>
 800d8dc:	b1b0      	cbz	r0, 800d90c <_svfiprintf_r+0x110>
 800d8de:	9207      	str	r2, [sp, #28]
 800d8e0:	e014      	b.n	800d90c <_svfiprintf_r+0x110>
 800d8e2:	eba0 0308 	sub.w	r3, r0, r8
 800d8e6:	fa09 f303 	lsl.w	r3, r9, r3
 800d8ea:	4313      	orrs	r3, r2
 800d8ec:	9304      	str	r3, [sp, #16]
 800d8ee:	46a2      	mov	sl, r4
 800d8f0:	e7d2      	b.n	800d898 <_svfiprintf_r+0x9c>
 800d8f2:	9b03      	ldr	r3, [sp, #12]
 800d8f4:	1d19      	adds	r1, r3, #4
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	9103      	str	r1, [sp, #12]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	bfbb      	ittet	lt
 800d8fe:	425b      	neglt	r3, r3
 800d900:	f042 0202 	orrlt.w	r2, r2, #2
 800d904:	9307      	strge	r3, [sp, #28]
 800d906:	9307      	strlt	r3, [sp, #28]
 800d908:	bfb8      	it	lt
 800d90a:	9204      	strlt	r2, [sp, #16]
 800d90c:	7823      	ldrb	r3, [r4, #0]
 800d90e:	2b2e      	cmp	r3, #46	; 0x2e
 800d910:	d10c      	bne.n	800d92c <_svfiprintf_r+0x130>
 800d912:	7863      	ldrb	r3, [r4, #1]
 800d914:	2b2a      	cmp	r3, #42	; 0x2a
 800d916:	d134      	bne.n	800d982 <_svfiprintf_r+0x186>
 800d918:	9b03      	ldr	r3, [sp, #12]
 800d91a:	1d1a      	adds	r2, r3, #4
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	9203      	str	r2, [sp, #12]
 800d920:	2b00      	cmp	r3, #0
 800d922:	bfb8      	it	lt
 800d924:	f04f 33ff 	movlt.w	r3, #4294967295
 800d928:	3402      	adds	r4, #2
 800d92a:	9305      	str	r3, [sp, #20]
 800d92c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d9f4 <_svfiprintf_r+0x1f8>
 800d930:	7821      	ldrb	r1, [r4, #0]
 800d932:	2203      	movs	r2, #3
 800d934:	4650      	mov	r0, sl
 800d936:	f7f2 fcd3 	bl	80002e0 <memchr>
 800d93a:	b138      	cbz	r0, 800d94c <_svfiprintf_r+0x150>
 800d93c:	9b04      	ldr	r3, [sp, #16]
 800d93e:	eba0 000a 	sub.w	r0, r0, sl
 800d942:	2240      	movs	r2, #64	; 0x40
 800d944:	4082      	lsls	r2, r0
 800d946:	4313      	orrs	r3, r2
 800d948:	3401      	adds	r4, #1
 800d94a:	9304      	str	r3, [sp, #16]
 800d94c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d950:	4825      	ldr	r0, [pc, #148]	; (800d9e8 <_svfiprintf_r+0x1ec>)
 800d952:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d956:	2206      	movs	r2, #6
 800d958:	f7f2 fcc2 	bl	80002e0 <memchr>
 800d95c:	2800      	cmp	r0, #0
 800d95e:	d038      	beq.n	800d9d2 <_svfiprintf_r+0x1d6>
 800d960:	4b22      	ldr	r3, [pc, #136]	; (800d9ec <_svfiprintf_r+0x1f0>)
 800d962:	bb1b      	cbnz	r3, 800d9ac <_svfiprintf_r+0x1b0>
 800d964:	9b03      	ldr	r3, [sp, #12]
 800d966:	3307      	adds	r3, #7
 800d968:	f023 0307 	bic.w	r3, r3, #7
 800d96c:	3308      	adds	r3, #8
 800d96e:	9303      	str	r3, [sp, #12]
 800d970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d972:	4433      	add	r3, r6
 800d974:	9309      	str	r3, [sp, #36]	; 0x24
 800d976:	e768      	b.n	800d84a <_svfiprintf_r+0x4e>
 800d978:	fb0c 3202 	mla	r2, ip, r2, r3
 800d97c:	460c      	mov	r4, r1
 800d97e:	2001      	movs	r0, #1
 800d980:	e7a6      	b.n	800d8d0 <_svfiprintf_r+0xd4>
 800d982:	2300      	movs	r3, #0
 800d984:	3401      	adds	r4, #1
 800d986:	9305      	str	r3, [sp, #20]
 800d988:	4619      	mov	r1, r3
 800d98a:	f04f 0c0a 	mov.w	ip, #10
 800d98e:	4620      	mov	r0, r4
 800d990:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d994:	3a30      	subs	r2, #48	; 0x30
 800d996:	2a09      	cmp	r2, #9
 800d998:	d903      	bls.n	800d9a2 <_svfiprintf_r+0x1a6>
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d0c6      	beq.n	800d92c <_svfiprintf_r+0x130>
 800d99e:	9105      	str	r1, [sp, #20]
 800d9a0:	e7c4      	b.n	800d92c <_svfiprintf_r+0x130>
 800d9a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800d9a6:	4604      	mov	r4, r0
 800d9a8:	2301      	movs	r3, #1
 800d9aa:	e7f0      	b.n	800d98e <_svfiprintf_r+0x192>
 800d9ac:	ab03      	add	r3, sp, #12
 800d9ae:	9300      	str	r3, [sp, #0]
 800d9b0:	462a      	mov	r2, r5
 800d9b2:	4b0f      	ldr	r3, [pc, #60]	; (800d9f0 <_svfiprintf_r+0x1f4>)
 800d9b4:	a904      	add	r1, sp, #16
 800d9b6:	4638      	mov	r0, r7
 800d9b8:	f7fd ffaa 	bl	800b910 <_printf_float>
 800d9bc:	1c42      	adds	r2, r0, #1
 800d9be:	4606      	mov	r6, r0
 800d9c0:	d1d6      	bne.n	800d970 <_svfiprintf_r+0x174>
 800d9c2:	89ab      	ldrh	r3, [r5, #12]
 800d9c4:	065b      	lsls	r3, r3, #25
 800d9c6:	f53f af2d 	bmi.w	800d824 <_svfiprintf_r+0x28>
 800d9ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d9cc:	b01d      	add	sp, #116	; 0x74
 800d9ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9d2:	ab03      	add	r3, sp, #12
 800d9d4:	9300      	str	r3, [sp, #0]
 800d9d6:	462a      	mov	r2, r5
 800d9d8:	4b05      	ldr	r3, [pc, #20]	; (800d9f0 <_svfiprintf_r+0x1f4>)
 800d9da:	a904      	add	r1, sp, #16
 800d9dc:	4638      	mov	r0, r7
 800d9de:	f7fe fa1f 	bl	800be20 <_printf_i>
 800d9e2:	e7eb      	b.n	800d9bc <_svfiprintf_r+0x1c0>
 800d9e4:	0800e4dc 	.word	0x0800e4dc
 800d9e8:	0800e4e6 	.word	0x0800e4e6
 800d9ec:	0800b911 	.word	0x0800b911
 800d9f0:	0800d749 	.word	0x0800d749
 800d9f4:	0800e4e2 	.word	0x0800e4e2

0800d9f8 <__sflush_r>:
 800d9f8:	898a      	ldrh	r2, [r1, #12]
 800d9fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9fe:	4605      	mov	r5, r0
 800da00:	0710      	lsls	r0, r2, #28
 800da02:	460c      	mov	r4, r1
 800da04:	d458      	bmi.n	800dab8 <__sflush_r+0xc0>
 800da06:	684b      	ldr	r3, [r1, #4]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	dc05      	bgt.n	800da18 <__sflush_r+0x20>
 800da0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800da0e:	2b00      	cmp	r3, #0
 800da10:	dc02      	bgt.n	800da18 <__sflush_r+0x20>
 800da12:	2000      	movs	r0, #0
 800da14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800da1a:	2e00      	cmp	r6, #0
 800da1c:	d0f9      	beq.n	800da12 <__sflush_r+0x1a>
 800da1e:	2300      	movs	r3, #0
 800da20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800da24:	682f      	ldr	r7, [r5, #0]
 800da26:	6a21      	ldr	r1, [r4, #32]
 800da28:	602b      	str	r3, [r5, #0]
 800da2a:	d032      	beq.n	800da92 <__sflush_r+0x9a>
 800da2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800da2e:	89a3      	ldrh	r3, [r4, #12]
 800da30:	075a      	lsls	r2, r3, #29
 800da32:	d505      	bpl.n	800da40 <__sflush_r+0x48>
 800da34:	6863      	ldr	r3, [r4, #4]
 800da36:	1ac0      	subs	r0, r0, r3
 800da38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800da3a:	b10b      	cbz	r3, 800da40 <__sflush_r+0x48>
 800da3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800da3e:	1ac0      	subs	r0, r0, r3
 800da40:	2300      	movs	r3, #0
 800da42:	4602      	mov	r2, r0
 800da44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800da46:	6a21      	ldr	r1, [r4, #32]
 800da48:	4628      	mov	r0, r5
 800da4a:	47b0      	blx	r6
 800da4c:	1c43      	adds	r3, r0, #1
 800da4e:	89a3      	ldrh	r3, [r4, #12]
 800da50:	d106      	bne.n	800da60 <__sflush_r+0x68>
 800da52:	6829      	ldr	r1, [r5, #0]
 800da54:	291d      	cmp	r1, #29
 800da56:	d82b      	bhi.n	800dab0 <__sflush_r+0xb8>
 800da58:	4a29      	ldr	r2, [pc, #164]	; (800db00 <__sflush_r+0x108>)
 800da5a:	410a      	asrs	r2, r1
 800da5c:	07d6      	lsls	r6, r2, #31
 800da5e:	d427      	bmi.n	800dab0 <__sflush_r+0xb8>
 800da60:	2200      	movs	r2, #0
 800da62:	6062      	str	r2, [r4, #4]
 800da64:	04d9      	lsls	r1, r3, #19
 800da66:	6922      	ldr	r2, [r4, #16]
 800da68:	6022      	str	r2, [r4, #0]
 800da6a:	d504      	bpl.n	800da76 <__sflush_r+0x7e>
 800da6c:	1c42      	adds	r2, r0, #1
 800da6e:	d101      	bne.n	800da74 <__sflush_r+0x7c>
 800da70:	682b      	ldr	r3, [r5, #0]
 800da72:	b903      	cbnz	r3, 800da76 <__sflush_r+0x7e>
 800da74:	6560      	str	r0, [r4, #84]	; 0x54
 800da76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800da78:	602f      	str	r7, [r5, #0]
 800da7a:	2900      	cmp	r1, #0
 800da7c:	d0c9      	beq.n	800da12 <__sflush_r+0x1a>
 800da7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800da82:	4299      	cmp	r1, r3
 800da84:	d002      	beq.n	800da8c <__sflush_r+0x94>
 800da86:	4628      	mov	r0, r5
 800da88:	f7ff fa96 	bl	800cfb8 <_free_r>
 800da8c:	2000      	movs	r0, #0
 800da8e:	6360      	str	r0, [r4, #52]	; 0x34
 800da90:	e7c0      	b.n	800da14 <__sflush_r+0x1c>
 800da92:	2301      	movs	r3, #1
 800da94:	4628      	mov	r0, r5
 800da96:	47b0      	blx	r6
 800da98:	1c41      	adds	r1, r0, #1
 800da9a:	d1c8      	bne.n	800da2e <__sflush_r+0x36>
 800da9c:	682b      	ldr	r3, [r5, #0]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d0c5      	beq.n	800da2e <__sflush_r+0x36>
 800daa2:	2b1d      	cmp	r3, #29
 800daa4:	d001      	beq.n	800daaa <__sflush_r+0xb2>
 800daa6:	2b16      	cmp	r3, #22
 800daa8:	d101      	bne.n	800daae <__sflush_r+0xb6>
 800daaa:	602f      	str	r7, [r5, #0]
 800daac:	e7b1      	b.n	800da12 <__sflush_r+0x1a>
 800daae:	89a3      	ldrh	r3, [r4, #12]
 800dab0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dab4:	81a3      	strh	r3, [r4, #12]
 800dab6:	e7ad      	b.n	800da14 <__sflush_r+0x1c>
 800dab8:	690f      	ldr	r7, [r1, #16]
 800daba:	2f00      	cmp	r7, #0
 800dabc:	d0a9      	beq.n	800da12 <__sflush_r+0x1a>
 800dabe:	0793      	lsls	r3, r2, #30
 800dac0:	680e      	ldr	r6, [r1, #0]
 800dac2:	bf08      	it	eq
 800dac4:	694b      	ldreq	r3, [r1, #20]
 800dac6:	600f      	str	r7, [r1, #0]
 800dac8:	bf18      	it	ne
 800daca:	2300      	movne	r3, #0
 800dacc:	eba6 0807 	sub.w	r8, r6, r7
 800dad0:	608b      	str	r3, [r1, #8]
 800dad2:	f1b8 0f00 	cmp.w	r8, #0
 800dad6:	dd9c      	ble.n	800da12 <__sflush_r+0x1a>
 800dad8:	6a21      	ldr	r1, [r4, #32]
 800dada:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dadc:	4643      	mov	r3, r8
 800dade:	463a      	mov	r2, r7
 800dae0:	4628      	mov	r0, r5
 800dae2:	47b0      	blx	r6
 800dae4:	2800      	cmp	r0, #0
 800dae6:	dc06      	bgt.n	800daf6 <__sflush_r+0xfe>
 800dae8:	89a3      	ldrh	r3, [r4, #12]
 800daea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800daee:	81a3      	strh	r3, [r4, #12]
 800daf0:	f04f 30ff 	mov.w	r0, #4294967295
 800daf4:	e78e      	b.n	800da14 <__sflush_r+0x1c>
 800daf6:	4407      	add	r7, r0
 800daf8:	eba8 0800 	sub.w	r8, r8, r0
 800dafc:	e7e9      	b.n	800dad2 <__sflush_r+0xda>
 800dafe:	bf00      	nop
 800db00:	dfbffffe 	.word	0xdfbffffe

0800db04 <_fflush_r>:
 800db04:	b538      	push	{r3, r4, r5, lr}
 800db06:	690b      	ldr	r3, [r1, #16]
 800db08:	4605      	mov	r5, r0
 800db0a:	460c      	mov	r4, r1
 800db0c:	b913      	cbnz	r3, 800db14 <_fflush_r+0x10>
 800db0e:	2500      	movs	r5, #0
 800db10:	4628      	mov	r0, r5
 800db12:	bd38      	pop	{r3, r4, r5, pc}
 800db14:	b118      	cbz	r0, 800db1e <_fflush_r+0x1a>
 800db16:	6a03      	ldr	r3, [r0, #32]
 800db18:	b90b      	cbnz	r3, 800db1e <_fflush_r+0x1a>
 800db1a:	f7fe fb2f 	bl	800c17c <__sinit>
 800db1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d0f3      	beq.n	800db0e <_fflush_r+0xa>
 800db26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800db28:	07d0      	lsls	r0, r2, #31
 800db2a:	d404      	bmi.n	800db36 <_fflush_r+0x32>
 800db2c:	0599      	lsls	r1, r3, #22
 800db2e:	d402      	bmi.n	800db36 <_fflush_r+0x32>
 800db30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db32:	f7fe fc4a 	bl	800c3ca <__retarget_lock_acquire_recursive>
 800db36:	4628      	mov	r0, r5
 800db38:	4621      	mov	r1, r4
 800db3a:	f7ff ff5d 	bl	800d9f8 <__sflush_r>
 800db3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db40:	07da      	lsls	r2, r3, #31
 800db42:	4605      	mov	r5, r0
 800db44:	d4e4      	bmi.n	800db10 <_fflush_r+0xc>
 800db46:	89a3      	ldrh	r3, [r4, #12]
 800db48:	059b      	lsls	r3, r3, #22
 800db4a:	d4e1      	bmi.n	800db10 <_fflush_r+0xc>
 800db4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db4e:	f7fe fc3d 	bl	800c3cc <__retarget_lock_release_recursive>
 800db52:	e7dd      	b.n	800db10 <_fflush_r+0xc>

0800db54 <memmove>:
 800db54:	4288      	cmp	r0, r1
 800db56:	b510      	push	{r4, lr}
 800db58:	eb01 0402 	add.w	r4, r1, r2
 800db5c:	d902      	bls.n	800db64 <memmove+0x10>
 800db5e:	4284      	cmp	r4, r0
 800db60:	4623      	mov	r3, r4
 800db62:	d807      	bhi.n	800db74 <memmove+0x20>
 800db64:	1e43      	subs	r3, r0, #1
 800db66:	42a1      	cmp	r1, r4
 800db68:	d008      	beq.n	800db7c <memmove+0x28>
 800db6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800db72:	e7f8      	b.n	800db66 <memmove+0x12>
 800db74:	4402      	add	r2, r0
 800db76:	4601      	mov	r1, r0
 800db78:	428a      	cmp	r2, r1
 800db7a:	d100      	bne.n	800db7e <memmove+0x2a>
 800db7c:	bd10      	pop	{r4, pc}
 800db7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800db82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800db86:	e7f7      	b.n	800db78 <memmove+0x24>

0800db88 <memcpy>:
 800db88:	440a      	add	r2, r1
 800db8a:	4291      	cmp	r1, r2
 800db8c:	f100 33ff 	add.w	r3, r0, #4294967295
 800db90:	d100      	bne.n	800db94 <memcpy+0xc>
 800db92:	4770      	bx	lr
 800db94:	b510      	push	{r4, lr}
 800db96:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800db9e:	4291      	cmp	r1, r2
 800dba0:	d1f9      	bne.n	800db96 <memcpy+0xe>
 800dba2:	bd10      	pop	{r4, pc}

0800dba4 <__assert_func>:
 800dba4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dba6:	4614      	mov	r4, r2
 800dba8:	461a      	mov	r2, r3
 800dbaa:	4b09      	ldr	r3, [pc, #36]	; (800dbd0 <__assert_func+0x2c>)
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	4605      	mov	r5, r0
 800dbb0:	68d8      	ldr	r0, [r3, #12]
 800dbb2:	b14c      	cbz	r4, 800dbc8 <__assert_func+0x24>
 800dbb4:	4b07      	ldr	r3, [pc, #28]	; (800dbd4 <__assert_func+0x30>)
 800dbb6:	9100      	str	r1, [sp, #0]
 800dbb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dbbc:	4906      	ldr	r1, [pc, #24]	; (800dbd8 <__assert_func+0x34>)
 800dbbe:	462b      	mov	r3, r5
 800dbc0:	f000 f872 	bl	800dca8 <fiprintf>
 800dbc4:	f000 f882 	bl	800dccc <abort>
 800dbc8:	4b04      	ldr	r3, [pc, #16]	; (800dbdc <__assert_func+0x38>)
 800dbca:	461c      	mov	r4, r3
 800dbcc:	e7f3      	b.n	800dbb6 <__assert_func+0x12>
 800dbce:	bf00      	nop
 800dbd0:	2400015c 	.word	0x2400015c
 800dbd4:	0800e4f7 	.word	0x0800e4f7
 800dbd8:	0800e504 	.word	0x0800e504
 800dbdc:	0800e532 	.word	0x0800e532

0800dbe0 <_calloc_r>:
 800dbe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dbe2:	fba1 2402 	umull	r2, r4, r1, r2
 800dbe6:	b94c      	cbnz	r4, 800dbfc <_calloc_r+0x1c>
 800dbe8:	4611      	mov	r1, r2
 800dbea:	9201      	str	r2, [sp, #4]
 800dbec:	f7fd fd72 	bl	800b6d4 <_malloc_r>
 800dbf0:	9a01      	ldr	r2, [sp, #4]
 800dbf2:	4605      	mov	r5, r0
 800dbf4:	b930      	cbnz	r0, 800dc04 <_calloc_r+0x24>
 800dbf6:	4628      	mov	r0, r5
 800dbf8:	b003      	add	sp, #12
 800dbfa:	bd30      	pop	{r4, r5, pc}
 800dbfc:	220c      	movs	r2, #12
 800dbfe:	6002      	str	r2, [r0, #0]
 800dc00:	2500      	movs	r5, #0
 800dc02:	e7f8      	b.n	800dbf6 <_calloc_r+0x16>
 800dc04:	4621      	mov	r1, r4
 800dc06:	f7fe fb52 	bl	800c2ae <memset>
 800dc0a:	e7f4      	b.n	800dbf6 <_calloc_r+0x16>

0800dc0c <__ascii_mbtowc>:
 800dc0c:	b082      	sub	sp, #8
 800dc0e:	b901      	cbnz	r1, 800dc12 <__ascii_mbtowc+0x6>
 800dc10:	a901      	add	r1, sp, #4
 800dc12:	b142      	cbz	r2, 800dc26 <__ascii_mbtowc+0x1a>
 800dc14:	b14b      	cbz	r3, 800dc2a <__ascii_mbtowc+0x1e>
 800dc16:	7813      	ldrb	r3, [r2, #0]
 800dc18:	600b      	str	r3, [r1, #0]
 800dc1a:	7812      	ldrb	r2, [r2, #0]
 800dc1c:	1e10      	subs	r0, r2, #0
 800dc1e:	bf18      	it	ne
 800dc20:	2001      	movne	r0, #1
 800dc22:	b002      	add	sp, #8
 800dc24:	4770      	bx	lr
 800dc26:	4610      	mov	r0, r2
 800dc28:	e7fb      	b.n	800dc22 <__ascii_mbtowc+0x16>
 800dc2a:	f06f 0001 	mvn.w	r0, #1
 800dc2e:	e7f8      	b.n	800dc22 <__ascii_mbtowc+0x16>

0800dc30 <_realloc_r>:
 800dc30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc34:	4680      	mov	r8, r0
 800dc36:	4614      	mov	r4, r2
 800dc38:	460e      	mov	r6, r1
 800dc3a:	b921      	cbnz	r1, 800dc46 <_realloc_r+0x16>
 800dc3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc40:	4611      	mov	r1, r2
 800dc42:	f7fd bd47 	b.w	800b6d4 <_malloc_r>
 800dc46:	b92a      	cbnz	r2, 800dc54 <_realloc_r+0x24>
 800dc48:	f7ff f9b6 	bl	800cfb8 <_free_r>
 800dc4c:	4625      	mov	r5, r4
 800dc4e:	4628      	mov	r0, r5
 800dc50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc54:	f000 f841 	bl	800dcda <_malloc_usable_size_r>
 800dc58:	4284      	cmp	r4, r0
 800dc5a:	4607      	mov	r7, r0
 800dc5c:	d802      	bhi.n	800dc64 <_realloc_r+0x34>
 800dc5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dc62:	d812      	bhi.n	800dc8a <_realloc_r+0x5a>
 800dc64:	4621      	mov	r1, r4
 800dc66:	4640      	mov	r0, r8
 800dc68:	f7fd fd34 	bl	800b6d4 <_malloc_r>
 800dc6c:	4605      	mov	r5, r0
 800dc6e:	2800      	cmp	r0, #0
 800dc70:	d0ed      	beq.n	800dc4e <_realloc_r+0x1e>
 800dc72:	42bc      	cmp	r4, r7
 800dc74:	4622      	mov	r2, r4
 800dc76:	4631      	mov	r1, r6
 800dc78:	bf28      	it	cs
 800dc7a:	463a      	movcs	r2, r7
 800dc7c:	f7ff ff84 	bl	800db88 <memcpy>
 800dc80:	4631      	mov	r1, r6
 800dc82:	4640      	mov	r0, r8
 800dc84:	f7ff f998 	bl	800cfb8 <_free_r>
 800dc88:	e7e1      	b.n	800dc4e <_realloc_r+0x1e>
 800dc8a:	4635      	mov	r5, r6
 800dc8c:	e7df      	b.n	800dc4e <_realloc_r+0x1e>

0800dc8e <__ascii_wctomb>:
 800dc8e:	b149      	cbz	r1, 800dca4 <__ascii_wctomb+0x16>
 800dc90:	2aff      	cmp	r2, #255	; 0xff
 800dc92:	bf85      	ittet	hi
 800dc94:	238a      	movhi	r3, #138	; 0x8a
 800dc96:	6003      	strhi	r3, [r0, #0]
 800dc98:	700a      	strbls	r2, [r1, #0]
 800dc9a:	f04f 30ff 	movhi.w	r0, #4294967295
 800dc9e:	bf98      	it	ls
 800dca0:	2001      	movls	r0, #1
 800dca2:	4770      	bx	lr
 800dca4:	4608      	mov	r0, r1
 800dca6:	4770      	bx	lr

0800dca8 <fiprintf>:
 800dca8:	b40e      	push	{r1, r2, r3}
 800dcaa:	b503      	push	{r0, r1, lr}
 800dcac:	4601      	mov	r1, r0
 800dcae:	ab03      	add	r3, sp, #12
 800dcb0:	4805      	ldr	r0, [pc, #20]	; (800dcc8 <fiprintf+0x20>)
 800dcb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800dcb6:	6800      	ldr	r0, [r0, #0]
 800dcb8:	9301      	str	r3, [sp, #4]
 800dcba:	f000 f83f 	bl	800dd3c <_vfiprintf_r>
 800dcbe:	b002      	add	sp, #8
 800dcc0:	f85d eb04 	ldr.w	lr, [sp], #4
 800dcc4:	b003      	add	sp, #12
 800dcc6:	4770      	bx	lr
 800dcc8:	2400015c 	.word	0x2400015c

0800dccc <abort>:
 800dccc:	b508      	push	{r3, lr}
 800dcce:	2006      	movs	r0, #6
 800dcd0:	f000 fa0c 	bl	800e0ec <raise>
 800dcd4:	2001      	movs	r0, #1
 800dcd6:	f7f2 ff53 	bl	8000b80 <_exit>

0800dcda <_malloc_usable_size_r>:
 800dcda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dcde:	1f18      	subs	r0, r3, #4
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	bfbc      	itt	lt
 800dce4:	580b      	ldrlt	r3, [r1, r0]
 800dce6:	18c0      	addlt	r0, r0, r3
 800dce8:	4770      	bx	lr

0800dcea <__sfputc_r>:
 800dcea:	6893      	ldr	r3, [r2, #8]
 800dcec:	3b01      	subs	r3, #1
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	b410      	push	{r4}
 800dcf2:	6093      	str	r3, [r2, #8]
 800dcf4:	da08      	bge.n	800dd08 <__sfputc_r+0x1e>
 800dcf6:	6994      	ldr	r4, [r2, #24]
 800dcf8:	42a3      	cmp	r3, r4
 800dcfa:	db01      	blt.n	800dd00 <__sfputc_r+0x16>
 800dcfc:	290a      	cmp	r1, #10
 800dcfe:	d103      	bne.n	800dd08 <__sfputc_r+0x1e>
 800dd00:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd04:	f000 b934 	b.w	800df70 <__swbuf_r>
 800dd08:	6813      	ldr	r3, [r2, #0]
 800dd0a:	1c58      	adds	r0, r3, #1
 800dd0c:	6010      	str	r0, [r2, #0]
 800dd0e:	7019      	strb	r1, [r3, #0]
 800dd10:	4608      	mov	r0, r1
 800dd12:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd16:	4770      	bx	lr

0800dd18 <__sfputs_r>:
 800dd18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd1a:	4606      	mov	r6, r0
 800dd1c:	460f      	mov	r7, r1
 800dd1e:	4614      	mov	r4, r2
 800dd20:	18d5      	adds	r5, r2, r3
 800dd22:	42ac      	cmp	r4, r5
 800dd24:	d101      	bne.n	800dd2a <__sfputs_r+0x12>
 800dd26:	2000      	movs	r0, #0
 800dd28:	e007      	b.n	800dd3a <__sfputs_r+0x22>
 800dd2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd2e:	463a      	mov	r2, r7
 800dd30:	4630      	mov	r0, r6
 800dd32:	f7ff ffda 	bl	800dcea <__sfputc_r>
 800dd36:	1c43      	adds	r3, r0, #1
 800dd38:	d1f3      	bne.n	800dd22 <__sfputs_r+0xa>
 800dd3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dd3c <_vfiprintf_r>:
 800dd3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd40:	460d      	mov	r5, r1
 800dd42:	b09d      	sub	sp, #116	; 0x74
 800dd44:	4614      	mov	r4, r2
 800dd46:	4698      	mov	r8, r3
 800dd48:	4606      	mov	r6, r0
 800dd4a:	b118      	cbz	r0, 800dd54 <_vfiprintf_r+0x18>
 800dd4c:	6a03      	ldr	r3, [r0, #32]
 800dd4e:	b90b      	cbnz	r3, 800dd54 <_vfiprintf_r+0x18>
 800dd50:	f7fe fa14 	bl	800c17c <__sinit>
 800dd54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd56:	07d9      	lsls	r1, r3, #31
 800dd58:	d405      	bmi.n	800dd66 <_vfiprintf_r+0x2a>
 800dd5a:	89ab      	ldrh	r3, [r5, #12]
 800dd5c:	059a      	lsls	r2, r3, #22
 800dd5e:	d402      	bmi.n	800dd66 <_vfiprintf_r+0x2a>
 800dd60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd62:	f7fe fb32 	bl	800c3ca <__retarget_lock_acquire_recursive>
 800dd66:	89ab      	ldrh	r3, [r5, #12]
 800dd68:	071b      	lsls	r3, r3, #28
 800dd6a:	d501      	bpl.n	800dd70 <_vfiprintf_r+0x34>
 800dd6c:	692b      	ldr	r3, [r5, #16]
 800dd6e:	b99b      	cbnz	r3, 800dd98 <_vfiprintf_r+0x5c>
 800dd70:	4629      	mov	r1, r5
 800dd72:	4630      	mov	r0, r6
 800dd74:	f000 f93a 	bl	800dfec <__swsetup_r>
 800dd78:	b170      	cbz	r0, 800dd98 <_vfiprintf_r+0x5c>
 800dd7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd7c:	07dc      	lsls	r4, r3, #31
 800dd7e:	d504      	bpl.n	800dd8a <_vfiprintf_r+0x4e>
 800dd80:	f04f 30ff 	mov.w	r0, #4294967295
 800dd84:	b01d      	add	sp, #116	; 0x74
 800dd86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd8a:	89ab      	ldrh	r3, [r5, #12]
 800dd8c:	0598      	lsls	r0, r3, #22
 800dd8e:	d4f7      	bmi.n	800dd80 <_vfiprintf_r+0x44>
 800dd90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd92:	f7fe fb1b 	bl	800c3cc <__retarget_lock_release_recursive>
 800dd96:	e7f3      	b.n	800dd80 <_vfiprintf_r+0x44>
 800dd98:	2300      	movs	r3, #0
 800dd9a:	9309      	str	r3, [sp, #36]	; 0x24
 800dd9c:	2320      	movs	r3, #32
 800dd9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dda2:	f8cd 800c 	str.w	r8, [sp, #12]
 800dda6:	2330      	movs	r3, #48	; 0x30
 800dda8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800df5c <_vfiprintf_r+0x220>
 800ddac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ddb0:	f04f 0901 	mov.w	r9, #1
 800ddb4:	4623      	mov	r3, r4
 800ddb6:	469a      	mov	sl, r3
 800ddb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ddbc:	b10a      	cbz	r2, 800ddc2 <_vfiprintf_r+0x86>
 800ddbe:	2a25      	cmp	r2, #37	; 0x25
 800ddc0:	d1f9      	bne.n	800ddb6 <_vfiprintf_r+0x7a>
 800ddc2:	ebba 0b04 	subs.w	fp, sl, r4
 800ddc6:	d00b      	beq.n	800dde0 <_vfiprintf_r+0xa4>
 800ddc8:	465b      	mov	r3, fp
 800ddca:	4622      	mov	r2, r4
 800ddcc:	4629      	mov	r1, r5
 800ddce:	4630      	mov	r0, r6
 800ddd0:	f7ff ffa2 	bl	800dd18 <__sfputs_r>
 800ddd4:	3001      	adds	r0, #1
 800ddd6:	f000 80a9 	beq.w	800df2c <_vfiprintf_r+0x1f0>
 800ddda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dddc:	445a      	add	r2, fp
 800ddde:	9209      	str	r2, [sp, #36]	; 0x24
 800dde0:	f89a 3000 	ldrb.w	r3, [sl]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	f000 80a1 	beq.w	800df2c <_vfiprintf_r+0x1f0>
 800ddea:	2300      	movs	r3, #0
 800ddec:	f04f 32ff 	mov.w	r2, #4294967295
 800ddf0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ddf4:	f10a 0a01 	add.w	sl, sl, #1
 800ddf8:	9304      	str	r3, [sp, #16]
 800ddfa:	9307      	str	r3, [sp, #28]
 800ddfc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800de00:	931a      	str	r3, [sp, #104]	; 0x68
 800de02:	4654      	mov	r4, sl
 800de04:	2205      	movs	r2, #5
 800de06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de0a:	4854      	ldr	r0, [pc, #336]	; (800df5c <_vfiprintf_r+0x220>)
 800de0c:	f7f2 fa68 	bl	80002e0 <memchr>
 800de10:	9a04      	ldr	r2, [sp, #16]
 800de12:	b9d8      	cbnz	r0, 800de4c <_vfiprintf_r+0x110>
 800de14:	06d1      	lsls	r1, r2, #27
 800de16:	bf44      	itt	mi
 800de18:	2320      	movmi	r3, #32
 800de1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de1e:	0713      	lsls	r3, r2, #28
 800de20:	bf44      	itt	mi
 800de22:	232b      	movmi	r3, #43	; 0x2b
 800de24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de28:	f89a 3000 	ldrb.w	r3, [sl]
 800de2c:	2b2a      	cmp	r3, #42	; 0x2a
 800de2e:	d015      	beq.n	800de5c <_vfiprintf_r+0x120>
 800de30:	9a07      	ldr	r2, [sp, #28]
 800de32:	4654      	mov	r4, sl
 800de34:	2000      	movs	r0, #0
 800de36:	f04f 0c0a 	mov.w	ip, #10
 800de3a:	4621      	mov	r1, r4
 800de3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de40:	3b30      	subs	r3, #48	; 0x30
 800de42:	2b09      	cmp	r3, #9
 800de44:	d94d      	bls.n	800dee2 <_vfiprintf_r+0x1a6>
 800de46:	b1b0      	cbz	r0, 800de76 <_vfiprintf_r+0x13a>
 800de48:	9207      	str	r2, [sp, #28]
 800de4a:	e014      	b.n	800de76 <_vfiprintf_r+0x13a>
 800de4c:	eba0 0308 	sub.w	r3, r0, r8
 800de50:	fa09 f303 	lsl.w	r3, r9, r3
 800de54:	4313      	orrs	r3, r2
 800de56:	9304      	str	r3, [sp, #16]
 800de58:	46a2      	mov	sl, r4
 800de5a:	e7d2      	b.n	800de02 <_vfiprintf_r+0xc6>
 800de5c:	9b03      	ldr	r3, [sp, #12]
 800de5e:	1d19      	adds	r1, r3, #4
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	9103      	str	r1, [sp, #12]
 800de64:	2b00      	cmp	r3, #0
 800de66:	bfbb      	ittet	lt
 800de68:	425b      	neglt	r3, r3
 800de6a:	f042 0202 	orrlt.w	r2, r2, #2
 800de6e:	9307      	strge	r3, [sp, #28]
 800de70:	9307      	strlt	r3, [sp, #28]
 800de72:	bfb8      	it	lt
 800de74:	9204      	strlt	r2, [sp, #16]
 800de76:	7823      	ldrb	r3, [r4, #0]
 800de78:	2b2e      	cmp	r3, #46	; 0x2e
 800de7a:	d10c      	bne.n	800de96 <_vfiprintf_r+0x15a>
 800de7c:	7863      	ldrb	r3, [r4, #1]
 800de7e:	2b2a      	cmp	r3, #42	; 0x2a
 800de80:	d134      	bne.n	800deec <_vfiprintf_r+0x1b0>
 800de82:	9b03      	ldr	r3, [sp, #12]
 800de84:	1d1a      	adds	r2, r3, #4
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	9203      	str	r2, [sp, #12]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	bfb8      	it	lt
 800de8e:	f04f 33ff 	movlt.w	r3, #4294967295
 800de92:	3402      	adds	r4, #2
 800de94:	9305      	str	r3, [sp, #20]
 800de96:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800df6c <_vfiprintf_r+0x230>
 800de9a:	7821      	ldrb	r1, [r4, #0]
 800de9c:	2203      	movs	r2, #3
 800de9e:	4650      	mov	r0, sl
 800dea0:	f7f2 fa1e 	bl	80002e0 <memchr>
 800dea4:	b138      	cbz	r0, 800deb6 <_vfiprintf_r+0x17a>
 800dea6:	9b04      	ldr	r3, [sp, #16]
 800dea8:	eba0 000a 	sub.w	r0, r0, sl
 800deac:	2240      	movs	r2, #64	; 0x40
 800deae:	4082      	lsls	r2, r0
 800deb0:	4313      	orrs	r3, r2
 800deb2:	3401      	adds	r4, #1
 800deb4:	9304      	str	r3, [sp, #16]
 800deb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800deba:	4829      	ldr	r0, [pc, #164]	; (800df60 <_vfiprintf_r+0x224>)
 800debc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dec0:	2206      	movs	r2, #6
 800dec2:	f7f2 fa0d 	bl	80002e0 <memchr>
 800dec6:	2800      	cmp	r0, #0
 800dec8:	d03f      	beq.n	800df4a <_vfiprintf_r+0x20e>
 800deca:	4b26      	ldr	r3, [pc, #152]	; (800df64 <_vfiprintf_r+0x228>)
 800decc:	bb1b      	cbnz	r3, 800df16 <_vfiprintf_r+0x1da>
 800dece:	9b03      	ldr	r3, [sp, #12]
 800ded0:	3307      	adds	r3, #7
 800ded2:	f023 0307 	bic.w	r3, r3, #7
 800ded6:	3308      	adds	r3, #8
 800ded8:	9303      	str	r3, [sp, #12]
 800deda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dedc:	443b      	add	r3, r7
 800dede:	9309      	str	r3, [sp, #36]	; 0x24
 800dee0:	e768      	b.n	800ddb4 <_vfiprintf_r+0x78>
 800dee2:	fb0c 3202 	mla	r2, ip, r2, r3
 800dee6:	460c      	mov	r4, r1
 800dee8:	2001      	movs	r0, #1
 800deea:	e7a6      	b.n	800de3a <_vfiprintf_r+0xfe>
 800deec:	2300      	movs	r3, #0
 800deee:	3401      	adds	r4, #1
 800def0:	9305      	str	r3, [sp, #20]
 800def2:	4619      	mov	r1, r3
 800def4:	f04f 0c0a 	mov.w	ip, #10
 800def8:	4620      	mov	r0, r4
 800defa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800defe:	3a30      	subs	r2, #48	; 0x30
 800df00:	2a09      	cmp	r2, #9
 800df02:	d903      	bls.n	800df0c <_vfiprintf_r+0x1d0>
 800df04:	2b00      	cmp	r3, #0
 800df06:	d0c6      	beq.n	800de96 <_vfiprintf_r+0x15a>
 800df08:	9105      	str	r1, [sp, #20]
 800df0a:	e7c4      	b.n	800de96 <_vfiprintf_r+0x15a>
 800df0c:	fb0c 2101 	mla	r1, ip, r1, r2
 800df10:	4604      	mov	r4, r0
 800df12:	2301      	movs	r3, #1
 800df14:	e7f0      	b.n	800def8 <_vfiprintf_r+0x1bc>
 800df16:	ab03      	add	r3, sp, #12
 800df18:	9300      	str	r3, [sp, #0]
 800df1a:	462a      	mov	r2, r5
 800df1c:	4b12      	ldr	r3, [pc, #72]	; (800df68 <_vfiprintf_r+0x22c>)
 800df1e:	a904      	add	r1, sp, #16
 800df20:	4630      	mov	r0, r6
 800df22:	f7fd fcf5 	bl	800b910 <_printf_float>
 800df26:	4607      	mov	r7, r0
 800df28:	1c78      	adds	r0, r7, #1
 800df2a:	d1d6      	bne.n	800deda <_vfiprintf_r+0x19e>
 800df2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df2e:	07d9      	lsls	r1, r3, #31
 800df30:	d405      	bmi.n	800df3e <_vfiprintf_r+0x202>
 800df32:	89ab      	ldrh	r3, [r5, #12]
 800df34:	059a      	lsls	r2, r3, #22
 800df36:	d402      	bmi.n	800df3e <_vfiprintf_r+0x202>
 800df38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df3a:	f7fe fa47 	bl	800c3cc <__retarget_lock_release_recursive>
 800df3e:	89ab      	ldrh	r3, [r5, #12]
 800df40:	065b      	lsls	r3, r3, #25
 800df42:	f53f af1d 	bmi.w	800dd80 <_vfiprintf_r+0x44>
 800df46:	9809      	ldr	r0, [sp, #36]	; 0x24
 800df48:	e71c      	b.n	800dd84 <_vfiprintf_r+0x48>
 800df4a:	ab03      	add	r3, sp, #12
 800df4c:	9300      	str	r3, [sp, #0]
 800df4e:	462a      	mov	r2, r5
 800df50:	4b05      	ldr	r3, [pc, #20]	; (800df68 <_vfiprintf_r+0x22c>)
 800df52:	a904      	add	r1, sp, #16
 800df54:	4630      	mov	r0, r6
 800df56:	f7fd ff63 	bl	800be20 <_printf_i>
 800df5a:	e7e4      	b.n	800df26 <_vfiprintf_r+0x1ea>
 800df5c:	0800e4dc 	.word	0x0800e4dc
 800df60:	0800e4e6 	.word	0x0800e4e6
 800df64:	0800b911 	.word	0x0800b911
 800df68:	0800dd19 	.word	0x0800dd19
 800df6c:	0800e4e2 	.word	0x0800e4e2

0800df70 <__swbuf_r>:
 800df70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df72:	460e      	mov	r6, r1
 800df74:	4614      	mov	r4, r2
 800df76:	4605      	mov	r5, r0
 800df78:	b118      	cbz	r0, 800df82 <__swbuf_r+0x12>
 800df7a:	6a03      	ldr	r3, [r0, #32]
 800df7c:	b90b      	cbnz	r3, 800df82 <__swbuf_r+0x12>
 800df7e:	f7fe f8fd 	bl	800c17c <__sinit>
 800df82:	69a3      	ldr	r3, [r4, #24]
 800df84:	60a3      	str	r3, [r4, #8]
 800df86:	89a3      	ldrh	r3, [r4, #12]
 800df88:	071a      	lsls	r2, r3, #28
 800df8a:	d525      	bpl.n	800dfd8 <__swbuf_r+0x68>
 800df8c:	6923      	ldr	r3, [r4, #16]
 800df8e:	b31b      	cbz	r3, 800dfd8 <__swbuf_r+0x68>
 800df90:	6823      	ldr	r3, [r4, #0]
 800df92:	6922      	ldr	r2, [r4, #16]
 800df94:	1a98      	subs	r0, r3, r2
 800df96:	6963      	ldr	r3, [r4, #20]
 800df98:	b2f6      	uxtb	r6, r6
 800df9a:	4283      	cmp	r3, r0
 800df9c:	4637      	mov	r7, r6
 800df9e:	dc04      	bgt.n	800dfaa <__swbuf_r+0x3a>
 800dfa0:	4621      	mov	r1, r4
 800dfa2:	4628      	mov	r0, r5
 800dfa4:	f7ff fdae 	bl	800db04 <_fflush_r>
 800dfa8:	b9e0      	cbnz	r0, 800dfe4 <__swbuf_r+0x74>
 800dfaa:	68a3      	ldr	r3, [r4, #8]
 800dfac:	3b01      	subs	r3, #1
 800dfae:	60a3      	str	r3, [r4, #8]
 800dfb0:	6823      	ldr	r3, [r4, #0]
 800dfb2:	1c5a      	adds	r2, r3, #1
 800dfb4:	6022      	str	r2, [r4, #0]
 800dfb6:	701e      	strb	r6, [r3, #0]
 800dfb8:	6962      	ldr	r2, [r4, #20]
 800dfba:	1c43      	adds	r3, r0, #1
 800dfbc:	429a      	cmp	r2, r3
 800dfbe:	d004      	beq.n	800dfca <__swbuf_r+0x5a>
 800dfc0:	89a3      	ldrh	r3, [r4, #12]
 800dfc2:	07db      	lsls	r3, r3, #31
 800dfc4:	d506      	bpl.n	800dfd4 <__swbuf_r+0x64>
 800dfc6:	2e0a      	cmp	r6, #10
 800dfc8:	d104      	bne.n	800dfd4 <__swbuf_r+0x64>
 800dfca:	4621      	mov	r1, r4
 800dfcc:	4628      	mov	r0, r5
 800dfce:	f7ff fd99 	bl	800db04 <_fflush_r>
 800dfd2:	b938      	cbnz	r0, 800dfe4 <__swbuf_r+0x74>
 800dfd4:	4638      	mov	r0, r7
 800dfd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dfd8:	4621      	mov	r1, r4
 800dfda:	4628      	mov	r0, r5
 800dfdc:	f000 f806 	bl	800dfec <__swsetup_r>
 800dfe0:	2800      	cmp	r0, #0
 800dfe2:	d0d5      	beq.n	800df90 <__swbuf_r+0x20>
 800dfe4:	f04f 37ff 	mov.w	r7, #4294967295
 800dfe8:	e7f4      	b.n	800dfd4 <__swbuf_r+0x64>
	...

0800dfec <__swsetup_r>:
 800dfec:	b538      	push	{r3, r4, r5, lr}
 800dfee:	4b2a      	ldr	r3, [pc, #168]	; (800e098 <__swsetup_r+0xac>)
 800dff0:	4605      	mov	r5, r0
 800dff2:	6818      	ldr	r0, [r3, #0]
 800dff4:	460c      	mov	r4, r1
 800dff6:	b118      	cbz	r0, 800e000 <__swsetup_r+0x14>
 800dff8:	6a03      	ldr	r3, [r0, #32]
 800dffa:	b90b      	cbnz	r3, 800e000 <__swsetup_r+0x14>
 800dffc:	f7fe f8be 	bl	800c17c <__sinit>
 800e000:	89a3      	ldrh	r3, [r4, #12]
 800e002:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e006:	0718      	lsls	r0, r3, #28
 800e008:	d422      	bmi.n	800e050 <__swsetup_r+0x64>
 800e00a:	06d9      	lsls	r1, r3, #27
 800e00c:	d407      	bmi.n	800e01e <__swsetup_r+0x32>
 800e00e:	2309      	movs	r3, #9
 800e010:	602b      	str	r3, [r5, #0]
 800e012:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e016:	81a3      	strh	r3, [r4, #12]
 800e018:	f04f 30ff 	mov.w	r0, #4294967295
 800e01c:	e034      	b.n	800e088 <__swsetup_r+0x9c>
 800e01e:	0758      	lsls	r0, r3, #29
 800e020:	d512      	bpl.n	800e048 <__swsetup_r+0x5c>
 800e022:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e024:	b141      	cbz	r1, 800e038 <__swsetup_r+0x4c>
 800e026:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e02a:	4299      	cmp	r1, r3
 800e02c:	d002      	beq.n	800e034 <__swsetup_r+0x48>
 800e02e:	4628      	mov	r0, r5
 800e030:	f7fe ffc2 	bl	800cfb8 <_free_r>
 800e034:	2300      	movs	r3, #0
 800e036:	6363      	str	r3, [r4, #52]	; 0x34
 800e038:	89a3      	ldrh	r3, [r4, #12]
 800e03a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e03e:	81a3      	strh	r3, [r4, #12]
 800e040:	2300      	movs	r3, #0
 800e042:	6063      	str	r3, [r4, #4]
 800e044:	6923      	ldr	r3, [r4, #16]
 800e046:	6023      	str	r3, [r4, #0]
 800e048:	89a3      	ldrh	r3, [r4, #12]
 800e04a:	f043 0308 	orr.w	r3, r3, #8
 800e04e:	81a3      	strh	r3, [r4, #12]
 800e050:	6923      	ldr	r3, [r4, #16]
 800e052:	b94b      	cbnz	r3, 800e068 <__swsetup_r+0x7c>
 800e054:	89a3      	ldrh	r3, [r4, #12]
 800e056:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e05a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e05e:	d003      	beq.n	800e068 <__swsetup_r+0x7c>
 800e060:	4621      	mov	r1, r4
 800e062:	4628      	mov	r0, r5
 800e064:	f000 f884 	bl	800e170 <__smakebuf_r>
 800e068:	89a0      	ldrh	r0, [r4, #12]
 800e06a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e06e:	f010 0301 	ands.w	r3, r0, #1
 800e072:	d00a      	beq.n	800e08a <__swsetup_r+0x9e>
 800e074:	2300      	movs	r3, #0
 800e076:	60a3      	str	r3, [r4, #8]
 800e078:	6963      	ldr	r3, [r4, #20]
 800e07a:	425b      	negs	r3, r3
 800e07c:	61a3      	str	r3, [r4, #24]
 800e07e:	6923      	ldr	r3, [r4, #16]
 800e080:	b943      	cbnz	r3, 800e094 <__swsetup_r+0xa8>
 800e082:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e086:	d1c4      	bne.n	800e012 <__swsetup_r+0x26>
 800e088:	bd38      	pop	{r3, r4, r5, pc}
 800e08a:	0781      	lsls	r1, r0, #30
 800e08c:	bf58      	it	pl
 800e08e:	6963      	ldrpl	r3, [r4, #20]
 800e090:	60a3      	str	r3, [r4, #8]
 800e092:	e7f4      	b.n	800e07e <__swsetup_r+0x92>
 800e094:	2000      	movs	r0, #0
 800e096:	e7f7      	b.n	800e088 <__swsetup_r+0x9c>
 800e098:	2400015c 	.word	0x2400015c

0800e09c <_raise_r>:
 800e09c:	291f      	cmp	r1, #31
 800e09e:	b538      	push	{r3, r4, r5, lr}
 800e0a0:	4604      	mov	r4, r0
 800e0a2:	460d      	mov	r5, r1
 800e0a4:	d904      	bls.n	800e0b0 <_raise_r+0x14>
 800e0a6:	2316      	movs	r3, #22
 800e0a8:	6003      	str	r3, [r0, #0]
 800e0aa:	f04f 30ff 	mov.w	r0, #4294967295
 800e0ae:	bd38      	pop	{r3, r4, r5, pc}
 800e0b0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e0b2:	b112      	cbz	r2, 800e0ba <_raise_r+0x1e>
 800e0b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e0b8:	b94b      	cbnz	r3, 800e0ce <_raise_r+0x32>
 800e0ba:	4620      	mov	r0, r4
 800e0bc:	f000 f830 	bl	800e120 <_getpid_r>
 800e0c0:	462a      	mov	r2, r5
 800e0c2:	4601      	mov	r1, r0
 800e0c4:	4620      	mov	r0, r4
 800e0c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e0ca:	f000 b817 	b.w	800e0fc <_kill_r>
 800e0ce:	2b01      	cmp	r3, #1
 800e0d0:	d00a      	beq.n	800e0e8 <_raise_r+0x4c>
 800e0d2:	1c59      	adds	r1, r3, #1
 800e0d4:	d103      	bne.n	800e0de <_raise_r+0x42>
 800e0d6:	2316      	movs	r3, #22
 800e0d8:	6003      	str	r3, [r0, #0]
 800e0da:	2001      	movs	r0, #1
 800e0dc:	e7e7      	b.n	800e0ae <_raise_r+0x12>
 800e0de:	2400      	movs	r4, #0
 800e0e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e0e4:	4628      	mov	r0, r5
 800e0e6:	4798      	blx	r3
 800e0e8:	2000      	movs	r0, #0
 800e0ea:	e7e0      	b.n	800e0ae <_raise_r+0x12>

0800e0ec <raise>:
 800e0ec:	4b02      	ldr	r3, [pc, #8]	; (800e0f8 <raise+0xc>)
 800e0ee:	4601      	mov	r1, r0
 800e0f0:	6818      	ldr	r0, [r3, #0]
 800e0f2:	f7ff bfd3 	b.w	800e09c <_raise_r>
 800e0f6:	bf00      	nop
 800e0f8:	2400015c 	.word	0x2400015c

0800e0fc <_kill_r>:
 800e0fc:	b538      	push	{r3, r4, r5, lr}
 800e0fe:	4d07      	ldr	r5, [pc, #28]	; (800e11c <_kill_r+0x20>)
 800e100:	2300      	movs	r3, #0
 800e102:	4604      	mov	r4, r0
 800e104:	4608      	mov	r0, r1
 800e106:	4611      	mov	r1, r2
 800e108:	602b      	str	r3, [r5, #0]
 800e10a:	f7f2 fd29 	bl	8000b60 <_kill>
 800e10e:	1c43      	adds	r3, r0, #1
 800e110:	d102      	bne.n	800e118 <_kill_r+0x1c>
 800e112:	682b      	ldr	r3, [r5, #0]
 800e114:	b103      	cbz	r3, 800e118 <_kill_r+0x1c>
 800e116:	6023      	str	r3, [r4, #0]
 800e118:	bd38      	pop	{r3, r4, r5, pc}
 800e11a:	bf00      	nop
 800e11c:	2400221c 	.word	0x2400221c

0800e120 <_getpid_r>:
 800e120:	f7f2 bd16 	b.w	8000b50 <_getpid>

0800e124 <__swhatbuf_r>:
 800e124:	b570      	push	{r4, r5, r6, lr}
 800e126:	460c      	mov	r4, r1
 800e128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e12c:	2900      	cmp	r1, #0
 800e12e:	b096      	sub	sp, #88	; 0x58
 800e130:	4615      	mov	r5, r2
 800e132:	461e      	mov	r6, r3
 800e134:	da0d      	bge.n	800e152 <__swhatbuf_r+0x2e>
 800e136:	89a3      	ldrh	r3, [r4, #12]
 800e138:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e13c:	f04f 0100 	mov.w	r1, #0
 800e140:	bf0c      	ite	eq
 800e142:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e146:	2340      	movne	r3, #64	; 0x40
 800e148:	2000      	movs	r0, #0
 800e14a:	6031      	str	r1, [r6, #0]
 800e14c:	602b      	str	r3, [r5, #0]
 800e14e:	b016      	add	sp, #88	; 0x58
 800e150:	bd70      	pop	{r4, r5, r6, pc}
 800e152:	466a      	mov	r2, sp
 800e154:	f000 f848 	bl	800e1e8 <_fstat_r>
 800e158:	2800      	cmp	r0, #0
 800e15a:	dbec      	blt.n	800e136 <__swhatbuf_r+0x12>
 800e15c:	9901      	ldr	r1, [sp, #4]
 800e15e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e162:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e166:	4259      	negs	r1, r3
 800e168:	4159      	adcs	r1, r3
 800e16a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e16e:	e7eb      	b.n	800e148 <__swhatbuf_r+0x24>

0800e170 <__smakebuf_r>:
 800e170:	898b      	ldrh	r3, [r1, #12]
 800e172:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e174:	079d      	lsls	r5, r3, #30
 800e176:	4606      	mov	r6, r0
 800e178:	460c      	mov	r4, r1
 800e17a:	d507      	bpl.n	800e18c <__smakebuf_r+0x1c>
 800e17c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e180:	6023      	str	r3, [r4, #0]
 800e182:	6123      	str	r3, [r4, #16]
 800e184:	2301      	movs	r3, #1
 800e186:	6163      	str	r3, [r4, #20]
 800e188:	b002      	add	sp, #8
 800e18a:	bd70      	pop	{r4, r5, r6, pc}
 800e18c:	ab01      	add	r3, sp, #4
 800e18e:	466a      	mov	r2, sp
 800e190:	f7ff ffc8 	bl	800e124 <__swhatbuf_r>
 800e194:	9900      	ldr	r1, [sp, #0]
 800e196:	4605      	mov	r5, r0
 800e198:	4630      	mov	r0, r6
 800e19a:	f7fd fa9b 	bl	800b6d4 <_malloc_r>
 800e19e:	b948      	cbnz	r0, 800e1b4 <__smakebuf_r+0x44>
 800e1a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1a4:	059a      	lsls	r2, r3, #22
 800e1a6:	d4ef      	bmi.n	800e188 <__smakebuf_r+0x18>
 800e1a8:	f023 0303 	bic.w	r3, r3, #3
 800e1ac:	f043 0302 	orr.w	r3, r3, #2
 800e1b0:	81a3      	strh	r3, [r4, #12]
 800e1b2:	e7e3      	b.n	800e17c <__smakebuf_r+0xc>
 800e1b4:	89a3      	ldrh	r3, [r4, #12]
 800e1b6:	6020      	str	r0, [r4, #0]
 800e1b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e1bc:	81a3      	strh	r3, [r4, #12]
 800e1be:	9b00      	ldr	r3, [sp, #0]
 800e1c0:	6163      	str	r3, [r4, #20]
 800e1c2:	9b01      	ldr	r3, [sp, #4]
 800e1c4:	6120      	str	r0, [r4, #16]
 800e1c6:	b15b      	cbz	r3, 800e1e0 <__smakebuf_r+0x70>
 800e1c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e1cc:	4630      	mov	r0, r6
 800e1ce:	f000 f81d 	bl	800e20c <_isatty_r>
 800e1d2:	b128      	cbz	r0, 800e1e0 <__smakebuf_r+0x70>
 800e1d4:	89a3      	ldrh	r3, [r4, #12]
 800e1d6:	f023 0303 	bic.w	r3, r3, #3
 800e1da:	f043 0301 	orr.w	r3, r3, #1
 800e1de:	81a3      	strh	r3, [r4, #12]
 800e1e0:	89a3      	ldrh	r3, [r4, #12]
 800e1e2:	431d      	orrs	r5, r3
 800e1e4:	81a5      	strh	r5, [r4, #12]
 800e1e6:	e7cf      	b.n	800e188 <__smakebuf_r+0x18>

0800e1e8 <_fstat_r>:
 800e1e8:	b538      	push	{r3, r4, r5, lr}
 800e1ea:	4d07      	ldr	r5, [pc, #28]	; (800e208 <_fstat_r+0x20>)
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	4604      	mov	r4, r0
 800e1f0:	4608      	mov	r0, r1
 800e1f2:	4611      	mov	r1, r2
 800e1f4:	602b      	str	r3, [r5, #0]
 800e1f6:	f7f2 fd12 	bl	8000c1e <_fstat>
 800e1fa:	1c43      	adds	r3, r0, #1
 800e1fc:	d102      	bne.n	800e204 <_fstat_r+0x1c>
 800e1fe:	682b      	ldr	r3, [r5, #0]
 800e200:	b103      	cbz	r3, 800e204 <_fstat_r+0x1c>
 800e202:	6023      	str	r3, [r4, #0]
 800e204:	bd38      	pop	{r3, r4, r5, pc}
 800e206:	bf00      	nop
 800e208:	2400221c 	.word	0x2400221c

0800e20c <_isatty_r>:
 800e20c:	b538      	push	{r3, r4, r5, lr}
 800e20e:	4d06      	ldr	r5, [pc, #24]	; (800e228 <_isatty_r+0x1c>)
 800e210:	2300      	movs	r3, #0
 800e212:	4604      	mov	r4, r0
 800e214:	4608      	mov	r0, r1
 800e216:	602b      	str	r3, [r5, #0]
 800e218:	f7f2 fd11 	bl	8000c3e <_isatty>
 800e21c:	1c43      	adds	r3, r0, #1
 800e21e:	d102      	bne.n	800e226 <_isatty_r+0x1a>
 800e220:	682b      	ldr	r3, [r5, #0]
 800e222:	b103      	cbz	r3, 800e226 <_isatty_r+0x1a>
 800e224:	6023      	str	r3, [r4, #0]
 800e226:	bd38      	pop	{r3, r4, r5, pc}
 800e228:	2400221c 	.word	0x2400221c

0800e22c <_init>:
 800e22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e22e:	bf00      	nop
 800e230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e232:	bc08      	pop	{r3}
 800e234:	469e      	mov	lr, r3
 800e236:	4770      	bx	lr

0800e238 <_fini>:
 800e238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e23a:	bf00      	nop
 800e23c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e23e:	bc08      	pop	{r3}
 800e240:	469e      	mov	lr, r3
 800e242:	4770      	bx	lr
