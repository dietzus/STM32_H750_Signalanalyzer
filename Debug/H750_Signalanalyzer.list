
H750_Signalanalyzer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ee34  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  0800f0d8  0800f0d8  0001f0d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800f4fc  0800f4fc  0001f4fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800f500  0800f500  0001f500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000030c  24000000  0800f504  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002000  24000310  0800f810  00020310  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  24002310  0800f810  00022310  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002030c  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002033a  2**0
                  CONTENTS, READONLY
 10 .debug_info   000191d5  00000000  00000000  0002037d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003ceb  00000000  00000000  00039552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001440  00000000  00000000  0003d240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000f29  00000000  00000000  0003e680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b706  00000000  00000000  0003f5a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a1a5  00000000  00000000  0007acaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016b645  00000000  00000000  00094e54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00006364  00000000  00000000  0020049c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000004b  00000000  00000000  00206800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000310 	.word	0x24000310
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f0bc 	.word	0x0800f0bc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000314 	.word	0x24000314
 80002dc:	0800f0bc 	.word	0x0800f0bc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <CubeM_DefChInit>:
uint8_t EOL[CUBEMONSMALLBUFSIZE] = "\n";
uint8_t EOLlen = 0;

cubeMchannel_t channels[CUBEMONMAXSIGNALS];

void CubeM_DefChInit() {
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
	for(uint8_t i=0; i<CUBEMONMAXSIGNALS; i++) {
 8000396:	2300      	movs	r3, #0
 8000398:	71fb      	strb	r3, [r7, #7]
 800039a:	e03b      	b.n	8000414 <CubeM_DefChInit+0x84>
		channels[i].newvalue = 0;
 800039c:	79fa      	ldrb	r2, [r7, #7]
 800039e:	4921      	ldr	r1, [pc, #132]	; (8000424 <CubeM_DefChInit+0x94>)
 80003a0:	4613      	mov	r3, r2
 80003a2:	009b      	lsls	r3, r3, #2
 80003a4:	4413      	add	r3, r2
 80003a6:	00db      	lsls	r3, r3, #3
 80003a8:	440b      	add	r3, r1
 80003aa:	2200      	movs	r2, #0
 80003ac:	701a      	strb	r2, [r3, #0]
		channels[i].reuseoldvalue = 0;
 80003ae:	79fa      	ldrb	r2, [r7, #7]
 80003b0:	491c      	ldr	r1, [pc, #112]	; (8000424 <CubeM_DefChInit+0x94>)
 80003b2:	4613      	mov	r3, r2
 80003b4:	009b      	lsls	r3, r3, #2
 80003b6:	4413      	add	r3, r2
 80003b8:	00db      	lsls	r3, r3, #3
 80003ba:	440b      	add	r3, r1
 80003bc:	3301      	adds	r3, #1
 80003be:	2200      	movs	r2, #0
 80003c0:	701a      	strb	r2, [r3, #0]
		channels[i].datatype = 2;
 80003c2:	79fa      	ldrb	r2, [r7, #7]
 80003c4:	4917      	ldr	r1, [pc, #92]	; (8000424 <CubeM_DefChInit+0x94>)
 80003c6:	4613      	mov	r3, r2
 80003c8:	009b      	lsls	r3, r3, #2
 80003ca:	4413      	add	r3, r2
 80003cc:	00db      	lsls	r3, r3, #3
 80003ce:	440b      	add	r3, r1
 80003d0:	3316      	adds	r3, #22
 80003d2:	2202      	movs	r2, #2
 80003d4:	701a      	strb	r2, [r3, #0]
		sprintf((char*)(channels[i].name), "Ch%d", i);
 80003d6:	79fa      	ldrb	r2, [r7, #7]
 80003d8:	4613      	mov	r3, r2
 80003da:	009b      	lsls	r3, r3, #2
 80003dc:	4413      	add	r3, r2
 80003de:	00db      	lsls	r3, r3, #3
 80003e0:	4a10      	ldr	r2, [pc, #64]	; (8000424 <CubeM_DefChInit+0x94>)
 80003e2:	4413      	add	r3, r2
 80003e4:	3302      	adds	r3, #2
 80003e6:	79fa      	ldrb	r2, [r7, #7]
 80003e8:	490f      	ldr	r1, [pc, #60]	; (8000428 <CubeM_DefChInit+0x98>)
 80003ea:	4618      	mov	r0, r3
 80003ec:	f00c fe3c 	bl	800d068 <siprintf>
		channels[i].value = 0.f;
 80003f0:	79fa      	ldrb	r2, [r7, #7]
 80003f2:	490c      	ldr	r1, [pc, #48]	; (8000424 <CubeM_DefChInit+0x94>)
 80003f4:	4613      	mov	r3, r2
 80003f6:	009b      	lsls	r3, r3, #2
 80003f8:	4413      	add	r3, r2
 80003fa:	00db      	lsls	r3, r3, #3
 80003fc:	440b      	add	r3, r1
 80003fe:	f103 0118 	add.w	r1, r3, #24
 8000402:	f04f 0200 	mov.w	r2, #0
 8000406:	f04f 0300 	mov.w	r3, #0
 800040a:	e9c1 2300 	strd	r2, r3, [r1]
	for(uint8_t i=0; i<CUBEMONMAXSIGNALS; i++) {
 800040e:	79fb      	ldrb	r3, [r7, #7]
 8000410:	3301      	adds	r3, #1
 8000412:	71fb      	strb	r3, [r7, #7]
 8000414:	79fb      	ldrb	r3, [r7, #7]
 8000416:	2b07      	cmp	r3, #7
 8000418:	d9c0      	bls.n	800039c <CubeM_DefChInit+0xc>
	}
}
 800041a:	bf00      	nop
 800041c:	bf00      	nop
 800041e:	3708      	adds	r7, #8
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	24000340 	.word	0x24000340
 8000428:	0800f0d8 	.word	0x0800f0d8

0800042c <CubeM_getStrLengths>:

void CubeM_getStrLengths() {
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
	dellen = strlen((char*)delimiter);
 8000430:	480b      	ldr	r0, [pc, #44]	; (8000460 <CubeM_getStrLengths+0x34>)
 8000432:	f7ff ffa5 	bl	8000380 <strlen>
 8000436:	4603      	mov	r3, r0
 8000438:	b2da      	uxtb	r2, r3
 800043a:	4b0a      	ldr	r3, [pc, #40]	; (8000464 <CubeM_getStrLengths+0x38>)
 800043c:	701a      	strb	r2, [r3, #0]
	conlen = strlen((char*)connector);
 800043e:	480a      	ldr	r0, [pc, #40]	; (8000468 <CubeM_getStrLengths+0x3c>)
 8000440:	f7ff ff9e 	bl	8000380 <strlen>
 8000444:	4603      	mov	r3, r0
 8000446:	b2da      	uxtb	r2, r3
 8000448:	4b08      	ldr	r3, [pc, #32]	; (800046c <CubeM_getStrLengths+0x40>)
 800044a:	701a      	strb	r2, [r3, #0]
	EOLlen = strlen((char*)EOL);
 800044c:	4808      	ldr	r0, [pc, #32]	; (8000470 <CubeM_getStrLengths+0x44>)
 800044e:	f7ff ff97 	bl	8000380 <strlen>
 8000452:	4603      	mov	r3, r0
 8000454:	b2da      	uxtb	r2, r3
 8000456:	4b07      	ldr	r3, [pc, #28]	; (8000474 <CubeM_getStrLengths+0x48>)
 8000458:	701a      	strb	r2, [r3, #0]
}
 800045a:	bf00      	nop
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	24000004 	.word	0x24000004
 8000464:	2400033c 	.word	0x2400033c
 8000468:	24000018 	.word	0x24000018
 800046c:	2400033d 	.word	0x2400033d
 8000470:	2400002c 	.word	0x2400002c
 8000474:	2400033e 	.word	0x2400033e

08000478 <CubeM_Init>:

uint32_t CubeM_defInit() {
	return CubeM_Init(50);
}

uint32_t CubeM_Init(uint32_t bufsize) {
 8000478:	b580      	push	{r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
	CubeM_DefChInit();
 8000480:	f7ff ff86 	bl	8000390 <CubeM_DefChInit>

	uint32_t tempsize = CubeM_setBufferSize(bufsize);
 8000484:	6878      	ldr	r0, [r7, #4]
 8000486:	f000 f819 	bl	80004bc <CubeM_setBufferSize>
 800048a:	60f8      	str	r0, [r7, #12]

	if(tempsize == 0 || tempsize!=bufsize) {
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d003      	beq.n	800049a <CubeM_Init+0x22>
 8000492:	68fa      	ldr	r2, [r7, #12]
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	429a      	cmp	r2, r3
 8000498:	d003      	beq.n	80004a2 <CubeM_Init+0x2a>
		tempsize = CubeM_setBufferSize(50);
 800049a:	2032      	movs	r0, #50	; 0x32
 800049c:	f000 f80e 	bl	80004bc <CubeM_setBufferSize>
 80004a0:	60f8      	str	r0, [r7, #12]
	}

	CubeM_getStrLengths();
 80004a2:	f7ff ffc3 	bl	800042c <CubeM_getStrLengths>
	isInit = 1;
 80004a6:	4b04      	ldr	r3, [pc, #16]	; (80004b8 <CubeM_Init+0x40>)
 80004a8:	2201      	movs	r2, #1
 80004aa:	701a      	strb	r2, [r3, #0]

	return tempsize;
 80004ac:	68fb      	ldr	r3, [r7, #12]
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	3710      	adds	r7, #16
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	2400032c 	.word	0x2400032c

080004bc <CubeM_setBufferSize>:
//Currently not used
void CubeM_setUART() {

}

uint32_t CubeM_setBufferSize(uint32_t sizeb) {
 80004bc:	b580      	push	{r7, lr}
 80004be:	b084      	sub	sp, #16
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
	if(sizeb != buffersize) {
 80004c4:	4b13      	ldr	r3, [pc, #76]	; (8000514 <CubeM_setBufferSize+0x58>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	687a      	ldr	r2, [r7, #4]
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d01c      	beq.n	8000508 <CubeM_setBufferSize+0x4c>
		uint8_t *temppointer = malloc(sizeb);
 80004ce:	6878      	ldr	r0, [r7, #4]
 80004d0:	f00c f812 	bl	800c4f8 <malloc>
 80004d4:	4603      	mov	r3, r0
 80004d6:	60fb      	str	r3, [r7, #12]
		if(temppointer != NULL) {
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d014      	beq.n	8000508 <CubeM_setBufferSize+0x4c>
			free(buffer);
 80004de:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <CubeM_setBufferSize+0x5c>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4618      	mov	r0, r3
 80004e4:	f00c f810 	bl	800c508 <free>
			buffer = temppointer;
 80004e8:	4a0b      	ldr	r2, [pc, #44]	; (8000518 <CubeM_setBufferSize+0x5c>)
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	6013      	str	r3, [r2, #0]
			buffer[0] = '\0';
 80004ee:	4b0a      	ldr	r3, [pc, #40]	; (8000518 <CubeM_setBufferSize+0x5c>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	2200      	movs	r2, #0
 80004f4:	701a      	strb	r2, [r3, #0]

			buffersize = sizeb;
 80004f6:	4a07      	ldr	r2, [pc, #28]	; (8000514 <CubeM_setBufferSize+0x58>)
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	6013      	str	r3, [r2, #0]
			emptybuffer = 1;
 80004fc:	4b07      	ldr	r3, [pc, #28]	; (800051c <CubeM_setBufferSize+0x60>)
 80004fe:	2201      	movs	r2, #1
 8000500:	701a      	strb	r2, [r3, #0]
			usedbuffer = 0;
 8000502:	4b07      	ldr	r3, [pc, #28]	; (8000520 <CubeM_setBufferSize+0x64>)
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
		}
	}
	return buffersize;
 8000508:	4b02      	ldr	r3, [pc, #8]	; (8000514 <CubeM_setBufferSize+0x58>)
 800050a:	681b      	ldr	r3, [r3, #0]
}
 800050c:	4618      	mov	r0, r3
 800050e:	3710      	adds	r7, #16
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	24000330 	.word	0x24000330
 8000518:	24000338 	.word	0x24000338
 800051c:	24000000 	.word	0x24000000
 8000520:	24000334 	.word	0x24000334

08000524 <CubeM_clearBuffer>:

uint8_t CubeM_clearBuffer() {
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
	if(emptybuffer == 1 && usedbuffer == 0) return 1;
 8000528:	4b0c      	ldr	r3, [pc, #48]	; (800055c <CubeM_clearBuffer+0x38>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	2b01      	cmp	r3, #1
 800052e:	d105      	bne.n	800053c <CubeM_clearBuffer+0x18>
 8000530:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <CubeM_clearBuffer+0x3c>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d101      	bne.n	800053c <CubeM_clearBuffer+0x18>
 8000538:	2301      	movs	r3, #1
 800053a:	e00a      	b.n	8000552 <CubeM_clearBuffer+0x2e>

	buffer[0] = '\0';
 800053c:	4b09      	ldr	r3, [pc, #36]	; (8000564 <CubeM_clearBuffer+0x40>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2200      	movs	r2, #0
 8000542:	701a      	strb	r2, [r3, #0]
	emptybuffer = 1;
 8000544:	4b05      	ldr	r3, [pc, #20]	; (800055c <CubeM_clearBuffer+0x38>)
 8000546:	2201      	movs	r2, #1
 8000548:	701a      	strb	r2, [r3, #0]
	usedbuffer = 0;
 800054a:	4b05      	ldr	r3, [pc, #20]	; (8000560 <CubeM_clearBuffer+0x3c>)
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
	return 0;
 8000550:	2300      	movs	r3, #0
}
 8000552:	4618      	mov	r0, r3
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr
 800055c:	24000000 	.word	0x24000000
 8000560:	24000334 	.word	0x24000334
 8000564:	24000338 	.word	0x24000338

08000568 <CubeM_setChannelname>:

uint8_t CubeM_setChannelname(uint8_t channel, uint8_t *newname) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	6039      	str	r1, [r7, #0]
 8000572:	71fb      	strb	r3, [r7, #7]
	uint32_t templen = strlen((char*)newname);
 8000574:	6838      	ldr	r0, [r7, #0]
 8000576:	f7ff ff03 	bl	8000380 <strlen>
 800057a:	60f8      	str	r0, [r7, #12]
	if((templen < CUBEMONSMALLBUFSIZE && templen > 0) && (channel >= 0 && channel < CUBEMONMAXSIGNALS)) {
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	2b13      	cmp	r3, #19
 8000580:	d813      	bhi.n	80005aa <CubeM_setChannelname+0x42>
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d010      	beq.n	80005aa <CubeM_setChannelname+0x42>
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	2b07      	cmp	r3, #7
 800058c:	d80d      	bhi.n	80005aa <CubeM_setChannelname+0x42>
		strcpy((char*)(channels[channel].name), (char*)newname);
 800058e:	79fa      	ldrb	r2, [r7, #7]
 8000590:	4613      	mov	r3, r2
 8000592:	009b      	lsls	r3, r3, #2
 8000594:	4413      	add	r3, r2
 8000596:	00db      	lsls	r3, r3, #3
 8000598:	4a06      	ldr	r2, [pc, #24]	; (80005b4 <CubeM_setChannelname+0x4c>)
 800059a:	4413      	add	r3, r2
 800059c:	3302      	adds	r3, #2
 800059e:	6839      	ldr	r1, [r7, #0]
 80005a0:	4618      	mov	r0, r3
 80005a2:	f00c fe54 	bl	800d24e <strcpy>

		return 0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	e000      	b.n	80005ac <CubeM_setChannelname+0x44>
	}
	return 1;
 80005aa:	2301      	movs	r3, #1
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3710      	adds	r7, #16
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	24000340 	.word	0x24000340

080005b8 <CubeM_attendUIntValue>:
	}

	return 1;
}

uint8_t CubeM_attendUIntValue(uint8_t channel, uint32_t value) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b09a      	sub	sp, #104	; 0x68
 80005bc:	af02      	add	r7, sp, #8
 80005be:	4603      	mov	r3, r0
 80005c0:	6039      	str	r1, [r7, #0]
 80005c2:	71fb      	strb	r3, [r7, #7]
	if(channel >= 0 && channel < CUBEMONMAXSIGNALS) {
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	2b07      	cmp	r3, #7
 80005c8:	d845      	bhi.n	8000656 <CubeM_attendUIntValue+0x9e>
		char tempstring[CUBEMONSMALLBUFSIZE*4];

		uint32_t tempsize;
		sprintf(tempstring, "%s%s%s%ld", delimiter, channels[channel].name, connector, value);
 80005ca:	79fa      	ldrb	r2, [r7, #7]
 80005cc:	4613      	mov	r3, r2
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	4413      	add	r3, r2
 80005d2:	00db      	lsls	r3, r3, #3
 80005d4:	4a22      	ldr	r2, [pc, #136]	; (8000660 <CubeM_attendUIntValue+0xa8>)
 80005d6:	4413      	add	r3, r2
 80005d8:	1c9a      	adds	r2, r3, #2
 80005da:	f107 000c 	add.w	r0, r7, #12
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	9301      	str	r3, [sp, #4]
 80005e2:	4b20      	ldr	r3, [pc, #128]	; (8000664 <CubeM_attendUIntValue+0xac>)
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	4613      	mov	r3, r2
 80005e8:	4a1f      	ldr	r2, [pc, #124]	; (8000668 <CubeM_attendUIntValue+0xb0>)
 80005ea:	4920      	ldr	r1, [pc, #128]	; (800066c <CubeM_attendUIntValue+0xb4>)
 80005ec:	f00c fd3c 	bl	800d068 <siprintf>
		tempsize = usedbuffer + strlen((char*)tempstring) - (emptybuffer * dellen);
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	4618      	mov	r0, r3
 80005f6:	f7ff fec3 	bl	8000380 <strlen>
 80005fa:	4602      	mov	r2, r0
 80005fc:	4b1c      	ldr	r3, [pc, #112]	; (8000670 <CubeM_attendUIntValue+0xb8>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4413      	add	r3, r2
 8000602:	4a1c      	ldr	r2, [pc, #112]	; (8000674 <CubeM_attendUIntValue+0xbc>)
 8000604:	7812      	ldrb	r2, [r2, #0]
 8000606:	4611      	mov	r1, r2
 8000608:	4a1b      	ldr	r2, [pc, #108]	; (8000678 <CubeM_attendUIntValue+0xc0>)
 800060a:	7812      	ldrb	r2, [r2, #0]
 800060c:	fb01 f202 	mul.w	r2, r1, r2
 8000610:	1a9b      	subs	r3, r3, r2
 8000612:	65fb      	str	r3, [r7, #92]	; 0x5c

		if(tempsize < buffersize) {
 8000614:	4b19      	ldr	r3, [pc, #100]	; (800067c <CubeM_attendUIntValue+0xc4>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800061a:	429a      	cmp	r2, r3
 800061c:	d21b      	bcs.n	8000656 <CubeM_attendUIntValue+0x9e>
			strcpy((char*)(buffer + (usedbuffer)), (char*)(tempstring + (emptybuffer * dellen)));
 800061e:	4b18      	ldr	r3, [pc, #96]	; (8000680 <CubeM_attendUIntValue+0xc8>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	4b13      	ldr	r3, [pc, #76]	; (8000670 <CubeM_attendUIntValue+0xb8>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	441a      	add	r2, r3
 8000628:	4b12      	ldr	r3, [pc, #72]	; (8000674 <CubeM_attendUIntValue+0xbc>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	4619      	mov	r1, r3
 800062e:	4b12      	ldr	r3, [pc, #72]	; (8000678 <CubeM_attendUIntValue+0xc0>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	fb01 f303 	mul.w	r3, r1, r3
 8000636:	4619      	mov	r1, r3
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	440b      	add	r3, r1
 800063e:	4619      	mov	r1, r3
 8000640:	4610      	mov	r0, r2
 8000642:	f00c fe04 	bl	800d24e <strcpy>
			usedbuffer = tempsize;
 8000646:	4a0a      	ldr	r2, [pc, #40]	; (8000670 <CubeM_attendUIntValue+0xb8>)
 8000648:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800064a:	6013      	str	r3, [r2, #0]
			emptybuffer = 0;
 800064c:	4b09      	ldr	r3, [pc, #36]	; (8000674 <CubeM_attendUIntValue+0xbc>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
			return 0;
 8000652:	2300      	movs	r3, #0
 8000654:	e000      	b.n	8000658 <CubeM_attendUIntValue+0xa0>
		}
	}
	return 1;
 8000656:	2301      	movs	r3, #1
}
 8000658:	4618      	mov	r0, r3
 800065a:	3760      	adds	r7, #96	; 0x60
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	24000340 	.word	0x24000340
 8000664:	24000018 	.word	0x24000018
 8000668:	24000004 	.word	0x24000004
 800066c:	0800f0e0 	.word	0x0800f0e0
 8000670:	24000334 	.word	0x24000334
 8000674:	24000000 	.word	0x24000000
 8000678:	2400033c 	.word	0x2400033c
 800067c:	24000330 	.word	0x24000330
 8000680:	24000338 	.word	0x24000338

08000684 <CubeM_attendIntValue>:

uint8_t CubeM_attendIntValue(uint8_t channel, int32_t value) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b09a      	sub	sp, #104	; 0x68
 8000688:	af02      	add	r7, sp, #8
 800068a:	4603      	mov	r3, r0
 800068c:	6039      	str	r1, [r7, #0]
 800068e:	71fb      	strb	r3, [r7, #7]
	if(channel > 0 && channel < CUBEMONMAXSIGNALS) {
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d048      	beq.n	8000728 <CubeM_attendIntValue+0xa4>
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	2b07      	cmp	r3, #7
 800069a:	d845      	bhi.n	8000728 <CubeM_attendIntValue+0xa4>
		char tempstring[CUBEMONSMALLBUFSIZE*4];

		uint32_t tempsize;
		sprintf(tempstring, "%s%s%s%ld", delimiter, channels[channel].name, connector, value);
 800069c:	79fa      	ldrb	r2, [r7, #7]
 800069e:	4613      	mov	r3, r2
 80006a0:	009b      	lsls	r3, r3, #2
 80006a2:	4413      	add	r3, r2
 80006a4:	00db      	lsls	r3, r3, #3
 80006a6:	4a23      	ldr	r2, [pc, #140]	; (8000734 <CubeM_attendIntValue+0xb0>)
 80006a8:	4413      	add	r3, r2
 80006aa:	1c9a      	adds	r2, r3, #2
 80006ac:	f107 000c 	add.w	r0, r7, #12
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	9301      	str	r3, [sp, #4]
 80006b4:	4b20      	ldr	r3, [pc, #128]	; (8000738 <CubeM_attendIntValue+0xb4>)
 80006b6:	9300      	str	r3, [sp, #0]
 80006b8:	4613      	mov	r3, r2
 80006ba:	4a20      	ldr	r2, [pc, #128]	; (800073c <CubeM_attendIntValue+0xb8>)
 80006bc:	4920      	ldr	r1, [pc, #128]	; (8000740 <CubeM_attendIntValue+0xbc>)
 80006be:	f00c fcd3 	bl	800d068 <siprintf>
		tempsize = usedbuffer + strlen((char*)tempstring) - (emptybuffer * dellen);
 80006c2:	f107 030c 	add.w	r3, r7, #12
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff fe5a 	bl	8000380 <strlen>
 80006cc:	4602      	mov	r2, r0
 80006ce:	4b1d      	ldr	r3, [pc, #116]	; (8000744 <CubeM_attendIntValue+0xc0>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4413      	add	r3, r2
 80006d4:	4a1c      	ldr	r2, [pc, #112]	; (8000748 <CubeM_attendIntValue+0xc4>)
 80006d6:	7812      	ldrb	r2, [r2, #0]
 80006d8:	4611      	mov	r1, r2
 80006da:	4a1c      	ldr	r2, [pc, #112]	; (800074c <CubeM_attendIntValue+0xc8>)
 80006dc:	7812      	ldrb	r2, [r2, #0]
 80006de:	fb01 f202 	mul.w	r2, r1, r2
 80006e2:	1a9b      	subs	r3, r3, r2
 80006e4:	65fb      	str	r3, [r7, #92]	; 0x5c

		if(tempsize < buffersize) {
 80006e6:	4b1a      	ldr	r3, [pc, #104]	; (8000750 <CubeM_attendIntValue+0xcc>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d21b      	bcs.n	8000728 <CubeM_attendIntValue+0xa4>
			strcpy((char*)(buffer + (usedbuffer)), (char*)(tempstring + (emptybuffer * dellen)));
 80006f0:	4b18      	ldr	r3, [pc, #96]	; (8000754 <CubeM_attendIntValue+0xd0>)
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	4b13      	ldr	r3, [pc, #76]	; (8000744 <CubeM_attendIntValue+0xc0>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	441a      	add	r2, r3
 80006fa:	4b13      	ldr	r3, [pc, #76]	; (8000748 <CubeM_attendIntValue+0xc4>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	4619      	mov	r1, r3
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <CubeM_attendIntValue+0xc8>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	fb01 f303 	mul.w	r3, r1, r3
 8000708:	4619      	mov	r1, r3
 800070a:	f107 030c 	add.w	r3, r7, #12
 800070e:	440b      	add	r3, r1
 8000710:	4619      	mov	r1, r3
 8000712:	4610      	mov	r0, r2
 8000714:	f00c fd9b 	bl	800d24e <strcpy>
			usedbuffer = tempsize;
 8000718:	4a0a      	ldr	r2, [pc, #40]	; (8000744 <CubeM_attendIntValue+0xc0>)
 800071a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800071c:	6013      	str	r3, [r2, #0]
			emptybuffer = 0;
 800071e:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <CubeM_attendIntValue+0xc4>)
 8000720:	2200      	movs	r2, #0
 8000722:	701a      	strb	r2, [r3, #0]
			return 0;
 8000724:	2300      	movs	r3, #0
 8000726:	e000      	b.n	800072a <CubeM_attendIntValue+0xa6>
		}
	}
	return 1;
 8000728:	2301      	movs	r3, #1
}
 800072a:	4618      	mov	r0, r3
 800072c:	3760      	adds	r7, #96	; 0x60
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	24000340 	.word	0x24000340
 8000738:	24000018 	.word	0x24000018
 800073c:	24000004 	.word	0x24000004
 8000740:	0800f0e0 	.word	0x0800f0e0
 8000744:	24000334 	.word	0x24000334
 8000748:	24000000 	.word	0x24000000
 800074c:	2400033c 	.word	0x2400033c
 8000750:	24000330 	.word	0x24000330
 8000754:	24000338 	.word	0x24000338

08000758 <CubeM_attendFloatValue>:

uint8_t CubeM_attendFloatValue(uint8_t channel, float value, uint8_t precision) {
 8000758:	b580      	push	{r7, lr}
 800075a:	b09c      	sub	sp, #112	; 0x70
 800075c:	af04      	add	r7, sp, #16
 800075e:	4603      	mov	r3, r0
 8000760:	ed87 0a00 	vstr	s0, [r7]
 8000764:	460a      	mov	r2, r1
 8000766:	71fb      	strb	r3, [r7, #7]
 8000768:	4613      	mov	r3, r2
 800076a:	71bb      	strb	r3, [r7, #6]
	if(channel > 0 && channel < CUBEMONMAXSIGNALS) {
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d04e      	beq.n	8000810 <CubeM_attendFloatValue+0xb8>
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	2b07      	cmp	r3, #7
 8000776:	d84b      	bhi.n	8000810 <CubeM_attendFloatValue+0xb8>
		char tempstring[CUBEMONSMALLBUFSIZE*4];

		uint32_t tempsize;
		sprintf(tempstring, "%s%s%s%.*f", delimiter, channels[channel].name, connector, precision, value);
 8000778:	79fa      	ldrb	r2, [r7, #7]
 800077a:	4613      	mov	r3, r2
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	4413      	add	r3, r2
 8000780:	00db      	lsls	r3, r3, #3
 8000782:	4a26      	ldr	r2, [pc, #152]	; (800081c <CubeM_attendFloatValue+0xc4>)
 8000784:	4413      	add	r3, r2
 8000786:	1c9a      	adds	r2, r3, #2
 8000788:	79bb      	ldrb	r3, [r7, #6]
 800078a:	edd7 7a00 	vldr	s15, [r7]
 800078e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000792:	f107 000c 	add.w	r0, r7, #12
 8000796:	ed8d 7b02 	vstr	d7, [sp, #8]
 800079a:	9301      	str	r3, [sp, #4]
 800079c:	4b20      	ldr	r3, [pc, #128]	; (8000820 <CubeM_attendFloatValue+0xc8>)
 800079e:	9300      	str	r3, [sp, #0]
 80007a0:	4613      	mov	r3, r2
 80007a2:	4a20      	ldr	r2, [pc, #128]	; (8000824 <CubeM_attendFloatValue+0xcc>)
 80007a4:	4920      	ldr	r1, [pc, #128]	; (8000828 <CubeM_attendFloatValue+0xd0>)
 80007a6:	f00c fc5f 	bl	800d068 <siprintf>
		tempsize = usedbuffer + strlen((char*)tempstring) - (emptybuffer * dellen);
 80007aa:	f107 030c 	add.w	r3, r7, #12
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff fde6 	bl	8000380 <strlen>
 80007b4:	4602      	mov	r2, r0
 80007b6:	4b1d      	ldr	r3, [pc, #116]	; (800082c <CubeM_attendFloatValue+0xd4>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4413      	add	r3, r2
 80007bc:	4a1c      	ldr	r2, [pc, #112]	; (8000830 <CubeM_attendFloatValue+0xd8>)
 80007be:	7812      	ldrb	r2, [r2, #0]
 80007c0:	4611      	mov	r1, r2
 80007c2:	4a1c      	ldr	r2, [pc, #112]	; (8000834 <CubeM_attendFloatValue+0xdc>)
 80007c4:	7812      	ldrb	r2, [r2, #0]
 80007c6:	fb01 f202 	mul.w	r2, r1, r2
 80007ca:	1a9b      	subs	r3, r3, r2
 80007cc:	65fb      	str	r3, [r7, #92]	; 0x5c

		if(tempsize < buffersize) {
 80007ce:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <CubeM_attendFloatValue+0xe0>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80007d4:	429a      	cmp	r2, r3
 80007d6:	d21b      	bcs.n	8000810 <CubeM_attendFloatValue+0xb8>
			strcpy((char*)(buffer + (usedbuffer)), (char*)(tempstring + (emptybuffer * dellen)));
 80007d8:	4b18      	ldr	r3, [pc, #96]	; (800083c <CubeM_attendFloatValue+0xe4>)
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	4b13      	ldr	r3, [pc, #76]	; (800082c <CubeM_attendFloatValue+0xd4>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	441a      	add	r2, r3
 80007e2:	4b13      	ldr	r3, [pc, #76]	; (8000830 <CubeM_attendFloatValue+0xd8>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	4619      	mov	r1, r3
 80007e8:	4b12      	ldr	r3, [pc, #72]	; (8000834 <CubeM_attendFloatValue+0xdc>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	fb01 f303 	mul.w	r3, r1, r3
 80007f0:	4619      	mov	r1, r3
 80007f2:	f107 030c 	add.w	r3, r7, #12
 80007f6:	440b      	add	r3, r1
 80007f8:	4619      	mov	r1, r3
 80007fa:	4610      	mov	r0, r2
 80007fc:	f00c fd27 	bl	800d24e <strcpy>
			usedbuffer = tempsize;
 8000800:	4a0a      	ldr	r2, [pc, #40]	; (800082c <CubeM_attendFloatValue+0xd4>)
 8000802:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000804:	6013      	str	r3, [r2, #0]
			emptybuffer = 0;
 8000806:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <CubeM_attendFloatValue+0xd8>)
 8000808:	2200      	movs	r2, #0
 800080a:	701a      	strb	r2, [r3, #0]
			return 0;
 800080c:	2300      	movs	r3, #0
 800080e:	e000      	b.n	8000812 <CubeM_attendFloatValue+0xba>
		}
	}
	return 1;
 8000810:	2301      	movs	r3, #1
}
 8000812:	4618      	mov	r0, r3
 8000814:	3760      	adds	r7, #96	; 0x60
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	24000340 	.word	0x24000340
 8000820:	24000018 	.word	0x24000018
 8000824:	24000004 	.word	0x24000004
 8000828:	0800f0ec 	.word	0x0800f0ec
 800082c:	24000334 	.word	0x24000334
 8000830:	24000000 	.word	0x24000000
 8000834:	2400033c 	.word	0x2400033c
 8000838:	24000330 	.word	0x24000330
 800083c:	24000338 	.word	0x24000338

08000840 <CubeM_sendBuffer>:
	strcpy((char*)EOL, (char*)string);

	return 0;
}

uint8_t CubeM_sendBuffer() {
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0

	if(emptybuffer == 1) return 1;
 8000844:	4b0d      	ldr	r3, [pc, #52]	; (800087c <CubeM_sendBuffer+0x3c>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b01      	cmp	r3, #1
 800084a:	d101      	bne.n	8000850 <CubeM_sendBuffer+0x10>
 800084c:	2301      	movs	r3, #1
 800084e:	e012      	b.n	8000876 <CubeM_sendBuffer+0x36>

	strcpy((char*)&buffer[usedbuffer], (char*)EOL);
 8000850:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <CubeM_sendBuffer+0x40>)
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <CubeM_sendBuffer+0x44>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4413      	add	r3, r2
 800085a:	490b      	ldr	r1, [pc, #44]	; (8000888 <CubeM_sendBuffer+0x48>)
 800085c:	4618      	mov	r0, r3
 800085e:	f00c fcf6 	bl	800d24e <strcpy>
	CDC_Transmit_FS(buffer, usedbuffer);
 8000862:	4b07      	ldr	r3, [pc, #28]	; (8000880 <CubeM_sendBuffer+0x40>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a07      	ldr	r2, [pc, #28]	; (8000884 <CubeM_sendBuffer+0x44>)
 8000868:	6812      	ldr	r2, [r2, #0]
 800086a:	b292      	uxth	r2, r2
 800086c:	4611      	mov	r1, r2
 800086e:	4618      	mov	r0, r3
 8000870:	f00b f9c2 	bl	800bbf8 <CDC_Transmit_FS>

	return 0;
 8000874:	2300      	movs	r3, #0
}
 8000876:	4618      	mov	r0, r3
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	24000000 	.word	0x24000000
 8000880:	24000338 	.word	0x24000338
 8000884:	24000334 	.word	0x24000334
 8000888:	2400002c 	.word	0x2400002c

0800088c <CubeM_setDataType>:

uint8_t CubeM_setDataType(uint8_t channel, cubeMDataType newtype) {
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	460a      	mov	r2, r1
 8000896:	71fb      	strb	r3, [r7, #7]
 8000898:	4613      	mov	r3, r2
 800089a:	71bb      	strb	r3, [r7, #6]
	if(channel >= CUBEMONMAXSIGNALS || newtype >= CUBEMNROFDATATYPES) return 1;
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	2b07      	cmp	r3, #7
 80008a0:	d802      	bhi.n	80008a8 <CubeM_setDataType+0x1c>
 80008a2:	79bb      	ldrb	r3, [r7, #6]
 80008a4:	2b04      	cmp	r3, #4
 80008a6:	d901      	bls.n	80008ac <CubeM_setDataType+0x20>
 80008a8:	2301      	movs	r3, #1
 80008aa:	e00a      	b.n	80008c2 <CubeM_setDataType+0x36>

	channels[channel].datatype = newtype;
 80008ac:	79fa      	ldrb	r2, [r7, #7]
 80008ae:	4908      	ldr	r1, [pc, #32]	; (80008d0 <CubeM_setDataType+0x44>)
 80008b0:	4613      	mov	r3, r2
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	4413      	add	r3, r2
 80008b6:	00db      	lsls	r3, r3, #3
 80008b8:	440b      	add	r3, r1
 80008ba:	3316      	adds	r3, #22
 80008bc:	79ba      	ldrb	r2, [r7, #6]
 80008be:	701a      	strb	r2, [r3, #0]
	return 0;
 80008c0:	2300      	movs	r3, #0
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	24000340 	.word	0x24000340

080008d4 <CubeM_setPrecision>:

uint8_t CubeM_setPrecision(uint8_t channel, int8_t precision) {
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	460a      	mov	r2, r1
 80008de:	71fb      	strb	r3, [r7, #7]
 80008e0:	4613      	mov	r3, r2
 80008e2:	71bb      	strb	r3, [r7, #6]
	if(channel >= CUBEMONMAXSIGNALS) return 1;
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	2b07      	cmp	r3, #7
 80008e8:	d901      	bls.n	80008ee <CubeM_setPrecision+0x1a>
 80008ea:	2301      	movs	r3, #1
 80008ec:	e00b      	b.n	8000906 <CubeM_setPrecision+0x32>

	channels[channel].precision = precision;
 80008ee:	79fa      	ldrb	r2, [r7, #7]
 80008f0:	f997 1006 	ldrsb.w	r1, [r7, #6]
 80008f4:	4807      	ldr	r0, [pc, #28]	; (8000914 <CubeM_setPrecision+0x40>)
 80008f6:	4613      	mov	r3, r2
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	4413      	add	r3, r2
 80008fc:	00db      	lsls	r3, r3, #3
 80008fe:	4403      	add	r3, r0
 8000900:	3320      	adds	r3, #32
 8000902:	6019      	str	r1, [r3, #0]
	return 0;
 8000904:	2300      	movs	r3, #0
}
 8000906:	4618      	mov	r0, r3
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	24000340 	.word	0x24000340

08000918 <CubeM_setUINTValue>:

uint8_t CubeM_setUINTValue(uint8_t channel, float value) {
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	ed87 0a00 	vstr	s0, [r7]
 8000924:	71fb      	strb	r3, [r7, #7]

	if(channel >= CUBEMONMAXSIGNALS || channels[channel].datatype != CUBEMUINT) return 1;
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	2b07      	cmp	r3, #7
 800092a:	d80a      	bhi.n	8000942 <CubeM_setUINTValue+0x2a>
 800092c:	79fa      	ldrb	r2, [r7, #7]
 800092e:	4915      	ldr	r1, [pc, #84]	; (8000984 <CubeM_setUINTValue+0x6c>)
 8000930:	4613      	mov	r3, r2
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	4413      	add	r3, r2
 8000936:	00db      	lsls	r3, r3, #3
 8000938:	440b      	add	r3, r1
 800093a:	3316      	adds	r3, #22
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <CubeM_setUINTValue+0x2e>
 8000942:	2301      	movs	r3, #1
 8000944:	e017      	b.n	8000976 <CubeM_setUINTValue+0x5e>
	channels[channel].value = value;
 8000946:	79fa      	ldrb	r2, [r7, #7]
 8000948:	edd7 7a00 	vldr	s15, [r7]
 800094c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000950:	490c      	ldr	r1, [pc, #48]	; (8000984 <CubeM_setUINTValue+0x6c>)
 8000952:	4613      	mov	r3, r2
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	4413      	add	r3, r2
 8000958:	00db      	lsls	r3, r3, #3
 800095a:	440b      	add	r3, r1
 800095c:	3318      	adds	r3, #24
 800095e:	ed83 7b00 	vstr	d7, [r3]
	channels[channel].newvalue = 1;
 8000962:	79fa      	ldrb	r2, [r7, #7]
 8000964:	4907      	ldr	r1, [pc, #28]	; (8000984 <CubeM_setUINTValue+0x6c>)
 8000966:	4613      	mov	r3, r2
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	4413      	add	r3, r2
 800096c:	00db      	lsls	r3, r3, #3
 800096e:	440b      	add	r3, r1
 8000970:	2201      	movs	r2, #1
 8000972:	701a      	strb	r2, [r3, #0]
	return 0;
 8000974:	2300      	movs	r3, #0
}
 8000976:	4618      	mov	r0, r3
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	24000340 	.word	0x24000340

08000988 <CubeM_setINTValue>:

uint8_t CubeM_setINTValue(uint8_t channel, float value) {
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	ed87 0a00 	vstr	s0, [r7]
 8000994:	71fb      	strb	r3, [r7, #7]

	if(channel >= CUBEMONMAXSIGNALS || channels[channel].datatype != CUBEMINT) return 1;
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	2b07      	cmp	r3, #7
 800099a:	d80a      	bhi.n	80009b2 <CubeM_setINTValue+0x2a>
 800099c:	79fa      	ldrb	r2, [r7, #7]
 800099e:	4915      	ldr	r1, [pc, #84]	; (80009f4 <CubeM_setINTValue+0x6c>)
 80009a0:	4613      	mov	r3, r2
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	4413      	add	r3, r2
 80009a6:	00db      	lsls	r3, r3, #3
 80009a8:	440b      	add	r3, r1
 80009aa:	3316      	adds	r3, #22
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d001      	beq.n	80009b6 <CubeM_setINTValue+0x2e>
 80009b2:	2301      	movs	r3, #1
 80009b4:	e017      	b.n	80009e6 <CubeM_setINTValue+0x5e>
	channels[channel].value = value;
 80009b6:	79fa      	ldrb	r2, [r7, #7]
 80009b8:	edd7 7a00 	vldr	s15, [r7]
 80009bc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009c0:	490c      	ldr	r1, [pc, #48]	; (80009f4 <CubeM_setINTValue+0x6c>)
 80009c2:	4613      	mov	r3, r2
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	4413      	add	r3, r2
 80009c8:	00db      	lsls	r3, r3, #3
 80009ca:	440b      	add	r3, r1
 80009cc:	3318      	adds	r3, #24
 80009ce:	ed83 7b00 	vstr	d7, [r3]
	channels[channel].newvalue = 1;
 80009d2:	79fa      	ldrb	r2, [r7, #7]
 80009d4:	4907      	ldr	r1, [pc, #28]	; (80009f4 <CubeM_setINTValue+0x6c>)
 80009d6:	4613      	mov	r3, r2
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	4413      	add	r3, r2
 80009dc:	00db      	lsls	r3, r3, #3
 80009de:	440b      	add	r3, r1
 80009e0:	2201      	movs	r2, #1
 80009e2:	701a      	strb	r2, [r3, #0]
	return 0;
 80009e4:	2300      	movs	r3, #0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	24000340 	.word	0x24000340

080009f8 <CubeM_setFLOATValue>:

uint8_t CubeM_setFLOATValue(uint8_t channel, float value) {
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	ed87 0a00 	vstr	s0, [r7]
 8000a04:	71fb      	strb	r3, [r7, #7]

	if(channel >= CUBEMONMAXSIGNALS || channels[channel].datatype != CUBEMFLOAT) return 1;
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	2b07      	cmp	r3, #7
 8000a0a:	d80a      	bhi.n	8000a22 <CubeM_setFLOATValue+0x2a>
 8000a0c:	79fa      	ldrb	r2, [r7, #7]
 8000a0e:	4915      	ldr	r1, [pc, #84]	; (8000a64 <CubeM_setFLOATValue+0x6c>)
 8000a10:	4613      	mov	r3, r2
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	4413      	add	r3, r2
 8000a16:	00db      	lsls	r3, r3, #3
 8000a18:	440b      	add	r3, r1
 8000a1a:	3316      	adds	r3, #22
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b02      	cmp	r3, #2
 8000a20:	d001      	beq.n	8000a26 <CubeM_setFLOATValue+0x2e>
 8000a22:	2301      	movs	r3, #1
 8000a24:	e017      	b.n	8000a56 <CubeM_setFLOATValue+0x5e>
	channels[channel].value = value;
 8000a26:	79fa      	ldrb	r2, [r7, #7]
 8000a28:	edd7 7a00 	vldr	s15, [r7]
 8000a2c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a30:	490c      	ldr	r1, [pc, #48]	; (8000a64 <CubeM_setFLOATValue+0x6c>)
 8000a32:	4613      	mov	r3, r2
 8000a34:	009b      	lsls	r3, r3, #2
 8000a36:	4413      	add	r3, r2
 8000a38:	00db      	lsls	r3, r3, #3
 8000a3a:	440b      	add	r3, r1
 8000a3c:	3318      	adds	r3, #24
 8000a3e:	ed83 7b00 	vstr	d7, [r3]
	channels[channel].newvalue = 1;
 8000a42:	79fa      	ldrb	r2, [r7, #7]
 8000a44:	4907      	ldr	r1, [pc, #28]	; (8000a64 <CubeM_setFLOATValue+0x6c>)
 8000a46:	4613      	mov	r3, r2
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	4413      	add	r3, r2
 8000a4c:	00db      	lsls	r3, r3, #3
 8000a4e:	440b      	add	r3, r1
 8000a50:	2201      	movs	r2, #1
 8000a52:	701a      	strb	r2, [r3, #0]
	return 0;
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	24000340 	.word	0x24000340

08000a68 <CubeM_setDOUBLEValue>:

uint8_t CubeM_setDOUBLEValue(uint8_t channel, double value) {
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	ed87 0b00 	vstr	d0, [r7]
 8000a74:	73fb      	strb	r3, [r7, #15]

	if(channel >= CUBEMONMAXSIGNALS || channels[channel].datatype != CUBEMDOUBLE) return 1;
 8000a76:	7bfb      	ldrb	r3, [r7, #15]
 8000a78:	2b07      	cmp	r3, #7
 8000a7a:	d80a      	bhi.n	8000a92 <CubeM_setDOUBLEValue+0x2a>
 8000a7c:	7bfa      	ldrb	r2, [r7, #15]
 8000a7e:	4914      	ldr	r1, [pc, #80]	; (8000ad0 <CubeM_setDOUBLEValue+0x68>)
 8000a80:	4613      	mov	r3, r2
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	4413      	add	r3, r2
 8000a86:	00db      	lsls	r3, r3, #3
 8000a88:	440b      	add	r3, r1
 8000a8a:	3316      	adds	r3, #22
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	2b03      	cmp	r3, #3
 8000a90:	d001      	beq.n	8000a96 <CubeM_setDOUBLEValue+0x2e>
 8000a92:	2301      	movs	r3, #1
 8000a94:	e016      	b.n	8000ac4 <CubeM_setDOUBLEValue+0x5c>
	channels[channel].value = value;
 8000a96:	7bfa      	ldrb	r2, [r7, #15]
 8000a98:	490d      	ldr	r1, [pc, #52]	; (8000ad0 <CubeM_setDOUBLEValue+0x68>)
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	4413      	add	r3, r2
 8000aa0:	00db      	lsls	r3, r3, #3
 8000aa2:	440b      	add	r3, r1
 8000aa4:	f103 0118 	add.w	r1, r3, #24
 8000aa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000aac:	e9c1 2300 	strd	r2, r3, [r1]
	channels[channel].newvalue = 1;
 8000ab0:	7bfa      	ldrb	r2, [r7, #15]
 8000ab2:	4907      	ldr	r1, [pc, #28]	; (8000ad0 <CubeM_setDOUBLEValue+0x68>)
 8000ab4:	4613      	mov	r3, r2
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	4413      	add	r3, r2
 8000aba:	00db      	lsls	r3, r3, #3
 8000abc:	440b      	add	r3, r1
 8000abe:	2201      	movs	r2, #1
 8000ac0:	701a      	strb	r2, [r3, #0]
	return 0;
 8000ac2:	2300      	movs	r3, #0
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3714      	adds	r7, #20
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	24000340 	.word	0x24000340

08000ad4 <CubeM_setLDOUBLEValue>:

uint8_t CubeM_setLDOUBLEValue(uint8_t channel, long double value) {
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	ed87 0b00 	vstr	d0, [r7]
 8000ae0:	73fb      	strb	r3, [r7, #15]

	if(channel >= CUBEMONMAXSIGNALS || channels[channel].datatype != CUBEMLDOUBLE) return 1;
 8000ae2:	7bfb      	ldrb	r3, [r7, #15]
 8000ae4:	2b07      	cmp	r3, #7
 8000ae6:	d80a      	bhi.n	8000afe <CubeM_setLDOUBLEValue+0x2a>
 8000ae8:	7bfa      	ldrb	r2, [r7, #15]
 8000aea:	4914      	ldr	r1, [pc, #80]	; (8000b3c <CubeM_setLDOUBLEValue+0x68>)
 8000aec:	4613      	mov	r3, r2
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	4413      	add	r3, r2
 8000af2:	00db      	lsls	r3, r3, #3
 8000af4:	440b      	add	r3, r1
 8000af6:	3316      	adds	r3, #22
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2b04      	cmp	r3, #4
 8000afc:	d001      	beq.n	8000b02 <CubeM_setLDOUBLEValue+0x2e>
 8000afe:	2301      	movs	r3, #1
 8000b00:	e016      	b.n	8000b30 <CubeM_setLDOUBLEValue+0x5c>
	channels[channel].value = value;
 8000b02:	7bfa      	ldrb	r2, [r7, #15]
 8000b04:	490d      	ldr	r1, [pc, #52]	; (8000b3c <CubeM_setLDOUBLEValue+0x68>)
 8000b06:	4613      	mov	r3, r2
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	4413      	add	r3, r2
 8000b0c:	00db      	lsls	r3, r3, #3
 8000b0e:	440b      	add	r3, r1
 8000b10:	f103 0118 	add.w	r1, r3, #24
 8000b14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000b18:	e9c1 2300 	strd	r2, r3, [r1]
	channels[channel].newvalue = 1;
 8000b1c:	7bfa      	ldrb	r2, [r7, #15]
 8000b1e:	4907      	ldr	r1, [pc, #28]	; (8000b3c <CubeM_setLDOUBLEValue+0x68>)
 8000b20:	4613      	mov	r3, r2
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	4413      	add	r3, r2
 8000b26:	00db      	lsls	r3, r3, #3
 8000b28:	440b      	add	r3, r1
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	701a      	strb	r2, [r3, #0]
	return 0;
 8000b2e:	2300      	movs	r3, #0
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3714      	adds	r7, #20
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	24000340 	.word	0x24000340

08000b40 <CubeM_sendCurValues>:

uint8_t CubeM_sendCurValues() {
 8000b40:	b590      	push	{r4, r7, lr}
 8000b42:	b09b      	sub	sp, #108	; 0x6c
 8000b44:	af04      	add	r7, sp, #16
	CubeM_clearBuffer();
 8000b46:	f7ff fced 	bl	8000524 <CubeM_clearBuffer>

	uint8_t tempbuffer[CUBEMONSMALLBUFSIZE*4];
	uint8_t datatowrite = 0;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint32_t tempsize = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	653b      	str	r3, [r7, #80]	; 0x50

	for(uint8_t i=0; i<CUBEMONMAXSIGNALS; i++) {
 8000b54:	2300      	movs	r3, #0
 8000b56:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8000b5a:	e13a      	b.n	8000dd2 <CubeM_sendCurValues+0x292>
		if(channels[i].newvalue == 0) continue;
 8000b5c:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000b60:	49a4      	ldr	r1, [pc, #656]	; (8000df4 <CubeM_sendCurValues+0x2b4>)
 8000b62:	4613      	mov	r3, r2
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	4413      	add	r3, r2
 8000b68:	00db      	lsls	r3, r3, #3
 8000b6a:	440b      	add	r3, r1
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	f000 8127 	beq.w	8000dc2 <CubeM_sendCurValues+0x282>

		switch(channels[i].datatype) {
 8000b74:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000b78:	499e      	ldr	r1, [pc, #632]	; (8000df4 <CubeM_sendCurValues+0x2b4>)
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	4413      	add	r3, r2
 8000b80:	00db      	lsls	r3, r3, #3
 8000b82:	440b      	add	r3, r1
 8000b84:	3316      	adds	r3, #22
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b04      	cmp	r3, #4
 8000b8a:	f200 811c 	bhi.w	8000dc6 <CubeM_sendCurValues+0x286>
 8000b8e:	a201      	add	r2, pc, #4	; (adr r2, 8000b94 <CubeM_sendCurValues+0x54>)
 8000b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b94:	08000ba9 	.word	0x08000ba9
 8000b98:	08000bed 	.word	0x08000bed
 8000b9c:	08000c31 	.word	0x08000c31
 8000ba0:	08000c8d 	.word	0x08000c8d
 8000ba4:	08000ce1 	.word	0x08000ce1
		case CUBEMUINT:
			sprintf((char*)tempbuffer, "%s%s%s%ld", delimiter, channels[i].name, connector, (uint32_t)channels[i].value);
 8000ba8:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000bac:	4613      	mov	r3, r2
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	4413      	add	r3, r2
 8000bb2:	00db      	lsls	r3, r3, #3
 8000bb4:	4a8f      	ldr	r2, [pc, #572]	; (8000df4 <CubeM_sendCurValues+0x2b4>)
 8000bb6:	4413      	add	r3, r2
 8000bb8:	1c99      	adds	r1, r3, #2
 8000bba:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000bbe:	488d      	ldr	r0, [pc, #564]	; (8000df4 <CubeM_sendCurValues+0x2b4>)
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	4413      	add	r3, r2
 8000bc6:	00db      	lsls	r3, r3, #3
 8000bc8:	4403      	add	r3, r0
 8000bca:	3318      	adds	r3, #24
 8000bcc:	ed93 7b00 	vldr	d7, [r3]
 8000bd0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000bd4:	ee17 3a90 	vmov	r3, s15
 8000bd8:	4638      	mov	r0, r7
 8000bda:	9301      	str	r3, [sp, #4]
 8000bdc:	4b86      	ldr	r3, [pc, #536]	; (8000df8 <CubeM_sendCurValues+0x2b8>)
 8000bde:	9300      	str	r3, [sp, #0]
 8000be0:	460b      	mov	r3, r1
 8000be2:	4a86      	ldr	r2, [pc, #536]	; (8000dfc <CubeM_sendCurValues+0x2bc>)
 8000be4:	4986      	ldr	r1, [pc, #536]	; (8000e00 <CubeM_sendCurValues+0x2c0>)
 8000be6:	f00c fa3f 	bl	800d068 <siprintf>
			break;
 8000bea:	e0a3      	b.n	8000d34 <CubeM_sendCurValues+0x1f4>
		case CUBEMINT:
			sprintf((char*)tempbuffer, "%s%s%s%ld", delimiter, channels[i].name, connector, (int32_t)channels[i].value);
 8000bec:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	4413      	add	r3, r2
 8000bf6:	00db      	lsls	r3, r3, #3
 8000bf8:	4a7e      	ldr	r2, [pc, #504]	; (8000df4 <CubeM_sendCurValues+0x2b4>)
 8000bfa:	4413      	add	r3, r2
 8000bfc:	1c99      	adds	r1, r3, #2
 8000bfe:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000c02:	487c      	ldr	r0, [pc, #496]	; (8000df4 <CubeM_sendCurValues+0x2b4>)
 8000c04:	4613      	mov	r3, r2
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	4413      	add	r3, r2
 8000c0a:	00db      	lsls	r3, r3, #3
 8000c0c:	4403      	add	r3, r0
 8000c0e:	3318      	adds	r3, #24
 8000c10:	ed93 7b00 	vldr	d7, [r3]
 8000c14:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000c18:	ee17 3a90 	vmov	r3, s15
 8000c1c:	4638      	mov	r0, r7
 8000c1e:	9301      	str	r3, [sp, #4]
 8000c20:	4b75      	ldr	r3, [pc, #468]	; (8000df8 <CubeM_sendCurValues+0x2b8>)
 8000c22:	9300      	str	r3, [sp, #0]
 8000c24:	460b      	mov	r3, r1
 8000c26:	4a75      	ldr	r2, [pc, #468]	; (8000dfc <CubeM_sendCurValues+0x2bc>)
 8000c28:	4975      	ldr	r1, [pc, #468]	; (8000e00 <CubeM_sendCurValues+0x2c0>)
 8000c2a:	f00c fa1d 	bl	800d068 <siprintf>
			break;
 8000c2e:	e081      	b.n	8000d34 <CubeM_sendCurValues+0x1f4>
		case CUBEMFLOAT:
			sprintf((char*)tempbuffer, "%s%s%s%.*f", delimiter, channels[i].name, connector, (int)channels[i].precision, (float)channels[i].value);
 8000c30:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000c34:	4613      	mov	r3, r2
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	4413      	add	r3, r2
 8000c3a:	00db      	lsls	r3, r3, #3
 8000c3c:	4a6d      	ldr	r2, [pc, #436]	; (8000df4 <CubeM_sendCurValues+0x2b4>)
 8000c3e:	4413      	add	r3, r2
 8000c40:	1c9c      	adds	r4, r3, #2
 8000c42:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000c46:	496b      	ldr	r1, [pc, #428]	; (8000df4 <CubeM_sendCurValues+0x2b4>)
 8000c48:	4613      	mov	r3, r2
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	4413      	add	r3, r2
 8000c4e:	00db      	lsls	r3, r3, #3
 8000c50:	440b      	add	r3, r1
 8000c52:	3320      	adds	r3, #32
 8000c54:	6819      	ldr	r1, [r3, #0]
 8000c56:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000c5a:	4866      	ldr	r0, [pc, #408]	; (8000df4 <CubeM_sendCurValues+0x2b4>)
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	4413      	add	r3, r2
 8000c62:	00db      	lsls	r3, r3, #3
 8000c64:	4403      	add	r3, r0
 8000c66:	3318      	adds	r3, #24
 8000c68:	ed93 7b00 	vldr	d7, [r3]
 8000c6c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c70:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c74:	4638      	mov	r0, r7
 8000c76:	ed8d 7b02 	vstr	d7, [sp, #8]
 8000c7a:	9101      	str	r1, [sp, #4]
 8000c7c:	4b5e      	ldr	r3, [pc, #376]	; (8000df8 <CubeM_sendCurValues+0x2b8>)
 8000c7e:	9300      	str	r3, [sp, #0]
 8000c80:	4623      	mov	r3, r4
 8000c82:	4a5e      	ldr	r2, [pc, #376]	; (8000dfc <CubeM_sendCurValues+0x2bc>)
 8000c84:	495f      	ldr	r1, [pc, #380]	; (8000e04 <CubeM_sendCurValues+0x2c4>)
 8000c86:	f00c f9ef 	bl	800d068 <siprintf>
			break;
 8000c8a:	e053      	b.n	8000d34 <CubeM_sendCurValues+0x1f4>
		case CUBEMDOUBLE:
			sprintf((char*)tempbuffer, "%s%s%s%.*lf", delimiter, channels[i].name, connector, (int)channels[i].precision, (double)channels[i].value);
 8000c8c:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000c90:	4613      	mov	r3, r2
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	4413      	add	r3, r2
 8000c96:	00db      	lsls	r3, r3, #3
 8000c98:	4a56      	ldr	r2, [pc, #344]	; (8000df4 <CubeM_sendCurValues+0x2b4>)
 8000c9a:	4413      	add	r3, r2
 8000c9c:	1c9c      	adds	r4, r3, #2
 8000c9e:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000ca2:	4954      	ldr	r1, [pc, #336]	; (8000df4 <CubeM_sendCurValues+0x2b4>)
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	4413      	add	r3, r2
 8000caa:	00db      	lsls	r3, r3, #3
 8000cac:	440b      	add	r3, r1
 8000cae:	3320      	adds	r3, #32
 8000cb0:	6819      	ldr	r1, [r3, #0]
 8000cb2:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000cb6:	484f      	ldr	r0, [pc, #316]	; (8000df4 <CubeM_sendCurValues+0x2b4>)
 8000cb8:	4613      	mov	r3, r2
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	4413      	add	r3, r2
 8000cbe:	00db      	lsls	r3, r3, #3
 8000cc0:	4403      	add	r3, r0
 8000cc2:	3318      	adds	r3, #24
 8000cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cc8:	4638      	mov	r0, r7
 8000cca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000cce:	9101      	str	r1, [sp, #4]
 8000cd0:	4b49      	ldr	r3, [pc, #292]	; (8000df8 <CubeM_sendCurValues+0x2b8>)
 8000cd2:	9300      	str	r3, [sp, #0]
 8000cd4:	4623      	mov	r3, r4
 8000cd6:	4a49      	ldr	r2, [pc, #292]	; (8000dfc <CubeM_sendCurValues+0x2bc>)
 8000cd8:	494b      	ldr	r1, [pc, #300]	; (8000e08 <CubeM_sendCurValues+0x2c8>)
 8000cda:	f00c f9c5 	bl	800d068 <siprintf>
			break;
 8000cde:	e029      	b.n	8000d34 <CubeM_sendCurValues+0x1f4>
		case CUBEMLDOUBLE:
			sprintf((char*)tempbuffer, "%s%s%s%.*Lf", delimiter, channels[i].name, connector, (int)channels[i].precision, (long double)channels[i].value);
 8000ce0:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	4413      	add	r3, r2
 8000cea:	00db      	lsls	r3, r3, #3
 8000cec:	4a41      	ldr	r2, [pc, #260]	; (8000df4 <CubeM_sendCurValues+0x2b4>)
 8000cee:	4413      	add	r3, r2
 8000cf0:	1c9c      	adds	r4, r3, #2
 8000cf2:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000cf6:	493f      	ldr	r1, [pc, #252]	; (8000df4 <CubeM_sendCurValues+0x2b4>)
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	4413      	add	r3, r2
 8000cfe:	00db      	lsls	r3, r3, #3
 8000d00:	440b      	add	r3, r1
 8000d02:	3320      	adds	r3, #32
 8000d04:	6819      	ldr	r1, [r3, #0]
 8000d06:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000d0a:	483a      	ldr	r0, [pc, #232]	; (8000df4 <CubeM_sendCurValues+0x2b4>)
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	4413      	add	r3, r2
 8000d12:	00db      	lsls	r3, r3, #3
 8000d14:	4403      	add	r3, r0
 8000d16:	3318      	adds	r3, #24
 8000d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d1c:	4638      	mov	r0, r7
 8000d1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000d22:	9101      	str	r1, [sp, #4]
 8000d24:	4b34      	ldr	r3, [pc, #208]	; (8000df8 <CubeM_sendCurValues+0x2b8>)
 8000d26:	9300      	str	r3, [sp, #0]
 8000d28:	4623      	mov	r3, r4
 8000d2a:	4a34      	ldr	r2, [pc, #208]	; (8000dfc <CubeM_sendCurValues+0x2bc>)
 8000d2c:	4937      	ldr	r1, [pc, #220]	; (8000e0c <CubeM_sendCurValues+0x2cc>)
 8000d2e:	f00c f99b 	bl	800d068 <siprintf>
			break;
 8000d32:	bf00      	nop
		default:
			continue;
		}

		tempsize = usedbuffer + strlen((char*)tempbuffer) - (emptybuffer * dellen);
 8000d34:	463b      	mov	r3, r7
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff fb22 	bl	8000380 <strlen>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	4b34      	ldr	r3, [pc, #208]	; (8000e10 <CubeM_sendCurValues+0x2d0>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4413      	add	r3, r2
 8000d44:	4a33      	ldr	r2, [pc, #204]	; (8000e14 <CubeM_sendCurValues+0x2d4>)
 8000d46:	7812      	ldrb	r2, [r2, #0]
 8000d48:	4611      	mov	r1, r2
 8000d4a:	4a33      	ldr	r2, [pc, #204]	; (8000e18 <CubeM_sendCurValues+0x2d8>)
 8000d4c:	7812      	ldrb	r2, [r2, #0]
 8000d4e:	fb01 f202 	mul.w	r2, r1, r2
 8000d52:	1a9b      	subs	r3, r3, r2
 8000d54:	653b      	str	r3, [r7, #80]	; 0x50

		if(tempsize < buffersize) {
 8000d56:	4b31      	ldr	r3, [pc, #196]	; (8000e1c <CubeM_sendCurValues+0x2dc>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d21b      	bcs.n	8000d98 <CubeM_sendCurValues+0x258>
			strcpy((char*)(buffer + (usedbuffer)), (char*)(tempbuffer + (emptybuffer * dellen)));
 8000d60:	4b2f      	ldr	r3, [pc, #188]	; (8000e20 <CubeM_sendCurValues+0x2e0>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4b2a      	ldr	r3, [pc, #168]	; (8000e10 <CubeM_sendCurValues+0x2d0>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	441a      	add	r2, r3
 8000d6a:	4b2a      	ldr	r3, [pc, #168]	; (8000e14 <CubeM_sendCurValues+0x2d4>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4b29      	ldr	r3, [pc, #164]	; (8000e18 <CubeM_sendCurValues+0x2d8>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	fb01 f303 	mul.w	r3, r1, r3
 8000d78:	4619      	mov	r1, r3
 8000d7a:	463b      	mov	r3, r7
 8000d7c:	440b      	add	r3, r1
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4610      	mov	r0, r2
 8000d82:	f00c fa64 	bl	800d24e <strcpy>
			datatowrite = 1;
 8000d86:	2301      	movs	r3, #1
 8000d88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			usedbuffer = tempsize;
 8000d8c:	4a20      	ldr	r2, [pc, #128]	; (8000e10 <CubeM_sendCurValues+0x2d0>)
 8000d8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d90:	6013      	str	r3, [r2, #0]
			emptybuffer = 0;
 8000d92:	4b20      	ldr	r3, [pc, #128]	; (8000e14 <CubeM_sendCurValues+0x2d4>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	701a      	strb	r2, [r3, #0]
		}
		channels[i].newvalue = channels[i].reuseoldvalue;
 8000d98:	f897 1056 	ldrb.w	r1, [r7, #86]	; 0x56
 8000d9c:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000da0:	4814      	ldr	r0, [pc, #80]	; (8000df4 <CubeM_sendCurValues+0x2b4>)
 8000da2:	460b      	mov	r3, r1
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	440b      	add	r3, r1
 8000da8:	00db      	lsls	r3, r3, #3
 8000daa:	4403      	add	r3, r0
 8000dac:	3301      	adds	r3, #1
 8000dae:	7818      	ldrb	r0, [r3, #0]
 8000db0:	4910      	ldr	r1, [pc, #64]	; (8000df4 <CubeM_sendCurValues+0x2b4>)
 8000db2:	4613      	mov	r3, r2
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	4413      	add	r3, r2
 8000db8:	00db      	lsls	r3, r3, #3
 8000dba:	440b      	add	r3, r1
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	701a      	strb	r2, [r3, #0]
 8000dc0:	e002      	b.n	8000dc8 <CubeM_sendCurValues+0x288>
		if(channels[i].newvalue == 0) continue;
 8000dc2:	bf00      	nop
 8000dc4:	e000      	b.n	8000dc8 <CubeM_sendCurValues+0x288>
			continue;
 8000dc6:	bf00      	nop
	for(uint8_t i=0; i<CUBEMONMAXSIGNALS; i++) {
 8000dc8:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000dcc:	3301      	adds	r3, #1
 8000dce:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8000dd2:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000dd6:	2b07      	cmp	r3, #7
 8000dd8:	f67f aec0 	bls.w	8000b5c <CubeM_sendCurValues+0x1c>
	}

	if(datatowrite == 1) {
 8000ddc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d101      	bne.n	8000de8 <CubeM_sendCurValues+0x2a8>
		CubeM_sendBuffer();
 8000de4:	f7ff fd2c 	bl	8000840 <CubeM_sendBuffer>
	}

	return 0;
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	375c      	adds	r7, #92	; 0x5c
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd90      	pop	{r4, r7, pc}
 8000df2:	bf00      	nop
 8000df4:	24000340 	.word	0x24000340
 8000df8:	24000018 	.word	0x24000018
 8000dfc:	24000004 	.word	0x24000004
 8000e00:	0800f0e0 	.word	0x0800f0e0
 8000e04:	0800f0ec 	.word	0x0800f0ec
 8000e08:	0800f0f8 	.word	0x0800f0f8
 8000e0c:	0800f104 	.word	0x0800f104
 8000e10:	24000334 	.word	0x24000334
 8000e14:	24000000 	.word	0x24000000
 8000e18:	2400033c 	.word	0x2400033c
 8000e1c:	24000330 	.word	0x24000330
 8000e20:	24000338 	.word	0x24000338

08000e24 <CubeM_DEBUGERRORHANDLER>:

#if CUBEMDEBUG

void CubeM_DEBUGERRORHANDLER(uint32_t errorcode) {
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
	asm("NOP");
 8000e2c:	bf00      	nop
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	0000      	movs	r0, r0
 8000e3c:	0000      	movs	r0, r0
	...

08000e40 <CubeM_runDebugTests>:

uint8_t CubeM_runDebugTests() {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08a      	sub	sp, #40	; 0x28
 8000e44:	af00      	add	r7, sp, #0

	uint32_t errornumber = 0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t tempbuffersize = 100;
 8000e4a:	2364      	movs	r3, #100	; 0x64
 8000e4c:	61bb      	str	r3, [r7, #24]
	if(CubeM_Init(tempbuffersize) != tempbuffersize) CubeM_DEBUGERRORHANDLER(errornumber);
 8000e4e:	69b8      	ldr	r0, [r7, #24]
 8000e50:	f7ff fb12 	bl	8000478 <CubeM_Init>
 8000e54:	4602      	mov	r2, r0
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d002      	beq.n	8000e62 <CubeM_runDebugTests+0x22>
 8000e5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000e5e:	f7ff ffe1 	bl	8000e24 <CubeM_DEBUGERRORHANDLER>

	errornumber++;
 8000e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e64:	3301      	adds	r3, #1
 8000e66:	627b      	str	r3, [r7, #36]	; 0x24
	if(CubeM_setChannelname(0, (uint8_t*)"Test0") != 0) CubeM_DEBUGERRORHANDLER(errornumber);
 8000e68:	49a7      	ldr	r1, [pc, #668]	; (8001108 <CubeM_runDebugTests+0x2c8>)
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f7ff fb7c 	bl	8000568 <CubeM_setChannelname>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d002      	beq.n	8000e7c <CubeM_runDebugTests+0x3c>
 8000e76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000e78:	f7ff ffd4 	bl	8000e24 <CubeM_DEBUGERRORHANDLER>

	errornumber++;
 8000e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7e:	3301      	adds	r3, #1
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
	if(CubeM_attendUIntValue(0, 123) != 0) CubeM_DEBUGERRORHANDLER(errornumber);
 8000e82:	217b      	movs	r1, #123	; 0x7b
 8000e84:	2000      	movs	r0, #0
 8000e86:	f7ff fb97 	bl	80005b8 <CubeM_attendUIntValue>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d002      	beq.n	8000e96 <CubeM_runDebugTests+0x56>
 8000e90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000e92:	f7ff ffc7 	bl	8000e24 <CubeM_DEBUGERRORHANDLER>

	errornumber++;
 8000e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e98:	3301      	adds	r3, #1
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
	if(CubeM_attendUIntValue(0, 234) != 0) CubeM_DEBUGERRORHANDLER(errornumber);
 8000e9c:	21ea      	movs	r1, #234	; 0xea
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f7ff fb8a 	bl	80005b8 <CubeM_attendUIntValue>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d002      	beq.n	8000eb0 <CubeM_runDebugTests+0x70>
 8000eaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000eac:	f7ff ffba 	bl	8000e24 <CubeM_DEBUGERRORHANDLER>

	errornumber++;
 8000eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
	if(CubeM_attendUIntValue(1, 123) != 0) CubeM_DEBUGERRORHANDLER(errornumber);
 8000eb6:	217b      	movs	r1, #123	; 0x7b
 8000eb8:	2001      	movs	r0, #1
 8000eba:	f7ff fb7d 	bl	80005b8 <CubeM_attendUIntValue>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d002      	beq.n	8000eca <CubeM_runDebugTests+0x8a>
 8000ec4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000ec6:	f7ff ffad 	bl	8000e24 <CubeM_DEBUGERRORHANDLER>

	errornumber++;
 8000eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ecc:	3301      	adds	r3, #1
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
	if(CubeM_attendUIntValue(1, 234) != 0) CubeM_DEBUGERRORHANDLER(errornumber);
 8000ed0:	21ea      	movs	r1, #234	; 0xea
 8000ed2:	2001      	movs	r0, #1
 8000ed4:	f7ff fb70 	bl	80005b8 <CubeM_attendUIntValue>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d002      	beq.n	8000ee4 <CubeM_runDebugTests+0xa4>
 8000ede:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000ee0:	f7ff ffa0 	bl	8000e24 <CubeM_DEBUGERRORHANDLER>

	errornumber++;
 8000ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
	if(CubeM_attendIntValue(1, -123) != 0) CubeM_DEBUGERRORHANDLER(errornumber);
 8000eea:	f06f 017a 	mvn.w	r1, #122	; 0x7a
 8000eee:	2001      	movs	r0, #1
 8000ef0:	f7ff fbc8 	bl	8000684 <CubeM_attendIntValue>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d002      	beq.n	8000f00 <CubeM_runDebugTests+0xc0>
 8000efa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000efc:	f7ff ff92 	bl	8000e24 <CubeM_DEBUGERRORHANDLER>

	errornumber++;
 8000f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f02:	3301      	adds	r3, #1
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
	if(CubeM_attendFloatValue(2, 0.123, 3) != 0) CubeM_DEBUGERRORHANDLER(errornumber);
 8000f06:	2103      	movs	r1, #3
 8000f08:	ed9f 0a80 	vldr	s0, [pc, #512]	; 800110c <CubeM_runDebugTests+0x2cc>
 8000f0c:	2002      	movs	r0, #2
 8000f0e:	f7ff fc23 	bl	8000758 <CubeM_attendFloatValue>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d002      	beq.n	8000f1e <CubeM_runDebugTests+0xde>
 8000f18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f1a:	f7ff ff83 	bl	8000e24 <CubeM_DEBUGERRORHANDLER>

	errornumber++;
 8000f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f20:	3301      	adds	r3, #1
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24
	if(CubeM_attendFloatValue(2, 0.123, 2) != 0) CubeM_DEBUGERRORHANDLER(errornumber);
 8000f24:	2102      	movs	r1, #2
 8000f26:	ed9f 0a79 	vldr	s0, [pc, #484]	; 800110c <CubeM_runDebugTests+0x2cc>
 8000f2a:	2002      	movs	r0, #2
 8000f2c:	f7ff fc14 	bl	8000758 <CubeM_attendFloatValue>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d002      	beq.n	8000f3c <CubeM_runDebugTests+0xfc>
 8000f36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f38:	f7ff ff74 	bl	8000e24 <CubeM_DEBUGERRORHANDLER>

	uint8_t debugchnumbers[] = {0, 1, 2, 3, 4};
 8000f3c:	4a74      	ldr	r2, [pc, #464]	; (8001110 <CubeM_runDebugTests+0x2d0>)
 8000f3e:	f107 0310 	add.w	r3, r7, #16
 8000f42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f46:	6018      	str	r0, [r3, #0]
 8000f48:	3304      	adds	r3, #4
 8000f4a:	7019      	strb	r1, [r3, #0]
	cubeMDataType debugdatatypes[] = {CUBEMUINT, CUBEMINT, CUBEMFLOAT, CUBEMDOUBLE, CUBEMLDOUBLE};
 8000f4c:	4a71      	ldr	r2, [pc, #452]	; (8001114 <CubeM_runDebugTests+0x2d4>)
 8000f4e:	f107 0308 	add.w	r3, r7, #8
 8000f52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f56:	6018      	str	r0, [r3, #0]
 8000f58:	3304      	adds	r3, #4
 8000f5a:	7019      	strb	r1, [r3, #0]
	uint8_t debugprecisionvalues[] = {2, 3, 4, 5, 6};
 8000f5c:	4a6e      	ldr	r2, [pc, #440]	; (8001118 <CubeM_runDebugTests+0x2d8>)
 8000f5e:	463b      	mov	r3, r7
 8000f60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f64:	6018      	str	r0, [r3, #0]
 8000f66:	3304      	adds	r3, #4
 8000f68:	7019      	strb	r1, [r3, #0]

	for(uint8_t i=0; i<CUBEMNROFDATATYPES; i++) {
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000f70:	e054      	b.n	800101c <CubeM_runDebugTests+0x1dc>
		errornumber++;
 8000f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f74:	3301      	adds	r3, #1
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
		if(CubeM_setDataType(debugchnumbers[i], debugdatatypes[i])!= 0) CubeM_DEBUGERRORHANDLER(errornumber);
 8000f78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f7c:	3328      	adds	r3, #40	; 0x28
 8000f7e:	443b      	add	r3, r7
 8000f80:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8000f84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f88:	3328      	adds	r3, #40	; 0x28
 8000f8a:	443b      	add	r3, r7
 8000f8c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8000f90:	4619      	mov	r1, r3
 8000f92:	4610      	mov	r0, r2
 8000f94:	f7ff fc7a 	bl	800088c <CubeM_setDataType>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d002      	beq.n	8000fa4 <CubeM_runDebugTests+0x164>
 8000f9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000fa0:	f7ff ff40 	bl	8000e24 <CubeM_DEBUGERRORHANDLER>

		errornumber++;
 8000fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
		if(channels[debugchnumbers[i]].datatype != debugdatatypes[i]) CubeM_DEBUGERRORHANDLER(errornumber);
 8000faa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000fae:	3328      	adds	r3, #40	; 0x28
 8000fb0:	443b      	add	r3, r7
 8000fb2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4a58      	ldr	r2, [pc, #352]	; (800111c <CubeM_runDebugTests+0x2dc>)
 8000fba:	460b      	mov	r3, r1
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	440b      	add	r3, r1
 8000fc0:	00db      	lsls	r3, r3, #3
 8000fc2:	4413      	add	r3, r2
 8000fc4:	3316      	adds	r3, #22
 8000fc6:	781a      	ldrb	r2, [r3, #0]
 8000fc8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000fcc:	3328      	adds	r3, #40	; 0x28
 8000fce:	443b      	add	r3, r7
 8000fd0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d002      	beq.n	8000fde <CubeM_runDebugTests+0x19e>
 8000fd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000fda:	f7ff ff23 	bl	8000e24 <CubeM_DEBUGERRORHANDLER>

		errornumber++;
 8000fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24
		if(CubeM_setPrecision(debugchnumbers[i], debugprecisionvalues[i])!= 0) CubeM_DEBUGERRORHANDLER(errornumber);
 8000fe4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000fe8:	3328      	adds	r3, #40	; 0x28
 8000fea:	443b      	add	r3, r7
 8000fec:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8000ff0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ff4:	3328      	adds	r3, #40	; 0x28
 8000ff6:	443b      	add	r3, r7
 8000ff8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000ffc:	b25b      	sxtb	r3, r3
 8000ffe:	4619      	mov	r1, r3
 8001000:	4610      	mov	r0, r2
 8001002:	f7ff fc67 	bl	80008d4 <CubeM_setPrecision>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d002      	beq.n	8001012 <CubeM_runDebugTests+0x1d2>
 800100c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800100e:	f7ff ff09 	bl	8000e24 <CubeM_DEBUGERRORHANDLER>
	for(uint8_t i=0; i<CUBEMNROFDATATYPES; i++) {
 8001012:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001016:	3301      	adds	r3, #1
 8001018:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800101c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001020:	2b04      	cmp	r3, #4
 8001022:	d9a6      	bls.n	8000f72 <CubeM_runDebugTests+0x132>
	}

	errornumber++;
 8001024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001026:	3301      	adds	r3, #1
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
	if(CubeM_setValue(debugchnumbers[0], (uint32_t)123) != 0) CubeM_DEBUGERRORHANDLER(errornumber);
 800102a:	7c3b      	ldrb	r3, [r7, #16]
 800102c:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 8001120 <CubeM_runDebugTests+0x2e0>
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fc71 	bl	8000918 <CubeM_setUINTValue>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d002      	beq.n	8001042 <CubeM_runDebugTests+0x202>
 800103c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800103e:	f7ff fef1 	bl	8000e24 <CubeM_DEBUGERRORHANDLER>

	errornumber++;
 8001042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001044:	3301      	adds	r3, #1
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
	if(CubeM_setValue(debugchnumbers[1], (int32_t)-123) != 0) CubeM_DEBUGERRORHANDLER(errornumber);
 8001048:	7c7b      	ldrb	r3, [r7, #17]
 800104a:	ed9f 0a36 	vldr	s0, [pc, #216]	; 8001124 <CubeM_runDebugTests+0x2e4>
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff fc9a 	bl	8000988 <CubeM_setINTValue>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d002      	beq.n	8001060 <CubeM_runDebugTests+0x220>
 800105a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800105c:	f7ff fee2 	bl	8000e24 <CubeM_DEBUGERRORHANDLER>

	errornumber++;
 8001060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001062:	3301      	adds	r3, #1
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
	if(CubeM_setValue(debugchnumbers[2], (float)0.123456789) != 0) CubeM_DEBUGERRORHANDLER(errornumber);
 8001066:	7cbb      	ldrb	r3, [r7, #18]
 8001068:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8001128 <CubeM_runDebugTests+0x2e8>
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fcc3 	bl	80009f8 <CubeM_setFLOATValue>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d002      	beq.n	800107e <CubeM_runDebugTests+0x23e>
 8001078:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800107a:	f7ff fed3 	bl	8000e24 <CubeM_DEBUGERRORHANDLER>

	errornumber++;
 800107e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001080:	3301      	adds	r3, #1
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
	if(CubeM_setValue(debugchnumbers[3], (double)0.123456789) != 0) CubeM_DEBUGERRORHANDLER(errornumber);
 8001084:	7cfb      	ldrb	r3, [r7, #19]
 8001086:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8001100 <CubeM_runDebugTests+0x2c0>
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fcec 	bl	8000a68 <CubeM_setDOUBLEValue>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d002      	beq.n	800109c <CubeM_runDebugTests+0x25c>
 8001096:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001098:	f7ff fec4 	bl	8000e24 <CubeM_DEBUGERRORHANDLER>

	errornumber++;
 800109c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109e:	3301      	adds	r3, #1
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
	if(CubeM_setValue(debugchnumbers[4], (long double)0.123456789) != 0) CubeM_DEBUGERRORHANDLER(errornumber);
 80010a2:	7d3b      	ldrb	r3, [r7, #20]
 80010a4:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8001100 <CubeM_runDebugTests+0x2c0>
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fd13 	bl	8000ad4 <CubeM_setLDOUBLEValue>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d002      	beq.n	80010ba <CubeM_runDebugTests+0x27a>
 80010b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010b6:	f7ff feb5 	bl	8000e24 <CubeM_DEBUGERRORHANDLER>

	errornumber++;
 80010ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010bc:	3301      	adds	r3, #1
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
	if(CubeM_setValue(debugchnumbers[0], (float)0.123456789) != 1) CubeM_DEBUGERRORHANDLER(errornumber);
 80010c0:	7c3b      	ldrb	r3, [r7, #16]
 80010c2:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8001128 <CubeM_runDebugTests+0x2e8>
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fc96 	bl	80009f8 <CubeM_setFLOATValue>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d002      	beq.n	80010d8 <CubeM_runDebugTests+0x298>
 80010d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010d4:	f7ff fea6 	bl	8000e24 <CubeM_DEBUGERRORHANDLER>

	errornumber++;
 80010d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010da:	3301      	adds	r3, #1
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
	if(CubeM_sendCurValues() != 0) CubeM_DEBUGERRORHANDLER(errornumber);
 80010de:	f7ff fd2f 	bl	8000b40 <CubeM_sendCurValues>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d002      	beq.n	80010ee <CubeM_runDebugTests+0x2ae>
 80010e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010ea:	f7ff fe9b 	bl	8000e24 <CubeM_DEBUGERRORHANDLER>

	uint8_t tempstatus = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	uint32_t tempcounter = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]
	while(tempstatus == 0) {
 80010f8:	e02f      	b.n	800115a <CubeM_runDebugTests+0x31a>
 80010fa:	bf00      	nop
 80010fc:	f3af 8000 	nop.w
 8001100:	3739635f 	.word	0x3739635f
 8001104:	3fbf9add 	.word	0x3fbf9add
 8001108:	0800f110 	.word	0x0800f110
 800110c:	3dfbe76d 	.word	0x3dfbe76d
 8001110:	0800f118 	.word	0x0800f118
 8001114:	0800f120 	.word	0x0800f120
 8001118:	0800f128 	.word	0x0800f128
 800111c:	24000340 	.word	0x24000340
 8001120:	42f60000 	.word	0x42f60000
 8001124:	c2f60000 	.word	0xc2f60000
 8001128:	3dfcd6ea 	.word	0x3dfcd6ea
		tempstatus = CubeM_attendFloatValue(2, 0.123+tempcounter, 2);
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	ee07 3a90 	vmov	s15, r3
 8001132:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001136:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 80011e0 <CubeM_runDebugTests+0x3a0>
 800113a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800113e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001142:	2102      	movs	r1, #2
 8001144:	eeb0 0a67 	vmov.f32	s0, s15
 8001148:	2002      	movs	r0, #2
 800114a:	f7ff fb05 	bl	8000758 <CubeM_attendFloatValue>
 800114e:	4603      	mov	r3, r0
 8001150:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		tempcounter++;
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	3301      	adds	r3, #1
 8001158:	61fb      	str	r3, [r7, #28]
	while(tempstatus == 0) {
 800115a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800115e:	2b00      	cmp	r3, #0
 8001160:	d0e4      	beq.n	800112c <CubeM_runDebugTests+0x2ec>
	}

	errornumber++;
 8001162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001164:	3301      	adds	r3, #1
 8001166:	627b      	str	r3, [r7, #36]	; 0x24
	if(usedbuffer == 0 || emptybuffer == 1 || buffer[0] == '\0') CubeM_DEBUGERRORHANDLER(errornumber);
 8001168:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <CubeM_runDebugTests+0x3a8>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d008      	beq.n	8001182 <CubeM_runDebugTests+0x342>
 8001170:	4b1e      	ldr	r3, [pc, #120]	; (80011ec <CubeM_runDebugTests+0x3ac>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d004      	beq.n	8001182 <CubeM_runDebugTests+0x342>
 8001178:	4b1d      	ldr	r3, [pc, #116]	; (80011f0 <CubeM_runDebugTests+0x3b0>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d102      	bne.n	8001188 <CubeM_runDebugTests+0x348>
 8001182:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001184:	f7ff fe4e 	bl	8000e24 <CubeM_DEBUGERRORHANDLER>

	HAL_Delay(3000);
 8001188:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800118c:	f000 fdc6 	bl	8001d1c <HAL_Delay>
	CubeM_sendBuffer();
 8001190:	f7ff fb56 	bl	8000840 <CubeM_sendBuffer>

	errornumber++;
 8001194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001196:	3301      	adds	r3, #1
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
	if(CubeM_clearBuffer() != 0) CubeM_DEBUGERRORHANDLER(errornumber);
 800119a:	f7ff f9c3 	bl	8000524 <CubeM_clearBuffer>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d002      	beq.n	80011aa <CubeM_runDebugTests+0x36a>
 80011a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011a6:	f7ff fe3d 	bl	8000e24 <CubeM_DEBUGERRORHANDLER>

	errornumber++;
 80011aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ac:	3301      	adds	r3, #1
 80011ae:	627b      	str	r3, [r7, #36]	; 0x24
	if(usedbuffer != 0 || emptybuffer != 1 || buffer[0] != '\0') CubeM_DEBUGERRORHANDLER(errornumber);
 80011b0:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <CubeM_runDebugTests+0x3a8>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d108      	bne.n	80011ca <CubeM_runDebugTests+0x38a>
 80011b8:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <CubeM_runDebugTests+0x3ac>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d104      	bne.n	80011ca <CubeM_runDebugTests+0x38a>
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <CubeM_runDebugTests+0x3b0>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d002      	beq.n	80011d0 <CubeM_runDebugTests+0x390>
 80011ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011cc:	f7ff fe2a 	bl	8000e24 <CubeM_DEBUGERRORHANDLER>

	return 0;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3728      	adds	r7, #40	; 0x28
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	f3af 8000 	nop.w
 80011e0:	916872b0 	.word	0x916872b0
 80011e4:	3fbf7ced 	.word	0x3fbf7ced
 80011e8:	24000334 	.word	0x24000334
 80011ec:	24000000 	.word	0x24000000
 80011f0:	24000338 	.word	0x24000338

080011f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011f8:	f000 fcfe 	bl	8001bf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011fc:	f000 f810 	bl	8001220 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001200:	f000 f8bc 	bl	800137c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001204:	f000 fa34 	bl	8001670 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001208:	f000 f8e8 	bl	80013dc <MX_ADC1_Init>
  MX_ADC2_Init();
 800120c:	f000 f960 	bl	80014d0 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001210:	f000 f9c6 	bl	80015a0 <MX_ADC3_Init>
  MX_USB_DEVICE_Init();
 8001214:	f00a fc30 	bl	800ba78 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

#ifdef CUBEMDEBUG
  CubeM_runDebugTests();
 8001218:	f7ff fe12 	bl	8000e40 <CubeM_runDebugTests>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800121c:	e7fe      	b.n	800121c <main+0x28>
	...

08001220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b09e      	sub	sp, #120	; 0x78
 8001224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001226:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800122a:	224c      	movs	r2, #76	; 0x4c
 800122c:	2100      	movs	r1, #0
 800122e:	4618      	mov	r0, r3
 8001230:	f00b ff7d 	bl	800d12e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001234:	f107 030c 	add.w	r3, r7, #12
 8001238:	2220      	movs	r2, #32
 800123a:	2100      	movs	r1, #0
 800123c:	4618      	mov	r0, r3
 800123e:	f00b ff76 	bl	800d12e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001242:	2002      	movs	r0, #2
 8001244:	f003 fbb8 	bl	80049b8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001248:	2300      	movs	r3, #0
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	4b48      	ldr	r3, [pc, #288]	; (8001370 <SystemClock_Config+0x150>)
 800124e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001250:	4a47      	ldr	r2, [pc, #284]	; (8001370 <SystemClock_Config+0x150>)
 8001252:	f023 0301 	bic.w	r3, r3, #1
 8001256:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001258:	4b45      	ldr	r3, [pc, #276]	; (8001370 <SystemClock_Config+0x150>)
 800125a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800125c:	f003 0301 	and.w	r3, r3, #1
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	4b44      	ldr	r3, [pc, #272]	; (8001374 <SystemClock_Config+0x154>)
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	4a43      	ldr	r2, [pc, #268]	; (8001374 <SystemClock_Config+0x154>)
 8001268:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800126c:	6193      	str	r3, [r2, #24]
 800126e:	4b41      	ldr	r3, [pc, #260]	; (8001374 <SystemClock_Config+0x154>)
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001276:	60bb      	str	r3, [r7, #8]
 8001278:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800127a:	bf00      	nop
 800127c:	4b3d      	ldr	r3, [pc, #244]	; (8001374 <SystemClock_Config+0x154>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001284:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001288:	d1f8      	bne.n	800127c <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128a:	4b3b      	ldr	r3, [pc, #236]	; (8001378 <SystemClock_Config+0x158>)
 800128c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001290:	4a39      	ldr	r2, [pc, #228]	; (8001378 <SystemClock_Config+0x158>)
 8001292:	f043 0302 	orr.w	r3, r3, #2
 8001296:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800129a:	4b37      	ldr	r3, [pc, #220]	; (8001378 <SystemClock_Config+0x158>)
 800129c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80012a8:	2300      	movs	r3, #0
 80012aa:	603b      	str	r3, [r7, #0]
 80012ac:	4b31      	ldr	r3, [pc, #196]	; (8001374 <SystemClock_Config+0x154>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	4a30      	ldr	r2, [pc, #192]	; (8001374 <SystemClock_Config+0x154>)
 80012b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012b6:	6193      	str	r3, [r2, #24]
 80012b8:	4b2e      	ldr	r3, [pc, #184]	; (8001374 <SystemClock_Config+0x154>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012c0:	603b      	str	r3, [r7, #0]
 80012c2:	4b2b      	ldr	r3, [pc, #172]	; (8001370 <SystemClock_Config+0x150>)
 80012c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c6:	4a2a      	ldr	r2, [pc, #168]	; (8001370 <SystemClock_Config+0x150>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80012ce:	4b28      	ldr	r3, [pc, #160]	; (8001370 <SystemClock_Config+0x150>)
 80012d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	603b      	str	r3, [r7, #0]
 80012d8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80012da:	bf00      	nop
 80012dc:	4b25      	ldr	r3, [pc, #148]	; (8001374 <SystemClock_Config+0x154>)
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012e8:	d1f8      	bne.n	80012dc <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012ea:	2301      	movs	r3, #1
 80012ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012f4:	2302      	movs	r3, #2
 80012f6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012f8:	2302      	movs	r3, #2
 80012fa:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 80012fc:	2305      	movs	r3, #5
 80012fe:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001300:	23c0      	movs	r3, #192	; 0xc0
 8001302:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001304:	2302      	movs	r3, #2
 8001306:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8001308:	230f      	movs	r3, #15
 800130a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 800130c:	2302      	movs	r3, #2
 800130e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001310:	2308      	movs	r3, #8
 8001312:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001314:	2300      	movs	r3, #0
 8001316:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800131c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001320:	4618      	mov	r0, r3
 8001322:	f003 fb93 	bl	8004a4c <HAL_RCC_OscConfig>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <SystemClock_Config+0x110>
  {
    Error_Handler();
 800132c:	f000 f9d8 	bl	80016e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001330:	233f      	movs	r3, #63	; 0x3f
 8001332:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001334:	2303      	movs	r3, #3
 8001336:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800133c:	2308      	movs	r3, #8
 800133e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001340:	2340      	movs	r3, #64	; 0x40
 8001342:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001344:	2340      	movs	r3, #64	; 0x40
 8001346:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001348:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800134e:	2340      	movs	r3, #64	; 0x40
 8001350:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001352:	f107 030c 	add.w	r3, r7, #12
 8001356:	2104      	movs	r1, #4
 8001358:	4618      	mov	r0, r3
 800135a:	f003 ffd1 	bl	8005300 <HAL_RCC_ClockConfig>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8001364:	f000 f9bc 	bl	80016e0 <Error_Handler>
  }
}
 8001368:	bf00      	nop
 800136a:	3778      	adds	r7, #120	; 0x78
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	58000400 	.word	0x58000400
 8001374:	58024800 	.word	0x58024800
 8001378:	58024400 	.word	0x58024400

0800137c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b0b0      	sub	sp, #192	; 0xc0
 8001380:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001382:	463b      	mov	r3, r7
 8001384:	22c0      	movs	r2, #192	; 0xc0
 8001386:	2100      	movs	r1, #0
 8001388:	4618      	mov	r0, r3
 800138a:	f00b fed0 	bl	800d12e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800138e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001392:	f04f 0300 	mov.w	r3, #0
 8001396:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 800139a:	2302      	movs	r3, #2
 800139c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 800139e:	230c      	movs	r3, #12
 80013a0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80013a2:	2302      	movs	r3, #2
 80013a4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80013a6:	2302      	movs	r3, #2
 80013a8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80013aa:	2302      	movs	r3, #2
 80013ac:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80013ae:	23c0      	movs	r3, #192	; 0xc0
 80013b0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80013b2:	2320      	movs	r3, #32
 80013b4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80013ba:	2300      	movs	r3, #0
 80013bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013c0:	463b      	mov	r3, r7
 80013c2:	4618      	mov	r0, r3
 80013c4:	f004 fb12 	bl	80059ec <HAL_RCCEx_PeriphCLKConfig>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80013ce:	f000 f987 	bl	80016e0 <Error_Handler>
  }
}
 80013d2:	bf00      	nop
 80013d4:	37c0      	adds	r7, #192	; 0xc0
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
	...

080013dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08a      	sub	sp, #40	; 0x28
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80013e2:	f107 031c 	add.w	r3, r7, #28
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80013ee:	463b      	mov	r3, r7
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
 80013fc:	615a      	str	r2, [r3, #20]
 80013fe:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001400:	4b2f      	ldr	r3, [pc, #188]	; (80014c0 <MX_ADC1_Init+0xe4>)
 8001402:	4a30      	ldr	r2, [pc, #192]	; (80014c4 <MX_ADC1_Init+0xe8>)
 8001404:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001406:	4b2e      	ldr	r3, [pc, #184]	; (80014c0 <MX_ADC1_Init+0xe4>)
 8001408:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800140c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800140e:	4b2c      	ldr	r3, [pc, #176]	; (80014c0 <MX_ADC1_Init+0xe4>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001414:	4b2a      	ldr	r3, [pc, #168]	; (80014c0 <MX_ADC1_Init+0xe4>)
 8001416:	2200      	movs	r2, #0
 8001418:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800141a:	4b29      	ldr	r3, [pc, #164]	; (80014c0 <MX_ADC1_Init+0xe4>)
 800141c:	2204      	movs	r2, #4
 800141e:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001420:	4b27      	ldr	r3, [pc, #156]	; (80014c0 <MX_ADC1_Init+0xe4>)
 8001422:	2200      	movs	r2, #0
 8001424:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001426:	4b26      	ldr	r3, [pc, #152]	; (80014c0 <MX_ADC1_Init+0xe4>)
 8001428:	2200      	movs	r2, #0
 800142a:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800142c:	4b24      	ldr	r3, [pc, #144]	; (80014c0 <MX_ADC1_Init+0xe4>)
 800142e:	2201      	movs	r2, #1
 8001430:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001432:	4b23      	ldr	r3, [pc, #140]	; (80014c0 <MX_ADC1_Init+0xe4>)
 8001434:	2200      	movs	r2, #0
 8001436:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001438:	4b21      	ldr	r3, [pc, #132]	; (80014c0 <MX_ADC1_Init+0xe4>)
 800143a:	2200      	movs	r2, #0
 800143c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800143e:	4b20      	ldr	r3, [pc, #128]	; (80014c0 <MX_ADC1_Init+0xe4>)
 8001440:	2200      	movs	r2, #0
 8001442:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001444:	4b1e      	ldr	r3, [pc, #120]	; (80014c0 <MX_ADC1_Init+0xe4>)
 8001446:	2200      	movs	r2, #0
 8001448:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800144a:	4b1d      	ldr	r3, [pc, #116]	; (80014c0 <MX_ADC1_Init+0xe4>)
 800144c:	2200      	movs	r2, #0
 800144e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001450:	4b1b      	ldr	r3, [pc, #108]	; (80014c0 <MX_ADC1_Init+0xe4>)
 8001452:	2200      	movs	r2, #0
 8001454:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001456:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <MX_ADC1_Init+0xe4>)
 8001458:	2200      	movs	r2, #0
 800145a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800145e:	4818      	ldr	r0, [pc, #96]	; (80014c0 <MX_ADC1_Init+0xe4>)
 8001460:	f000 fe2e 	bl	80020c0 <HAL_ADC_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800146a:	f000 f939 	bl	80016e0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800146e:	2300      	movs	r3, #0
 8001470:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001472:	f107 031c 	add.w	r3, r7, #28
 8001476:	4619      	mov	r1, r3
 8001478:	4811      	ldr	r0, [pc, #68]	; (80014c0 <MX_ADC1_Init+0xe4>)
 800147a:	f001 fc45 	bl	8002d08 <HAL_ADCEx_MultiModeConfigChannel>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001484:	f000 f92c 	bl	80016e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001488:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <MX_ADC1_Init+0xec>)
 800148a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800148c:	2306      	movs	r3, #6
 800148e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001490:	2300      	movs	r3, #0
 8001492:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8001494:	4b0d      	ldr	r3, [pc, #52]	; (80014cc <MX_ADC1_Init+0xf0>)
 8001496:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001498:	2304      	movs	r3, #4
 800149a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014a4:	463b      	mov	r3, r7
 80014a6:	4619      	mov	r1, r3
 80014a8:	4805      	ldr	r0, [pc, #20]	; (80014c0 <MX_ADC1_Init+0xe4>)
 80014aa:	f000 ffab 	bl	8002404 <HAL_ADC_ConfigChannel>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80014b4:	f000 f914 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014b8:	bf00      	nop
 80014ba:	3728      	adds	r7, #40	; 0x28
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	24000480 	.word	0x24000480
 80014c4:	40022000 	.word	0x40022000
 80014c8:	0c900008 	.word	0x0c900008
 80014cc:	47ff0000 	.word	0x47ff0000

080014d0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b088      	sub	sp, #32
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014d6:	1d3b      	adds	r3, r7, #4
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]
 80014e4:	615a      	str	r2, [r3, #20]
 80014e6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80014e8:	4b29      	ldr	r3, [pc, #164]	; (8001590 <MX_ADC2_Init+0xc0>)
 80014ea:	4a2a      	ldr	r2, [pc, #168]	; (8001594 <MX_ADC2_Init+0xc4>)
 80014ec:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80014ee:	4b28      	ldr	r3, [pc, #160]	; (8001590 <MX_ADC2_Init+0xc0>)
 80014f0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80014f4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80014f6:	4b26      	ldr	r3, [pc, #152]	; (8001590 <MX_ADC2_Init+0xc0>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014fc:	4b24      	ldr	r3, [pc, #144]	; (8001590 <MX_ADC2_Init+0xc0>)
 80014fe:	2200      	movs	r2, #0
 8001500:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001502:	4b23      	ldr	r3, [pc, #140]	; (8001590 <MX_ADC2_Init+0xc0>)
 8001504:	2204      	movs	r2, #4
 8001506:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001508:	4b21      	ldr	r3, [pc, #132]	; (8001590 <MX_ADC2_Init+0xc0>)
 800150a:	2200      	movs	r2, #0
 800150c:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800150e:	4b20      	ldr	r3, [pc, #128]	; (8001590 <MX_ADC2_Init+0xc0>)
 8001510:	2200      	movs	r2, #0
 8001512:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8001514:	4b1e      	ldr	r3, [pc, #120]	; (8001590 <MX_ADC2_Init+0xc0>)
 8001516:	2201      	movs	r2, #1
 8001518:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800151a:	4b1d      	ldr	r3, [pc, #116]	; (8001590 <MX_ADC2_Init+0xc0>)
 800151c:	2200      	movs	r2, #0
 800151e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001520:	4b1b      	ldr	r3, [pc, #108]	; (8001590 <MX_ADC2_Init+0xc0>)
 8001522:	2200      	movs	r2, #0
 8001524:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001526:	4b1a      	ldr	r3, [pc, #104]	; (8001590 <MX_ADC2_Init+0xc0>)
 8001528:	2200      	movs	r2, #0
 800152a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800152c:	4b18      	ldr	r3, [pc, #96]	; (8001590 <MX_ADC2_Init+0xc0>)
 800152e:	2200      	movs	r2, #0
 8001530:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001532:	4b17      	ldr	r3, [pc, #92]	; (8001590 <MX_ADC2_Init+0xc0>)
 8001534:	2200      	movs	r2, #0
 8001536:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001538:	4b15      	ldr	r3, [pc, #84]	; (8001590 <MX_ADC2_Init+0xc0>)
 800153a:	2200      	movs	r2, #0
 800153c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 800153e:	4b14      	ldr	r3, [pc, #80]	; (8001590 <MX_ADC2_Init+0xc0>)
 8001540:	2200      	movs	r2, #0
 8001542:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001546:	4812      	ldr	r0, [pc, #72]	; (8001590 <MX_ADC2_Init+0xc0>)
 8001548:	f000 fdba 	bl	80020c0 <HAL_ADC_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8001552:	f000 f8c5 	bl	80016e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001556:	4b10      	ldr	r3, [pc, #64]	; (8001598 <MX_ADC2_Init+0xc8>)
 8001558:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800155a:	2306      	movs	r3, #6
 800155c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8001562:	4b0e      	ldr	r3, [pc, #56]	; (800159c <MX_ADC2_Init+0xcc>)
 8001564:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001566:	2304      	movs	r3, #4
 8001568:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800156e:	2300      	movs	r3, #0
 8001570:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	4619      	mov	r1, r3
 8001576:	4806      	ldr	r0, [pc, #24]	; (8001590 <MX_ADC2_Init+0xc0>)
 8001578:	f000 ff44 	bl	8002404 <HAL_ADC_ConfigChannel>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8001582:	f000 f8ad 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001586:	bf00      	nop
 8001588:	3720      	adds	r7, #32
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	240004e4 	.word	0x240004e4
 8001594:	40022100 	.word	0x40022100
 8001598:	10c00010 	.word	0x10c00010
 800159c:	47ff0000 	.word	0x47ff0000

080015a0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b088      	sub	sp, #32
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015a6:	1d3b      	adds	r3, r7, #4
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
 80015b4:	615a      	str	r2, [r3, #20]
 80015b6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80015b8:	4b29      	ldr	r3, [pc, #164]	; (8001660 <MX_ADC3_Init+0xc0>)
 80015ba:	4a2a      	ldr	r2, [pc, #168]	; (8001664 <MX_ADC3_Init+0xc4>)
 80015bc:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80015be:	4b28      	ldr	r3, [pc, #160]	; (8001660 <MX_ADC3_Init+0xc0>)
 80015c0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80015c4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80015c6:	4b26      	ldr	r3, [pc, #152]	; (8001660 <MX_ADC3_Init+0xc0>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015cc:	4b24      	ldr	r3, [pc, #144]	; (8001660 <MX_ADC3_Init+0xc0>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015d2:	4b23      	ldr	r3, [pc, #140]	; (8001660 <MX_ADC3_Init+0xc0>)
 80015d4:	2204      	movs	r2, #4
 80015d6:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80015d8:	4b21      	ldr	r3, [pc, #132]	; (8001660 <MX_ADC3_Init+0xc0>)
 80015da:	2200      	movs	r2, #0
 80015dc:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80015de:	4b20      	ldr	r3, [pc, #128]	; (8001660 <MX_ADC3_Init+0xc0>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80015e4:	4b1e      	ldr	r3, [pc, #120]	; (8001660 <MX_ADC3_Init+0xc0>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80015ea:	4b1d      	ldr	r3, [pc, #116]	; (8001660 <MX_ADC3_Init+0xc0>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015f0:	4b1b      	ldr	r3, [pc, #108]	; (8001660 <MX_ADC3_Init+0xc0>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015f6:	4b1a      	ldr	r3, [pc, #104]	; (8001660 <MX_ADC3_Init+0xc0>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80015fc:	4b18      	ldr	r3, [pc, #96]	; (8001660 <MX_ADC3_Init+0xc0>)
 80015fe:	2200      	movs	r2, #0
 8001600:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001602:	4b17      	ldr	r3, [pc, #92]	; (8001660 <MX_ADC3_Init+0xc0>)
 8001604:	2200      	movs	r2, #0
 8001606:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001608:	4b15      	ldr	r3, [pc, #84]	; (8001660 <MX_ADC3_Init+0xc0>)
 800160a:	2200      	movs	r2, #0
 800160c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800160e:	4b14      	ldr	r3, [pc, #80]	; (8001660 <MX_ADC3_Init+0xc0>)
 8001610:	2200      	movs	r2, #0
 8001612:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001616:	4812      	ldr	r0, [pc, #72]	; (8001660 <MX_ADC3_Init+0xc0>)
 8001618:	f000 fd52 	bl	80020c0 <HAL_ADC_Init>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8001622:	f000 f85d 	bl	80016e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001626:	4b10      	ldr	r3, [pc, #64]	; (8001668 <MX_ADC3_Init+0xc8>)
 8001628:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800162a:	2306      	movs	r3, #6
 800162c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8001632:	4b0e      	ldr	r3, [pc, #56]	; (800166c <MX_ADC3_Init+0xcc>)
 8001634:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001636:	2304      	movs	r3, #4
 8001638:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800163e:	2300      	movs	r3, #0
 8001640:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	4619      	mov	r1, r3
 8001646:	4806      	ldr	r0, [pc, #24]	; (8001660 <MX_ADC3_Init+0xc0>)
 8001648:	f000 fedc 	bl	8002404 <HAL_ADC_ConfigChannel>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_ADC3_Init+0xb6>
  {
    Error_Handler();
 8001652:	f000 f845 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001656:	bf00      	nop
 8001658:	3720      	adds	r7, #32
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	24000548 	.word	0x24000548
 8001664:	58026000 	.word	0x58026000
 8001668:	04300002 	.word	0x04300002
 800166c:	47ff0000 	.word	0x47ff0000

08001670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001676:	4b19      	ldr	r3, [pc, #100]	; (80016dc <MX_GPIO_Init+0x6c>)
 8001678:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800167c:	4a17      	ldr	r2, [pc, #92]	; (80016dc <MX_GPIO_Init+0x6c>)
 800167e:	f043 0304 	orr.w	r3, r3, #4
 8001682:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001686:	4b15      	ldr	r3, [pc, #84]	; (80016dc <MX_GPIO_Init+0x6c>)
 8001688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001694:	4b11      	ldr	r3, [pc, #68]	; (80016dc <MX_GPIO_Init+0x6c>)
 8001696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800169a:	4a10      	ldr	r2, [pc, #64]	; (80016dc <MX_GPIO_Init+0x6c>)
 800169c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016a4:	4b0d      	ldr	r3, [pc, #52]	; (80016dc <MX_GPIO_Init+0x6c>)
 80016a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ae:	60bb      	str	r3, [r7, #8]
 80016b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b2:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <MX_GPIO_Init+0x6c>)
 80016b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016b8:	4a08      	ldr	r2, [pc, #32]	; (80016dc <MX_GPIO_Init+0x6c>)
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016c2:	4b06      	ldr	r3, [pc, #24]	; (80016dc <MX_GPIO_Init+0x6c>)
 80016c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	607b      	str	r3, [r7, #4]
 80016ce:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016d0:	bf00      	nop
 80016d2:	3714      	adds	r7, #20
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	58024400 	.word	0x58024400

080016e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016e4:	b672      	cpsid	i
}
 80016e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016e8:	e7fe      	b.n	80016e8 <Error_Handler+0x8>
	...

080016ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f2:	4b0a      	ldr	r3, [pc, #40]	; (800171c <HAL_MspInit+0x30>)
 80016f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016f8:	4a08      	ldr	r2, [pc, #32]	; (800171c <HAL_MspInit+0x30>)
 80016fa:	f043 0302 	orr.w	r3, r3, #2
 80016fe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <HAL_MspInit+0x30>)
 8001704:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	607b      	str	r3, [r7, #4]
 800170e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	58024400 	.word	0x58024400

08001720 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b08e      	sub	sp, #56	; 0x38
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001728:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a51      	ldr	r2, [pc, #324]	; (8001884 <HAL_ADC_MspInit+0x164>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d133      	bne.n	80017aa <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001742:	4b51      	ldr	r3, [pc, #324]	; (8001888 <HAL_ADC_MspInit+0x168>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	3301      	adds	r3, #1
 8001748:	4a4f      	ldr	r2, [pc, #316]	; (8001888 <HAL_ADC_MspInit+0x168>)
 800174a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800174c:	4b4e      	ldr	r3, [pc, #312]	; (8001888 <HAL_ADC_MspInit+0x168>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d10e      	bne.n	8001772 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001754:	4b4d      	ldr	r3, [pc, #308]	; (800188c <HAL_ADC_MspInit+0x16c>)
 8001756:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800175a:	4a4c      	ldr	r2, [pc, #304]	; (800188c <HAL_ADC_MspInit+0x16c>)
 800175c:	f043 0320 	orr.w	r3, r3, #32
 8001760:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001764:	4b49      	ldr	r3, [pc, #292]	; (800188c <HAL_ADC_MspInit+0x16c>)
 8001766:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800176a:	f003 0320 	and.w	r3, r3, #32
 800176e:	623b      	str	r3, [r7, #32]
 8001770:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001772:	4b46      	ldr	r3, [pc, #280]	; (800188c <HAL_ADC_MspInit+0x16c>)
 8001774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001778:	4a44      	ldr	r2, [pc, #272]	; (800188c <HAL_ADC_MspInit+0x16c>)
 800177a:	f043 0301 	orr.w	r3, r3, #1
 800177e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001782:	4b42      	ldr	r3, [pc, #264]	; (800188c <HAL_ADC_MspInit+0x16c>)
 8001784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	61fb      	str	r3, [r7, #28]
 800178e:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PA7     ------> ADC1_INN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001790:	23c0      	movs	r3, #192	; 0xc0
 8001792:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001794:	2303      	movs	r3, #3
 8001796:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a0:	4619      	mov	r1, r3
 80017a2:	483b      	ldr	r0, [pc, #236]	; (8001890 <HAL_ADC_MspInit+0x170>)
 80017a4:	f001 fc9e 	bl	80030e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80017a8:	e067      	b.n	800187a <HAL_ADC_MspInit+0x15a>
  else if(hadc->Instance==ADC2)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a39      	ldr	r2, [pc, #228]	; (8001894 <HAL_ADC_MspInit+0x174>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d133      	bne.n	800181c <HAL_ADC_MspInit+0xfc>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80017b4:	4b34      	ldr	r3, [pc, #208]	; (8001888 <HAL_ADC_MspInit+0x168>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	3301      	adds	r3, #1
 80017ba:	4a33      	ldr	r2, [pc, #204]	; (8001888 <HAL_ADC_MspInit+0x168>)
 80017bc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80017be:	4b32      	ldr	r3, [pc, #200]	; (8001888 <HAL_ADC_MspInit+0x168>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d10e      	bne.n	80017e4 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80017c6:	4b31      	ldr	r3, [pc, #196]	; (800188c <HAL_ADC_MspInit+0x16c>)
 80017c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017cc:	4a2f      	ldr	r2, [pc, #188]	; (800188c <HAL_ADC_MspInit+0x16c>)
 80017ce:	f043 0320 	orr.w	r3, r3, #32
 80017d2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80017d6:	4b2d      	ldr	r3, [pc, #180]	; (800188c <HAL_ADC_MspInit+0x16c>)
 80017d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017dc:	f003 0320 	and.w	r3, r3, #32
 80017e0:	61bb      	str	r3, [r7, #24]
 80017e2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e4:	4b29      	ldr	r3, [pc, #164]	; (800188c <HAL_ADC_MspInit+0x16c>)
 80017e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ea:	4a28      	ldr	r2, [pc, #160]	; (800188c <HAL_ADC_MspInit+0x16c>)
 80017ec:	f043 0304 	orr.w	r3, r3, #4
 80017f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017f4:	4b25      	ldr	r3, [pc, #148]	; (800188c <HAL_ADC_MspInit+0x16c>)
 80017f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017fa:	f003 0304 	and.w	r3, r3, #4
 80017fe:	617b      	str	r3, [r7, #20]
 8001800:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001802:	2330      	movs	r3, #48	; 0x30
 8001804:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001806:	2303      	movs	r3, #3
 8001808:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800180e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001812:	4619      	mov	r1, r3
 8001814:	4820      	ldr	r0, [pc, #128]	; (8001898 <HAL_ADC_MspInit+0x178>)
 8001816:	f001 fc65 	bl	80030e4 <HAL_GPIO_Init>
}
 800181a:	e02e      	b.n	800187a <HAL_ADC_MspInit+0x15a>
  else if(hadc->Instance==ADC3)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a1e      	ldr	r2, [pc, #120]	; (800189c <HAL_ADC_MspInit+0x17c>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d129      	bne.n	800187a <HAL_ADC_MspInit+0x15a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001826:	4b19      	ldr	r3, [pc, #100]	; (800188c <HAL_ADC_MspInit+0x16c>)
 8001828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800182c:	4a17      	ldr	r2, [pc, #92]	; (800188c <HAL_ADC_MspInit+0x16c>)
 800182e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001832:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001836:	4b15      	ldr	r3, [pc, #84]	; (800188c <HAL_ADC_MspInit+0x16c>)
 8001838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800183c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001840:	613b      	str	r3, [r7, #16]
 8001842:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001844:	4b11      	ldr	r3, [pc, #68]	; (800188c <HAL_ADC_MspInit+0x16c>)
 8001846:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800184a:	4a10      	ldr	r2, [pc, #64]	; (800188c <HAL_ADC_MspInit+0x16c>)
 800184c:	f043 0304 	orr.w	r3, r3, #4
 8001850:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001854:	4b0d      	ldr	r3, [pc, #52]	; (800188c <HAL_ADC_MspInit+0x16c>)
 8001856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800185a:	f003 0304 	and.w	r3, r3, #4
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001862:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001866:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800186a:	f000 fa87 	bl	8001d7c <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800186e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001872:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001876:	f000 fa81 	bl	8001d7c <HAL_SYSCFG_AnalogSwitchConfig>
}
 800187a:	bf00      	nop
 800187c:	3738      	adds	r7, #56	; 0x38
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40022000 	.word	0x40022000
 8001888:	240005ac 	.word	0x240005ac
 800188c:	58024400 	.word	0x58024400
 8001890:	58020000 	.word	0x58020000
 8001894:	40022100 	.word	0x40022100
 8001898:	58020800 	.word	0x58020800
 800189c:	58026000 	.word	0x58026000

080018a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018a4:	e7fe      	b.n	80018a4 <NMI_Handler+0x4>

080018a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018aa:	e7fe      	b.n	80018aa <HardFault_Handler+0x4>

080018ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018b0:	e7fe      	b.n	80018b0 <MemManage_Handler+0x4>

080018b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018b2:	b480      	push	{r7}
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018b6:	e7fe      	b.n	80018b6 <BusFault_Handler+0x4>

080018b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018bc:	e7fe      	b.n	80018bc <UsageFault_Handler+0x4>

080018be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ec:	f000 f9f6 	bl	8001cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018f0:	bf00      	nop
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80018f8:	4802      	ldr	r0, [pc, #8]	; (8001904 <OTG_FS_IRQHandler+0x10>)
 80018fa:	f001 fefc 	bl	80036f6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	24001a98 	.word	0x24001a98

08001908 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return 1;
 800190c:	2301      	movs	r3, #1
}
 800190e:	4618      	mov	r0, r3
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <_kill>:

int _kill(int pid, int sig)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001922:	f00b fc67 	bl	800d1f4 <__errno>
 8001926:	4603      	mov	r3, r0
 8001928:	2216      	movs	r2, #22
 800192a:	601a      	str	r2, [r3, #0]
  return -1;
 800192c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001930:	4618      	mov	r0, r3
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <_exit>:

void _exit (int status)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001940:	f04f 31ff 	mov.w	r1, #4294967295
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7ff ffe7 	bl	8001918 <_kill>
  while (1) {}    /* Make sure we hang here */
 800194a:	e7fe      	b.n	800194a <_exit+0x12>

0800194c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	e00a      	b.n	8001974 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800195e:	f3af 8000 	nop.w
 8001962:	4601      	mov	r1, r0
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	1c5a      	adds	r2, r3, #1
 8001968:	60ba      	str	r2, [r7, #8]
 800196a:	b2ca      	uxtb	r2, r1
 800196c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	3301      	adds	r3, #1
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	697a      	ldr	r2, [r7, #20]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	429a      	cmp	r2, r3
 800197a:	dbf0      	blt.n	800195e <_read+0x12>
  }

  return len;
 800197c:	687b      	ldr	r3, [r7, #4]
}
 800197e:	4618      	mov	r0, r3
 8001980:	3718      	adds	r7, #24
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b086      	sub	sp, #24
 800198a:	af00      	add	r7, sp, #0
 800198c:	60f8      	str	r0, [r7, #12]
 800198e:	60b9      	str	r1, [r7, #8]
 8001990:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001992:	2300      	movs	r3, #0
 8001994:	617b      	str	r3, [r7, #20]
 8001996:	e009      	b.n	80019ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	1c5a      	adds	r2, r3, #1
 800199c:	60ba      	str	r2, [r7, #8]
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	3301      	adds	r3, #1
 80019aa:	617b      	str	r3, [r7, #20]
 80019ac:	697a      	ldr	r2, [r7, #20]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	dbf1      	blt.n	8001998 <_write+0x12>
  }
  return len;
 80019b4:	687b      	ldr	r3, [r7, #4]
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <_close>:

int _close(int file)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
 80019de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019e6:	605a      	str	r2, [r3, #4]
  return 0;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <_isatty>:

int _isatty(int file)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b083      	sub	sp, #12
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019fe:	2301      	movs	r3, #1
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
	...

08001a28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a30:	4a14      	ldr	r2, [pc, #80]	; (8001a84 <_sbrk+0x5c>)
 8001a32:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <_sbrk+0x60>)
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a3c:	4b13      	ldr	r3, [pc, #76]	; (8001a8c <_sbrk+0x64>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d102      	bne.n	8001a4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a44:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <_sbrk+0x64>)
 8001a46:	4a12      	ldr	r2, [pc, #72]	; (8001a90 <_sbrk+0x68>)
 8001a48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a4a:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <_sbrk+0x64>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4413      	add	r3, r2
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d207      	bcs.n	8001a68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a58:	f00b fbcc 	bl	800d1f4 <__errno>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	220c      	movs	r2, #12
 8001a60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a62:	f04f 33ff 	mov.w	r3, #4294967295
 8001a66:	e009      	b.n	8001a7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a68:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <_sbrk+0x64>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a6e:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <_sbrk+0x64>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4413      	add	r3, r2
 8001a76:	4a05      	ldr	r2, [pc, #20]	; (8001a8c <_sbrk+0x64>)
 8001a78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3718      	adds	r7, #24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	24080000 	.word	0x24080000
 8001a88:	00000400 	.word	0x00000400
 8001a8c:	240005b0 	.word	0x240005b0
 8001a90:	24002310 	.word	0x24002310

08001a94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a98:	4b37      	ldr	r3, [pc, #220]	; (8001b78 <SystemInit+0xe4>)
 8001a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a9e:	4a36      	ldr	r2, [pc, #216]	; (8001b78 <SystemInit+0xe4>)
 8001aa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001aa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001aa8:	4b34      	ldr	r3, [pc, #208]	; (8001b7c <SystemInit+0xe8>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 030f 	and.w	r3, r3, #15
 8001ab0:	2b06      	cmp	r3, #6
 8001ab2:	d807      	bhi.n	8001ac4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ab4:	4b31      	ldr	r3, [pc, #196]	; (8001b7c <SystemInit+0xe8>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f023 030f 	bic.w	r3, r3, #15
 8001abc:	4a2f      	ldr	r2, [pc, #188]	; (8001b7c <SystemInit+0xe8>)
 8001abe:	f043 0307 	orr.w	r3, r3, #7
 8001ac2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001ac4:	4b2e      	ldr	r3, [pc, #184]	; (8001b80 <SystemInit+0xec>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a2d      	ldr	r2, [pc, #180]	; (8001b80 <SystemInit+0xec>)
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ad0:	4b2b      	ldr	r3, [pc, #172]	; (8001b80 <SystemInit+0xec>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001ad6:	4b2a      	ldr	r3, [pc, #168]	; (8001b80 <SystemInit+0xec>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	4929      	ldr	r1, [pc, #164]	; (8001b80 <SystemInit+0xec>)
 8001adc:	4b29      	ldr	r3, [pc, #164]	; (8001b84 <SystemInit+0xf0>)
 8001ade:	4013      	ands	r3, r2
 8001ae0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ae2:	4b26      	ldr	r3, [pc, #152]	; (8001b7c <SystemInit+0xe8>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0308 	and.w	r3, r3, #8
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d007      	beq.n	8001afe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001aee:	4b23      	ldr	r3, [pc, #140]	; (8001b7c <SystemInit+0xe8>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f023 030f 	bic.w	r3, r3, #15
 8001af6:	4a21      	ldr	r2, [pc, #132]	; (8001b7c <SystemInit+0xe8>)
 8001af8:	f043 0307 	orr.w	r3, r3, #7
 8001afc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001afe:	4b20      	ldr	r3, [pc, #128]	; (8001b80 <SystemInit+0xec>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001b04:	4b1e      	ldr	r3, [pc, #120]	; (8001b80 <SystemInit+0xec>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001b0a:	4b1d      	ldr	r3, [pc, #116]	; (8001b80 <SystemInit+0xec>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001b10:	4b1b      	ldr	r3, [pc, #108]	; (8001b80 <SystemInit+0xec>)
 8001b12:	4a1d      	ldr	r2, [pc, #116]	; (8001b88 <SystemInit+0xf4>)
 8001b14:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001b16:	4b1a      	ldr	r3, [pc, #104]	; (8001b80 <SystemInit+0xec>)
 8001b18:	4a1c      	ldr	r2, [pc, #112]	; (8001b8c <SystemInit+0xf8>)
 8001b1a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001b1c:	4b18      	ldr	r3, [pc, #96]	; (8001b80 <SystemInit+0xec>)
 8001b1e:	4a1c      	ldr	r2, [pc, #112]	; (8001b90 <SystemInit+0xfc>)
 8001b20:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001b22:	4b17      	ldr	r3, [pc, #92]	; (8001b80 <SystemInit+0xec>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001b28:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <SystemInit+0xec>)
 8001b2a:	4a19      	ldr	r2, [pc, #100]	; (8001b90 <SystemInit+0xfc>)
 8001b2c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001b2e:	4b14      	ldr	r3, [pc, #80]	; (8001b80 <SystemInit+0xec>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001b34:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <SystemInit+0xec>)
 8001b36:	4a16      	ldr	r2, [pc, #88]	; (8001b90 <SystemInit+0xfc>)
 8001b38:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001b3a:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <SystemInit+0xec>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b40:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <SystemInit+0xec>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a0e      	ldr	r2, [pc, #56]	; (8001b80 <SystemInit+0xec>)
 8001b46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b4a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <SystemInit+0xec>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001b52:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <SystemInit+0x100>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	4b10      	ldr	r3, [pc, #64]	; (8001b98 <SystemInit+0x104>)
 8001b58:	4013      	ands	r3, r2
 8001b5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b5e:	d202      	bcs.n	8001b66 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001b60:	4b0e      	ldr	r3, [pc, #56]	; (8001b9c <SystemInit+0x108>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001b66:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <SystemInit+0x10c>)
 8001b68:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001b6c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001b6e:	bf00      	nop
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	e000ed00 	.word	0xe000ed00
 8001b7c:	52002000 	.word	0x52002000
 8001b80:	58024400 	.word	0x58024400
 8001b84:	eaf6ed7f 	.word	0xeaf6ed7f
 8001b88:	02020200 	.word	0x02020200
 8001b8c:	01ff0000 	.word	0x01ff0000
 8001b90:	01010280 	.word	0x01010280
 8001b94:	5c001000 	.word	0x5c001000
 8001b98:	ffff0000 	.word	0xffff0000
 8001b9c:	51008108 	.word	0x51008108
 8001ba0:	52004000 	.word	0x52004000

08001ba4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001ba4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bdc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ba8:	f7ff ff74 	bl	8001a94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bac:	480c      	ldr	r0, [pc, #48]	; (8001be0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bae:	490d      	ldr	r1, [pc, #52]	; (8001be4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bb0:	4a0d      	ldr	r2, [pc, #52]	; (8001be8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bb4:	e002      	b.n	8001bbc <LoopCopyDataInit>

08001bb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bba:	3304      	adds	r3, #4

08001bbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bc0:	d3f9      	bcc.n	8001bb6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bc2:	4a0a      	ldr	r2, [pc, #40]	; (8001bec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bc4:	4c0a      	ldr	r4, [pc, #40]	; (8001bf0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bc8:	e001      	b.n	8001bce <LoopFillZerobss>

08001bca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bcc:	3204      	adds	r2, #4

08001bce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bd0:	d3fb      	bcc.n	8001bca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bd2:	f00b fb15 	bl	800d200 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bd6:	f7ff fb0d 	bl	80011f4 <main>
  bx  lr
 8001bda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bdc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001be0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001be4:	2400030c 	.word	0x2400030c
  ldr r2, =_sidata
 8001be8:	0800f504 	.word	0x0800f504
  ldr r2, =_sbss
 8001bec:	24000310 	.word	0x24000310
  ldr r4, =_ebss
 8001bf0:	24002310 	.word	0x24002310

08001bf4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bf4:	e7fe      	b.n	8001bf4 <ADC3_IRQHandler>
	...

08001bf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bfe:	2003      	movs	r0, #3
 8001c00:	f001 fa30 	bl	8003064 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c04:	f003 fd32 	bl	800566c <HAL_RCC_GetSysClockFreq>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <HAL_Init+0x68>)
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	0a1b      	lsrs	r3, r3, #8
 8001c10:	f003 030f 	and.w	r3, r3, #15
 8001c14:	4913      	ldr	r1, [pc, #76]	; (8001c64 <HAL_Init+0x6c>)
 8001c16:	5ccb      	ldrb	r3, [r1, r3]
 8001c18:	f003 031f 	and.w	r3, r3, #31
 8001c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c20:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c22:	4b0f      	ldr	r3, [pc, #60]	; (8001c60 <HAL_Init+0x68>)
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	f003 030f 	and.w	r3, r3, #15
 8001c2a:	4a0e      	ldr	r2, [pc, #56]	; (8001c64 <HAL_Init+0x6c>)
 8001c2c:	5cd3      	ldrb	r3, [r2, r3]
 8001c2e:	f003 031f 	and.w	r3, r3, #31
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	fa22 f303 	lsr.w	r3, r2, r3
 8001c38:	4a0b      	ldr	r2, [pc, #44]	; (8001c68 <HAL_Init+0x70>)
 8001c3a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c3c:	4a0b      	ldr	r2, [pc, #44]	; (8001c6c <HAL_Init+0x74>)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c42:	200f      	movs	r0, #15
 8001c44:	f000 f814 	bl	8001c70 <HAL_InitTick>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e002      	b.n	8001c58 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c52:	f7ff fd4b 	bl	80016ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	58024400 	.word	0x58024400
 8001c64:	0800f178 	.word	0x0800f178
 8001c68:	24000044 	.word	0x24000044
 8001c6c:	24000040 	.word	0x24000040

08001c70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001c78:	4b15      	ldr	r3, [pc, #84]	; (8001cd0 <HAL_InitTick+0x60>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d101      	bne.n	8001c84 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e021      	b.n	8001cc8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001c84:	4b13      	ldr	r3, [pc, #76]	; (8001cd4 <HAL_InitTick+0x64>)
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	4b11      	ldr	r3, [pc, #68]	; (8001cd0 <HAL_InitTick+0x60>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f001 fa15 	bl	80030ca <HAL_SYSTICK_Config>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e00e      	b.n	8001cc8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2b0f      	cmp	r3, #15
 8001cae:	d80a      	bhi.n	8001cc6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	6879      	ldr	r1, [r7, #4]
 8001cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb8:	f001 f9df 	bl	800307a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cbc:	4a06      	ldr	r2, [pc, #24]	; (8001cd8 <HAL_InitTick+0x68>)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	e000      	b.n	8001cc8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	2400004c 	.word	0x2400004c
 8001cd4:	24000040 	.word	0x24000040
 8001cd8:	24000048 	.word	0x24000048

08001cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ce0:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <HAL_IncTick+0x20>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <HAL_IncTick+0x24>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4413      	add	r3, r2
 8001cec:	4a04      	ldr	r2, [pc, #16]	; (8001d00 <HAL_IncTick+0x24>)
 8001cee:	6013      	str	r3, [r2, #0]
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	2400004c 	.word	0x2400004c
 8001d00:	240005b4 	.word	0x240005b4

08001d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  return uwTick;
 8001d08:	4b03      	ldr	r3, [pc, #12]	; (8001d18 <HAL_GetTick+0x14>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	240005b4 	.word	0x240005b4

08001d1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d24:	f7ff ffee 	bl	8001d04 <HAL_GetTick>
 8001d28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d34:	d005      	beq.n	8001d42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d36:	4b0a      	ldr	r3, [pc, #40]	; (8001d60 <HAL_Delay+0x44>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	4413      	add	r3, r2
 8001d40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d42:	bf00      	nop
 8001d44:	f7ff ffde 	bl	8001d04 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d8f7      	bhi.n	8001d44 <HAL_Delay+0x28>
  {
  }
}
 8001d54:	bf00      	nop
 8001d56:	bf00      	nop
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	2400004c 	.word	0x2400004c

08001d64 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001d68:	4b03      	ldr	r3, [pc, #12]	; (8001d78 <HAL_GetREVID+0x14>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	0c1b      	lsrs	r3, r3, #16
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	5c001000 	.word	0x5c001000

08001d7c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001d86:	4b07      	ldr	r3, [pc, #28]	; (8001da4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001d88:	685a      	ldr	r2, [r3, #4]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	401a      	ands	r2, r3
 8001d90:	4904      	ldr	r1, [pc, #16]	; (8001da4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	604b      	str	r3, [r1, #4]
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	58000400 	.word	0x58000400

08001da8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	431a      	orrs	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	609a      	str	r2, [r3, #8]
}
 8001dc2:	bf00      	nop
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
 8001dd6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	431a      	orrs	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	609a      	str	r2, [r3, #8]
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b087      	sub	sp, #28
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
 8001e1c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	3360      	adds	r3, #96	; 0x60
 8001e22:	461a      	mov	r2, r3
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4413      	add	r3, r2
 8001e2a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	430b      	orrs	r3, r1
 8001e3e:	431a      	orrs	r2, r3
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001e44:	bf00      	nop
 8001e46:	371c      	adds	r7, #28
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	f003 031f 	and.w	r3, r3, #31
 8001e6a:	6879      	ldr	r1, [r7, #4]
 8001e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e70:	431a      	orrs	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	611a      	str	r2, [r3, #16]
}
 8001e76:	bf00      	nop
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001e82:	b480      	push	{r7}
 8001e84:	b087      	sub	sp, #28
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	60f8      	str	r0, [r7, #12]
 8001e8a:	60b9      	str	r1, [r7, #8]
 8001e8c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	3360      	adds	r3, #96	; 0x60
 8001e92:	461a      	mov	r2, r3
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	601a      	str	r2, [r3, #0]
  }
}
 8001eac:	bf00      	nop
 8001eae:	371c      	adds	r7, #28
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b087      	sub	sp, #28
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	3330      	adds	r3, #48	; 0x30
 8001ec8:	461a      	mov	r2, r3
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	0a1b      	lsrs	r3, r3, #8
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	f003 030c 	and.w	r3, r3, #12
 8001ed4:	4413      	add	r3, r2
 8001ed6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	f003 031f 	and.w	r3, r3, #31
 8001ee2:	211f      	movs	r1, #31
 8001ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	401a      	ands	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	0e9b      	lsrs	r3, r3, #26
 8001ef0:	f003 011f 	and.w	r1, r3, #31
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	f003 031f 	and.w	r3, r3, #31
 8001efa:	fa01 f303 	lsl.w	r3, r1, r3
 8001efe:	431a      	orrs	r2, r3
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f04:	bf00      	nop
 8001f06:	371c      	adds	r7, #28
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b087      	sub	sp, #28
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	3314      	adds	r3, #20
 8001f20:	461a      	mov	r2, r3
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	0e5b      	lsrs	r3, r3, #25
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	4413      	add	r3, r2
 8001f2e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	0d1b      	lsrs	r3, r3, #20
 8001f38:	f003 031f 	and.w	r3, r3, #31
 8001f3c:	2107      	movs	r1, #7
 8001f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f42:	43db      	mvns	r3, r3
 8001f44:	401a      	ands	r2, r3
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	0d1b      	lsrs	r3, r3, #20
 8001f4a:	f003 031f 	and.w	r3, r3, #31
 8001f4e:	6879      	ldr	r1, [r7, #4]
 8001f50:	fa01 f303 	lsl.w	r3, r1, r3
 8001f54:	431a      	orrs	r2, r3
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f5a:	bf00      	nop
 8001f5c:	371c      	adds	r7, #28
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
	...

08001f68 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f80:	43db      	mvns	r3, r3
 8001f82:	401a      	ands	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f003 0318 	and.w	r3, r3, #24
 8001f8a:	4908      	ldr	r1, [pc, #32]	; (8001fac <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f8c:	40d9      	lsrs	r1, r3
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	400b      	ands	r3, r1
 8001f92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f96:	431a      	orrs	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001f9e:	bf00      	nop
 8001fa0:	3714      	adds	r7, #20
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	000fffff 	.word	0x000fffff

08001fb0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	4b04      	ldr	r3, [pc, #16]	; (8001fd0 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	6093      	str	r3, [r2, #8]
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	5fffffc0 	.word	0x5fffffc0

08001fd4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fe4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fe8:	d101      	bne.n	8001fee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001fea:	2301      	movs	r3, #1
 8001fec:	e000      	b.n	8001ff0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	4b05      	ldr	r3, [pc, #20]	; (8002020 <LL_ADC_EnableInternalRegulator+0x24>)
 800200a:	4013      	ands	r3, r2
 800200c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	6fffffc0 	.word	0x6fffffc0

08002024 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002034:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002038:	d101      	bne.n	800203e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800203a:	2301      	movs	r3, #1
 800203c:	e000      	b.n	8002040 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	2b01      	cmp	r3, #1
 800205e:	d101      	bne.n	8002064 <LL_ADC_IsEnabled+0x18>
 8002060:	2301      	movs	r3, #1
 8002062:	e000      	b.n	8002066 <LL_ADC_IsEnabled+0x1a>
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr

08002072 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002072:	b480      	push	{r7}
 8002074:	b083      	sub	sp, #12
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f003 0304 	and.w	r3, r3, #4
 8002082:	2b04      	cmp	r3, #4
 8002084:	d101      	bne.n	800208a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002086:	2301      	movs	r3, #1
 8002088:	e000      	b.n	800208c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f003 0308 	and.w	r3, r3, #8
 80020a8:	2b08      	cmp	r3, #8
 80020aa:	d101      	bne.n	80020b0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80020ac:	2301      	movs	r3, #1
 80020ae:	e000      	b.n	80020b2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
	...

080020c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020c0:	b590      	push	{r4, r7, lr}
 80020c2:	b089      	sub	sp, #36	; 0x24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020c8:	2300      	movs	r3, #0
 80020ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e18f      	b.n	80023fa <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d109      	bne.n	80020fc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f7ff fb19 	bl	8001720 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff ff67 	bl	8001fd4 <LL_ADC_IsDeepPowerDownEnabled>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d004      	beq.n	8002116 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff ff4d 	bl	8001fb0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff ff82 	bl	8002024 <LL_ADC_IsInternalRegulatorEnabled>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d114      	bne.n	8002150 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff ff66 	bl	8001ffc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002130:	4b87      	ldr	r3, [pc, #540]	; (8002350 <HAL_ADC_Init+0x290>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	099b      	lsrs	r3, r3, #6
 8002136:	4a87      	ldr	r2, [pc, #540]	; (8002354 <HAL_ADC_Init+0x294>)
 8002138:	fba2 2303 	umull	r2, r3, r2, r3
 800213c:	099b      	lsrs	r3, r3, #6
 800213e:	3301      	adds	r3, #1
 8002140:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002142:	e002      	b.n	800214a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	3b01      	subs	r3, #1
 8002148:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1f9      	bne.n	8002144 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff ff65 	bl	8002024 <LL_ADC_IsInternalRegulatorEnabled>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d10d      	bne.n	800217c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002164:	f043 0210 	orr.w	r2, r3, #16
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002170:	f043 0201 	orr.w	r2, r3, #1
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff ff76 	bl	8002072 <LL_ADC_REG_IsConversionOngoing>
 8002186:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800218c:	f003 0310 	and.w	r3, r3, #16
 8002190:	2b00      	cmp	r3, #0
 8002192:	f040 8129 	bne.w	80023e8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	2b00      	cmp	r3, #0
 800219a:	f040 8125 	bne.w	80023e8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80021a6:	f043 0202 	orr.w	r2, r3, #2
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff ff4a 	bl	800204c <LL_ADC_IsEnabled>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d136      	bne.n	800222c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a65      	ldr	r2, [pc, #404]	; (8002358 <HAL_ADC_Init+0x298>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d004      	beq.n	80021d2 <HAL_ADC_Init+0x112>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a63      	ldr	r2, [pc, #396]	; (800235c <HAL_ADC_Init+0x29c>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d10e      	bne.n	80021f0 <HAL_ADC_Init+0x130>
 80021d2:	4861      	ldr	r0, [pc, #388]	; (8002358 <HAL_ADC_Init+0x298>)
 80021d4:	f7ff ff3a 	bl	800204c <LL_ADC_IsEnabled>
 80021d8:	4604      	mov	r4, r0
 80021da:	4860      	ldr	r0, [pc, #384]	; (800235c <HAL_ADC_Init+0x29c>)
 80021dc:	f7ff ff36 	bl	800204c <LL_ADC_IsEnabled>
 80021e0:	4603      	mov	r3, r0
 80021e2:	4323      	orrs	r3, r4
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	bf0c      	ite	eq
 80021e8:	2301      	moveq	r3, #1
 80021ea:	2300      	movne	r3, #0
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	e008      	b.n	8002202 <HAL_ADC_Init+0x142>
 80021f0:	485b      	ldr	r0, [pc, #364]	; (8002360 <HAL_ADC_Init+0x2a0>)
 80021f2:	f7ff ff2b 	bl	800204c <LL_ADC_IsEnabled>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	bf0c      	ite	eq
 80021fc:	2301      	moveq	r3, #1
 80021fe:	2300      	movne	r3, #0
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d012      	beq.n	800222c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a53      	ldr	r2, [pc, #332]	; (8002358 <HAL_ADC_Init+0x298>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d004      	beq.n	800221a <HAL_ADC_Init+0x15a>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a51      	ldr	r2, [pc, #324]	; (800235c <HAL_ADC_Init+0x29c>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d101      	bne.n	800221e <HAL_ADC_Init+0x15e>
 800221a:	4a52      	ldr	r2, [pc, #328]	; (8002364 <HAL_ADC_Init+0x2a4>)
 800221c:	e000      	b.n	8002220 <HAL_ADC_Init+0x160>
 800221e:	4a52      	ldr	r2, [pc, #328]	; (8002368 <HAL_ADC_Init+0x2a8>)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	4619      	mov	r1, r3
 8002226:	4610      	mov	r0, r2
 8002228:	f7ff fdbe 	bl	8001da8 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800222c:	f7ff fd9a 	bl	8001d64 <HAL_GetREVID>
 8002230:	4603      	mov	r3, r0
 8002232:	f241 0203 	movw	r2, #4099	; 0x1003
 8002236:	4293      	cmp	r3, r2
 8002238:	d914      	bls.n	8002264 <HAL_ADC_Init+0x1a4>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	2b10      	cmp	r3, #16
 8002240:	d110      	bne.n	8002264 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	7d5b      	ldrb	r3, [r3, #21]
 8002246:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800224c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002252:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	7f1b      	ldrb	r3, [r3, #28]
 8002258:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800225a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800225c:	f043 030c 	orr.w	r3, r3, #12
 8002260:	61bb      	str	r3, [r7, #24]
 8002262:	e00d      	b.n	8002280 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	7d5b      	ldrb	r3, [r3, #21]
 8002268:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800226e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002274:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	7f1b      	ldrb	r3, [r3, #28]
 800227a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800227c:	4313      	orrs	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	7f1b      	ldrb	r3, [r3, #28]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d106      	bne.n	8002296 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	3b01      	subs	r3, #1
 800228e:	045b      	lsls	r3, r3, #17
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4313      	orrs	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229a:	2b00      	cmp	r3, #0
 800229c:	d009      	beq.n	80022b2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022aa:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68da      	ldr	r2, [r3, #12]
 80022b8:	4b2c      	ldr	r3, [pc, #176]	; (800236c <HAL_ADC_Init+0x2ac>)
 80022ba:	4013      	ands	r3, r2
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6812      	ldr	r2, [r2, #0]
 80022c0:	69b9      	ldr	r1, [r7, #24]
 80022c2:	430b      	orrs	r3, r1
 80022c4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff fed1 	bl	8002072 <LL_ADC_REG_IsConversionOngoing>
 80022d0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff fede 	bl	8002098 <LL_ADC_INJ_IsConversionOngoing>
 80022dc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d15f      	bne.n	80023a4 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d15c      	bne.n	80023a4 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	7d1b      	ldrb	r3, [r3, #20]
 80022ee:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80022f4:	4313      	orrs	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68da      	ldr	r2, [r3, #12]
 80022fe:	4b1c      	ldr	r3, [pc, #112]	; (8002370 <HAL_ADC_Init+0x2b0>)
 8002300:	4013      	ands	r3, r2
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	6812      	ldr	r2, [r2, #0]
 8002306:	69b9      	ldr	r1, [r7, #24]
 8002308:	430b      	orrs	r3, r1
 800230a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002312:	2b01      	cmp	r3, #1
 8002314:	d130      	bne.n	8002378 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	691a      	ldr	r2, [r3, #16]
 8002322:	4b14      	ldr	r3, [pc, #80]	; (8002374 <HAL_ADC_Init+0x2b4>)
 8002324:	4013      	ands	r3, r2
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800232a:	3a01      	subs	r2, #1
 800232c:	0411      	lsls	r1, r2, #16
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002332:	4311      	orrs	r1, r2
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002338:	4311      	orrs	r1, r2
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800233e:	430a      	orrs	r2, r1
 8002340:	431a      	orrs	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f042 0201 	orr.w	r2, r2, #1
 800234a:	611a      	str	r2, [r3, #16]
 800234c:	e01c      	b.n	8002388 <HAL_ADC_Init+0x2c8>
 800234e:	bf00      	nop
 8002350:	24000040 	.word	0x24000040
 8002354:	053e2d63 	.word	0x053e2d63
 8002358:	40022000 	.word	0x40022000
 800235c:	40022100 	.word	0x40022100
 8002360:	58026000 	.word	0x58026000
 8002364:	40022300 	.word	0x40022300
 8002368:	58026300 	.word	0x58026300
 800236c:	fff0c003 	.word	0xfff0c003
 8002370:	ffffbffc 	.word	0xffffbffc
 8002374:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	691a      	ldr	r2, [r3, #16]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f022 0201 	bic.w	r2, r2, #1
 8002386:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	430a      	orrs	r2, r1
 800239c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 fb80 	bl	8002aa4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d10c      	bne.n	80023c6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	f023 010f 	bic.w	r1, r3, #15
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	1e5a      	subs	r2, r3, #1
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	631a      	str	r2, [r3, #48]	; 0x30
 80023c4:	e007      	b.n	80023d6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 020f 	bic.w	r2, r2, #15
 80023d4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023da:	f023 0303 	bic.w	r3, r3, #3
 80023de:	f043 0201 	orr.w	r2, r3, #1
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	655a      	str	r2, [r3, #84]	; 0x54
 80023e6:	e007      	b.n	80023f8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ec:	f043 0210 	orr.w	r2, r3, #16
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80023f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3724      	adds	r7, #36	; 0x24
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd90      	pop	{r4, r7, pc}
 8002402:	bf00      	nop

08002404 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002404:	b590      	push	{r4, r7, lr}
 8002406:	b0a1      	sub	sp, #132	; 0x84
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800240e:	2300      	movs	r3, #0
 8002410:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002414:	2300      	movs	r3, #0
 8002416:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	4a9d      	ldr	r2, [pc, #628]	; (8002694 <HAL_ADC_ConfigChannel+0x290>)
 800241e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002426:	2b01      	cmp	r3, #1
 8002428:	d101      	bne.n	800242e <HAL_ADC_ConfigChannel+0x2a>
 800242a:	2302      	movs	r3, #2
 800242c:	e321      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x66e>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff fe19 	bl	8002072 <LL_ADC_REG_IsConversionOngoing>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	f040 8306 	bne.w	8002a54 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002450:	2b00      	cmp	r3, #0
 8002452:	d108      	bne.n	8002466 <HAL_ADC_ConfigChannel+0x62>
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	0e9b      	lsrs	r3, r3, #26
 800245a:	f003 031f 	and.w	r3, r3, #31
 800245e:	2201      	movs	r2, #1
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	e016      	b.n	8002494 <HAL_ADC_ConfigChannel+0x90>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800246e:	fa93 f3a3 	rbit	r3, r3
 8002472:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002474:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002476:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002478:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800247e:	2320      	movs	r3, #32
 8002480:	e003      	b.n	800248a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002482:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002484:	fab3 f383 	clz	r3, r3
 8002488:	b2db      	uxtb	r3, r3
 800248a:	f003 031f 	and.w	r3, r3, #31
 800248e:	2201      	movs	r2, #1
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6812      	ldr	r2, [r2, #0]
 8002498:	69d1      	ldr	r1, [r2, #28]
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	6812      	ldr	r2, [r2, #0]
 800249e:	430b      	orrs	r3, r1
 80024a0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6818      	ldr	r0, [r3, #0]
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	6859      	ldr	r1, [r3, #4]
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	461a      	mov	r2, r3
 80024b0:	f7ff fd02 	bl	8001eb8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff fdda 	bl	8002072 <LL_ADC_REG_IsConversionOngoing>
 80024be:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff fde7 	bl	8002098 <LL_ADC_INJ_IsConversionOngoing>
 80024ca:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f040 80b3 	bne.w	800263a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f040 80af 	bne.w	800263a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6818      	ldr	r0, [r3, #0]
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	6819      	ldr	r1, [r3, #0]
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	461a      	mov	r2, r3
 80024ea:	f7ff fd11 	bl	8001f10 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80024ee:	4b6a      	ldr	r3, [pc, #424]	; (8002698 <HAL_ADC_ConfigChannel+0x294>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80024f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024fa:	d10b      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x110>
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	695a      	ldr	r2, [r3, #20]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	089b      	lsrs	r3, r3, #2
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	e01d      	b.n	8002550 <HAL_ADC_ConfigChannel+0x14c>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	f003 0310 	and.w	r3, r3, #16
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10b      	bne.n	800253a <HAL_ADC_ConfigChannel+0x136>
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	695a      	ldr	r2, [r3, #20]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	089b      	lsrs	r3, r3, #2
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	e00a      	b.n	8002550 <HAL_ADC_ConfigChannel+0x14c>
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	695a      	ldr	r2, [r3, #20]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	089b      	lsrs	r3, r3, #2
 8002546:	f003 0304 	and.w	r3, r3, #4
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	2b04      	cmp	r3, #4
 8002558:	d027      	beq.n	80025aa <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6818      	ldr	r0, [r3, #0]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	6919      	ldr	r1, [r3, #16]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002568:	f7ff fc52 	bl	8001e10 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6818      	ldr	r0, [r3, #0]
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	6919      	ldr	r1, [r3, #16]
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	7e5b      	ldrb	r3, [r3, #25]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d102      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x17e>
 800257c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002580:	e000      	b.n	8002584 <HAL_ADC_ConfigChannel+0x180>
 8002582:	2300      	movs	r3, #0
 8002584:	461a      	mov	r2, r3
 8002586:	f7ff fc7c 	bl	8001e82 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6818      	ldr	r0, [r3, #0]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	6919      	ldr	r1, [r3, #16]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	7e1b      	ldrb	r3, [r3, #24]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d102      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x19c>
 800259a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800259e:	e000      	b.n	80025a2 <HAL_ADC_ConfigChannel+0x19e>
 80025a0:	2300      	movs	r3, #0
 80025a2:	461a      	mov	r2, r3
 80025a4:	f7ff fc54 	bl	8001e50 <LL_ADC_SetDataRightShift>
 80025a8:	e047      	b.n	800263a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	069b      	lsls	r3, r3, #26
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d107      	bne.n	80025ce <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80025cc:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	069b      	lsls	r3, r3, #26
 80025de:	429a      	cmp	r2, r3
 80025e0:	d107      	bne.n	80025f2 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80025f0:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	069b      	lsls	r3, r3, #26
 8002602:	429a      	cmp	r2, r3
 8002604:	d107      	bne.n	8002616 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002614:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800261c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	069b      	lsls	r3, r3, #26
 8002626:	429a      	cmp	r2, r3
 8002628:	d107      	bne.n	800263a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002638:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff fd04 	bl	800204c <LL_ADC_IsEnabled>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	f040 820d 	bne.w	8002a66 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6818      	ldr	r0, [r3, #0]
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	6819      	ldr	r1, [r3, #0]
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	461a      	mov	r2, r3
 800265a:	f7ff fc85 	bl	8001f68 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	4a0c      	ldr	r2, [pc, #48]	; (8002694 <HAL_ADC_ConfigChannel+0x290>)
 8002664:	4293      	cmp	r3, r2
 8002666:	f040 8133 	bne.w	80028d0 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002676:	2b00      	cmp	r3, #0
 8002678:	d110      	bne.n	800269c <HAL_ADC_ConfigChannel+0x298>
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	0e9b      	lsrs	r3, r3, #26
 8002680:	3301      	adds	r3, #1
 8002682:	f003 031f 	and.w	r3, r3, #31
 8002686:	2b09      	cmp	r3, #9
 8002688:	bf94      	ite	ls
 800268a:	2301      	movls	r3, #1
 800268c:	2300      	movhi	r3, #0
 800268e:	b2db      	uxtb	r3, r3
 8002690:	e01e      	b.n	80026d0 <HAL_ADC_ConfigChannel+0x2cc>
 8002692:	bf00      	nop
 8002694:	47ff0000 	.word	0x47ff0000
 8002698:	5c001000 	.word	0x5c001000
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026a4:	fa93 f3a3 	rbit	r3, r3
 80026a8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80026aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80026ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d101      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80026b4:	2320      	movs	r3, #32
 80026b6:	e003      	b.n	80026c0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80026b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026ba:	fab3 f383 	clz	r3, r3
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	3301      	adds	r3, #1
 80026c2:	f003 031f 	and.w	r3, r3, #31
 80026c6:	2b09      	cmp	r3, #9
 80026c8:	bf94      	ite	ls
 80026ca:	2301      	movls	r3, #1
 80026cc:	2300      	movhi	r3, #0
 80026ce:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d079      	beq.n	80027c8 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d107      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x2ec>
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	0e9b      	lsrs	r3, r3, #26
 80026e6:	3301      	adds	r3, #1
 80026e8:	069b      	lsls	r3, r3, #26
 80026ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026ee:	e015      	b.n	800271c <HAL_ADC_ConfigChannel+0x318>
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026f8:	fa93 f3a3 	rbit	r3, r3
 80026fc:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80026fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002700:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002702:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002708:	2320      	movs	r3, #32
 800270a:	e003      	b.n	8002714 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800270c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800270e:	fab3 f383 	clz	r3, r3
 8002712:	b2db      	uxtb	r3, r3
 8002714:	3301      	adds	r3, #1
 8002716:	069b      	lsls	r3, r3, #26
 8002718:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002724:	2b00      	cmp	r3, #0
 8002726:	d109      	bne.n	800273c <HAL_ADC_ConfigChannel+0x338>
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	0e9b      	lsrs	r3, r3, #26
 800272e:	3301      	adds	r3, #1
 8002730:	f003 031f 	and.w	r3, r3, #31
 8002734:	2101      	movs	r1, #1
 8002736:	fa01 f303 	lsl.w	r3, r1, r3
 800273a:	e017      	b.n	800276c <HAL_ADC_ConfigChannel+0x368>
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002744:	fa93 f3a3 	rbit	r3, r3
 8002748:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800274a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800274c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800274e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002754:	2320      	movs	r3, #32
 8002756:	e003      	b.n	8002760 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002758:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800275a:	fab3 f383 	clz	r3, r3
 800275e:	b2db      	uxtb	r3, r3
 8002760:	3301      	adds	r3, #1
 8002762:	f003 031f 	and.w	r3, r3, #31
 8002766:	2101      	movs	r1, #1
 8002768:	fa01 f303 	lsl.w	r3, r1, r3
 800276c:	ea42 0103 	orr.w	r1, r2, r3
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002778:	2b00      	cmp	r3, #0
 800277a:	d10a      	bne.n	8002792 <HAL_ADC_ConfigChannel+0x38e>
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	0e9b      	lsrs	r3, r3, #26
 8002782:	3301      	adds	r3, #1
 8002784:	f003 021f 	and.w	r2, r3, #31
 8002788:	4613      	mov	r3, r2
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	4413      	add	r3, r2
 800278e:	051b      	lsls	r3, r3, #20
 8002790:	e018      	b.n	80027c4 <HAL_ADC_ConfigChannel+0x3c0>
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800279a:	fa93 f3a3 	rbit	r3, r3
 800279e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80027a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80027a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80027aa:	2320      	movs	r3, #32
 80027ac:	e003      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80027ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b0:	fab3 f383 	clz	r3, r3
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	3301      	adds	r3, #1
 80027b8:	f003 021f 	and.w	r2, r3, #31
 80027bc:	4613      	mov	r3, r2
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	4413      	add	r3, r2
 80027c2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027c4:	430b      	orrs	r3, r1
 80027c6:	e07e      	b.n	80028c6 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d107      	bne.n	80027e4 <HAL_ADC_ConfigChannel+0x3e0>
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	0e9b      	lsrs	r3, r3, #26
 80027da:	3301      	adds	r3, #1
 80027dc:	069b      	lsls	r3, r3, #26
 80027de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027e2:	e015      	b.n	8002810 <HAL_ADC_ConfigChannel+0x40c>
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ec:	fa93 f3a3 	rbit	r3, r3
 80027f0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80027f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80027fc:	2320      	movs	r3, #32
 80027fe:	e003      	b.n	8002808 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002802:	fab3 f383 	clz	r3, r3
 8002806:	b2db      	uxtb	r3, r3
 8002808:	3301      	adds	r3, #1
 800280a:	069b      	lsls	r3, r3, #26
 800280c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002818:	2b00      	cmp	r3, #0
 800281a:	d109      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x42c>
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	0e9b      	lsrs	r3, r3, #26
 8002822:	3301      	adds	r3, #1
 8002824:	f003 031f 	and.w	r3, r3, #31
 8002828:	2101      	movs	r1, #1
 800282a:	fa01 f303 	lsl.w	r3, r1, r3
 800282e:	e017      	b.n	8002860 <HAL_ADC_ConfigChannel+0x45c>
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	fa93 f3a3 	rbit	r3, r3
 800283c:	61bb      	str	r3, [r7, #24]
  return result;
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002842:	6a3b      	ldr	r3, [r7, #32]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d101      	bne.n	800284c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002848:	2320      	movs	r3, #32
 800284a:	e003      	b.n	8002854 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 800284c:	6a3b      	ldr	r3, [r7, #32]
 800284e:	fab3 f383 	clz	r3, r3
 8002852:	b2db      	uxtb	r3, r3
 8002854:	3301      	adds	r3, #1
 8002856:	f003 031f 	and.w	r3, r3, #31
 800285a:	2101      	movs	r1, #1
 800285c:	fa01 f303 	lsl.w	r3, r1, r3
 8002860:	ea42 0103 	orr.w	r1, r2, r3
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10d      	bne.n	800288c <HAL_ADC_ConfigChannel+0x488>
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	0e9b      	lsrs	r3, r3, #26
 8002876:	3301      	adds	r3, #1
 8002878:	f003 021f 	and.w	r2, r3, #31
 800287c:	4613      	mov	r3, r2
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	4413      	add	r3, r2
 8002882:	3b1e      	subs	r3, #30
 8002884:	051b      	lsls	r3, r3, #20
 8002886:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800288a:	e01b      	b.n	80028c4 <HAL_ADC_ConfigChannel+0x4c0>
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	fa93 f3a3 	rbit	r3, r3
 8002898:	60fb      	str	r3, [r7, #12]
  return result;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80028a4:	2320      	movs	r3, #32
 80028a6:	e003      	b.n	80028b0 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	fab3 f383 	clz	r3, r3
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	3301      	adds	r3, #1
 80028b2:	f003 021f 	and.w	r2, r3, #31
 80028b6:	4613      	mov	r3, r2
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	4413      	add	r3, r2
 80028bc:	3b1e      	subs	r3, #30
 80028be:	051b      	lsls	r3, r3, #20
 80028c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028c4:	430b      	orrs	r3, r1
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	6892      	ldr	r2, [r2, #8]
 80028ca:	4619      	mov	r1, r3
 80028cc:	f7ff fb20 	bl	8001f10 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f280 80c6 	bge.w	8002a66 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a67      	ldr	r2, [pc, #412]	; (8002a7c <HAL_ADC_ConfigChannel+0x678>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d004      	beq.n	80028ee <HAL_ADC_ConfigChannel+0x4ea>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a65      	ldr	r2, [pc, #404]	; (8002a80 <HAL_ADC_ConfigChannel+0x67c>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d101      	bne.n	80028f2 <HAL_ADC_ConfigChannel+0x4ee>
 80028ee:	4b65      	ldr	r3, [pc, #404]	; (8002a84 <HAL_ADC_ConfigChannel+0x680>)
 80028f0:	e000      	b.n	80028f4 <HAL_ADC_ConfigChannel+0x4f0>
 80028f2:	4b65      	ldr	r3, [pc, #404]	; (8002a88 <HAL_ADC_ConfigChannel+0x684>)
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff fa7d 	bl	8001df4 <LL_ADC_GetCommonPathInternalCh>
 80028fa:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a5e      	ldr	r2, [pc, #376]	; (8002a7c <HAL_ADC_ConfigChannel+0x678>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d004      	beq.n	8002910 <HAL_ADC_ConfigChannel+0x50c>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a5d      	ldr	r2, [pc, #372]	; (8002a80 <HAL_ADC_ConfigChannel+0x67c>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d10e      	bne.n	800292e <HAL_ADC_ConfigChannel+0x52a>
 8002910:	485a      	ldr	r0, [pc, #360]	; (8002a7c <HAL_ADC_ConfigChannel+0x678>)
 8002912:	f7ff fb9b 	bl	800204c <LL_ADC_IsEnabled>
 8002916:	4604      	mov	r4, r0
 8002918:	4859      	ldr	r0, [pc, #356]	; (8002a80 <HAL_ADC_ConfigChannel+0x67c>)
 800291a:	f7ff fb97 	bl	800204c <LL_ADC_IsEnabled>
 800291e:	4603      	mov	r3, r0
 8002920:	4323      	orrs	r3, r4
 8002922:	2b00      	cmp	r3, #0
 8002924:	bf0c      	ite	eq
 8002926:	2301      	moveq	r3, #1
 8002928:	2300      	movne	r3, #0
 800292a:	b2db      	uxtb	r3, r3
 800292c:	e008      	b.n	8002940 <HAL_ADC_ConfigChannel+0x53c>
 800292e:	4857      	ldr	r0, [pc, #348]	; (8002a8c <HAL_ADC_ConfigChannel+0x688>)
 8002930:	f7ff fb8c 	bl	800204c <LL_ADC_IsEnabled>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	bf0c      	ite	eq
 800293a:	2301      	moveq	r3, #1
 800293c:	2300      	movne	r3, #0
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2b00      	cmp	r3, #0
 8002942:	d07d      	beq.n	8002a40 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a51      	ldr	r2, [pc, #324]	; (8002a90 <HAL_ADC_ConfigChannel+0x68c>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d130      	bne.n	80029b0 <HAL_ADC_ConfigChannel+0x5ac>
 800294e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002950:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d12b      	bne.n	80029b0 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a4b      	ldr	r2, [pc, #300]	; (8002a8c <HAL_ADC_ConfigChannel+0x688>)
 800295e:	4293      	cmp	r3, r2
 8002960:	f040 8081 	bne.w	8002a66 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a44      	ldr	r2, [pc, #272]	; (8002a7c <HAL_ADC_ConfigChannel+0x678>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d004      	beq.n	8002978 <HAL_ADC_ConfigChannel+0x574>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a43      	ldr	r2, [pc, #268]	; (8002a80 <HAL_ADC_ConfigChannel+0x67c>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d101      	bne.n	800297c <HAL_ADC_ConfigChannel+0x578>
 8002978:	4a42      	ldr	r2, [pc, #264]	; (8002a84 <HAL_ADC_ConfigChannel+0x680>)
 800297a:	e000      	b.n	800297e <HAL_ADC_ConfigChannel+0x57a>
 800297c:	4a42      	ldr	r2, [pc, #264]	; (8002a88 <HAL_ADC_ConfigChannel+0x684>)
 800297e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002980:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002984:	4619      	mov	r1, r3
 8002986:	4610      	mov	r0, r2
 8002988:	f7ff fa21 	bl	8001dce <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800298c:	4b41      	ldr	r3, [pc, #260]	; (8002a94 <HAL_ADC_ConfigChannel+0x690>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	099b      	lsrs	r3, r3, #6
 8002992:	4a41      	ldr	r2, [pc, #260]	; (8002a98 <HAL_ADC_ConfigChannel+0x694>)
 8002994:	fba2 2303 	umull	r2, r3, r2, r3
 8002998:	099b      	lsrs	r3, r3, #6
 800299a:	3301      	adds	r3, #1
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80029a0:	e002      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	3b01      	subs	r3, #1
 80029a6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f9      	bne.n	80029a2 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029ae:	e05a      	b.n	8002a66 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a39      	ldr	r2, [pc, #228]	; (8002a9c <HAL_ADC_ConfigChannel+0x698>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d11e      	bne.n	80029f8 <HAL_ADC_ConfigChannel+0x5f4>
 80029ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d119      	bne.n	80029f8 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a30      	ldr	r2, [pc, #192]	; (8002a8c <HAL_ADC_ConfigChannel+0x688>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d14b      	bne.n	8002a66 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a2a      	ldr	r2, [pc, #168]	; (8002a7c <HAL_ADC_ConfigChannel+0x678>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d004      	beq.n	80029e2 <HAL_ADC_ConfigChannel+0x5de>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a28      	ldr	r2, [pc, #160]	; (8002a80 <HAL_ADC_ConfigChannel+0x67c>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d101      	bne.n	80029e6 <HAL_ADC_ConfigChannel+0x5e2>
 80029e2:	4a28      	ldr	r2, [pc, #160]	; (8002a84 <HAL_ADC_ConfigChannel+0x680>)
 80029e4:	e000      	b.n	80029e8 <HAL_ADC_ConfigChannel+0x5e4>
 80029e6:	4a28      	ldr	r2, [pc, #160]	; (8002a88 <HAL_ADC_ConfigChannel+0x684>)
 80029e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029ee:	4619      	mov	r1, r3
 80029f0:	4610      	mov	r0, r2
 80029f2:	f7ff f9ec 	bl	8001dce <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029f6:	e036      	b.n	8002a66 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a28      	ldr	r2, [pc, #160]	; (8002aa0 <HAL_ADC_ConfigChannel+0x69c>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d131      	bne.n	8002a66 <HAL_ADC_ConfigChannel+0x662>
 8002a02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d12c      	bne.n	8002a66 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a1e      	ldr	r2, [pc, #120]	; (8002a8c <HAL_ADC_ConfigChannel+0x688>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d127      	bne.n	8002a66 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a18      	ldr	r2, [pc, #96]	; (8002a7c <HAL_ADC_ConfigChannel+0x678>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d004      	beq.n	8002a2a <HAL_ADC_ConfigChannel+0x626>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a16      	ldr	r2, [pc, #88]	; (8002a80 <HAL_ADC_ConfigChannel+0x67c>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d101      	bne.n	8002a2e <HAL_ADC_ConfigChannel+0x62a>
 8002a2a:	4a16      	ldr	r2, [pc, #88]	; (8002a84 <HAL_ADC_ConfigChannel+0x680>)
 8002a2c:	e000      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x62c>
 8002a2e:	4a16      	ldr	r2, [pc, #88]	; (8002a88 <HAL_ADC_ConfigChannel+0x684>)
 8002a30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a32:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a36:	4619      	mov	r1, r3
 8002a38:	4610      	mov	r0, r2
 8002a3a:	f7ff f9c8 	bl	8001dce <LL_ADC_SetCommonPathInternalCh>
 8002a3e:	e012      	b.n	8002a66 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a44:	f043 0220 	orr.w	r2, r3, #32
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002a52:	e008      	b.n	8002a66 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a58:	f043 0220 	orr.w	r2, r3, #32
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a6e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3784      	adds	r7, #132	; 0x84
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd90      	pop	{r4, r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40022000 	.word	0x40022000
 8002a80:	40022100 	.word	0x40022100
 8002a84:	40022300 	.word	0x40022300
 8002a88:	58026300 	.word	0x58026300
 8002a8c:	58026000 	.word	0x58026000
 8002a90:	cb840000 	.word	0xcb840000
 8002a94:	24000040 	.word	0x24000040
 8002a98:	053e2d63 	.word	0x053e2d63
 8002a9c:	c7520000 	.word	0xc7520000
 8002aa0:	cfb80000 	.word	0xcfb80000

08002aa4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a7a      	ldr	r2, [pc, #488]	; (8002c9c <ADC_ConfigureBoostMode+0x1f8>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d004      	beq.n	8002ac0 <ADC_ConfigureBoostMode+0x1c>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a79      	ldr	r2, [pc, #484]	; (8002ca0 <ADC_ConfigureBoostMode+0x1fc>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d109      	bne.n	8002ad4 <ADC_ConfigureBoostMode+0x30>
 8002ac0:	4b78      	ldr	r3, [pc, #480]	; (8002ca4 <ADC_ConfigureBoostMode+0x200>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	bf14      	ite	ne
 8002acc:	2301      	movne	r3, #1
 8002ace:	2300      	moveq	r3, #0
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	e008      	b.n	8002ae6 <ADC_ConfigureBoostMode+0x42>
 8002ad4:	4b74      	ldr	r3, [pc, #464]	; (8002ca8 <ADC_ConfigureBoostMode+0x204>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	bf14      	ite	ne
 8002ae0:	2301      	movne	r3, #1
 8002ae2:	2300      	moveq	r3, #0
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d01c      	beq.n	8002b24 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002aea:	f002 ff39 	bl	8005960 <HAL_RCC_GetHCLKFreq>
 8002aee:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002af8:	d010      	beq.n	8002b1c <ADC_ConfigureBoostMode+0x78>
 8002afa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002afe:	d873      	bhi.n	8002be8 <ADC_ConfigureBoostMode+0x144>
 8002b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b04:	d002      	beq.n	8002b0c <ADC_ConfigureBoostMode+0x68>
 8002b06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b0a:	d16d      	bne.n	8002be8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	0c1b      	lsrs	r3, r3, #16
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b18:	60fb      	str	r3, [r7, #12]
        break;
 8002b1a:	e068      	b.n	8002bee <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	089b      	lsrs	r3, r3, #2
 8002b20:	60fb      	str	r3, [r7, #12]
        break;
 8002b22:	e064      	b.n	8002bee <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002b24:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002b28:	f04f 0100 	mov.w	r1, #0
 8002b2c:	f004 f968 	bl	8006e00 <HAL_RCCEx_GetPeriphCLKFreq>
 8002b30:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002b3a:	d051      	beq.n	8002be0 <ADC_ConfigureBoostMode+0x13c>
 8002b3c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002b40:	d854      	bhi.n	8002bec <ADC_ConfigureBoostMode+0x148>
 8002b42:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002b46:	d047      	beq.n	8002bd8 <ADC_ConfigureBoostMode+0x134>
 8002b48:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002b4c:	d84e      	bhi.n	8002bec <ADC_ConfigureBoostMode+0x148>
 8002b4e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002b52:	d03d      	beq.n	8002bd0 <ADC_ConfigureBoostMode+0x12c>
 8002b54:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002b58:	d848      	bhi.n	8002bec <ADC_ConfigureBoostMode+0x148>
 8002b5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b5e:	d033      	beq.n	8002bc8 <ADC_ConfigureBoostMode+0x124>
 8002b60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b64:	d842      	bhi.n	8002bec <ADC_ConfigureBoostMode+0x148>
 8002b66:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002b6a:	d029      	beq.n	8002bc0 <ADC_ConfigureBoostMode+0x11c>
 8002b6c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002b70:	d83c      	bhi.n	8002bec <ADC_ConfigureBoostMode+0x148>
 8002b72:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002b76:	d01a      	beq.n	8002bae <ADC_ConfigureBoostMode+0x10a>
 8002b78:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002b7c:	d836      	bhi.n	8002bec <ADC_ConfigureBoostMode+0x148>
 8002b7e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002b82:	d014      	beq.n	8002bae <ADC_ConfigureBoostMode+0x10a>
 8002b84:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002b88:	d830      	bhi.n	8002bec <ADC_ConfigureBoostMode+0x148>
 8002b8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b8e:	d00e      	beq.n	8002bae <ADC_ConfigureBoostMode+0x10a>
 8002b90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b94:	d82a      	bhi.n	8002bec <ADC_ConfigureBoostMode+0x148>
 8002b96:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002b9a:	d008      	beq.n	8002bae <ADC_ConfigureBoostMode+0x10a>
 8002b9c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002ba0:	d824      	bhi.n	8002bec <ADC_ConfigureBoostMode+0x148>
 8002ba2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ba6:	d002      	beq.n	8002bae <ADC_ConfigureBoostMode+0x10a>
 8002ba8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002bac:	d11e      	bne.n	8002bec <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	0c9b      	lsrs	r3, r3, #18
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bbc:	60fb      	str	r3, [r7, #12]
        break;
 8002bbe:	e016      	b.n	8002bee <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	091b      	lsrs	r3, r3, #4
 8002bc4:	60fb      	str	r3, [r7, #12]
        break;
 8002bc6:	e012      	b.n	8002bee <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	095b      	lsrs	r3, r3, #5
 8002bcc:	60fb      	str	r3, [r7, #12]
        break;
 8002bce:	e00e      	b.n	8002bee <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	099b      	lsrs	r3, r3, #6
 8002bd4:	60fb      	str	r3, [r7, #12]
        break;
 8002bd6:	e00a      	b.n	8002bee <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	09db      	lsrs	r3, r3, #7
 8002bdc:	60fb      	str	r3, [r7, #12]
        break;
 8002bde:	e006      	b.n	8002bee <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	0a1b      	lsrs	r3, r3, #8
 8002be4:	60fb      	str	r3, [r7, #12]
        break;
 8002be6:	e002      	b.n	8002bee <ADC_ConfigureBoostMode+0x14a>
        break;
 8002be8:	bf00      	nop
 8002bea:	e000      	b.n	8002bee <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002bec:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002bee:	f7ff f8b9 	bl	8001d64 <HAL_GetREVID>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	f241 0203 	movw	r2, #4099	; 0x1003
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d815      	bhi.n	8002c28 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4a2b      	ldr	r2, [pc, #172]	; (8002cac <ADC_ConfigureBoostMode+0x208>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d908      	bls.n	8002c16 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	689a      	ldr	r2, [r3, #8]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c12:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002c14:	e03e      	b.n	8002c94 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c24:	609a      	str	r2, [r3, #8]
}
 8002c26:	e035      	b.n	8002c94 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	085b      	lsrs	r3, r3, #1
 8002c2c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	4a1f      	ldr	r2, [pc, #124]	; (8002cb0 <ADC_ConfigureBoostMode+0x20c>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d808      	bhi.n	8002c48 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002c44:	609a      	str	r2, [r3, #8]
}
 8002c46:	e025      	b.n	8002c94 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	4a1a      	ldr	r2, [pc, #104]	; (8002cb4 <ADC_ConfigureBoostMode+0x210>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d80a      	bhi.n	8002c66 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c62:	609a      	str	r2, [r3, #8]
}
 8002c64:	e016      	b.n	8002c94 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	4a13      	ldr	r2, [pc, #76]	; (8002cb8 <ADC_ConfigureBoostMode+0x214>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d80a      	bhi.n	8002c84 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c80:	609a      	str	r2, [r3, #8]
}
 8002c82:	e007      	b.n	8002c94 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689a      	ldr	r2, [r3, #8]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002c92:	609a      	str	r2, [r3, #8]
}
 8002c94:	bf00      	nop
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40022000 	.word	0x40022000
 8002ca0:	40022100 	.word	0x40022100
 8002ca4:	40022300 	.word	0x40022300
 8002ca8:	58026300 	.word	0x58026300
 8002cac:	01312d00 	.word	0x01312d00
 8002cb0:	005f5e10 	.word	0x005f5e10
 8002cb4:	00bebc20 	.word	0x00bebc20
 8002cb8:	017d7840 	.word	0x017d7840

08002cbc <LL_ADC_IsEnabled>:
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f003 0301 	and.w	r3, r3, #1
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d101      	bne.n	8002cd4 <LL_ADC_IsEnabled+0x18>
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e000      	b.n	8002cd6 <LL_ADC_IsEnabled+0x1a>
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <LL_ADC_REG_IsConversionOngoing>:
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 0304 	and.w	r3, r3, #4
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d101      	bne.n	8002cfa <LL_ADC_REG_IsConversionOngoing+0x18>
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e000      	b.n	8002cfc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002d08:	b590      	push	{r4, r7, lr}
 8002d0a:	b09f      	sub	sp, #124	; 0x7c
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d12:	2300      	movs	r3, #0
 8002d14:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d101      	bne.n	8002d26 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002d22:	2302      	movs	r3, #2
 8002d24:	e0be      	b.n	8002ea4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002d32:	2300      	movs	r3, #0
 8002d34:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a5c      	ldr	r2, [pc, #368]	; (8002eac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d102      	bne.n	8002d46 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002d40:	4b5b      	ldr	r3, [pc, #364]	; (8002eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002d42:	60bb      	str	r3, [r7, #8]
 8002d44:	e001      	b.n	8002d4a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002d46:	2300      	movs	r3, #0
 8002d48:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d10b      	bne.n	8002d68 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d54:	f043 0220 	orr.w	r2, r3, #32
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e09d      	b.n	8002ea4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7ff ffb9 	bl	8002ce2 <LL_ADC_REG_IsConversionOngoing>
 8002d70:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff ffb3 	bl	8002ce2 <LL_ADC_REG_IsConversionOngoing>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d17f      	bne.n	8002e82 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002d82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d17c      	bne.n	8002e82 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a47      	ldr	r2, [pc, #284]	; (8002eac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d004      	beq.n	8002d9c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a46      	ldr	r2, [pc, #280]	; (8002eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d101      	bne.n	8002da0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002d9c:	4b45      	ldr	r3, [pc, #276]	; (8002eb4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002d9e:	e000      	b.n	8002da2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002da0:	4b45      	ldr	r3, [pc, #276]	; (8002eb8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002da2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d039      	beq.n	8002e20 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002dac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	431a      	orrs	r2, r3
 8002dba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dbc:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a3a      	ldr	r2, [pc, #232]	; (8002eac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d004      	beq.n	8002dd2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a38      	ldr	r2, [pc, #224]	; (8002eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d10e      	bne.n	8002df0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002dd2:	4836      	ldr	r0, [pc, #216]	; (8002eac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002dd4:	f7ff ff72 	bl	8002cbc <LL_ADC_IsEnabled>
 8002dd8:	4604      	mov	r4, r0
 8002dda:	4835      	ldr	r0, [pc, #212]	; (8002eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002ddc:	f7ff ff6e 	bl	8002cbc <LL_ADC_IsEnabled>
 8002de0:	4603      	mov	r3, r0
 8002de2:	4323      	orrs	r3, r4
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	bf0c      	ite	eq
 8002de8:	2301      	moveq	r3, #1
 8002dea:	2300      	movne	r3, #0
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	e008      	b.n	8002e02 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002df0:	4832      	ldr	r0, [pc, #200]	; (8002ebc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002df2:	f7ff ff63 	bl	8002cbc <LL_ADC_IsEnabled>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	bf0c      	ite	eq
 8002dfc:	2301      	moveq	r3, #1
 8002dfe:	2300      	movne	r3, #0
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d047      	beq.n	8002e96 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e08:	689a      	ldr	r2, [r3, #8]
 8002e0a:	4b2d      	ldr	r3, [pc, #180]	; (8002ec0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	6811      	ldr	r1, [r2, #0]
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	6892      	ldr	r2, [r2, #8]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e1c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e1e:	e03a      	b.n	8002e96 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002e20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e2a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a1e      	ldr	r2, [pc, #120]	; (8002eac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d004      	beq.n	8002e40 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a1d      	ldr	r2, [pc, #116]	; (8002eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d10e      	bne.n	8002e5e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002e40:	481a      	ldr	r0, [pc, #104]	; (8002eac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002e42:	f7ff ff3b 	bl	8002cbc <LL_ADC_IsEnabled>
 8002e46:	4604      	mov	r4, r0
 8002e48:	4819      	ldr	r0, [pc, #100]	; (8002eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002e4a:	f7ff ff37 	bl	8002cbc <LL_ADC_IsEnabled>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	4323      	orrs	r3, r4
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	bf0c      	ite	eq
 8002e56:	2301      	moveq	r3, #1
 8002e58:	2300      	movne	r3, #0
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	e008      	b.n	8002e70 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002e5e:	4817      	ldr	r0, [pc, #92]	; (8002ebc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002e60:	f7ff ff2c 	bl	8002cbc <LL_ADC_IsEnabled>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	bf0c      	ite	eq
 8002e6a:	2301      	moveq	r3, #1
 8002e6c:	2300      	movne	r3, #0
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d010      	beq.n	8002e96 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	4b11      	ldr	r3, [pc, #68]	; (8002ec0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e7e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e80:	e009      	b.n	8002e96 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e86:	f043 0220 	orr.w	r2, r3, #32
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002e94:	e000      	b.n	8002e98 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e96:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ea0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	377c      	adds	r7, #124	; 0x7c
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd90      	pop	{r4, r7, pc}
 8002eac:	40022000 	.word	0x40022000
 8002eb0:	40022100 	.word	0x40022100
 8002eb4:	40022300 	.word	0x40022300
 8002eb8:	58026300 	.word	0x58026300
 8002ebc:	58026000 	.word	0x58026000
 8002ec0:	fffff0e0 	.word	0xfffff0e0

08002ec4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f003 0307 	and.w	r3, r3, #7
 8002ed2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ed4:	4b0b      	ldr	r3, [pc, #44]	; (8002f04 <__NVIC_SetPriorityGrouping+0x40>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002eec:	4b06      	ldr	r3, [pc, #24]	; (8002f08 <__NVIC_SetPriorityGrouping+0x44>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ef2:	4a04      	ldr	r2, [pc, #16]	; (8002f04 <__NVIC_SetPriorityGrouping+0x40>)
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	60d3      	str	r3, [r2, #12]
}
 8002ef8:	bf00      	nop
 8002efa:	3714      	adds	r7, #20
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	e000ed00 	.word	0xe000ed00
 8002f08:	05fa0000 	.word	0x05fa0000

08002f0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f10:	4b04      	ldr	r3, [pc, #16]	; (8002f24 <__NVIC_GetPriorityGrouping+0x18>)
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	0a1b      	lsrs	r3, r3, #8
 8002f16:	f003 0307 	and.w	r3, r3, #7
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	e000ed00 	.word	0xe000ed00

08002f28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	4603      	mov	r3, r0
 8002f30:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	db0b      	blt.n	8002f52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f3a:	88fb      	ldrh	r3, [r7, #6]
 8002f3c:	f003 021f 	and.w	r2, r3, #31
 8002f40:	4907      	ldr	r1, [pc, #28]	; (8002f60 <__NVIC_EnableIRQ+0x38>)
 8002f42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f46:	095b      	lsrs	r3, r3, #5
 8002f48:	2001      	movs	r0, #1
 8002f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	e000e100 	.word	0xe000e100

08002f64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	6039      	str	r1, [r7, #0]
 8002f6e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	db0a      	blt.n	8002f8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	b2da      	uxtb	r2, r3
 8002f7c:	490c      	ldr	r1, [pc, #48]	; (8002fb0 <__NVIC_SetPriority+0x4c>)
 8002f7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f82:	0112      	lsls	r2, r2, #4
 8002f84:	b2d2      	uxtb	r2, r2
 8002f86:	440b      	add	r3, r1
 8002f88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f8c:	e00a      	b.n	8002fa4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	b2da      	uxtb	r2, r3
 8002f92:	4908      	ldr	r1, [pc, #32]	; (8002fb4 <__NVIC_SetPriority+0x50>)
 8002f94:	88fb      	ldrh	r3, [r7, #6]
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	3b04      	subs	r3, #4
 8002f9c:	0112      	lsls	r2, r2, #4
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	440b      	add	r3, r1
 8002fa2:	761a      	strb	r2, [r3, #24]
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr
 8002fb0:	e000e100 	.word	0xe000e100
 8002fb4:	e000ed00 	.word	0xe000ed00

08002fb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b089      	sub	sp, #36	; 0x24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f003 0307 	and.w	r3, r3, #7
 8002fca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	f1c3 0307 	rsb	r3, r3, #7
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	bf28      	it	cs
 8002fd6:	2304      	movcs	r3, #4
 8002fd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	3304      	adds	r3, #4
 8002fde:	2b06      	cmp	r3, #6
 8002fe0:	d902      	bls.n	8002fe8 <NVIC_EncodePriority+0x30>
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	3b03      	subs	r3, #3
 8002fe6:	e000      	b.n	8002fea <NVIC_EncodePriority+0x32>
 8002fe8:	2300      	movs	r3, #0
 8002fea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fec:	f04f 32ff 	mov.w	r2, #4294967295
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff6:	43da      	mvns	r2, r3
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	401a      	ands	r2, r3
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003000:	f04f 31ff 	mov.w	r1, #4294967295
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	fa01 f303 	lsl.w	r3, r1, r3
 800300a:	43d9      	mvns	r1, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003010:	4313      	orrs	r3, r2
         );
}
 8003012:	4618      	mov	r0, r3
 8003014:	3724      	adds	r7, #36	; 0x24
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
	...

08003020 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3b01      	subs	r3, #1
 800302c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003030:	d301      	bcc.n	8003036 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003032:	2301      	movs	r3, #1
 8003034:	e00f      	b.n	8003056 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003036:	4a0a      	ldr	r2, [pc, #40]	; (8003060 <SysTick_Config+0x40>)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	3b01      	subs	r3, #1
 800303c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800303e:	210f      	movs	r1, #15
 8003040:	f04f 30ff 	mov.w	r0, #4294967295
 8003044:	f7ff ff8e 	bl	8002f64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003048:	4b05      	ldr	r3, [pc, #20]	; (8003060 <SysTick_Config+0x40>)
 800304a:	2200      	movs	r2, #0
 800304c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800304e:	4b04      	ldr	r3, [pc, #16]	; (8003060 <SysTick_Config+0x40>)
 8003050:	2207      	movs	r2, #7
 8003052:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	e000e010 	.word	0xe000e010

08003064 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f7ff ff29 	bl	8002ec4 <__NVIC_SetPriorityGrouping>
}
 8003072:	bf00      	nop
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b086      	sub	sp, #24
 800307e:	af00      	add	r7, sp, #0
 8003080:	4603      	mov	r3, r0
 8003082:	60b9      	str	r1, [r7, #8]
 8003084:	607a      	str	r2, [r7, #4]
 8003086:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003088:	f7ff ff40 	bl	8002f0c <__NVIC_GetPriorityGrouping>
 800308c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	68b9      	ldr	r1, [r7, #8]
 8003092:	6978      	ldr	r0, [r7, #20]
 8003094:	f7ff ff90 	bl	8002fb8 <NVIC_EncodePriority>
 8003098:	4602      	mov	r2, r0
 800309a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800309e:	4611      	mov	r1, r2
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff ff5f 	bl	8002f64 <__NVIC_SetPriority>
}
 80030a6:	bf00      	nop
 80030a8:	3718      	adds	r7, #24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b082      	sub	sp, #8
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	4603      	mov	r3, r0
 80030b6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff ff33 	bl	8002f28 <__NVIC_EnableIRQ>
}
 80030c2:	bf00      	nop
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b082      	sub	sp, #8
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7ff ffa4 	bl	8003020 <SysTick_Config>
 80030d8:	4603      	mov	r3, r0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
	...

080030e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b089      	sub	sp, #36	; 0x24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80030ee:	2300      	movs	r3, #0
 80030f0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80030f2:	4b89      	ldr	r3, [pc, #548]	; (8003318 <HAL_GPIO_Init+0x234>)
 80030f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80030f6:	e194      	b.n	8003422 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	2101      	movs	r1, #1
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	fa01 f303 	lsl.w	r3, r1, r3
 8003104:	4013      	ands	r3, r2
 8003106:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	2b00      	cmp	r3, #0
 800310c:	f000 8186 	beq.w	800341c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f003 0303 	and.w	r3, r3, #3
 8003118:	2b01      	cmp	r3, #1
 800311a:	d005      	beq.n	8003128 <HAL_GPIO_Init+0x44>
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f003 0303 	and.w	r3, r3, #3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d130      	bne.n	800318a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	2203      	movs	r2, #3
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	43db      	mvns	r3, r3
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	4013      	ands	r3, r2
 800313e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	68da      	ldr	r2, [r3, #12]
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	4313      	orrs	r3, r2
 8003150:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800315e:	2201      	movs	r2, #1
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	43db      	mvns	r3, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4013      	ands	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	091b      	lsrs	r3, r3, #4
 8003174:	f003 0201 	and.w	r2, r3, #1
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	fa02 f303 	lsl.w	r3, r2, r3
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	4313      	orrs	r3, r2
 8003182:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f003 0303 	and.w	r3, r3, #3
 8003192:	2b03      	cmp	r3, #3
 8003194:	d017      	beq.n	80031c6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	2203      	movs	r2, #3
 80031a2:	fa02 f303 	lsl.w	r3, r2, r3
 80031a6:	43db      	mvns	r3, r3
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	4013      	ands	r3, r2
 80031ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	689a      	ldr	r2, [r3, #8]
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	4313      	orrs	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	69ba      	ldr	r2, [r7, #24]
 80031c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f003 0303 	and.w	r3, r3, #3
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d123      	bne.n	800321a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	08da      	lsrs	r2, r3, #3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	3208      	adds	r2, #8
 80031da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	f003 0307 	and.w	r3, r3, #7
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	220f      	movs	r2, #15
 80031ea:	fa02 f303 	lsl.w	r3, r2, r3
 80031ee:	43db      	mvns	r3, r3
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	4013      	ands	r3, r2
 80031f4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	691a      	ldr	r2, [r3, #16]
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	fa02 f303 	lsl.w	r3, r2, r3
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	4313      	orrs	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	08da      	lsrs	r2, r3, #3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	3208      	adds	r2, #8
 8003214:	69b9      	ldr	r1, [r7, #24]
 8003216:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	2203      	movs	r2, #3
 8003226:	fa02 f303 	lsl.w	r3, r2, r3
 800322a:	43db      	mvns	r3, r3
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	4013      	ands	r3, r2
 8003230:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f003 0203 	and.w	r2, r3, #3
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	fa02 f303 	lsl.w	r3, r2, r3
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	4313      	orrs	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003256:	2b00      	cmp	r3, #0
 8003258:	f000 80e0 	beq.w	800341c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800325c:	4b2f      	ldr	r3, [pc, #188]	; (800331c <HAL_GPIO_Init+0x238>)
 800325e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003262:	4a2e      	ldr	r2, [pc, #184]	; (800331c <HAL_GPIO_Init+0x238>)
 8003264:	f043 0302 	orr.w	r3, r3, #2
 8003268:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800326c:	4b2b      	ldr	r3, [pc, #172]	; (800331c <HAL_GPIO_Init+0x238>)
 800326e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	60fb      	str	r3, [r7, #12]
 8003278:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800327a:	4a29      	ldr	r2, [pc, #164]	; (8003320 <HAL_GPIO_Init+0x23c>)
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	089b      	lsrs	r3, r3, #2
 8003280:	3302      	adds	r3, #2
 8003282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003286:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	f003 0303 	and.w	r3, r3, #3
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	220f      	movs	r2, #15
 8003292:	fa02 f303 	lsl.w	r3, r2, r3
 8003296:	43db      	mvns	r3, r3
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	4013      	ands	r3, r2
 800329c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a20      	ldr	r2, [pc, #128]	; (8003324 <HAL_GPIO_Init+0x240>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d052      	beq.n	800334c <HAL_GPIO_Init+0x268>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a1f      	ldr	r2, [pc, #124]	; (8003328 <HAL_GPIO_Init+0x244>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d031      	beq.n	8003312 <HAL_GPIO_Init+0x22e>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a1e      	ldr	r2, [pc, #120]	; (800332c <HAL_GPIO_Init+0x248>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d02b      	beq.n	800330e <HAL_GPIO_Init+0x22a>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a1d      	ldr	r2, [pc, #116]	; (8003330 <HAL_GPIO_Init+0x24c>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d025      	beq.n	800330a <HAL_GPIO_Init+0x226>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a1c      	ldr	r2, [pc, #112]	; (8003334 <HAL_GPIO_Init+0x250>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d01f      	beq.n	8003306 <HAL_GPIO_Init+0x222>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a1b      	ldr	r2, [pc, #108]	; (8003338 <HAL_GPIO_Init+0x254>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d019      	beq.n	8003302 <HAL_GPIO_Init+0x21e>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a1a      	ldr	r2, [pc, #104]	; (800333c <HAL_GPIO_Init+0x258>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d013      	beq.n	80032fe <HAL_GPIO_Init+0x21a>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a19      	ldr	r2, [pc, #100]	; (8003340 <HAL_GPIO_Init+0x25c>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d00d      	beq.n	80032fa <HAL_GPIO_Init+0x216>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a18      	ldr	r2, [pc, #96]	; (8003344 <HAL_GPIO_Init+0x260>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d007      	beq.n	80032f6 <HAL_GPIO_Init+0x212>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a17      	ldr	r2, [pc, #92]	; (8003348 <HAL_GPIO_Init+0x264>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d101      	bne.n	80032f2 <HAL_GPIO_Init+0x20e>
 80032ee:	2309      	movs	r3, #9
 80032f0:	e02d      	b.n	800334e <HAL_GPIO_Init+0x26a>
 80032f2:	230a      	movs	r3, #10
 80032f4:	e02b      	b.n	800334e <HAL_GPIO_Init+0x26a>
 80032f6:	2308      	movs	r3, #8
 80032f8:	e029      	b.n	800334e <HAL_GPIO_Init+0x26a>
 80032fa:	2307      	movs	r3, #7
 80032fc:	e027      	b.n	800334e <HAL_GPIO_Init+0x26a>
 80032fe:	2306      	movs	r3, #6
 8003300:	e025      	b.n	800334e <HAL_GPIO_Init+0x26a>
 8003302:	2305      	movs	r3, #5
 8003304:	e023      	b.n	800334e <HAL_GPIO_Init+0x26a>
 8003306:	2304      	movs	r3, #4
 8003308:	e021      	b.n	800334e <HAL_GPIO_Init+0x26a>
 800330a:	2303      	movs	r3, #3
 800330c:	e01f      	b.n	800334e <HAL_GPIO_Init+0x26a>
 800330e:	2302      	movs	r3, #2
 8003310:	e01d      	b.n	800334e <HAL_GPIO_Init+0x26a>
 8003312:	2301      	movs	r3, #1
 8003314:	e01b      	b.n	800334e <HAL_GPIO_Init+0x26a>
 8003316:	bf00      	nop
 8003318:	58000080 	.word	0x58000080
 800331c:	58024400 	.word	0x58024400
 8003320:	58000400 	.word	0x58000400
 8003324:	58020000 	.word	0x58020000
 8003328:	58020400 	.word	0x58020400
 800332c:	58020800 	.word	0x58020800
 8003330:	58020c00 	.word	0x58020c00
 8003334:	58021000 	.word	0x58021000
 8003338:	58021400 	.word	0x58021400
 800333c:	58021800 	.word	0x58021800
 8003340:	58021c00 	.word	0x58021c00
 8003344:	58022000 	.word	0x58022000
 8003348:	58022400 	.word	0x58022400
 800334c:	2300      	movs	r3, #0
 800334e:	69fa      	ldr	r2, [r7, #28]
 8003350:	f002 0203 	and.w	r2, r2, #3
 8003354:	0092      	lsls	r2, r2, #2
 8003356:	4093      	lsls	r3, r2
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	4313      	orrs	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800335e:	4938      	ldr	r1, [pc, #224]	; (8003440 <HAL_GPIO_Init+0x35c>)
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	089b      	lsrs	r3, r3, #2
 8003364:	3302      	adds	r3, #2
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800336c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	43db      	mvns	r3, r3
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	4013      	ands	r3, r2
 800337c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	4313      	orrs	r3, r2
 8003390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003392:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800339a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	43db      	mvns	r3, r3
 80033a6:	69ba      	ldr	r2, [r7, #24]
 80033a8:	4013      	ands	r3, r2
 80033aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d003      	beq.n	80033c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	4313      	orrs	r3, r2
 80033be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80033c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	43db      	mvns	r3, r3
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	4013      	ands	r3, r2
 80033d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d003      	beq.n	80033ec <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	43db      	mvns	r3, r3
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	4013      	ands	r3, r2
 8003400:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	4313      	orrs	r3, r2
 8003414:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	3301      	adds	r3, #1
 8003420:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	fa22 f303 	lsr.w	r3, r2, r3
 800342c:	2b00      	cmp	r3, #0
 800342e:	f47f ae63 	bne.w	80030f8 <HAL_GPIO_Init+0x14>
  }
}
 8003432:	bf00      	nop
 8003434:	bf00      	nop
 8003436:	3724      	adds	r7, #36	; 0x24
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr
 8003440:	58000400 	.word	0x58000400

08003444 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003446:	b08f      	sub	sp, #60	; 0x3c
 8003448:	af0a      	add	r7, sp, #40	; 0x28
 800344a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e116      	b.n	8003684 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b00      	cmp	r3, #0
 8003466:	d106      	bne.n	8003476 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f008 fd09 	bl	800be88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2203      	movs	r2, #3
 800347a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003486:	2b00      	cmp	r3, #0
 8003488:	d102      	bne.n	8003490 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4618      	mov	r0, r3
 8003496:	f005 f8c8 	bl	800862a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	603b      	str	r3, [r7, #0]
 80034a0:	687e      	ldr	r6, [r7, #4]
 80034a2:	466d      	mov	r5, sp
 80034a4:	f106 0410 	add.w	r4, r6, #16
 80034a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80034b8:	1d33      	adds	r3, r6, #4
 80034ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034bc:	6838      	ldr	r0, [r7, #0]
 80034be:	f004 ff93 	bl	80083e8 <USB_CoreInit>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d005      	beq.n	80034d4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2202      	movs	r2, #2
 80034cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e0d7      	b.n	8003684 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2100      	movs	r1, #0
 80034da:	4618      	mov	r0, r3
 80034dc:	f005 f8b6 	bl	800864c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034e0:	2300      	movs	r3, #0
 80034e2:	73fb      	strb	r3, [r7, #15]
 80034e4:	e04a      	b.n	800357c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034e6:	7bfa      	ldrb	r2, [r7, #15]
 80034e8:	6879      	ldr	r1, [r7, #4]
 80034ea:	4613      	mov	r3, r2
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	4413      	add	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	440b      	add	r3, r1
 80034f4:	333d      	adds	r3, #61	; 0x3d
 80034f6:	2201      	movs	r2, #1
 80034f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80034fa:	7bfa      	ldrb	r2, [r7, #15]
 80034fc:	6879      	ldr	r1, [r7, #4]
 80034fe:	4613      	mov	r3, r2
 8003500:	00db      	lsls	r3, r3, #3
 8003502:	4413      	add	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	440b      	add	r3, r1
 8003508:	333c      	adds	r3, #60	; 0x3c
 800350a:	7bfa      	ldrb	r2, [r7, #15]
 800350c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800350e:	7bfa      	ldrb	r2, [r7, #15]
 8003510:	7bfb      	ldrb	r3, [r7, #15]
 8003512:	b298      	uxth	r0, r3
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	4613      	mov	r3, r2
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	4413      	add	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	440b      	add	r3, r1
 8003520:	3356      	adds	r3, #86	; 0x56
 8003522:	4602      	mov	r2, r0
 8003524:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003526:	7bfa      	ldrb	r2, [r7, #15]
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	4613      	mov	r3, r2
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	4413      	add	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	440b      	add	r3, r1
 8003534:	3340      	adds	r3, #64	; 0x40
 8003536:	2200      	movs	r2, #0
 8003538:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800353a:	7bfa      	ldrb	r2, [r7, #15]
 800353c:	6879      	ldr	r1, [r7, #4]
 800353e:	4613      	mov	r3, r2
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	4413      	add	r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	440b      	add	r3, r1
 8003548:	3344      	adds	r3, #68	; 0x44
 800354a:	2200      	movs	r2, #0
 800354c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800354e:	7bfa      	ldrb	r2, [r7, #15]
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	4613      	mov	r3, r2
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	4413      	add	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	440b      	add	r3, r1
 800355c:	3348      	adds	r3, #72	; 0x48
 800355e:	2200      	movs	r2, #0
 8003560:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003562:	7bfa      	ldrb	r2, [r7, #15]
 8003564:	6879      	ldr	r1, [r7, #4]
 8003566:	4613      	mov	r3, r2
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	4413      	add	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	440b      	add	r3, r1
 8003570:	334c      	adds	r3, #76	; 0x4c
 8003572:	2200      	movs	r2, #0
 8003574:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003576:	7bfb      	ldrb	r3, [r7, #15]
 8003578:	3301      	adds	r3, #1
 800357a:	73fb      	strb	r3, [r7, #15]
 800357c:	7bfa      	ldrb	r2, [r7, #15]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	429a      	cmp	r2, r3
 8003584:	d3af      	bcc.n	80034e6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003586:	2300      	movs	r3, #0
 8003588:	73fb      	strb	r3, [r7, #15]
 800358a:	e044      	b.n	8003616 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800358c:	7bfa      	ldrb	r2, [r7, #15]
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	4613      	mov	r3, r2
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	4413      	add	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800359e:	2200      	movs	r2, #0
 80035a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80035a2:	7bfa      	ldrb	r2, [r7, #15]
 80035a4:	6879      	ldr	r1, [r7, #4]
 80035a6:	4613      	mov	r3, r2
 80035a8:	00db      	lsls	r3, r3, #3
 80035aa:	4413      	add	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	440b      	add	r3, r1
 80035b0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80035b4:	7bfa      	ldrb	r2, [r7, #15]
 80035b6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035b8:	7bfa      	ldrb	r2, [r7, #15]
 80035ba:	6879      	ldr	r1, [r7, #4]
 80035bc:	4613      	mov	r3, r2
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	4413      	add	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	440b      	add	r3, r1
 80035c6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80035ca:	2200      	movs	r2, #0
 80035cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80035ce:	7bfa      	ldrb	r2, [r7, #15]
 80035d0:	6879      	ldr	r1, [r7, #4]
 80035d2:	4613      	mov	r3, r2
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	4413      	add	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	440b      	add	r3, r1
 80035dc:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80035e4:	7bfa      	ldrb	r2, [r7, #15]
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	4613      	mov	r3, r2
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	4413      	add	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	440b      	add	r3, r1
 80035f2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80035f6:	2200      	movs	r2, #0
 80035f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80035fa:	7bfa      	ldrb	r2, [r7, #15]
 80035fc:	6879      	ldr	r1, [r7, #4]
 80035fe:	4613      	mov	r3, r2
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	4413      	add	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	440b      	add	r3, r1
 8003608:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800360c:	2200      	movs	r2, #0
 800360e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003610:	7bfb      	ldrb	r3, [r7, #15]
 8003612:	3301      	adds	r3, #1
 8003614:	73fb      	strb	r3, [r7, #15]
 8003616:	7bfa      	ldrb	r2, [r7, #15]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	429a      	cmp	r2, r3
 800361e:	d3b5      	bcc.n	800358c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	603b      	str	r3, [r7, #0]
 8003626:	687e      	ldr	r6, [r7, #4]
 8003628:	466d      	mov	r5, sp
 800362a:	f106 0410 	add.w	r4, r6, #16
 800362e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003630:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003632:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003634:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003636:	e894 0003 	ldmia.w	r4, {r0, r1}
 800363a:	e885 0003 	stmia.w	r5, {r0, r1}
 800363e:	1d33      	adds	r3, r6, #4
 8003640:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003642:	6838      	ldr	r0, [r7, #0]
 8003644:	f005 f84e 	bl	80086e4 <USB_DevInit>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d005      	beq.n	800365a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2202      	movs	r2, #2
 8003652:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e014      	b.n	8003684 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366e:	2b01      	cmp	r3, #1
 8003670:	d102      	bne.n	8003678 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f001 f970 	bl	8004958 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4618      	mov	r0, r3
 800367e:	f006 f890 	bl	80097a2 <USB_DevDisconnect>

  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3714      	adds	r7, #20
 8003688:	46bd      	mov	sp, r7
 800368a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800368c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d101      	bne.n	80036a8 <HAL_PCD_Start+0x1c>
 80036a4:	2302      	movs	r3, #2
 80036a6:	e022      	b.n	80036ee <HAL_PCD_Start+0x62>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d109      	bne.n	80036d0 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d105      	bne.n	80036d0 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f004 ff97 	bl	8008608 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4618      	mov	r0, r3
 80036e0:	f006 f83e 	bl	8009760 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80036f6:	b590      	push	{r4, r7, lr}
 80036f8:	b08d      	sub	sp, #52	; 0x34
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003704:	6a3b      	ldr	r3, [r7, #32]
 8003706:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4618      	mov	r0, r3
 800370e:	f006 f8fc 	bl	800990a <USB_GetMode>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	f040 84b7 	bne.w	8004088 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4618      	mov	r0, r3
 8003720:	f006 f860 	bl	80097e4 <USB_ReadInterrupts>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	f000 84ad 	beq.w	8004086 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	0a1b      	lsrs	r3, r3, #8
 8003736:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4618      	mov	r0, r3
 8003746:	f006 f84d 	bl	80097e4 <USB_ReadInterrupts>
 800374a:	4603      	mov	r3, r0
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b02      	cmp	r3, #2
 8003752:	d107      	bne.n	8003764 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	695a      	ldr	r2, [r3, #20]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f002 0202 	and.w	r2, r2, #2
 8003762:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4618      	mov	r0, r3
 800376a:	f006 f83b 	bl	80097e4 <USB_ReadInterrupts>
 800376e:	4603      	mov	r3, r0
 8003770:	f003 0310 	and.w	r3, r3, #16
 8003774:	2b10      	cmp	r3, #16
 8003776:	d161      	bne.n	800383c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	699a      	ldr	r2, [r3, #24]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 0210 	bic.w	r2, r2, #16
 8003786:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003788:	6a3b      	ldr	r3, [r7, #32]
 800378a:	6a1b      	ldr	r3, [r3, #32]
 800378c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	f003 020f 	and.w	r2, r3, #15
 8003794:	4613      	mov	r3, r2
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	4413      	add	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	4413      	add	r3, r2
 80037a4:	3304      	adds	r3, #4
 80037a6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	0c5b      	lsrs	r3, r3, #17
 80037ac:	f003 030f 	and.w	r3, r3, #15
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d124      	bne.n	80037fe <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80037ba:	4013      	ands	r3, r2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d035      	beq.n	800382c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	091b      	lsrs	r3, r3, #4
 80037c8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80037ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	461a      	mov	r2, r3
 80037d2:	6a38      	ldr	r0, [r7, #32]
 80037d4:	f005 fe72 	bl	80094bc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	68da      	ldr	r2, [r3, #12]
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	091b      	lsrs	r3, r3, #4
 80037e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037e4:	441a      	add	r2, r3
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	695a      	ldr	r2, [r3, #20]
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	091b      	lsrs	r3, r3, #4
 80037f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037f6:	441a      	add	r2, r3
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	615a      	str	r2, [r3, #20]
 80037fc:	e016      	b.n	800382c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	0c5b      	lsrs	r3, r3, #17
 8003802:	f003 030f 	and.w	r3, r3, #15
 8003806:	2b06      	cmp	r3, #6
 8003808:	d110      	bne.n	800382c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003810:	2208      	movs	r2, #8
 8003812:	4619      	mov	r1, r3
 8003814:	6a38      	ldr	r0, [r7, #32]
 8003816:	f005 fe51 	bl	80094bc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	695a      	ldr	r2, [r3, #20]
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	091b      	lsrs	r3, r3, #4
 8003822:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003826:	441a      	add	r2, r3
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	699a      	ldr	r2, [r3, #24]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f042 0210 	orr.w	r2, r2, #16
 800383a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4618      	mov	r0, r3
 8003842:	f005 ffcf 	bl	80097e4 <USB_ReadInterrupts>
 8003846:	4603      	mov	r3, r0
 8003848:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800384c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003850:	f040 80a7 	bne.w	80039a2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003854:	2300      	movs	r3, #0
 8003856:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4618      	mov	r0, r3
 800385e:	f005 ffd4 	bl	800980a <USB_ReadDevAllOutEpInterrupt>
 8003862:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003864:	e099      	b.n	800399a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 808e 	beq.w	800398e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003878:	b2d2      	uxtb	r2, r2
 800387a:	4611      	mov	r1, r2
 800387c:	4618      	mov	r0, r3
 800387e:	f005 fff8 	bl	8009872 <USB_ReadDevOutEPInterrupt>
 8003882:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00c      	beq.n	80038a8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800388e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003890:	015a      	lsls	r2, r3, #5
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	4413      	add	r3, r2
 8003896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800389a:	461a      	mov	r2, r3
 800389c:	2301      	movs	r3, #1
 800389e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80038a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 fed2 	bl	800464c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	f003 0308 	and.w	r3, r3, #8
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00c      	beq.n	80038cc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80038b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b4:	015a      	lsls	r2, r3, #5
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	4413      	add	r3, r2
 80038ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038be:	461a      	mov	r2, r3
 80038c0:	2308      	movs	r3, #8
 80038c2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80038c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 ffa8 	bl	800481c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	f003 0310 	and.w	r3, r3, #16
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d008      	beq.n	80038e8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80038d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d8:	015a      	lsls	r2, r3, #5
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	4413      	add	r3, r2
 80038de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038e2:	461a      	mov	r2, r3
 80038e4:	2310      	movs	r3, #16
 80038e6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d030      	beq.n	8003954 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80038f2:	6a3b      	ldr	r3, [r7, #32]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038fa:	2b80      	cmp	r3, #128	; 0x80
 80038fc:	d109      	bne.n	8003912 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	69fa      	ldr	r2, [r7, #28]
 8003908:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800390c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003910:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003914:	4613      	mov	r3, r2
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	4413      	add	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	4413      	add	r3, r2
 8003924:	3304      	adds	r3, #4
 8003926:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	78db      	ldrb	r3, [r3, #3]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d108      	bne.n	8003942 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	2200      	movs	r2, #0
 8003934:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003938:	b2db      	uxtb	r3, r3
 800393a:	4619      	mov	r1, r3
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f008 fbc9 	bl	800c0d4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003944:	015a      	lsls	r2, r3, #5
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	4413      	add	r3, r2
 800394a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800394e:	461a      	mov	r2, r3
 8003950:	2302      	movs	r3, #2
 8003952:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	f003 0320 	and.w	r3, r3, #32
 800395a:	2b00      	cmp	r3, #0
 800395c:	d008      	beq.n	8003970 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800395e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003960:	015a      	lsls	r2, r3, #5
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	4413      	add	r3, r2
 8003966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800396a:	461a      	mov	r2, r3
 800396c:	2320      	movs	r3, #32
 800396e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d009      	beq.n	800398e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	015a      	lsls	r2, r3, #5
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	4413      	add	r3, r2
 8003982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003986:	461a      	mov	r2, r3
 8003988:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800398c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800398e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003990:	3301      	adds	r3, #1
 8003992:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003996:	085b      	lsrs	r3, r3, #1
 8003998:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800399a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800399c:	2b00      	cmp	r3, #0
 800399e:	f47f af62 	bne.w	8003866 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f005 ff1c 	bl	80097e4 <USB_ReadInterrupts>
 80039ac:	4603      	mov	r3, r0
 80039ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039b6:	f040 80db 	bne.w	8003b70 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4618      	mov	r0, r3
 80039c0:	f005 ff3d 	bl	800983e <USB_ReadDevAllInEpInterrupt>
 80039c4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80039c6:	2300      	movs	r3, #0
 80039c8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80039ca:	e0cd      	b.n	8003b68 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80039cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f000 80c2 	beq.w	8003b5c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039de:	b2d2      	uxtb	r2, r2
 80039e0:	4611      	mov	r1, r2
 80039e2:	4618      	mov	r0, r3
 80039e4:	f005 ff63 	bl	80098ae <USB_ReadDevInEPInterrupt>
 80039e8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d057      	beq.n	8003aa4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f6:	f003 030f 	and.w	r3, r3, #15
 80039fa:	2201      	movs	r2, #1
 80039fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003a00:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	43db      	mvns	r3, r3
 8003a0e:	69f9      	ldr	r1, [r7, #28]
 8003a10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a14:	4013      	ands	r3, r2
 8003a16:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1a:	015a      	lsls	r2, r3, #5
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	4413      	add	r3, r2
 8003a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a24:	461a      	mov	r2, r3
 8003a26:	2301      	movs	r3, #1
 8003a28:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d132      	bne.n	8003a98 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a36:	4613      	mov	r3, r2
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	4413      	add	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	440b      	add	r3, r1
 8003a40:	3348      	adds	r3, #72	; 0x48
 8003a42:	6819      	ldr	r1, [r3, #0]
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a48:	4613      	mov	r3, r2
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	4413      	add	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4403      	add	r3, r0
 8003a52:	3344      	adds	r3, #68	; 0x44
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4419      	add	r1, r3
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	4413      	add	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4403      	add	r3, r0
 8003a66:	3348      	adds	r3, #72	; 0x48
 8003a68:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d113      	bne.n	8003a98 <HAL_PCD_IRQHandler+0x3a2>
 8003a70:	6879      	ldr	r1, [r7, #4]
 8003a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a74:	4613      	mov	r3, r2
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	4413      	add	r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	440b      	add	r3, r1
 8003a7e:	334c      	adds	r3, #76	; 0x4c
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d108      	bne.n	8003a98 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6818      	ldr	r0, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a90:	461a      	mov	r2, r3
 8003a92:	2101      	movs	r1, #1
 8003a94:	f005 ff6c 	bl	8009970 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f008 fa93 	bl	800bfca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	f003 0308 	and.w	r3, r3, #8
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d008      	beq.n	8003ac0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab0:	015a      	lsls	r2, r3, #5
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aba:	461a      	mov	r2, r3
 8003abc:	2308      	movs	r3, #8
 8003abe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	f003 0310 	and.w	r3, r3, #16
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d008      	beq.n	8003adc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	015a      	lsls	r2, r3, #5
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	2310      	movs	r3, #16
 8003ada:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d008      	beq.n	8003af8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae8:	015a      	lsls	r2, r3, #5
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	4413      	add	r3, r2
 8003aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003af2:	461a      	mov	r2, r3
 8003af4:	2340      	movs	r3, #64	; 0x40
 8003af6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d023      	beq.n	8003b4a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003b02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b04:	6a38      	ldr	r0, [r7, #32]
 8003b06:	f004 ff4b 	bl	80089a0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	4413      	add	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	3338      	adds	r3, #56	; 0x38
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	4413      	add	r3, r2
 8003b1a:	3304      	adds	r3, #4
 8003b1c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	78db      	ldrb	r3, [r3, #3]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d108      	bne.n	8003b38 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	4619      	mov	r1, r3
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f008 fae0 	bl	800c0f8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3a:	015a      	lsls	r2, r3, #5
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	4413      	add	r3, r2
 8003b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b44:	461a      	mov	r2, r3
 8003b46:	2302      	movs	r3, #2
 8003b48:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d003      	beq.n	8003b5c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003b54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 fcea 	bl	8004530 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5e:	3301      	adds	r3, #1
 8003b60:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b64:	085b      	lsrs	r3, r3, #1
 8003b66:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f47f af2e 	bne.w	80039cc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4618      	mov	r0, r3
 8003b76:	f005 fe35 	bl	80097e4 <USB_ReadInterrupts>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b84:	d122      	bne.n	8003bcc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	69fa      	ldr	r2, [r7, #28]
 8003b90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b94:	f023 0301 	bic.w	r3, r3, #1
 8003b98:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d108      	bne.n	8003bb6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003bac:	2100      	movs	r1, #0
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 fef6 	bl	80049a0 <HAL_PCDEx_LPM_Callback>
 8003bb4:	e002      	b.n	8003bbc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f008 fa7e 	bl	800c0b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	695a      	ldr	r2, [r3, #20]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003bca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f005 fe07 	bl	80097e4 <USB_ReadInterrupts>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003be0:	d112      	bne.n	8003c08 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d102      	bne.n	8003bf8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f008 fa3a 	bl	800c06c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	695a      	ldr	r2, [r3, #20]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003c06:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f005 fde9 	bl	80097e4 <USB_ReadInterrupts>
 8003c12:	4603      	mov	r3, r0
 8003c14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c1c:	d121      	bne.n	8003c62 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	695a      	ldr	r2, [r3, #20]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003c2c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d111      	bne.n	8003c5c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c46:	089b      	lsrs	r3, r3, #2
 8003c48:	f003 020f 	and.w	r2, r3, #15
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003c52:	2101      	movs	r1, #1
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 fea3 	bl	80049a0 <HAL_PCDEx_LPM_Callback>
 8003c5a:	e002      	b.n	8003c62 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f008 fa05 	bl	800c06c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f005 fdbc 	bl	80097e4 <USB_ReadInterrupts>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c76:	f040 80b7 	bne.w	8003de8 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	69fa      	ldr	r2, [r7, #28]
 8003c84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c88:	f023 0301 	bic.w	r3, r3, #1
 8003c8c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2110      	movs	r1, #16
 8003c94:	4618      	mov	r0, r3
 8003c96:	f004 fe83 	bl	80089a0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c9e:	e046      	b.n	8003d2e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca2:	015a      	lsls	r2, r3, #5
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cac:	461a      	mov	r2, r3
 8003cae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003cb2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb6:	015a      	lsls	r2, r3, #5
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	4413      	add	r3, r2
 8003cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cc4:	0151      	lsls	r1, r2, #5
 8003cc6:	69fa      	ldr	r2, [r7, #28]
 8003cc8:	440a      	add	r2, r1
 8003cca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003cd2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd6:	015a      	lsls	r2, r3, #5
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	4413      	add	r3, r2
 8003cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ce6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cea:	015a      	lsls	r2, r3, #5
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	4413      	add	r3, r2
 8003cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cf8:	0151      	lsls	r1, r2, #5
 8003cfa:	69fa      	ldr	r2, [r7, #28]
 8003cfc:	440a      	add	r2, r1
 8003cfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d06:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d0a:	015a      	lsls	r2, r3, #5
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	4413      	add	r3, r2
 8003d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d18:	0151      	lsls	r1, r2, #5
 8003d1a:	69fa      	ldr	r2, [r7, #28]
 8003d1c:	440a      	add	r2, r1
 8003d1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d22:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d26:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d3b3      	bcc.n	8003ca0 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d3e:	69db      	ldr	r3, [r3, #28]
 8003d40:	69fa      	ldr	r2, [r7, #28]
 8003d42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d46:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003d4a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d016      	beq.n	8003d82 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d5e:	69fa      	ldr	r2, [r7, #28]
 8003d60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d64:	f043 030b 	orr.w	r3, r3, #11
 8003d68:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d74:	69fa      	ldr	r2, [r7, #28]
 8003d76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d7a:	f043 030b 	orr.w	r3, r3, #11
 8003d7e:	6453      	str	r3, [r2, #68]	; 0x44
 8003d80:	e015      	b.n	8003dae <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d88:	695a      	ldr	r2, [r3, #20]
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d90:	4619      	mov	r1, r3
 8003d92:	f242 032b 	movw	r3, #8235	; 0x202b
 8003d96:	4313      	orrs	r3, r2
 8003d98:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	69fa      	ldr	r2, [r7, #28]
 8003da4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003da8:	f043 030b 	orr.w	r3, r3, #11
 8003dac:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	69fa      	ldr	r2, [r7, #28]
 8003db8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dbc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003dc0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6818      	ldr	r0, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	f005 fdcc 	bl	8009970 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	695a      	ldr	r2, [r3, #20]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003de6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f005 fcf9 	bl	80097e4 <USB_ReadInterrupts>
 8003df2:	4603      	mov	r3, r0
 8003df4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003df8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dfc:	d124      	bne.n	8003e48 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f005 fd90 	bl	8009928 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f004 fe44 	bl	8008a9a <USB_GetDevSpeed>
 8003e12:	4603      	mov	r3, r0
 8003e14:	461a      	mov	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681c      	ldr	r4, [r3, #0]
 8003e1e:	f001 fd9f 	bl	8005960 <HAL_RCC_GetHCLKFreq>
 8003e22:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	4620      	mov	r0, r4
 8003e2e:	f004 fb49 	bl	80084c4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f008 f8f1 	bl	800c01a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	695a      	ldr	r2, [r3, #20]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003e46:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f005 fcc9 	bl	80097e4 <USB_ReadInterrupts>
 8003e52:	4603      	mov	r3, r0
 8003e54:	f003 0308 	and.w	r3, r3, #8
 8003e58:	2b08      	cmp	r3, #8
 8003e5a:	d10a      	bne.n	8003e72 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f008 f8ce 	bl	800bffe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	695a      	ldr	r2, [r3, #20]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f002 0208 	and.w	r2, r2, #8
 8003e70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f005 fcb4 	bl	80097e4 <USB_ReadInterrupts>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e82:	2b80      	cmp	r3, #128	; 0x80
 8003e84:	d122      	bne.n	8003ecc <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003e86:	6a3b      	ldr	r3, [r7, #32]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e8e:	6a3b      	ldr	r3, [r7, #32]
 8003e90:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e92:	2301      	movs	r3, #1
 8003e94:	627b      	str	r3, [r7, #36]	; 0x24
 8003e96:	e014      	b.n	8003ec2 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003e98:	6879      	ldr	r1, [r7, #4]
 8003e9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	4413      	add	r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	440b      	add	r3, r1
 8003ea6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d105      	bne.n	8003ebc <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 fb09 	bl	80044ce <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d3e5      	bcc.n	8003e98 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f005 fc87 	bl	80097e4 <USB_ReadInterrupts>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003edc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ee0:	d13b      	bne.n	8003f5a <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ee6:	e02b      	b.n	8003f40 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eea:	015a      	lsls	r2, r3, #5
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	4413      	add	r3, r2
 8003ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ef8:	6879      	ldr	r1, [r7, #4]
 8003efa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003efc:	4613      	mov	r3, r2
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	4413      	add	r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	440b      	add	r3, r1
 8003f06:	3340      	adds	r3, #64	; 0x40
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d115      	bne.n	8003f3a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003f0e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	da12      	bge.n	8003f3a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003f14:	6879      	ldr	r1, [r7, #4]
 8003f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f18:	4613      	mov	r3, r2
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	4413      	add	r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	440b      	add	r3, r1
 8003f22:	333f      	adds	r3, #63	; 0x3f
 8003f24:	2201      	movs	r2, #1
 8003f26:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	4619      	mov	r1, r3
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 faca 	bl	80044ce <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d3ce      	bcc.n	8003ee8 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	695a      	ldr	r2, [r3, #20]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003f58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f005 fc40 	bl	80097e4 <USB_ReadInterrupts>
 8003f64:	4603      	mov	r3, r0
 8003f66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f6e:	d155      	bne.n	800401c <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f70:	2301      	movs	r3, #1
 8003f72:	627b      	str	r3, [r7, #36]	; 0x24
 8003f74:	e045      	b.n	8004002 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f78:	015a      	lsls	r2, r3, #5
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f86:	6879      	ldr	r1, [r7, #4]
 8003f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	00db      	lsls	r3, r3, #3
 8003f8e:	4413      	add	r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	440b      	add	r3, r1
 8003f94:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d12e      	bne.n	8003ffc <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003f9e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	da2b      	bge.n	8003ffc <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003fb0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d121      	bne.n	8003ffc <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003fb8:	6879      	ldr	r1, [r7, #4]
 8003fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	00db      	lsls	r3, r3, #3
 8003fc0:	4413      	add	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	440b      	add	r3, r1
 8003fc6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003fca:	2201      	movs	r2, #1
 8003fcc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003fce:	6a3b      	ldr	r3, [r7, #32]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003fd6:	6a3b      	ldr	r3, [r7, #32]
 8003fd8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003fda:	6a3b      	ldr	r3, [r7, #32]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10a      	bne.n	8003ffc <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	69fa      	ldr	r2, [r7, #28]
 8003ff0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ff4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ff8:	6053      	str	r3, [r2, #4]
            break;
 8003ffa:	e007      	b.n	800400c <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffe:	3301      	adds	r3, #1
 8004000:	627b      	str	r3, [r7, #36]	; 0x24
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004008:	429a      	cmp	r2, r3
 800400a:	d3b4      	bcc.n	8003f76 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	695a      	ldr	r2, [r3, #20]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800401a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4618      	mov	r0, r3
 8004022:	f005 fbdf 	bl	80097e4 <USB_ReadInterrupts>
 8004026:	4603      	mov	r3, r0
 8004028:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800402c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004030:	d10a      	bne.n	8004048 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f008 f872 	bl	800c11c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	695a      	ldr	r2, [r3, #20]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004046:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4618      	mov	r0, r3
 800404e:	f005 fbc9 	bl	80097e4 <USB_ReadInterrupts>
 8004052:	4603      	mov	r3, r0
 8004054:	f003 0304 	and.w	r3, r3, #4
 8004058:	2b04      	cmp	r3, #4
 800405a:	d115      	bne.n	8004088 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	f003 0304 	and.w	r3, r3, #4
 800406a:	2b00      	cmp	r3, #0
 800406c:	d002      	beq.n	8004074 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f008 f862 	bl	800c138 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6859      	ldr	r1, [r3, #4]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	69ba      	ldr	r2, [r7, #24]
 8004080:	430a      	orrs	r2, r1
 8004082:	605a      	str	r2, [r3, #4]
 8004084:	e000      	b.n	8004088 <HAL_PCD_IRQHandler+0x992>
      return;
 8004086:	bf00      	nop
    }
  }
}
 8004088:	3734      	adds	r7, #52	; 0x34
 800408a:	46bd      	mov	sp, r7
 800408c:	bd90      	pop	{r4, r7, pc}

0800408e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b082      	sub	sp, #8
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
 8004096:	460b      	mov	r3, r1
 8004098:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d101      	bne.n	80040a8 <HAL_PCD_SetAddress+0x1a>
 80040a4:	2302      	movs	r3, #2
 80040a6:	e013      	b.n	80040d0 <HAL_PCD_SetAddress+0x42>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	78fa      	ldrb	r2, [r7, #3]
 80040b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	78fa      	ldrb	r2, [r7, #3]
 80040be:	4611      	mov	r1, r2
 80040c0:	4618      	mov	r0, r3
 80040c2:	f005 fb27 	bl	8009714 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3708      	adds	r7, #8
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	4608      	mov	r0, r1
 80040e2:	4611      	mov	r1, r2
 80040e4:	461a      	mov	r2, r3
 80040e6:	4603      	mov	r3, r0
 80040e8:	70fb      	strb	r3, [r7, #3]
 80040ea:	460b      	mov	r3, r1
 80040ec:	803b      	strh	r3, [r7, #0]
 80040ee:	4613      	mov	r3, r2
 80040f0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80040f2:	2300      	movs	r3, #0
 80040f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80040f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	da0f      	bge.n	800411e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040fe:	78fb      	ldrb	r3, [r7, #3]
 8004100:	f003 020f 	and.w	r2, r3, #15
 8004104:	4613      	mov	r3, r2
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	4413      	add	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	3338      	adds	r3, #56	; 0x38
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	4413      	add	r3, r2
 8004112:	3304      	adds	r3, #4
 8004114:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2201      	movs	r2, #1
 800411a:	705a      	strb	r2, [r3, #1]
 800411c:	e00f      	b.n	800413e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800411e:	78fb      	ldrb	r3, [r7, #3]
 8004120:	f003 020f 	and.w	r2, r3, #15
 8004124:	4613      	mov	r3, r2
 8004126:	00db      	lsls	r3, r3, #3
 8004128:	4413      	add	r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	4413      	add	r3, r2
 8004134:	3304      	adds	r3, #4
 8004136:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800413e:	78fb      	ldrb	r3, [r7, #3]
 8004140:	f003 030f 	and.w	r3, r3, #15
 8004144:	b2da      	uxtb	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800414a:	883a      	ldrh	r2, [r7, #0]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	78ba      	ldrb	r2, [r7, #2]
 8004154:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	785b      	ldrb	r3, [r3, #1]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d004      	beq.n	8004168 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	b29a      	uxth	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004168:	78bb      	ldrb	r3, [r7, #2]
 800416a:	2b02      	cmp	r3, #2
 800416c:	d102      	bne.n	8004174 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800417a:	2b01      	cmp	r3, #1
 800417c:	d101      	bne.n	8004182 <HAL_PCD_EP_Open+0xaa>
 800417e:	2302      	movs	r3, #2
 8004180:	e00e      	b.n	80041a0 <HAL_PCD_EP_Open+0xc8>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68f9      	ldr	r1, [r7, #12]
 8004190:	4618      	mov	r0, r3
 8004192:	f004 fca7 	bl	8008ae4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800419e:	7afb      	ldrb	r3, [r7, #11]
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	460b      	mov	r3, r1
 80041b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80041b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	da0f      	bge.n	80041dc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041bc:	78fb      	ldrb	r3, [r7, #3]
 80041be:	f003 020f 	and.w	r2, r3, #15
 80041c2:	4613      	mov	r3, r2
 80041c4:	00db      	lsls	r3, r3, #3
 80041c6:	4413      	add	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	3338      	adds	r3, #56	; 0x38
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	4413      	add	r3, r2
 80041d0:	3304      	adds	r3, #4
 80041d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2201      	movs	r2, #1
 80041d8:	705a      	strb	r2, [r3, #1]
 80041da:	e00f      	b.n	80041fc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041dc:	78fb      	ldrb	r3, [r7, #3]
 80041de:	f003 020f 	and.w	r2, r3, #15
 80041e2:	4613      	mov	r3, r2
 80041e4:	00db      	lsls	r3, r3, #3
 80041e6:	4413      	add	r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	4413      	add	r3, r2
 80041f2:	3304      	adds	r3, #4
 80041f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80041fc:	78fb      	ldrb	r3, [r7, #3]
 80041fe:	f003 030f 	and.w	r3, r3, #15
 8004202:	b2da      	uxtb	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800420e:	2b01      	cmp	r3, #1
 8004210:	d101      	bne.n	8004216 <HAL_PCD_EP_Close+0x6e>
 8004212:	2302      	movs	r3, #2
 8004214:	e00e      	b.n	8004234 <HAL_PCD_EP_Close+0x8c>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2201      	movs	r2, #1
 800421a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68f9      	ldr	r1, [r7, #12]
 8004224:	4618      	mov	r0, r3
 8004226:	f004 fce5 	bl	8008bf4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	607a      	str	r2, [r7, #4]
 8004246:	603b      	str	r3, [r7, #0]
 8004248:	460b      	mov	r3, r1
 800424a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800424c:	7afb      	ldrb	r3, [r7, #11]
 800424e:	f003 020f 	and.w	r2, r3, #15
 8004252:	4613      	mov	r3, r2
 8004254:	00db      	lsls	r3, r3, #3
 8004256:	4413      	add	r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	4413      	add	r3, r2
 8004262:	3304      	adds	r3, #4
 8004264:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	2200      	movs	r2, #0
 8004276:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	2200      	movs	r2, #0
 800427c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800427e:	7afb      	ldrb	r3, [r7, #11]
 8004280:	f003 030f 	and.w	r3, r3, #15
 8004284:	b2da      	uxtb	r2, r3
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d102      	bne.n	8004298 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6818      	ldr	r0, [r3, #0]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	461a      	mov	r2, r3
 80042a4:	6979      	ldr	r1, [r7, #20]
 80042a6:	f004 fd81 	bl	8008dac <USB_EPStartXfer>

  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3718      	adds	r7, #24
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	460b      	mov	r3, r1
 80042be:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80042c0:	78fb      	ldrb	r3, [r7, #3]
 80042c2:	f003 020f 	and.w	r2, r3, #15
 80042c6:	6879      	ldr	r1, [r7, #4]
 80042c8:	4613      	mov	r3, r2
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	4413      	add	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	440b      	add	r3, r1
 80042d2:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80042d6:	681b      	ldr	r3, [r3, #0]
}
 80042d8:	4618      	mov	r0, r3
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	607a      	str	r2, [r7, #4]
 80042ee:	603b      	str	r3, [r7, #0]
 80042f0:	460b      	mov	r3, r1
 80042f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042f4:	7afb      	ldrb	r3, [r7, #11]
 80042f6:	f003 020f 	and.w	r2, r3, #15
 80042fa:	4613      	mov	r3, r2
 80042fc:	00db      	lsls	r3, r3, #3
 80042fe:	4413      	add	r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	3338      	adds	r3, #56	; 0x38
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	4413      	add	r3, r2
 8004308:	3304      	adds	r3, #4
 800430a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	683a      	ldr	r2, [r7, #0]
 8004316:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	2200      	movs	r2, #0
 800431c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	2201      	movs	r2, #1
 8004322:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004324:	7afb      	ldrb	r3, [r7, #11]
 8004326:	f003 030f 	and.w	r3, r3, #15
 800432a:	b2da      	uxtb	r2, r3
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d102      	bne.n	800433e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6818      	ldr	r0, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	b2db      	uxtb	r3, r3
 8004348:	461a      	mov	r2, r3
 800434a:	6979      	ldr	r1, [r7, #20]
 800434c:	f004 fd2e 	bl	8008dac <USB_EPStartXfer>

  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3718      	adds	r7, #24
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800435a:	b580      	push	{r7, lr}
 800435c:	b084      	sub	sp, #16
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
 8004362:	460b      	mov	r3, r1
 8004364:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004366:	78fb      	ldrb	r3, [r7, #3]
 8004368:	f003 020f 	and.w	r2, r3, #15
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	429a      	cmp	r2, r3
 8004372:	d901      	bls.n	8004378 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e050      	b.n	800441a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004378:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800437c:	2b00      	cmp	r3, #0
 800437e:	da0f      	bge.n	80043a0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004380:	78fb      	ldrb	r3, [r7, #3]
 8004382:	f003 020f 	and.w	r2, r3, #15
 8004386:	4613      	mov	r3, r2
 8004388:	00db      	lsls	r3, r3, #3
 800438a:	4413      	add	r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	3338      	adds	r3, #56	; 0x38
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	4413      	add	r3, r2
 8004394:	3304      	adds	r3, #4
 8004396:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2201      	movs	r2, #1
 800439c:	705a      	strb	r2, [r3, #1]
 800439e:	e00d      	b.n	80043bc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80043a0:	78fa      	ldrb	r2, [r7, #3]
 80043a2:	4613      	mov	r3, r2
 80043a4:	00db      	lsls	r3, r3, #3
 80043a6:	4413      	add	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	4413      	add	r3, r2
 80043b2:	3304      	adds	r3, #4
 80043b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2201      	movs	r2, #1
 80043c0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043c2:	78fb      	ldrb	r3, [r7, #3]
 80043c4:	f003 030f 	and.w	r3, r3, #15
 80043c8:	b2da      	uxtb	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d101      	bne.n	80043dc <HAL_PCD_EP_SetStall+0x82>
 80043d8:	2302      	movs	r3, #2
 80043da:	e01e      	b.n	800441a <HAL_PCD_EP_SetStall+0xc0>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68f9      	ldr	r1, [r7, #12]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f005 f8be 	bl	800956c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80043f0:	78fb      	ldrb	r3, [r7, #3]
 80043f2:	f003 030f 	and.w	r3, r3, #15
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10a      	bne.n	8004410 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6818      	ldr	r0, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	b2d9      	uxtb	r1, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800440a:	461a      	mov	r2, r3
 800440c:	f005 fab0 	bl	8009970 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b084      	sub	sp, #16
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
 800442a:	460b      	mov	r3, r1
 800442c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800442e:	78fb      	ldrb	r3, [r7, #3]
 8004430:	f003 020f 	and.w	r2, r3, #15
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	429a      	cmp	r2, r3
 800443a:	d901      	bls.n	8004440 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e042      	b.n	80044c6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004440:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004444:	2b00      	cmp	r3, #0
 8004446:	da0f      	bge.n	8004468 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004448:	78fb      	ldrb	r3, [r7, #3]
 800444a:	f003 020f 	and.w	r2, r3, #15
 800444e:	4613      	mov	r3, r2
 8004450:	00db      	lsls	r3, r3, #3
 8004452:	4413      	add	r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	3338      	adds	r3, #56	; 0x38
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	4413      	add	r3, r2
 800445c:	3304      	adds	r3, #4
 800445e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2201      	movs	r2, #1
 8004464:	705a      	strb	r2, [r3, #1]
 8004466:	e00f      	b.n	8004488 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004468:	78fb      	ldrb	r3, [r7, #3]
 800446a:	f003 020f 	and.w	r2, r3, #15
 800446e:	4613      	mov	r3, r2
 8004470:	00db      	lsls	r3, r3, #3
 8004472:	4413      	add	r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	4413      	add	r3, r2
 800447e:	3304      	adds	r3, #4
 8004480:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800448e:	78fb      	ldrb	r3, [r7, #3]
 8004490:	f003 030f 	and.w	r3, r3, #15
 8004494:	b2da      	uxtb	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d101      	bne.n	80044a8 <HAL_PCD_EP_ClrStall+0x86>
 80044a4:	2302      	movs	r3, #2
 80044a6:	e00e      	b.n	80044c6 <HAL_PCD_EP_ClrStall+0xa4>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68f9      	ldr	r1, [r7, #12]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f005 f8c6 	bl	8009648 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b084      	sub	sp, #16
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
 80044d6:	460b      	mov	r3, r1
 80044d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80044da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	da0c      	bge.n	80044fc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044e2:	78fb      	ldrb	r3, [r7, #3]
 80044e4:	f003 020f 	and.w	r2, r3, #15
 80044e8:	4613      	mov	r3, r2
 80044ea:	00db      	lsls	r3, r3, #3
 80044ec:	4413      	add	r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	3338      	adds	r3, #56	; 0x38
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	4413      	add	r3, r2
 80044f6:	3304      	adds	r3, #4
 80044f8:	60fb      	str	r3, [r7, #12]
 80044fa:	e00c      	b.n	8004516 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044fc:	78fb      	ldrb	r3, [r7, #3]
 80044fe:	f003 020f 	and.w	r2, r3, #15
 8004502:	4613      	mov	r3, r2
 8004504:	00db      	lsls	r3, r3, #3
 8004506:	4413      	add	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	4413      	add	r3, r2
 8004512:	3304      	adds	r3, #4
 8004514:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68f9      	ldr	r1, [r7, #12]
 800451c:	4618      	mov	r0, r3
 800451e:	f004 fee5 	bl	80092ec <USB_EPStopXfer>
 8004522:	4603      	mov	r3, r0
 8004524:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004526:	7afb      	ldrb	r3, [r7, #11]
}
 8004528:	4618      	mov	r0, r3
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b08a      	sub	sp, #40	; 0x28
 8004534:	af02      	add	r7, sp, #8
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	4613      	mov	r3, r2
 8004548:	00db      	lsls	r3, r3, #3
 800454a:	4413      	add	r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	3338      	adds	r3, #56	; 0x38
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	4413      	add	r3, r2
 8004554:	3304      	adds	r3, #4
 8004556:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	695a      	ldr	r2, [r3, #20]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	429a      	cmp	r2, r3
 8004562:	d901      	bls.n	8004568 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e06c      	b.n	8004642 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	691a      	ldr	r2, [r3, #16]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	69fa      	ldr	r2, [r7, #28]
 800457a:	429a      	cmp	r2, r3
 800457c:	d902      	bls.n	8004584 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	3303      	adds	r3, #3
 8004588:	089b      	lsrs	r3, r3, #2
 800458a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800458c:	e02b      	b.n	80045e6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	691a      	ldr	r2, [r3, #16]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	69fa      	ldr	r2, [r7, #28]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d902      	bls.n	80045aa <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	3303      	adds	r3, #3
 80045ae:	089b      	lsrs	r3, r3, #2
 80045b0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	68d9      	ldr	r1, [r3, #12]
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	b2da      	uxtb	r2, r3
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	9300      	str	r3, [sp, #0]
 80045c6:	4603      	mov	r3, r0
 80045c8:	6978      	ldr	r0, [r7, #20]
 80045ca:	f004 ff39 	bl	8009440 <USB_WritePacket>

    ep->xfer_buff  += len;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	68da      	ldr	r2, [r3, #12]
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	441a      	add	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	695a      	ldr	r2, [r3, #20]
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	441a      	add	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	015a      	lsls	r2, r3, #5
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	4413      	add	r3, r2
 80045ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80045f6:	69ba      	ldr	r2, [r7, #24]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d809      	bhi.n	8004610 <PCD_WriteEmptyTxFifo+0xe0>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	695a      	ldr	r2, [r3, #20]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004604:	429a      	cmp	r2, r3
 8004606:	d203      	bcs.n	8004610 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1be      	bne.n	800458e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	691a      	ldr	r2, [r3, #16]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	695b      	ldr	r3, [r3, #20]
 8004618:	429a      	cmp	r2, r3
 800461a:	d811      	bhi.n	8004640 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	f003 030f 	and.w	r3, r3, #15
 8004622:	2201      	movs	r2, #1
 8004624:	fa02 f303 	lsl.w	r3, r2, r3
 8004628:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004630:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	43db      	mvns	r3, r3
 8004636:	6939      	ldr	r1, [r7, #16]
 8004638:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800463c:	4013      	ands	r3, r2
 800463e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3720      	adds	r7, #32
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
	...

0800464c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b088      	sub	sp, #32
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	333c      	adds	r3, #60	; 0x3c
 8004664:	3304      	adds	r3, #4
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	015a      	lsls	r2, r3, #5
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	4413      	add	r3, r2
 8004672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d17b      	bne.n	800477a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	f003 0308 	and.w	r3, r3, #8
 8004688:	2b00      	cmp	r3, #0
 800468a:	d015      	beq.n	80046b8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	4a61      	ldr	r2, [pc, #388]	; (8004814 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004690:	4293      	cmp	r3, r2
 8004692:	f240 80b9 	bls.w	8004808 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 80b3 	beq.w	8004808 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	015a      	lsls	r2, r3, #5
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	4413      	add	r3, r2
 80046aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ae:	461a      	mov	r2, r3
 80046b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046b4:	6093      	str	r3, [r2, #8]
 80046b6:	e0a7      	b.n	8004808 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	f003 0320 	and.w	r3, r3, #32
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d009      	beq.n	80046d6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	015a      	lsls	r2, r3, #5
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	4413      	add	r3, r2
 80046ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ce:	461a      	mov	r2, r3
 80046d0:	2320      	movs	r3, #32
 80046d2:	6093      	str	r3, [r2, #8]
 80046d4:	e098      	b.n	8004808 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f040 8093 	bne.w	8004808 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	4a4b      	ldr	r2, [pc, #300]	; (8004814 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d90f      	bls.n	800470a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00a      	beq.n	800470a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	015a      	lsls	r2, r3, #5
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	4413      	add	r3, r2
 80046fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004700:	461a      	mov	r2, r3
 8004702:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004706:	6093      	str	r3, [r2, #8]
 8004708:	e07e      	b.n	8004808 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	4613      	mov	r3, r2
 800470e:	00db      	lsls	r3, r3, #3
 8004710:	4413      	add	r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	4413      	add	r3, r2
 800471c:	3304      	adds	r3, #4
 800471e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6a1a      	ldr	r2, [r3, #32]
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	0159      	lsls	r1, r3, #5
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	440b      	add	r3, r1
 800472c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004736:	1ad2      	subs	r2, r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d114      	bne.n	800476c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d109      	bne.n	800475e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6818      	ldr	r0, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004754:	461a      	mov	r2, r3
 8004756:	2101      	movs	r1, #1
 8004758:	f005 f90a 	bl	8009970 <USB_EP0_OutStart>
 800475c:	e006      	b.n	800476c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	68da      	ldr	r2, [r3, #12]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	441a      	add	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	b2db      	uxtb	r3, r3
 8004770:	4619      	mov	r1, r3
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f007 fc0e 	bl	800bf94 <HAL_PCD_DataOutStageCallback>
 8004778:	e046      	b.n	8004808 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	4a26      	ldr	r2, [pc, #152]	; (8004818 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d124      	bne.n	80047cc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00a      	beq.n	80047a2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	015a      	lsls	r2, r3, #5
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	4413      	add	r3, r2
 8004794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004798:	461a      	mov	r2, r3
 800479a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800479e:	6093      	str	r3, [r2, #8]
 80047a0:	e032      	b.n	8004808 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	f003 0320 	and.w	r3, r3, #32
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d008      	beq.n	80047be <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	015a      	lsls	r2, r3, #5
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	4413      	add	r3, r2
 80047b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b8:	461a      	mov	r2, r3
 80047ba:	2320      	movs	r3, #32
 80047bc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	4619      	mov	r1, r3
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f007 fbe5 	bl	800bf94 <HAL_PCD_DataOutStageCallback>
 80047ca:	e01d      	b.n	8004808 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d114      	bne.n	80047fc <PCD_EP_OutXfrComplete_int+0x1b0>
 80047d2:	6879      	ldr	r1, [r7, #4]
 80047d4:	683a      	ldr	r2, [r7, #0]
 80047d6:	4613      	mov	r3, r2
 80047d8:	00db      	lsls	r3, r3, #3
 80047da:	4413      	add	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	440b      	add	r3, r1
 80047e0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d108      	bne.n	80047fc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6818      	ldr	r0, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80047f4:	461a      	mov	r2, r3
 80047f6:	2100      	movs	r1, #0
 80047f8:	f005 f8ba 	bl	8009970 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	4619      	mov	r1, r3
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f007 fbc6 	bl	800bf94 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3720      	adds	r7, #32
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	4f54300a 	.word	0x4f54300a
 8004818:	4f54310a 	.word	0x4f54310a

0800481c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b086      	sub	sp, #24
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	333c      	adds	r3, #60	; 0x3c
 8004834:	3304      	adds	r3, #4
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	015a      	lsls	r2, r3, #5
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	4413      	add	r3, r2
 8004842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	4a15      	ldr	r2, [pc, #84]	; (80048a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d90e      	bls.n	8004870 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004858:	2b00      	cmp	r3, #0
 800485a:	d009      	beq.n	8004870 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	015a      	lsls	r2, r3, #5
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	4413      	add	r3, r2
 8004864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004868:	461a      	mov	r2, r3
 800486a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800486e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f007 fb7d 	bl	800bf70 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	4a0a      	ldr	r2, [pc, #40]	; (80048a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d90c      	bls.n	8004898 <PCD_EP_OutSetupPacket_int+0x7c>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	2b01      	cmp	r3, #1
 8004884:	d108      	bne.n	8004898 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6818      	ldr	r0, [r3, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004890:	461a      	mov	r2, r3
 8004892:	2101      	movs	r1, #1
 8004894:	f005 f86c 	bl	8009970 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3718      	adds	r7, #24
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	4f54300a 	.word	0x4f54300a

080048a8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	460b      	mov	r3, r1
 80048b2:	70fb      	strb	r3, [r7, #3]
 80048b4:	4613      	mov	r3, r2
 80048b6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048be:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80048c0:	78fb      	ldrb	r3, [r7, #3]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d107      	bne.n	80048d6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80048c6:	883b      	ldrh	r3, [r7, #0]
 80048c8:	0419      	lsls	r1, r3, #16
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68ba      	ldr	r2, [r7, #8]
 80048d0:	430a      	orrs	r2, r1
 80048d2:	629a      	str	r2, [r3, #40]	; 0x28
 80048d4:	e028      	b.n	8004928 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048dc:	0c1b      	lsrs	r3, r3, #16
 80048de:	68ba      	ldr	r2, [r7, #8]
 80048e0:	4413      	add	r3, r2
 80048e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80048e4:	2300      	movs	r3, #0
 80048e6:	73fb      	strb	r3, [r7, #15]
 80048e8:	e00d      	b.n	8004906 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	7bfb      	ldrb	r3, [r7, #15]
 80048f0:	3340      	adds	r3, #64	; 0x40
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	4413      	add	r3, r2
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	0c1b      	lsrs	r3, r3, #16
 80048fa:	68ba      	ldr	r2, [r7, #8]
 80048fc:	4413      	add	r3, r2
 80048fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004900:	7bfb      	ldrb	r3, [r7, #15]
 8004902:	3301      	adds	r3, #1
 8004904:	73fb      	strb	r3, [r7, #15]
 8004906:	7bfa      	ldrb	r2, [r7, #15]
 8004908:	78fb      	ldrb	r3, [r7, #3]
 800490a:	3b01      	subs	r3, #1
 800490c:	429a      	cmp	r2, r3
 800490e:	d3ec      	bcc.n	80048ea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004910:	883b      	ldrh	r3, [r7, #0]
 8004912:	0418      	lsls	r0, r3, #16
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6819      	ldr	r1, [r3, #0]
 8004918:	78fb      	ldrb	r3, [r7, #3]
 800491a:	3b01      	subs	r3, #1
 800491c:	68ba      	ldr	r2, [r7, #8]
 800491e:	4302      	orrs	r2, r0
 8004920:	3340      	adds	r3, #64	; 0x40
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	440b      	add	r3, r1
 8004926:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3714      	adds	r7, #20
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr

08004936 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004936:	b480      	push	{r7}
 8004938:	b083      	sub	sp, #12
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
 800493e:	460b      	mov	r3, r1
 8004940:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	887a      	ldrh	r2, [r7, #2]
 8004948:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	699b      	ldr	r3, [r3, #24]
 800497a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004986:	4b05      	ldr	r3, [pc, #20]	; (800499c <HAL_PCDEx_ActivateLPM+0x44>)
 8004988:	4313      	orrs	r3, r2
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3714      	adds	r7, #20
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr
 800499c:	10000003 	.word	0x10000003

080049a0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	460b      	mov	r3, r1
 80049aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80049c0:	4b19      	ldr	r3, [pc, #100]	; (8004a28 <HAL_PWREx_ConfigSupply+0x70>)
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f003 0304 	and.w	r3, r3, #4
 80049c8:	2b04      	cmp	r3, #4
 80049ca:	d00a      	beq.n	80049e2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80049cc:	4b16      	ldr	r3, [pc, #88]	; (8004a28 <HAL_PWREx_ConfigSupply+0x70>)
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	f003 0307 	and.w	r3, r3, #7
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d001      	beq.n	80049de <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e01f      	b.n	8004a1e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80049de:	2300      	movs	r3, #0
 80049e0:	e01d      	b.n	8004a1e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80049e2:	4b11      	ldr	r3, [pc, #68]	; (8004a28 <HAL_PWREx_ConfigSupply+0x70>)
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	f023 0207 	bic.w	r2, r3, #7
 80049ea:	490f      	ldr	r1, [pc, #60]	; (8004a28 <HAL_PWREx_ConfigSupply+0x70>)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80049f2:	f7fd f987 	bl	8001d04 <HAL_GetTick>
 80049f6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80049f8:	e009      	b.n	8004a0e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80049fa:	f7fd f983 	bl	8001d04 <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a08:	d901      	bls.n	8004a0e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e007      	b.n	8004a1e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004a0e:	4b06      	ldr	r3, [pc, #24]	; (8004a28 <HAL_PWREx_ConfigSupply+0x70>)
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a1a:	d1ee      	bne.n	80049fa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3710      	adds	r7, #16
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	58024800 	.word	0x58024800

08004a2c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004a30:	4b05      	ldr	r3, [pc, #20]	; (8004a48 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	4a04      	ldr	r2, [pc, #16]	; (8004a48 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004a36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a3a:	60d3      	str	r3, [r2, #12]
}
 8004a3c:	bf00      	nop
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	58024800 	.word	0x58024800

08004a4c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b08c      	sub	sp, #48	; 0x30
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d102      	bne.n	8004a60 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	f000 bc48 	b.w	80052f0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0301 	and.w	r3, r3, #1
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f000 8088 	beq.w	8004b7e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a6e:	4b99      	ldr	r3, [pc, #612]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a76:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a78:	4b96      	ldr	r3, [pc, #600]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a7c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a80:	2b10      	cmp	r3, #16
 8004a82:	d007      	beq.n	8004a94 <HAL_RCC_OscConfig+0x48>
 8004a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a86:	2b18      	cmp	r3, #24
 8004a88:	d111      	bne.n	8004aae <HAL_RCC_OscConfig+0x62>
 8004a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8c:	f003 0303 	and.w	r3, r3, #3
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d10c      	bne.n	8004aae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a94:	4b8f      	ldr	r3, [pc, #572]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d06d      	beq.n	8004b7c <HAL_RCC_OscConfig+0x130>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d169      	bne.n	8004b7c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	f000 bc21 	b.w	80052f0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ab6:	d106      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x7a>
 8004ab8:	4b86      	ldr	r3, [pc, #536]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a85      	ldr	r2, [pc, #532]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004abe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ac2:	6013      	str	r3, [r2, #0]
 8004ac4:	e02e      	b.n	8004b24 <HAL_RCC_OscConfig+0xd8>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10c      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x9c>
 8004ace:	4b81      	ldr	r3, [pc, #516]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a80      	ldr	r2, [pc, #512]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004ad4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ad8:	6013      	str	r3, [r2, #0]
 8004ada:	4b7e      	ldr	r3, [pc, #504]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a7d      	ldr	r2, [pc, #500]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004ae0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ae4:	6013      	str	r3, [r2, #0]
 8004ae6:	e01d      	b.n	8004b24 <HAL_RCC_OscConfig+0xd8>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004af0:	d10c      	bne.n	8004b0c <HAL_RCC_OscConfig+0xc0>
 8004af2:	4b78      	ldr	r3, [pc, #480]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a77      	ldr	r2, [pc, #476]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004af8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004afc:	6013      	str	r3, [r2, #0]
 8004afe:	4b75      	ldr	r3, [pc, #468]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a74      	ldr	r2, [pc, #464]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b08:	6013      	str	r3, [r2, #0]
 8004b0a:	e00b      	b.n	8004b24 <HAL_RCC_OscConfig+0xd8>
 8004b0c:	4b71      	ldr	r3, [pc, #452]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a70      	ldr	r2, [pc, #448]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004b12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b16:	6013      	str	r3, [r2, #0]
 8004b18:	4b6e      	ldr	r3, [pc, #440]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a6d      	ldr	r2, [pc, #436]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004b1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d013      	beq.n	8004b54 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b2c:	f7fd f8ea 	bl	8001d04 <HAL_GetTick>
 8004b30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b32:	e008      	b.n	8004b46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b34:	f7fd f8e6 	bl	8001d04 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	2b64      	cmp	r3, #100	; 0x64
 8004b40:	d901      	bls.n	8004b46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e3d4      	b.n	80052f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b46:	4b63      	ldr	r3, [pc, #396]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d0f0      	beq.n	8004b34 <HAL_RCC_OscConfig+0xe8>
 8004b52:	e014      	b.n	8004b7e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b54:	f7fd f8d6 	bl	8001d04 <HAL_GetTick>
 8004b58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b5a:	e008      	b.n	8004b6e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b5c:	f7fd f8d2 	bl	8001d04 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b64      	cmp	r3, #100	; 0x64
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e3c0      	b.n	80052f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b6e:	4b59      	ldr	r3, [pc, #356]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1f0      	bne.n	8004b5c <HAL_RCC_OscConfig+0x110>
 8004b7a:	e000      	b.n	8004b7e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	f000 80ca 	beq.w	8004d20 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b8c:	4b51      	ldr	r3, [pc, #324]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b94:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b96:	4b4f      	ldr	r3, [pc, #316]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004b9c:	6a3b      	ldr	r3, [r7, #32]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d007      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x166>
 8004ba2:	6a3b      	ldr	r3, [r7, #32]
 8004ba4:	2b18      	cmp	r3, #24
 8004ba6:	d156      	bne.n	8004c56 <HAL_RCC_OscConfig+0x20a>
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	f003 0303 	and.w	r3, r3, #3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d151      	bne.n	8004c56 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bb2:	4b48      	ldr	r3, [pc, #288]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0304 	and.w	r3, r3, #4
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d005      	beq.n	8004bca <HAL_RCC_OscConfig+0x17e>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d101      	bne.n	8004bca <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e392      	b.n	80052f0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004bca:	4b42      	ldr	r3, [pc, #264]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f023 0219 	bic.w	r2, r3, #25
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	493f      	ldr	r1, [pc, #252]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bdc:	f7fd f892 	bl	8001d04 <HAL_GetTick>
 8004be0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004be2:	e008      	b.n	8004bf6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004be4:	f7fd f88e 	bl	8001d04 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e37c      	b.n	80052f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bf6:	4b37      	ldr	r3, [pc, #220]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0304 	and.w	r3, r3, #4
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d0f0      	beq.n	8004be4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c02:	f7fd f8af 	bl	8001d64 <HAL_GetREVID>
 8004c06:	4603      	mov	r3, r0
 8004c08:	f241 0203 	movw	r2, #4099	; 0x1003
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d817      	bhi.n	8004c40 <HAL_RCC_OscConfig+0x1f4>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	2b40      	cmp	r3, #64	; 0x40
 8004c16:	d108      	bne.n	8004c2a <HAL_RCC_OscConfig+0x1de>
 8004c18:	4b2e      	ldr	r3, [pc, #184]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004c20:	4a2c      	ldr	r2, [pc, #176]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004c22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c26:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c28:	e07a      	b.n	8004d20 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c2a:	4b2a      	ldr	r3, [pc, #168]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	031b      	lsls	r3, r3, #12
 8004c38:	4926      	ldr	r1, [pc, #152]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c3e:	e06f      	b.n	8004d20 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c40:	4b24      	ldr	r3, [pc, #144]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	061b      	lsls	r3, r3, #24
 8004c4e:	4921      	ldr	r1, [pc, #132]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c54:	e064      	b.n	8004d20 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d047      	beq.n	8004cee <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004c5e:	4b1d      	ldr	r3, [pc, #116]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f023 0219 	bic.w	r2, r3, #25
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	491a      	ldr	r1, [pc, #104]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c70:	f7fd f848 	bl	8001d04 <HAL_GetTick>
 8004c74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c76:	e008      	b.n	8004c8a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c78:	f7fd f844 	bl	8001d04 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d901      	bls.n	8004c8a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e332      	b.n	80052f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c8a:	4b12      	ldr	r3, [pc, #72]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0304 	and.w	r3, r3, #4
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d0f0      	beq.n	8004c78 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c96:	f7fd f865 	bl	8001d64 <HAL_GetREVID>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d819      	bhi.n	8004cd8 <HAL_RCC_OscConfig+0x28c>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	2b40      	cmp	r3, #64	; 0x40
 8004caa:	d108      	bne.n	8004cbe <HAL_RCC_OscConfig+0x272>
 8004cac:	4b09      	ldr	r3, [pc, #36]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004cb4:	4a07      	ldr	r2, [pc, #28]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004cb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cba:	6053      	str	r3, [r2, #4]
 8004cbc:	e030      	b.n	8004d20 <HAL_RCC_OscConfig+0x2d4>
 8004cbe:	4b05      	ldr	r3, [pc, #20]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	031b      	lsls	r3, r3, #12
 8004ccc:	4901      	ldr	r1, [pc, #4]	; (8004cd4 <HAL_RCC_OscConfig+0x288>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	604b      	str	r3, [r1, #4]
 8004cd2:	e025      	b.n	8004d20 <HAL_RCC_OscConfig+0x2d4>
 8004cd4:	58024400 	.word	0x58024400
 8004cd8:	4b9a      	ldr	r3, [pc, #616]	; (8004f44 <HAL_RCC_OscConfig+0x4f8>)
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	061b      	lsls	r3, r3, #24
 8004ce6:	4997      	ldr	r1, [pc, #604]	; (8004f44 <HAL_RCC_OscConfig+0x4f8>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	604b      	str	r3, [r1, #4]
 8004cec:	e018      	b.n	8004d20 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cee:	4b95      	ldr	r3, [pc, #596]	; (8004f44 <HAL_RCC_OscConfig+0x4f8>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a94      	ldr	r2, [pc, #592]	; (8004f44 <HAL_RCC_OscConfig+0x4f8>)
 8004cf4:	f023 0301 	bic.w	r3, r3, #1
 8004cf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfa:	f7fd f803 	bl	8001d04 <HAL_GetTick>
 8004cfe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d00:	e008      	b.n	8004d14 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d02:	f7fc ffff 	bl	8001d04 <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d901      	bls.n	8004d14 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e2ed      	b.n	80052f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d14:	4b8b      	ldr	r3, [pc, #556]	; (8004f44 <HAL_RCC_OscConfig+0x4f8>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0304 	and.w	r3, r3, #4
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1f0      	bne.n	8004d02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0310 	and.w	r3, r3, #16
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f000 80a9 	beq.w	8004e80 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d2e:	4b85      	ldr	r3, [pc, #532]	; (8004f44 <HAL_RCC_OscConfig+0x4f8>)
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d36:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d38:	4b82      	ldr	r3, [pc, #520]	; (8004f44 <HAL_RCC_OscConfig+0x4f8>)
 8004d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	2b08      	cmp	r3, #8
 8004d42:	d007      	beq.n	8004d54 <HAL_RCC_OscConfig+0x308>
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	2b18      	cmp	r3, #24
 8004d48:	d13a      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x374>
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	f003 0303 	and.w	r3, r3, #3
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d135      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d54:	4b7b      	ldr	r3, [pc, #492]	; (8004f44 <HAL_RCC_OscConfig+0x4f8>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d005      	beq.n	8004d6c <HAL_RCC_OscConfig+0x320>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	69db      	ldr	r3, [r3, #28]
 8004d64:	2b80      	cmp	r3, #128	; 0x80
 8004d66:	d001      	beq.n	8004d6c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e2c1      	b.n	80052f0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d6c:	f7fc fffa 	bl	8001d64 <HAL_GetREVID>
 8004d70:	4603      	mov	r3, r0
 8004d72:	f241 0203 	movw	r2, #4099	; 0x1003
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d817      	bhi.n	8004daa <HAL_RCC_OscConfig+0x35e>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	2b20      	cmp	r3, #32
 8004d80:	d108      	bne.n	8004d94 <HAL_RCC_OscConfig+0x348>
 8004d82:	4b70      	ldr	r3, [pc, #448]	; (8004f44 <HAL_RCC_OscConfig+0x4f8>)
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004d8a:	4a6e      	ldr	r2, [pc, #440]	; (8004f44 <HAL_RCC_OscConfig+0x4f8>)
 8004d8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d90:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d92:	e075      	b.n	8004e80 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d94:	4b6b      	ldr	r3, [pc, #428]	; (8004f44 <HAL_RCC_OscConfig+0x4f8>)
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a1b      	ldr	r3, [r3, #32]
 8004da0:	069b      	lsls	r3, r3, #26
 8004da2:	4968      	ldr	r1, [pc, #416]	; (8004f44 <HAL_RCC_OscConfig+0x4f8>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004da8:	e06a      	b.n	8004e80 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004daa:	4b66      	ldr	r3, [pc, #408]	; (8004f44 <HAL_RCC_OscConfig+0x4f8>)
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a1b      	ldr	r3, [r3, #32]
 8004db6:	061b      	lsls	r3, r3, #24
 8004db8:	4962      	ldr	r1, [pc, #392]	; (8004f44 <HAL_RCC_OscConfig+0x4f8>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004dbe:	e05f      	b.n	8004e80 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	69db      	ldr	r3, [r3, #28]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d042      	beq.n	8004e4e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004dc8:	4b5e      	ldr	r3, [pc, #376]	; (8004f44 <HAL_RCC_OscConfig+0x4f8>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a5d      	ldr	r2, [pc, #372]	; (8004f44 <HAL_RCC_OscConfig+0x4f8>)
 8004dce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd4:	f7fc ff96 	bl	8001d04 <HAL_GetTick>
 8004dd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004dda:	e008      	b.n	8004dee <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004ddc:	f7fc ff92 	bl	8001d04 <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d901      	bls.n	8004dee <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e280      	b.n	80052f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004dee:	4b55      	ldr	r3, [pc, #340]	; (8004f44 <HAL_RCC_OscConfig+0x4f8>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d0f0      	beq.n	8004ddc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004dfa:	f7fc ffb3 	bl	8001d64 <HAL_GetREVID>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	f241 0203 	movw	r2, #4099	; 0x1003
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d817      	bhi.n	8004e38 <HAL_RCC_OscConfig+0x3ec>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a1b      	ldr	r3, [r3, #32]
 8004e0c:	2b20      	cmp	r3, #32
 8004e0e:	d108      	bne.n	8004e22 <HAL_RCC_OscConfig+0x3d6>
 8004e10:	4b4c      	ldr	r3, [pc, #304]	; (8004f44 <HAL_RCC_OscConfig+0x4f8>)
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004e18:	4a4a      	ldr	r2, [pc, #296]	; (8004f44 <HAL_RCC_OscConfig+0x4f8>)
 8004e1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e1e:	6053      	str	r3, [r2, #4]
 8004e20:	e02e      	b.n	8004e80 <HAL_RCC_OscConfig+0x434>
 8004e22:	4b48      	ldr	r3, [pc, #288]	; (8004f44 <HAL_RCC_OscConfig+0x4f8>)
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	069b      	lsls	r3, r3, #26
 8004e30:	4944      	ldr	r1, [pc, #272]	; (8004f44 <HAL_RCC_OscConfig+0x4f8>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	604b      	str	r3, [r1, #4]
 8004e36:	e023      	b.n	8004e80 <HAL_RCC_OscConfig+0x434>
 8004e38:	4b42      	ldr	r3, [pc, #264]	; (8004f44 <HAL_RCC_OscConfig+0x4f8>)
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a1b      	ldr	r3, [r3, #32]
 8004e44:	061b      	lsls	r3, r3, #24
 8004e46:	493f      	ldr	r1, [pc, #252]	; (8004f44 <HAL_RCC_OscConfig+0x4f8>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	60cb      	str	r3, [r1, #12]
 8004e4c:	e018      	b.n	8004e80 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004e4e:	4b3d      	ldr	r3, [pc, #244]	; (8004f44 <HAL_RCC_OscConfig+0x4f8>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a3c      	ldr	r2, [pc, #240]	; (8004f44 <HAL_RCC_OscConfig+0x4f8>)
 8004e54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e5a:	f7fc ff53 	bl	8001d04 <HAL_GetTick>
 8004e5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004e60:	e008      	b.n	8004e74 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004e62:	f7fc ff4f 	bl	8001d04 <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d901      	bls.n	8004e74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e23d      	b.n	80052f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004e74:	4b33      	ldr	r3, [pc, #204]	; (8004f44 <HAL_RCC_OscConfig+0x4f8>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1f0      	bne.n	8004e62 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0308 	and.w	r3, r3, #8
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d036      	beq.n	8004efa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	695b      	ldr	r3, [r3, #20]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d019      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e94:	4b2b      	ldr	r3, [pc, #172]	; (8004f44 <HAL_RCC_OscConfig+0x4f8>)
 8004e96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e98:	4a2a      	ldr	r2, [pc, #168]	; (8004f44 <HAL_RCC_OscConfig+0x4f8>)
 8004e9a:	f043 0301 	orr.w	r3, r3, #1
 8004e9e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ea0:	f7fc ff30 	bl	8001d04 <HAL_GetTick>
 8004ea4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ea6:	e008      	b.n	8004eba <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ea8:	f7fc ff2c 	bl	8001d04 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d901      	bls.n	8004eba <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e21a      	b.n	80052f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004eba:	4b22      	ldr	r3, [pc, #136]	; (8004f44 <HAL_RCC_OscConfig+0x4f8>)
 8004ebc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d0f0      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x45c>
 8004ec6:	e018      	b.n	8004efa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ec8:	4b1e      	ldr	r3, [pc, #120]	; (8004f44 <HAL_RCC_OscConfig+0x4f8>)
 8004eca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ecc:	4a1d      	ldr	r2, [pc, #116]	; (8004f44 <HAL_RCC_OscConfig+0x4f8>)
 8004ece:	f023 0301 	bic.w	r3, r3, #1
 8004ed2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ed4:	f7fc ff16 	bl	8001d04 <HAL_GetTick>
 8004ed8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004eda:	e008      	b.n	8004eee <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004edc:	f7fc ff12 	bl	8001d04 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e200      	b.n	80052f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004eee:	4b15      	ldr	r3, [pc, #84]	; (8004f44 <HAL_RCC_OscConfig+0x4f8>)
 8004ef0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1f0      	bne.n	8004edc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0320 	and.w	r3, r3, #32
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d039      	beq.n	8004f7a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d01c      	beq.n	8004f48 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f0e:	4b0d      	ldr	r3, [pc, #52]	; (8004f44 <HAL_RCC_OscConfig+0x4f8>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a0c      	ldr	r2, [pc, #48]	; (8004f44 <HAL_RCC_OscConfig+0x4f8>)
 8004f14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004f18:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004f1a:	f7fc fef3 	bl	8001d04 <HAL_GetTick>
 8004f1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f20:	e008      	b.n	8004f34 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f22:	f7fc feef 	bl	8001d04 <HAL_GetTick>
 8004f26:	4602      	mov	r2, r0
 8004f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d901      	bls.n	8004f34 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e1dd      	b.n	80052f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f34:	4b03      	ldr	r3, [pc, #12]	; (8004f44 <HAL_RCC_OscConfig+0x4f8>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d0f0      	beq.n	8004f22 <HAL_RCC_OscConfig+0x4d6>
 8004f40:	e01b      	b.n	8004f7a <HAL_RCC_OscConfig+0x52e>
 8004f42:	bf00      	nop
 8004f44:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f48:	4b9b      	ldr	r3, [pc, #620]	; (80051b8 <HAL_RCC_OscConfig+0x76c>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a9a      	ldr	r2, [pc, #616]	; (80051b8 <HAL_RCC_OscConfig+0x76c>)
 8004f4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f52:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004f54:	f7fc fed6 	bl	8001d04 <HAL_GetTick>
 8004f58:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f5a:	e008      	b.n	8004f6e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f5c:	f7fc fed2 	bl	8001d04 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d901      	bls.n	8004f6e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e1c0      	b.n	80052f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f6e:	4b92      	ldr	r3, [pc, #584]	; (80051b8 <HAL_RCC_OscConfig+0x76c>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1f0      	bne.n	8004f5c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0304 	and.w	r3, r3, #4
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f000 8081 	beq.w	800508a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004f88:	4b8c      	ldr	r3, [pc, #560]	; (80051bc <HAL_RCC_OscConfig+0x770>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a8b      	ldr	r2, [pc, #556]	; (80051bc <HAL_RCC_OscConfig+0x770>)
 8004f8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f92:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f94:	f7fc feb6 	bl	8001d04 <HAL_GetTick>
 8004f98:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f9a:	e008      	b.n	8004fae <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f9c:	f7fc feb2 	bl	8001d04 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	2b64      	cmp	r3, #100	; 0x64
 8004fa8:	d901      	bls.n	8004fae <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e1a0      	b.n	80052f0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fae:	4b83      	ldr	r3, [pc, #524]	; (80051bc <HAL_RCC_OscConfig+0x770>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d0f0      	beq.n	8004f9c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d106      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x584>
 8004fc2:	4b7d      	ldr	r3, [pc, #500]	; (80051b8 <HAL_RCC_OscConfig+0x76c>)
 8004fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc6:	4a7c      	ldr	r2, [pc, #496]	; (80051b8 <HAL_RCC_OscConfig+0x76c>)
 8004fc8:	f043 0301 	orr.w	r3, r3, #1
 8004fcc:	6713      	str	r3, [r2, #112]	; 0x70
 8004fce:	e02d      	b.n	800502c <HAL_RCC_OscConfig+0x5e0>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10c      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x5a6>
 8004fd8:	4b77      	ldr	r3, [pc, #476]	; (80051b8 <HAL_RCC_OscConfig+0x76c>)
 8004fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fdc:	4a76      	ldr	r2, [pc, #472]	; (80051b8 <HAL_RCC_OscConfig+0x76c>)
 8004fde:	f023 0301 	bic.w	r3, r3, #1
 8004fe2:	6713      	str	r3, [r2, #112]	; 0x70
 8004fe4:	4b74      	ldr	r3, [pc, #464]	; (80051b8 <HAL_RCC_OscConfig+0x76c>)
 8004fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe8:	4a73      	ldr	r2, [pc, #460]	; (80051b8 <HAL_RCC_OscConfig+0x76c>)
 8004fea:	f023 0304 	bic.w	r3, r3, #4
 8004fee:	6713      	str	r3, [r2, #112]	; 0x70
 8004ff0:	e01c      	b.n	800502c <HAL_RCC_OscConfig+0x5e0>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	2b05      	cmp	r3, #5
 8004ff8:	d10c      	bne.n	8005014 <HAL_RCC_OscConfig+0x5c8>
 8004ffa:	4b6f      	ldr	r3, [pc, #444]	; (80051b8 <HAL_RCC_OscConfig+0x76c>)
 8004ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ffe:	4a6e      	ldr	r2, [pc, #440]	; (80051b8 <HAL_RCC_OscConfig+0x76c>)
 8005000:	f043 0304 	orr.w	r3, r3, #4
 8005004:	6713      	str	r3, [r2, #112]	; 0x70
 8005006:	4b6c      	ldr	r3, [pc, #432]	; (80051b8 <HAL_RCC_OscConfig+0x76c>)
 8005008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800500a:	4a6b      	ldr	r2, [pc, #428]	; (80051b8 <HAL_RCC_OscConfig+0x76c>)
 800500c:	f043 0301 	orr.w	r3, r3, #1
 8005010:	6713      	str	r3, [r2, #112]	; 0x70
 8005012:	e00b      	b.n	800502c <HAL_RCC_OscConfig+0x5e0>
 8005014:	4b68      	ldr	r3, [pc, #416]	; (80051b8 <HAL_RCC_OscConfig+0x76c>)
 8005016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005018:	4a67      	ldr	r2, [pc, #412]	; (80051b8 <HAL_RCC_OscConfig+0x76c>)
 800501a:	f023 0301 	bic.w	r3, r3, #1
 800501e:	6713      	str	r3, [r2, #112]	; 0x70
 8005020:	4b65      	ldr	r3, [pc, #404]	; (80051b8 <HAL_RCC_OscConfig+0x76c>)
 8005022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005024:	4a64      	ldr	r2, [pc, #400]	; (80051b8 <HAL_RCC_OscConfig+0x76c>)
 8005026:	f023 0304 	bic.w	r3, r3, #4
 800502a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d015      	beq.n	8005060 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005034:	f7fc fe66 	bl	8001d04 <HAL_GetTick>
 8005038:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800503a:	e00a      	b.n	8005052 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800503c:	f7fc fe62 	bl	8001d04 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	f241 3288 	movw	r2, #5000	; 0x1388
 800504a:	4293      	cmp	r3, r2
 800504c:	d901      	bls.n	8005052 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e14e      	b.n	80052f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005052:	4b59      	ldr	r3, [pc, #356]	; (80051b8 <HAL_RCC_OscConfig+0x76c>)
 8005054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005056:	f003 0302 	and.w	r3, r3, #2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d0ee      	beq.n	800503c <HAL_RCC_OscConfig+0x5f0>
 800505e:	e014      	b.n	800508a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005060:	f7fc fe50 	bl	8001d04 <HAL_GetTick>
 8005064:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005066:	e00a      	b.n	800507e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005068:	f7fc fe4c 	bl	8001d04 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	f241 3288 	movw	r2, #5000	; 0x1388
 8005076:	4293      	cmp	r3, r2
 8005078:	d901      	bls.n	800507e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e138      	b.n	80052f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800507e:	4b4e      	ldr	r3, [pc, #312]	; (80051b8 <HAL_RCC_OscConfig+0x76c>)
 8005080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005082:	f003 0302 	and.w	r3, r3, #2
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1ee      	bne.n	8005068 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508e:	2b00      	cmp	r3, #0
 8005090:	f000 812d 	beq.w	80052ee <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005094:	4b48      	ldr	r3, [pc, #288]	; (80051b8 <HAL_RCC_OscConfig+0x76c>)
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800509c:	2b18      	cmp	r3, #24
 800509e:	f000 80bd 	beq.w	800521c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	f040 809e 	bne.w	80051e8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050ac:	4b42      	ldr	r3, [pc, #264]	; (80051b8 <HAL_RCC_OscConfig+0x76c>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a41      	ldr	r2, [pc, #260]	; (80051b8 <HAL_RCC_OscConfig+0x76c>)
 80050b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b8:	f7fc fe24 	bl	8001d04 <HAL_GetTick>
 80050bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050be:	e008      	b.n	80050d2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050c0:	f7fc fe20 	bl	8001d04 <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d901      	bls.n	80050d2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e10e      	b.n	80052f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050d2:	4b39      	ldr	r3, [pc, #228]	; (80051b8 <HAL_RCC_OscConfig+0x76c>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1f0      	bne.n	80050c0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050de:	4b36      	ldr	r3, [pc, #216]	; (80051b8 <HAL_RCC_OscConfig+0x76c>)
 80050e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050e2:	4b37      	ldr	r3, [pc, #220]	; (80051c0 <HAL_RCC_OscConfig+0x774>)
 80050e4:	4013      	ands	r3, r2
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80050ee:	0112      	lsls	r2, r2, #4
 80050f0:	430a      	orrs	r2, r1
 80050f2:	4931      	ldr	r1, [pc, #196]	; (80051b8 <HAL_RCC_OscConfig+0x76c>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	628b      	str	r3, [r1, #40]	; 0x28
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050fc:	3b01      	subs	r3, #1
 80050fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005106:	3b01      	subs	r3, #1
 8005108:	025b      	lsls	r3, r3, #9
 800510a:	b29b      	uxth	r3, r3
 800510c:	431a      	orrs	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005112:	3b01      	subs	r3, #1
 8005114:	041b      	lsls	r3, r3, #16
 8005116:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800511a:	431a      	orrs	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005120:	3b01      	subs	r3, #1
 8005122:	061b      	lsls	r3, r3, #24
 8005124:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005128:	4923      	ldr	r1, [pc, #140]	; (80051b8 <HAL_RCC_OscConfig+0x76c>)
 800512a:	4313      	orrs	r3, r2
 800512c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800512e:	4b22      	ldr	r3, [pc, #136]	; (80051b8 <HAL_RCC_OscConfig+0x76c>)
 8005130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005132:	4a21      	ldr	r2, [pc, #132]	; (80051b8 <HAL_RCC_OscConfig+0x76c>)
 8005134:	f023 0301 	bic.w	r3, r3, #1
 8005138:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800513a:	4b1f      	ldr	r3, [pc, #124]	; (80051b8 <HAL_RCC_OscConfig+0x76c>)
 800513c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800513e:	4b21      	ldr	r3, [pc, #132]	; (80051c4 <HAL_RCC_OscConfig+0x778>)
 8005140:	4013      	ands	r3, r2
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005146:	00d2      	lsls	r2, r2, #3
 8005148:	491b      	ldr	r1, [pc, #108]	; (80051b8 <HAL_RCC_OscConfig+0x76c>)
 800514a:	4313      	orrs	r3, r2
 800514c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800514e:	4b1a      	ldr	r3, [pc, #104]	; (80051b8 <HAL_RCC_OscConfig+0x76c>)
 8005150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005152:	f023 020c 	bic.w	r2, r3, #12
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515a:	4917      	ldr	r1, [pc, #92]	; (80051b8 <HAL_RCC_OscConfig+0x76c>)
 800515c:	4313      	orrs	r3, r2
 800515e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005160:	4b15      	ldr	r3, [pc, #84]	; (80051b8 <HAL_RCC_OscConfig+0x76c>)
 8005162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005164:	f023 0202 	bic.w	r2, r3, #2
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800516c:	4912      	ldr	r1, [pc, #72]	; (80051b8 <HAL_RCC_OscConfig+0x76c>)
 800516e:	4313      	orrs	r3, r2
 8005170:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005172:	4b11      	ldr	r3, [pc, #68]	; (80051b8 <HAL_RCC_OscConfig+0x76c>)
 8005174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005176:	4a10      	ldr	r2, [pc, #64]	; (80051b8 <HAL_RCC_OscConfig+0x76c>)
 8005178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800517c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800517e:	4b0e      	ldr	r3, [pc, #56]	; (80051b8 <HAL_RCC_OscConfig+0x76c>)
 8005180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005182:	4a0d      	ldr	r2, [pc, #52]	; (80051b8 <HAL_RCC_OscConfig+0x76c>)
 8005184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005188:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800518a:	4b0b      	ldr	r3, [pc, #44]	; (80051b8 <HAL_RCC_OscConfig+0x76c>)
 800518c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518e:	4a0a      	ldr	r2, [pc, #40]	; (80051b8 <HAL_RCC_OscConfig+0x76c>)
 8005190:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005194:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005196:	4b08      	ldr	r3, [pc, #32]	; (80051b8 <HAL_RCC_OscConfig+0x76c>)
 8005198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519a:	4a07      	ldr	r2, [pc, #28]	; (80051b8 <HAL_RCC_OscConfig+0x76c>)
 800519c:	f043 0301 	orr.w	r3, r3, #1
 80051a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051a2:	4b05      	ldr	r3, [pc, #20]	; (80051b8 <HAL_RCC_OscConfig+0x76c>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a04      	ldr	r2, [pc, #16]	; (80051b8 <HAL_RCC_OscConfig+0x76c>)
 80051a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ae:	f7fc fda9 	bl	8001d04 <HAL_GetTick>
 80051b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80051b4:	e011      	b.n	80051da <HAL_RCC_OscConfig+0x78e>
 80051b6:	bf00      	nop
 80051b8:	58024400 	.word	0x58024400
 80051bc:	58024800 	.word	0x58024800
 80051c0:	fffffc0c 	.word	0xfffffc0c
 80051c4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051c8:	f7fc fd9c 	bl	8001d04 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e08a      	b.n	80052f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80051da:	4b47      	ldr	r3, [pc, #284]	; (80052f8 <HAL_RCC_OscConfig+0x8ac>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d0f0      	beq.n	80051c8 <HAL_RCC_OscConfig+0x77c>
 80051e6:	e082      	b.n	80052ee <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051e8:	4b43      	ldr	r3, [pc, #268]	; (80052f8 <HAL_RCC_OscConfig+0x8ac>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a42      	ldr	r2, [pc, #264]	; (80052f8 <HAL_RCC_OscConfig+0x8ac>)
 80051ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f4:	f7fc fd86 	bl	8001d04 <HAL_GetTick>
 80051f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051fa:	e008      	b.n	800520e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051fc:	f7fc fd82 	bl	8001d04 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b02      	cmp	r3, #2
 8005208:	d901      	bls.n	800520e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e070      	b.n	80052f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800520e:	4b3a      	ldr	r3, [pc, #232]	; (80052f8 <HAL_RCC_OscConfig+0x8ac>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1f0      	bne.n	80051fc <HAL_RCC_OscConfig+0x7b0>
 800521a:	e068      	b.n	80052ee <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800521c:	4b36      	ldr	r3, [pc, #216]	; (80052f8 <HAL_RCC_OscConfig+0x8ac>)
 800521e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005220:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005222:	4b35      	ldr	r3, [pc, #212]	; (80052f8 <HAL_RCC_OscConfig+0x8ac>)
 8005224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005226:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522c:	2b01      	cmp	r3, #1
 800522e:	d031      	beq.n	8005294 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	f003 0203 	and.w	r2, r3, #3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800523a:	429a      	cmp	r2, r3
 800523c:	d12a      	bne.n	8005294 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	091b      	lsrs	r3, r3, #4
 8005242:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800524a:	429a      	cmp	r2, r3
 800524c:	d122      	bne.n	8005294 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005258:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800525a:	429a      	cmp	r2, r3
 800525c:	d11a      	bne.n	8005294 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	0a5b      	lsrs	r3, r3, #9
 8005262:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800526a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800526c:	429a      	cmp	r2, r3
 800526e:	d111      	bne.n	8005294 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	0c1b      	lsrs	r3, r3, #16
 8005274:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800527e:	429a      	cmp	r2, r3
 8005280:	d108      	bne.n	8005294 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	0e1b      	lsrs	r3, r3, #24
 8005286:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800528e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005290:	429a      	cmp	r2, r3
 8005292:	d001      	beq.n	8005298 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e02b      	b.n	80052f0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005298:	4b17      	ldr	r3, [pc, #92]	; (80052f8 <HAL_RCC_OscConfig+0x8ac>)
 800529a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800529c:	08db      	lsrs	r3, r3, #3
 800529e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052a2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d01f      	beq.n	80052ee <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80052ae:	4b12      	ldr	r3, [pc, #72]	; (80052f8 <HAL_RCC_OscConfig+0x8ac>)
 80052b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b2:	4a11      	ldr	r2, [pc, #68]	; (80052f8 <HAL_RCC_OscConfig+0x8ac>)
 80052b4:	f023 0301 	bic.w	r3, r3, #1
 80052b8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80052ba:	f7fc fd23 	bl	8001d04 <HAL_GetTick>
 80052be:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80052c0:	bf00      	nop
 80052c2:	f7fc fd1f 	bl	8001d04 <HAL_GetTick>
 80052c6:	4602      	mov	r2, r0
 80052c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d0f9      	beq.n	80052c2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80052ce:	4b0a      	ldr	r3, [pc, #40]	; (80052f8 <HAL_RCC_OscConfig+0x8ac>)
 80052d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052d2:	4b0a      	ldr	r3, [pc, #40]	; (80052fc <HAL_RCC_OscConfig+0x8b0>)
 80052d4:	4013      	ands	r3, r2
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80052da:	00d2      	lsls	r2, r2, #3
 80052dc:	4906      	ldr	r1, [pc, #24]	; (80052f8 <HAL_RCC_OscConfig+0x8ac>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80052e2:	4b05      	ldr	r3, [pc, #20]	; (80052f8 <HAL_RCC_OscConfig+0x8ac>)
 80052e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e6:	4a04      	ldr	r2, [pc, #16]	; (80052f8 <HAL_RCC_OscConfig+0x8ac>)
 80052e8:	f043 0301 	orr.w	r3, r3, #1
 80052ec:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3730      	adds	r7, #48	; 0x30
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	58024400 	.word	0x58024400
 80052fc:	ffff0007 	.word	0xffff0007

08005300 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b086      	sub	sp, #24
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d101      	bne.n	8005314 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e19c      	b.n	800564e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005314:	4b8a      	ldr	r3, [pc, #552]	; (8005540 <HAL_RCC_ClockConfig+0x240>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 030f 	and.w	r3, r3, #15
 800531c:	683a      	ldr	r2, [r7, #0]
 800531e:	429a      	cmp	r2, r3
 8005320:	d910      	bls.n	8005344 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005322:	4b87      	ldr	r3, [pc, #540]	; (8005540 <HAL_RCC_ClockConfig+0x240>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f023 020f 	bic.w	r2, r3, #15
 800532a:	4985      	ldr	r1, [pc, #532]	; (8005540 <HAL_RCC_ClockConfig+0x240>)
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	4313      	orrs	r3, r2
 8005330:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005332:	4b83      	ldr	r3, [pc, #524]	; (8005540 <HAL_RCC_ClockConfig+0x240>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 030f 	and.w	r3, r3, #15
 800533a:	683a      	ldr	r2, [r7, #0]
 800533c:	429a      	cmp	r2, r3
 800533e:	d001      	beq.n	8005344 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e184      	b.n	800564e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0304 	and.w	r3, r3, #4
 800534c:	2b00      	cmp	r3, #0
 800534e:	d010      	beq.n	8005372 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	691a      	ldr	r2, [r3, #16]
 8005354:	4b7b      	ldr	r3, [pc, #492]	; (8005544 <HAL_RCC_ClockConfig+0x244>)
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800535c:	429a      	cmp	r2, r3
 800535e:	d908      	bls.n	8005372 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005360:	4b78      	ldr	r3, [pc, #480]	; (8005544 <HAL_RCC_ClockConfig+0x244>)
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	4975      	ldr	r1, [pc, #468]	; (8005544 <HAL_RCC_ClockConfig+0x244>)
 800536e:	4313      	orrs	r3, r2
 8005370:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0308 	and.w	r3, r3, #8
 800537a:	2b00      	cmp	r3, #0
 800537c:	d010      	beq.n	80053a0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	695a      	ldr	r2, [r3, #20]
 8005382:	4b70      	ldr	r3, [pc, #448]	; (8005544 <HAL_RCC_ClockConfig+0x244>)
 8005384:	69db      	ldr	r3, [r3, #28]
 8005386:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800538a:	429a      	cmp	r2, r3
 800538c:	d908      	bls.n	80053a0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800538e:	4b6d      	ldr	r3, [pc, #436]	; (8005544 <HAL_RCC_ClockConfig+0x244>)
 8005390:	69db      	ldr	r3, [r3, #28]
 8005392:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	496a      	ldr	r1, [pc, #424]	; (8005544 <HAL_RCC_ClockConfig+0x244>)
 800539c:	4313      	orrs	r3, r2
 800539e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0310 	and.w	r3, r3, #16
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d010      	beq.n	80053ce <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	699a      	ldr	r2, [r3, #24]
 80053b0:	4b64      	ldr	r3, [pc, #400]	; (8005544 <HAL_RCC_ClockConfig+0x244>)
 80053b2:	69db      	ldr	r3, [r3, #28]
 80053b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d908      	bls.n	80053ce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80053bc:	4b61      	ldr	r3, [pc, #388]	; (8005544 <HAL_RCC_ClockConfig+0x244>)
 80053be:	69db      	ldr	r3, [r3, #28]
 80053c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	699b      	ldr	r3, [r3, #24]
 80053c8:	495e      	ldr	r1, [pc, #376]	; (8005544 <HAL_RCC_ClockConfig+0x244>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0320 	and.w	r3, r3, #32
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d010      	beq.n	80053fc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	69da      	ldr	r2, [r3, #28]
 80053de:	4b59      	ldr	r3, [pc, #356]	; (8005544 <HAL_RCC_ClockConfig+0x244>)
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d908      	bls.n	80053fc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80053ea:	4b56      	ldr	r3, [pc, #344]	; (8005544 <HAL_RCC_ClockConfig+0x244>)
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	69db      	ldr	r3, [r3, #28]
 80053f6:	4953      	ldr	r1, [pc, #332]	; (8005544 <HAL_RCC_ClockConfig+0x244>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0302 	and.w	r3, r3, #2
 8005404:	2b00      	cmp	r3, #0
 8005406:	d010      	beq.n	800542a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	68da      	ldr	r2, [r3, #12]
 800540c:	4b4d      	ldr	r3, [pc, #308]	; (8005544 <HAL_RCC_ClockConfig+0x244>)
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	f003 030f 	and.w	r3, r3, #15
 8005414:	429a      	cmp	r2, r3
 8005416:	d908      	bls.n	800542a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005418:	4b4a      	ldr	r3, [pc, #296]	; (8005544 <HAL_RCC_ClockConfig+0x244>)
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	f023 020f 	bic.w	r2, r3, #15
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	4947      	ldr	r1, [pc, #284]	; (8005544 <HAL_RCC_ClockConfig+0x244>)
 8005426:	4313      	orrs	r3, r2
 8005428:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b00      	cmp	r3, #0
 8005434:	d055      	beq.n	80054e2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005436:	4b43      	ldr	r3, [pc, #268]	; (8005544 <HAL_RCC_ClockConfig+0x244>)
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	4940      	ldr	r1, [pc, #256]	; (8005544 <HAL_RCC_ClockConfig+0x244>)
 8005444:	4313      	orrs	r3, r2
 8005446:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	2b02      	cmp	r3, #2
 800544e:	d107      	bne.n	8005460 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005450:	4b3c      	ldr	r3, [pc, #240]	; (8005544 <HAL_RCC_ClockConfig+0x244>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d121      	bne.n	80054a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e0f6      	b.n	800564e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	2b03      	cmp	r3, #3
 8005466:	d107      	bne.n	8005478 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005468:	4b36      	ldr	r3, [pc, #216]	; (8005544 <HAL_RCC_ClockConfig+0x244>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d115      	bne.n	80054a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e0ea      	b.n	800564e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	2b01      	cmp	r3, #1
 800547e:	d107      	bne.n	8005490 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005480:	4b30      	ldr	r3, [pc, #192]	; (8005544 <HAL_RCC_ClockConfig+0x244>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005488:	2b00      	cmp	r3, #0
 800548a:	d109      	bne.n	80054a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e0de      	b.n	800564e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005490:	4b2c      	ldr	r3, [pc, #176]	; (8005544 <HAL_RCC_ClockConfig+0x244>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0304 	and.w	r3, r3, #4
 8005498:	2b00      	cmp	r3, #0
 800549a:	d101      	bne.n	80054a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e0d6      	b.n	800564e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80054a0:	4b28      	ldr	r3, [pc, #160]	; (8005544 <HAL_RCC_ClockConfig+0x244>)
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	f023 0207 	bic.w	r2, r3, #7
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	4925      	ldr	r1, [pc, #148]	; (8005544 <HAL_RCC_ClockConfig+0x244>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054b2:	f7fc fc27 	bl	8001d04 <HAL_GetTick>
 80054b6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054b8:	e00a      	b.n	80054d0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054ba:	f7fc fc23 	bl	8001d04 <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d901      	bls.n	80054d0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e0be      	b.n	800564e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054d0:	4b1c      	ldr	r3, [pc, #112]	; (8005544 <HAL_RCC_ClockConfig+0x244>)
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	00db      	lsls	r3, r3, #3
 80054de:	429a      	cmp	r2, r3
 80054e0:	d1eb      	bne.n	80054ba <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0302 	and.w	r3, r3, #2
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d010      	beq.n	8005510 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	68da      	ldr	r2, [r3, #12]
 80054f2:	4b14      	ldr	r3, [pc, #80]	; (8005544 <HAL_RCC_ClockConfig+0x244>)
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	f003 030f 	and.w	r3, r3, #15
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d208      	bcs.n	8005510 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054fe:	4b11      	ldr	r3, [pc, #68]	; (8005544 <HAL_RCC_ClockConfig+0x244>)
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	f023 020f 	bic.w	r2, r3, #15
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	490e      	ldr	r1, [pc, #56]	; (8005544 <HAL_RCC_ClockConfig+0x244>)
 800550c:	4313      	orrs	r3, r2
 800550e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005510:	4b0b      	ldr	r3, [pc, #44]	; (8005540 <HAL_RCC_ClockConfig+0x240>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 030f 	and.w	r3, r3, #15
 8005518:	683a      	ldr	r2, [r7, #0]
 800551a:	429a      	cmp	r2, r3
 800551c:	d214      	bcs.n	8005548 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800551e:	4b08      	ldr	r3, [pc, #32]	; (8005540 <HAL_RCC_ClockConfig+0x240>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f023 020f 	bic.w	r2, r3, #15
 8005526:	4906      	ldr	r1, [pc, #24]	; (8005540 <HAL_RCC_ClockConfig+0x240>)
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	4313      	orrs	r3, r2
 800552c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800552e:	4b04      	ldr	r3, [pc, #16]	; (8005540 <HAL_RCC_ClockConfig+0x240>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 030f 	and.w	r3, r3, #15
 8005536:	683a      	ldr	r2, [r7, #0]
 8005538:	429a      	cmp	r2, r3
 800553a:	d005      	beq.n	8005548 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e086      	b.n	800564e <HAL_RCC_ClockConfig+0x34e>
 8005540:	52002000 	.word	0x52002000
 8005544:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0304 	and.w	r3, r3, #4
 8005550:	2b00      	cmp	r3, #0
 8005552:	d010      	beq.n	8005576 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	691a      	ldr	r2, [r3, #16]
 8005558:	4b3f      	ldr	r3, [pc, #252]	; (8005658 <HAL_RCC_ClockConfig+0x358>)
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005560:	429a      	cmp	r2, r3
 8005562:	d208      	bcs.n	8005576 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005564:	4b3c      	ldr	r3, [pc, #240]	; (8005658 <HAL_RCC_ClockConfig+0x358>)
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	4939      	ldr	r1, [pc, #228]	; (8005658 <HAL_RCC_ClockConfig+0x358>)
 8005572:	4313      	orrs	r3, r2
 8005574:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0308 	and.w	r3, r3, #8
 800557e:	2b00      	cmp	r3, #0
 8005580:	d010      	beq.n	80055a4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	695a      	ldr	r2, [r3, #20]
 8005586:	4b34      	ldr	r3, [pc, #208]	; (8005658 <HAL_RCC_ClockConfig+0x358>)
 8005588:	69db      	ldr	r3, [r3, #28]
 800558a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800558e:	429a      	cmp	r2, r3
 8005590:	d208      	bcs.n	80055a4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005592:	4b31      	ldr	r3, [pc, #196]	; (8005658 <HAL_RCC_ClockConfig+0x358>)
 8005594:	69db      	ldr	r3, [r3, #28]
 8005596:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	695b      	ldr	r3, [r3, #20]
 800559e:	492e      	ldr	r1, [pc, #184]	; (8005658 <HAL_RCC_ClockConfig+0x358>)
 80055a0:	4313      	orrs	r3, r2
 80055a2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0310 	and.w	r3, r3, #16
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d010      	beq.n	80055d2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	699a      	ldr	r2, [r3, #24]
 80055b4:	4b28      	ldr	r3, [pc, #160]	; (8005658 <HAL_RCC_ClockConfig+0x358>)
 80055b6:	69db      	ldr	r3, [r3, #28]
 80055b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80055bc:	429a      	cmp	r2, r3
 80055be:	d208      	bcs.n	80055d2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80055c0:	4b25      	ldr	r3, [pc, #148]	; (8005658 <HAL_RCC_ClockConfig+0x358>)
 80055c2:	69db      	ldr	r3, [r3, #28]
 80055c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	4922      	ldr	r1, [pc, #136]	; (8005658 <HAL_RCC_ClockConfig+0x358>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0320 	and.w	r3, r3, #32
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d010      	beq.n	8005600 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	69da      	ldr	r2, [r3, #28]
 80055e2:	4b1d      	ldr	r3, [pc, #116]	; (8005658 <HAL_RCC_ClockConfig+0x358>)
 80055e4:	6a1b      	ldr	r3, [r3, #32]
 80055e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d208      	bcs.n	8005600 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80055ee:	4b1a      	ldr	r3, [pc, #104]	; (8005658 <HAL_RCC_ClockConfig+0x358>)
 80055f0:	6a1b      	ldr	r3, [r3, #32]
 80055f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	69db      	ldr	r3, [r3, #28]
 80055fa:	4917      	ldr	r1, [pc, #92]	; (8005658 <HAL_RCC_ClockConfig+0x358>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005600:	f000 f834 	bl	800566c <HAL_RCC_GetSysClockFreq>
 8005604:	4602      	mov	r2, r0
 8005606:	4b14      	ldr	r3, [pc, #80]	; (8005658 <HAL_RCC_ClockConfig+0x358>)
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	0a1b      	lsrs	r3, r3, #8
 800560c:	f003 030f 	and.w	r3, r3, #15
 8005610:	4912      	ldr	r1, [pc, #72]	; (800565c <HAL_RCC_ClockConfig+0x35c>)
 8005612:	5ccb      	ldrb	r3, [r1, r3]
 8005614:	f003 031f 	and.w	r3, r3, #31
 8005618:	fa22 f303 	lsr.w	r3, r2, r3
 800561c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800561e:	4b0e      	ldr	r3, [pc, #56]	; (8005658 <HAL_RCC_ClockConfig+0x358>)
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	f003 030f 	and.w	r3, r3, #15
 8005626:	4a0d      	ldr	r2, [pc, #52]	; (800565c <HAL_RCC_ClockConfig+0x35c>)
 8005628:	5cd3      	ldrb	r3, [r2, r3]
 800562a:	f003 031f 	and.w	r3, r3, #31
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	fa22 f303 	lsr.w	r3, r2, r3
 8005634:	4a0a      	ldr	r2, [pc, #40]	; (8005660 <HAL_RCC_ClockConfig+0x360>)
 8005636:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005638:	4a0a      	ldr	r2, [pc, #40]	; (8005664 <HAL_RCC_ClockConfig+0x364>)
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800563e:	4b0a      	ldr	r3, [pc, #40]	; (8005668 <HAL_RCC_ClockConfig+0x368>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4618      	mov	r0, r3
 8005644:	f7fc fb14 	bl	8001c70 <HAL_InitTick>
 8005648:	4603      	mov	r3, r0
 800564a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800564c:	7bfb      	ldrb	r3, [r7, #15]
}
 800564e:	4618      	mov	r0, r3
 8005650:	3718      	adds	r7, #24
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	58024400 	.word	0x58024400
 800565c:	0800f178 	.word	0x0800f178
 8005660:	24000044 	.word	0x24000044
 8005664:	24000040 	.word	0x24000040
 8005668:	24000048 	.word	0x24000048

0800566c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800566c:	b480      	push	{r7}
 800566e:	b089      	sub	sp, #36	; 0x24
 8005670:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005672:	4bb3      	ldr	r3, [pc, #716]	; (8005940 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800567a:	2b18      	cmp	r3, #24
 800567c:	f200 8155 	bhi.w	800592a <HAL_RCC_GetSysClockFreq+0x2be>
 8005680:	a201      	add	r2, pc, #4	; (adr r2, 8005688 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005686:	bf00      	nop
 8005688:	080056ed 	.word	0x080056ed
 800568c:	0800592b 	.word	0x0800592b
 8005690:	0800592b 	.word	0x0800592b
 8005694:	0800592b 	.word	0x0800592b
 8005698:	0800592b 	.word	0x0800592b
 800569c:	0800592b 	.word	0x0800592b
 80056a0:	0800592b 	.word	0x0800592b
 80056a4:	0800592b 	.word	0x0800592b
 80056a8:	08005713 	.word	0x08005713
 80056ac:	0800592b 	.word	0x0800592b
 80056b0:	0800592b 	.word	0x0800592b
 80056b4:	0800592b 	.word	0x0800592b
 80056b8:	0800592b 	.word	0x0800592b
 80056bc:	0800592b 	.word	0x0800592b
 80056c0:	0800592b 	.word	0x0800592b
 80056c4:	0800592b 	.word	0x0800592b
 80056c8:	08005719 	.word	0x08005719
 80056cc:	0800592b 	.word	0x0800592b
 80056d0:	0800592b 	.word	0x0800592b
 80056d4:	0800592b 	.word	0x0800592b
 80056d8:	0800592b 	.word	0x0800592b
 80056dc:	0800592b 	.word	0x0800592b
 80056e0:	0800592b 	.word	0x0800592b
 80056e4:	0800592b 	.word	0x0800592b
 80056e8:	0800571f 	.word	0x0800571f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056ec:	4b94      	ldr	r3, [pc, #592]	; (8005940 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0320 	and.w	r3, r3, #32
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d009      	beq.n	800570c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80056f8:	4b91      	ldr	r3, [pc, #580]	; (8005940 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	08db      	lsrs	r3, r3, #3
 80056fe:	f003 0303 	and.w	r3, r3, #3
 8005702:	4a90      	ldr	r2, [pc, #576]	; (8005944 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005704:	fa22 f303 	lsr.w	r3, r2, r3
 8005708:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800570a:	e111      	b.n	8005930 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800570c:	4b8d      	ldr	r3, [pc, #564]	; (8005944 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800570e:	61bb      	str	r3, [r7, #24]
      break;
 8005710:	e10e      	b.n	8005930 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005712:	4b8d      	ldr	r3, [pc, #564]	; (8005948 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005714:	61bb      	str	r3, [r7, #24]
      break;
 8005716:	e10b      	b.n	8005930 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005718:	4b8c      	ldr	r3, [pc, #560]	; (800594c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800571a:	61bb      	str	r3, [r7, #24]
      break;
 800571c:	e108      	b.n	8005930 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800571e:	4b88      	ldr	r3, [pc, #544]	; (8005940 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005722:	f003 0303 	and.w	r3, r3, #3
 8005726:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005728:	4b85      	ldr	r3, [pc, #532]	; (8005940 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800572a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800572c:	091b      	lsrs	r3, r3, #4
 800572e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005732:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005734:	4b82      	ldr	r3, [pc, #520]	; (8005940 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005738:	f003 0301 	and.w	r3, r3, #1
 800573c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800573e:	4b80      	ldr	r3, [pc, #512]	; (8005940 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005742:	08db      	lsrs	r3, r3, #3
 8005744:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	fb02 f303 	mul.w	r3, r2, r3
 800574e:	ee07 3a90 	vmov	s15, r3
 8005752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005756:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	2b00      	cmp	r3, #0
 800575e:	f000 80e1 	beq.w	8005924 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	2b02      	cmp	r3, #2
 8005766:	f000 8083 	beq.w	8005870 <HAL_RCC_GetSysClockFreq+0x204>
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	2b02      	cmp	r3, #2
 800576e:	f200 80a1 	bhi.w	80058b4 <HAL_RCC_GetSysClockFreq+0x248>
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d003      	beq.n	8005780 <HAL_RCC_GetSysClockFreq+0x114>
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	2b01      	cmp	r3, #1
 800577c:	d056      	beq.n	800582c <HAL_RCC_GetSysClockFreq+0x1c0>
 800577e:	e099      	b.n	80058b4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005780:	4b6f      	ldr	r3, [pc, #444]	; (8005940 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0320 	and.w	r3, r3, #32
 8005788:	2b00      	cmp	r3, #0
 800578a:	d02d      	beq.n	80057e8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800578c:	4b6c      	ldr	r3, [pc, #432]	; (8005940 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	08db      	lsrs	r3, r3, #3
 8005792:	f003 0303 	and.w	r3, r3, #3
 8005796:	4a6b      	ldr	r2, [pc, #428]	; (8005944 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005798:	fa22 f303 	lsr.w	r3, r2, r3
 800579c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	ee07 3a90 	vmov	s15, r3
 80057a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	ee07 3a90 	vmov	s15, r3
 80057ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057b6:	4b62      	ldr	r3, [pc, #392]	; (8005940 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057be:	ee07 3a90 	vmov	s15, r3
 80057c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80057ca:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005950 <HAL_RCC_GetSysClockFreq+0x2e4>
 80057ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057e2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80057e6:	e087      	b.n	80058f8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	ee07 3a90 	vmov	s15, r3
 80057ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057f2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005954 <HAL_RCC_GetSysClockFreq+0x2e8>
 80057f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057fa:	4b51      	ldr	r3, [pc, #324]	; (8005940 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005802:	ee07 3a90 	vmov	s15, r3
 8005806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800580a:	ed97 6a02 	vldr	s12, [r7, #8]
 800580e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005950 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800581a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800581e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005826:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800582a:	e065      	b.n	80058f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	ee07 3a90 	vmov	s15, r3
 8005832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005836:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005958 <HAL_RCC_GetSysClockFreq+0x2ec>
 800583a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800583e:	4b40      	ldr	r3, [pc, #256]	; (8005940 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005846:	ee07 3a90 	vmov	s15, r3
 800584a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800584e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005852:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005950 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800585a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800585e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800586a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800586e:	e043      	b.n	80058f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	ee07 3a90 	vmov	s15, r3
 8005876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800587a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800595c <HAL_RCC_GetSysClockFreq+0x2f0>
 800587e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005882:	4b2f      	ldr	r3, [pc, #188]	; (8005940 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800588a:	ee07 3a90 	vmov	s15, r3
 800588e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005892:	ed97 6a02 	vldr	s12, [r7, #8]
 8005896:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005950 <HAL_RCC_GetSysClockFreq+0x2e4>
 800589a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800589e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80058b2:	e021      	b.n	80058f8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	ee07 3a90 	vmov	s15, r3
 80058ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058be:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005958 <HAL_RCC_GetSysClockFreq+0x2ec>
 80058c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058c6:	4b1e      	ldr	r3, [pc, #120]	; (8005940 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058ce:	ee07 3a90 	vmov	s15, r3
 80058d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80058da:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005950 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80058f6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80058f8:	4b11      	ldr	r3, [pc, #68]	; (8005940 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fc:	0a5b      	lsrs	r3, r3, #9
 80058fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005902:	3301      	adds	r3, #1
 8005904:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	ee07 3a90 	vmov	s15, r3
 800590c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005910:	edd7 6a07 	vldr	s13, [r7, #28]
 8005914:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005918:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800591c:	ee17 3a90 	vmov	r3, s15
 8005920:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005922:	e005      	b.n	8005930 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005924:	2300      	movs	r3, #0
 8005926:	61bb      	str	r3, [r7, #24]
      break;
 8005928:	e002      	b.n	8005930 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800592a:	4b07      	ldr	r3, [pc, #28]	; (8005948 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800592c:	61bb      	str	r3, [r7, #24]
      break;
 800592e:	bf00      	nop
  }

  return sysclockfreq;
 8005930:	69bb      	ldr	r3, [r7, #24]
}
 8005932:	4618      	mov	r0, r3
 8005934:	3724      	adds	r7, #36	; 0x24
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	58024400 	.word	0x58024400
 8005944:	03d09000 	.word	0x03d09000
 8005948:	003d0900 	.word	0x003d0900
 800594c:	017d7840 	.word	0x017d7840
 8005950:	46000000 	.word	0x46000000
 8005954:	4c742400 	.word	0x4c742400
 8005958:	4a742400 	.word	0x4a742400
 800595c:	4bbebc20 	.word	0x4bbebc20

08005960 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005966:	f7ff fe81 	bl	800566c <HAL_RCC_GetSysClockFreq>
 800596a:	4602      	mov	r2, r0
 800596c:	4b10      	ldr	r3, [pc, #64]	; (80059b0 <HAL_RCC_GetHCLKFreq+0x50>)
 800596e:	699b      	ldr	r3, [r3, #24]
 8005970:	0a1b      	lsrs	r3, r3, #8
 8005972:	f003 030f 	and.w	r3, r3, #15
 8005976:	490f      	ldr	r1, [pc, #60]	; (80059b4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005978:	5ccb      	ldrb	r3, [r1, r3]
 800597a:	f003 031f 	and.w	r3, r3, #31
 800597e:	fa22 f303 	lsr.w	r3, r2, r3
 8005982:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005984:	4b0a      	ldr	r3, [pc, #40]	; (80059b0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005986:	699b      	ldr	r3, [r3, #24]
 8005988:	f003 030f 	and.w	r3, r3, #15
 800598c:	4a09      	ldr	r2, [pc, #36]	; (80059b4 <HAL_RCC_GetHCLKFreq+0x54>)
 800598e:	5cd3      	ldrb	r3, [r2, r3]
 8005990:	f003 031f 	and.w	r3, r3, #31
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	fa22 f303 	lsr.w	r3, r2, r3
 800599a:	4a07      	ldr	r2, [pc, #28]	; (80059b8 <HAL_RCC_GetHCLKFreq+0x58>)
 800599c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800599e:	4a07      	ldr	r2, [pc, #28]	; (80059bc <HAL_RCC_GetHCLKFreq+0x5c>)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80059a4:	4b04      	ldr	r3, [pc, #16]	; (80059b8 <HAL_RCC_GetHCLKFreq+0x58>)
 80059a6:	681b      	ldr	r3, [r3, #0]
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3708      	adds	r7, #8
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	58024400 	.word	0x58024400
 80059b4:	0800f178 	.word	0x0800f178
 80059b8:	24000044 	.word	0x24000044
 80059bc:	24000040 	.word	0x24000040

080059c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80059c4:	f7ff ffcc 	bl	8005960 <HAL_RCC_GetHCLKFreq>
 80059c8:	4602      	mov	r2, r0
 80059ca:	4b06      	ldr	r3, [pc, #24]	; (80059e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059cc:	69db      	ldr	r3, [r3, #28]
 80059ce:	091b      	lsrs	r3, r3, #4
 80059d0:	f003 0307 	and.w	r3, r3, #7
 80059d4:	4904      	ldr	r1, [pc, #16]	; (80059e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80059d6:	5ccb      	ldrb	r3, [r1, r3]
 80059d8:	f003 031f 	and.w	r3, r3, #31
 80059dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	58024400 	.word	0x58024400
 80059e8:	0800f178 	.word	0x0800f178

080059ec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059f0:	b0ca      	sub	sp, #296	; 0x128
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80059f8:	2300      	movs	r3, #0
 80059fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80059fe:	2300      	movs	r3, #0
 8005a00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005a10:	2500      	movs	r5, #0
 8005a12:	ea54 0305 	orrs.w	r3, r4, r5
 8005a16:	d049      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a1e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a22:	d02f      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005a24:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a28:	d828      	bhi.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005a2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a2e:	d01a      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005a30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a34:	d822      	bhi.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d003      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005a3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a3e:	d007      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005a40:	e01c      	b.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a42:	4bb8      	ldr	r3, [pc, #736]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a46:	4ab7      	ldr	r2, [pc, #732]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005a4e:	e01a      	b.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a54:	3308      	adds	r3, #8
 8005a56:	2102      	movs	r1, #2
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f002 fb61 	bl	8008120 <RCCEx_PLL2_Config>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005a64:	e00f      	b.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a6a:	3328      	adds	r3, #40	; 0x28
 8005a6c:	2102      	movs	r1, #2
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f002 fc08 	bl	8008284 <RCCEx_PLL3_Config>
 8005a74:	4603      	mov	r3, r0
 8005a76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005a7a:	e004      	b.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005a82:	e000      	b.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005a84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d10a      	bne.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005a8e:	4ba5      	ldr	r3, [pc, #660]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a92:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a9c:	4aa1      	ldr	r2, [pc, #644]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a9e:	430b      	orrs	r3, r1
 8005aa0:	6513      	str	r3, [r2, #80]	; 0x50
 8005aa2:	e003      	b.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aa4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005aa8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005ab8:	f04f 0900 	mov.w	r9, #0
 8005abc:	ea58 0309 	orrs.w	r3, r8, r9
 8005ac0:	d047      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ac8:	2b04      	cmp	r3, #4
 8005aca:	d82a      	bhi.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005acc:	a201      	add	r2, pc, #4	; (adr r2, 8005ad4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad2:	bf00      	nop
 8005ad4:	08005ae9 	.word	0x08005ae9
 8005ad8:	08005af7 	.word	0x08005af7
 8005adc:	08005b0d 	.word	0x08005b0d
 8005ae0:	08005b2b 	.word	0x08005b2b
 8005ae4:	08005b2b 	.word	0x08005b2b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ae8:	4b8e      	ldr	r3, [pc, #568]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aec:	4a8d      	ldr	r2, [pc, #564]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005aee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005af2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005af4:	e01a      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005afa:	3308      	adds	r3, #8
 8005afc:	2100      	movs	r1, #0
 8005afe:	4618      	mov	r0, r3
 8005b00:	f002 fb0e 	bl	8008120 <RCCEx_PLL2_Config>
 8005b04:	4603      	mov	r3, r0
 8005b06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b0a:	e00f      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b10:	3328      	adds	r3, #40	; 0x28
 8005b12:	2100      	movs	r1, #0
 8005b14:	4618      	mov	r0, r3
 8005b16:	f002 fbb5 	bl	8008284 <RCCEx_PLL3_Config>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b20:	e004      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b28:	e000      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005b2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d10a      	bne.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b34:	4b7b      	ldr	r3, [pc, #492]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b38:	f023 0107 	bic.w	r1, r3, #7
 8005b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b42:	4a78      	ldr	r2, [pc, #480]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b44:	430b      	orrs	r3, r1
 8005b46:	6513      	str	r3, [r2, #80]	; 0x50
 8005b48:	e003      	b.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b4e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b5a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8005b5e:	f04f 0b00 	mov.w	fp, #0
 8005b62:	ea5a 030b 	orrs.w	r3, sl, fp
 8005b66:	d04c      	beq.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b72:	d030      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005b74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b78:	d829      	bhi.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005b7a:	2bc0      	cmp	r3, #192	; 0xc0
 8005b7c:	d02d      	beq.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005b7e:	2bc0      	cmp	r3, #192	; 0xc0
 8005b80:	d825      	bhi.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005b82:	2b80      	cmp	r3, #128	; 0x80
 8005b84:	d018      	beq.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005b86:	2b80      	cmp	r3, #128	; 0x80
 8005b88:	d821      	bhi.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d002      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005b8e:	2b40      	cmp	r3, #64	; 0x40
 8005b90:	d007      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005b92:	e01c      	b.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b94:	4b63      	ldr	r3, [pc, #396]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b98:	4a62      	ldr	r2, [pc, #392]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005ba0:	e01c      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ba6:	3308      	adds	r3, #8
 8005ba8:	2100      	movs	r1, #0
 8005baa:	4618      	mov	r0, r3
 8005bac:	f002 fab8 	bl	8008120 <RCCEx_PLL2_Config>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005bb6:	e011      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bbc:	3328      	adds	r3, #40	; 0x28
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f002 fb5f 	bl	8008284 <RCCEx_PLL3_Config>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005bcc:	e006      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005bd4:	e002      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005bd6:	bf00      	nop
 8005bd8:	e000      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005bda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bdc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10a      	bne.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005be4:	4b4f      	ldr	r3, [pc, #316]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005be8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bf2:	4a4c      	ldr	r2, [pc, #304]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005bf4:	430b      	orrs	r3, r1
 8005bf6:	6513      	str	r3, [r2, #80]	; 0x50
 8005bf8:	e003      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bfa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bfe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c0a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005c0e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005c12:	2300      	movs	r3, #0
 8005c14:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005c18:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	d053      	beq.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c26:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005c2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c2e:	d035      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005c30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c34:	d82e      	bhi.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005c36:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005c3a:	d031      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005c3c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005c40:	d828      	bhi.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005c42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c46:	d01a      	beq.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005c48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c4c:	d822      	bhi.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d003      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005c52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c56:	d007      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005c58:	e01c      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c5a:	4b32      	ldr	r3, [pc, #200]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5e:	4a31      	ldr	r2, [pc, #196]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c66:	e01c      	b.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c6c:	3308      	adds	r3, #8
 8005c6e:	2100      	movs	r1, #0
 8005c70:	4618      	mov	r0, r3
 8005c72:	f002 fa55 	bl	8008120 <RCCEx_PLL2_Config>
 8005c76:	4603      	mov	r3, r0
 8005c78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005c7c:	e011      	b.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c82:	3328      	adds	r3, #40	; 0x28
 8005c84:	2100      	movs	r1, #0
 8005c86:	4618      	mov	r0, r3
 8005c88:	f002 fafc 	bl	8008284 <RCCEx_PLL3_Config>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c92:	e006      	b.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005c9a:	e002      	b.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005c9c:	bf00      	nop
 8005c9e:	e000      	b.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005ca0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ca2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d10b      	bne.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005caa:	4b1e      	ldr	r3, [pc, #120]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cae:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8005cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cb6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005cba:	4a1a      	ldr	r2, [pc, #104]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005cbc:	430b      	orrs	r3, r1
 8005cbe:	6593      	str	r3, [r2, #88]	; 0x58
 8005cc0:	e003      	b.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cc6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005cd6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005cda:	2300      	movs	r3, #0
 8005cdc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005ce0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	d056      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005cf2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005cf6:	d038      	beq.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005cf8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005cfc:	d831      	bhi.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005cfe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005d02:	d034      	beq.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005d04:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005d08:	d82b      	bhi.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005d0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d0e:	d01d      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005d10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d14:	d825      	bhi.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d006      	beq.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005d1a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d1e:	d00a      	beq.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005d20:	e01f      	b.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005d22:	bf00      	nop
 8005d24:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d28:	4ba2      	ldr	r3, [pc, #648]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d2c:	4aa1      	ldr	r2, [pc, #644]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d34:	e01c      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d3a:	3308      	adds	r3, #8
 8005d3c:	2100      	movs	r1, #0
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f002 f9ee 	bl	8008120 <RCCEx_PLL2_Config>
 8005d44:	4603      	mov	r3, r0
 8005d46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005d4a:	e011      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d50:	3328      	adds	r3, #40	; 0x28
 8005d52:	2100      	movs	r1, #0
 8005d54:	4618      	mov	r0, r3
 8005d56:	f002 fa95 	bl	8008284 <RCCEx_PLL3_Config>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d60:	e006      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005d68:	e002      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005d6a:	bf00      	nop
 8005d6c:	e000      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005d6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d10b      	bne.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005d78:	4b8e      	ldr	r3, [pc, #568]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d7c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d84:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005d88:	4a8a      	ldr	r2, [pc, #552]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d8a:	430b      	orrs	r3, r1
 8005d8c:	6593      	str	r3, [r2, #88]	; 0x58
 8005d8e:	e003      	b.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d94:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005da4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005da8:	2300      	movs	r3, #0
 8005daa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005dae:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005db2:	460b      	mov	r3, r1
 8005db4:	4313      	orrs	r3, r2
 8005db6:	d03a      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dbe:	2b30      	cmp	r3, #48	; 0x30
 8005dc0:	d01f      	beq.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005dc2:	2b30      	cmp	r3, #48	; 0x30
 8005dc4:	d819      	bhi.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005dc6:	2b20      	cmp	r3, #32
 8005dc8:	d00c      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005dca:	2b20      	cmp	r3, #32
 8005dcc:	d815      	bhi.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d019      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005dd2:	2b10      	cmp	r3, #16
 8005dd4:	d111      	bne.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dd6:	4b77      	ldr	r3, [pc, #476]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dda:	4a76      	ldr	r2, [pc, #472]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005de0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005de2:	e011      	b.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005de8:	3308      	adds	r3, #8
 8005dea:	2102      	movs	r1, #2
 8005dec:	4618      	mov	r0, r3
 8005dee:	f002 f997 	bl	8008120 <RCCEx_PLL2_Config>
 8005df2:	4603      	mov	r3, r0
 8005df4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005df8:	e006      	b.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005e00:	e002      	b.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005e02:	bf00      	nop
 8005e04:	e000      	b.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005e06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d10a      	bne.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005e10:	4b68      	ldr	r3, [pc, #416]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e14:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e1e:	4a65      	ldr	r2, [pc, #404]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e20:	430b      	orrs	r3, r1
 8005e22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e24:	e003      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e36:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005e3a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005e3e:	2300      	movs	r3, #0
 8005e40:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005e44:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005e48:	460b      	mov	r3, r1
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	d051      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e58:	d035      	beq.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005e5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e5e:	d82e      	bhi.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005e60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e64:	d031      	beq.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005e66:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e6a:	d828      	bhi.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005e6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e70:	d01a      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005e72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e76:	d822      	bhi.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d003      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005e7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e80:	d007      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005e82:	e01c      	b.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e84:	4b4b      	ldr	r3, [pc, #300]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e88:	4a4a      	ldr	r2, [pc, #296]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005e90:	e01c      	b.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e96:	3308      	adds	r3, #8
 8005e98:	2100      	movs	r1, #0
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f002 f940 	bl	8008120 <RCCEx_PLL2_Config>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ea6:	e011      	b.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eac:	3328      	adds	r3, #40	; 0x28
 8005eae:	2100      	movs	r1, #0
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f002 f9e7 	bl	8008284 <RCCEx_PLL3_Config>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ebc:	e006      	b.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005ec4:	e002      	b.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005ec6:	bf00      	nop
 8005ec8:	e000      	b.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005eca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ecc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d10a      	bne.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005ed4:	4b37      	ldr	r3, [pc, #220]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ed8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ee2:	4a34      	ldr	r2, [pc, #208]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ee4:	430b      	orrs	r3, r1
 8005ee6:	6513      	str	r3, [r2, #80]	; 0x50
 8005ee8:	e003      	b.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005eee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efa:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005efe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f02:	2300      	movs	r3, #0
 8005f04:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005f08:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	d056      	beq.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f1c:	d033      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005f1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f22:	d82c      	bhi.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f28:	d02f      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005f2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f2e:	d826      	bhi.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f30:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f34:	d02b      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005f36:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f3a:	d820      	bhi.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f40:	d012      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005f42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f46:	d81a      	bhi.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d022      	beq.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f50:	d115      	bne.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f56:	3308      	adds	r3, #8
 8005f58:	2101      	movs	r1, #1
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f002 f8e0 	bl	8008120 <RCCEx_PLL2_Config>
 8005f60:	4603      	mov	r3, r0
 8005f62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005f66:	e015      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f6c:	3328      	adds	r3, #40	; 0x28
 8005f6e:	2101      	movs	r1, #1
 8005f70:	4618      	mov	r0, r3
 8005f72:	f002 f987 	bl	8008284 <RCCEx_PLL3_Config>
 8005f76:	4603      	mov	r3, r0
 8005f78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005f7c:	e00a      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005f84:	e006      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f86:	bf00      	nop
 8005f88:	e004      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f8a:	bf00      	nop
 8005f8c:	e002      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f8e:	bf00      	nop
 8005f90:	e000      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d10d      	bne.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005f9c:	4b05      	ldr	r3, [pc, #20]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fa0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005faa:	4a02      	ldr	r2, [pc, #8]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005fac:	430b      	orrs	r3, r1
 8005fae:	6513      	str	r3, [r2, #80]	; 0x50
 8005fb0:	e006      	b.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005fb2:	bf00      	nop
 8005fb4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fb8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005fbc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005fcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005fd6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005fda:	460b      	mov	r3, r1
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	d055      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fe4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005fe8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005fec:	d033      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005fee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ff2:	d82c      	bhi.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ff8:	d02f      	beq.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ffe:	d826      	bhi.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006000:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006004:	d02b      	beq.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006006:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800600a:	d820      	bhi.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800600c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006010:	d012      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006012:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006016:	d81a      	bhi.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006018:	2b00      	cmp	r3, #0
 800601a:	d022      	beq.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800601c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006020:	d115      	bne.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006022:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006026:	3308      	adds	r3, #8
 8006028:	2101      	movs	r1, #1
 800602a:	4618      	mov	r0, r3
 800602c:	f002 f878 	bl	8008120 <RCCEx_PLL2_Config>
 8006030:	4603      	mov	r3, r0
 8006032:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006036:	e015      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006038:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800603c:	3328      	adds	r3, #40	; 0x28
 800603e:	2101      	movs	r1, #1
 8006040:	4618      	mov	r0, r3
 8006042:	f002 f91f 	bl	8008284 <RCCEx_PLL3_Config>
 8006046:	4603      	mov	r3, r0
 8006048:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800604c:	e00a      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006054:	e006      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006056:	bf00      	nop
 8006058:	e004      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800605a:	bf00      	nop
 800605c:	e002      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800605e:	bf00      	nop
 8006060:	e000      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006062:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006064:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006068:	2b00      	cmp	r3, #0
 800606a:	d10b      	bne.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800606c:	4ba3      	ldr	r3, [pc, #652]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800606e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006070:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006074:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006078:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800607c:	4a9f      	ldr	r2, [pc, #636]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800607e:	430b      	orrs	r3, r1
 8006080:	6593      	str	r3, [r2, #88]	; 0x58
 8006082:	e003      	b.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006084:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006088:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800608c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006094:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006098:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800609c:	2300      	movs	r3, #0
 800609e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80060a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80060a6:	460b      	mov	r3, r1
 80060a8:	4313      	orrs	r3, r2
 80060aa:	d037      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80060ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060b6:	d00e      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80060b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060bc:	d816      	bhi.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x700>
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d018      	beq.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80060c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060c6:	d111      	bne.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060c8:	4b8c      	ldr	r3, [pc, #560]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060cc:	4a8b      	ldr	r2, [pc, #556]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80060d4:	e00f      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060da:	3308      	adds	r3, #8
 80060dc:	2101      	movs	r1, #1
 80060de:	4618      	mov	r0, r3
 80060e0:	f002 f81e 	bl	8008120 <RCCEx_PLL2_Config>
 80060e4:	4603      	mov	r3, r0
 80060e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80060ea:	e004      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80060f2:	e000      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80060f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d10a      	bne.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80060fe:	4b7f      	ldr	r3, [pc, #508]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006102:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006106:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800610a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800610c:	4a7b      	ldr	r2, [pc, #492]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800610e:	430b      	orrs	r3, r1
 8006110:	6513      	str	r3, [r2, #80]	; 0x50
 8006112:	e003      	b.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006114:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006118:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800611c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006124:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006128:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800612c:	2300      	movs	r3, #0
 800612e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006132:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8006136:	460b      	mov	r3, r1
 8006138:	4313      	orrs	r3, r2
 800613a:	d039      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800613c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006142:	2b03      	cmp	r3, #3
 8006144:	d81c      	bhi.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006146:	a201      	add	r2, pc, #4	; (adr r2, 800614c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800614c:	08006189 	.word	0x08006189
 8006150:	0800615d 	.word	0x0800615d
 8006154:	0800616b 	.word	0x0800616b
 8006158:	08006189 	.word	0x08006189
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800615c:	4b67      	ldr	r3, [pc, #412]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800615e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006160:	4a66      	ldr	r2, [pc, #408]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006162:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006166:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006168:	e00f      	b.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800616a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800616e:	3308      	adds	r3, #8
 8006170:	2102      	movs	r1, #2
 8006172:	4618      	mov	r0, r3
 8006174:	f001 ffd4 	bl	8008120 <RCCEx_PLL2_Config>
 8006178:	4603      	mov	r3, r0
 800617a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800617e:	e004      	b.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006186:	e000      	b.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006188:	bf00      	nop
    }

    if (ret == HAL_OK)
 800618a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800618e:	2b00      	cmp	r3, #0
 8006190:	d10a      	bne.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006192:	4b5a      	ldr	r3, [pc, #360]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006196:	f023 0103 	bic.w	r1, r3, #3
 800619a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800619e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061a0:	4a56      	ldr	r2, [pc, #344]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061a2:	430b      	orrs	r3, r1
 80061a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80061a6:	e003      	b.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80061bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061c0:	2300      	movs	r3, #0
 80061c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80061c6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80061ca:	460b      	mov	r3, r1
 80061cc:	4313      	orrs	r3, r2
 80061ce:	f000 809f 	beq.w	8006310 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061d2:	4b4b      	ldr	r3, [pc, #300]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a4a      	ldr	r2, [pc, #296]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80061d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061de:	f7fb fd91 	bl	8001d04 <HAL_GetTick>
 80061e2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061e6:	e00b      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061e8:	f7fb fd8c 	bl	8001d04 <HAL_GetTick>
 80061ec:	4602      	mov	r2, r0
 80061ee:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80061f2:	1ad3      	subs	r3, r2, r3
 80061f4:	2b64      	cmp	r3, #100	; 0x64
 80061f6:	d903      	bls.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80061f8:	2303      	movs	r3, #3
 80061fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80061fe:	e005      	b.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006200:	4b3f      	ldr	r3, [pc, #252]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006208:	2b00      	cmp	r3, #0
 800620a:	d0ed      	beq.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800620c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006210:	2b00      	cmp	r3, #0
 8006212:	d179      	bne.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006214:	4b39      	ldr	r3, [pc, #228]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006216:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006218:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800621c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006220:	4053      	eors	r3, r2
 8006222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006226:	2b00      	cmp	r3, #0
 8006228:	d015      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800622a:	4b34      	ldr	r3, [pc, #208]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800622c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800622e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006232:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006236:	4b31      	ldr	r3, [pc, #196]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800623a:	4a30      	ldr	r2, [pc, #192]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800623c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006240:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006242:	4b2e      	ldr	r3, [pc, #184]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006246:	4a2d      	ldr	r2, [pc, #180]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006248:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800624c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800624e:	4a2b      	ldr	r2, [pc, #172]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006250:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006254:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006256:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800625a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800625e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006262:	d118      	bne.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006264:	f7fb fd4e 	bl	8001d04 <HAL_GetTick>
 8006268:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800626c:	e00d      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800626e:	f7fb fd49 	bl	8001d04 <HAL_GetTick>
 8006272:	4602      	mov	r2, r0
 8006274:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006278:	1ad2      	subs	r2, r2, r3
 800627a:	f241 3388 	movw	r3, #5000	; 0x1388
 800627e:	429a      	cmp	r2, r3
 8006280:	d903      	bls.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8006288:	e005      	b.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800628a:	4b1c      	ldr	r3, [pc, #112]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800628c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800628e:	f003 0302 	and.w	r3, r3, #2
 8006292:	2b00      	cmp	r3, #0
 8006294:	d0eb      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006296:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800629a:	2b00      	cmp	r3, #0
 800629c:	d129      	bne.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800629e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80062a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062ae:	d10e      	bne.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80062b0:	4b12      	ldr	r3, [pc, #72]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80062b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80062c0:	091a      	lsrs	r2, r3, #4
 80062c2:	4b10      	ldr	r3, [pc, #64]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80062c4:	4013      	ands	r3, r2
 80062c6:	4a0d      	ldr	r2, [pc, #52]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062c8:	430b      	orrs	r3, r1
 80062ca:	6113      	str	r3, [r2, #16]
 80062cc:	e005      	b.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80062ce:	4b0b      	ldr	r3, [pc, #44]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	4a0a      	ldr	r2, [pc, #40]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062d4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80062d8:	6113      	str	r3, [r2, #16]
 80062da:	4b08      	ldr	r3, [pc, #32]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062dc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80062de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80062e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062ea:	4a04      	ldr	r2, [pc, #16]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062ec:	430b      	orrs	r3, r1
 80062ee:	6713      	str	r3, [r2, #112]	; 0x70
 80062f0:	e00e      	b.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80062f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80062fa:	e009      	b.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80062fc:	58024400 	.word	0x58024400
 8006300:	58024800 	.word	0x58024800
 8006304:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006308:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800630c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006310:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006318:	f002 0301 	and.w	r3, r2, #1
 800631c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006320:	2300      	movs	r3, #0
 8006322:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006326:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800632a:	460b      	mov	r3, r1
 800632c:	4313      	orrs	r3, r2
 800632e:	f000 8089 	beq.w	8006444 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006332:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006336:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006338:	2b28      	cmp	r3, #40	; 0x28
 800633a:	d86b      	bhi.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800633c:	a201      	add	r2, pc, #4	; (adr r2, 8006344 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800633e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006342:	bf00      	nop
 8006344:	0800641d 	.word	0x0800641d
 8006348:	08006415 	.word	0x08006415
 800634c:	08006415 	.word	0x08006415
 8006350:	08006415 	.word	0x08006415
 8006354:	08006415 	.word	0x08006415
 8006358:	08006415 	.word	0x08006415
 800635c:	08006415 	.word	0x08006415
 8006360:	08006415 	.word	0x08006415
 8006364:	080063e9 	.word	0x080063e9
 8006368:	08006415 	.word	0x08006415
 800636c:	08006415 	.word	0x08006415
 8006370:	08006415 	.word	0x08006415
 8006374:	08006415 	.word	0x08006415
 8006378:	08006415 	.word	0x08006415
 800637c:	08006415 	.word	0x08006415
 8006380:	08006415 	.word	0x08006415
 8006384:	080063ff 	.word	0x080063ff
 8006388:	08006415 	.word	0x08006415
 800638c:	08006415 	.word	0x08006415
 8006390:	08006415 	.word	0x08006415
 8006394:	08006415 	.word	0x08006415
 8006398:	08006415 	.word	0x08006415
 800639c:	08006415 	.word	0x08006415
 80063a0:	08006415 	.word	0x08006415
 80063a4:	0800641d 	.word	0x0800641d
 80063a8:	08006415 	.word	0x08006415
 80063ac:	08006415 	.word	0x08006415
 80063b0:	08006415 	.word	0x08006415
 80063b4:	08006415 	.word	0x08006415
 80063b8:	08006415 	.word	0x08006415
 80063bc:	08006415 	.word	0x08006415
 80063c0:	08006415 	.word	0x08006415
 80063c4:	0800641d 	.word	0x0800641d
 80063c8:	08006415 	.word	0x08006415
 80063cc:	08006415 	.word	0x08006415
 80063d0:	08006415 	.word	0x08006415
 80063d4:	08006415 	.word	0x08006415
 80063d8:	08006415 	.word	0x08006415
 80063dc:	08006415 	.word	0x08006415
 80063e0:	08006415 	.word	0x08006415
 80063e4:	0800641d 	.word	0x0800641d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063ec:	3308      	adds	r3, #8
 80063ee:	2101      	movs	r1, #1
 80063f0:	4618      	mov	r0, r3
 80063f2:	f001 fe95 	bl	8008120 <RCCEx_PLL2_Config>
 80063f6:	4603      	mov	r3, r0
 80063f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80063fc:	e00f      	b.n	800641e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006402:	3328      	adds	r3, #40	; 0x28
 8006404:	2101      	movs	r1, #1
 8006406:	4618      	mov	r0, r3
 8006408:	f001 ff3c 	bl	8008284 <RCCEx_PLL3_Config>
 800640c:	4603      	mov	r3, r0
 800640e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006412:	e004      	b.n	800641e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800641a:	e000      	b.n	800641e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800641c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800641e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006422:	2b00      	cmp	r3, #0
 8006424:	d10a      	bne.n	800643c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006426:	4bbf      	ldr	r3, [pc, #764]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800642a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800642e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006432:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006434:	4abb      	ldr	r2, [pc, #748]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006436:	430b      	orrs	r3, r1
 8006438:	6553      	str	r3, [r2, #84]	; 0x54
 800643a:	e003      	b.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800643c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006440:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006444:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644c:	f002 0302 	and.w	r3, r2, #2
 8006450:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006454:	2300      	movs	r3, #0
 8006456:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800645a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800645e:	460b      	mov	r3, r1
 8006460:	4313      	orrs	r3, r2
 8006462:	d041      	beq.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006464:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006468:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800646a:	2b05      	cmp	r3, #5
 800646c:	d824      	bhi.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800646e:	a201      	add	r2, pc, #4	; (adr r2, 8006474 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006474:	080064c1 	.word	0x080064c1
 8006478:	0800648d 	.word	0x0800648d
 800647c:	080064a3 	.word	0x080064a3
 8006480:	080064c1 	.word	0x080064c1
 8006484:	080064c1 	.word	0x080064c1
 8006488:	080064c1 	.word	0x080064c1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800648c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006490:	3308      	adds	r3, #8
 8006492:	2101      	movs	r1, #1
 8006494:	4618      	mov	r0, r3
 8006496:	f001 fe43 	bl	8008120 <RCCEx_PLL2_Config>
 800649a:	4603      	mov	r3, r0
 800649c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80064a0:	e00f      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064a6:	3328      	adds	r3, #40	; 0x28
 80064a8:	2101      	movs	r1, #1
 80064aa:	4618      	mov	r0, r3
 80064ac:	f001 feea 	bl	8008284 <RCCEx_PLL3_Config>
 80064b0:	4603      	mov	r3, r0
 80064b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80064b6:	e004      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80064be:	e000      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80064c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d10a      	bne.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80064ca:	4b96      	ldr	r3, [pc, #600]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80064cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ce:	f023 0107 	bic.w	r1, r3, #7
 80064d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064d8:	4a92      	ldr	r2, [pc, #584]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80064da:	430b      	orrs	r3, r1
 80064dc:	6553      	str	r3, [r2, #84]	; 0x54
 80064de:	e003      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80064e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f0:	f002 0304 	and.w	r3, r2, #4
 80064f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064f8:	2300      	movs	r3, #0
 80064fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80064fe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006502:	460b      	mov	r3, r1
 8006504:	4313      	orrs	r3, r2
 8006506:	d044      	beq.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006508:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800650c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006510:	2b05      	cmp	r3, #5
 8006512:	d825      	bhi.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006514:	a201      	add	r2, pc, #4	; (adr r2, 800651c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800651a:	bf00      	nop
 800651c:	08006569 	.word	0x08006569
 8006520:	08006535 	.word	0x08006535
 8006524:	0800654b 	.word	0x0800654b
 8006528:	08006569 	.word	0x08006569
 800652c:	08006569 	.word	0x08006569
 8006530:	08006569 	.word	0x08006569
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006534:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006538:	3308      	adds	r3, #8
 800653a:	2101      	movs	r1, #1
 800653c:	4618      	mov	r0, r3
 800653e:	f001 fdef 	bl	8008120 <RCCEx_PLL2_Config>
 8006542:	4603      	mov	r3, r0
 8006544:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006548:	e00f      	b.n	800656a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800654a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800654e:	3328      	adds	r3, #40	; 0x28
 8006550:	2101      	movs	r1, #1
 8006552:	4618      	mov	r0, r3
 8006554:	f001 fe96 	bl	8008284 <RCCEx_PLL3_Config>
 8006558:	4603      	mov	r3, r0
 800655a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800655e:	e004      	b.n	800656a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006566:	e000      	b.n	800656a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006568:	bf00      	nop
    }

    if (ret == HAL_OK)
 800656a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800656e:	2b00      	cmp	r3, #0
 8006570:	d10b      	bne.n	800658a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006572:	4b6c      	ldr	r3, [pc, #432]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006576:	f023 0107 	bic.w	r1, r3, #7
 800657a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800657e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006582:	4a68      	ldr	r2, [pc, #416]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006584:	430b      	orrs	r3, r1
 8006586:	6593      	str	r3, [r2, #88]	; 0x58
 8006588:	e003      	b.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800658a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800658e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006592:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659a:	f002 0320 	and.w	r3, r2, #32
 800659e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80065a2:	2300      	movs	r3, #0
 80065a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80065a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80065ac:	460b      	mov	r3, r1
 80065ae:	4313      	orrs	r3, r2
 80065b0:	d055      	beq.n	800665e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80065b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065be:	d033      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80065c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065c4:	d82c      	bhi.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80065c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ca:	d02f      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80065cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065d0:	d826      	bhi.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80065d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80065d6:	d02b      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80065d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80065dc:	d820      	bhi.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80065de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065e2:	d012      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80065e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065e8:	d81a      	bhi.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d022      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80065ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065f2:	d115      	bne.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065f8:	3308      	adds	r3, #8
 80065fa:	2100      	movs	r1, #0
 80065fc:	4618      	mov	r0, r3
 80065fe:	f001 fd8f 	bl	8008120 <RCCEx_PLL2_Config>
 8006602:	4603      	mov	r3, r0
 8006604:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006608:	e015      	b.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800660a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800660e:	3328      	adds	r3, #40	; 0x28
 8006610:	2102      	movs	r1, #2
 8006612:	4618      	mov	r0, r3
 8006614:	f001 fe36 	bl	8008284 <RCCEx_PLL3_Config>
 8006618:	4603      	mov	r3, r0
 800661a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800661e:	e00a      	b.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006626:	e006      	b.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006628:	bf00      	nop
 800662a:	e004      	b.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800662c:	bf00      	nop
 800662e:	e002      	b.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006630:	bf00      	nop
 8006632:	e000      	b.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006634:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006636:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800663a:	2b00      	cmp	r3, #0
 800663c:	d10b      	bne.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800663e:	4b39      	ldr	r3, [pc, #228]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006642:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006646:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800664a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800664e:	4a35      	ldr	r2, [pc, #212]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006650:	430b      	orrs	r3, r1
 8006652:	6553      	str	r3, [r2, #84]	; 0x54
 8006654:	e003      	b.n	800665e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006656:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800665a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800665e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006666:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800666a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800666e:	2300      	movs	r3, #0
 8006670:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006674:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006678:	460b      	mov	r3, r1
 800667a:	4313      	orrs	r3, r2
 800667c:	d058      	beq.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800667e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006682:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006686:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800668a:	d033      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800668c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006690:	d82c      	bhi.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006696:	d02f      	beq.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800669c:	d826      	bhi.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800669e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066a2:	d02b      	beq.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80066a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066a8:	d820      	bhi.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80066aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066ae:	d012      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80066b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066b4:	d81a      	bhi.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d022      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80066ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066be:	d115      	bne.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066c4:	3308      	adds	r3, #8
 80066c6:	2100      	movs	r1, #0
 80066c8:	4618      	mov	r0, r3
 80066ca:	f001 fd29 	bl	8008120 <RCCEx_PLL2_Config>
 80066ce:	4603      	mov	r3, r0
 80066d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80066d4:	e015      	b.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80066d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066da:	3328      	adds	r3, #40	; 0x28
 80066dc:	2102      	movs	r1, #2
 80066de:	4618      	mov	r0, r3
 80066e0:	f001 fdd0 	bl	8008284 <RCCEx_PLL3_Config>
 80066e4:	4603      	mov	r3, r0
 80066e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80066ea:	e00a      	b.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80066f2:	e006      	b.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80066f4:	bf00      	nop
 80066f6:	e004      	b.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80066f8:	bf00      	nop
 80066fa:	e002      	b.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80066fc:	bf00      	nop
 80066fe:	e000      	b.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006700:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006702:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006706:	2b00      	cmp	r3, #0
 8006708:	d10e      	bne.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800670a:	4b06      	ldr	r3, [pc, #24]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800670c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800670e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006712:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006716:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800671a:	4a02      	ldr	r2, [pc, #8]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800671c:	430b      	orrs	r3, r1
 800671e:	6593      	str	r3, [r2, #88]	; 0x58
 8006720:	e006      	b.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006722:	bf00      	nop
 8006724:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006728:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800672c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006730:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006738:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800673c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006740:	2300      	movs	r3, #0
 8006742:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006746:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800674a:	460b      	mov	r3, r1
 800674c:	4313      	orrs	r3, r2
 800674e:	d055      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006750:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006754:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006758:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800675c:	d033      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800675e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006762:	d82c      	bhi.n	80067be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006764:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006768:	d02f      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800676a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800676e:	d826      	bhi.n	80067be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006770:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006774:	d02b      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006776:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800677a:	d820      	bhi.n	80067be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800677c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006780:	d012      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006782:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006786:	d81a      	bhi.n	80067be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006788:	2b00      	cmp	r3, #0
 800678a:	d022      	beq.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800678c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006790:	d115      	bne.n	80067be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006792:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006796:	3308      	adds	r3, #8
 8006798:	2100      	movs	r1, #0
 800679a:	4618      	mov	r0, r3
 800679c:	f001 fcc0 	bl	8008120 <RCCEx_PLL2_Config>
 80067a0:	4603      	mov	r3, r0
 80067a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80067a6:	e015      	b.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067ac:	3328      	adds	r3, #40	; 0x28
 80067ae:	2102      	movs	r1, #2
 80067b0:	4618      	mov	r0, r3
 80067b2:	f001 fd67 	bl	8008284 <RCCEx_PLL3_Config>
 80067b6:	4603      	mov	r3, r0
 80067b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80067bc:	e00a      	b.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80067c4:	e006      	b.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80067c6:	bf00      	nop
 80067c8:	e004      	b.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80067ca:	bf00      	nop
 80067cc:	e002      	b.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80067ce:	bf00      	nop
 80067d0:	e000      	b.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80067d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d10b      	bne.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80067dc:	4ba1      	ldr	r3, [pc, #644]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067e0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80067e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80067ec:	4a9d      	ldr	r2, [pc, #628]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067ee:	430b      	orrs	r3, r1
 80067f0:	6593      	str	r3, [r2, #88]	; 0x58
 80067f2:	e003      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80067fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006804:	f002 0308 	and.w	r3, r2, #8
 8006808:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800680c:	2300      	movs	r3, #0
 800680e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006812:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006816:	460b      	mov	r3, r1
 8006818:	4313      	orrs	r3, r2
 800681a:	d01e      	beq.n	800685a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800681c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006820:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006824:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006828:	d10c      	bne.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800682a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800682e:	3328      	adds	r3, #40	; 0x28
 8006830:	2102      	movs	r1, #2
 8006832:	4618      	mov	r0, r3
 8006834:	f001 fd26 	bl	8008284 <RCCEx_PLL3_Config>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d002      	beq.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006844:	4b87      	ldr	r3, [pc, #540]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006848:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800684c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006850:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006854:	4a83      	ldr	r2, [pc, #524]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006856:	430b      	orrs	r3, r1
 8006858:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800685a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800685e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006862:	f002 0310 	and.w	r3, r2, #16
 8006866:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800686a:	2300      	movs	r3, #0
 800686c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006870:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006874:	460b      	mov	r3, r1
 8006876:	4313      	orrs	r3, r2
 8006878:	d01e      	beq.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800687a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800687e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006886:	d10c      	bne.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006888:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800688c:	3328      	adds	r3, #40	; 0x28
 800688e:	2102      	movs	r1, #2
 8006890:	4618      	mov	r0, r3
 8006892:	f001 fcf7 	bl	8008284 <RCCEx_PLL3_Config>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d002      	beq.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80068a2:	4b70      	ldr	r3, [pc, #448]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80068aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80068b2:	4a6c      	ldr	r2, [pc, #432]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068b4:	430b      	orrs	r3, r1
 80068b6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80068b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80068c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80068c8:	2300      	movs	r3, #0
 80068ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80068ce:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80068d2:	460b      	mov	r3, r1
 80068d4:	4313      	orrs	r3, r2
 80068d6:	d03e      	beq.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80068d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80068e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068e4:	d022      	beq.n	800692c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80068e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068ea:	d81b      	bhi.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d003      	beq.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80068f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068f4:	d00b      	beq.n	800690e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80068f6:	e015      	b.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068fc:	3308      	adds	r3, #8
 80068fe:	2100      	movs	r1, #0
 8006900:	4618      	mov	r0, r3
 8006902:	f001 fc0d 	bl	8008120 <RCCEx_PLL2_Config>
 8006906:	4603      	mov	r3, r0
 8006908:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800690c:	e00f      	b.n	800692e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800690e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006912:	3328      	adds	r3, #40	; 0x28
 8006914:	2102      	movs	r1, #2
 8006916:	4618      	mov	r0, r3
 8006918:	f001 fcb4 	bl	8008284 <RCCEx_PLL3_Config>
 800691c:	4603      	mov	r3, r0
 800691e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006922:	e004      	b.n	800692e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800692a:	e000      	b.n	800692e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800692c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800692e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006932:	2b00      	cmp	r3, #0
 8006934:	d10b      	bne.n	800694e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006936:	4b4b      	ldr	r3, [pc, #300]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800693a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800693e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006942:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006946:	4a47      	ldr	r2, [pc, #284]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006948:	430b      	orrs	r3, r1
 800694a:	6593      	str	r3, [r2, #88]	; 0x58
 800694c:	e003      	b.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800694e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006952:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006956:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800695a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006962:	67bb      	str	r3, [r7, #120]	; 0x78
 8006964:	2300      	movs	r3, #0
 8006966:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006968:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800696c:	460b      	mov	r3, r1
 800696e:	4313      	orrs	r3, r2
 8006970:	d03b      	beq.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006972:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800697a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800697e:	d01f      	beq.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006980:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006984:	d818      	bhi.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006986:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800698a:	d003      	beq.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800698c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006990:	d007      	beq.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006992:	e011      	b.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006994:	4b33      	ldr	r3, [pc, #204]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006998:	4a32      	ldr	r2, [pc, #200]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800699a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800699e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80069a0:	e00f      	b.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069a6:	3328      	adds	r3, #40	; 0x28
 80069a8:	2101      	movs	r1, #1
 80069aa:	4618      	mov	r0, r3
 80069ac:	f001 fc6a 	bl	8008284 <RCCEx_PLL3_Config>
 80069b0:	4603      	mov	r3, r0
 80069b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80069b6:	e004      	b.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80069be:	e000      	b.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80069c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d10b      	bne.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80069ca:	4b26      	ldr	r3, [pc, #152]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ce:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80069d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069da:	4a22      	ldr	r2, [pc, #136]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069dc:	430b      	orrs	r3, r1
 80069de:	6553      	str	r3, [r2, #84]	; 0x54
 80069e0:	e003      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80069ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80069f6:	673b      	str	r3, [r7, #112]	; 0x70
 80069f8:	2300      	movs	r3, #0
 80069fa:	677b      	str	r3, [r7, #116]	; 0x74
 80069fc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006a00:	460b      	mov	r3, r1
 8006a02:	4313      	orrs	r3, r2
 8006a04:	d034      	beq.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d003      	beq.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a14:	d007      	beq.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006a16:	e011      	b.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a18:	4b12      	ldr	r3, [pc, #72]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a1c:	4a11      	ldr	r2, [pc, #68]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a24:	e00e      	b.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a2a:	3308      	adds	r3, #8
 8006a2c:	2102      	movs	r1, #2
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f001 fb76 	bl	8008120 <RCCEx_PLL2_Config>
 8006a34:	4603      	mov	r3, r0
 8006a36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a3a:	e003      	b.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006a42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d10d      	bne.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006a4c:	4b05      	ldr	r3, [pc, #20]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a5a:	4a02      	ldr	r2, [pc, #8]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a5c:	430b      	orrs	r3, r1
 8006a5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006a60:	e006      	b.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006a62:	bf00      	nop
 8006a64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a6c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a78:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006a7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a7e:	2300      	movs	r3, #0
 8006a80:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a82:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006a86:	460b      	mov	r3, r1
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	d00c      	beq.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a90:	3328      	adds	r3, #40	; 0x28
 8006a92:	2102      	movs	r1, #2
 8006a94:	4618      	mov	r0, r3
 8006a96:	f001 fbf5 	bl	8008284 <RCCEx_PLL3_Config>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d002      	beq.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aae:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006ab2:	663b      	str	r3, [r7, #96]	; 0x60
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	667b      	str	r3, [r7, #100]	; 0x64
 8006ab8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006abc:	460b      	mov	r3, r1
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	d038      	beq.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ac6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006aca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ace:	d018      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006ad0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ad4:	d811      	bhi.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006ad6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ada:	d014      	beq.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006adc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ae0:	d80b      	bhi.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d011      	beq.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006ae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006aea:	d106      	bne.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006aec:	4bc3      	ldr	r3, [pc, #780]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af0:	4ac2      	ldr	r2, [pc, #776]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006af2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006af6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006af8:	e008      	b.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006b00:	e004      	b.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006b02:	bf00      	nop
 8006b04:	e002      	b.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006b06:	bf00      	nop
 8006b08:	e000      	b.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006b0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d10b      	bne.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b14:	4bb9      	ldr	r3, [pc, #740]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b18:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b24:	4ab5      	ldr	r2, [pc, #724]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b26:	430b      	orrs	r3, r1
 8006b28:	6553      	str	r3, [r2, #84]	; 0x54
 8006b2a:	e003      	b.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b30:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b3c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006b40:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b42:	2300      	movs	r3, #0
 8006b44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b46:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	d009      	beq.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006b50:	4baa      	ldr	r3, [pc, #680]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b54:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b5e:	4aa7      	ldr	r2, [pc, #668]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b60:	430b      	orrs	r3, r1
 8006b62:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8006b70:	653b      	str	r3, [r7, #80]	; 0x50
 8006b72:	2300      	movs	r3, #0
 8006b74:	657b      	str	r3, [r7, #84]	; 0x54
 8006b76:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	d00a      	beq.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006b80:	4b9e      	ldr	r3, [pc, #632]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8006b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b8c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006b90:	4a9a      	ldr	r2, [pc, #616]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b92:	430b      	orrs	r3, r1
 8006b94:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b9e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006ba2:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ba8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006bac:	460b      	mov	r3, r1
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	d009      	beq.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006bb2:	4b92      	ldr	r3, [pc, #584]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bb6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bc0:	4a8e      	ldr	r2, [pc, #568]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bc2:	430b      	orrs	r3, r1
 8006bc4:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bce:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006bd2:	643b      	str	r3, [r7, #64]	; 0x40
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	647b      	str	r3, [r7, #68]	; 0x44
 8006bd8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006bdc:	460b      	mov	r3, r1
 8006bde:	4313      	orrs	r3, r2
 8006be0:	d00e      	beq.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006be2:	4b86      	ldr	r3, [pc, #536]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	4a85      	ldr	r2, [pc, #532]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006be8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006bec:	6113      	str	r3, [r2, #16]
 8006bee:	4b83      	ldr	r3, [pc, #524]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bf0:	6919      	ldr	r1, [r3, #16]
 8006bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bf6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006bfa:	4a80      	ldr	r2, [pc, #512]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bfc:	430b      	orrs	r3, r1
 8006bfe:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c08:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006c0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c0e:	2300      	movs	r3, #0
 8006c10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c12:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006c16:	460b      	mov	r3, r1
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	d009      	beq.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006c1c:	4b77      	ldr	r3, [pc, #476]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c20:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c2a:	4a74      	ldr	r2, [pc, #464]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c2c:	430b      	orrs	r3, r1
 8006c2e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c38:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006c3c:	633b      	str	r3, [r7, #48]	; 0x30
 8006c3e:	2300      	movs	r3, #0
 8006c40:	637b      	str	r3, [r7, #52]	; 0x34
 8006c42:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006c46:	460b      	mov	r3, r1
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	d00a      	beq.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006c4c:	4b6b      	ldr	r3, [pc, #428]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c50:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c5c:	4a67      	ldr	r2, [pc, #412]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c5e:	430b      	orrs	r3, r1
 8006c60:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6a:	2100      	movs	r1, #0
 8006c6c:	62b9      	str	r1, [r7, #40]	; 0x28
 8006c6e:	f003 0301 	and.w	r3, r3, #1
 8006c72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c74:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006c78:	460b      	mov	r3, r1
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	d011      	beq.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c82:	3308      	adds	r3, #8
 8006c84:	2100      	movs	r1, #0
 8006c86:	4618      	mov	r0, r3
 8006c88:	f001 fa4a 	bl	8008120 <RCCEx_PLL2_Config>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006c92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d003      	beq.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006caa:	2100      	movs	r1, #0
 8006cac:	6239      	str	r1, [r7, #32]
 8006cae:	f003 0302 	and.w	r3, r3, #2
 8006cb2:	627b      	str	r3, [r7, #36]	; 0x24
 8006cb4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006cb8:	460b      	mov	r3, r1
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	d011      	beq.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cc2:	3308      	adds	r3, #8
 8006cc4:	2101      	movs	r1, #1
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f001 fa2a 	bl	8008120 <RCCEx_PLL2_Config>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006cd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d003      	beq.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006cde:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cea:	2100      	movs	r1, #0
 8006cec:	61b9      	str	r1, [r7, #24]
 8006cee:	f003 0304 	and.w	r3, r3, #4
 8006cf2:	61fb      	str	r3, [r7, #28]
 8006cf4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	d011      	beq.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d02:	3308      	adds	r3, #8
 8006d04:	2102      	movs	r1, #2
 8006d06:	4618      	mov	r0, r3
 8006d08:	f001 fa0a 	bl	8008120 <RCCEx_PLL2_Config>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006d12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d003      	beq.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2a:	2100      	movs	r1, #0
 8006d2c:	6139      	str	r1, [r7, #16]
 8006d2e:	f003 0308 	and.w	r3, r3, #8
 8006d32:	617b      	str	r3, [r7, #20]
 8006d34:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006d38:	460b      	mov	r3, r1
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	d011      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d42:	3328      	adds	r3, #40	; 0x28
 8006d44:	2100      	movs	r1, #0
 8006d46:	4618      	mov	r0, r3
 8006d48:	f001 fa9c 	bl	8008284 <RCCEx_PLL3_Config>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8006d52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d003      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d6a:	2100      	movs	r1, #0
 8006d6c:	60b9      	str	r1, [r7, #8]
 8006d6e:	f003 0310 	and.w	r3, r3, #16
 8006d72:	60fb      	str	r3, [r7, #12]
 8006d74:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006d78:	460b      	mov	r3, r1
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	d011      	beq.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d82:	3328      	adds	r3, #40	; 0x28
 8006d84:	2101      	movs	r1, #1
 8006d86:	4618      	mov	r0, r3
 8006d88:	f001 fa7c 	bl	8008284 <RCCEx_PLL3_Config>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006d92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d003      	beq.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006daa:	2100      	movs	r1, #0
 8006dac:	6039      	str	r1, [r7, #0]
 8006dae:	f003 0320 	and.w	r3, r3, #32
 8006db2:	607b      	str	r3, [r7, #4]
 8006db4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006db8:	460b      	mov	r3, r1
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	d011      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dc2:	3328      	adds	r3, #40	; 0x28
 8006dc4:	2102      	movs	r1, #2
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f001 fa5c 	bl	8008284 <RCCEx_PLL3_Config>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006dd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d003      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006dde:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8006de2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d101      	bne.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006dea:	2300      	movs	r3, #0
 8006dec:	e000      	b.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8006df6:	46bd      	mov	sp, r7
 8006df8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006dfc:	58024400 	.word	0x58024400

08006e00 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b090      	sub	sp, #64	; 0x40
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006e0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e0e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8006e12:	430b      	orrs	r3, r1
 8006e14:	f040 8094 	bne.w	8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006e18:	4b9e      	ldr	r3, [pc, #632]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e1c:	f003 0307 	and.w	r3, r3, #7
 8006e20:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e24:	2b04      	cmp	r3, #4
 8006e26:	f200 8087 	bhi.w	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006e2a:	a201      	add	r2, pc, #4	; (adr r2, 8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e30:	08006e45 	.word	0x08006e45
 8006e34:	08006e6d 	.word	0x08006e6d
 8006e38:	08006e95 	.word	0x08006e95
 8006e3c:	08006f31 	.word	0x08006f31
 8006e40:	08006ebd 	.word	0x08006ebd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006e44:	4b93      	ldr	r3, [pc, #588]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e50:	d108      	bne.n	8006e64 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e56:	4618      	mov	r0, r3
 8006e58:	f001 f810 	bl	8007e7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e60:	f000 bd45 	b.w	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e64:	2300      	movs	r3, #0
 8006e66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e68:	f000 bd41 	b.w	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e6c:	4b89      	ldr	r3, [pc, #548]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e78:	d108      	bne.n	8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e7a:	f107 0318 	add.w	r3, r7, #24
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f000 fd54 	bl	800792c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006e84:	69bb      	ldr	r3, [r7, #24]
 8006e86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e88:	f000 bd31 	b.w	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e90:	f000 bd2d 	b.w	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e94:	4b7f      	ldr	r3, [pc, #508]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ea0:	d108      	bne.n	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ea2:	f107 030c 	add.w	r3, r7, #12
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f000 fe94 	bl	8007bd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006eb0:	f000 bd1d 	b.w	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006eb8:	f000 bd19 	b.w	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006ebc:	4b75      	ldr	r3, [pc, #468]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ec0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ec4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006ec6:	4b73      	ldr	r3, [pc, #460]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f003 0304 	and.w	r3, r3, #4
 8006ece:	2b04      	cmp	r3, #4
 8006ed0:	d10c      	bne.n	8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d109      	bne.n	8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ed8:	4b6e      	ldr	r3, [pc, #440]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	08db      	lsrs	r3, r3, #3
 8006ede:	f003 0303 	and.w	r3, r3, #3
 8006ee2:	4a6d      	ldr	r2, [pc, #436]	; (8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006eea:	e01f      	b.n	8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006eec:	4b69      	ldr	r3, [pc, #420]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ef4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ef8:	d106      	bne.n	8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006efc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f00:	d102      	bne.n	8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006f02:	4b66      	ldr	r3, [pc, #408]	; (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006f04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f06:	e011      	b.n	8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006f08:	4b62      	ldr	r3, [pc, #392]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f14:	d106      	bne.n	8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f1c:	d102      	bne.n	8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006f1e:	4b60      	ldr	r3, [pc, #384]	; (80070a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006f20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f22:	e003      	b.n	8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006f24:	2300      	movs	r3, #0
 8006f26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006f28:	f000 bce1 	b.w	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006f2c:	f000 bcdf 	b.w	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006f30:	4b5c      	ldr	r3, [pc, #368]	; (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006f32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f34:	f000 bcdb 	b.w	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f3c:	f000 bcd7 	b.w	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006f40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f44:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8006f48:	430b      	orrs	r3, r1
 8006f4a:	f040 80ad 	bne.w	80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006f4e:	4b51      	ldr	r3, [pc, #324]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f52:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006f56:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f5e:	d056      	beq.n	800700e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f66:	f200 8090 	bhi.w	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6c:	2bc0      	cmp	r3, #192	; 0xc0
 8006f6e:	f000 8088 	beq.w	8007082 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8006f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f74:	2bc0      	cmp	r3, #192	; 0xc0
 8006f76:	f200 8088 	bhi.w	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f7c:	2b80      	cmp	r3, #128	; 0x80
 8006f7e:	d032      	beq.n	8006fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f82:	2b80      	cmp	r3, #128	; 0x80
 8006f84:	f200 8081 	bhi.w	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d003      	beq.n	8006f96 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8006f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f90:	2b40      	cmp	r3, #64	; 0x40
 8006f92:	d014      	beq.n	8006fbe <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006f94:	e079      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f96:	4b3f      	ldr	r3, [pc, #252]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fa2:	d108      	bne.n	8006fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006fa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f000 ff67 	bl	8007e7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fb2:	f000 bc9c 	b.w	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fba:	f000 bc98 	b.w	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006fbe:	4b35      	ldr	r3, [pc, #212]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fca:	d108      	bne.n	8006fde <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fcc:	f107 0318 	add.w	r3, r7, #24
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f000 fcab 	bl	800792c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006fd6:	69bb      	ldr	r3, [r7, #24]
 8006fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fda:	f000 bc88 	b.w	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fe2:	f000 bc84 	b.w	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006fe6:	4b2b      	ldr	r3, [pc, #172]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ff2:	d108      	bne.n	8007006 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ff4:	f107 030c 	add.w	r3, r7, #12
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f000 fdeb 	bl	8007bd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007002:	f000 bc74 	b.w	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007006:	2300      	movs	r3, #0
 8007008:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800700a:	f000 bc70 	b.w	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800700e:	4b21      	ldr	r3, [pc, #132]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007012:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007016:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007018:	4b1e      	ldr	r3, [pc, #120]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f003 0304 	and.w	r3, r3, #4
 8007020:	2b04      	cmp	r3, #4
 8007022:	d10c      	bne.n	800703e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007026:	2b00      	cmp	r3, #0
 8007028:	d109      	bne.n	800703e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800702a:	4b1a      	ldr	r3, [pc, #104]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	08db      	lsrs	r3, r3, #3
 8007030:	f003 0303 	and.w	r3, r3, #3
 8007034:	4a18      	ldr	r2, [pc, #96]	; (8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007036:	fa22 f303 	lsr.w	r3, r2, r3
 800703a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800703c:	e01f      	b.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800703e:	4b15      	ldr	r3, [pc, #84]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007046:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800704a:	d106      	bne.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800704c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800704e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007052:	d102      	bne.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007054:	4b11      	ldr	r3, [pc, #68]	; (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007056:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007058:	e011      	b.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800705a:	4b0e      	ldr	r3, [pc, #56]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007062:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007066:	d106      	bne.n	8007076 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8007068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800706a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800706e:	d102      	bne.n	8007076 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007070:	4b0b      	ldr	r3, [pc, #44]	; (80070a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007072:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007074:	e003      	b.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007076:	2300      	movs	r3, #0
 8007078:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800707a:	f000 bc38 	b.w	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800707e:	f000 bc36 	b.w	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007082:	4b08      	ldr	r3, [pc, #32]	; (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007084:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007086:	f000 bc32 	b.w	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800708a:	2300      	movs	r3, #0
 800708c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800708e:	f000 bc2e 	b.w	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007092:	bf00      	nop
 8007094:	58024400 	.word	0x58024400
 8007098:	03d09000 	.word	0x03d09000
 800709c:	003d0900 	.word	0x003d0900
 80070a0:	017d7840 	.word	0x017d7840
 80070a4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80070a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070ac:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80070b0:	430b      	orrs	r3, r1
 80070b2:	f040 809c 	bne.w	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80070b6:	4b9e      	ldr	r3, [pc, #632]	; (8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80070b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070ba:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80070be:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80070c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80070c6:	d054      	beq.n	8007172 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80070c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80070ce:	f200 808b 	bhi.w	80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80070d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80070d8:	f000 8083 	beq.w	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80070dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070de:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80070e2:	f200 8081 	bhi.w	80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80070e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070ec:	d02f      	beq.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80070ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070f4:	d878      	bhi.n	80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80070f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d004      	beq.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80070fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007102:	d012      	beq.n	800712a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007104:	e070      	b.n	80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007106:	4b8a      	ldr	r3, [pc, #552]	; (8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800710e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007112:	d107      	bne.n	8007124 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007114:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007118:	4618      	mov	r0, r3
 800711a:	f000 feaf 	bl	8007e7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800711e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007120:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007122:	e3e4      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007124:	2300      	movs	r3, #0
 8007126:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007128:	e3e1      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800712a:	4b81      	ldr	r3, [pc, #516]	; (8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007132:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007136:	d107      	bne.n	8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007138:	f107 0318 	add.w	r3, r7, #24
 800713c:	4618      	mov	r0, r3
 800713e:	f000 fbf5 	bl	800792c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007146:	e3d2      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007148:	2300      	movs	r3, #0
 800714a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800714c:	e3cf      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800714e:	4b78      	ldr	r3, [pc, #480]	; (8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007156:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800715a:	d107      	bne.n	800716c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800715c:	f107 030c 	add.w	r3, r7, #12
 8007160:	4618      	mov	r0, r3
 8007162:	f000 fd37 	bl	8007bd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800716a:	e3c0      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800716c:	2300      	movs	r3, #0
 800716e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007170:	e3bd      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007172:	4b6f      	ldr	r3, [pc, #444]	; (8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007176:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800717a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800717c:	4b6c      	ldr	r3, [pc, #432]	; (8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f003 0304 	and.w	r3, r3, #4
 8007184:	2b04      	cmp	r3, #4
 8007186:	d10c      	bne.n	80071a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800718a:	2b00      	cmp	r3, #0
 800718c:	d109      	bne.n	80071a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800718e:	4b68      	ldr	r3, [pc, #416]	; (8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	08db      	lsrs	r3, r3, #3
 8007194:	f003 0303 	and.w	r3, r3, #3
 8007198:	4a66      	ldr	r2, [pc, #408]	; (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800719a:	fa22 f303 	lsr.w	r3, r2, r3
 800719e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071a0:	e01e      	b.n	80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80071a2:	4b63      	ldr	r3, [pc, #396]	; (8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071ae:	d106      	bne.n	80071be <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80071b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071b6:	d102      	bne.n	80071be <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80071b8:	4b5f      	ldr	r3, [pc, #380]	; (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80071ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071bc:	e010      	b.n	80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80071be:	4b5c      	ldr	r3, [pc, #368]	; (8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071ca:	d106      	bne.n	80071da <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80071cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071d2:	d102      	bne.n	80071da <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80071d4:	4b59      	ldr	r3, [pc, #356]	; (800733c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80071d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071d8:	e002      	b.n	80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80071da:	2300      	movs	r3, #0
 80071dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80071de:	e386      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80071e0:	e385      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80071e2:	4b57      	ldr	r3, [pc, #348]	; (8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80071e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071e6:	e382      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80071e8:	2300      	movs	r3, #0
 80071ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071ec:	e37f      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80071ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071f2:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80071f6:	430b      	orrs	r3, r1
 80071f8:	f040 80a7 	bne.w	800734a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80071fc:	4b4c      	ldr	r3, [pc, #304]	; (8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80071fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007200:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007204:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007208:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800720c:	d055      	beq.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800720e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007210:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007214:	f200 8096 	bhi.w	8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800721a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800721e:	f000 8084 	beq.w	800732a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8007222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007224:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007228:	f200 808c 	bhi.w	8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800722c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007232:	d030      	beq.n	8007296 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8007234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007236:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800723a:	f200 8083 	bhi.w	8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800723e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007240:	2b00      	cmp	r3, #0
 8007242:	d004      	beq.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007246:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800724a:	d012      	beq.n	8007272 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800724c:	e07a      	b.n	8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800724e:	4b38      	ldr	r3, [pc, #224]	; (8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007256:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800725a:	d107      	bne.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800725c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007260:	4618      	mov	r0, r3
 8007262:	f000 fe0b 	bl	8007e7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007268:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800726a:	e340      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800726c:	2300      	movs	r3, #0
 800726e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007270:	e33d      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007272:	4b2f      	ldr	r3, [pc, #188]	; (8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800727a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800727e:	d107      	bne.n	8007290 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007280:	f107 0318 	add.w	r3, r7, #24
 8007284:	4618      	mov	r0, r3
 8007286:	f000 fb51 	bl	800792c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800728e:	e32e      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007290:	2300      	movs	r3, #0
 8007292:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007294:	e32b      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007296:	4b26      	ldr	r3, [pc, #152]	; (8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800729e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072a2:	d107      	bne.n	80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072a4:	f107 030c 	add.w	r3, r7, #12
 80072a8:	4618      	mov	r0, r3
 80072aa:	f000 fc93 	bl	8007bd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072b2:	e31c      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072b4:	2300      	movs	r3, #0
 80072b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072b8:	e319      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80072ba:	4b1d      	ldr	r3, [pc, #116]	; (8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80072bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80072c2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80072c4:	4b1a      	ldr	r3, [pc, #104]	; (8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 0304 	and.w	r3, r3, #4
 80072cc:	2b04      	cmp	r3, #4
 80072ce:	d10c      	bne.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80072d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d109      	bne.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80072d6:	4b16      	ldr	r3, [pc, #88]	; (8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	08db      	lsrs	r3, r3, #3
 80072dc:	f003 0303 	and.w	r3, r3, #3
 80072e0:	4a14      	ldr	r2, [pc, #80]	; (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80072e2:	fa22 f303 	lsr.w	r3, r2, r3
 80072e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072e8:	e01e      	b.n	8007328 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80072ea:	4b11      	ldr	r3, [pc, #68]	; (8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072f6:	d106      	bne.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80072f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072fe:	d102      	bne.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007300:	4b0d      	ldr	r3, [pc, #52]	; (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007302:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007304:	e010      	b.n	8007328 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007306:	4b0a      	ldr	r3, [pc, #40]	; (8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800730e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007312:	d106      	bne.n	8007322 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8007314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007316:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800731a:	d102      	bne.n	8007322 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800731c:	4b07      	ldr	r3, [pc, #28]	; (800733c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800731e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007320:	e002      	b.n	8007328 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007322:	2300      	movs	r3, #0
 8007324:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007326:	e2e2      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007328:	e2e1      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800732a:	4b05      	ldr	r3, [pc, #20]	; (8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800732c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800732e:	e2de      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007330:	58024400 	.word	0x58024400
 8007334:	03d09000 	.word	0x03d09000
 8007338:	003d0900 	.word	0x003d0900
 800733c:	017d7840 	.word	0x017d7840
 8007340:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8007344:	2300      	movs	r3, #0
 8007346:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007348:	e2d1      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800734a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800734e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8007352:	430b      	orrs	r3, r1
 8007354:	f040 809c 	bne.w	8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007358:	4b93      	ldr	r3, [pc, #588]	; (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800735a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800735c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007360:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007364:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007368:	d054      	beq.n	8007414 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800736a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800736c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007370:	f200 808b 	bhi.w	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007376:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800737a:	f000 8083 	beq.w	8007484 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800737e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007380:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007384:	f200 8081 	bhi.w	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800738a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800738e:	d02f      	beq.n	80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8007390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007392:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007396:	d878      	bhi.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800739a:	2b00      	cmp	r3, #0
 800739c:	d004      	beq.n	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800739e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073a4:	d012      	beq.n	80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80073a6:	e070      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80073a8:	4b7f      	ldr	r3, [pc, #508]	; (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073b4:	d107      	bne.n	80073c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80073b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073ba:	4618      	mov	r0, r3
 80073bc:	f000 fd5e 	bl	8007e7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80073c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073c4:	e293      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80073c6:	2300      	movs	r3, #0
 80073c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073ca:	e290      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80073cc:	4b76      	ldr	r3, [pc, #472]	; (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073d8:	d107      	bne.n	80073ea <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073da:	f107 0318 	add.w	r3, r7, #24
 80073de:	4618      	mov	r0, r3
 80073e0:	f000 faa4 	bl	800792c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073e8:	e281      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80073ea:	2300      	movs	r3, #0
 80073ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073ee:	e27e      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80073f0:	4b6d      	ldr	r3, [pc, #436]	; (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073fc:	d107      	bne.n	800740e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073fe:	f107 030c 	add.w	r3, r7, #12
 8007402:	4618      	mov	r0, r3
 8007404:	f000 fbe6 	bl	8007bd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800740c:	e26f      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800740e:	2300      	movs	r3, #0
 8007410:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007412:	e26c      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007414:	4b64      	ldr	r3, [pc, #400]	; (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007418:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800741c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800741e:	4b62      	ldr	r3, [pc, #392]	; (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f003 0304 	and.w	r3, r3, #4
 8007426:	2b04      	cmp	r3, #4
 8007428:	d10c      	bne.n	8007444 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800742a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800742c:	2b00      	cmp	r3, #0
 800742e:	d109      	bne.n	8007444 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007430:	4b5d      	ldr	r3, [pc, #372]	; (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	08db      	lsrs	r3, r3, #3
 8007436:	f003 0303 	and.w	r3, r3, #3
 800743a:	4a5c      	ldr	r2, [pc, #368]	; (80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800743c:	fa22 f303 	lsr.w	r3, r2, r3
 8007440:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007442:	e01e      	b.n	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007444:	4b58      	ldr	r3, [pc, #352]	; (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800744c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007450:	d106      	bne.n	8007460 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8007452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007454:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007458:	d102      	bne.n	8007460 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800745a:	4b55      	ldr	r3, [pc, #340]	; (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800745c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800745e:	e010      	b.n	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007460:	4b51      	ldr	r3, [pc, #324]	; (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007468:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800746c:	d106      	bne.n	800747c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800746e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007470:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007474:	d102      	bne.n	800747c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007476:	4b4f      	ldr	r3, [pc, #316]	; (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007478:	63fb      	str	r3, [r7, #60]	; 0x3c
 800747a:	e002      	b.n	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800747c:	2300      	movs	r3, #0
 800747e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007480:	e235      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007482:	e234      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007484:	4b4c      	ldr	r3, [pc, #304]	; (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007486:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007488:	e231      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800748a:	2300      	movs	r3, #0
 800748c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800748e:	e22e      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007490:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007494:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8007498:	430b      	orrs	r3, r1
 800749a:	f040 808f 	bne.w	80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800749e:	4b42      	ldr	r3, [pc, #264]	; (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80074a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074a2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80074a6:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80074a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80074ae:	d06b      	beq.n	8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80074b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80074b6:	d874      	bhi.n	80075a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80074b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80074be:	d056      	beq.n	800756e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80074c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80074c6:	d86c      	bhi.n	80075a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80074c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80074ce:	d03b      	beq.n	8007548 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80074d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80074d6:	d864      	bhi.n	80075a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80074d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074de:	d021      	beq.n	8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80074e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074e6:	d85c      	bhi.n	80075a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80074e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d004      	beq.n	80074f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80074ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074f4:	d004      	beq.n	8007500 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80074f6:	e054      	b.n	80075a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80074f8:	f7fe fa62 	bl	80059c0 <HAL_RCC_GetPCLK1Freq>
 80074fc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80074fe:	e1f6      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007500:	4b29      	ldr	r3, [pc, #164]	; (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007508:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800750c:	d107      	bne.n	800751e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800750e:	f107 0318 	add.w	r3, r7, #24
 8007512:	4618      	mov	r0, r3
 8007514:	f000 fa0a 	bl	800792c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800751c:	e1e7      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800751e:	2300      	movs	r3, #0
 8007520:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007522:	e1e4      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007524:	4b20      	ldr	r3, [pc, #128]	; (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800752c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007530:	d107      	bne.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007532:	f107 030c 	add.w	r3, r7, #12
 8007536:	4618      	mov	r0, r3
 8007538:	f000 fb4c 	bl	8007bd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007540:	e1d5      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007542:	2300      	movs	r3, #0
 8007544:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007546:	e1d2      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007548:	4b17      	ldr	r3, [pc, #92]	; (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 0304 	and.w	r3, r3, #4
 8007550:	2b04      	cmp	r3, #4
 8007552:	d109      	bne.n	8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007554:	4b14      	ldr	r3, [pc, #80]	; (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	08db      	lsrs	r3, r3, #3
 800755a:	f003 0303 	and.w	r3, r3, #3
 800755e:	4a13      	ldr	r2, [pc, #76]	; (80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007560:	fa22 f303 	lsr.w	r3, r2, r3
 8007564:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007566:	e1c2      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007568:	2300      	movs	r3, #0
 800756a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800756c:	e1bf      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800756e:	4b0e      	ldr	r3, [pc, #56]	; (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800757a:	d102      	bne.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800757c:	4b0c      	ldr	r3, [pc, #48]	; (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800757e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007580:	e1b5      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007582:	2300      	movs	r3, #0
 8007584:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007586:	e1b2      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007588:	4b07      	ldr	r3, [pc, #28]	; (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007590:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007594:	d102      	bne.n	800759c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8007596:	4b07      	ldr	r3, [pc, #28]	; (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007598:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800759a:	e1a8      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800759c:	2300      	movs	r3, #0
 800759e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075a0:	e1a5      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80075a2:	2300      	movs	r3, #0
 80075a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075a6:	e1a2      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80075a8:	58024400 	.word	0x58024400
 80075ac:	03d09000 	.word	0x03d09000
 80075b0:	003d0900 	.word	0x003d0900
 80075b4:	017d7840 	.word	0x017d7840
 80075b8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80075bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075c0:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80075c4:	430b      	orrs	r3, r1
 80075c6:	d173      	bne.n	80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80075c8:	4b9c      	ldr	r3, [pc, #624]	; (800783c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80075ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80075d0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80075d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075d8:	d02f      	beq.n	800763a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80075da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075e0:	d863      	bhi.n	80076aa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80075e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d004      	beq.n	80075f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80075e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075ee:	d012      	beq.n	8007616 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80075f0:	e05b      	b.n	80076aa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80075f2:	4b92      	ldr	r3, [pc, #584]	; (800783c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075fe:	d107      	bne.n	8007610 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007600:	f107 0318 	add.w	r3, r7, #24
 8007604:	4618      	mov	r0, r3
 8007606:	f000 f991 	bl	800792c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800760a:	69bb      	ldr	r3, [r7, #24]
 800760c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800760e:	e16e      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007610:	2300      	movs	r3, #0
 8007612:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007614:	e16b      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007616:	4b89      	ldr	r3, [pc, #548]	; (800783c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800761e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007622:	d107      	bne.n	8007634 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007624:	f107 030c 	add.w	r3, r7, #12
 8007628:	4618      	mov	r0, r3
 800762a:	f000 fad3 	bl	8007bd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007632:	e15c      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007634:	2300      	movs	r3, #0
 8007636:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007638:	e159      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800763a:	4b80      	ldr	r3, [pc, #512]	; (800783c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800763c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800763e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007642:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007644:	4b7d      	ldr	r3, [pc, #500]	; (800783c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f003 0304 	and.w	r3, r3, #4
 800764c:	2b04      	cmp	r3, #4
 800764e:	d10c      	bne.n	800766a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007652:	2b00      	cmp	r3, #0
 8007654:	d109      	bne.n	800766a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007656:	4b79      	ldr	r3, [pc, #484]	; (800783c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	08db      	lsrs	r3, r3, #3
 800765c:	f003 0303 	and.w	r3, r3, #3
 8007660:	4a77      	ldr	r2, [pc, #476]	; (8007840 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007662:	fa22 f303 	lsr.w	r3, r2, r3
 8007666:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007668:	e01e      	b.n	80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800766a:	4b74      	ldr	r3, [pc, #464]	; (800783c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007672:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007676:	d106      	bne.n	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800767a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800767e:	d102      	bne.n	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007680:	4b70      	ldr	r3, [pc, #448]	; (8007844 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007682:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007684:	e010      	b.n	80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007686:	4b6d      	ldr	r3, [pc, #436]	; (800783c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800768e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007692:	d106      	bne.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007696:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800769a:	d102      	bne.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800769c:	4b6a      	ldr	r3, [pc, #424]	; (8007848 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800769e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076a0:	e002      	b.n	80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80076a2:	2300      	movs	r3, #0
 80076a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80076a6:	e122      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80076a8:	e121      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80076aa:	2300      	movs	r3, #0
 80076ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076ae:	e11e      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80076b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076b4:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80076b8:	430b      	orrs	r3, r1
 80076ba:	d133      	bne.n	8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80076bc:	4b5f      	ldr	r3, [pc, #380]	; (800783c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80076be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076c4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80076c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d004      	beq.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80076cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076d2:	d012      	beq.n	80076fa <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80076d4:	e023      	b.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80076d6:	4b59      	ldr	r3, [pc, #356]	; (800783c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80076e2:	d107      	bne.n	80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076e8:	4618      	mov	r0, r3
 80076ea:	f000 fbc7 	bl	8007e7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80076ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076f2:	e0fc      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80076f4:	2300      	movs	r3, #0
 80076f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076f8:	e0f9      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80076fa:	4b50      	ldr	r3, [pc, #320]	; (800783c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007702:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007706:	d107      	bne.n	8007718 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007708:	f107 0318 	add.w	r3, r7, #24
 800770c:	4618      	mov	r0, r3
 800770e:	f000 f90d 	bl	800792c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007712:	6a3b      	ldr	r3, [r7, #32]
 8007714:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007716:	e0ea      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007718:	2300      	movs	r3, #0
 800771a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800771c:	e0e7      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800771e:	2300      	movs	r3, #0
 8007720:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007722:	e0e4      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007724:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007728:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800772c:	430b      	orrs	r3, r1
 800772e:	f040 808d 	bne.w	800784c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007732:	4b42      	ldr	r3, [pc, #264]	; (800783c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007736:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800773a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800773c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800773e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007742:	d06b      	beq.n	800781c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007746:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800774a:	d874      	bhi.n	8007836 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800774c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800774e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007752:	d056      	beq.n	8007802 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800775a:	d86c      	bhi.n	8007836 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800775c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800775e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007762:	d03b      	beq.n	80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007766:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800776a:	d864      	bhi.n	8007836 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800776c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800776e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007772:	d021      	beq.n	80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007776:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800777a:	d85c      	bhi.n	8007836 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800777c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800777e:	2b00      	cmp	r3, #0
 8007780:	d004      	beq.n	800778c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8007782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007784:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007788:	d004      	beq.n	8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800778a:	e054      	b.n	8007836 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800778c:	f000 f8b8 	bl	8007900 <HAL_RCCEx_GetD3PCLK1Freq>
 8007790:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007792:	e0ac      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007794:	4b29      	ldr	r3, [pc, #164]	; (800783c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800779c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077a0:	d107      	bne.n	80077b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077a2:	f107 0318 	add.w	r3, r7, #24
 80077a6:	4618      	mov	r0, r3
 80077a8:	f000 f8c0 	bl	800792c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077b0:	e09d      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077b2:	2300      	movs	r3, #0
 80077b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077b6:	e09a      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80077b8:	4b20      	ldr	r3, [pc, #128]	; (800783c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077c4:	d107      	bne.n	80077d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077c6:	f107 030c 	add.w	r3, r7, #12
 80077ca:	4618      	mov	r0, r3
 80077cc:	f000 fa02 	bl	8007bd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077d4:	e08b      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077d6:	2300      	movs	r3, #0
 80077d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077da:	e088      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80077dc:	4b17      	ldr	r3, [pc, #92]	; (800783c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 0304 	and.w	r3, r3, #4
 80077e4:	2b04      	cmp	r3, #4
 80077e6:	d109      	bne.n	80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80077e8:	4b14      	ldr	r3, [pc, #80]	; (800783c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	08db      	lsrs	r3, r3, #3
 80077ee:	f003 0303 	and.w	r3, r3, #3
 80077f2:	4a13      	ldr	r2, [pc, #76]	; (8007840 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80077f4:	fa22 f303 	lsr.w	r3, r2, r3
 80077f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077fa:	e078      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077fc:	2300      	movs	r3, #0
 80077fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007800:	e075      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007802:	4b0e      	ldr	r3, [pc, #56]	; (800783c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800780a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800780e:	d102      	bne.n	8007816 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007810:	4b0c      	ldr	r3, [pc, #48]	; (8007844 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007812:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007814:	e06b      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007816:	2300      	movs	r3, #0
 8007818:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800781a:	e068      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800781c:	4b07      	ldr	r3, [pc, #28]	; (800783c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007824:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007828:	d102      	bne.n	8007830 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800782a:	4b07      	ldr	r3, [pc, #28]	; (8007848 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800782c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800782e:	e05e      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007830:	2300      	movs	r3, #0
 8007832:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007834:	e05b      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007836:	2300      	movs	r3, #0
 8007838:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800783a:	e058      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800783c:	58024400 	.word	0x58024400
 8007840:	03d09000 	.word	0x03d09000
 8007844:	003d0900 	.word	0x003d0900
 8007848:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800784c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007850:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8007854:	430b      	orrs	r3, r1
 8007856:	d148      	bne.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007858:	4b27      	ldr	r3, [pc, #156]	; (80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800785a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800785c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007860:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007864:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007868:	d02a      	beq.n	80078c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800786a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800786c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007870:	d838      	bhi.n	80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8007872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007874:	2b00      	cmp	r3, #0
 8007876:	d004      	beq.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800787a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800787e:	d00d      	beq.n	800789c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007880:	e030      	b.n	80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007882:	4b1d      	ldr	r3, [pc, #116]	; (80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800788a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800788e:	d102      	bne.n	8007896 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007890:	4b1a      	ldr	r3, [pc, #104]	; (80078fc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007892:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007894:	e02b      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007896:	2300      	movs	r3, #0
 8007898:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800789a:	e028      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800789c:	4b16      	ldr	r3, [pc, #88]	; (80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80078a8:	d107      	bne.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80078aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078ae:	4618      	mov	r0, r3
 80078b0:	f000 fae4 	bl	8007e7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80078b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078b8:	e019      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078ba:	2300      	movs	r3, #0
 80078bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078be:	e016      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80078c0:	4b0d      	ldr	r3, [pc, #52]	; (80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80078cc:	d107      	bne.n	80078de <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078ce:	f107 0318 	add.w	r3, r7, #24
 80078d2:	4618      	mov	r0, r3
 80078d4:	f000 f82a 	bl	800792c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80078d8:	69fb      	ldr	r3, [r7, #28]
 80078da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078dc:	e007      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078de:	2300      	movs	r3, #0
 80078e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078e2:	e004      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80078e4:	2300      	movs	r3, #0
 80078e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078e8:	e001      	b.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80078ea:	2300      	movs	r3, #0
 80078ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80078ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3740      	adds	r7, #64	; 0x40
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	58024400 	.word	0x58024400
 80078fc:	017d7840 	.word	0x017d7840

08007900 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007904:	f7fe f82c 	bl	8005960 <HAL_RCC_GetHCLKFreq>
 8007908:	4602      	mov	r2, r0
 800790a:	4b06      	ldr	r3, [pc, #24]	; (8007924 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800790c:	6a1b      	ldr	r3, [r3, #32]
 800790e:	091b      	lsrs	r3, r3, #4
 8007910:	f003 0307 	and.w	r3, r3, #7
 8007914:	4904      	ldr	r1, [pc, #16]	; (8007928 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007916:	5ccb      	ldrb	r3, [r1, r3]
 8007918:	f003 031f 	and.w	r3, r3, #31
 800791c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007920:	4618      	mov	r0, r3
 8007922:	bd80      	pop	{r7, pc}
 8007924:	58024400 	.word	0x58024400
 8007928:	0800f178 	.word	0x0800f178

0800792c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800792c:	b480      	push	{r7}
 800792e:	b089      	sub	sp, #36	; 0x24
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007934:	4ba1      	ldr	r3, [pc, #644]	; (8007bbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007938:	f003 0303 	and.w	r3, r3, #3
 800793c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800793e:	4b9f      	ldr	r3, [pc, #636]	; (8007bbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007942:	0b1b      	lsrs	r3, r3, #12
 8007944:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007948:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800794a:	4b9c      	ldr	r3, [pc, #624]	; (8007bbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800794c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800794e:	091b      	lsrs	r3, r3, #4
 8007950:	f003 0301 	and.w	r3, r3, #1
 8007954:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007956:	4b99      	ldr	r3, [pc, #612]	; (8007bbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800795a:	08db      	lsrs	r3, r3, #3
 800795c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007960:	693a      	ldr	r2, [r7, #16]
 8007962:	fb02 f303 	mul.w	r3, r2, r3
 8007966:	ee07 3a90 	vmov	s15, r3
 800796a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800796e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	2b00      	cmp	r3, #0
 8007976:	f000 8111 	beq.w	8007b9c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800797a:	69bb      	ldr	r3, [r7, #24]
 800797c:	2b02      	cmp	r3, #2
 800797e:	f000 8083 	beq.w	8007a88 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007982:	69bb      	ldr	r3, [r7, #24]
 8007984:	2b02      	cmp	r3, #2
 8007986:	f200 80a1 	bhi.w	8007acc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d003      	beq.n	8007998 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	2b01      	cmp	r3, #1
 8007994:	d056      	beq.n	8007a44 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007996:	e099      	b.n	8007acc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007998:	4b88      	ldr	r3, [pc, #544]	; (8007bbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f003 0320 	and.w	r3, r3, #32
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d02d      	beq.n	8007a00 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80079a4:	4b85      	ldr	r3, [pc, #532]	; (8007bbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	08db      	lsrs	r3, r3, #3
 80079aa:	f003 0303 	and.w	r3, r3, #3
 80079ae:	4a84      	ldr	r2, [pc, #528]	; (8007bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80079b0:	fa22 f303 	lsr.w	r3, r2, r3
 80079b4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	ee07 3a90 	vmov	s15, r3
 80079bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	ee07 3a90 	vmov	s15, r3
 80079c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079ce:	4b7b      	ldr	r3, [pc, #492]	; (8007bbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079d6:	ee07 3a90 	vmov	s15, r3
 80079da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079de:	ed97 6a03 	vldr	s12, [r7, #12]
 80079e2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80079e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80079fe:	e087      	b.n	8007b10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	ee07 3a90 	vmov	s15, r3
 8007a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a0a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a12:	4b6a      	ldr	r3, [pc, #424]	; (8007bbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a1a:	ee07 3a90 	vmov	s15, r3
 8007a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a22:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a26:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a42:	e065      	b.n	8007b10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	ee07 3a90 	vmov	s15, r3
 8007a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a4e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007bcc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a56:	4b59      	ldr	r3, [pc, #356]	; (8007bbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a5e:	ee07 3a90 	vmov	s15, r3
 8007a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a66:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a6a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a86:	e043      	b.n	8007b10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	ee07 3a90 	vmov	s15, r3
 8007a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a92:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a9a:	4b48      	ldr	r3, [pc, #288]	; (8007bbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aa2:	ee07 3a90 	vmov	s15, r3
 8007aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007aaa:	ed97 6a03 	vldr	s12, [r7, #12]
 8007aae:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007aba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ac6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007aca:	e021      	b.n	8007b10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	ee07 3a90 	vmov	s15, r3
 8007ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ad6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007bcc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007ada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ade:	4b37      	ldr	r3, [pc, #220]	; (8007bbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ae6:	ee07 3a90 	vmov	s15, r3
 8007aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007aee:	ed97 6a03 	vldr	s12, [r7, #12]
 8007af2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007af6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007afa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007afe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b0e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007b10:	4b2a      	ldr	r3, [pc, #168]	; (8007bbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b14:	0a5b      	lsrs	r3, r3, #9
 8007b16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b1a:	ee07 3a90 	vmov	s15, r3
 8007b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b36:	ee17 2a90 	vmov	r2, s15
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007b3e:	4b1f      	ldr	r3, [pc, #124]	; (8007bbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b42:	0c1b      	lsrs	r3, r3, #16
 8007b44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b48:	ee07 3a90 	vmov	s15, r3
 8007b4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b54:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b58:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b64:	ee17 2a90 	vmov	r2, s15
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007b6c:	4b13      	ldr	r3, [pc, #76]	; (8007bbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b70:	0e1b      	lsrs	r3, r3, #24
 8007b72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b76:	ee07 3a90 	vmov	s15, r3
 8007b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b86:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b92:	ee17 2a90 	vmov	r2, s15
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007b9a:	e008      	b.n	8007bae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	609a      	str	r2, [r3, #8]
}
 8007bae:	bf00      	nop
 8007bb0:	3724      	adds	r7, #36	; 0x24
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr
 8007bba:	bf00      	nop
 8007bbc:	58024400 	.word	0x58024400
 8007bc0:	03d09000 	.word	0x03d09000
 8007bc4:	46000000 	.word	0x46000000
 8007bc8:	4c742400 	.word	0x4c742400
 8007bcc:	4a742400 	.word	0x4a742400
 8007bd0:	4bbebc20 	.word	0x4bbebc20

08007bd4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b089      	sub	sp, #36	; 0x24
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007bdc:	4ba1      	ldr	r3, [pc, #644]	; (8007e64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007be0:	f003 0303 	and.w	r3, r3, #3
 8007be4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007be6:	4b9f      	ldr	r3, [pc, #636]	; (8007e64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bea:	0d1b      	lsrs	r3, r3, #20
 8007bec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007bf0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007bf2:	4b9c      	ldr	r3, [pc, #624]	; (8007e64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf6:	0a1b      	lsrs	r3, r3, #8
 8007bf8:	f003 0301 	and.w	r3, r3, #1
 8007bfc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007bfe:	4b99      	ldr	r3, [pc, #612]	; (8007e64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c02:	08db      	lsrs	r3, r3, #3
 8007c04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c08:	693a      	ldr	r2, [r7, #16]
 8007c0a:	fb02 f303 	mul.w	r3, r2, r3
 8007c0e:	ee07 3a90 	vmov	s15, r3
 8007c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f000 8111 	beq.w	8007e44 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007c22:	69bb      	ldr	r3, [r7, #24]
 8007c24:	2b02      	cmp	r3, #2
 8007c26:	f000 8083 	beq.w	8007d30 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	2b02      	cmp	r3, #2
 8007c2e:	f200 80a1 	bhi.w	8007d74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d003      	beq.n	8007c40 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007c38:	69bb      	ldr	r3, [r7, #24]
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d056      	beq.n	8007cec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007c3e:	e099      	b.n	8007d74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c40:	4b88      	ldr	r3, [pc, #544]	; (8007e64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f003 0320 	and.w	r3, r3, #32
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d02d      	beq.n	8007ca8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c4c:	4b85      	ldr	r3, [pc, #532]	; (8007e64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	08db      	lsrs	r3, r3, #3
 8007c52:	f003 0303 	and.w	r3, r3, #3
 8007c56:	4a84      	ldr	r2, [pc, #528]	; (8007e68 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007c58:	fa22 f303 	lsr.w	r3, r2, r3
 8007c5c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	ee07 3a90 	vmov	s15, r3
 8007c64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	ee07 3a90 	vmov	s15, r3
 8007c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c76:	4b7b      	ldr	r3, [pc, #492]	; (8007e64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c7e:	ee07 3a90 	vmov	s15, r3
 8007c82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c86:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c8a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007e6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ca2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007ca6:	e087      	b.n	8007db8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	ee07 3a90 	vmov	s15, r3
 8007cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cb2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007e70 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007cb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cba:	4b6a      	ldr	r3, [pc, #424]	; (8007e64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cc2:	ee07 3a90 	vmov	s15, r3
 8007cc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cca:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cce:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007e6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007cd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ce6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cea:	e065      	b.n	8007db8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	ee07 3a90 	vmov	s15, r3
 8007cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cf6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007e74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007cfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cfe:	4b59      	ldr	r3, [pc, #356]	; (8007e64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d06:	ee07 3a90 	vmov	s15, r3
 8007d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d12:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007e6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d2e:	e043      	b.n	8007db8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	ee07 3a90 	vmov	s15, r3
 8007d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d3a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007e78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d42:	4b48      	ldr	r3, [pc, #288]	; (8007e64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d4a:	ee07 3a90 	vmov	s15, r3
 8007d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d52:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d56:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007e6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d72:	e021      	b.n	8007db8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	ee07 3a90 	vmov	s15, r3
 8007d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d7e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007e74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d86:	4b37      	ldr	r3, [pc, #220]	; (8007e64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d8e:	ee07 3a90 	vmov	s15, r3
 8007d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d96:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d9a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007e6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007da6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007db2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007db6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007db8:	4b2a      	ldr	r3, [pc, #168]	; (8007e64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dbc:	0a5b      	lsrs	r3, r3, #9
 8007dbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dc2:	ee07 3a90 	vmov	s15, r3
 8007dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007dce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007dd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007dd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007dda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007dde:	ee17 2a90 	vmov	r2, s15
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007de6:	4b1f      	ldr	r3, [pc, #124]	; (8007e64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dea:	0c1b      	lsrs	r3, r3, #16
 8007dec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007df0:	ee07 3a90 	vmov	s15, r3
 8007df4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007df8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007dfc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e00:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e0c:	ee17 2a90 	vmov	r2, s15
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007e14:	4b13      	ldr	r3, [pc, #76]	; (8007e64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e18:	0e1b      	lsrs	r3, r3, #24
 8007e1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e1e:	ee07 3a90 	vmov	s15, r3
 8007e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e3a:	ee17 2a90 	vmov	r2, s15
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007e42:	e008      	b.n	8007e56 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	609a      	str	r2, [r3, #8]
}
 8007e56:	bf00      	nop
 8007e58:	3724      	adds	r7, #36	; 0x24
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr
 8007e62:	bf00      	nop
 8007e64:	58024400 	.word	0x58024400
 8007e68:	03d09000 	.word	0x03d09000
 8007e6c:	46000000 	.word	0x46000000
 8007e70:	4c742400 	.word	0x4c742400
 8007e74:	4a742400 	.word	0x4a742400
 8007e78:	4bbebc20 	.word	0x4bbebc20

08007e7c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b089      	sub	sp, #36	; 0x24
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007e84:	4ba0      	ldr	r3, [pc, #640]	; (8008108 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e88:	f003 0303 	and.w	r3, r3, #3
 8007e8c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007e8e:	4b9e      	ldr	r3, [pc, #632]	; (8008108 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e92:	091b      	lsrs	r3, r3, #4
 8007e94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e98:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007e9a:	4b9b      	ldr	r3, [pc, #620]	; (8008108 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e9e:	f003 0301 	and.w	r3, r3, #1
 8007ea2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007ea4:	4b98      	ldr	r3, [pc, #608]	; (8008108 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ea8:	08db      	lsrs	r3, r3, #3
 8007eaa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007eae:	693a      	ldr	r2, [r7, #16]
 8007eb0:	fb02 f303 	mul.w	r3, r2, r3
 8007eb4:	ee07 3a90 	vmov	s15, r3
 8007eb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ebc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	f000 8111 	beq.w	80080ea <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007ec8:	69bb      	ldr	r3, [r7, #24]
 8007eca:	2b02      	cmp	r3, #2
 8007ecc:	f000 8083 	beq.w	8007fd6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007ed0:	69bb      	ldr	r3, [r7, #24]
 8007ed2:	2b02      	cmp	r3, #2
 8007ed4:	f200 80a1 	bhi.w	800801a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007ed8:	69bb      	ldr	r3, [r7, #24]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d003      	beq.n	8007ee6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d056      	beq.n	8007f92 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007ee4:	e099      	b.n	800801a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ee6:	4b88      	ldr	r3, [pc, #544]	; (8008108 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f003 0320 	and.w	r3, r3, #32
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d02d      	beq.n	8007f4e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ef2:	4b85      	ldr	r3, [pc, #532]	; (8008108 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	08db      	lsrs	r3, r3, #3
 8007ef8:	f003 0303 	and.w	r3, r3, #3
 8007efc:	4a83      	ldr	r2, [pc, #524]	; (800810c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007efe:	fa22 f303 	lsr.w	r3, r2, r3
 8007f02:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	ee07 3a90 	vmov	s15, r3
 8007f0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	ee07 3a90 	vmov	s15, r3
 8007f14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f1c:	4b7a      	ldr	r3, [pc, #488]	; (8008108 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f24:	ee07 3a90 	vmov	s15, r3
 8007f28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f2c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f30:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008110 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007f34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f48:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007f4c:	e087      	b.n	800805e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	ee07 3a90 	vmov	s15, r3
 8007f54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f58:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008114 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007f5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f60:	4b69      	ldr	r3, [pc, #420]	; (8008108 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f68:	ee07 3a90 	vmov	s15, r3
 8007f6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f70:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f74:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008110 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007f78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f8c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f90:	e065      	b.n	800805e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	ee07 3a90 	vmov	s15, r3
 8007f98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f9c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008118 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007fa0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fa4:	4b58      	ldr	r3, [pc, #352]	; (8008108 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fac:	ee07 3a90 	vmov	s15, r3
 8007fb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fb4:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fb8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008110 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007fbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fd0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fd4:	e043      	b.n	800805e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	ee07 3a90 	vmov	s15, r3
 8007fdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fe0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800811c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007fe4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fe8:	4b47      	ldr	r3, [pc, #284]	; (8008108 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ff0:	ee07 3a90 	vmov	s15, r3
 8007ff4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ff8:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ffc:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008110 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008000:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008004:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008008:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800800c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008010:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008014:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008018:	e021      	b.n	800805e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	ee07 3a90 	vmov	s15, r3
 8008020:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008024:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008114 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008028:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800802c:	4b36      	ldr	r3, [pc, #216]	; (8008108 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800802e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008030:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008034:	ee07 3a90 	vmov	s15, r3
 8008038:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800803c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008040:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008110 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008044:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008048:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800804c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008050:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008054:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008058:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800805c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800805e:	4b2a      	ldr	r3, [pc, #168]	; (8008108 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008062:	0a5b      	lsrs	r3, r3, #9
 8008064:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008068:	ee07 3a90 	vmov	s15, r3
 800806c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008070:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008074:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008078:	edd7 6a07 	vldr	s13, [r7, #28]
 800807c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008080:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008084:	ee17 2a90 	vmov	r2, s15
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800808c:	4b1e      	ldr	r3, [pc, #120]	; (8008108 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800808e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008090:	0c1b      	lsrs	r3, r3, #16
 8008092:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008096:	ee07 3a90 	vmov	s15, r3
 800809a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800809e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80080a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80080aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080b2:	ee17 2a90 	vmov	r2, s15
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80080ba:	4b13      	ldr	r3, [pc, #76]	; (8008108 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80080bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080be:	0e1b      	lsrs	r3, r3, #24
 80080c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080c4:	ee07 3a90 	vmov	s15, r3
 80080c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80080d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80080d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080e0:	ee17 2a90 	vmov	r2, s15
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80080e8:	e008      	b.n	80080fc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2200      	movs	r2, #0
 80080ee:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2200      	movs	r2, #0
 80080f4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	609a      	str	r2, [r3, #8]
}
 80080fc:	bf00      	nop
 80080fe:	3724      	adds	r7, #36	; 0x24
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr
 8008108:	58024400 	.word	0x58024400
 800810c:	03d09000 	.word	0x03d09000
 8008110:	46000000 	.word	0x46000000
 8008114:	4c742400 	.word	0x4c742400
 8008118:	4a742400 	.word	0x4a742400
 800811c:	4bbebc20 	.word	0x4bbebc20

08008120 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800812a:	2300      	movs	r3, #0
 800812c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800812e:	4b53      	ldr	r3, [pc, #332]	; (800827c <RCCEx_PLL2_Config+0x15c>)
 8008130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008132:	f003 0303 	and.w	r3, r3, #3
 8008136:	2b03      	cmp	r3, #3
 8008138:	d101      	bne.n	800813e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800813a:	2301      	movs	r3, #1
 800813c:	e099      	b.n	8008272 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800813e:	4b4f      	ldr	r3, [pc, #316]	; (800827c <RCCEx_PLL2_Config+0x15c>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a4e      	ldr	r2, [pc, #312]	; (800827c <RCCEx_PLL2_Config+0x15c>)
 8008144:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008148:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800814a:	f7f9 fddb 	bl	8001d04 <HAL_GetTick>
 800814e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008150:	e008      	b.n	8008164 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008152:	f7f9 fdd7 	bl	8001d04 <HAL_GetTick>
 8008156:	4602      	mov	r2, r0
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	1ad3      	subs	r3, r2, r3
 800815c:	2b02      	cmp	r3, #2
 800815e:	d901      	bls.n	8008164 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008160:	2303      	movs	r3, #3
 8008162:	e086      	b.n	8008272 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008164:	4b45      	ldr	r3, [pc, #276]	; (800827c <RCCEx_PLL2_Config+0x15c>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800816c:	2b00      	cmp	r3, #0
 800816e:	d1f0      	bne.n	8008152 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008170:	4b42      	ldr	r3, [pc, #264]	; (800827c <RCCEx_PLL2_Config+0x15c>)
 8008172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008174:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	031b      	lsls	r3, r3, #12
 800817e:	493f      	ldr	r1, [pc, #252]	; (800827c <RCCEx_PLL2_Config+0x15c>)
 8008180:	4313      	orrs	r3, r2
 8008182:	628b      	str	r3, [r1, #40]	; 0x28
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	685b      	ldr	r3, [r3, #4]
 8008188:	3b01      	subs	r3, #1
 800818a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	689b      	ldr	r3, [r3, #8]
 8008192:	3b01      	subs	r3, #1
 8008194:	025b      	lsls	r3, r3, #9
 8008196:	b29b      	uxth	r3, r3
 8008198:	431a      	orrs	r2, r3
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	68db      	ldr	r3, [r3, #12]
 800819e:	3b01      	subs	r3, #1
 80081a0:	041b      	lsls	r3, r3, #16
 80081a2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80081a6:	431a      	orrs	r2, r3
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	691b      	ldr	r3, [r3, #16]
 80081ac:	3b01      	subs	r3, #1
 80081ae:	061b      	lsls	r3, r3, #24
 80081b0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80081b4:	4931      	ldr	r1, [pc, #196]	; (800827c <RCCEx_PLL2_Config+0x15c>)
 80081b6:	4313      	orrs	r3, r2
 80081b8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80081ba:	4b30      	ldr	r3, [pc, #192]	; (800827c <RCCEx_PLL2_Config+0x15c>)
 80081bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	695b      	ldr	r3, [r3, #20]
 80081c6:	492d      	ldr	r1, [pc, #180]	; (800827c <RCCEx_PLL2_Config+0x15c>)
 80081c8:	4313      	orrs	r3, r2
 80081ca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80081cc:	4b2b      	ldr	r3, [pc, #172]	; (800827c <RCCEx_PLL2_Config+0x15c>)
 80081ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d0:	f023 0220 	bic.w	r2, r3, #32
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	699b      	ldr	r3, [r3, #24]
 80081d8:	4928      	ldr	r1, [pc, #160]	; (800827c <RCCEx_PLL2_Config+0x15c>)
 80081da:	4313      	orrs	r3, r2
 80081dc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80081de:	4b27      	ldr	r3, [pc, #156]	; (800827c <RCCEx_PLL2_Config+0x15c>)
 80081e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e2:	4a26      	ldr	r2, [pc, #152]	; (800827c <RCCEx_PLL2_Config+0x15c>)
 80081e4:	f023 0310 	bic.w	r3, r3, #16
 80081e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80081ea:	4b24      	ldr	r3, [pc, #144]	; (800827c <RCCEx_PLL2_Config+0x15c>)
 80081ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081ee:	4b24      	ldr	r3, [pc, #144]	; (8008280 <RCCEx_PLL2_Config+0x160>)
 80081f0:	4013      	ands	r3, r2
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	69d2      	ldr	r2, [r2, #28]
 80081f6:	00d2      	lsls	r2, r2, #3
 80081f8:	4920      	ldr	r1, [pc, #128]	; (800827c <RCCEx_PLL2_Config+0x15c>)
 80081fa:	4313      	orrs	r3, r2
 80081fc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80081fe:	4b1f      	ldr	r3, [pc, #124]	; (800827c <RCCEx_PLL2_Config+0x15c>)
 8008200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008202:	4a1e      	ldr	r2, [pc, #120]	; (800827c <RCCEx_PLL2_Config+0x15c>)
 8008204:	f043 0310 	orr.w	r3, r3, #16
 8008208:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d106      	bne.n	800821e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008210:	4b1a      	ldr	r3, [pc, #104]	; (800827c <RCCEx_PLL2_Config+0x15c>)
 8008212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008214:	4a19      	ldr	r2, [pc, #100]	; (800827c <RCCEx_PLL2_Config+0x15c>)
 8008216:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800821a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800821c:	e00f      	b.n	800823e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	2b01      	cmp	r3, #1
 8008222:	d106      	bne.n	8008232 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008224:	4b15      	ldr	r3, [pc, #84]	; (800827c <RCCEx_PLL2_Config+0x15c>)
 8008226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008228:	4a14      	ldr	r2, [pc, #80]	; (800827c <RCCEx_PLL2_Config+0x15c>)
 800822a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800822e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008230:	e005      	b.n	800823e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008232:	4b12      	ldr	r3, [pc, #72]	; (800827c <RCCEx_PLL2_Config+0x15c>)
 8008234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008236:	4a11      	ldr	r2, [pc, #68]	; (800827c <RCCEx_PLL2_Config+0x15c>)
 8008238:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800823c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800823e:	4b0f      	ldr	r3, [pc, #60]	; (800827c <RCCEx_PLL2_Config+0x15c>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a0e      	ldr	r2, [pc, #56]	; (800827c <RCCEx_PLL2_Config+0x15c>)
 8008244:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008248:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800824a:	f7f9 fd5b 	bl	8001d04 <HAL_GetTick>
 800824e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008250:	e008      	b.n	8008264 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008252:	f7f9 fd57 	bl	8001d04 <HAL_GetTick>
 8008256:	4602      	mov	r2, r0
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	1ad3      	subs	r3, r2, r3
 800825c:	2b02      	cmp	r3, #2
 800825e:	d901      	bls.n	8008264 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008260:	2303      	movs	r3, #3
 8008262:	e006      	b.n	8008272 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008264:	4b05      	ldr	r3, [pc, #20]	; (800827c <RCCEx_PLL2_Config+0x15c>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800826c:	2b00      	cmp	r3, #0
 800826e:	d0f0      	beq.n	8008252 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008270:	7bfb      	ldrb	r3, [r7, #15]
}
 8008272:	4618      	mov	r0, r3
 8008274:	3710      	adds	r7, #16
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop
 800827c:	58024400 	.word	0x58024400
 8008280:	ffff0007 	.word	0xffff0007

08008284 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b084      	sub	sp, #16
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800828e:	2300      	movs	r3, #0
 8008290:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008292:	4b53      	ldr	r3, [pc, #332]	; (80083e0 <RCCEx_PLL3_Config+0x15c>)
 8008294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008296:	f003 0303 	and.w	r3, r3, #3
 800829a:	2b03      	cmp	r3, #3
 800829c:	d101      	bne.n	80082a2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	e099      	b.n	80083d6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80082a2:	4b4f      	ldr	r3, [pc, #316]	; (80083e0 <RCCEx_PLL3_Config+0x15c>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a4e      	ldr	r2, [pc, #312]	; (80083e0 <RCCEx_PLL3_Config+0x15c>)
 80082a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082ae:	f7f9 fd29 	bl	8001d04 <HAL_GetTick>
 80082b2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80082b4:	e008      	b.n	80082c8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80082b6:	f7f9 fd25 	bl	8001d04 <HAL_GetTick>
 80082ba:	4602      	mov	r2, r0
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	1ad3      	subs	r3, r2, r3
 80082c0:	2b02      	cmp	r3, #2
 80082c2:	d901      	bls.n	80082c8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80082c4:	2303      	movs	r3, #3
 80082c6:	e086      	b.n	80083d6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80082c8:	4b45      	ldr	r3, [pc, #276]	; (80083e0 <RCCEx_PLL3_Config+0x15c>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d1f0      	bne.n	80082b6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80082d4:	4b42      	ldr	r3, [pc, #264]	; (80083e0 <RCCEx_PLL3_Config+0x15c>)
 80082d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082d8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	051b      	lsls	r3, r3, #20
 80082e2:	493f      	ldr	r1, [pc, #252]	; (80083e0 <RCCEx_PLL3_Config+0x15c>)
 80082e4:	4313      	orrs	r3, r2
 80082e6:	628b      	str	r3, [r1, #40]	; 0x28
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	3b01      	subs	r3, #1
 80082ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	3b01      	subs	r3, #1
 80082f8:	025b      	lsls	r3, r3, #9
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	431a      	orrs	r2, r3
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	68db      	ldr	r3, [r3, #12]
 8008302:	3b01      	subs	r3, #1
 8008304:	041b      	lsls	r3, r3, #16
 8008306:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800830a:	431a      	orrs	r2, r3
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	691b      	ldr	r3, [r3, #16]
 8008310:	3b01      	subs	r3, #1
 8008312:	061b      	lsls	r3, r3, #24
 8008314:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008318:	4931      	ldr	r1, [pc, #196]	; (80083e0 <RCCEx_PLL3_Config+0x15c>)
 800831a:	4313      	orrs	r3, r2
 800831c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800831e:	4b30      	ldr	r3, [pc, #192]	; (80083e0 <RCCEx_PLL3_Config+0x15c>)
 8008320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008322:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	695b      	ldr	r3, [r3, #20]
 800832a:	492d      	ldr	r1, [pc, #180]	; (80083e0 <RCCEx_PLL3_Config+0x15c>)
 800832c:	4313      	orrs	r3, r2
 800832e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008330:	4b2b      	ldr	r3, [pc, #172]	; (80083e0 <RCCEx_PLL3_Config+0x15c>)
 8008332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008334:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	699b      	ldr	r3, [r3, #24]
 800833c:	4928      	ldr	r1, [pc, #160]	; (80083e0 <RCCEx_PLL3_Config+0x15c>)
 800833e:	4313      	orrs	r3, r2
 8008340:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008342:	4b27      	ldr	r3, [pc, #156]	; (80083e0 <RCCEx_PLL3_Config+0x15c>)
 8008344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008346:	4a26      	ldr	r2, [pc, #152]	; (80083e0 <RCCEx_PLL3_Config+0x15c>)
 8008348:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800834c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800834e:	4b24      	ldr	r3, [pc, #144]	; (80083e0 <RCCEx_PLL3_Config+0x15c>)
 8008350:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008352:	4b24      	ldr	r3, [pc, #144]	; (80083e4 <RCCEx_PLL3_Config+0x160>)
 8008354:	4013      	ands	r3, r2
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	69d2      	ldr	r2, [r2, #28]
 800835a:	00d2      	lsls	r2, r2, #3
 800835c:	4920      	ldr	r1, [pc, #128]	; (80083e0 <RCCEx_PLL3_Config+0x15c>)
 800835e:	4313      	orrs	r3, r2
 8008360:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008362:	4b1f      	ldr	r3, [pc, #124]	; (80083e0 <RCCEx_PLL3_Config+0x15c>)
 8008364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008366:	4a1e      	ldr	r2, [pc, #120]	; (80083e0 <RCCEx_PLL3_Config+0x15c>)
 8008368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800836c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d106      	bne.n	8008382 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008374:	4b1a      	ldr	r3, [pc, #104]	; (80083e0 <RCCEx_PLL3_Config+0x15c>)
 8008376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008378:	4a19      	ldr	r2, [pc, #100]	; (80083e0 <RCCEx_PLL3_Config+0x15c>)
 800837a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800837e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008380:	e00f      	b.n	80083a2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	2b01      	cmp	r3, #1
 8008386:	d106      	bne.n	8008396 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008388:	4b15      	ldr	r3, [pc, #84]	; (80083e0 <RCCEx_PLL3_Config+0x15c>)
 800838a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800838c:	4a14      	ldr	r2, [pc, #80]	; (80083e0 <RCCEx_PLL3_Config+0x15c>)
 800838e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008392:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008394:	e005      	b.n	80083a2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008396:	4b12      	ldr	r3, [pc, #72]	; (80083e0 <RCCEx_PLL3_Config+0x15c>)
 8008398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800839a:	4a11      	ldr	r2, [pc, #68]	; (80083e0 <RCCEx_PLL3_Config+0x15c>)
 800839c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80083a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80083a2:	4b0f      	ldr	r3, [pc, #60]	; (80083e0 <RCCEx_PLL3_Config+0x15c>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a0e      	ldr	r2, [pc, #56]	; (80083e0 <RCCEx_PLL3_Config+0x15c>)
 80083a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083ae:	f7f9 fca9 	bl	8001d04 <HAL_GetTick>
 80083b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80083b4:	e008      	b.n	80083c8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80083b6:	f7f9 fca5 	bl	8001d04 <HAL_GetTick>
 80083ba:	4602      	mov	r2, r0
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	1ad3      	subs	r3, r2, r3
 80083c0:	2b02      	cmp	r3, #2
 80083c2:	d901      	bls.n	80083c8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80083c4:	2303      	movs	r3, #3
 80083c6:	e006      	b.n	80083d6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80083c8:	4b05      	ldr	r3, [pc, #20]	; (80083e0 <RCCEx_PLL3_Config+0x15c>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d0f0      	beq.n	80083b6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80083d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3710      	adds	r7, #16
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	bf00      	nop
 80083e0:	58024400 	.word	0x58024400
 80083e4:	ffff0007 	.word	0xffff0007

080083e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80083e8:	b084      	sub	sp, #16
 80083ea:	b580      	push	{r7, lr}
 80083ec:	b084      	sub	sp, #16
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
 80083f2:	f107 001c 	add.w	r0, r7, #28
 80083f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80083fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d120      	bne.n	8008442 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008404:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	68da      	ldr	r2, [r3, #12]
 8008410:	4b2a      	ldr	r3, [pc, #168]	; (80084bc <USB_CoreInit+0xd4>)
 8008412:	4013      	ands	r3, r2
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	68db      	ldr	r3, [r3, #12]
 800841c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008424:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008426:	2b01      	cmp	r3, #1
 8008428:	d105      	bne.n	8008436 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f001 faf8 	bl	8009a2c <USB_CoreReset>
 800843c:	4603      	mov	r3, r0
 800843e:	73fb      	strb	r3, [r7, #15]
 8008440:	e01a      	b.n	8008478 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	68db      	ldr	r3, [r3, #12]
 8008446:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f001 faec 	bl	8009a2c <USB_CoreReset>
 8008454:	4603      	mov	r3, r0
 8008456:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008458:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800845a:	2b00      	cmp	r3, #0
 800845c:	d106      	bne.n	800846c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008462:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	639a      	str	r2, [r3, #56]	; 0x38
 800846a:	e005      	b.n	8008478 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008470:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847a:	2b01      	cmp	r3, #1
 800847c:	d116      	bne.n	80084ac <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008482:	b29a      	uxth	r2, r3
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800848c:	4b0c      	ldr	r3, [pc, #48]	; (80084c0 <USB_CoreInit+0xd8>)
 800848e:	4313      	orrs	r3, r2
 8008490:	687a      	ldr	r2, [r7, #4]
 8008492:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	689b      	ldr	r3, [r3, #8]
 8008498:	f043 0206 	orr.w	r2, r3, #6
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	689b      	ldr	r3, [r3, #8]
 80084a4:	f043 0220 	orr.w	r2, r3, #32
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80084ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3710      	adds	r7, #16
 80084b2:	46bd      	mov	sp, r7
 80084b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80084b8:	b004      	add	sp, #16
 80084ba:	4770      	bx	lr
 80084bc:	ffbdffbf 	.word	0xffbdffbf
 80084c0:	03ee0000 	.word	0x03ee0000

080084c4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b087      	sub	sp, #28
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	60b9      	str	r1, [r7, #8]
 80084ce:	4613      	mov	r3, r2
 80084d0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80084d2:	79fb      	ldrb	r3, [r7, #7]
 80084d4:	2b02      	cmp	r3, #2
 80084d6:	d165      	bne.n	80085a4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	4a41      	ldr	r2, [pc, #260]	; (80085e0 <USB_SetTurnaroundTime+0x11c>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d906      	bls.n	80084ee <USB_SetTurnaroundTime+0x2a>
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	4a40      	ldr	r2, [pc, #256]	; (80085e4 <USB_SetTurnaroundTime+0x120>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d202      	bcs.n	80084ee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80084e8:	230f      	movs	r3, #15
 80084ea:	617b      	str	r3, [r7, #20]
 80084ec:	e062      	b.n	80085b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	4a3c      	ldr	r2, [pc, #240]	; (80085e4 <USB_SetTurnaroundTime+0x120>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d306      	bcc.n	8008504 <USB_SetTurnaroundTime+0x40>
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	4a3b      	ldr	r2, [pc, #236]	; (80085e8 <USB_SetTurnaroundTime+0x124>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d202      	bcs.n	8008504 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80084fe:	230e      	movs	r3, #14
 8008500:	617b      	str	r3, [r7, #20]
 8008502:	e057      	b.n	80085b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	4a38      	ldr	r2, [pc, #224]	; (80085e8 <USB_SetTurnaroundTime+0x124>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d306      	bcc.n	800851a <USB_SetTurnaroundTime+0x56>
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	4a37      	ldr	r2, [pc, #220]	; (80085ec <USB_SetTurnaroundTime+0x128>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d202      	bcs.n	800851a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008514:	230d      	movs	r3, #13
 8008516:	617b      	str	r3, [r7, #20]
 8008518:	e04c      	b.n	80085b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	4a33      	ldr	r2, [pc, #204]	; (80085ec <USB_SetTurnaroundTime+0x128>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d306      	bcc.n	8008530 <USB_SetTurnaroundTime+0x6c>
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	4a32      	ldr	r2, [pc, #200]	; (80085f0 <USB_SetTurnaroundTime+0x12c>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d802      	bhi.n	8008530 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800852a:	230c      	movs	r3, #12
 800852c:	617b      	str	r3, [r7, #20]
 800852e:	e041      	b.n	80085b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	4a2f      	ldr	r2, [pc, #188]	; (80085f0 <USB_SetTurnaroundTime+0x12c>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d906      	bls.n	8008546 <USB_SetTurnaroundTime+0x82>
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	4a2e      	ldr	r2, [pc, #184]	; (80085f4 <USB_SetTurnaroundTime+0x130>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d802      	bhi.n	8008546 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008540:	230b      	movs	r3, #11
 8008542:	617b      	str	r3, [r7, #20]
 8008544:	e036      	b.n	80085b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	4a2a      	ldr	r2, [pc, #168]	; (80085f4 <USB_SetTurnaroundTime+0x130>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d906      	bls.n	800855c <USB_SetTurnaroundTime+0x98>
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	4a29      	ldr	r2, [pc, #164]	; (80085f8 <USB_SetTurnaroundTime+0x134>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d802      	bhi.n	800855c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008556:	230a      	movs	r3, #10
 8008558:	617b      	str	r3, [r7, #20]
 800855a:	e02b      	b.n	80085b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	4a26      	ldr	r2, [pc, #152]	; (80085f8 <USB_SetTurnaroundTime+0x134>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d906      	bls.n	8008572 <USB_SetTurnaroundTime+0xae>
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	4a25      	ldr	r2, [pc, #148]	; (80085fc <USB_SetTurnaroundTime+0x138>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d202      	bcs.n	8008572 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800856c:	2309      	movs	r3, #9
 800856e:	617b      	str	r3, [r7, #20]
 8008570:	e020      	b.n	80085b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	4a21      	ldr	r2, [pc, #132]	; (80085fc <USB_SetTurnaroundTime+0x138>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d306      	bcc.n	8008588 <USB_SetTurnaroundTime+0xc4>
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	4a20      	ldr	r2, [pc, #128]	; (8008600 <USB_SetTurnaroundTime+0x13c>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d802      	bhi.n	8008588 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008582:	2308      	movs	r3, #8
 8008584:	617b      	str	r3, [r7, #20]
 8008586:	e015      	b.n	80085b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	4a1d      	ldr	r2, [pc, #116]	; (8008600 <USB_SetTurnaroundTime+0x13c>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d906      	bls.n	800859e <USB_SetTurnaroundTime+0xda>
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	4a1c      	ldr	r2, [pc, #112]	; (8008604 <USB_SetTurnaroundTime+0x140>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d202      	bcs.n	800859e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008598:	2307      	movs	r3, #7
 800859a:	617b      	str	r3, [r7, #20]
 800859c:	e00a      	b.n	80085b4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800859e:	2306      	movs	r3, #6
 80085a0:	617b      	str	r3, [r7, #20]
 80085a2:	e007      	b.n	80085b4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80085a4:	79fb      	ldrb	r3, [r7, #7]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d102      	bne.n	80085b0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80085aa:	2309      	movs	r3, #9
 80085ac:	617b      	str	r3, [r7, #20]
 80085ae:	e001      	b.n	80085b4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80085b0:	2309      	movs	r3, #9
 80085b2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	68db      	ldr	r3, [r3, #12]
 80085b8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	68da      	ldr	r2, [r3, #12]
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	029b      	lsls	r3, r3, #10
 80085c8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80085cc:	431a      	orrs	r2, r3
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80085d2:	2300      	movs	r3, #0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	371c      	adds	r7, #28
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr
 80085e0:	00d8acbf 	.word	0x00d8acbf
 80085e4:	00e4e1c0 	.word	0x00e4e1c0
 80085e8:	00f42400 	.word	0x00f42400
 80085ec:	01067380 	.word	0x01067380
 80085f0:	011a499f 	.word	0x011a499f
 80085f4:	01312cff 	.word	0x01312cff
 80085f8:	014ca43f 	.word	0x014ca43f
 80085fc:	016e3600 	.word	0x016e3600
 8008600:	01a6ab1f 	.word	0x01a6ab1f
 8008604:	01e84800 	.word	0x01e84800

08008608 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	f043 0201 	orr.w	r2, r3, #1
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800861c:	2300      	movs	r3, #0
}
 800861e:	4618      	mov	r0, r3
 8008620:	370c      	adds	r7, #12
 8008622:	46bd      	mov	sp, r7
 8008624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008628:	4770      	bx	lr

0800862a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800862a:	b480      	push	{r7}
 800862c:	b083      	sub	sp, #12
 800862e:	af00      	add	r7, sp, #0
 8008630:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	f023 0201 	bic.w	r2, r3, #1
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800863e:	2300      	movs	r3, #0
}
 8008640:	4618      	mov	r0, r3
 8008642:	370c      	adds	r7, #12
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr

0800864c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b084      	sub	sp, #16
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	460b      	mov	r3, r1
 8008656:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008658:	2300      	movs	r3, #0
 800865a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	68db      	ldr	r3, [r3, #12]
 8008660:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008668:	78fb      	ldrb	r3, [r7, #3]
 800866a:	2b01      	cmp	r3, #1
 800866c:	d115      	bne.n	800869a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	68db      	ldr	r3, [r3, #12]
 8008672:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800867a:	2001      	movs	r0, #1
 800867c:	f7f9 fb4e 	bl	8001d1c <HAL_Delay>
      ms++;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	3301      	adds	r3, #1
 8008684:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f001 f93f 	bl	800990a <USB_GetMode>
 800868c:	4603      	mov	r3, r0
 800868e:	2b01      	cmp	r3, #1
 8008690:	d01e      	beq.n	80086d0 <USB_SetCurrentMode+0x84>
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2b31      	cmp	r3, #49	; 0x31
 8008696:	d9f0      	bls.n	800867a <USB_SetCurrentMode+0x2e>
 8008698:	e01a      	b.n	80086d0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800869a:	78fb      	ldrb	r3, [r7, #3]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d115      	bne.n	80086cc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	68db      	ldr	r3, [r3, #12]
 80086a4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80086ac:	2001      	movs	r0, #1
 80086ae:	f7f9 fb35 	bl	8001d1c <HAL_Delay>
      ms++;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	3301      	adds	r3, #1
 80086b6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f001 f926 	bl	800990a <USB_GetMode>
 80086be:	4603      	mov	r3, r0
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d005      	beq.n	80086d0 <USB_SetCurrentMode+0x84>
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2b31      	cmp	r3, #49	; 0x31
 80086c8:	d9f0      	bls.n	80086ac <USB_SetCurrentMode+0x60>
 80086ca:	e001      	b.n	80086d0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80086cc:	2301      	movs	r3, #1
 80086ce:	e005      	b.n	80086dc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2b32      	cmp	r3, #50	; 0x32
 80086d4:	d101      	bne.n	80086da <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80086d6:	2301      	movs	r3, #1
 80086d8:	e000      	b.n	80086dc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80086da:	2300      	movs	r3, #0
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3710      	adds	r7, #16
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80086e4:	b084      	sub	sp, #16
 80086e6:	b580      	push	{r7, lr}
 80086e8:	b086      	sub	sp, #24
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
 80086ee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80086f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80086f6:	2300      	movs	r3, #0
 80086f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80086fe:	2300      	movs	r3, #0
 8008700:	613b      	str	r3, [r7, #16]
 8008702:	e009      	b.n	8008718 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	3340      	adds	r3, #64	; 0x40
 800870a:	009b      	lsls	r3, r3, #2
 800870c:	4413      	add	r3, r2
 800870e:	2200      	movs	r2, #0
 8008710:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	3301      	adds	r3, #1
 8008716:	613b      	str	r3, [r7, #16]
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	2b0e      	cmp	r3, #14
 800871c:	d9f2      	bls.n	8008704 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800871e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008720:	2b00      	cmp	r3, #0
 8008722:	d11c      	bne.n	800875e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	68fa      	ldr	r2, [r7, #12]
 800872e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008732:	f043 0302 	orr.w	r3, r3, #2
 8008736:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800873c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	601a      	str	r2, [r3, #0]
 800875c:	e005      	b.n	800876a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008762:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008770:	461a      	mov	r2, r3
 8008772:	2300      	movs	r3, #0
 8008774:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800877c:	4619      	mov	r1, r3
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008784:	461a      	mov	r2, r3
 8008786:	680b      	ldr	r3, [r1, #0]
 8008788:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800878a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800878c:	2b01      	cmp	r3, #1
 800878e:	d10c      	bne.n	80087aa <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008792:	2b00      	cmp	r3, #0
 8008794:	d104      	bne.n	80087a0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008796:	2100      	movs	r1, #0
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 f965 	bl	8008a68 <USB_SetDevSpeed>
 800879e:	e008      	b.n	80087b2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80087a0:	2101      	movs	r1, #1
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 f960 	bl	8008a68 <USB_SetDevSpeed>
 80087a8:	e003      	b.n	80087b2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80087aa:	2103      	movs	r1, #3
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 f95b 	bl	8008a68 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80087b2:	2110      	movs	r1, #16
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f000 f8f3 	bl	80089a0 <USB_FlushTxFifo>
 80087ba:	4603      	mov	r3, r0
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d001      	beq.n	80087c4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80087c0:	2301      	movs	r3, #1
 80087c2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 f91f 	bl	8008a08 <USB_FlushRxFifo>
 80087ca:	4603      	mov	r3, r0
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d001      	beq.n	80087d4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80087d0:	2301      	movs	r3, #1
 80087d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087da:	461a      	mov	r2, r3
 80087dc:	2300      	movs	r3, #0
 80087de:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087e6:	461a      	mov	r2, r3
 80087e8:	2300      	movs	r3, #0
 80087ea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087f2:	461a      	mov	r2, r3
 80087f4:	2300      	movs	r3, #0
 80087f6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80087f8:	2300      	movs	r3, #0
 80087fa:	613b      	str	r3, [r7, #16]
 80087fc:	e043      	b.n	8008886 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	015a      	lsls	r2, r3, #5
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	4413      	add	r3, r2
 8008806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008810:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008814:	d118      	bne.n	8008848 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d10a      	bne.n	8008832 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	015a      	lsls	r2, r3, #5
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	4413      	add	r3, r2
 8008824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008828:	461a      	mov	r2, r3
 800882a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800882e:	6013      	str	r3, [r2, #0]
 8008830:	e013      	b.n	800885a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	015a      	lsls	r2, r3, #5
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	4413      	add	r3, r2
 800883a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800883e:	461a      	mov	r2, r3
 8008840:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008844:	6013      	str	r3, [r2, #0]
 8008846:	e008      	b.n	800885a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	015a      	lsls	r2, r3, #5
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	4413      	add	r3, r2
 8008850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008854:	461a      	mov	r2, r3
 8008856:	2300      	movs	r3, #0
 8008858:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	015a      	lsls	r2, r3, #5
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	4413      	add	r3, r2
 8008862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008866:	461a      	mov	r2, r3
 8008868:	2300      	movs	r3, #0
 800886a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	015a      	lsls	r2, r3, #5
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	4413      	add	r3, r2
 8008874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008878:	461a      	mov	r2, r3
 800887a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800887e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	3301      	adds	r3, #1
 8008884:	613b      	str	r3, [r7, #16]
 8008886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008888:	693a      	ldr	r2, [r7, #16]
 800888a:	429a      	cmp	r2, r3
 800888c:	d3b7      	bcc.n	80087fe <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800888e:	2300      	movs	r3, #0
 8008890:	613b      	str	r3, [r7, #16]
 8008892:	e043      	b.n	800891c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	015a      	lsls	r2, r3, #5
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	4413      	add	r3, r2
 800889c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088aa:	d118      	bne.n	80088de <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d10a      	bne.n	80088c8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	015a      	lsls	r2, r3, #5
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	4413      	add	r3, r2
 80088ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088be:	461a      	mov	r2, r3
 80088c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80088c4:	6013      	str	r3, [r2, #0]
 80088c6:	e013      	b.n	80088f0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	015a      	lsls	r2, r3, #5
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	4413      	add	r3, r2
 80088d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088d4:	461a      	mov	r2, r3
 80088d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80088da:	6013      	str	r3, [r2, #0]
 80088dc:	e008      	b.n	80088f0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	015a      	lsls	r2, r3, #5
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	4413      	add	r3, r2
 80088e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088ea:	461a      	mov	r2, r3
 80088ec:	2300      	movs	r3, #0
 80088ee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	015a      	lsls	r2, r3, #5
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	4413      	add	r3, r2
 80088f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088fc:	461a      	mov	r2, r3
 80088fe:	2300      	movs	r3, #0
 8008900:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	015a      	lsls	r2, r3, #5
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	4413      	add	r3, r2
 800890a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800890e:	461a      	mov	r2, r3
 8008910:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008914:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	3301      	adds	r3, #1
 800891a:	613b      	str	r3, [r7, #16]
 800891c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800891e:	693a      	ldr	r2, [r7, #16]
 8008920:	429a      	cmp	r2, r3
 8008922:	d3b7      	bcc.n	8008894 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800892a:	691b      	ldr	r3, [r3, #16]
 800892c:	68fa      	ldr	r2, [r7, #12]
 800892e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008932:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008936:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2200      	movs	r2, #0
 800893c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008944:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008948:	2b00      	cmp	r3, #0
 800894a:	d105      	bne.n	8008958 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	699b      	ldr	r3, [r3, #24]
 8008950:	f043 0210 	orr.w	r2, r3, #16
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	699a      	ldr	r2, [r3, #24]
 800895c:	4b0e      	ldr	r3, [pc, #56]	; (8008998 <USB_DevInit+0x2b4>)
 800895e:	4313      	orrs	r3, r2
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008966:	2b00      	cmp	r3, #0
 8008968:	d005      	beq.n	8008976 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	699b      	ldr	r3, [r3, #24]
 800896e:	f043 0208 	orr.w	r2, r3, #8
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008976:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008978:	2b01      	cmp	r3, #1
 800897a:	d105      	bne.n	8008988 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	699a      	ldr	r2, [r3, #24]
 8008980:	4b06      	ldr	r3, [pc, #24]	; (800899c <USB_DevInit+0x2b8>)
 8008982:	4313      	orrs	r3, r2
 8008984:	687a      	ldr	r2, [r7, #4]
 8008986:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008988:	7dfb      	ldrb	r3, [r7, #23]
}
 800898a:	4618      	mov	r0, r3
 800898c:	3718      	adds	r7, #24
 800898e:	46bd      	mov	sp, r7
 8008990:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008994:	b004      	add	sp, #16
 8008996:	4770      	bx	lr
 8008998:	803c3800 	.word	0x803c3800
 800899c:	40000004 	.word	0x40000004

080089a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b085      	sub	sp, #20
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80089aa:	2300      	movs	r3, #0
 80089ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	3301      	adds	r3, #1
 80089b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	4a13      	ldr	r2, [pc, #76]	; (8008a04 <USB_FlushTxFifo+0x64>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d901      	bls.n	80089c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80089bc:	2303      	movs	r3, #3
 80089be:	e01b      	b.n	80089f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	691b      	ldr	r3, [r3, #16]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	daf2      	bge.n	80089ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80089c8:	2300      	movs	r3, #0
 80089ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	019b      	lsls	r3, r3, #6
 80089d0:	f043 0220 	orr.w	r2, r3, #32
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	3301      	adds	r3, #1
 80089dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	4a08      	ldr	r2, [pc, #32]	; (8008a04 <USB_FlushTxFifo+0x64>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d901      	bls.n	80089ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80089e6:	2303      	movs	r3, #3
 80089e8:	e006      	b.n	80089f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	691b      	ldr	r3, [r3, #16]
 80089ee:	f003 0320 	and.w	r3, r3, #32
 80089f2:	2b20      	cmp	r3, #32
 80089f4:	d0f0      	beq.n	80089d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80089f6:	2300      	movs	r3, #0
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3714      	adds	r7, #20
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr
 8008a04:	00030d40 	.word	0x00030d40

08008a08 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b085      	sub	sp, #20
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a10:	2300      	movs	r3, #0
 8008a12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	3301      	adds	r3, #1
 8008a18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	4a11      	ldr	r2, [pc, #68]	; (8008a64 <USB_FlushRxFifo+0x5c>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d901      	bls.n	8008a26 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008a22:	2303      	movs	r3, #3
 8008a24:	e018      	b.n	8008a58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	691b      	ldr	r3, [r3, #16]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	daf2      	bge.n	8008a14 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2210      	movs	r2, #16
 8008a36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	3301      	adds	r3, #1
 8008a3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	4a08      	ldr	r2, [pc, #32]	; (8008a64 <USB_FlushRxFifo+0x5c>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d901      	bls.n	8008a4a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008a46:	2303      	movs	r3, #3
 8008a48:	e006      	b.n	8008a58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	691b      	ldr	r3, [r3, #16]
 8008a4e:	f003 0310 	and.w	r3, r3, #16
 8008a52:	2b10      	cmp	r3, #16
 8008a54:	d0f0      	beq.n	8008a38 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008a56:	2300      	movs	r3, #0
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3714      	adds	r7, #20
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr
 8008a64:	00030d40 	.word	0x00030d40

08008a68 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b085      	sub	sp, #20
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	460b      	mov	r3, r1
 8008a72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a7e:	681a      	ldr	r2, [r3, #0]
 8008a80:	78fb      	ldrb	r3, [r7, #3]
 8008a82:	68f9      	ldr	r1, [r7, #12]
 8008a84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008a8c:	2300      	movs	r3, #0
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3714      	adds	r7, #20
 8008a92:	46bd      	mov	sp, r7
 8008a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a98:	4770      	bx	lr

08008a9a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008a9a:	b480      	push	{r7}
 8008a9c:	b087      	sub	sp, #28
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	f003 0306 	and.w	r3, r3, #6
 8008ab2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d102      	bne.n	8008ac0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008aba:	2300      	movs	r3, #0
 8008abc:	75fb      	strb	r3, [r7, #23]
 8008abe:	e00a      	b.n	8008ad6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2b02      	cmp	r3, #2
 8008ac4:	d002      	beq.n	8008acc <USB_GetDevSpeed+0x32>
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2b06      	cmp	r3, #6
 8008aca:	d102      	bne.n	8008ad2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008acc:	2302      	movs	r3, #2
 8008ace:	75fb      	strb	r3, [r7, #23]
 8008ad0:	e001      	b.n	8008ad6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008ad2:	230f      	movs	r3, #15
 8008ad4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008ad6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	371c      	adds	r7, #28
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr

08008ae4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b085      	sub	sp, #20
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	781b      	ldrb	r3, [r3, #0]
 8008af6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	785b      	ldrb	r3, [r3, #1]
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d139      	bne.n	8008b74 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b06:	69da      	ldr	r2, [r3, #28]
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	f003 030f 	and.w	r3, r3, #15
 8008b10:	2101      	movs	r1, #1
 8008b12:	fa01 f303 	lsl.w	r3, r1, r3
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	68f9      	ldr	r1, [r7, #12]
 8008b1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	015a      	lsls	r2, r3, #5
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	4413      	add	r3, r2
 8008b2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d153      	bne.n	8008be0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	015a      	lsls	r2, r3, #5
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	4413      	add	r3, r2
 8008b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b44:	681a      	ldr	r2, [r3, #0]
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	689b      	ldr	r3, [r3, #8]
 8008b4a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	791b      	ldrb	r3, [r3, #4]
 8008b52:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008b54:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	059b      	lsls	r3, r3, #22
 8008b5a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008b5c:	431a      	orrs	r2, r3
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	0159      	lsls	r1, r3, #5
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	440b      	add	r3, r1
 8008b66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b6a:	4619      	mov	r1, r3
 8008b6c:	4b20      	ldr	r3, [pc, #128]	; (8008bf0 <USB_ActivateEndpoint+0x10c>)
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	600b      	str	r3, [r1, #0]
 8008b72:	e035      	b.n	8008be0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b7a:	69da      	ldr	r2, [r3, #28]
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	f003 030f 	and.w	r3, r3, #15
 8008b84:	2101      	movs	r1, #1
 8008b86:	fa01 f303 	lsl.w	r3, r1, r3
 8008b8a:	041b      	lsls	r3, r3, #16
 8008b8c:	68f9      	ldr	r1, [r7, #12]
 8008b8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b92:	4313      	orrs	r3, r2
 8008b94:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	015a      	lsls	r2, r3, #5
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d119      	bne.n	8008be0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	015a      	lsls	r2, r3, #5
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	4413      	add	r3, r2
 8008bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	689b      	ldr	r3, [r3, #8]
 8008bbe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	791b      	ldrb	r3, [r3, #4]
 8008bc6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008bc8:	430b      	orrs	r3, r1
 8008bca:	431a      	orrs	r2, r3
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	0159      	lsls	r1, r3, #5
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	440b      	add	r3, r1
 8008bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bd8:	4619      	mov	r1, r3
 8008bda:	4b05      	ldr	r3, [pc, #20]	; (8008bf0 <USB_ActivateEndpoint+0x10c>)
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008be0:	2300      	movs	r3, #0
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3714      	adds	r7, #20
 8008be6:	46bd      	mov	sp, r7
 8008be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bec:	4770      	bx	lr
 8008bee:	bf00      	nop
 8008bf0:	10008000 	.word	0x10008000

08008bf4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b085      	sub	sp, #20
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	785b      	ldrb	r3, [r3, #1]
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d161      	bne.n	8008cd4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	015a      	lsls	r2, r3, #5
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	4413      	add	r3, r2
 8008c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c26:	d11f      	bne.n	8008c68 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	015a      	lsls	r2, r3, #5
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	4413      	add	r3, r2
 8008c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	68ba      	ldr	r2, [r7, #8]
 8008c38:	0151      	lsls	r1, r2, #5
 8008c3a:	68fa      	ldr	r2, [r7, #12]
 8008c3c:	440a      	add	r2, r1
 8008c3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008c46:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	015a      	lsls	r2, r3, #5
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	4413      	add	r3, r2
 8008c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	68ba      	ldr	r2, [r7, #8]
 8008c58:	0151      	lsls	r1, r2, #5
 8008c5a:	68fa      	ldr	r2, [r7, #12]
 8008c5c:	440a      	add	r2, r1
 8008c5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c66:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	781b      	ldrb	r3, [r3, #0]
 8008c74:	f003 030f 	and.w	r3, r3, #15
 8008c78:	2101      	movs	r1, #1
 8008c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	43db      	mvns	r3, r3
 8008c82:	68f9      	ldr	r1, [r7, #12]
 8008c84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c88:	4013      	ands	r3, r2
 8008c8a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c92:	69da      	ldr	r2, [r3, #28]
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	f003 030f 	and.w	r3, r3, #15
 8008c9c:	2101      	movs	r1, #1
 8008c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	43db      	mvns	r3, r3
 8008ca6:	68f9      	ldr	r1, [r7, #12]
 8008ca8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008cac:	4013      	ands	r3, r2
 8008cae:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	015a      	lsls	r2, r3, #5
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	0159      	lsls	r1, r3, #5
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	440b      	add	r3, r1
 8008cc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cca:	4619      	mov	r1, r3
 8008ccc:	4b35      	ldr	r3, [pc, #212]	; (8008da4 <USB_DeactivateEndpoint+0x1b0>)
 8008cce:	4013      	ands	r3, r2
 8008cd0:	600b      	str	r3, [r1, #0]
 8008cd2:	e060      	b.n	8008d96 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	015a      	lsls	r2, r3, #5
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	4413      	add	r3, r2
 8008cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ce6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008cea:	d11f      	bne.n	8008d2c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	015a      	lsls	r2, r3, #5
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	4413      	add	r3, r2
 8008cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	68ba      	ldr	r2, [r7, #8]
 8008cfc:	0151      	lsls	r1, r2, #5
 8008cfe:	68fa      	ldr	r2, [r7, #12]
 8008d00:	440a      	add	r2, r1
 8008d02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d06:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008d0a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	015a      	lsls	r2, r3, #5
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	4413      	add	r3, r2
 8008d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	68ba      	ldr	r2, [r7, #8]
 8008d1c:	0151      	lsls	r1, r2, #5
 8008d1e:	68fa      	ldr	r2, [r7, #12]
 8008d20:	440a      	add	r2, r1
 8008d22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d2a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	781b      	ldrb	r3, [r3, #0]
 8008d38:	f003 030f 	and.w	r3, r3, #15
 8008d3c:	2101      	movs	r1, #1
 8008d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8008d42:	041b      	lsls	r3, r3, #16
 8008d44:	43db      	mvns	r3, r3
 8008d46:	68f9      	ldr	r1, [r7, #12]
 8008d48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d4c:	4013      	ands	r3, r2
 8008d4e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d56:	69da      	ldr	r2, [r3, #28]
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	781b      	ldrb	r3, [r3, #0]
 8008d5c:	f003 030f 	and.w	r3, r3, #15
 8008d60:	2101      	movs	r1, #1
 8008d62:	fa01 f303 	lsl.w	r3, r1, r3
 8008d66:	041b      	lsls	r3, r3, #16
 8008d68:	43db      	mvns	r3, r3
 8008d6a:	68f9      	ldr	r1, [r7, #12]
 8008d6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d70:	4013      	ands	r3, r2
 8008d72:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	015a      	lsls	r2, r3, #5
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	4413      	add	r3, r2
 8008d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	0159      	lsls	r1, r3, #5
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	440b      	add	r3, r1
 8008d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d8e:	4619      	mov	r1, r3
 8008d90:	4b05      	ldr	r3, [pc, #20]	; (8008da8 <USB_DeactivateEndpoint+0x1b4>)
 8008d92:	4013      	ands	r3, r2
 8008d94:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008d96:	2300      	movs	r3, #0
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3714      	adds	r7, #20
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr
 8008da4:	ec337800 	.word	0xec337800
 8008da8:	eff37800 	.word	0xeff37800

08008dac <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b08a      	sub	sp, #40	; 0x28
 8008db0:	af02      	add	r7, sp, #8
 8008db2:	60f8      	str	r0, [r7, #12]
 8008db4:	60b9      	str	r1, [r7, #8]
 8008db6:	4613      	mov	r3, r2
 8008db8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	785b      	ldrb	r3, [r3, #1]
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	f040 8181 	bne.w	80090d0 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	691b      	ldr	r3, [r3, #16]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d132      	bne.n	8008e3c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008dd6:	69bb      	ldr	r3, [r7, #24]
 8008dd8:	015a      	lsls	r2, r3, #5
 8008dda:	69fb      	ldr	r3, [r7, #28]
 8008ddc:	4413      	add	r3, r2
 8008dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008de2:	691a      	ldr	r2, [r3, #16]
 8008de4:	69bb      	ldr	r3, [r7, #24]
 8008de6:	0159      	lsls	r1, r3, #5
 8008de8:	69fb      	ldr	r3, [r7, #28]
 8008dea:	440b      	add	r3, r1
 8008dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008df0:	4619      	mov	r1, r3
 8008df2:	4ba5      	ldr	r3, [pc, #660]	; (8009088 <USB_EPStartXfer+0x2dc>)
 8008df4:	4013      	ands	r3, r2
 8008df6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008df8:	69bb      	ldr	r3, [r7, #24]
 8008dfa:	015a      	lsls	r2, r3, #5
 8008dfc:	69fb      	ldr	r3, [r7, #28]
 8008dfe:	4413      	add	r3, r2
 8008e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e04:	691b      	ldr	r3, [r3, #16]
 8008e06:	69ba      	ldr	r2, [r7, #24]
 8008e08:	0151      	lsls	r1, r2, #5
 8008e0a:	69fa      	ldr	r2, [r7, #28]
 8008e0c:	440a      	add	r2, r1
 8008e0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008e18:	69bb      	ldr	r3, [r7, #24]
 8008e1a:	015a      	lsls	r2, r3, #5
 8008e1c:	69fb      	ldr	r3, [r7, #28]
 8008e1e:	4413      	add	r3, r2
 8008e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e24:	691a      	ldr	r2, [r3, #16]
 8008e26:	69bb      	ldr	r3, [r7, #24]
 8008e28:	0159      	lsls	r1, r3, #5
 8008e2a:	69fb      	ldr	r3, [r7, #28]
 8008e2c:	440b      	add	r3, r1
 8008e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e32:	4619      	mov	r1, r3
 8008e34:	4b95      	ldr	r3, [pc, #596]	; (800908c <USB_EPStartXfer+0x2e0>)
 8008e36:	4013      	ands	r3, r2
 8008e38:	610b      	str	r3, [r1, #16]
 8008e3a:	e092      	b.n	8008f62 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008e3c:	69bb      	ldr	r3, [r7, #24]
 8008e3e:	015a      	lsls	r2, r3, #5
 8008e40:	69fb      	ldr	r3, [r7, #28]
 8008e42:	4413      	add	r3, r2
 8008e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e48:	691a      	ldr	r2, [r3, #16]
 8008e4a:	69bb      	ldr	r3, [r7, #24]
 8008e4c:	0159      	lsls	r1, r3, #5
 8008e4e:	69fb      	ldr	r3, [r7, #28]
 8008e50:	440b      	add	r3, r1
 8008e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e56:	4619      	mov	r1, r3
 8008e58:	4b8c      	ldr	r3, [pc, #560]	; (800908c <USB_EPStartXfer+0x2e0>)
 8008e5a:	4013      	ands	r3, r2
 8008e5c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008e5e:	69bb      	ldr	r3, [r7, #24]
 8008e60:	015a      	lsls	r2, r3, #5
 8008e62:	69fb      	ldr	r3, [r7, #28]
 8008e64:	4413      	add	r3, r2
 8008e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e6a:	691a      	ldr	r2, [r3, #16]
 8008e6c:	69bb      	ldr	r3, [r7, #24]
 8008e6e:	0159      	lsls	r1, r3, #5
 8008e70:	69fb      	ldr	r3, [r7, #28]
 8008e72:	440b      	add	r3, r1
 8008e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e78:	4619      	mov	r1, r3
 8008e7a:	4b83      	ldr	r3, [pc, #524]	; (8009088 <USB_EPStartXfer+0x2dc>)
 8008e7c:	4013      	ands	r3, r2
 8008e7e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8008e80:	69bb      	ldr	r3, [r7, #24]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d11a      	bne.n	8008ebc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	691a      	ldr	r2, [r3, #16]
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	689b      	ldr	r3, [r3, #8]
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d903      	bls.n	8008e9a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	689a      	ldr	r2, [r3, #8]
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008e9a:	69bb      	ldr	r3, [r7, #24]
 8008e9c:	015a      	lsls	r2, r3, #5
 8008e9e:	69fb      	ldr	r3, [r7, #28]
 8008ea0:	4413      	add	r3, r2
 8008ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ea6:	691b      	ldr	r3, [r3, #16]
 8008ea8:	69ba      	ldr	r2, [r7, #24]
 8008eaa:	0151      	lsls	r1, r2, #5
 8008eac:	69fa      	ldr	r2, [r7, #28]
 8008eae:	440a      	add	r2, r1
 8008eb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008eb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008eb8:	6113      	str	r3, [r2, #16]
 8008eba:	e01b      	b.n	8008ef4 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	015a      	lsls	r2, r3, #5
 8008ec0:	69fb      	ldr	r3, [r7, #28]
 8008ec2:	4413      	add	r3, r2
 8008ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ec8:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	6919      	ldr	r1, [r3, #16]
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	689b      	ldr	r3, [r3, #8]
 8008ed2:	440b      	add	r3, r1
 8008ed4:	1e59      	subs	r1, r3, #1
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	689b      	ldr	r3, [r3, #8]
 8008eda:	fbb1 f3f3 	udiv	r3, r1, r3
 8008ede:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008ee0:	4b6b      	ldr	r3, [pc, #428]	; (8009090 <USB_EPStartXfer+0x2e4>)
 8008ee2:	400b      	ands	r3, r1
 8008ee4:	69b9      	ldr	r1, [r7, #24]
 8008ee6:	0148      	lsls	r0, r1, #5
 8008ee8:	69f9      	ldr	r1, [r7, #28]
 8008eea:	4401      	add	r1, r0
 8008eec:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008ef4:	69bb      	ldr	r3, [r7, #24]
 8008ef6:	015a      	lsls	r2, r3, #5
 8008ef8:	69fb      	ldr	r3, [r7, #28]
 8008efa:	4413      	add	r3, r2
 8008efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f00:	691a      	ldr	r2, [r3, #16]
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	691b      	ldr	r3, [r3, #16]
 8008f06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f0a:	69b9      	ldr	r1, [r7, #24]
 8008f0c:	0148      	lsls	r0, r1, #5
 8008f0e:	69f9      	ldr	r1, [r7, #28]
 8008f10:	4401      	add	r1, r0
 8008f12:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008f16:	4313      	orrs	r3, r2
 8008f18:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	791b      	ldrb	r3, [r3, #4]
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	d11f      	bne.n	8008f62 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008f22:	69bb      	ldr	r3, [r7, #24]
 8008f24:	015a      	lsls	r2, r3, #5
 8008f26:	69fb      	ldr	r3, [r7, #28]
 8008f28:	4413      	add	r3, r2
 8008f2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f2e:	691b      	ldr	r3, [r3, #16]
 8008f30:	69ba      	ldr	r2, [r7, #24]
 8008f32:	0151      	lsls	r1, r2, #5
 8008f34:	69fa      	ldr	r2, [r7, #28]
 8008f36:	440a      	add	r2, r1
 8008f38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f3c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008f40:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008f42:	69bb      	ldr	r3, [r7, #24]
 8008f44:	015a      	lsls	r2, r3, #5
 8008f46:	69fb      	ldr	r3, [r7, #28]
 8008f48:	4413      	add	r3, r2
 8008f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f4e:	691b      	ldr	r3, [r3, #16]
 8008f50:	69ba      	ldr	r2, [r7, #24]
 8008f52:	0151      	lsls	r1, r2, #5
 8008f54:	69fa      	ldr	r2, [r7, #28]
 8008f56:	440a      	add	r2, r1
 8008f58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008f60:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008f62:	79fb      	ldrb	r3, [r7, #7]
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d14b      	bne.n	8009000 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	69db      	ldr	r3, [r3, #28]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d009      	beq.n	8008f84 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008f70:	69bb      	ldr	r3, [r7, #24]
 8008f72:	015a      	lsls	r2, r3, #5
 8008f74:	69fb      	ldr	r3, [r7, #28]
 8008f76:	4413      	add	r3, r2
 8008f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	69db      	ldr	r3, [r3, #28]
 8008f82:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	791b      	ldrb	r3, [r3, #4]
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d128      	bne.n	8008fde <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008f8c:	69fb      	ldr	r3, [r7, #28]
 8008f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f92:	689b      	ldr	r3, [r3, #8]
 8008f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d110      	bne.n	8008fbe <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008f9c:	69bb      	ldr	r3, [r7, #24]
 8008f9e:	015a      	lsls	r2, r3, #5
 8008fa0:	69fb      	ldr	r3, [r7, #28]
 8008fa2:	4413      	add	r3, r2
 8008fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	69ba      	ldr	r2, [r7, #24]
 8008fac:	0151      	lsls	r1, r2, #5
 8008fae:	69fa      	ldr	r2, [r7, #28]
 8008fb0:	440a      	add	r2, r1
 8008fb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fb6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008fba:	6013      	str	r3, [r2, #0]
 8008fbc:	e00f      	b.n	8008fde <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008fbe:	69bb      	ldr	r3, [r7, #24]
 8008fc0:	015a      	lsls	r2, r3, #5
 8008fc2:	69fb      	ldr	r3, [r7, #28]
 8008fc4:	4413      	add	r3, r2
 8008fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	69ba      	ldr	r2, [r7, #24]
 8008fce:	0151      	lsls	r1, r2, #5
 8008fd0:	69fa      	ldr	r2, [r7, #28]
 8008fd2:	440a      	add	r2, r1
 8008fd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fdc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008fde:	69bb      	ldr	r3, [r7, #24]
 8008fe0:	015a      	lsls	r2, r3, #5
 8008fe2:	69fb      	ldr	r3, [r7, #28]
 8008fe4:	4413      	add	r3, r2
 8008fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	69ba      	ldr	r2, [r7, #24]
 8008fee:	0151      	lsls	r1, r2, #5
 8008ff0:	69fa      	ldr	r2, [r7, #28]
 8008ff2:	440a      	add	r2, r1
 8008ff4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ff8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008ffc:	6013      	str	r3, [r2, #0]
 8008ffe:	e16a      	b.n	80092d6 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009000:	69bb      	ldr	r3, [r7, #24]
 8009002:	015a      	lsls	r2, r3, #5
 8009004:	69fb      	ldr	r3, [r7, #28]
 8009006:	4413      	add	r3, r2
 8009008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	69ba      	ldr	r2, [r7, #24]
 8009010:	0151      	lsls	r1, r2, #5
 8009012:	69fa      	ldr	r2, [r7, #28]
 8009014:	440a      	add	r2, r1
 8009016:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800901a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800901e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	791b      	ldrb	r3, [r3, #4]
 8009024:	2b01      	cmp	r3, #1
 8009026:	d015      	beq.n	8009054 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	691b      	ldr	r3, [r3, #16]
 800902c:	2b00      	cmp	r3, #0
 800902e:	f000 8152 	beq.w	80092d6 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009032:	69fb      	ldr	r3, [r7, #28]
 8009034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009038:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	f003 030f 	and.w	r3, r3, #15
 8009042:	2101      	movs	r1, #1
 8009044:	fa01 f303 	lsl.w	r3, r1, r3
 8009048:	69f9      	ldr	r1, [r7, #28]
 800904a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800904e:	4313      	orrs	r3, r2
 8009050:	634b      	str	r3, [r1, #52]	; 0x34
 8009052:	e140      	b.n	80092d6 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009054:	69fb      	ldr	r3, [r7, #28]
 8009056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800905a:	689b      	ldr	r3, [r3, #8]
 800905c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009060:	2b00      	cmp	r3, #0
 8009062:	d117      	bne.n	8009094 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009064:	69bb      	ldr	r3, [r7, #24]
 8009066:	015a      	lsls	r2, r3, #5
 8009068:	69fb      	ldr	r3, [r7, #28]
 800906a:	4413      	add	r3, r2
 800906c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	69ba      	ldr	r2, [r7, #24]
 8009074:	0151      	lsls	r1, r2, #5
 8009076:	69fa      	ldr	r2, [r7, #28]
 8009078:	440a      	add	r2, r1
 800907a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800907e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009082:	6013      	str	r3, [r2, #0]
 8009084:	e016      	b.n	80090b4 <USB_EPStartXfer+0x308>
 8009086:	bf00      	nop
 8009088:	e007ffff 	.word	0xe007ffff
 800908c:	fff80000 	.word	0xfff80000
 8009090:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009094:	69bb      	ldr	r3, [r7, #24]
 8009096:	015a      	lsls	r2, r3, #5
 8009098:	69fb      	ldr	r3, [r7, #28]
 800909a:	4413      	add	r3, r2
 800909c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	69ba      	ldr	r2, [r7, #24]
 80090a4:	0151      	lsls	r1, r2, #5
 80090a6:	69fa      	ldr	r2, [r7, #28]
 80090a8:	440a      	add	r2, r1
 80090aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090b2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	68d9      	ldr	r1, [r3, #12]
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	781a      	ldrb	r2, [r3, #0]
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	691b      	ldr	r3, [r3, #16]
 80090c0:	b298      	uxth	r0, r3
 80090c2:	79fb      	ldrb	r3, [r7, #7]
 80090c4:	9300      	str	r3, [sp, #0]
 80090c6:	4603      	mov	r3, r0
 80090c8:	68f8      	ldr	r0, [r7, #12]
 80090ca:	f000 f9b9 	bl	8009440 <USB_WritePacket>
 80090ce:	e102      	b.n	80092d6 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80090d0:	69bb      	ldr	r3, [r7, #24]
 80090d2:	015a      	lsls	r2, r3, #5
 80090d4:	69fb      	ldr	r3, [r7, #28]
 80090d6:	4413      	add	r3, r2
 80090d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090dc:	691a      	ldr	r2, [r3, #16]
 80090de:	69bb      	ldr	r3, [r7, #24]
 80090e0:	0159      	lsls	r1, r3, #5
 80090e2:	69fb      	ldr	r3, [r7, #28]
 80090e4:	440b      	add	r3, r1
 80090e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090ea:	4619      	mov	r1, r3
 80090ec:	4b7c      	ldr	r3, [pc, #496]	; (80092e0 <USB_EPStartXfer+0x534>)
 80090ee:	4013      	ands	r3, r2
 80090f0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80090f2:	69bb      	ldr	r3, [r7, #24]
 80090f4:	015a      	lsls	r2, r3, #5
 80090f6:	69fb      	ldr	r3, [r7, #28]
 80090f8:	4413      	add	r3, r2
 80090fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090fe:	691a      	ldr	r2, [r3, #16]
 8009100:	69bb      	ldr	r3, [r7, #24]
 8009102:	0159      	lsls	r1, r3, #5
 8009104:	69fb      	ldr	r3, [r7, #28]
 8009106:	440b      	add	r3, r1
 8009108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800910c:	4619      	mov	r1, r3
 800910e:	4b75      	ldr	r3, [pc, #468]	; (80092e4 <USB_EPStartXfer+0x538>)
 8009110:	4013      	ands	r3, r2
 8009112:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8009114:	69bb      	ldr	r3, [r7, #24]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d12f      	bne.n	800917a <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	691b      	ldr	r3, [r3, #16]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d003      	beq.n	800912a <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	689a      	ldr	r2, [r3, #8]
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	689a      	ldr	r2, [r3, #8]
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009132:	69bb      	ldr	r3, [r7, #24]
 8009134:	015a      	lsls	r2, r3, #5
 8009136:	69fb      	ldr	r3, [r7, #28]
 8009138:	4413      	add	r3, r2
 800913a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800913e:	691a      	ldr	r2, [r3, #16]
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	6a1b      	ldr	r3, [r3, #32]
 8009144:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009148:	69b9      	ldr	r1, [r7, #24]
 800914a:	0148      	lsls	r0, r1, #5
 800914c:	69f9      	ldr	r1, [r7, #28]
 800914e:	4401      	add	r1, r0
 8009150:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009154:	4313      	orrs	r3, r2
 8009156:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009158:	69bb      	ldr	r3, [r7, #24]
 800915a:	015a      	lsls	r2, r3, #5
 800915c:	69fb      	ldr	r3, [r7, #28]
 800915e:	4413      	add	r3, r2
 8009160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009164:	691b      	ldr	r3, [r3, #16]
 8009166:	69ba      	ldr	r2, [r7, #24]
 8009168:	0151      	lsls	r1, r2, #5
 800916a:	69fa      	ldr	r2, [r7, #28]
 800916c:	440a      	add	r2, r1
 800916e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009172:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009176:	6113      	str	r3, [r2, #16]
 8009178:	e05f      	b.n	800923a <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	691b      	ldr	r3, [r3, #16]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d123      	bne.n	80091ca <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009182:	69bb      	ldr	r3, [r7, #24]
 8009184:	015a      	lsls	r2, r3, #5
 8009186:	69fb      	ldr	r3, [r7, #28]
 8009188:	4413      	add	r3, r2
 800918a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800918e:	691a      	ldr	r2, [r3, #16]
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	689b      	ldr	r3, [r3, #8]
 8009194:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009198:	69b9      	ldr	r1, [r7, #24]
 800919a:	0148      	lsls	r0, r1, #5
 800919c:	69f9      	ldr	r1, [r7, #28]
 800919e:	4401      	add	r1, r0
 80091a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80091a4:	4313      	orrs	r3, r2
 80091a6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80091a8:	69bb      	ldr	r3, [r7, #24]
 80091aa:	015a      	lsls	r2, r3, #5
 80091ac:	69fb      	ldr	r3, [r7, #28]
 80091ae:	4413      	add	r3, r2
 80091b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091b4:	691b      	ldr	r3, [r3, #16]
 80091b6:	69ba      	ldr	r2, [r7, #24]
 80091b8:	0151      	lsls	r1, r2, #5
 80091ba:	69fa      	ldr	r2, [r7, #28]
 80091bc:	440a      	add	r2, r1
 80091be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80091c6:	6113      	str	r3, [r2, #16]
 80091c8:	e037      	b.n	800923a <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	691a      	ldr	r2, [r3, #16]
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	689b      	ldr	r3, [r3, #8]
 80091d2:	4413      	add	r3, r2
 80091d4:	1e5a      	subs	r2, r3, #1
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	689b      	ldr	r3, [r3, #8]
 80091da:	fbb2 f3f3 	udiv	r3, r2, r3
 80091de:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	689b      	ldr	r3, [r3, #8]
 80091e4:	8afa      	ldrh	r2, [r7, #22]
 80091e6:	fb03 f202 	mul.w	r2, r3, r2
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80091ee:	69bb      	ldr	r3, [r7, #24]
 80091f0:	015a      	lsls	r2, r3, #5
 80091f2:	69fb      	ldr	r3, [r7, #28]
 80091f4:	4413      	add	r3, r2
 80091f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091fa:	691a      	ldr	r2, [r3, #16]
 80091fc:	8afb      	ldrh	r3, [r7, #22]
 80091fe:	04d9      	lsls	r1, r3, #19
 8009200:	4b39      	ldr	r3, [pc, #228]	; (80092e8 <USB_EPStartXfer+0x53c>)
 8009202:	400b      	ands	r3, r1
 8009204:	69b9      	ldr	r1, [r7, #24]
 8009206:	0148      	lsls	r0, r1, #5
 8009208:	69f9      	ldr	r1, [r7, #28]
 800920a:	4401      	add	r1, r0
 800920c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009210:	4313      	orrs	r3, r2
 8009212:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009214:	69bb      	ldr	r3, [r7, #24]
 8009216:	015a      	lsls	r2, r3, #5
 8009218:	69fb      	ldr	r3, [r7, #28]
 800921a:	4413      	add	r3, r2
 800921c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009220:	691a      	ldr	r2, [r3, #16]
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	6a1b      	ldr	r3, [r3, #32]
 8009226:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800922a:	69b9      	ldr	r1, [r7, #24]
 800922c:	0148      	lsls	r0, r1, #5
 800922e:	69f9      	ldr	r1, [r7, #28]
 8009230:	4401      	add	r1, r0
 8009232:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009236:	4313      	orrs	r3, r2
 8009238:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800923a:	79fb      	ldrb	r3, [r7, #7]
 800923c:	2b01      	cmp	r3, #1
 800923e:	d10d      	bne.n	800925c <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	68db      	ldr	r3, [r3, #12]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d009      	beq.n	800925c <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	68d9      	ldr	r1, [r3, #12]
 800924c:	69bb      	ldr	r3, [r7, #24]
 800924e:	015a      	lsls	r2, r3, #5
 8009250:	69fb      	ldr	r3, [r7, #28]
 8009252:	4413      	add	r3, r2
 8009254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009258:	460a      	mov	r2, r1
 800925a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	791b      	ldrb	r3, [r3, #4]
 8009260:	2b01      	cmp	r3, #1
 8009262:	d128      	bne.n	80092b6 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009264:	69fb      	ldr	r3, [r7, #28]
 8009266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800926a:	689b      	ldr	r3, [r3, #8]
 800926c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009270:	2b00      	cmp	r3, #0
 8009272:	d110      	bne.n	8009296 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009274:	69bb      	ldr	r3, [r7, #24]
 8009276:	015a      	lsls	r2, r3, #5
 8009278:	69fb      	ldr	r3, [r7, #28]
 800927a:	4413      	add	r3, r2
 800927c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	69ba      	ldr	r2, [r7, #24]
 8009284:	0151      	lsls	r1, r2, #5
 8009286:	69fa      	ldr	r2, [r7, #28]
 8009288:	440a      	add	r2, r1
 800928a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800928e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009292:	6013      	str	r3, [r2, #0]
 8009294:	e00f      	b.n	80092b6 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009296:	69bb      	ldr	r3, [r7, #24]
 8009298:	015a      	lsls	r2, r3, #5
 800929a:	69fb      	ldr	r3, [r7, #28]
 800929c:	4413      	add	r3, r2
 800929e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	69ba      	ldr	r2, [r7, #24]
 80092a6:	0151      	lsls	r1, r2, #5
 80092a8:	69fa      	ldr	r2, [r7, #28]
 80092aa:	440a      	add	r2, r1
 80092ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092b4:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80092b6:	69bb      	ldr	r3, [r7, #24]
 80092b8:	015a      	lsls	r2, r3, #5
 80092ba:	69fb      	ldr	r3, [r7, #28]
 80092bc:	4413      	add	r3, r2
 80092be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	69ba      	ldr	r2, [r7, #24]
 80092c6:	0151      	lsls	r1, r2, #5
 80092c8:	69fa      	ldr	r2, [r7, #28]
 80092ca:	440a      	add	r2, r1
 80092cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80092d4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80092d6:	2300      	movs	r3, #0
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3720      	adds	r7, #32
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}
 80092e0:	fff80000 	.word	0xfff80000
 80092e4:	e007ffff 	.word	0xe007ffff
 80092e8:	1ff80000 	.word	0x1ff80000

080092ec <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b087      	sub	sp, #28
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80092f6:	2300      	movs	r3, #0
 80092f8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80092fa:	2300      	movs	r3, #0
 80092fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	785b      	ldrb	r3, [r3, #1]
 8009306:	2b01      	cmp	r3, #1
 8009308:	d14a      	bne.n	80093a0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	015a      	lsls	r2, r3, #5
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	4413      	add	r3, r2
 8009314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800931e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009322:	f040 8086 	bne.w	8009432 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	015a      	lsls	r2, r3, #5
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	4413      	add	r3, r2
 8009330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	683a      	ldr	r2, [r7, #0]
 8009338:	7812      	ldrb	r2, [r2, #0]
 800933a:	0151      	lsls	r1, r2, #5
 800933c:	693a      	ldr	r2, [r7, #16]
 800933e:	440a      	add	r2, r1
 8009340:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009344:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009348:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	781b      	ldrb	r3, [r3, #0]
 800934e:	015a      	lsls	r2, r3, #5
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	4413      	add	r3, r2
 8009354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	683a      	ldr	r2, [r7, #0]
 800935c:	7812      	ldrb	r2, [r2, #0]
 800935e:	0151      	lsls	r1, r2, #5
 8009360:	693a      	ldr	r2, [r7, #16]
 8009362:	440a      	add	r2, r1
 8009364:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009368:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800936c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	3301      	adds	r3, #1
 8009372:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	f242 7210 	movw	r2, #10000	; 0x2710
 800937a:	4293      	cmp	r3, r2
 800937c:	d902      	bls.n	8009384 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800937e:	2301      	movs	r3, #1
 8009380:	75fb      	strb	r3, [r7, #23]
          break;
 8009382:	e056      	b.n	8009432 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	781b      	ldrb	r3, [r3, #0]
 8009388:	015a      	lsls	r2, r3, #5
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	4413      	add	r3, r2
 800938e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009398:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800939c:	d0e7      	beq.n	800936e <USB_EPStopXfer+0x82>
 800939e:	e048      	b.n	8009432 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	781b      	ldrb	r3, [r3, #0]
 80093a4:	015a      	lsls	r2, r3, #5
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	4413      	add	r3, r2
 80093aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80093b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80093b8:	d13b      	bne.n	8009432 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	781b      	ldrb	r3, [r3, #0]
 80093be:	015a      	lsls	r2, r3, #5
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	4413      	add	r3, r2
 80093c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	683a      	ldr	r2, [r7, #0]
 80093cc:	7812      	ldrb	r2, [r2, #0]
 80093ce:	0151      	lsls	r1, r2, #5
 80093d0:	693a      	ldr	r2, [r7, #16]
 80093d2:	440a      	add	r2, r1
 80093d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093d8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80093dc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	781b      	ldrb	r3, [r3, #0]
 80093e2:	015a      	lsls	r2, r3, #5
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	4413      	add	r3, r2
 80093e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	683a      	ldr	r2, [r7, #0]
 80093f0:	7812      	ldrb	r2, [r2, #0]
 80093f2:	0151      	lsls	r1, r2, #5
 80093f4:	693a      	ldr	r2, [r7, #16]
 80093f6:	440a      	add	r2, r1
 80093f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009400:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	3301      	adds	r3, #1
 8009406:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	f242 7210 	movw	r2, #10000	; 0x2710
 800940e:	4293      	cmp	r3, r2
 8009410:	d902      	bls.n	8009418 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009412:	2301      	movs	r3, #1
 8009414:	75fb      	strb	r3, [r7, #23]
          break;
 8009416:	e00c      	b.n	8009432 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	781b      	ldrb	r3, [r3, #0]
 800941c:	015a      	lsls	r2, r3, #5
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	4413      	add	r3, r2
 8009422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800942c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009430:	d0e7      	beq.n	8009402 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009432:	7dfb      	ldrb	r3, [r7, #23]
}
 8009434:	4618      	mov	r0, r3
 8009436:	371c      	adds	r7, #28
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr

08009440 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009440:	b480      	push	{r7}
 8009442:	b089      	sub	sp, #36	; 0x24
 8009444:	af00      	add	r7, sp, #0
 8009446:	60f8      	str	r0, [r7, #12]
 8009448:	60b9      	str	r1, [r7, #8]
 800944a:	4611      	mov	r1, r2
 800944c:	461a      	mov	r2, r3
 800944e:	460b      	mov	r3, r1
 8009450:	71fb      	strb	r3, [r7, #7]
 8009452:	4613      	mov	r3, r2
 8009454:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800945e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009462:	2b00      	cmp	r3, #0
 8009464:	d123      	bne.n	80094ae <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009466:	88bb      	ldrh	r3, [r7, #4]
 8009468:	3303      	adds	r3, #3
 800946a:	089b      	lsrs	r3, r3, #2
 800946c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800946e:	2300      	movs	r3, #0
 8009470:	61bb      	str	r3, [r7, #24]
 8009472:	e018      	b.n	80094a6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009474:	79fb      	ldrb	r3, [r7, #7]
 8009476:	031a      	lsls	r2, r3, #12
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	4413      	add	r3, r2
 800947c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009480:	461a      	mov	r2, r3
 8009482:	69fb      	ldr	r3, [r7, #28]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009488:	69fb      	ldr	r3, [r7, #28]
 800948a:	3301      	adds	r3, #1
 800948c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800948e:	69fb      	ldr	r3, [r7, #28]
 8009490:	3301      	adds	r3, #1
 8009492:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009494:	69fb      	ldr	r3, [r7, #28]
 8009496:	3301      	adds	r3, #1
 8009498:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800949a:	69fb      	ldr	r3, [r7, #28]
 800949c:	3301      	adds	r3, #1
 800949e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80094a0:	69bb      	ldr	r3, [r7, #24]
 80094a2:	3301      	adds	r3, #1
 80094a4:	61bb      	str	r3, [r7, #24]
 80094a6:	69ba      	ldr	r2, [r7, #24]
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d3e2      	bcc.n	8009474 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80094ae:	2300      	movs	r3, #0
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3724      	adds	r7, #36	; 0x24
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr

080094bc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80094bc:	b480      	push	{r7}
 80094be:	b08b      	sub	sp, #44	; 0x2c
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	60f8      	str	r0, [r7, #12]
 80094c4:	60b9      	str	r1, [r7, #8]
 80094c6:	4613      	mov	r3, r2
 80094c8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80094d2:	88fb      	ldrh	r3, [r7, #6]
 80094d4:	089b      	lsrs	r3, r3, #2
 80094d6:	b29b      	uxth	r3, r3
 80094d8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80094da:	88fb      	ldrh	r3, [r7, #6]
 80094dc:	f003 0303 	and.w	r3, r3, #3
 80094e0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80094e2:	2300      	movs	r3, #0
 80094e4:	623b      	str	r3, [r7, #32]
 80094e6:	e014      	b.n	8009512 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80094e8:	69bb      	ldr	r3, [r7, #24]
 80094ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094ee:	681a      	ldr	r2, [r3, #0]
 80094f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f2:	601a      	str	r2, [r3, #0]
    pDest++;
 80094f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f6:	3301      	adds	r3, #1
 80094f8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80094fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fc:	3301      	adds	r3, #1
 80094fe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009502:	3301      	adds	r3, #1
 8009504:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009508:	3301      	adds	r3, #1
 800950a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800950c:	6a3b      	ldr	r3, [r7, #32]
 800950e:	3301      	adds	r3, #1
 8009510:	623b      	str	r3, [r7, #32]
 8009512:	6a3a      	ldr	r2, [r7, #32]
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	429a      	cmp	r2, r3
 8009518:	d3e6      	bcc.n	80094e8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800951a:	8bfb      	ldrh	r3, [r7, #30]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d01e      	beq.n	800955e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009520:	2300      	movs	r3, #0
 8009522:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009524:	69bb      	ldr	r3, [r7, #24]
 8009526:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800952a:	461a      	mov	r2, r3
 800952c:	f107 0310 	add.w	r3, r7, #16
 8009530:	6812      	ldr	r2, [r2, #0]
 8009532:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009534:	693a      	ldr	r2, [r7, #16]
 8009536:	6a3b      	ldr	r3, [r7, #32]
 8009538:	b2db      	uxtb	r3, r3
 800953a:	00db      	lsls	r3, r3, #3
 800953c:	fa22 f303 	lsr.w	r3, r2, r3
 8009540:	b2da      	uxtb	r2, r3
 8009542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009544:	701a      	strb	r2, [r3, #0]
      i++;
 8009546:	6a3b      	ldr	r3, [r7, #32]
 8009548:	3301      	adds	r3, #1
 800954a:	623b      	str	r3, [r7, #32]
      pDest++;
 800954c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800954e:	3301      	adds	r3, #1
 8009550:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009552:	8bfb      	ldrh	r3, [r7, #30]
 8009554:	3b01      	subs	r3, #1
 8009556:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009558:	8bfb      	ldrh	r3, [r7, #30]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d1ea      	bne.n	8009534 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800955e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009560:	4618      	mov	r0, r3
 8009562:	372c      	adds	r7, #44	; 0x2c
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr

0800956c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800956c:	b480      	push	{r7}
 800956e:	b085      	sub	sp, #20
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	781b      	ldrb	r3, [r3, #0]
 800957e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	785b      	ldrb	r3, [r3, #1]
 8009584:	2b01      	cmp	r3, #1
 8009586:	d12c      	bne.n	80095e2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	015a      	lsls	r2, r3, #5
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	4413      	add	r3, r2
 8009590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	2b00      	cmp	r3, #0
 8009598:	db12      	blt.n	80095c0 <USB_EPSetStall+0x54>
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d00f      	beq.n	80095c0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	015a      	lsls	r2, r3, #5
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	4413      	add	r3, r2
 80095a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	68ba      	ldr	r2, [r7, #8]
 80095b0:	0151      	lsls	r1, r2, #5
 80095b2:	68fa      	ldr	r2, [r7, #12]
 80095b4:	440a      	add	r2, r1
 80095b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80095be:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	015a      	lsls	r2, r3, #5
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	4413      	add	r3, r2
 80095c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	68ba      	ldr	r2, [r7, #8]
 80095d0:	0151      	lsls	r1, r2, #5
 80095d2:	68fa      	ldr	r2, [r7, #12]
 80095d4:	440a      	add	r2, r1
 80095d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80095de:	6013      	str	r3, [r2, #0]
 80095e0:	e02b      	b.n	800963a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	015a      	lsls	r2, r3, #5
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	4413      	add	r3, r2
 80095ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	db12      	blt.n	800961a <USB_EPSetStall+0xae>
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d00f      	beq.n	800961a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	015a      	lsls	r2, r3, #5
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	4413      	add	r3, r2
 8009602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	68ba      	ldr	r2, [r7, #8]
 800960a:	0151      	lsls	r1, r2, #5
 800960c:	68fa      	ldr	r2, [r7, #12]
 800960e:	440a      	add	r2, r1
 8009610:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009614:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009618:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	015a      	lsls	r2, r3, #5
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	4413      	add	r3, r2
 8009622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	68ba      	ldr	r2, [r7, #8]
 800962a:	0151      	lsls	r1, r2, #5
 800962c:	68fa      	ldr	r2, [r7, #12]
 800962e:	440a      	add	r2, r1
 8009630:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009634:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009638:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800963a:	2300      	movs	r3, #0
}
 800963c:	4618      	mov	r0, r3
 800963e:	3714      	adds	r7, #20
 8009640:	46bd      	mov	sp, r7
 8009642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009646:	4770      	bx	lr

08009648 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009648:	b480      	push	{r7}
 800964a:	b085      	sub	sp, #20
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	785b      	ldrb	r3, [r3, #1]
 8009660:	2b01      	cmp	r3, #1
 8009662:	d128      	bne.n	80096b6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	015a      	lsls	r2, r3, #5
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	4413      	add	r3, r2
 800966c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	68ba      	ldr	r2, [r7, #8]
 8009674:	0151      	lsls	r1, r2, #5
 8009676:	68fa      	ldr	r2, [r7, #12]
 8009678:	440a      	add	r2, r1
 800967a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800967e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009682:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	791b      	ldrb	r3, [r3, #4]
 8009688:	2b03      	cmp	r3, #3
 800968a:	d003      	beq.n	8009694 <USB_EPClearStall+0x4c>
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	791b      	ldrb	r3, [r3, #4]
 8009690:	2b02      	cmp	r3, #2
 8009692:	d138      	bne.n	8009706 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	015a      	lsls	r2, r3, #5
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	4413      	add	r3, r2
 800969c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	68ba      	ldr	r2, [r7, #8]
 80096a4:	0151      	lsls	r1, r2, #5
 80096a6:	68fa      	ldr	r2, [r7, #12]
 80096a8:	440a      	add	r2, r1
 80096aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096b2:	6013      	str	r3, [r2, #0]
 80096b4:	e027      	b.n	8009706 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	015a      	lsls	r2, r3, #5
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	4413      	add	r3, r2
 80096be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	68ba      	ldr	r2, [r7, #8]
 80096c6:	0151      	lsls	r1, r2, #5
 80096c8:	68fa      	ldr	r2, [r7, #12]
 80096ca:	440a      	add	r2, r1
 80096cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80096d4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	791b      	ldrb	r3, [r3, #4]
 80096da:	2b03      	cmp	r3, #3
 80096dc:	d003      	beq.n	80096e6 <USB_EPClearStall+0x9e>
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	791b      	ldrb	r3, [r3, #4]
 80096e2:	2b02      	cmp	r3, #2
 80096e4:	d10f      	bne.n	8009706 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	015a      	lsls	r2, r3, #5
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	4413      	add	r3, r2
 80096ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	68ba      	ldr	r2, [r7, #8]
 80096f6:	0151      	lsls	r1, r2, #5
 80096f8:	68fa      	ldr	r2, [r7, #12]
 80096fa:	440a      	add	r2, r1
 80096fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009704:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009706:	2300      	movs	r3, #0
}
 8009708:	4618      	mov	r0, r3
 800970a:	3714      	adds	r7, #20
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr

08009714 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009714:	b480      	push	{r7}
 8009716:	b085      	sub	sp, #20
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	460b      	mov	r3, r1
 800971e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	68fa      	ldr	r2, [r7, #12]
 800972e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009732:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009736:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800973e:	681a      	ldr	r2, [r3, #0]
 8009740:	78fb      	ldrb	r3, [r7, #3]
 8009742:	011b      	lsls	r3, r3, #4
 8009744:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009748:	68f9      	ldr	r1, [r7, #12]
 800974a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800974e:	4313      	orrs	r3, r2
 8009750:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009752:	2300      	movs	r3, #0
}
 8009754:	4618      	mov	r0, r3
 8009756:	3714      	adds	r7, #20
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr

08009760 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009760:	b480      	push	{r7}
 8009762:	b085      	sub	sp, #20
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	68fa      	ldr	r2, [r7, #12]
 8009776:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800977a:	f023 0303 	bic.w	r3, r3, #3
 800977e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	68fa      	ldr	r2, [r7, #12]
 800978a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800978e:	f023 0302 	bic.w	r3, r3, #2
 8009792:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009794:	2300      	movs	r3, #0
}
 8009796:	4618      	mov	r0, r3
 8009798:	3714      	adds	r7, #20
 800979a:	46bd      	mov	sp, r7
 800979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a0:	4770      	bx	lr

080097a2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80097a2:	b480      	push	{r7}
 80097a4:	b085      	sub	sp, #20
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	68fa      	ldr	r2, [r7, #12]
 80097b8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80097bc:	f023 0303 	bic.w	r3, r3, #3
 80097c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	68fa      	ldr	r2, [r7, #12]
 80097cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80097d0:	f043 0302 	orr.w	r3, r3, #2
 80097d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80097d6:	2300      	movs	r3, #0
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3714      	adds	r7, #20
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr

080097e4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80097e4:	b480      	push	{r7}
 80097e6:	b085      	sub	sp, #20
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	695b      	ldr	r3, [r3, #20]
 80097f0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	699b      	ldr	r3, [r3, #24]
 80097f6:	68fa      	ldr	r2, [r7, #12]
 80097f8:	4013      	ands	r3, r2
 80097fa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80097fc:	68fb      	ldr	r3, [r7, #12]
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3714      	adds	r7, #20
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr

0800980a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800980a:	b480      	push	{r7}
 800980c:	b085      	sub	sp, #20
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800981c:	699b      	ldr	r3, [r3, #24]
 800981e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009826:	69db      	ldr	r3, [r3, #28]
 8009828:	68ba      	ldr	r2, [r7, #8]
 800982a:	4013      	ands	r3, r2
 800982c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	0c1b      	lsrs	r3, r3, #16
}
 8009832:	4618      	mov	r0, r3
 8009834:	3714      	adds	r7, #20
 8009836:	46bd      	mov	sp, r7
 8009838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983c:	4770      	bx	lr

0800983e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800983e:	b480      	push	{r7}
 8009840:	b085      	sub	sp, #20
 8009842:	af00      	add	r7, sp, #0
 8009844:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009850:	699b      	ldr	r3, [r3, #24]
 8009852:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800985a:	69db      	ldr	r3, [r3, #28]
 800985c:	68ba      	ldr	r2, [r7, #8]
 800985e:	4013      	ands	r3, r2
 8009860:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	b29b      	uxth	r3, r3
}
 8009866:	4618      	mov	r0, r3
 8009868:	3714      	adds	r7, #20
 800986a:	46bd      	mov	sp, r7
 800986c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009870:	4770      	bx	lr

08009872 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009872:	b480      	push	{r7}
 8009874:	b085      	sub	sp, #20
 8009876:	af00      	add	r7, sp, #0
 8009878:	6078      	str	r0, [r7, #4]
 800987a:	460b      	mov	r3, r1
 800987c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009882:	78fb      	ldrb	r3, [r7, #3]
 8009884:	015a      	lsls	r2, r3, #5
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	4413      	add	r3, r2
 800988a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800988e:	689b      	ldr	r3, [r3, #8]
 8009890:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009898:	695b      	ldr	r3, [r3, #20]
 800989a:	68ba      	ldr	r2, [r7, #8]
 800989c:	4013      	ands	r3, r2
 800989e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80098a0:	68bb      	ldr	r3, [r7, #8]
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3714      	adds	r7, #20
 80098a6:	46bd      	mov	sp, r7
 80098a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ac:	4770      	bx	lr

080098ae <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80098ae:	b480      	push	{r7}
 80098b0:	b087      	sub	sp, #28
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	6078      	str	r0, [r7, #4]
 80098b6:	460b      	mov	r3, r1
 80098b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098c4:	691b      	ldr	r3, [r3, #16]
 80098c6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098d0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80098d2:	78fb      	ldrb	r3, [r7, #3]
 80098d4:	f003 030f 	and.w	r3, r3, #15
 80098d8:	68fa      	ldr	r2, [r7, #12]
 80098da:	fa22 f303 	lsr.w	r3, r2, r3
 80098de:	01db      	lsls	r3, r3, #7
 80098e0:	b2db      	uxtb	r3, r3
 80098e2:	693a      	ldr	r2, [r7, #16]
 80098e4:	4313      	orrs	r3, r2
 80098e6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80098e8:	78fb      	ldrb	r3, [r7, #3]
 80098ea:	015a      	lsls	r2, r3, #5
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	4413      	add	r3, r2
 80098f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098f4:	689b      	ldr	r3, [r3, #8]
 80098f6:	693a      	ldr	r2, [r7, #16]
 80098f8:	4013      	ands	r3, r2
 80098fa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80098fc:	68bb      	ldr	r3, [r7, #8]
}
 80098fe:	4618      	mov	r0, r3
 8009900:	371c      	adds	r7, #28
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr

0800990a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800990a:	b480      	push	{r7}
 800990c:	b083      	sub	sp, #12
 800990e:	af00      	add	r7, sp, #0
 8009910:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	695b      	ldr	r3, [r3, #20]
 8009916:	f003 0301 	and.w	r3, r3, #1
}
 800991a:	4618      	mov	r0, r3
 800991c:	370c      	adds	r7, #12
 800991e:	46bd      	mov	sp, r7
 8009920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009924:	4770      	bx	lr
	...

08009928 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009928:	b480      	push	{r7}
 800992a:	b085      	sub	sp, #20
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009942:	4619      	mov	r1, r3
 8009944:	4b09      	ldr	r3, [pc, #36]	; (800996c <USB_ActivateSetup+0x44>)
 8009946:	4013      	ands	r3, r2
 8009948:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009950:	685b      	ldr	r3, [r3, #4]
 8009952:	68fa      	ldr	r2, [r7, #12]
 8009954:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800995c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800995e:	2300      	movs	r3, #0
}
 8009960:	4618      	mov	r0, r3
 8009962:	3714      	adds	r7, #20
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr
 800996c:	fffff800 	.word	0xfffff800

08009970 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009970:	b480      	push	{r7}
 8009972:	b087      	sub	sp, #28
 8009974:	af00      	add	r7, sp, #0
 8009976:	60f8      	str	r0, [r7, #12]
 8009978:	460b      	mov	r3, r1
 800997a:	607a      	str	r2, [r7, #4]
 800997c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	333c      	adds	r3, #60	; 0x3c
 8009986:	3304      	adds	r3, #4
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	4a26      	ldr	r2, [pc, #152]	; (8009a28 <USB_EP0_OutStart+0xb8>)
 8009990:	4293      	cmp	r3, r2
 8009992:	d90a      	bls.n	80099aa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80099a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80099a4:	d101      	bne.n	80099aa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80099a6:	2300      	movs	r3, #0
 80099a8:	e037      	b.n	8009a1a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099b0:	461a      	mov	r2, r3
 80099b2:	2300      	movs	r3, #0
 80099b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099bc:	691b      	ldr	r3, [r3, #16]
 80099be:	697a      	ldr	r2, [r7, #20]
 80099c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80099c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099d0:	691b      	ldr	r3, [r3, #16]
 80099d2:	697a      	ldr	r2, [r7, #20]
 80099d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099d8:	f043 0318 	orr.w	r3, r3, #24
 80099dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099e4:	691b      	ldr	r3, [r3, #16]
 80099e6:	697a      	ldr	r2, [r7, #20]
 80099e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099ec:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80099f0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80099f2:	7afb      	ldrb	r3, [r7, #11]
 80099f4:	2b01      	cmp	r3, #1
 80099f6:	d10f      	bne.n	8009a18 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099fe:	461a      	mov	r2, r3
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	697a      	ldr	r2, [r7, #20]
 8009a0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a12:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009a16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009a18:	2300      	movs	r3, #0
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	371c      	adds	r7, #28
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a24:	4770      	bx	lr
 8009a26:	bf00      	nop
 8009a28:	4f54300a 	.word	0x4f54300a

08009a2c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b085      	sub	sp, #20
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009a34:	2300      	movs	r3, #0
 8009a36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	4a13      	ldr	r2, [pc, #76]	; (8009a90 <USB_CoreReset+0x64>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d901      	bls.n	8009a4a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009a46:	2303      	movs	r3, #3
 8009a48:	e01b      	b.n	8009a82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	691b      	ldr	r3, [r3, #16]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	daf2      	bge.n	8009a38 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009a52:	2300      	movs	r3, #0
 8009a54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	691b      	ldr	r3, [r3, #16]
 8009a5a:	f043 0201 	orr.w	r2, r3, #1
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	3301      	adds	r3, #1
 8009a66:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	4a09      	ldr	r2, [pc, #36]	; (8009a90 <USB_CoreReset+0x64>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d901      	bls.n	8009a74 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009a70:	2303      	movs	r3, #3
 8009a72:	e006      	b.n	8009a82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	691b      	ldr	r3, [r3, #16]
 8009a78:	f003 0301 	and.w	r3, r3, #1
 8009a7c:	2b01      	cmp	r3, #1
 8009a7e:	d0f0      	beq.n	8009a62 <USB_CoreReset+0x36>

  return HAL_OK;
 8009a80:	2300      	movs	r3, #0
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3714      	adds	r7, #20
 8009a86:	46bd      	mov	sp, r7
 8009a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8c:	4770      	bx	lr
 8009a8e:	bf00      	nop
 8009a90:	00030d40 	.word	0x00030d40

08009a94 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b084      	sub	sp, #16
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
 8009a9c:	460b      	mov	r3, r1
 8009a9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009aa0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009aa4:	f002 fce4 	bl	800c470 <USBD_static_malloc>
 8009aa8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d109      	bne.n	8009ac4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	32b0      	adds	r2, #176	; 0xb0
 8009aba:	2100      	movs	r1, #0
 8009abc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009ac0:	2302      	movs	r3, #2
 8009ac2:	e0d4      	b.n	8009c6e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009ac4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009ac8:	2100      	movs	r1, #0
 8009aca:	68f8      	ldr	r0, [r7, #12]
 8009acc:	f003 fb2f 	bl	800d12e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	32b0      	adds	r2, #176	; 0xb0
 8009ada:	68f9      	ldr	r1, [r7, #12]
 8009adc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	32b0      	adds	r2, #176	; 0xb0
 8009aea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	7c1b      	ldrb	r3, [r3, #16]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d138      	bne.n	8009b6e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009afc:	4b5e      	ldr	r3, [pc, #376]	; (8009c78 <USBD_CDC_Init+0x1e4>)
 8009afe:	7819      	ldrb	r1, [r3, #0]
 8009b00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b04:	2202      	movs	r2, #2
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f002 fb8f 	bl	800c22a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009b0c:	4b5a      	ldr	r3, [pc, #360]	; (8009c78 <USBD_CDC_Init+0x1e4>)
 8009b0e:	781b      	ldrb	r3, [r3, #0]
 8009b10:	f003 020f 	and.w	r2, r3, #15
 8009b14:	6879      	ldr	r1, [r7, #4]
 8009b16:	4613      	mov	r3, r2
 8009b18:	009b      	lsls	r3, r3, #2
 8009b1a:	4413      	add	r3, r2
 8009b1c:	009b      	lsls	r3, r3, #2
 8009b1e:	440b      	add	r3, r1
 8009b20:	3324      	adds	r3, #36	; 0x24
 8009b22:	2201      	movs	r2, #1
 8009b24:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009b26:	4b55      	ldr	r3, [pc, #340]	; (8009c7c <USBD_CDC_Init+0x1e8>)
 8009b28:	7819      	ldrb	r1, [r3, #0]
 8009b2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b2e:	2202      	movs	r2, #2
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f002 fb7a 	bl	800c22a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009b36:	4b51      	ldr	r3, [pc, #324]	; (8009c7c <USBD_CDC_Init+0x1e8>)
 8009b38:	781b      	ldrb	r3, [r3, #0]
 8009b3a:	f003 020f 	and.w	r2, r3, #15
 8009b3e:	6879      	ldr	r1, [r7, #4]
 8009b40:	4613      	mov	r3, r2
 8009b42:	009b      	lsls	r3, r3, #2
 8009b44:	4413      	add	r3, r2
 8009b46:	009b      	lsls	r3, r3, #2
 8009b48:	440b      	add	r3, r1
 8009b4a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009b4e:	2201      	movs	r2, #1
 8009b50:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009b52:	4b4b      	ldr	r3, [pc, #300]	; (8009c80 <USBD_CDC_Init+0x1ec>)
 8009b54:	781b      	ldrb	r3, [r3, #0]
 8009b56:	f003 020f 	and.w	r2, r3, #15
 8009b5a:	6879      	ldr	r1, [r7, #4]
 8009b5c:	4613      	mov	r3, r2
 8009b5e:	009b      	lsls	r3, r3, #2
 8009b60:	4413      	add	r3, r2
 8009b62:	009b      	lsls	r3, r3, #2
 8009b64:	440b      	add	r3, r1
 8009b66:	3326      	adds	r3, #38	; 0x26
 8009b68:	2210      	movs	r2, #16
 8009b6a:	801a      	strh	r2, [r3, #0]
 8009b6c:	e035      	b.n	8009bda <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009b6e:	4b42      	ldr	r3, [pc, #264]	; (8009c78 <USBD_CDC_Init+0x1e4>)
 8009b70:	7819      	ldrb	r1, [r3, #0]
 8009b72:	2340      	movs	r3, #64	; 0x40
 8009b74:	2202      	movs	r2, #2
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f002 fb57 	bl	800c22a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009b7c:	4b3e      	ldr	r3, [pc, #248]	; (8009c78 <USBD_CDC_Init+0x1e4>)
 8009b7e:	781b      	ldrb	r3, [r3, #0]
 8009b80:	f003 020f 	and.w	r2, r3, #15
 8009b84:	6879      	ldr	r1, [r7, #4]
 8009b86:	4613      	mov	r3, r2
 8009b88:	009b      	lsls	r3, r3, #2
 8009b8a:	4413      	add	r3, r2
 8009b8c:	009b      	lsls	r3, r3, #2
 8009b8e:	440b      	add	r3, r1
 8009b90:	3324      	adds	r3, #36	; 0x24
 8009b92:	2201      	movs	r2, #1
 8009b94:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009b96:	4b39      	ldr	r3, [pc, #228]	; (8009c7c <USBD_CDC_Init+0x1e8>)
 8009b98:	7819      	ldrb	r1, [r3, #0]
 8009b9a:	2340      	movs	r3, #64	; 0x40
 8009b9c:	2202      	movs	r2, #2
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f002 fb43 	bl	800c22a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009ba4:	4b35      	ldr	r3, [pc, #212]	; (8009c7c <USBD_CDC_Init+0x1e8>)
 8009ba6:	781b      	ldrb	r3, [r3, #0]
 8009ba8:	f003 020f 	and.w	r2, r3, #15
 8009bac:	6879      	ldr	r1, [r7, #4]
 8009bae:	4613      	mov	r3, r2
 8009bb0:	009b      	lsls	r3, r3, #2
 8009bb2:	4413      	add	r3, r2
 8009bb4:	009b      	lsls	r3, r3, #2
 8009bb6:	440b      	add	r3, r1
 8009bb8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009bbc:	2201      	movs	r2, #1
 8009bbe:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009bc0:	4b2f      	ldr	r3, [pc, #188]	; (8009c80 <USBD_CDC_Init+0x1ec>)
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	f003 020f 	and.w	r2, r3, #15
 8009bc8:	6879      	ldr	r1, [r7, #4]
 8009bca:	4613      	mov	r3, r2
 8009bcc:	009b      	lsls	r3, r3, #2
 8009bce:	4413      	add	r3, r2
 8009bd0:	009b      	lsls	r3, r3, #2
 8009bd2:	440b      	add	r3, r1
 8009bd4:	3326      	adds	r3, #38	; 0x26
 8009bd6:	2210      	movs	r2, #16
 8009bd8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009bda:	4b29      	ldr	r3, [pc, #164]	; (8009c80 <USBD_CDC_Init+0x1ec>)
 8009bdc:	7819      	ldrb	r1, [r3, #0]
 8009bde:	2308      	movs	r3, #8
 8009be0:	2203      	movs	r2, #3
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f002 fb21 	bl	800c22a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009be8:	4b25      	ldr	r3, [pc, #148]	; (8009c80 <USBD_CDC_Init+0x1ec>)
 8009bea:	781b      	ldrb	r3, [r3, #0]
 8009bec:	f003 020f 	and.w	r2, r3, #15
 8009bf0:	6879      	ldr	r1, [r7, #4]
 8009bf2:	4613      	mov	r3, r2
 8009bf4:	009b      	lsls	r3, r3, #2
 8009bf6:	4413      	add	r3, r2
 8009bf8:	009b      	lsls	r3, r3, #2
 8009bfa:	440b      	add	r3, r1
 8009bfc:	3324      	adds	r3, #36	; 0x24
 8009bfe:	2201      	movs	r2, #1
 8009c00:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2200      	movs	r2, #0
 8009c06:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009c10:	687a      	ldr	r2, [r7, #4]
 8009c12:	33b0      	adds	r3, #176	; 0xb0
 8009c14:	009b      	lsls	r3, r3, #2
 8009c16:	4413      	add	r3, r2
 8009c18:	685b      	ldr	r3, [r3, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2200      	movs	r2, #0
 8009c22:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d101      	bne.n	8009c3c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009c38:	2302      	movs	r3, #2
 8009c3a:	e018      	b.n	8009c6e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	7c1b      	ldrb	r3, [r3, #16]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d10a      	bne.n	8009c5a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009c44:	4b0d      	ldr	r3, [pc, #52]	; (8009c7c <USBD_CDC_Init+0x1e8>)
 8009c46:	7819      	ldrb	r1, [r3, #0]
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009c4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f002 fbd8 	bl	800c408 <USBD_LL_PrepareReceive>
 8009c58:	e008      	b.n	8009c6c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009c5a:	4b08      	ldr	r3, [pc, #32]	; (8009c7c <USBD_CDC_Init+0x1e8>)
 8009c5c:	7819      	ldrb	r1, [r3, #0]
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009c64:	2340      	movs	r3, #64	; 0x40
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f002 fbce 	bl	800c408 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009c6c:	2300      	movs	r3, #0
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3710      	adds	r7, #16
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}
 8009c76:	bf00      	nop
 8009c78:	240000d7 	.word	0x240000d7
 8009c7c:	240000d8 	.word	0x240000d8
 8009c80:	240000d9 	.word	0x240000d9

08009c84 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b082      	sub	sp, #8
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009c90:	4b3a      	ldr	r3, [pc, #232]	; (8009d7c <USBD_CDC_DeInit+0xf8>)
 8009c92:	781b      	ldrb	r3, [r3, #0]
 8009c94:	4619      	mov	r1, r3
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f002 faed 	bl	800c276 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009c9c:	4b37      	ldr	r3, [pc, #220]	; (8009d7c <USBD_CDC_DeInit+0xf8>)
 8009c9e:	781b      	ldrb	r3, [r3, #0]
 8009ca0:	f003 020f 	and.w	r2, r3, #15
 8009ca4:	6879      	ldr	r1, [r7, #4]
 8009ca6:	4613      	mov	r3, r2
 8009ca8:	009b      	lsls	r3, r3, #2
 8009caa:	4413      	add	r3, r2
 8009cac:	009b      	lsls	r3, r3, #2
 8009cae:	440b      	add	r3, r1
 8009cb0:	3324      	adds	r3, #36	; 0x24
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009cb6:	4b32      	ldr	r3, [pc, #200]	; (8009d80 <USBD_CDC_DeInit+0xfc>)
 8009cb8:	781b      	ldrb	r3, [r3, #0]
 8009cba:	4619      	mov	r1, r3
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f002 fada 	bl	800c276 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009cc2:	4b2f      	ldr	r3, [pc, #188]	; (8009d80 <USBD_CDC_DeInit+0xfc>)
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	f003 020f 	and.w	r2, r3, #15
 8009cca:	6879      	ldr	r1, [r7, #4]
 8009ccc:	4613      	mov	r3, r2
 8009cce:	009b      	lsls	r3, r3, #2
 8009cd0:	4413      	add	r3, r2
 8009cd2:	009b      	lsls	r3, r3, #2
 8009cd4:	440b      	add	r3, r1
 8009cd6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009cda:	2200      	movs	r2, #0
 8009cdc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009cde:	4b29      	ldr	r3, [pc, #164]	; (8009d84 <USBD_CDC_DeInit+0x100>)
 8009ce0:	781b      	ldrb	r3, [r3, #0]
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f002 fac6 	bl	800c276 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009cea:	4b26      	ldr	r3, [pc, #152]	; (8009d84 <USBD_CDC_DeInit+0x100>)
 8009cec:	781b      	ldrb	r3, [r3, #0]
 8009cee:	f003 020f 	and.w	r2, r3, #15
 8009cf2:	6879      	ldr	r1, [r7, #4]
 8009cf4:	4613      	mov	r3, r2
 8009cf6:	009b      	lsls	r3, r3, #2
 8009cf8:	4413      	add	r3, r2
 8009cfa:	009b      	lsls	r3, r3, #2
 8009cfc:	440b      	add	r3, r1
 8009cfe:	3324      	adds	r3, #36	; 0x24
 8009d00:	2200      	movs	r2, #0
 8009d02:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009d04:	4b1f      	ldr	r3, [pc, #124]	; (8009d84 <USBD_CDC_DeInit+0x100>)
 8009d06:	781b      	ldrb	r3, [r3, #0]
 8009d08:	f003 020f 	and.w	r2, r3, #15
 8009d0c:	6879      	ldr	r1, [r7, #4]
 8009d0e:	4613      	mov	r3, r2
 8009d10:	009b      	lsls	r3, r3, #2
 8009d12:	4413      	add	r3, r2
 8009d14:	009b      	lsls	r3, r3, #2
 8009d16:	440b      	add	r3, r1
 8009d18:	3326      	adds	r3, #38	; 0x26
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	32b0      	adds	r2, #176	; 0xb0
 8009d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d01f      	beq.n	8009d70 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009d36:	687a      	ldr	r2, [r7, #4]
 8009d38:	33b0      	adds	r3, #176	; 0xb0
 8009d3a:	009b      	lsls	r3, r3, #2
 8009d3c:	4413      	add	r3, r2
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	32b0      	adds	r2, #176	; 0xb0
 8009d4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d52:	4618      	mov	r0, r3
 8009d54:	f002 fb9a 	bl	800c48c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	32b0      	adds	r2, #176	; 0xb0
 8009d62:	2100      	movs	r1, #0
 8009d64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009d70:	2300      	movs	r3, #0
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3708      	adds	r7, #8
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}
 8009d7a:	bf00      	nop
 8009d7c:	240000d7 	.word	0x240000d7
 8009d80:	240000d8 	.word	0x240000d8
 8009d84:	240000d9 	.word	0x240000d9

08009d88 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b086      	sub	sp, #24
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	32b0      	adds	r2, #176	; 0xb0
 8009d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009da0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009da2:	2300      	movs	r3, #0
 8009da4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009da6:	2300      	movs	r3, #0
 8009da8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009daa:	2300      	movs	r3, #0
 8009dac:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d101      	bne.n	8009db8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009db4:	2303      	movs	r3, #3
 8009db6:	e0bf      	b.n	8009f38 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	781b      	ldrb	r3, [r3, #0]
 8009dbc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d050      	beq.n	8009e66 <USBD_CDC_Setup+0xde>
 8009dc4:	2b20      	cmp	r3, #32
 8009dc6:	f040 80af 	bne.w	8009f28 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	88db      	ldrh	r3, [r3, #6]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d03a      	beq.n	8009e48 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	781b      	ldrb	r3, [r3, #0]
 8009dd6:	b25b      	sxtb	r3, r3
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	da1b      	bge.n	8009e14 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	33b0      	adds	r3, #176	; 0xb0
 8009de6:	009b      	lsls	r3, r3, #2
 8009de8:	4413      	add	r3, r2
 8009dea:	685b      	ldr	r3, [r3, #4]
 8009dec:	689b      	ldr	r3, [r3, #8]
 8009dee:	683a      	ldr	r2, [r7, #0]
 8009df0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009df2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009df4:	683a      	ldr	r2, [r7, #0]
 8009df6:	88d2      	ldrh	r2, [r2, #6]
 8009df8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	88db      	ldrh	r3, [r3, #6]
 8009dfe:	2b07      	cmp	r3, #7
 8009e00:	bf28      	it	cs
 8009e02:	2307      	movcs	r3, #7
 8009e04:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	89fa      	ldrh	r2, [r7, #14]
 8009e0a:	4619      	mov	r1, r3
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f001 fdb3 	bl	800b978 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009e12:	e090      	b.n	8009f36 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	785a      	ldrb	r2, [r3, #1]
 8009e18:	693b      	ldr	r3, [r7, #16]
 8009e1a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	88db      	ldrh	r3, [r3, #6]
 8009e22:	2b3f      	cmp	r3, #63	; 0x3f
 8009e24:	d803      	bhi.n	8009e2e <USBD_CDC_Setup+0xa6>
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	88db      	ldrh	r3, [r3, #6]
 8009e2a:	b2da      	uxtb	r2, r3
 8009e2c:	e000      	b.n	8009e30 <USBD_CDC_Setup+0xa8>
 8009e2e:	2240      	movs	r2, #64	; 0x40
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009e36:	6939      	ldr	r1, [r7, #16]
 8009e38:	693b      	ldr	r3, [r7, #16]
 8009e3a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009e3e:	461a      	mov	r2, r3
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f001 fdc5 	bl	800b9d0 <USBD_CtlPrepareRx>
      break;
 8009e46:	e076      	b.n	8009f36 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e4e:	687a      	ldr	r2, [r7, #4]
 8009e50:	33b0      	adds	r3, #176	; 0xb0
 8009e52:	009b      	lsls	r3, r3, #2
 8009e54:	4413      	add	r3, r2
 8009e56:	685b      	ldr	r3, [r3, #4]
 8009e58:	689b      	ldr	r3, [r3, #8]
 8009e5a:	683a      	ldr	r2, [r7, #0]
 8009e5c:	7850      	ldrb	r0, [r2, #1]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	6839      	ldr	r1, [r7, #0]
 8009e62:	4798      	blx	r3
      break;
 8009e64:	e067      	b.n	8009f36 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	785b      	ldrb	r3, [r3, #1]
 8009e6a:	2b0b      	cmp	r3, #11
 8009e6c:	d851      	bhi.n	8009f12 <USBD_CDC_Setup+0x18a>
 8009e6e:	a201      	add	r2, pc, #4	; (adr r2, 8009e74 <USBD_CDC_Setup+0xec>)
 8009e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e74:	08009ea5 	.word	0x08009ea5
 8009e78:	08009f21 	.word	0x08009f21
 8009e7c:	08009f13 	.word	0x08009f13
 8009e80:	08009f13 	.word	0x08009f13
 8009e84:	08009f13 	.word	0x08009f13
 8009e88:	08009f13 	.word	0x08009f13
 8009e8c:	08009f13 	.word	0x08009f13
 8009e90:	08009f13 	.word	0x08009f13
 8009e94:	08009f13 	.word	0x08009f13
 8009e98:	08009f13 	.word	0x08009f13
 8009e9c:	08009ecf 	.word	0x08009ecf
 8009ea0:	08009ef9 	.word	0x08009ef9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009eaa:	b2db      	uxtb	r3, r3
 8009eac:	2b03      	cmp	r3, #3
 8009eae:	d107      	bne.n	8009ec0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009eb0:	f107 030a 	add.w	r3, r7, #10
 8009eb4:	2202      	movs	r2, #2
 8009eb6:	4619      	mov	r1, r3
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f001 fd5d 	bl	800b978 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009ebe:	e032      	b.n	8009f26 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009ec0:	6839      	ldr	r1, [r7, #0]
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f001 fce7 	bl	800b896 <USBD_CtlError>
            ret = USBD_FAIL;
 8009ec8:	2303      	movs	r3, #3
 8009eca:	75fb      	strb	r3, [r7, #23]
          break;
 8009ecc:	e02b      	b.n	8009f26 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ed4:	b2db      	uxtb	r3, r3
 8009ed6:	2b03      	cmp	r3, #3
 8009ed8:	d107      	bne.n	8009eea <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009eda:	f107 030d 	add.w	r3, r7, #13
 8009ede:	2201      	movs	r2, #1
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f001 fd48 	bl	800b978 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009ee8:	e01d      	b.n	8009f26 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009eea:	6839      	ldr	r1, [r7, #0]
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f001 fcd2 	bl	800b896 <USBD_CtlError>
            ret = USBD_FAIL;
 8009ef2:	2303      	movs	r3, #3
 8009ef4:	75fb      	strb	r3, [r7, #23]
          break;
 8009ef6:	e016      	b.n	8009f26 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009efe:	b2db      	uxtb	r3, r3
 8009f00:	2b03      	cmp	r3, #3
 8009f02:	d00f      	beq.n	8009f24 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009f04:	6839      	ldr	r1, [r7, #0]
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f001 fcc5 	bl	800b896 <USBD_CtlError>
            ret = USBD_FAIL;
 8009f0c:	2303      	movs	r3, #3
 8009f0e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009f10:	e008      	b.n	8009f24 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009f12:	6839      	ldr	r1, [r7, #0]
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f001 fcbe 	bl	800b896 <USBD_CtlError>
          ret = USBD_FAIL;
 8009f1a:	2303      	movs	r3, #3
 8009f1c:	75fb      	strb	r3, [r7, #23]
          break;
 8009f1e:	e002      	b.n	8009f26 <USBD_CDC_Setup+0x19e>
          break;
 8009f20:	bf00      	nop
 8009f22:	e008      	b.n	8009f36 <USBD_CDC_Setup+0x1ae>
          break;
 8009f24:	bf00      	nop
      }
      break;
 8009f26:	e006      	b.n	8009f36 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009f28:	6839      	ldr	r1, [r7, #0]
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f001 fcb3 	bl	800b896 <USBD_CtlError>
      ret = USBD_FAIL;
 8009f30:	2303      	movs	r3, #3
 8009f32:	75fb      	strb	r3, [r7, #23]
      break;
 8009f34:	bf00      	nop
  }

  return (uint8_t)ret;
 8009f36:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3718      	adds	r7, #24
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b084      	sub	sp, #16
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	460b      	mov	r3, r1
 8009f4a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009f52:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	32b0      	adds	r2, #176	; 0xb0
 8009f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d101      	bne.n	8009f6a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009f66:	2303      	movs	r3, #3
 8009f68:	e065      	b.n	800a036 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	32b0      	adds	r2, #176	; 0xb0
 8009f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f78:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009f7a:	78fb      	ldrb	r3, [r7, #3]
 8009f7c:	f003 020f 	and.w	r2, r3, #15
 8009f80:	6879      	ldr	r1, [r7, #4]
 8009f82:	4613      	mov	r3, r2
 8009f84:	009b      	lsls	r3, r3, #2
 8009f86:	4413      	add	r3, r2
 8009f88:	009b      	lsls	r3, r3, #2
 8009f8a:	440b      	add	r3, r1
 8009f8c:	3318      	adds	r3, #24
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d02f      	beq.n	8009ff4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009f94:	78fb      	ldrb	r3, [r7, #3]
 8009f96:	f003 020f 	and.w	r2, r3, #15
 8009f9a:	6879      	ldr	r1, [r7, #4]
 8009f9c:	4613      	mov	r3, r2
 8009f9e:	009b      	lsls	r3, r3, #2
 8009fa0:	4413      	add	r3, r2
 8009fa2:	009b      	lsls	r3, r3, #2
 8009fa4:	440b      	add	r3, r1
 8009fa6:	3318      	adds	r3, #24
 8009fa8:	681a      	ldr	r2, [r3, #0]
 8009faa:	78fb      	ldrb	r3, [r7, #3]
 8009fac:	f003 010f 	and.w	r1, r3, #15
 8009fb0:	68f8      	ldr	r0, [r7, #12]
 8009fb2:	460b      	mov	r3, r1
 8009fb4:	00db      	lsls	r3, r3, #3
 8009fb6:	440b      	add	r3, r1
 8009fb8:	009b      	lsls	r3, r3, #2
 8009fba:	4403      	add	r3, r0
 8009fbc:	3344      	adds	r3, #68	; 0x44
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	fbb2 f1f3 	udiv	r1, r2, r3
 8009fc4:	fb01 f303 	mul.w	r3, r1, r3
 8009fc8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d112      	bne.n	8009ff4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009fce:	78fb      	ldrb	r3, [r7, #3]
 8009fd0:	f003 020f 	and.w	r2, r3, #15
 8009fd4:	6879      	ldr	r1, [r7, #4]
 8009fd6:	4613      	mov	r3, r2
 8009fd8:	009b      	lsls	r3, r3, #2
 8009fda:	4413      	add	r3, r2
 8009fdc:	009b      	lsls	r3, r3, #2
 8009fde:	440b      	add	r3, r1
 8009fe0:	3318      	adds	r3, #24
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009fe6:	78f9      	ldrb	r1, [r7, #3]
 8009fe8:	2300      	movs	r3, #0
 8009fea:	2200      	movs	r2, #0
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f002 f9ea 	bl	800c3c6 <USBD_LL_Transmit>
 8009ff2:	e01f      	b.n	800a034 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a002:	687a      	ldr	r2, [r7, #4]
 800a004:	33b0      	adds	r3, #176	; 0xb0
 800a006:	009b      	lsls	r3, r3, #2
 800a008:	4413      	add	r3, r2
 800a00a:	685b      	ldr	r3, [r3, #4]
 800a00c:	691b      	ldr	r3, [r3, #16]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d010      	beq.n	800a034 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a018:	687a      	ldr	r2, [r7, #4]
 800a01a:	33b0      	adds	r3, #176	; 0xb0
 800a01c:	009b      	lsls	r3, r3, #2
 800a01e:	4413      	add	r3, r2
 800a020:	685b      	ldr	r3, [r3, #4]
 800a022:	691b      	ldr	r3, [r3, #16]
 800a024:	68ba      	ldr	r2, [r7, #8]
 800a026:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a02a:	68ba      	ldr	r2, [r7, #8]
 800a02c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a030:	78fa      	ldrb	r2, [r7, #3]
 800a032:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a034:	2300      	movs	r3, #0
}
 800a036:	4618      	mov	r0, r3
 800a038:	3710      	adds	r7, #16
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}

0800a03e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a03e:	b580      	push	{r7, lr}
 800a040:	b084      	sub	sp, #16
 800a042:	af00      	add	r7, sp, #0
 800a044:	6078      	str	r0, [r7, #4]
 800a046:	460b      	mov	r3, r1
 800a048:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	32b0      	adds	r2, #176	; 0xb0
 800a054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a058:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	32b0      	adds	r2, #176	; 0xb0
 800a064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d101      	bne.n	800a070 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a06c:	2303      	movs	r3, #3
 800a06e:	e01a      	b.n	800a0a6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a070:	78fb      	ldrb	r3, [r7, #3]
 800a072:	4619      	mov	r1, r3
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f002 f9e8 	bl	800c44a <USBD_LL_GetRxDataSize>
 800a07a:	4602      	mov	r2, r0
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a088:	687a      	ldr	r2, [r7, #4]
 800a08a:	33b0      	adds	r3, #176	; 0xb0
 800a08c:	009b      	lsls	r3, r3, #2
 800a08e:	4413      	add	r3, r2
 800a090:	685b      	ldr	r3, [r3, #4]
 800a092:	68db      	ldr	r3, [r3, #12]
 800a094:	68fa      	ldr	r2, [r7, #12]
 800a096:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a09a:	68fa      	ldr	r2, [r7, #12]
 800a09c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a0a0:	4611      	mov	r1, r2
 800a0a2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a0a4:	2300      	movs	r3, #0
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3710      	adds	r7, #16
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}

0800a0ae <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a0ae:	b580      	push	{r7, lr}
 800a0b0:	b084      	sub	sp, #16
 800a0b2:	af00      	add	r7, sp, #0
 800a0b4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	32b0      	adds	r2, #176	; 0xb0
 800a0c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0c4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d101      	bne.n	800a0d0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a0cc:	2303      	movs	r3, #3
 800a0ce:	e025      	b.n	800a11c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a0d6:	687a      	ldr	r2, [r7, #4]
 800a0d8:	33b0      	adds	r3, #176	; 0xb0
 800a0da:	009b      	lsls	r3, r3, #2
 800a0dc:	4413      	add	r3, r2
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d01a      	beq.n	800a11a <USBD_CDC_EP0_RxReady+0x6c>
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a0ea:	2bff      	cmp	r3, #255	; 0xff
 800a0ec:	d015      	beq.n	800a11a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a0f4:	687a      	ldr	r2, [r7, #4]
 800a0f6:	33b0      	adds	r3, #176	; 0xb0
 800a0f8:	009b      	lsls	r3, r3, #2
 800a0fa:	4413      	add	r3, r2
 800a0fc:	685b      	ldr	r3, [r3, #4]
 800a0fe:	689b      	ldr	r3, [r3, #8]
 800a100:	68fa      	ldr	r2, [r7, #12]
 800a102:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a106:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a108:	68fa      	ldr	r2, [r7, #12]
 800a10a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a10e:	b292      	uxth	r2, r2
 800a110:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	22ff      	movs	r2, #255	; 0xff
 800a116:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a11a:	2300      	movs	r3, #0
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3710      	adds	r7, #16
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}

0800a124 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b086      	sub	sp, #24
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a12c:	2182      	movs	r1, #130	; 0x82
 800a12e:	4818      	ldr	r0, [pc, #96]	; (800a190 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a130:	f000 fd4f 	bl	800abd2 <USBD_GetEpDesc>
 800a134:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a136:	2101      	movs	r1, #1
 800a138:	4815      	ldr	r0, [pc, #84]	; (800a190 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a13a:	f000 fd4a 	bl	800abd2 <USBD_GetEpDesc>
 800a13e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a140:	2181      	movs	r1, #129	; 0x81
 800a142:	4813      	ldr	r0, [pc, #76]	; (800a190 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a144:	f000 fd45 	bl	800abd2 <USBD_GetEpDesc>
 800a148:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d002      	beq.n	800a156 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	2210      	movs	r2, #16
 800a154:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d006      	beq.n	800a16a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	2200      	movs	r2, #0
 800a160:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a164:	711a      	strb	r2, [r3, #4]
 800a166:	2200      	movs	r2, #0
 800a168:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d006      	beq.n	800a17e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	2200      	movs	r2, #0
 800a174:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a178:	711a      	strb	r2, [r3, #4]
 800a17a:	2200      	movs	r2, #0
 800a17c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2243      	movs	r2, #67	; 0x43
 800a182:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a184:	4b02      	ldr	r3, [pc, #8]	; (800a190 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a186:	4618      	mov	r0, r3
 800a188:	3718      	adds	r7, #24
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}
 800a18e:	bf00      	nop
 800a190:	24000094 	.word	0x24000094

0800a194 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b086      	sub	sp, #24
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a19c:	2182      	movs	r1, #130	; 0x82
 800a19e:	4818      	ldr	r0, [pc, #96]	; (800a200 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a1a0:	f000 fd17 	bl	800abd2 <USBD_GetEpDesc>
 800a1a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a1a6:	2101      	movs	r1, #1
 800a1a8:	4815      	ldr	r0, [pc, #84]	; (800a200 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a1aa:	f000 fd12 	bl	800abd2 <USBD_GetEpDesc>
 800a1ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a1b0:	2181      	movs	r1, #129	; 0x81
 800a1b2:	4813      	ldr	r0, [pc, #76]	; (800a200 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a1b4:	f000 fd0d 	bl	800abd2 <USBD_GetEpDesc>
 800a1b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d002      	beq.n	800a1c6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	2210      	movs	r2, #16
 800a1c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d006      	beq.n	800a1da <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	711a      	strb	r2, [r3, #4]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	f042 0202 	orr.w	r2, r2, #2
 800a1d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d006      	beq.n	800a1ee <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	711a      	strb	r2, [r3, #4]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	f042 0202 	orr.w	r2, r2, #2
 800a1ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2243      	movs	r2, #67	; 0x43
 800a1f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a1f4:	4b02      	ldr	r3, [pc, #8]	; (800a200 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3718      	adds	r7, #24
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}
 800a1fe:	bf00      	nop
 800a200:	24000094 	.word	0x24000094

0800a204 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b086      	sub	sp, #24
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a20c:	2182      	movs	r1, #130	; 0x82
 800a20e:	4818      	ldr	r0, [pc, #96]	; (800a270 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a210:	f000 fcdf 	bl	800abd2 <USBD_GetEpDesc>
 800a214:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a216:	2101      	movs	r1, #1
 800a218:	4815      	ldr	r0, [pc, #84]	; (800a270 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a21a:	f000 fcda 	bl	800abd2 <USBD_GetEpDesc>
 800a21e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a220:	2181      	movs	r1, #129	; 0x81
 800a222:	4813      	ldr	r0, [pc, #76]	; (800a270 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a224:	f000 fcd5 	bl	800abd2 <USBD_GetEpDesc>
 800a228:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d002      	beq.n	800a236 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	2210      	movs	r2, #16
 800a234:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d006      	beq.n	800a24a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	2200      	movs	r2, #0
 800a240:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a244:	711a      	strb	r2, [r3, #4]
 800a246:	2200      	movs	r2, #0
 800a248:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d006      	beq.n	800a25e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	2200      	movs	r2, #0
 800a254:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a258:	711a      	strb	r2, [r3, #4]
 800a25a:	2200      	movs	r2, #0
 800a25c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2243      	movs	r2, #67	; 0x43
 800a262:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a264:	4b02      	ldr	r3, [pc, #8]	; (800a270 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a266:	4618      	mov	r0, r3
 800a268:	3718      	adds	r7, #24
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}
 800a26e:	bf00      	nop
 800a270:	24000094 	.word	0x24000094

0800a274 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a274:	b480      	push	{r7}
 800a276:	b083      	sub	sp, #12
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	220a      	movs	r2, #10
 800a280:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a282:	4b03      	ldr	r3, [pc, #12]	; (800a290 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a284:	4618      	mov	r0, r3
 800a286:	370c      	adds	r7, #12
 800a288:	46bd      	mov	sp, r7
 800a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28e:	4770      	bx	lr
 800a290:	24000050 	.word	0x24000050

0800a294 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a294:	b480      	push	{r7}
 800a296:	b083      	sub	sp, #12
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
 800a29c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d101      	bne.n	800a2a8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a2a4:	2303      	movs	r3, #3
 800a2a6:	e009      	b.n	800a2bc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a2ae:	687a      	ldr	r2, [r7, #4]
 800a2b0:	33b0      	adds	r3, #176	; 0xb0
 800a2b2:	009b      	lsls	r3, r3, #2
 800a2b4:	4413      	add	r3, r2
 800a2b6:	683a      	ldr	r2, [r7, #0]
 800a2b8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a2ba:	2300      	movs	r3, #0
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	370c      	adds	r7, #12
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c6:	4770      	bx	lr

0800a2c8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b087      	sub	sp, #28
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	60f8      	str	r0, [r7, #12]
 800a2d0:	60b9      	str	r1, [r7, #8]
 800a2d2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	32b0      	adds	r2, #176	; 0xb0
 800a2de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2e2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a2e4:	697b      	ldr	r3, [r7, #20]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d101      	bne.n	800a2ee <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a2ea:	2303      	movs	r3, #3
 800a2ec:	e008      	b.n	800a300 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	68ba      	ldr	r2, [r7, #8]
 800a2f2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	687a      	ldr	r2, [r7, #4]
 800a2fa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a2fe:	2300      	movs	r3, #0
}
 800a300:	4618      	mov	r0, r3
 800a302:	371c      	adds	r7, #28
 800a304:	46bd      	mov	sp, r7
 800a306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30a:	4770      	bx	lr

0800a30c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b085      	sub	sp, #20
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	32b0      	adds	r2, #176	; 0xb0
 800a320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a324:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d101      	bne.n	800a330 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a32c:	2303      	movs	r3, #3
 800a32e:	e004      	b.n	800a33a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	683a      	ldr	r2, [r7, #0]
 800a334:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a338:	2300      	movs	r3, #0
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3714      	adds	r7, #20
 800a33e:	46bd      	mov	sp, r7
 800a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a344:	4770      	bx	lr
	...

0800a348 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b084      	sub	sp, #16
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	32b0      	adds	r2, #176	; 0xb0
 800a35a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a35e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a360:	2301      	movs	r3, #1
 800a362:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d101      	bne.n	800a36e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a36a:	2303      	movs	r3, #3
 800a36c:	e025      	b.n	800a3ba <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a374:	2b00      	cmp	r3, #0
 800a376:	d11f      	bne.n	800a3b8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	2201      	movs	r2, #1
 800a37c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a380:	4b10      	ldr	r3, [pc, #64]	; (800a3c4 <USBD_CDC_TransmitPacket+0x7c>)
 800a382:	781b      	ldrb	r3, [r3, #0]
 800a384:	f003 020f 	and.w	r2, r3, #15
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	4613      	mov	r3, r2
 800a392:	009b      	lsls	r3, r3, #2
 800a394:	4413      	add	r3, r2
 800a396:	009b      	lsls	r3, r3, #2
 800a398:	4403      	add	r3, r0
 800a39a:	3318      	adds	r3, #24
 800a39c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a39e:	4b09      	ldr	r3, [pc, #36]	; (800a3c4 <USBD_CDC_TransmitPacket+0x7c>)
 800a3a0:	7819      	ldrb	r1, [r3, #0]
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f002 f809 	bl	800c3c6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a3b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3710      	adds	r7, #16
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}
 800a3c2:	bf00      	nop
 800a3c4:	240000d7 	.word	0x240000d7

0800a3c8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b084      	sub	sp, #16
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	32b0      	adds	r2, #176	; 0xb0
 800a3da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3de:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	32b0      	adds	r2, #176	; 0xb0
 800a3ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d101      	bne.n	800a3f6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a3f2:	2303      	movs	r3, #3
 800a3f4:	e018      	b.n	800a428 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	7c1b      	ldrb	r3, [r3, #16]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d10a      	bne.n	800a414 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a3fe:	4b0c      	ldr	r3, [pc, #48]	; (800a430 <USBD_CDC_ReceivePacket+0x68>)
 800a400:	7819      	ldrb	r1, [r3, #0]
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a408:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f001 fffb 	bl	800c408 <USBD_LL_PrepareReceive>
 800a412:	e008      	b.n	800a426 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a414:	4b06      	ldr	r3, [pc, #24]	; (800a430 <USBD_CDC_ReceivePacket+0x68>)
 800a416:	7819      	ldrb	r1, [r3, #0]
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a41e:	2340      	movs	r3, #64	; 0x40
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f001 fff1 	bl	800c408 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a426:	2300      	movs	r3, #0
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3710      	adds	r7, #16
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}
 800a430:	240000d8 	.word	0x240000d8

0800a434 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b086      	sub	sp, #24
 800a438:	af00      	add	r7, sp, #0
 800a43a:	60f8      	str	r0, [r7, #12]
 800a43c:	60b9      	str	r1, [r7, #8]
 800a43e:	4613      	mov	r3, r2
 800a440:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d101      	bne.n	800a44c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a448:	2303      	movs	r3, #3
 800a44a:	e01f      	b.n	800a48c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	2200      	movs	r2, #0
 800a450:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	2200      	movs	r2, #0
 800a458:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	2200      	movs	r2, #0
 800a460:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d003      	beq.n	800a472 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	68ba      	ldr	r2, [r7, #8]
 800a46e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	2201      	movs	r2, #1
 800a476:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	79fa      	ldrb	r2, [r7, #7]
 800a47e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a480:	68f8      	ldr	r0, [r7, #12]
 800a482:	f001 fe67 	bl	800c154 <USBD_LL_Init>
 800a486:	4603      	mov	r3, r0
 800a488:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a48a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	3718      	adds	r7, #24
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}

0800a494 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b084      	sub	sp, #16
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
 800a49c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d101      	bne.n	800a4ac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a4a8:	2303      	movs	r3, #3
 800a4aa:	e025      	b.n	800a4f8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	683a      	ldr	r2, [r7, #0]
 800a4b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	32ae      	adds	r2, #174	; 0xae
 800a4be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d00f      	beq.n	800a4e8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	32ae      	adds	r2, #174	; 0xae
 800a4d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4d8:	f107 020e 	add.w	r2, r7, #14
 800a4dc:	4610      	mov	r0, r2
 800a4de:	4798      	blx	r3
 800a4e0:	4602      	mov	r2, r0
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a4ee:	1c5a      	adds	r2, r3, #1
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a4f6:	2300      	movs	r3, #0
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3710      	adds	r7, #16
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b082      	sub	sp, #8
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f001 fe73 	bl	800c1f4 <USBD_LL_Start>
 800a50e:	4603      	mov	r3, r0
}
 800a510:	4618      	mov	r0, r3
 800a512:	3708      	adds	r7, #8
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}

0800a518 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a518:	b480      	push	{r7}
 800a51a:	b083      	sub	sp, #12
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a520:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a522:	4618      	mov	r0, r3
 800a524:	370c      	adds	r7, #12
 800a526:	46bd      	mov	sp, r7
 800a528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52c:	4770      	bx	lr

0800a52e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a52e:	b580      	push	{r7, lr}
 800a530:	b084      	sub	sp, #16
 800a532:	af00      	add	r7, sp, #0
 800a534:	6078      	str	r0, [r7, #4]
 800a536:	460b      	mov	r3, r1
 800a538:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a53a:	2300      	movs	r3, #0
 800a53c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a544:	2b00      	cmp	r3, #0
 800a546:	d009      	beq.n	800a55c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	78fa      	ldrb	r2, [r7, #3]
 800a552:	4611      	mov	r1, r2
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	4798      	blx	r3
 800a558:	4603      	mov	r3, r0
 800a55a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a55c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3710      	adds	r7, #16
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}

0800a566 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a566:	b580      	push	{r7, lr}
 800a568:	b084      	sub	sp, #16
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	6078      	str	r0, [r7, #4]
 800a56e:	460b      	mov	r3, r1
 800a570:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a572:	2300      	movs	r3, #0
 800a574:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a57c:	685b      	ldr	r3, [r3, #4]
 800a57e:	78fa      	ldrb	r2, [r7, #3]
 800a580:	4611      	mov	r1, r2
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	4798      	blx	r3
 800a586:	4603      	mov	r3, r0
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d001      	beq.n	800a590 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a58c:	2303      	movs	r3, #3
 800a58e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a590:	7bfb      	ldrb	r3, [r7, #15]
}
 800a592:	4618      	mov	r0, r3
 800a594:	3710      	adds	r7, #16
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}

0800a59a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a59a:	b580      	push	{r7, lr}
 800a59c:	b084      	sub	sp, #16
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	6078      	str	r0, [r7, #4]
 800a5a2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a5aa:	6839      	ldr	r1, [r7, #0]
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f001 f938 	bl	800b822 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2201      	movs	r2, #1
 800a5b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a5c0:	461a      	mov	r2, r3
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a5ce:	f003 031f 	and.w	r3, r3, #31
 800a5d2:	2b02      	cmp	r3, #2
 800a5d4:	d01a      	beq.n	800a60c <USBD_LL_SetupStage+0x72>
 800a5d6:	2b02      	cmp	r3, #2
 800a5d8:	d822      	bhi.n	800a620 <USBD_LL_SetupStage+0x86>
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d002      	beq.n	800a5e4 <USBD_LL_SetupStage+0x4a>
 800a5de:	2b01      	cmp	r3, #1
 800a5e0:	d00a      	beq.n	800a5f8 <USBD_LL_SetupStage+0x5e>
 800a5e2:	e01d      	b.n	800a620 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a5ea:	4619      	mov	r1, r3
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f000 fb65 	bl	800acbc <USBD_StdDevReq>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	73fb      	strb	r3, [r7, #15]
      break;
 800a5f6:	e020      	b.n	800a63a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a5fe:	4619      	mov	r1, r3
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f000 fbcd 	bl	800ada0 <USBD_StdItfReq>
 800a606:	4603      	mov	r3, r0
 800a608:	73fb      	strb	r3, [r7, #15]
      break;
 800a60a:	e016      	b.n	800a63a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a612:	4619      	mov	r1, r3
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f000 fc2f 	bl	800ae78 <USBD_StdEPReq>
 800a61a:	4603      	mov	r3, r0
 800a61c:	73fb      	strb	r3, [r7, #15]
      break;
 800a61e:	e00c      	b.n	800a63a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a626:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a62a:	b2db      	uxtb	r3, r3
 800a62c:	4619      	mov	r1, r3
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f001 fe40 	bl	800c2b4 <USBD_LL_StallEP>
 800a634:	4603      	mov	r3, r0
 800a636:	73fb      	strb	r3, [r7, #15]
      break;
 800a638:	bf00      	nop
  }

  return ret;
 800a63a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3710      	adds	r7, #16
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b086      	sub	sp, #24
 800a648:	af00      	add	r7, sp, #0
 800a64a:	60f8      	str	r0, [r7, #12]
 800a64c:	460b      	mov	r3, r1
 800a64e:	607a      	str	r2, [r7, #4]
 800a650:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a652:	2300      	movs	r3, #0
 800a654:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a656:	7afb      	ldrb	r3, [r7, #11]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d16e      	bne.n	800a73a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a662:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a66a:	2b03      	cmp	r3, #3
 800a66c:	f040 8098 	bne.w	800a7a0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	689a      	ldr	r2, [r3, #8]
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	68db      	ldr	r3, [r3, #12]
 800a678:	429a      	cmp	r2, r3
 800a67a:	d913      	bls.n	800a6a4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	689a      	ldr	r2, [r3, #8]
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	68db      	ldr	r3, [r3, #12]
 800a684:	1ad2      	subs	r2, r2, r3
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a68a:	693b      	ldr	r3, [r7, #16]
 800a68c:	68da      	ldr	r2, [r3, #12]
 800a68e:	693b      	ldr	r3, [r7, #16]
 800a690:	689b      	ldr	r3, [r3, #8]
 800a692:	4293      	cmp	r3, r2
 800a694:	bf28      	it	cs
 800a696:	4613      	movcs	r3, r2
 800a698:	461a      	mov	r2, r3
 800a69a:	6879      	ldr	r1, [r7, #4]
 800a69c:	68f8      	ldr	r0, [r7, #12]
 800a69e:	f001 f9b4 	bl	800ba0a <USBD_CtlContinueRx>
 800a6a2:	e07d      	b.n	800a7a0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a6aa:	f003 031f 	and.w	r3, r3, #31
 800a6ae:	2b02      	cmp	r3, #2
 800a6b0:	d014      	beq.n	800a6dc <USBD_LL_DataOutStage+0x98>
 800a6b2:	2b02      	cmp	r3, #2
 800a6b4:	d81d      	bhi.n	800a6f2 <USBD_LL_DataOutStage+0xae>
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d002      	beq.n	800a6c0 <USBD_LL_DataOutStage+0x7c>
 800a6ba:	2b01      	cmp	r3, #1
 800a6bc:	d003      	beq.n	800a6c6 <USBD_LL_DataOutStage+0x82>
 800a6be:	e018      	b.n	800a6f2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	75bb      	strb	r3, [r7, #22]
            break;
 800a6c4:	e018      	b.n	800a6f8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a6cc:	b2db      	uxtb	r3, r3
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	68f8      	ldr	r0, [r7, #12]
 800a6d2:	f000 fa64 	bl	800ab9e <USBD_CoreFindIF>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	75bb      	strb	r3, [r7, #22]
            break;
 800a6da:	e00d      	b.n	800a6f8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a6e2:	b2db      	uxtb	r3, r3
 800a6e4:	4619      	mov	r1, r3
 800a6e6:	68f8      	ldr	r0, [r7, #12]
 800a6e8:	f000 fa66 	bl	800abb8 <USBD_CoreFindEP>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	75bb      	strb	r3, [r7, #22]
            break;
 800a6f0:	e002      	b.n	800a6f8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	75bb      	strb	r3, [r7, #22]
            break;
 800a6f6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a6f8:	7dbb      	ldrb	r3, [r7, #22]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d119      	bne.n	800a732 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a704:	b2db      	uxtb	r3, r3
 800a706:	2b03      	cmp	r3, #3
 800a708:	d113      	bne.n	800a732 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a70a:	7dba      	ldrb	r2, [r7, #22]
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	32ae      	adds	r2, #174	; 0xae
 800a710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a714:	691b      	ldr	r3, [r3, #16]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d00b      	beq.n	800a732 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a71a:	7dba      	ldrb	r2, [r7, #22]
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a722:	7dba      	ldrb	r2, [r7, #22]
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	32ae      	adds	r2, #174	; 0xae
 800a728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a72c:	691b      	ldr	r3, [r3, #16]
 800a72e:	68f8      	ldr	r0, [r7, #12]
 800a730:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a732:	68f8      	ldr	r0, [r7, #12]
 800a734:	f001 f97a 	bl	800ba2c <USBD_CtlSendStatus>
 800a738:	e032      	b.n	800a7a0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a73a:	7afb      	ldrb	r3, [r7, #11]
 800a73c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a740:	b2db      	uxtb	r3, r3
 800a742:	4619      	mov	r1, r3
 800a744:	68f8      	ldr	r0, [r7, #12]
 800a746:	f000 fa37 	bl	800abb8 <USBD_CoreFindEP>
 800a74a:	4603      	mov	r3, r0
 800a74c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a74e:	7dbb      	ldrb	r3, [r7, #22]
 800a750:	2bff      	cmp	r3, #255	; 0xff
 800a752:	d025      	beq.n	800a7a0 <USBD_LL_DataOutStage+0x15c>
 800a754:	7dbb      	ldrb	r3, [r7, #22]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d122      	bne.n	800a7a0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a760:	b2db      	uxtb	r3, r3
 800a762:	2b03      	cmp	r3, #3
 800a764:	d117      	bne.n	800a796 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a766:	7dba      	ldrb	r2, [r7, #22]
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	32ae      	adds	r2, #174	; 0xae
 800a76c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a770:	699b      	ldr	r3, [r3, #24]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d00f      	beq.n	800a796 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a776:	7dba      	ldrb	r2, [r7, #22]
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a77e:	7dba      	ldrb	r2, [r7, #22]
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	32ae      	adds	r2, #174	; 0xae
 800a784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a788:	699b      	ldr	r3, [r3, #24]
 800a78a:	7afa      	ldrb	r2, [r7, #11]
 800a78c:	4611      	mov	r1, r2
 800a78e:	68f8      	ldr	r0, [r7, #12]
 800a790:	4798      	blx	r3
 800a792:	4603      	mov	r3, r0
 800a794:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a796:	7dfb      	ldrb	r3, [r7, #23]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d001      	beq.n	800a7a0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a79c:	7dfb      	ldrb	r3, [r7, #23]
 800a79e:	e000      	b.n	800a7a2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a7a0:	2300      	movs	r3, #0
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3718      	adds	r7, #24
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}

0800a7aa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a7aa:	b580      	push	{r7, lr}
 800a7ac:	b086      	sub	sp, #24
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	60f8      	str	r0, [r7, #12]
 800a7b2:	460b      	mov	r3, r1
 800a7b4:	607a      	str	r2, [r7, #4]
 800a7b6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a7b8:	7afb      	ldrb	r3, [r7, #11]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d16f      	bne.n	800a89e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	3314      	adds	r3, #20
 800a7c2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a7ca:	2b02      	cmp	r3, #2
 800a7cc:	d15a      	bne.n	800a884 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	689a      	ldr	r2, [r3, #8]
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	68db      	ldr	r3, [r3, #12]
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	d914      	bls.n	800a804 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	689a      	ldr	r2, [r3, #8]
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	68db      	ldr	r3, [r3, #12]
 800a7e2:	1ad2      	subs	r2, r2, r3
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	689b      	ldr	r3, [r3, #8]
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	6879      	ldr	r1, [r7, #4]
 800a7f0:	68f8      	ldr	r0, [r7, #12]
 800a7f2:	f001 f8dc 	bl	800b9ae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	2100      	movs	r1, #0
 800a7fc:	68f8      	ldr	r0, [r7, #12]
 800a7fe:	f001 fe03 	bl	800c408 <USBD_LL_PrepareReceive>
 800a802:	e03f      	b.n	800a884 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	68da      	ldr	r2, [r3, #12]
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	689b      	ldr	r3, [r3, #8]
 800a80c:	429a      	cmp	r2, r3
 800a80e:	d11c      	bne.n	800a84a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	685a      	ldr	r2, [r3, #4]
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a818:	429a      	cmp	r2, r3
 800a81a:	d316      	bcc.n	800a84a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	685a      	ldr	r2, [r3, #4]
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a826:	429a      	cmp	r2, r3
 800a828:	d20f      	bcs.n	800a84a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a82a:	2200      	movs	r2, #0
 800a82c:	2100      	movs	r1, #0
 800a82e:	68f8      	ldr	r0, [r7, #12]
 800a830:	f001 f8bd 	bl	800b9ae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	2200      	movs	r2, #0
 800a838:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a83c:	2300      	movs	r3, #0
 800a83e:	2200      	movs	r2, #0
 800a840:	2100      	movs	r1, #0
 800a842:	68f8      	ldr	r0, [r7, #12]
 800a844:	f001 fde0 	bl	800c408 <USBD_LL_PrepareReceive>
 800a848:	e01c      	b.n	800a884 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a850:	b2db      	uxtb	r3, r3
 800a852:	2b03      	cmp	r3, #3
 800a854:	d10f      	bne.n	800a876 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a85c:	68db      	ldr	r3, [r3, #12]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d009      	beq.n	800a876 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	2200      	movs	r2, #0
 800a866:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a870:	68db      	ldr	r3, [r3, #12]
 800a872:	68f8      	ldr	r0, [r7, #12]
 800a874:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a876:	2180      	movs	r1, #128	; 0x80
 800a878:	68f8      	ldr	r0, [r7, #12]
 800a87a:	f001 fd1b 	bl	800c2b4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a87e:	68f8      	ldr	r0, [r7, #12]
 800a880:	f001 f8e7 	bl	800ba52 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d03a      	beq.n	800a904 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a88e:	68f8      	ldr	r0, [r7, #12]
 800a890:	f7ff fe42 	bl	800a518 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	2200      	movs	r2, #0
 800a898:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a89c:	e032      	b.n	800a904 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a89e:	7afb      	ldrb	r3, [r7, #11]
 800a8a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a8a4:	b2db      	uxtb	r3, r3
 800a8a6:	4619      	mov	r1, r3
 800a8a8:	68f8      	ldr	r0, [r7, #12]
 800a8aa:	f000 f985 	bl	800abb8 <USBD_CoreFindEP>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a8b2:	7dfb      	ldrb	r3, [r7, #23]
 800a8b4:	2bff      	cmp	r3, #255	; 0xff
 800a8b6:	d025      	beq.n	800a904 <USBD_LL_DataInStage+0x15a>
 800a8b8:	7dfb      	ldrb	r3, [r7, #23]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d122      	bne.n	800a904 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8c4:	b2db      	uxtb	r3, r3
 800a8c6:	2b03      	cmp	r3, #3
 800a8c8:	d11c      	bne.n	800a904 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a8ca:	7dfa      	ldrb	r2, [r7, #23]
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	32ae      	adds	r2, #174	; 0xae
 800a8d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8d4:	695b      	ldr	r3, [r3, #20]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d014      	beq.n	800a904 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a8da:	7dfa      	ldrb	r2, [r7, #23]
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a8e2:	7dfa      	ldrb	r2, [r7, #23]
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	32ae      	adds	r2, #174	; 0xae
 800a8e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8ec:	695b      	ldr	r3, [r3, #20]
 800a8ee:	7afa      	ldrb	r2, [r7, #11]
 800a8f0:	4611      	mov	r1, r2
 800a8f2:	68f8      	ldr	r0, [r7, #12]
 800a8f4:	4798      	blx	r3
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a8fa:	7dbb      	ldrb	r3, [r7, #22]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d001      	beq.n	800a904 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a900:	7dbb      	ldrb	r3, [r7, #22]
 800a902:	e000      	b.n	800a906 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a904:	2300      	movs	r3, #0
}
 800a906:	4618      	mov	r0, r3
 800a908:	3718      	adds	r7, #24
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}

0800a90e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a90e:	b580      	push	{r7, lr}
 800a910:	b084      	sub	sp, #16
 800a912:	af00      	add	r7, sp, #0
 800a914:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a916:	2300      	movs	r3, #0
 800a918:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2201      	movs	r2, #1
 800a91e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2200      	movs	r2, #0
 800a926:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2200      	movs	r2, #0
 800a92e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2200      	movs	r2, #0
 800a934:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2200      	movs	r2, #0
 800a93c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a946:	2b00      	cmp	r3, #0
 800a948:	d014      	beq.n	800a974 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a950:	685b      	ldr	r3, [r3, #4]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d00e      	beq.n	800a974 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a95c:	685b      	ldr	r3, [r3, #4]
 800a95e:	687a      	ldr	r2, [r7, #4]
 800a960:	6852      	ldr	r2, [r2, #4]
 800a962:	b2d2      	uxtb	r2, r2
 800a964:	4611      	mov	r1, r2
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	4798      	blx	r3
 800a96a:	4603      	mov	r3, r0
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d001      	beq.n	800a974 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a970:	2303      	movs	r3, #3
 800a972:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a974:	2340      	movs	r3, #64	; 0x40
 800a976:	2200      	movs	r2, #0
 800a978:	2100      	movs	r1, #0
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f001 fc55 	bl	800c22a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2201      	movs	r2, #1
 800a984:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2240      	movs	r2, #64	; 0x40
 800a98c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a990:	2340      	movs	r3, #64	; 0x40
 800a992:	2200      	movs	r2, #0
 800a994:	2180      	movs	r1, #128	; 0x80
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f001 fc47 	bl	800c22a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2201      	movs	r2, #1
 800a9a0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2240      	movs	r2, #64	; 0x40
 800a9a6:	621a      	str	r2, [r3, #32]

  return ret;
 800a9a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	3710      	adds	r7, #16
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}

0800a9b2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a9b2:	b480      	push	{r7}
 800a9b4:	b083      	sub	sp, #12
 800a9b6:	af00      	add	r7, sp, #0
 800a9b8:	6078      	str	r0, [r7, #4]
 800a9ba:	460b      	mov	r3, r1
 800a9bc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	78fa      	ldrb	r2, [r7, #3]
 800a9c2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a9c4:	2300      	movs	r3, #0
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	370c      	adds	r7, #12
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d0:	4770      	bx	lr

0800a9d2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a9d2:	b480      	push	{r7}
 800a9d4:	b083      	sub	sp, #12
 800a9d6:	af00      	add	r7, sp, #0
 800a9d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9e0:	b2db      	uxtb	r3, r3
 800a9e2:	2b04      	cmp	r3, #4
 800a9e4:	d006      	beq.n	800a9f4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9ec:	b2da      	uxtb	r2, r3
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2204      	movs	r2, #4
 800a9f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a9fc:	2300      	movs	r3, #0
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	370c      	adds	r7, #12
 800aa02:	46bd      	mov	sp, r7
 800aa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa08:	4770      	bx	lr

0800aa0a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800aa0a:	b480      	push	{r7}
 800aa0c:	b083      	sub	sp, #12
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa18:	b2db      	uxtb	r3, r3
 800aa1a:	2b04      	cmp	r3, #4
 800aa1c:	d106      	bne.n	800aa2c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800aa24:	b2da      	uxtb	r2, r3
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800aa2c:	2300      	movs	r3, #0
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	370c      	adds	r7, #12
 800aa32:	46bd      	mov	sp, r7
 800aa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa38:	4770      	bx	lr

0800aa3a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800aa3a:	b580      	push	{r7, lr}
 800aa3c:	b082      	sub	sp, #8
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa48:	b2db      	uxtb	r3, r3
 800aa4a:	2b03      	cmp	r3, #3
 800aa4c:	d110      	bne.n	800aa70 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d00b      	beq.n	800aa70 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa5e:	69db      	ldr	r3, [r3, #28]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d005      	beq.n	800aa70 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa6a:	69db      	ldr	r3, [r3, #28]
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800aa70:	2300      	movs	r3, #0
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	3708      	adds	r7, #8
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}

0800aa7a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800aa7a:	b580      	push	{r7, lr}
 800aa7c:	b082      	sub	sp, #8
 800aa7e:	af00      	add	r7, sp, #0
 800aa80:	6078      	str	r0, [r7, #4]
 800aa82:	460b      	mov	r3, r1
 800aa84:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	32ae      	adds	r2, #174	; 0xae
 800aa90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d101      	bne.n	800aa9c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800aa98:	2303      	movs	r3, #3
 800aa9a:	e01c      	b.n	800aad6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aaa2:	b2db      	uxtb	r3, r3
 800aaa4:	2b03      	cmp	r3, #3
 800aaa6:	d115      	bne.n	800aad4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	32ae      	adds	r2, #174	; 0xae
 800aab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aab6:	6a1b      	ldr	r3, [r3, #32]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d00b      	beq.n	800aad4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	32ae      	adds	r2, #174	; 0xae
 800aac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaca:	6a1b      	ldr	r3, [r3, #32]
 800aacc:	78fa      	ldrb	r2, [r7, #3]
 800aace:	4611      	mov	r1, r2
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aad4:	2300      	movs	r3, #0
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	3708      	adds	r7, #8
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}

0800aade <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800aade:	b580      	push	{r7, lr}
 800aae0:	b082      	sub	sp, #8
 800aae2:	af00      	add	r7, sp, #0
 800aae4:	6078      	str	r0, [r7, #4]
 800aae6:	460b      	mov	r3, r1
 800aae8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	32ae      	adds	r2, #174	; 0xae
 800aaf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d101      	bne.n	800ab00 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800aafc:	2303      	movs	r3, #3
 800aafe:	e01c      	b.n	800ab3a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab06:	b2db      	uxtb	r3, r3
 800ab08:	2b03      	cmp	r3, #3
 800ab0a:	d115      	bne.n	800ab38 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	32ae      	adds	r2, #174	; 0xae
 800ab16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d00b      	beq.n	800ab38 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	32ae      	adds	r2, #174	; 0xae
 800ab2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab30:	78fa      	ldrb	r2, [r7, #3]
 800ab32:	4611      	mov	r1, r2
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ab38:	2300      	movs	r3, #0
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3708      	adds	r7, #8
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}

0800ab42 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ab42:	b480      	push	{r7}
 800ab44:	b083      	sub	sp, #12
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ab4a:	2300      	movs	r3, #0
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	370c      	adds	r7, #12
 800ab50:	46bd      	mov	sp, r7
 800ab52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab56:	4770      	bx	lr

0800ab58 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b084      	sub	sp, #16
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ab60:	2300      	movs	r3, #0
 800ab62:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2201      	movs	r2, #1
 800ab68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d00e      	beq.n	800ab94 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab7c:	685b      	ldr	r3, [r3, #4]
 800ab7e:	687a      	ldr	r2, [r7, #4]
 800ab80:	6852      	ldr	r2, [r2, #4]
 800ab82:	b2d2      	uxtb	r2, r2
 800ab84:	4611      	mov	r1, r2
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	4798      	blx	r3
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d001      	beq.n	800ab94 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ab90:	2303      	movs	r3, #3
 800ab92:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ab94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	3710      	adds	r7, #16
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}

0800ab9e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ab9e:	b480      	push	{r7}
 800aba0:	b083      	sub	sp, #12
 800aba2:	af00      	add	r7, sp, #0
 800aba4:	6078      	str	r0, [r7, #4]
 800aba6:	460b      	mov	r3, r1
 800aba8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800abaa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800abac:	4618      	mov	r0, r3
 800abae:	370c      	adds	r7, #12
 800abb0:	46bd      	mov	sp, r7
 800abb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb6:	4770      	bx	lr

0800abb8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800abb8:	b480      	push	{r7}
 800abba:	b083      	sub	sp, #12
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	460b      	mov	r3, r1
 800abc2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800abc4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	370c      	adds	r7, #12
 800abca:	46bd      	mov	sp, r7
 800abcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd0:	4770      	bx	lr

0800abd2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800abd2:	b580      	push	{r7, lr}
 800abd4:	b086      	sub	sp, #24
 800abd6:	af00      	add	r7, sp, #0
 800abd8:	6078      	str	r0, [r7, #4]
 800abda:	460b      	mov	r3, r1
 800abdc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800abe6:	2300      	movs	r3, #0
 800abe8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	885b      	ldrh	r3, [r3, #2]
 800abee:	b29a      	uxth	r2, r3
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	781b      	ldrb	r3, [r3, #0]
 800abf4:	b29b      	uxth	r3, r3
 800abf6:	429a      	cmp	r2, r3
 800abf8:	d920      	bls.n	800ac3c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	781b      	ldrb	r3, [r3, #0]
 800abfe:	b29b      	uxth	r3, r3
 800ac00:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ac02:	e013      	b.n	800ac2c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ac04:	f107 030a 	add.w	r3, r7, #10
 800ac08:	4619      	mov	r1, r3
 800ac0a:	6978      	ldr	r0, [r7, #20]
 800ac0c:	f000 f81b 	bl	800ac46 <USBD_GetNextDesc>
 800ac10:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	785b      	ldrb	r3, [r3, #1]
 800ac16:	2b05      	cmp	r3, #5
 800ac18:	d108      	bne.n	800ac2c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ac1e:	693b      	ldr	r3, [r7, #16]
 800ac20:	789b      	ldrb	r3, [r3, #2]
 800ac22:	78fa      	ldrb	r2, [r7, #3]
 800ac24:	429a      	cmp	r2, r3
 800ac26:	d008      	beq.n	800ac3a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	885b      	ldrh	r3, [r3, #2]
 800ac30:	b29a      	uxth	r2, r3
 800ac32:	897b      	ldrh	r3, [r7, #10]
 800ac34:	429a      	cmp	r2, r3
 800ac36:	d8e5      	bhi.n	800ac04 <USBD_GetEpDesc+0x32>
 800ac38:	e000      	b.n	800ac3c <USBD_GetEpDesc+0x6a>
          break;
 800ac3a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ac3c:	693b      	ldr	r3, [r7, #16]
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	3718      	adds	r7, #24
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}

0800ac46 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ac46:	b480      	push	{r7}
 800ac48:	b085      	sub	sp, #20
 800ac4a:	af00      	add	r7, sp, #0
 800ac4c:	6078      	str	r0, [r7, #4]
 800ac4e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	881a      	ldrh	r2, [r3, #0]
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	781b      	ldrb	r3, [r3, #0]
 800ac5c:	b29b      	uxth	r3, r3
 800ac5e:	4413      	add	r3, r2
 800ac60:	b29a      	uxth	r2, r3
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	781b      	ldrb	r3, [r3, #0]
 800ac6a:	461a      	mov	r2, r3
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	4413      	add	r3, r2
 800ac70:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ac72:	68fb      	ldr	r3, [r7, #12]
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3714      	adds	r7, #20
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr

0800ac80 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b087      	sub	sp, #28
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ac8c:	697b      	ldr	r3, [r7, #20]
 800ac8e:	781b      	ldrb	r3, [r3, #0]
 800ac90:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	3301      	adds	r3, #1
 800ac96:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	781b      	ldrb	r3, [r3, #0]
 800ac9c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ac9e:	8a3b      	ldrh	r3, [r7, #16]
 800aca0:	021b      	lsls	r3, r3, #8
 800aca2:	b21a      	sxth	r2, r3
 800aca4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800aca8:	4313      	orrs	r3, r2
 800acaa:	b21b      	sxth	r3, r3
 800acac:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800acae:	89fb      	ldrh	r3, [r7, #14]
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	371c      	adds	r7, #28
 800acb4:	46bd      	mov	sp, r7
 800acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acba:	4770      	bx	lr

0800acbc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b084      	sub	sp, #16
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800acc6:	2300      	movs	r3, #0
 800acc8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	781b      	ldrb	r3, [r3, #0]
 800acce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800acd2:	2b40      	cmp	r3, #64	; 0x40
 800acd4:	d005      	beq.n	800ace2 <USBD_StdDevReq+0x26>
 800acd6:	2b40      	cmp	r3, #64	; 0x40
 800acd8:	d857      	bhi.n	800ad8a <USBD_StdDevReq+0xce>
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d00f      	beq.n	800acfe <USBD_StdDevReq+0x42>
 800acde:	2b20      	cmp	r3, #32
 800ace0:	d153      	bne.n	800ad8a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	32ae      	adds	r2, #174	; 0xae
 800acec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acf0:	689b      	ldr	r3, [r3, #8]
 800acf2:	6839      	ldr	r1, [r7, #0]
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	4798      	blx	r3
 800acf8:	4603      	mov	r3, r0
 800acfa:	73fb      	strb	r3, [r7, #15]
      break;
 800acfc:	e04a      	b.n	800ad94 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	785b      	ldrb	r3, [r3, #1]
 800ad02:	2b09      	cmp	r3, #9
 800ad04:	d83b      	bhi.n	800ad7e <USBD_StdDevReq+0xc2>
 800ad06:	a201      	add	r2, pc, #4	; (adr r2, 800ad0c <USBD_StdDevReq+0x50>)
 800ad08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad0c:	0800ad61 	.word	0x0800ad61
 800ad10:	0800ad75 	.word	0x0800ad75
 800ad14:	0800ad7f 	.word	0x0800ad7f
 800ad18:	0800ad6b 	.word	0x0800ad6b
 800ad1c:	0800ad7f 	.word	0x0800ad7f
 800ad20:	0800ad3f 	.word	0x0800ad3f
 800ad24:	0800ad35 	.word	0x0800ad35
 800ad28:	0800ad7f 	.word	0x0800ad7f
 800ad2c:	0800ad57 	.word	0x0800ad57
 800ad30:	0800ad49 	.word	0x0800ad49
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ad34:	6839      	ldr	r1, [r7, #0]
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f000 fa3c 	bl	800b1b4 <USBD_GetDescriptor>
          break;
 800ad3c:	e024      	b.n	800ad88 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ad3e:	6839      	ldr	r1, [r7, #0]
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f000 fbcb 	bl	800b4dc <USBD_SetAddress>
          break;
 800ad46:	e01f      	b.n	800ad88 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ad48:	6839      	ldr	r1, [r7, #0]
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f000 fc0a 	bl	800b564 <USBD_SetConfig>
 800ad50:	4603      	mov	r3, r0
 800ad52:	73fb      	strb	r3, [r7, #15]
          break;
 800ad54:	e018      	b.n	800ad88 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ad56:	6839      	ldr	r1, [r7, #0]
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f000 fcad 	bl	800b6b8 <USBD_GetConfig>
          break;
 800ad5e:	e013      	b.n	800ad88 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ad60:	6839      	ldr	r1, [r7, #0]
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f000 fcde 	bl	800b724 <USBD_GetStatus>
          break;
 800ad68:	e00e      	b.n	800ad88 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ad6a:	6839      	ldr	r1, [r7, #0]
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f000 fd0d 	bl	800b78c <USBD_SetFeature>
          break;
 800ad72:	e009      	b.n	800ad88 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ad74:	6839      	ldr	r1, [r7, #0]
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f000 fd31 	bl	800b7de <USBD_ClrFeature>
          break;
 800ad7c:	e004      	b.n	800ad88 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ad7e:	6839      	ldr	r1, [r7, #0]
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f000 fd88 	bl	800b896 <USBD_CtlError>
          break;
 800ad86:	bf00      	nop
      }
      break;
 800ad88:	e004      	b.n	800ad94 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ad8a:	6839      	ldr	r1, [r7, #0]
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f000 fd82 	bl	800b896 <USBD_CtlError>
      break;
 800ad92:	bf00      	nop
  }

  return ret;
 800ad94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	3710      	adds	r7, #16
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}
 800ad9e:	bf00      	nop

0800ada0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b084      	sub	sp, #16
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
 800ada8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800adaa:	2300      	movs	r3, #0
 800adac:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	781b      	ldrb	r3, [r3, #0]
 800adb2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800adb6:	2b40      	cmp	r3, #64	; 0x40
 800adb8:	d005      	beq.n	800adc6 <USBD_StdItfReq+0x26>
 800adba:	2b40      	cmp	r3, #64	; 0x40
 800adbc:	d852      	bhi.n	800ae64 <USBD_StdItfReq+0xc4>
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d001      	beq.n	800adc6 <USBD_StdItfReq+0x26>
 800adc2:	2b20      	cmp	r3, #32
 800adc4:	d14e      	bne.n	800ae64 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adcc:	b2db      	uxtb	r3, r3
 800adce:	3b01      	subs	r3, #1
 800add0:	2b02      	cmp	r3, #2
 800add2:	d840      	bhi.n	800ae56 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	889b      	ldrh	r3, [r3, #4]
 800add8:	b2db      	uxtb	r3, r3
 800adda:	2b01      	cmp	r3, #1
 800addc:	d836      	bhi.n	800ae4c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	889b      	ldrh	r3, [r3, #4]
 800ade2:	b2db      	uxtb	r3, r3
 800ade4:	4619      	mov	r1, r3
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f7ff fed9 	bl	800ab9e <USBD_CoreFindIF>
 800adec:	4603      	mov	r3, r0
 800adee:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800adf0:	7bbb      	ldrb	r3, [r7, #14]
 800adf2:	2bff      	cmp	r3, #255	; 0xff
 800adf4:	d01d      	beq.n	800ae32 <USBD_StdItfReq+0x92>
 800adf6:	7bbb      	ldrb	r3, [r7, #14]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d11a      	bne.n	800ae32 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800adfc:	7bba      	ldrb	r2, [r7, #14]
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	32ae      	adds	r2, #174	; 0xae
 800ae02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae06:	689b      	ldr	r3, [r3, #8]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d00f      	beq.n	800ae2c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ae0c:	7bba      	ldrb	r2, [r7, #14]
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ae14:	7bba      	ldrb	r2, [r7, #14]
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	32ae      	adds	r2, #174	; 0xae
 800ae1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae1e:	689b      	ldr	r3, [r3, #8]
 800ae20:	6839      	ldr	r1, [r7, #0]
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	4798      	blx	r3
 800ae26:	4603      	mov	r3, r0
 800ae28:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ae2a:	e004      	b.n	800ae36 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ae2c:	2303      	movs	r3, #3
 800ae2e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ae30:	e001      	b.n	800ae36 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ae32:	2303      	movs	r3, #3
 800ae34:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	88db      	ldrh	r3, [r3, #6]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d110      	bne.n	800ae60 <USBD_StdItfReq+0xc0>
 800ae3e:	7bfb      	ldrb	r3, [r7, #15]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d10d      	bne.n	800ae60 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f000 fdf1 	bl	800ba2c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ae4a:	e009      	b.n	800ae60 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ae4c:	6839      	ldr	r1, [r7, #0]
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f000 fd21 	bl	800b896 <USBD_CtlError>
          break;
 800ae54:	e004      	b.n	800ae60 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ae56:	6839      	ldr	r1, [r7, #0]
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f000 fd1c 	bl	800b896 <USBD_CtlError>
          break;
 800ae5e:	e000      	b.n	800ae62 <USBD_StdItfReq+0xc2>
          break;
 800ae60:	bf00      	nop
      }
      break;
 800ae62:	e004      	b.n	800ae6e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ae64:	6839      	ldr	r1, [r7, #0]
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f000 fd15 	bl	800b896 <USBD_CtlError>
      break;
 800ae6c:	bf00      	nop
  }

  return ret;
 800ae6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae70:	4618      	mov	r0, r3
 800ae72:	3710      	adds	r7, #16
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}

0800ae78 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b084      	sub	sp, #16
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
 800ae80:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ae82:	2300      	movs	r3, #0
 800ae84:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	889b      	ldrh	r3, [r3, #4]
 800ae8a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	781b      	ldrb	r3, [r3, #0]
 800ae90:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae94:	2b40      	cmp	r3, #64	; 0x40
 800ae96:	d007      	beq.n	800aea8 <USBD_StdEPReq+0x30>
 800ae98:	2b40      	cmp	r3, #64	; 0x40
 800ae9a:	f200 817f 	bhi.w	800b19c <USBD_StdEPReq+0x324>
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d02a      	beq.n	800aef8 <USBD_StdEPReq+0x80>
 800aea2:	2b20      	cmp	r3, #32
 800aea4:	f040 817a 	bne.w	800b19c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800aea8:	7bbb      	ldrb	r3, [r7, #14]
 800aeaa:	4619      	mov	r1, r3
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f7ff fe83 	bl	800abb8 <USBD_CoreFindEP>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aeb6:	7b7b      	ldrb	r3, [r7, #13]
 800aeb8:	2bff      	cmp	r3, #255	; 0xff
 800aeba:	f000 8174 	beq.w	800b1a6 <USBD_StdEPReq+0x32e>
 800aebe:	7b7b      	ldrb	r3, [r7, #13]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	f040 8170 	bne.w	800b1a6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800aec6:	7b7a      	ldrb	r2, [r7, #13]
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800aece:	7b7a      	ldrb	r2, [r7, #13]
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	32ae      	adds	r2, #174	; 0xae
 800aed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aed8:	689b      	ldr	r3, [r3, #8]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	f000 8163 	beq.w	800b1a6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800aee0:	7b7a      	ldrb	r2, [r7, #13]
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	32ae      	adds	r2, #174	; 0xae
 800aee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeea:	689b      	ldr	r3, [r3, #8]
 800aeec:	6839      	ldr	r1, [r7, #0]
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	4798      	blx	r3
 800aef2:	4603      	mov	r3, r0
 800aef4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800aef6:	e156      	b.n	800b1a6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	785b      	ldrb	r3, [r3, #1]
 800aefc:	2b03      	cmp	r3, #3
 800aefe:	d008      	beq.n	800af12 <USBD_StdEPReq+0x9a>
 800af00:	2b03      	cmp	r3, #3
 800af02:	f300 8145 	bgt.w	800b190 <USBD_StdEPReq+0x318>
 800af06:	2b00      	cmp	r3, #0
 800af08:	f000 809b 	beq.w	800b042 <USBD_StdEPReq+0x1ca>
 800af0c:	2b01      	cmp	r3, #1
 800af0e:	d03c      	beq.n	800af8a <USBD_StdEPReq+0x112>
 800af10:	e13e      	b.n	800b190 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af18:	b2db      	uxtb	r3, r3
 800af1a:	2b02      	cmp	r3, #2
 800af1c:	d002      	beq.n	800af24 <USBD_StdEPReq+0xac>
 800af1e:	2b03      	cmp	r3, #3
 800af20:	d016      	beq.n	800af50 <USBD_StdEPReq+0xd8>
 800af22:	e02c      	b.n	800af7e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af24:	7bbb      	ldrb	r3, [r7, #14]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d00d      	beq.n	800af46 <USBD_StdEPReq+0xce>
 800af2a:	7bbb      	ldrb	r3, [r7, #14]
 800af2c:	2b80      	cmp	r3, #128	; 0x80
 800af2e:	d00a      	beq.n	800af46 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800af30:	7bbb      	ldrb	r3, [r7, #14]
 800af32:	4619      	mov	r1, r3
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	f001 f9bd 	bl	800c2b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800af3a:	2180      	movs	r1, #128	; 0x80
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f001 f9b9 	bl	800c2b4 <USBD_LL_StallEP>
 800af42:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800af44:	e020      	b.n	800af88 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800af46:	6839      	ldr	r1, [r7, #0]
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f000 fca4 	bl	800b896 <USBD_CtlError>
              break;
 800af4e:	e01b      	b.n	800af88 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	885b      	ldrh	r3, [r3, #2]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d10e      	bne.n	800af76 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800af58:	7bbb      	ldrb	r3, [r7, #14]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d00b      	beq.n	800af76 <USBD_StdEPReq+0xfe>
 800af5e:	7bbb      	ldrb	r3, [r7, #14]
 800af60:	2b80      	cmp	r3, #128	; 0x80
 800af62:	d008      	beq.n	800af76 <USBD_StdEPReq+0xfe>
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	88db      	ldrh	r3, [r3, #6]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d104      	bne.n	800af76 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800af6c:	7bbb      	ldrb	r3, [r7, #14]
 800af6e:	4619      	mov	r1, r3
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f001 f99f 	bl	800c2b4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f000 fd58 	bl	800ba2c <USBD_CtlSendStatus>

              break;
 800af7c:	e004      	b.n	800af88 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800af7e:	6839      	ldr	r1, [r7, #0]
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f000 fc88 	bl	800b896 <USBD_CtlError>
              break;
 800af86:	bf00      	nop
          }
          break;
 800af88:	e107      	b.n	800b19a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af90:	b2db      	uxtb	r3, r3
 800af92:	2b02      	cmp	r3, #2
 800af94:	d002      	beq.n	800af9c <USBD_StdEPReq+0x124>
 800af96:	2b03      	cmp	r3, #3
 800af98:	d016      	beq.n	800afc8 <USBD_StdEPReq+0x150>
 800af9a:	e04b      	b.n	800b034 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af9c:	7bbb      	ldrb	r3, [r7, #14]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d00d      	beq.n	800afbe <USBD_StdEPReq+0x146>
 800afa2:	7bbb      	ldrb	r3, [r7, #14]
 800afa4:	2b80      	cmp	r3, #128	; 0x80
 800afa6:	d00a      	beq.n	800afbe <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800afa8:	7bbb      	ldrb	r3, [r7, #14]
 800afaa:	4619      	mov	r1, r3
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f001 f981 	bl	800c2b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800afb2:	2180      	movs	r1, #128	; 0x80
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f001 f97d 	bl	800c2b4 <USBD_LL_StallEP>
 800afba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800afbc:	e040      	b.n	800b040 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800afbe:	6839      	ldr	r1, [r7, #0]
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f000 fc68 	bl	800b896 <USBD_CtlError>
              break;
 800afc6:	e03b      	b.n	800b040 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	885b      	ldrh	r3, [r3, #2]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d136      	bne.n	800b03e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800afd0:	7bbb      	ldrb	r3, [r7, #14]
 800afd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d004      	beq.n	800afe4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800afda:	7bbb      	ldrb	r3, [r7, #14]
 800afdc:	4619      	mov	r1, r3
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f001 f987 	bl	800c2f2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f000 fd21 	bl	800ba2c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800afea:	7bbb      	ldrb	r3, [r7, #14]
 800afec:	4619      	mov	r1, r3
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f7ff fde2 	bl	800abb8 <USBD_CoreFindEP>
 800aff4:	4603      	mov	r3, r0
 800aff6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aff8:	7b7b      	ldrb	r3, [r7, #13]
 800affa:	2bff      	cmp	r3, #255	; 0xff
 800affc:	d01f      	beq.n	800b03e <USBD_StdEPReq+0x1c6>
 800affe:	7b7b      	ldrb	r3, [r7, #13]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d11c      	bne.n	800b03e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b004:	7b7a      	ldrb	r2, [r7, #13]
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b00c:	7b7a      	ldrb	r2, [r7, #13]
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	32ae      	adds	r2, #174	; 0xae
 800b012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b016:	689b      	ldr	r3, [r3, #8]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d010      	beq.n	800b03e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b01c:	7b7a      	ldrb	r2, [r7, #13]
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	32ae      	adds	r2, #174	; 0xae
 800b022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b026:	689b      	ldr	r3, [r3, #8]
 800b028:	6839      	ldr	r1, [r7, #0]
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	4798      	blx	r3
 800b02e:	4603      	mov	r3, r0
 800b030:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b032:	e004      	b.n	800b03e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b034:	6839      	ldr	r1, [r7, #0]
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 fc2d 	bl	800b896 <USBD_CtlError>
              break;
 800b03c:	e000      	b.n	800b040 <USBD_StdEPReq+0x1c8>
              break;
 800b03e:	bf00      	nop
          }
          break;
 800b040:	e0ab      	b.n	800b19a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b048:	b2db      	uxtb	r3, r3
 800b04a:	2b02      	cmp	r3, #2
 800b04c:	d002      	beq.n	800b054 <USBD_StdEPReq+0x1dc>
 800b04e:	2b03      	cmp	r3, #3
 800b050:	d032      	beq.n	800b0b8 <USBD_StdEPReq+0x240>
 800b052:	e097      	b.n	800b184 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b054:	7bbb      	ldrb	r3, [r7, #14]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d007      	beq.n	800b06a <USBD_StdEPReq+0x1f2>
 800b05a:	7bbb      	ldrb	r3, [r7, #14]
 800b05c:	2b80      	cmp	r3, #128	; 0x80
 800b05e:	d004      	beq.n	800b06a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b060:	6839      	ldr	r1, [r7, #0]
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f000 fc17 	bl	800b896 <USBD_CtlError>
                break;
 800b068:	e091      	b.n	800b18e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b06a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	da0b      	bge.n	800b08a <USBD_StdEPReq+0x212>
 800b072:	7bbb      	ldrb	r3, [r7, #14]
 800b074:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b078:	4613      	mov	r3, r2
 800b07a:	009b      	lsls	r3, r3, #2
 800b07c:	4413      	add	r3, r2
 800b07e:	009b      	lsls	r3, r3, #2
 800b080:	3310      	adds	r3, #16
 800b082:	687a      	ldr	r2, [r7, #4]
 800b084:	4413      	add	r3, r2
 800b086:	3304      	adds	r3, #4
 800b088:	e00b      	b.n	800b0a2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b08a:	7bbb      	ldrb	r3, [r7, #14]
 800b08c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b090:	4613      	mov	r3, r2
 800b092:	009b      	lsls	r3, r3, #2
 800b094:	4413      	add	r3, r2
 800b096:	009b      	lsls	r3, r3, #2
 800b098:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b09c:	687a      	ldr	r2, [r7, #4]
 800b09e:	4413      	add	r3, r2
 800b0a0:	3304      	adds	r3, #4
 800b0a2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	2202      	movs	r2, #2
 800b0ae:	4619      	mov	r1, r3
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f000 fc61 	bl	800b978 <USBD_CtlSendData>
              break;
 800b0b6:	e06a      	b.n	800b18e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b0b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	da11      	bge.n	800b0e4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b0c0:	7bbb      	ldrb	r3, [r7, #14]
 800b0c2:	f003 020f 	and.w	r2, r3, #15
 800b0c6:	6879      	ldr	r1, [r7, #4]
 800b0c8:	4613      	mov	r3, r2
 800b0ca:	009b      	lsls	r3, r3, #2
 800b0cc:	4413      	add	r3, r2
 800b0ce:	009b      	lsls	r3, r3, #2
 800b0d0:	440b      	add	r3, r1
 800b0d2:	3324      	adds	r3, #36	; 0x24
 800b0d4:	881b      	ldrh	r3, [r3, #0]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d117      	bne.n	800b10a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b0da:	6839      	ldr	r1, [r7, #0]
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f000 fbda 	bl	800b896 <USBD_CtlError>
                  break;
 800b0e2:	e054      	b.n	800b18e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b0e4:	7bbb      	ldrb	r3, [r7, #14]
 800b0e6:	f003 020f 	and.w	r2, r3, #15
 800b0ea:	6879      	ldr	r1, [r7, #4]
 800b0ec:	4613      	mov	r3, r2
 800b0ee:	009b      	lsls	r3, r3, #2
 800b0f0:	4413      	add	r3, r2
 800b0f2:	009b      	lsls	r3, r3, #2
 800b0f4:	440b      	add	r3, r1
 800b0f6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b0fa:	881b      	ldrh	r3, [r3, #0]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d104      	bne.n	800b10a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b100:	6839      	ldr	r1, [r7, #0]
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f000 fbc7 	bl	800b896 <USBD_CtlError>
                  break;
 800b108:	e041      	b.n	800b18e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b10a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	da0b      	bge.n	800b12a <USBD_StdEPReq+0x2b2>
 800b112:	7bbb      	ldrb	r3, [r7, #14]
 800b114:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b118:	4613      	mov	r3, r2
 800b11a:	009b      	lsls	r3, r3, #2
 800b11c:	4413      	add	r3, r2
 800b11e:	009b      	lsls	r3, r3, #2
 800b120:	3310      	adds	r3, #16
 800b122:	687a      	ldr	r2, [r7, #4]
 800b124:	4413      	add	r3, r2
 800b126:	3304      	adds	r3, #4
 800b128:	e00b      	b.n	800b142 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b12a:	7bbb      	ldrb	r3, [r7, #14]
 800b12c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b130:	4613      	mov	r3, r2
 800b132:	009b      	lsls	r3, r3, #2
 800b134:	4413      	add	r3, r2
 800b136:	009b      	lsls	r3, r3, #2
 800b138:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b13c:	687a      	ldr	r2, [r7, #4]
 800b13e:	4413      	add	r3, r2
 800b140:	3304      	adds	r3, #4
 800b142:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b144:	7bbb      	ldrb	r3, [r7, #14]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d002      	beq.n	800b150 <USBD_StdEPReq+0x2d8>
 800b14a:	7bbb      	ldrb	r3, [r7, #14]
 800b14c:	2b80      	cmp	r3, #128	; 0x80
 800b14e:	d103      	bne.n	800b158 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	2200      	movs	r2, #0
 800b154:	601a      	str	r2, [r3, #0]
 800b156:	e00e      	b.n	800b176 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b158:	7bbb      	ldrb	r3, [r7, #14]
 800b15a:	4619      	mov	r1, r3
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f001 f8e7 	bl	800c330 <USBD_LL_IsStallEP>
 800b162:	4603      	mov	r3, r0
 800b164:	2b00      	cmp	r3, #0
 800b166:	d003      	beq.n	800b170 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	2201      	movs	r2, #1
 800b16c:	601a      	str	r2, [r3, #0]
 800b16e:	e002      	b.n	800b176 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	2200      	movs	r2, #0
 800b174:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	2202      	movs	r2, #2
 800b17a:	4619      	mov	r1, r3
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f000 fbfb 	bl	800b978 <USBD_CtlSendData>
              break;
 800b182:	e004      	b.n	800b18e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b184:	6839      	ldr	r1, [r7, #0]
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f000 fb85 	bl	800b896 <USBD_CtlError>
              break;
 800b18c:	bf00      	nop
          }
          break;
 800b18e:	e004      	b.n	800b19a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b190:	6839      	ldr	r1, [r7, #0]
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f000 fb7f 	bl	800b896 <USBD_CtlError>
          break;
 800b198:	bf00      	nop
      }
      break;
 800b19a:	e005      	b.n	800b1a8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b19c:	6839      	ldr	r1, [r7, #0]
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f000 fb79 	bl	800b896 <USBD_CtlError>
      break;
 800b1a4:	e000      	b.n	800b1a8 <USBD_StdEPReq+0x330>
      break;
 800b1a6:	bf00      	nop
  }

  return ret;
 800b1a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	3710      	adds	r7, #16
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd80      	pop	{r7, pc}
	...

0800b1b4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b084      	sub	sp, #16
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
 800b1bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	885b      	ldrh	r3, [r3, #2]
 800b1ce:	0a1b      	lsrs	r3, r3, #8
 800b1d0:	b29b      	uxth	r3, r3
 800b1d2:	3b01      	subs	r3, #1
 800b1d4:	2b0e      	cmp	r3, #14
 800b1d6:	f200 8152 	bhi.w	800b47e <USBD_GetDescriptor+0x2ca>
 800b1da:	a201      	add	r2, pc, #4	; (adr r2, 800b1e0 <USBD_GetDescriptor+0x2c>)
 800b1dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1e0:	0800b251 	.word	0x0800b251
 800b1e4:	0800b269 	.word	0x0800b269
 800b1e8:	0800b2a9 	.word	0x0800b2a9
 800b1ec:	0800b47f 	.word	0x0800b47f
 800b1f0:	0800b47f 	.word	0x0800b47f
 800b1f4:	0800b41f 	.word	0x0800b41f
 800b1f8:	0800b44b 	.word	0x0800b44b
 800b1fc:	0800b47f 	.word	0x0800b47f
 800b200:	0800b47f 	.word	0x0800b47f
 800b204:	0800b47f 	.word	0x0800b47f
 800b208:	0800b47f 	.word	0x0800b47f
 800b20c:	0800b47f 	.word	0x0800b47f
 800b210:	0800b47f 	.word	0x0800b47f
 800b214:	0800b47f 	.word	0x0800b47f
 800b218:	0800b21d 	.word	0x0800b21d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b222:	69db      	ldr	r3, [r3, #28]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d00b      	beq.n	800b240 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b22e:	69db      	ldr	r3, [r3, #28]
 800b230:	687a      	ldr	r2, [r7, #4]
 800b232:	7c12      	ldrb	r2, [r2, #16]
 800b234:	f107 0108 	add.w	r1, r7, #8
 800b238:	4610      	mov	r0, r2
 800b23a:	4798      	blx	r3
 800b23c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b23e:	e126      	b.n	800b48e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b240:	6839      	ldr	r1, [r7, #0]
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f000 fb27 	bl	800b896 <USBD_CtlError>
        err++;
 800b248:	7afb      	ldrb	r3, [r7, #11]
 800b24a:	3301      	adds	r3, #1
 800b24c:	72fb      	strb	r3, [r7, #11]
      break;
 800b24e:	e11e      	b.n	800b48e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	687a      	ldr	r2, [r7, #4]
 800b25a:	7c12      	ldrb	r2, [r2, #16]
 800b25c:	f107 0108 	add.w	r1, r7, #8
 800b260:	4610      	mov	r0, r2
 800b262:	4798      	blx	r3
 800b264:	60f8      	str	r0, [r7, #12]
      break;
 800b266:	e112      	b.n	800b48e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	7c1b      	ldrb	r3, [r3, #16]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d10d      	bne.n	800b28c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b278:	f107 0208 	add.w	r2, r7, #8
 800b27c:	4610      	mov	r0, r2
 800b27e:	4798      	blx	r3
 800b280:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	3301      	adds	r3, #1
 800b286:	2202      	movs	r2, #2
 800b288:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b28a:	e100      	b.n	800b48e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b294:	f107 0208 	add.w	r2, r7, #8
 800b298:	4610      	mov	r0, r2
 800b29a:	4798      	blx	r3
 800b29c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	3301      	adds	r3, #1
 800b2a2:	2202      	movs	r2, #2
 800b2a4:	701a      	strb	r2, [r3, #0]
      break;
 800b2a6:	e0f2      	b.n	800b48e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	885b      	ldrh	r3, [r3, #2]
 800b2ac:	b2db      	uxtb	r3, r3
 800b2ae:	2b05      	cmp	r3, #5
 800b2b0:	f200 80ac 	bhi.w	800b40c <USBD_GetDescriptor+0x258>
 800b2b4:	a201      	add	r2, pc, #4	; (adr r2, 800b2bc <USBD_GetDescriptor+0x108>)
 800b2b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ba:	bf00      	nop
 800b2bc:	0800b2d5 	.word	0x0800b2d5
 800b2c0:	0800b309 	.word	0x0800b309
 800b2c4:	0800b33d 	.word	0x0800b33d
 800b2c8:	0800b371 	.word	0x0800b371
 800b2cc:	0800b3a5 	.word	0x0800b3a5
 800b2d0:	0800b3d9 	.word	0x0800b3d9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2da:	685b      	ldr	r3, [r3, #4]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d00b      	beq.n	800b2f8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2e6:	685b      	ldr	r3, [r3, #4]
 800b2e8:	687a      	ldr	r2, [r7, #4]
 800b2ea:	7c12      	ldrb	r2, [r2, #16]
 800b2ec:	f107 0108 	add.w	r1, r7, #8
 800b2f0:	4610      	mov	r0, r2
 800b2f2:	4798      	blx	r3
 800b2f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2f6:	e091      	b.n	800b41c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b2f8:	6839      	ldr	r1, [r7, #0]
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f000 facb 	bl	800b896 <USBD_CtlError>
            err++;
 800b300:	7afb      	ldrb	r3, [r7, #11]
 800b302:	3301      	adds	r3, #1
 800b304:	72fb      	strb	r3, [r7, #11]
          break;
 800b306:	e089      	b.n	800b41c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b30e:	689b      	ldr	r3, [r3, #8]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d00b      	beq.n	800b32c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b31a:	689b      	ldr	r3, [r3, #8]
 800b31c:	687a      	ldr	r2, [r7, #4]
 800b31e:	7c12      	ldrb	r2, [r2, #16]
 800b320:	f107 0108 	add.w	r1, r7, #8
 800b324:	4610      	mov	r0, r2
 800b326:	4798      	blx	r3
 800b328:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b32a:	e077      	b.n	800b41c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b32c:	6839      	ldr	r1, [r7, #0]
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f000 fab1 	bl	800b896 <USBD_CtlError>
            err++;
 800b334:	7afb      	ldrb	r3, [r7, #11]
 800b336:	3301      	adds	r3, #1
 800b338:	72fb      	strb	r3, [r7, #11]
          break;
 800b33a:	e06f      	b.n	800b41c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b342:	68db      	ldr	r3, [r3, #12]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d00b      	beq.n	800b360 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b34e:	68db      	ldr	r3, [r3, #12]
 800b350:	687a      	ldr	r2, [r7, #4]
 800b352:	7c12      	ldrb	r2, [r2, #16]
 800b354:	f107 0108 	add.w	r1, r7, #8
 800b358:	4610      	mov	r0, r2
 800b35a:	4798      	blx	r3
 800b35c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b35e:	e05d      	b.n	800b41c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b360:	6839      	ldr	r1, [r7, #0]
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f000 fa97 	bl	800b896 <USBD_CtlError>
            err++;
 800b368:	7afb      	ldrb	r3, [r7, #11]
 800b36a:	3301      	adds	r3, #1
 800b36c:	72fb      	strb	r3, [r7, #11]
          break;
 800b36e:	e055      	b.n	800b41c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b376:	691b      	ldr	r3, [r3, #16]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d00b      	beq.n	800b394 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b382:	691b      	ldr	r3, [r3, #16]
 800b384:	687a      	ldr	r2, [r7, #4]
 800b386:	7c12      	ldrb	r2, [r2, #16]
 800b388:	f107 0108 	add.w	r1, r7, #8
 800b38c:	4610      	mov	r0, r2
 800b38e:	4798      	blx	r3
 800b390:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b392:	e043      	b.n	800b41c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b394:	6839      	ldr	r1, [r7, #0]
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f000 fa7d 	bl	800b896 <USBD_CtlError>
            err++;
 800b39c:	7afb      	ldrb	r3, [r7, #11]
 800b39e:	3301      	adds	r3, #1
 800b3a0:	72fb      	strb	r3, [r7, #11]
          break;
 800b3a2:	e03b      	b.n	800b41c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3aa:	695b      	ldr	r3, [r3, #20]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d00b      	beq.n	800b3c8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3b6:	695b      	ldr	r3, [r3, #20]
 800b3b8:	687a      	ldr	r2, [r7, #4]
 800b3ba:	7c12      	ldrb	r2, [r2, #16]
 800b3bc:	f107 0108 	add.w	r1, r7, #8
 800b3c0:	4610      	mov	r0, r2
 800b3c2:	4798      	blx	r3
 800b3c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3c6:	e029      	b.n	800b41c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b3c8:	6839      	ldr	r1, [r7, #0]
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f000 fa63 	bl	800b896 <USBD_CtlError>
            err++;
 800b3d0:	7afb      	ldrb	r3, [r7, #11]
 800b3d2:	3301      	adds	r3, #1
 800b3d4:	72fb      	strb	r3, [r7, #11]
          break;
 800b3d6:	e021      	b.n	800b41c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3de:	699b      	ldr	r3, [r3, #24]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d00b      	beq.n	800b3fc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3ea:	699b      	ldr	r3, [r3, #24]
 800b3ec:	687a      	ldr	r2, [r7, #4]
 800b3ee:	7c12      	ldrb	r2, [r2, #16]
 800b3f0:	f107 0108 	add.w	r1, r7, #8
 800b3f4:	4610      	mov	r0, r2
 800b3f6:	4798      	blx	r3
 800b3f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3fa:	e00f      	b.n	800b41c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b3fc:	6839      	ldr	r1, [r7, #0]
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f000 fa49 	bl	800b896 <USBD_CtlError>
            err++;
 800b404:	7afb      	ldrb	r3, [r7, #11]
 800b406:	3301      	adds	r3, #1
 800b408:	72fb      	strb	r3, [r7, #11]
          break;
 800b40a:	e007      	b.n	800b41c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b40c:	6839      	ldr	r1, [r7, #0]
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f000 fa41 	bl	800b896 <USBD_CtlError>
          err++;
 800b414:	7afb      	ldrb	r3, [r7, #11]
 800b416:	3301      	adds	r3, #1
 800b418:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b41a:	bf00      	nop
      }
      break;
 800b41c:	e037      	b.n	800b48e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	7c1b      	ldrb	r3, [r3, #16]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d109      	bne.n	800b43a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b42c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b42e:	f107 0208 	add.w	r2, r7, #8
 800b432:	4610      	mov	r0, r2
 800b434:	4798      	blx	r3
 800b436:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b438:	e029      	b.n	800b48e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b43a:	6839      	ldr	r1, [r7, #0]
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	f000 fa2a 	bl	800b896 <USBD_CtlError>
        err++;
 800b442:	7afb      	ldrb	r3, [r7, #11]
 800b444:	3301      	adds	r3, #1
 800b446:	72fb      	strb	r3, [r7, #11]
      break;
 800b448:	e021      	b.n	800b48e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	7c1b      	ldrb	r3, [r3, #16]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d10d      	bne.n	800b46e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b45a:	f107 0208 	add.w	r2, r7, #8
 800b45e:	4610      	mov	r0, r2
 800b460:	4798      	blx	r3
 800b462:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	3301      	adds	r3, #1
 800b468:	2207      	movs	r2, #7
 800b46a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b46c:	e00f      	b.n	800b48e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b46e:	6839      	ldr	r1, [r7, #0]
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f000 fa10 	bl	800b896 <USBD_CtlError>
        err++;
 800b476:	7afb      	ldrb	r3, [r7, #11]
 800b478:	3301      	adds	r3, #1
 800b47a:	72fb      	strb	r3, [r7, #11]
      break;
 800b47c:	e007      	b.n	800b48e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b47e:	6839      	ldr	r1, [r7, #0]
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f000 fa08 	bl	800b896 <USBD_CtlError>
      err++;
 800b486:	7afb      	ldrb	r3, [r7, #11]
 800b488:	3301      	adds	r3, #1
 800b48a:	72fb      	strb	r3, [r7, #11]
      break;
 800b48c:	bf00      	nop
  }

  if (err != 0U)
 800b48e:	7afb      	ldrb	r3, [r7, #11]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d11e      	bne.n	800b4d2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	88db      	ldrh	r3, [r3, #6]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d016      	beq.n	800b4ca <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b49c:	893b      	ldrh	r3, [r7, #8]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d00e      	beq.n	800b4c0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	88da      	ldrh	r2, [r3, #6]
 800b4a6:	893b      	ldrh	r3, [r7, #8]
 800b4a8:	4293      	cmp	r3, r2
 800b4aa:	bf28      	it	cs
 800b4ac:	4613      	movcs	r3, r2
 800b4ae:	b29b      	uxth	r3, r3
 800b4b0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b4b2:	893b      	ldrh	r3, [r7, #8]
 800b4b4:	461a      	mov	r2, r3
 800b4b6:	68f9      	ldr	r1, [r7, #12]
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f000 fa5d 	bl	800b978 <USBD_CtlSendData>
 800b4be:	e009      	b.n	800b4d4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b4c0:	6839      	ldr	r1, [r7, #0]
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f000 f9e7 	bl	800b896 <USBD_CtlError>
 800b4c8:	e004      	b.n	800b4d4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f000 faae 	bl	800ba2c <USBD_CtlSendStatus>
 800b4d0:	e000      	b.n	800b4d4 <USBD_GetDescriptor+0x320>
    return;
 800b4d2:	bf00      	nop
  }
}
 800b4d4:	3710      	adds	r7, #16
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bd80      	pop	{r7, pc}
 800b4da:	bf00      	nop

0800b4dc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b084      	sub	sp, #16
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
 800b4e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	889b      	ldrh	r3, [r3, #4]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d131      	bne.n	800b552 <USBD_SetAddress+0x76>
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	88db      	ldrh	r3, [r3, #6]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d12d      	bne.n	800b552 <USBD_SetAddress+0x76>
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	885b      	ldrh	r3, [r3, #2]
 800b4fa:	2b7f      	cmp	r3, #127	; 0x7f
 800b4fc:	d829      	bhi.n	800b552 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	885b      	ldrh	r3, [r3, #2]
 800b502:	b2db      	uxtb	r3, r3
 800b504:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b508:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b510:	b2db      	uxtb	r3, r3
 800b512:	2b03      	cmp	r3, #3
 800b514:	d104      	bne.n	800b520 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b516:	6839      	ldr	r1, [r7, #0]
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f000 f9bc 	bl	800b896 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b51e:	e01d      	b.n	800b55c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	7bfa      	ldrb	r2, [r7, #15]
 800b524:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b528:	7bfb      	ldrb	r3, [r7, #15]
 800b52a:	4619      	mov	r1, r3
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f000 ff2b 	bl	800c388 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f000 fa7a 	bl	800ba2c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b538:	7bfb      	ldrb	r3, [r7, #15]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d004      	beq.n	800b548 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2202      	movs	r2, #2
 800b542:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b546:	e009      	b.n	800b55c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2201      	movs	r2, #1
 800b54c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b550:	e004      	b.n	800b55c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b552:	6839      	ldr	r1, [r7, #0]
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f000 f99e 	bl	800b896 <USBD_CtlError>
  }
}
 800b55a:	bf00      	nop
 800b55c:	bf00      	nop
 800b55e:	3710      	adds	r7, #16
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}

0800b564 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b084      	sub	sp, #16
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
 800b56c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b56e:	2300      	movs	r3, #0
 800b570:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	885b      	ldrh	r3, [r3, #2]
 800b576:	b2da      	uxtb	r2, r3
 800b578:	4b4e      	ldr	r3, [pc, #312]	; (800b6b4 <USBD_SetConfig+0x150>)
 800b57a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b57c:	4b4d      	ldr	r3, [pc, #308]	; (800b6b4 <USBD_SetConfig+0x150>)
 800b57e:	781b      	ldrb	r3, [r3, #0]
 800b580:	2b01      	cmp	r3, #1
 800b582:	d905      	bls.n	800b590 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b584:	6839      	ldr	r1, [r7, #0]
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f000 f985 	bl	800b896 <USBD_CtlError>
    return USBD_FAIL;
 800b58c:	2303      	movs	r3, #3
 800b58e:	e08c      	b.n	800b6aa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b596:	b2db      	uxtb	r3, r3
 800b598:	2b02      	cmp	r3, #2
 800b59a:	d002      	beq.n	800b5a2 <USBD_SetConfig+0x3e>
 800b59c:	2b03      	cmp	r3, #3
 800b59e:	d029      	beq.n	800b5f4 <USBD_SetConfig+0x90>
 800b5a0:	e075      	b.n	800b68e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b5a2:	4b44      	ldr	r3, [pc, #272]	; (800b6b4 <USBD_SetConfig+0x150>)
 800b5a4:	781b      	ldrb	r3, [r3, #0]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d020      	beq.n	800b5ec <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b5aa:	4b42      	ldr	r3, [pc, #264]	; (800b6b4 <USBD_SetConfig+0x150>)
 800b5ac:	781b      	ldrb	r3, [r3, #0]
 800b5ae:	461a      	mov	r2, r3
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b5b4:	4b3f      	ldr	r3, [pc, #252]	; (800b6b4 <USBD_SetConfig+0x150>)
 800b5b6:	781b      	ldrb	r3, [r3, #0]
 800b5b8:	4619      	mov	r1, r3
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f7fe ffb7 	bl	800a52e <USBD_SetClassConfig>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b5c4:	7bfb      	ldrb	r3, [r7, #15]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d008      	beq.n	800b5dc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b5ca:	6839      	ldr	r1, [r7, #0]
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f000 f962 	bl	800b896 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2202      	movs	r2, #2
 800b5d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b5da:	e065      	b.n	800b6a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f000 fa25 	bl	800ba2c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2203      	movs	r2, #3
 800b5e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b5ea:	e05d      	b.n	800b6a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f000 fa1d 	bl	800ba2c <USBD_CtlSendStatus>
      break;
 800b5f2:	e059      	b.n	800b6a8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b5f4:	4b2f      	ldr	r3, [pc, #188]	; (800b6b4 <USBD_SetConfig+0x150>)
 800b5f6:	781b      	ldrb	r3, [r3, #0]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d112      	bne.n	800b622 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2202      	movs	r2, #2
 800b600:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b604:	4b2b      	ldr	r3, [pc, #172]	; (800b6b4 <USBD_SetConfig+0x150>)
 800b606:	781b      	ldrb	r3, [r3, #0]
 800b608:	461a      	mov	r2, r3
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b60e:	4b29      	ldr	r3, [pc, #164]	; (800b6b4 <USBD_SetConfig+0x150>)
 800b610:	781b      	ldrb	r3, [r3, #0]
 800b612:	4619      	mov	r1, r3
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f7fe ffa6 	bl	800a566 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f000 fa06 	bl	800ba2c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b620:	e042      	b.n	800b6a8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b622:	4b24      	ldr	r3, [pc, #144]	; (800b6b4 <USBD_SetConfig+0x150>)
 800b624:	781b      	ldrb	r3, [r3, #0]
 800b626:	461a      	mov	r2, r3
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	685b      	ldr	r3, [r3, #4]
 800b62c:	429a      	cmp	r2, r3
 800b62e:	d02a      	beq.n	800b686 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	685b      	ldr	r3, [r3, #4]
 800b634:	b2db      	uxtb	r3, r3
 800b636:	4619      	mov	r1, r3
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f7fe ff94 	bl	800a566 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b63e:	4b1d      	ldr	r3, [pc, #116]	; (800b6b4 <USBD_SetConfig+0x150>)
 800b640:	781b      	ldrb	r3, [r3, #0]
 800b642:	461a      	mov	r2, r3
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b648:	4b1a      	ldr	r3, [pc, #104]	; (800b6b4 <USBD_SetConfig+0x150>)
 800b64a:	781b      	ldrb	r3, [r3, #0]
 800b64c:	4619      	mov	r1, r3
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f7fe ff6d 	bl	800a52e <USBD_SetClassConfig>
 800b654:	4603      	mov	r3, r0
 800b656:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b658:	7bfb      	ldrb	r3, [r7, #15]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d00f      	beq.n	800b67e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b65e:	6839      	ldr	r1, [r7, #0]
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f000 f918 	bl	800b896 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	685b      	ldr	r3, [r3, #4]
 800b66a:	b2db      	uxtb	r3, r3
 800b66c:	4619      	mov	r1, r3
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f7fe ff79 	bl	800a566 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2202      	movs	r2, #2
 800b678:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b67c:	e014      	b.n	800b6a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f000 f9d4 	bl	800ba2c <USBD_CtlSendStatus>
      break;
 800b684:	e010      	b.n	800b6a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f000 f9d0 	bl	800ba2c <USBD_CtlSendStatus>
      break;
 800b68c:	e00c      	b.n	800b6a8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b68e:	6839      	ldr	r1, [r7, #0]
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f000 f900 	bl	800b896 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b696:	4b07      	ldr	r3, [pc, #28]	; (800b6b4 <USBD_SetConfig+0x150>)
 800b698:	781b      	ldrb	r3, [r3, #0]
 800b69a:	4619      	mov	r1, r3
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f7fe ff62 	bl	800a566 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b6a2:	2303      	movs	r3, #3
 800b6a4:	73fb      	strb	r3, [r7, #15]
      break;
 800b6a6:	bf00      	nop
  }

  return ret;
 800b6a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3710      	adds	r7, #16
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}
 800b6b2:	bf00      	nop
 800b6b4:	240005b8 	.word	0x240005b8

0800b6b8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b082      	sub	sp, #8
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
 800b6c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	88db      	ldrh	r3, [r3, #6]
 800b6c6:	2b01      	cmp	r3, #1
 800b6c8:	d004      	beq.n	800b6d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b6ca:	6839      	ldr	r1, [r7, #0]
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f000 f8e2 	bl	800b896 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b6d2:	e023      	b.n	800b71c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6da:	b2db      	uxtb	r3, r3
 800b6dc:	2b02      	cmp	r3, #2
 800b6de:	dc02      	bgt.n	800b6e6 <USBD_GetConfig+0x2e>
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	dc03      	bgt.n	800b6ec <USBD_GetConfig+0x34>
 800b6e4:	e015      	b.n	800b712 <USBD_GetConfig+0x5a>
 800b6e6:	2b03      	cmp	r3, #3
 800b6e8:	d00b      	beq.n	800b702 <USBD_GetConfig+0x4a>
 800b6ea:	e012      	b.n	800b712 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	3308      	adds	r3, #8
 800b6f6:	2201      	movs	r2, #1
 800b6f8:	4619      	mov	r1, r3
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f000 f93c 	bl	800b978 <USBD_CtlSendData>
        break;
 800b700:	e00c      	b.n	800b71c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	3304      	adds	r3, #4
 800b706:	2201      	movs	r2, #1
 800b708:	4619      	mov	r1, r3
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f000 f934 	bl	800b978 <USBD_CtlSendData>
        break;
 800b710:	e004      	b.n	800b71c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b712:	6839      	ldr	r1, [r7, #0]
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f000 f8be 	bl	800b896 <USBD_CtlError>
        break;
 800b71a:	bf00      	nop
}
 800b71c:	bf00      	nop
 800b71e:	3708      	adds	r7, #8
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}

0800b724 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b082      	sub	sp, #8
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
 800b72c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b734:	b2db      	uxtb	r3, r3
 800b736:	3b01      	subs	r3, #1
 800b738:	2b02      	cmp	r3, #2
 800b73a:	d81e      	bhi.n	800b77a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	88db      	ldrh	r3, [r3, #6]
 800b740:	2b02      	cmp	r3, #2
 800b742:	d004      	beq.n	800b74e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b744:	6839      	ldr	r1, [r7, #0]
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f000 f8a5 	bl	800b896 <USBD_CtlError>
        break;
 800b74c:	e01a      	b.n	800b784 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2201      	movs	r2, #1
 800b752:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d005      	beq.n	800b76a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	68db      	ldr	r3, [r3, #12]
 800b762:	f043 0202 	orr.w	r2, r3, #2
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	330c      	adds	r3, #12
 800b76e:	2202      	movs	r2, #2
 800b770:	4619      	mov	r1, r3
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	f000 f900 	bl	800b978 <USBD_CtlSendData>
      break;
 800b778:	e004      	b.n	800b784 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b77a:	6839      	ldr	r1, [r7, #0]
 800b77c:	6878      	ldr	r0, [r7, #4]
 800b77e:	f000 f88a 	bl	800b896 <USBD_CtlError>
      break;
 800b782:	bf00      	nop
  }
}
 800b784:	bf00      	nop
 800b786:	3708      	adds	r7, #8
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}

0800b78c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b082      	sub	sp, #8
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
 800b794:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	885b      	ldrh	r3, [r3, #2]
 800b79a:	2b01      	cmp	r3, #1
 800b79c:	d107      	bne.n	800b7ae <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2201      	movs	r2, #1
 800b7a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b7a6:	6878      	ldr	r0, [r7, #4]
 800b7a8:	f000 f940 	bl	800ba2c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b7ac:	e013      	b.n	800b7d6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	885b      	ldrh	r3, [r3, #2]
 800b7b2:	2b02      	cmp	r3, #2
 800b7b4:	d10b      	bne.n	800b7ce <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	889b      	ldrh	r3, [r3, #4]
 800b7ba:	0a1b      	lsrs	r3, r3, #8
 800b7bc:	b29b      	uxth	r3, r3
 800b7be:	b2da      	uxtb	r2, r3
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f000 f930 	bl	800ba2c <USBD_CtlSendStatus>
}
 800b7cc:	e003      	b.n	800b7d6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b7ce:	6839      	ldr	r1, [r7, #0]
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	f000 f860 	bl	800b896 <USBD_CtlError>
}
 800b7d6:	bf00      	nop
 800b7d8:	3708      	adds	r7, #8
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}

0800b7de <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7de:	b580      	push	{r7, lr}
 800b7e0:	b082      	sub	sp, #8
 800b7e2:	af00      	add	r7, sp, #0
 800b7e4:	6078      	str	r0, [r7, #4]
 800b7e6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7ee:	b2db      	uxtb	r3, r3
 800b7f0:	3b01      	subs	r3, #1
 800b7f2:	2b02      	cmp	r3, #2
 800b7f4:	d80b      	bhi.n	800b80e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	885b      	ldrh	r3, [r3, #2]
 800b7fa:	2b01      	cmp	r3, #1
 800b7fc:	d10c      	bne.n	800b818 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2200      	movs	r2, #0
 800b802:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	f000 f910 	bl	800ba2c <USBD_CtlSendStatus>
      }
      break;
 800b80c:	e004      	b.n	800b818 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b80e:	6839      	ldr	r1, [r7, #0]
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f000 f840 	bl	800b896 <USBD_CtlError>
      break;
 800b816:	e000      	b.n	800b81a <USBD_ClrFeature+0x3c>
      break;
 800b818:	bf00      	nop
  }
}
 800b81a:	bf00      	nop
 800b81c:	3708      	adds	r7, #8
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}

0800b822 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b822:	b580      	push	{r7, lr}
 800b824:	b084      	sub	sp, #16
 800b826:	af00      	add	r7, sp, #0
 800b828:	6078      	str	r0, [r7, #4]
 800b82a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	781a      	ldrb	r2, [r3, #0]
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	3301      	adds	r3, #1
 800b83c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	781a      	ldrb	r2, [r3, #0]
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	3301      	adds	r3, #1
 800b84a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b84c:	68f8      	ldr	r0, [r7, #12]
 800b84e:	f7ff fa17 	bl	800ac80 <SWAPBYTE>
 800b852:	4603      	mov	r3, r0
 800b854:	461a      	mov	r2, r3
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	3301      	adds	r3, #1
 800b85e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	3301      	adds	r3, #1
 800b864:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b866:	68f8      	ldr	r0, [r7, #12]
 800b868:	f7ff fa0a 	bl	800ac80 <SWAPBYTE>
 800b86c:	4603      	mov	r3, r0
 800b86e:	461a      	mov	r2, r3
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	3301      	adds	r3, #1
 800b878:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	3301      	adds	r3, #1
 800b87e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b880:	68f8      	ldr	r0, [r7, #12]
 800b882:	f7ff f9fd 	bl	800ac80 <SWAPBYTE>
 800b886:	4603      	mov	r3, r0
 800b888:	461a      	mov	r2, r3
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	80da      	strh	r2, [r3, #6]
}
 800b88e:	bf00      	nop
 800b890:	3710      	adds	r7, #16
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}

0800b896 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b896:	b580      	push	{r7, lr}
 800b898:	b082      	sub	sp, #8
 800b89a:	af00      	add	r7, sp, #0
 800b89c:	6078      	str	r0, [r7, #4]
 800b89e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b8a0:	2180      	movs	r1, #128	; 0x80
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f000 fd06 	bl	800c2b4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b8a8:	2100      	movs	r1, #0
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f000 fd02 	bl	800c2b4 <USBD_LL_StallEP>
}
 800b8b0:	bf00      	nop
 800b8b2:	3708      	adds	r7, #8
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd80      	pop	{r7, pc}

0800b8b8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b086      	sub	sp, #24
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	60f8      	str	r0, [r7, #12]
 800b8c0:	60b9      	str	r1, [r7, #8]
 800b8c2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d036      	beq.n	800b93c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b8d2:	6938      	ldr	r0, [r7, #16]
 800b8d4:	f000 f836 	bl	800b944 <USBD_GetLen>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	3301      	adds	r3, #1
 800b8dc:	b29b      	uxth	r3, r3
 800b8de:	005b      	lsls	r3, r3, #1
 800b8e0:	b29a      	uxth	r2, r3
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b8e6:	7dfb      	ldrb	r3, [r7, #23]
 800b8e8:	68ba      	ldr	r2, [r7, #8]
 800b8ea:	4413      	add	r3, r2
 800b8ec:	687a      	ldr	r2, [r7, #4]
 800b8ee:	7812      	ldrb	r2, [r2, #0]
 800b8f0:	701a      	strb	r2, [r3, #0]
  idx++;
 800b8f2:	7dfb      	ldrb	r3, [r7, #23]
 800b8f4:	3301      	adds	r3, #1
 800b8f6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b8f8:	7dfb      	ldrb	r3, [r7, #23]
 800b8fa:	68ba      	ldr	r2, [r7, #8]
 800b8fc:	4413      	add	r3, r2
 800b8fe:	2203      	movs	r2, #3
 800b900:	701a      	strb	r2, [r3, #0]
  idx++;
 800b902:	7dfb      	ldrb	r3, [r7, #23]
 800b904:	3301      	adds	r3, #1
 800b906:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b908:	e013      	b.n	800b932 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b90a:	7dfb      	ldrb	r3, [r7, #23]
 800b90c:	68ba      	ldr	r2, [r7, #8]
 800b90e:	4413      	add	r3, r2
 800b910:	693a      	ldr	r2, [r7, #16]
 800b912:	7812      	ldrb	r2, [r2, #0]
 800b914:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b916:	693b      	ldr	r3, [r7, #16]
 800b918:	3301      	adds	r3, #1
 800b91a:	613b      	str	r3, [r7, #16]
    idx++;
 800b91c:	7dfb      	ldrb	r3, [r7, #23]
 800b91e:	3301      	adds	r3, #1
 800b920:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b922:	7dfb      	ldrb	r3, [r7, #23]
 800b924:	68ba      	ldr	r2, [r7, #8]
 800b926:	4413      	add	r3, r2
 800b928:	2200      	movs	r2, #0
 800b92a:	701a      	strb	r2, [r3, #0]
    idx++;
 800b92c:	7dfb      	ldrb	r3, [r7, #23]
 800b92e:	3301      	adds	r3, #1
 800b930:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	781b      	ldrb	r3, [r3, #0]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d1e7      	bne.n	800b90a <USBD_GetString+0x52>
 800b93a:	e000      	b.n	800b93e <USBD_GetString+0x86>
    return;
 800b93c:	bf00      	nop
  }
}
 800b93e:	3718      	adds	r7, #24
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}

0800b944 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b944:	b480      	push	{r7}
 800b946:	b085      	sub	sp, #20
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b94c:	2300      	movs	r3, #0
 800b94e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b954:	e005      	b.n	800b962 <USBD_GetLen+0x1e>
  {
    len++;
 800b956:	7bfb      	ldrb	r3, [r7, #15]
 800b958:	3301      	adds	r3, #1
 800b95a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	3301      	adds	r3, #1
 800b960:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	781b      	ldrb	r3, [r3, #0]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d1f5      	bne.n	800b956 <USBD_GetLen+0x12>
  }

  return len;
 800b96a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	3714      	adds	r7, #20
 800b970:	46bd      	mov	sp, r7
 800b972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b976:	4770      	bx	lr

0800b978 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b084      	sub	sp, #16
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	60f8      	str	r0, [r7, #12]
 800b980:	60b9      	str	r1, [r7, #8]
 800b982:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	2202      	movs	r2, #2
 800b988:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	687a      	ldr	r2, [r7, #4]
 800b990:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	687a      	ldr	r2, [r7, #4]
 800b996:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	68ba      	ldr	r2, [r7, #8]
 800b99c:	2100      	movs	r1, #0
 800b99e:	68f8      	ldr	r0, [r7, #12]
 800b9a0:	f000 fd11 	bl	800c3c6 <USBD_LL_Transmit>

  return USBD_OK;
 800b9a4:	2300      	movs	r3, #0
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3710      	adds	r7, #16
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}

0800b9ae <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b9ae:	b580      	push	{r7, lr}
 800b9b0:	b084      	sub	sp, #16
 800b9b2:	af00      	add	r7, sp, #0
 800b9b4:	60f8      	str	r0, [r7, #12]
 800b9b6:	60b9      	str	r1, [r7, #8]
 800b9b8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	68ba      	ldr	r2, [r7, #8]
 800b9be:	2100      	movs	r1, #0
 800b9c0:	68f8      	ldr	r0, [r7, #12]
 800b9c2:	f000 fd00 	bl	800c3c6 <USBD_LL_Transmit>

  return USBD_OK;
 800b9c6:	2300      	movs	r3, #0
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3710      	adds	r7, #16
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}

0800b9d0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b084      	sub	sp, #16
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	60f8      	str	r0, [r7, #12]
 800b9d8:	60b9      	str	r1, [r7, #8]
 800b9da:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	2203      	movs	r2, #3
 800b9e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	687a      	ldr	r2, [r7, #4]
 800b9e8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	687a      	ldr	r2, [r7, #4]
 800b9f0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	68ba      	ldr	r2, [r7, #8]
 800b9f8:	2100      	movs	r1, #0
 800b9fa:	68f8      	ldr	r0, [r7, #12]
 800b9fc:	f000 fd04 	bl	800c408 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba00:	2300      	movs	r3, #0
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3710      	adds	r7, #16
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}

0800ba0a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ba0a:	b580      	push	{r7, lr}
 800ba0c:	b084      	sub	sp, #16
 800ba0e:	af00      	add	r7, sp, #0
 800ba10:	60f8      	str	r0, [r7, #12]
 800ba12:	60b9      	str	r1, [r7, #8]
 800ba14:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	68ba      	ldr	r2, [r7, #8]
 800ba1a:	2100      	movs	r1, #0
 800ba1c:	68f8      	ldr	r0, [r7, #12]
 800ba1e:	f000 fcf3 	bl	800c408 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba22:	2300      	movs	r3, #0
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	3710      	adds	r7, #16
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}

0800ba2c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b082      	sub	sp, #8
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2204      	movs	r2, #4
 800ba38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	2200      	movs	r2, #0
 800ba40:	2100      	movs	r1, #0
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f000 fcbf 	bl	800c3c6 <USBD_LL_Transmit>

  return USBD_OK;
 800ba48:	2300      	movs	r3, #0
}
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	3708      	adds	r7, #8
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}

0800ba52 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ba52:	b580      	push	{r7, lr}
 800ba54:	b082      	sub	sp, #8
 800ba56:	af00      	add	r7, sp, #0
 800ba58:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2205      	movs	r2, #5
 800ba5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba62:	2300      	movs	r3, #0
 800ba64:	2200      	movs	r2, #0
 800ba66:	2100      	movs	r1, #0
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f000 fccd 	bl	800c408 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba6e:	2300      	movs	r3, #0
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	3708      	adds	r7, #8
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}

0800ba78 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	4913      	ldr	r1, [pc, #76]	; (800bacc <MX_USB_DEVICE_Init+0x54>)
 800ba80:	4813      	ldr	r0, [pc, #76]	; (800bad0 <MX_USB_DEVICE_Init+0x58>)
 800ba82:	f7fe fcd7 	bl	800a434 <USBD_Init>
 800ba86:	4603      	mov	r3, r0
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d001      	beq.n	800ba90 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ba8c:	f7f5 fe28 	bl	80016e0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ba90:	4910      	ldr	r1, [pc, #64]	; (800bad4 <MX_USB_DEVICE_Init+0x5c>)
 800ba92:	480f      	ldr	r0, [pc, #60]	; (800bad0 <MX_USB_DEVICE_Init+0x58>)
 800ba94:	f7fe fcfe 	bl	800a494 <USBD_RegisterClass>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d001      	beq.n	800baa2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ba9e:	f7f5 fe1f 	bl	80016e0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800baa2:	490d      	ldr	r1, [pc, #52]	; (800bad8 <MX_USB_DEVICE_Init+0x60>)
 800baa4:	480a      	ldr	r0, [pc, #40]	; (800bad0 <MX_USB_DEVICE_Init+0x58>)
 800baa6:	f7fe fbf5 	bl	800a294 <USBD_CDC_RegisterInterface>
 800baaa:	4603      	mov	r3, r0
 800baac:	2b00      	cmp	r3, #0
 800baae:	d001      	beq.n	800bab4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bab0:	f7f5 fe16 	bl	80016e0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bab4:	4806      	ldr	r0, [pc, #24]	; (800bad0 <MX_USB_DEVICE_Init+0x58>)
 800bab6:	f7fe fd23 	bl	800a500 <USBD_Start>
 800baba:	4603      	mov	r3, r0
 800babc:	2b00      	cmp	r3, #0
 800babe:	d001      	beq.n	800bac4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bac0:	f7f5 fe0e 	bl	80016e0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800bac4:	f7f8 ffb2 	bl	8004a2c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bac8:	bf00      	nop
 800baca:	bd80      	pop	{r7, pc}
 800bacc:	240000f0 	.word	0x240000f0
 800bad0:	240005bc 	.word	0x240005bc
 800bad4:	2400005c 	.word	0x2400005c
 800bad8:	240000dc 	.word	0x240000dc

0800badc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bae0:	2200      	movs	r2, #0
 800bae2:	4905      	ldr	r1, [pc, #20]	; (800baf8 <CDC_Init_FS+0x1c>)
 800bae4:	4805      	ldr	r0, [pc, #20]	; (800bafc <CDC_Init_FS+0x20>)
 800bae6:	f7fe fbef 	bl	800a2c8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800baea:	4905      	ldr	r1, [pc, #20]	; (800bb00 <CDC_Init_FS+0x24>)
 800baec:	4803      	ldr	r0, [pc, #12]	; (800bafc <CDC_Init_FS+0x20>)
 800baee:	f7fe fc0d 	bl	800a30c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800baf2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800baf4:	4618      	mov	r0, r3
 800baf6:	bd80      	pop	{r7, pc}
 800baf8:	24001098 	.word	0x24001098
 800bafc:	240005bc 	.word	0x240005bc
 800bb00:	24000898 	.word	0x24000898

0800bb04 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bb04:	b480      	push	{r7}
 800bb06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bb08:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb12:	4770      	bx	lr

0800bb14 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bb14:	b480      	push	{r7}
 800bb16:	b083      	sub	sp, #12
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	6039      	str	r1, [r7, #0]
 800bb1e:	71fb      	strb	r3, [r7, #7]
 800bb20:	4613      	mov	r3, r2
 800bb22:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bb24:	79fb      	ldrb	r3, [r7, #7]
 800bb26:	2b23      	cmp	r3, #35	; 0x23
 800bb28:	d84a      	bhi.n	800bbc0 <CDC_Control_FS+0xac>
 800bb2a:	a201      	add	r2, pc, #4	; (adr r2, 800bb30 <CDC_Control_FS+0x1c>)
 800bb2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb30:	0800bbc1 	.word	0x0800bbc1
 800bb34:	0800bbc1 	.word	0x0800bbc1
 800bb38:	0800bbc1 	.word	0x0800bbc1
 800bb3c:	0800bbc1 	.word	0x0800bbc1
 800bb40:	0800bbc1 	.word	0x0800bbc1
 800bb44:	0800bbc1 	.word	0x0800bbc1
 800bb48:	0800bbc1 	.word	0x0800bbc1
 800bb4c:	0800bbc1 	.word	0x0800bbc1
 800bb50:	0800bbc1 	.word	0x0800bbc1
 800bb54:	0800bbc1 	.word	0x0800bbc1
 800bb58:	0800bbc1 	.word	0x0800bbc1
 800bb5c:	0800bbc1 	.word	0x0800bbc1
 800bb60:	0800bbc1 	.word	0x0800bbc1
 800bb64:	0800bbc1 	.word	0x0800bbc1
 800bb68:	0800bbc1 	.word	0x0800bbc1
 800bb6c:	0800bbc1 	.word	0x0800bbc1
 800bb70:	0800bbc1 	.word	0x0800bbc1
 800bb74:	0800bbc1 	.word	0x0800bbc1
 800bb78:	0800bbc1 	.word	0x0800bbc1
 800bb7c:	0800bbc1 	.word	0x0800bbc1
 800bb80:	0800bbc1 	.word	0x0800bbc1
 800bb84:	0800bbc1 	.word	0x0800bbc1
 800bb88:	0800bbc1 	.word	0x0800bbc1
 800bb8c:	0800bbc1 	.word	0x0800bbc1
 800bb90:	0800bbc1 	.word	0x0800bbc1
 800bb94:	0800bbc1 	.word	0x0800bbc1
 800bb98:	0800bbc1 	.word	0x0800bbc1
 800bb9c:	0800bbc1 	.word	0x0800bbc1
 800bba0:	0800bbc1 	.word	0x0800bbc1
 800bba4:	0800bbc1 	.word	0x0800bbc1
 800bba8:	0800bbc1 	.word	0x0800bbc1
 800bbac:	0800bbc1 	.word	0x0800bbc1
 800bbb0:	0800bbc1 	.word	0x0800bbc1
 800bbb4:	0800bbc1 	.word	0x0800bbc1
 800bbb8:	0800bbc1 	.word	0x0800bbc1
 800bbbc:	0800bbc1 	.word	0x0800bbc1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bbc0:	bf00      	nop
  }

  return (USBD_OK);
 800bbc2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	370c      	adds	r7, #12
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbce:	4770      	bx	lr

0800bbd0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b082      	sub	sp, #8
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
 800bbd8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bbda:	6879      	ldr	r1, [r7, #4]
 800bbdc:	4805      	ldr	r0, [pc, #20]	; (800bbf4 <CDC_Receive_FS+0x24>)
 800bbde:	f7fe fb95 	bl	800a30c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bbe2:	4804      	ldr	r0, [pc, #16]	; (800bbf4 <CDC_Receive_FS+0x24>)
 800bbe4:	f7fe fbf0 	bl	800a3c8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bbe8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bbea:	4618      	mov	r0, r3
 800bbec:	3708      	adds	r7, #8
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd80      	pop	{r7, pc}
 800bbf2:	bf00      	nop
 800bbf4:	240005bc 	.word	0x240005bc

0800bbf8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b084      	sub	sp, #16
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
 800bc00:	460b      	mov	r3, r1
 800bc02:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bc04:	2300      	movs	r3, #0
 800bc06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bc08:	4b0d      	ldr	r3, [pc, #52]	; (800bc40 <CDC_Transmit_FS+0x48>)
 800bc0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc0e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d001      	beq.n	800bc1e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800bc1a:	2301      	movs	r3, #1
 800bc1c:	e00b      	b.n	800bc36 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bc1e:	887b      	ldrh	r3, [r7, #2]
 800bc20:	461a      	mov	r2, r3
 800bc22:	6879      	ldr	r1, [r7, #4]
 800bc24:	4806      	ldr	r0, [pc, #24]	; (800bc40 <CDC_Transmit_FS+0x48>)
 800bc26:	f7fe fb4f 	bl	800a2c8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bc2a:	4805      	ldr	r0, [pc, #20]	; (800bc40 <CDC_Transmit_FS+0x48>)
 800bc2c:	f7fe fb8c 	bl	800a348 <USBD_CDC_TransmitPacket>
 800bc30:	4603      	mov	r3, r0
 800bc32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800bc34:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	3710      	adds	r7, #16
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}
 800bc3e:	bf00      	nop
 800bc40:	240005bc 	.word	0x240005bc

0800bc44 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bc44:	b480      	push	{r7}
 800bc46:	b087      	sub	sp, #28
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	60f8      	str	r0, [r7, #12]
 800bc4c:	60b9      	str	r1, [r7, #8]
 800bc4e:	4613      	mov	r3, r2
 800bc50:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bc52:	2300      	movs	r3, #0
 800bc54:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bc56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	371c      	adds	r7, #28
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc64:	4770      	bx	lr
	...

0800bc68 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc68:	b480      	push	{r7}
 800bc6a:	b083      	sub	sp, #12
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	4603      	mov	r3, r0
 800bc70:	6039      	str	r1, [r7, #0]
 800bc72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	2212      	movs	r2, #18
 800bc78:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bc7a:	4b03      	ldr	r3, [pc, #12]	; (800bc88 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	370c      	adds	r7, #12
 800bc80:	46bd      	mov	sp, r7
 800bc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc86:	4770      	bx	lr
 800bc88:	24000110 	.word	0x24000110

0800bc8c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	b083      	sub	sp, #12
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	4603      	mov	r3, r0
 800bc94:	6039      	str	r1, [r7, #0]
 800bc96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	2204      	movs	r2, #4
 800bc9c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bc9e:	4b03      	ldr	r3, [pc, #12]	; (800bcac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	370c      	adds	r7, #12
 800bca4:	46bd      	mov	sp, r7
 800bca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcaa:	4770      	bx	lr
 800bcac:	24000124 	.word	0x24000124

0800bcb0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b082      	sub	sp, #8
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	6039      	str	r1, [r7, #0]
 800bcba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bcbc:	79fb      	ldrb	r3, [r7, #7]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d105      	bne.n	800bcce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bcc2:	683a      	ldr	r2, [r7, #0]
 800bcc4:	4907      	ldr	r1, [pc, #28]	; (800bce4 <USBD_FS_ProductStrDescriptor+0x34>)
 800bcc6:	4808      	ldr	r0, [pc, #32]	; (800bce8 <USBD_FS_ProductStrDescriptor+0x38>)
 800bcc8:	f7ff fdf6 	bl	800b8b8 <USBD_GetString>
 800bccc:	e004      	b.n	800bcd8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bcce:	683a      	ldr	r2, [r7, #0]
 800bcd0:	4904      	ldr	r1, [pc, #16]	; (800bce4 <USBD_FS_ProductStrDescriptor+0x34>)
 800bcd2:	4805      	ldr	r0, [pc, #20]	; (800bce8 <USBD_FS_ProductStrDescriptor+0x38>)
 800bcd4:	f7ff fdf0 	bl	800b8b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bcd8:	4b02      	ldr	r3, [pc, #8]	; (800bce4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	3708      	adds	r7, #8
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}
 800bce2:	bf00      	nop
 800bce4:	24001898 	.word	0x24001898
 800bce8:	0800f130 	.word	0x0800f130

0800bcec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b082      	sub	sp, #8
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	6039      	str	r1, [r7, #0]
 800bcf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bcf8:	683a      	ldr	r2, [r7, #0]
 800bcfa:	4904      	ldr	r1, [pc, #16]	; (800bd0c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bcfc:	4804      	ldr	r0, [pc, #16]	; (800bd10 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bcfe:	f7ff fddb 	bl	800b8b8 <USBD_GetString>
  return USBD_StrDesc;
 800bd02:	4b02      	ldr	r3, [pc, #8]	; (800bd0c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bd04:	4618      	mov	r0, r3
 800bd06:	3708      	adds	r7, #8
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	bd80      	pop	{r7, pc}
 800bd0c:	24001898 	.word	0x24001898
 800bd10:	0800f148 	.word	0x0800f148

0800bd14 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b082      	sub	sp, #8
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	6039      	str	r1, [r7, #0]
 800bd1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	221a      	movs	r2, #26
 800bd24:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bd26:	f000 f843 	bl	800bdb0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bd2a:	4b02      	ldr	r3, [pc, #8]	; (800bd34 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	3708      	adds	r7, #8
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}
 800bd34:	24000128 	.word	0x24000128

0800bd38 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b082      	sub	sp, #8
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	4603      	mov	r3, r0
 800bd40:	6039      	str	r1, [r7, #0]
 800bd42:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bd44:	79fb      	ldrb	r3, [r7, #7]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d105      	bne.n	800bd56 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bd4a:	683a      	ldr	r2, [r7, #0]
 800bd4c:	4907      	ldr	r1, [pc, #28]	; (800bd6c <USBD_FS_ConfigStrDescriptor+0x34>)
 800bd4e:	4808      	ldr	r0, [pc, #32]	; (800bd70 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bd50:	f7ff fdb2 	bl	800b8b8 <USBD_GetString>
 800bd54:	e004      	b.n	800bd60 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bd56:	683a      	ldr	r2, [r7, #0]
 800bd58:	4904      	ldr	r1, [pc, #16]	; (800bd6c <USBD_FS_ConfigStrDescriptor+0x34>)
 800bd5a:	4805      	ldr	r0, [pc, #20]	; (800bd70 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bd5c:	f7ff fdac 	bl	800b8b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd60:	4b02      	ldr	r3, [pc, #8]	; (800bd6c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bd62:	4618      	mov	r0, r3
 800bd64:	3708      	adds	r7, #8
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bd80      	pop	{r7, pc}
 800bd6a:	bf00      	nop
 800bd6c:	24001898 	.word	0x24001898
 800bd70:	0800f15c 	.word	0x0800f15c

0800bd74 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b082      	sub	sp, #8
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	6039      	str	r1, [r7, #0]
 800bd7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bd80:	79fb      	ldrb	r3, [r7, #7]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d105      	bne.n	800bd92 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bd86:	683a      	ldr	r2, [r7, #0]
 800bd88:	4907      	ldr	r1, [pc, #28]	; (800bda8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bd8a:	4808      	ldr	r0, [pc, #32]	; (800bdac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bd8c:	f7ff fd94 	bl	800b8b8 <USBD_GetString>
 800bd90:	e004      	b.n	800bd9c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bd92:	683a      	ldr	r2, [r7, #0]
 800bd94:	4904      	ldr	r1, [pc, #16]	; (800bda8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bd96:	4805      	ldr	r0, [pc, #20]	; (800bdac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bd98:	f7ff fd8e 	bl	800b8b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd9c:	4b02      	ldr	r3, [pc, #8]	; (800bda8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3708      	adds	r7, #8
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}
 800bda6:	bf00      	nop
 800bda8:	24001898 	.word	0x24001898
 800bdac:	0800f168 	.word	0x0800f168

0800bdb0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b084      	sub	sp, #16
 800bdb4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bdb6:	4b0f      	ldr	r3, [pc, #60]	; (800bdf4 <Get_SerialNum+0x44>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bdbc:	4b0e      	ldr	r3, [pc, #56]	; (800bdf8 <Get_SerialNum+0x48>)
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bdc2:	4b0e      	ldr	r3, [pc, #56]	; (800bdfc <Get_SerialNum+0x4c>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bdc8:	68fa      	ldr	r2, [r7, #12]
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	4413      	add	r3, r2
 800bdce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d009      	beq.n	800bdea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bdd6:	2208      	movs	r2, #8
 800bdd8:	4909      	ldr	r1, [pc, #36]	; (800be00 <Get_SerialNum+0x50>)
 800bdda:	68f8      	ldr	r0, [r7, #12]
 800bddc:	f000 f814 	bl	800be08 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bde0:	2204      	movs	r2, #4
 800bde2:	4908      	ldr	r1, [pc, #32]	; (800be04 <Get_SerialNum+0x54>)
 800bde4:	68b8      	ldr	r0, [r7, #8]
 800bde6:	f000 f80f 	bl	800be08 <IntToUnicode>
  }
}
 800bdea:	bf00      	nop
 800bdec:	3710      	adds	r7, #16
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}
 800bdf2:	bf00      	nop
 800bdf4:	1ff1e800 	.word	0x1ff1e800
 800bdf8:	1ff1e804 	.word	0x1ff1e804
 800bdfc:	1ff1e808 	.word	0x1ff1e808
 800be00:	2400012a 	.word	0x2400012a
 800be04:	2400013a 	.word	0x2400013a

0800be08 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800be08:	b480      	push	{r7}
 800be0a:	b087      	sub	sp, #28
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	60f8      	str	r0, [r7, #12]
 800be10:	60b9      	str	r1, [r7, #8]
 800be12:	4613      	mov	r3, r2
 800be14:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800be16:	2300      	movs	r3, #0
 800be18:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800be1a:	2300      	movs	r3, #0
 800be1c:	75fb      	strb	r3, [r7, #23]
 800be1e:	e027      	b.n	800be70 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	0f1b      	lsrs	r3, r3, #28
 800be24:	2b09      	cmp	r3, #9
 800be26:	d80b      	bhi.n	800be40 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	0f1b      	lsrs	r3, r3, #28
 800be2c:	b2da      	uxtb	r2, r3
 800be2e:	7dfb      	ldrb	r3, [r7, #23]
 800be30:	005b      	lsls	r3, r3, #1
 800be32:	4619      	mov	r1, r3
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	440b      	add	r3, r1
 800be38:	3230      	adds	r2, #48	; 0x30
 800be3a:	b2d2      	uxtb	r2, r2
 800be3c:	701a      	strb	r2, [r3, #0]
 800be3e:	e00a      	b.n	800be56 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	0f1b      	lsrs	r3, r3, #28
 800be44:	b2da      	uxtb	r2, r3
 800be46:	7dfb      	ldrb	r3, [r7, #23]
 800be48:	005b      	lsls	r3, r3, #1
 800be4a:	4619      	mov	r1, r3
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	440b      	add	r3, r1
 800be50:	3237      	adds	r2, #55	; 0x37
 800be52:	b2d2      	uxtb	r2, r2
 800be54:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	011b      	lsls	r3, r3, #4
 800be5a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800be5c:	7dfb      	ldrb	r3, [r7, #23]
 800be5e:	005b      	lsls	r3, r3, #1
 800be60:	3301      	adds	r3, #1
 800be62:	68ba      	ldr	r2, [r7, #8]
 800be64:	4413      	add	r3, r2
 800be66:	2200      	movs	r2, #0
 800be68:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800be6a:	7dfb      	ldrb	r3, [r7, #23]
 800be6c:	3301      	adds	r3, #1
 800be6e:	75fb      	strb	r3, [r7, #23]
 800be70:	7dfa      	ldrb	r2, [r7, #23]
 800be72:	79fb      	ldrb	r3, [r7, #7]
 800be74:	429a      	cmp	r2, r3
 800be76:	d3d3      	bcc.n	800be20 <IntToUnicode+0x18>
  }
}
 800be78:	bf00      	nop
 800be7a:	bf00      	nop
 800be7c:	371c      	adds	r7, #28
 800be7e:	46bd      	mov	sp, r7
 800be80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be84:	4770      	bx	lr
	...

0800be88 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b0ba      	sub	sp, #232	; 0xe8
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800be90:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800be94:	2200      	movs	r2, #0
 800be96:	601a      	str	r2, [r3, #0]
 800be98:	605a      	str	r2, [r3, #4]
 800be9a:	609a      	str	r2, [r3, #8]
 800be9c:	60da      	str	r2, [r3, #12]
 800be9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800bea0:	f107 0310 	add.w	r3, r7, #16
 800bea4:	22c0      	movs	r2, #192	; 0xc0
 800bea6:	2100      	movs	r1, #0
 800bea8:	4618      	mov	r0, r3
 800beaa:	f001 f940 	bl	800d12e <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	4a2c      	ldr	r2, [pc, #176]	; (800bf64 <HAL_PCD_MspInit+0xdc>)
 800beb4:	4293      	cmp	r3, r2
 800beb6:	d151      	bne.n	800bf5c <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800beb8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800bebc:	f04f 0300 	mov.w	r3, #0
 800bec0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800bec4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bec8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800becc:	f107 0310 	add.w	r3, r7, #16
 800bed0:	4618      	mov	r0, r3
 800bed2:	f7f9 fd8b 	bl	80059ec <HAL_RCCEx_PeriphCLKConfig>
 800bed6:	4603      	mov	r3, r0
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d001      	beq.n	800bee0 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800bedc:	f7f5 fc00 	bl	80016e0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800bee0:	f7f8 fda4 	bl	8004a2c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bee4:	4b20      	ldr	r3, [pc, #128]	; (800bf68 <HAL_PCD_MspInit+0xe0>)
 800bee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800beea:	4a1f      	ldr	r2, [pc, #124]	; (800bf68 <HAL_PCD_MspInit+0xe0>)
 800beec:	f043 0301 	orr.w	r3, r3, #1
 800bef0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bef4:	4b1c      	ldr	r3, [pc, #112]	; (800bf68 <HAL_PCD_MspInit+0xe0>)
 800bef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800befa:	f003 0301 	and.w	r3, r3, #1
 800befe:	60fb      	str	r3, [r7, #12]
 800bf00:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bf02:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800bf06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf0a:	2302      	movs	r3, #2
 800bf0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf10:	2300      	movs	r3, #0
 800bf12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bf16:	2300      	movs	r3, #0
 800bf18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800bf1c:	230a      	movs	r3, #10
 800bf1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bf22:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800bf26:	4619      	mov	r1, r3
 800bf28:	4810      	ldr	r0, [pc, #64]	; (800bf6c <HAL_PCD_MspInit+0xe4>)
 800bf2a:	f7f7 f8db 	bl	80030e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bf2e:	4b0e      	ldr	r3, [pc, #56]	; (800bf68 <HAL_PCD_MspInit+0xe0>)
 800bf30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bf34:	4a0c      	ldr	r2, [pc, #48]	; (800bf68 <HAL_PCD_MspInit+0xe0>)
 800bf36:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bf3a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800bf3e:	4b0a      	ldr	r3, [pc, #40]	; (800bf68 <HAL_PCD_MspInit+0xe0>)
 800bf40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bf44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf48:	60bb      	str	r3, [r7, #8]
 800bf4a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	2100      	movs	r1, #0
 800bf50:	2065      	movs	r0, #101	; 0x65
 800bf52:	f7f7 f892 	bl	800307a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bf56:	2065      	movs	r0, #101	; 0x65
 800bf58:	f7f7 f8a9 	bl	80030ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bf5c:	bf00      	nop
 800bf5e:	37e8      	adds	r7, #232	; 0xe8
 800bf60:	46bd      	mov	sp, r7
 800bf62:	bd80      	pop	{r7, pc}
 800bf64:	40080000 	.word	0x40080000
 800bf68:	58024400 	.word	0x58024400
 800bf6c:	58020000 	.word	0x58020000

0800bf70 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b082      	sub	sp, #8
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800bf84:	4619      	mov	r1, r3
 800bf86:	4610      	mov	r0, r2
 800bf88:	f7fe fb07 	bl	800a59a <USBD_LL_SetupStage>
}
 800bf8c:	bf00      	nop
 800bf8e:	3708      	adds	r7, #8
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}

0800bf94 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b082      	sub	sp, #8
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
 800bf9c:	460b      	mov	r3, r1
 800bf9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bfa6:	78fa      	ldrb	r2, [r7, #3]
 800bfa8:	6879      	ldr	r1, [r7, #4]
 800bfaa:	4613      	mov	r3, r2
 800bfac:	00db      	lsls	r3, r3, #3
 800bfae:	4413      	add	r3, r2
 800bfb0:	009b      	lsls	r3, r3, #2
 800bfb2:	440b      	add	r3, r1
 800bfb4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800bfb8:	681a      	ldr	r2, [r3, #0]
 800bfba:	78fb      	ldrb	r3, [r7, #3]
 800bfbc:	4619      	mov	r1, r3
 800bfbe:	f7fe fb41 	bl	800a644 <USBD_LL_DataOutStage>
}
 800bfc2:	bf00      	nop
 800bfc4:	3708      	adds	r7, #8
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}

0800bfca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfca:	b580      	push	{r7, lr}
 800bfcc:	b082      	sub	sp, #8
 800bfce:	af00      	add	r7, sp, #0
 800bfd0:	6078      	str	r0, [r7, #4]
 800bfd2:	460b      	mov	r3, r1
 800bfd4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bfdc:	78fa      	ldrb	r2, [r7, #3]
 800bfde:	6879      	ldr	r1, [r7, #4]
 800bfe0:	4613      	mov	r3, r2
 800bfe2:	00db      	lsls	r3, r3, #3
 800bfe4:	4413      	add	r3, r2
 800bfe6:	009b      	lsls	r3, r3, #2
 800bfe8:	440b      	add	r3, r1
 800bfea:	3348      	adds	r3, #72	; 0x48
 800bfec:	681a      	ldr	r2, [r3, #0]
 800bfee:	78fb      	ldrb	r3, [r7, #3]
 800bff0:	4619      	mov	r1, r3
 800bff2:	f7fe fbda 	bl	800a7aa <USBD_LL_DataInStage>
}
 800bff6:	bf00      	nop
 800bff8:	3708      	adds	r7, #8
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd80      	pop	{r7, pc}

0800bffe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bffe:	b580      	push	{r7, lr}
 800c000:	b082      	sub	sp, #8
 800c002:	af00      	add	r7, sp, #0
 800c004:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c00c:	4618      	mov	r0, r3
 800c00e:	f7fe fd14 	bl	800aa3a <USBD_LL_SOF>
}
 800c012:	bf00      	nop
 800c014:	3708      	adds	r7, #8
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}

0800c01a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c01a:	b580      	push	{r7, lr}
 800c01c:	b084      	sub	sp, #16
 800c01e:	af00      	add	r7, sp, #0
 800c020:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c022:	2301      	movs	r3, #1
 800c024:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	691b      	ldr	r3, [r3, #16]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d102      	bne.n	800c034 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c02e:	2300      	movs	r3, #0
 800c030:	73fb      	strb	r3, [r7, #15]
 800c032:	e008      	b.n	800c046 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	691b      	ldr	r3, [r3, #16]
 800c038:	2b02      	cmp	r3, #2
 800c03a:	d102      	bne.n	800c042 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c03c:	2301      	movs	r3, #1
 800c03e:	73fb      	strb	r3, [r7, #15]
 800c040:	e001      	b.n	800c046 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c042:	f7f5 fb4d 	bl	80016e0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c04c:	7bfa      	ldrb	r2, [r7, #15]
 800c04e:	4611      	mov	r1, r2
 800c050:	4618      	mov	r0, r3
 800c052:	f7fe fcae 	bl	800a9b2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c05c:	4618      	mov	r0, r3
 800c05e:	f7fe fc56 	bl	800a90e <USBD_LL_Reset>
}
 800c062:	bf00      	nop
 800c064:	3710      	adds	r7, #16
 800c066:	46bd      	mov	sp, r7
 800c068:	bd80      	pop	{r7, pc}
	...

0800c06c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b082      	sub	sp, #8
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c07a:	4618      	mov	r0, r3
 800c07c:	f7fe fca9 	bl	800a9d2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	687a      	ldr	r2, [r7, #4]
 800c08c:	6812      	ldr	r2, [r2, #0]
 800c08e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c092:	f043 0301 	orr.w	r3, r3, #1
 800c096:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	6a1b      	ldr	r3, [r3, #32]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d005      	beq.n	800c0ac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c0a0:	4b04      	ldr	r3, [pc, #16]	; (800c0b4 <HAL_PCD_SuspendCallback+0x48>)
 800c0a2:	691b      	ldr	r3, [r3, #16]
 800c0a4:	4a03      	ldr	r2, [pc, #12]	; (800c0b4 <HAL_PCD_SuspendCallback+0x48>)
 800c0a6:	f043 0306 	orr.w	r3, r3, #6
 800c0aa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c0ac:	bf00      	nop
 800c0ae:	3708      	adds	r7, #8
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bd80      	pop	{r7, pc}
 800c0b4:	e000ed00 	.word	0xe000ed00

0800c0b8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b082      	sub	sp, #8
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f7fe fc9f 	bl	800aa0a <USBD_LL_Resume>
}
 800c0cc:	bf00      	nop
 800c0ce:	3708      	adds	r7, #8
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}

0800c0d4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b082      	sub	sp, #8
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
 800c0dc:	460b      	mov	r3, r1
 800c0de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c0e6:	78fa      	ldrb	r2, [r7, #3]
 800c0e8:	4611      	mov	r1, r2
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f7fe fcf7 	bl	800aade <USBD_LL_IsoOUTIncomplete>
}
 800c0f0:	bf00      	nop
 800c0f2:	3708      	adds	r7, #8
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}

0800c0f8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b082      	sub	sp, #8
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
 800c100:	460b      	mov	r3, r1
 800c102:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c10a:	78fa      	ldrb	r2, [r7, #3]
 800c10c:	4611      	mov	r1, r2
 800c10e:	4618      	mov	r0, r3
 800c110:	f7fe fcb3 	bl	800aa7a <USBD_LL_IsoINIncomplete>
}
 800c114:	bf00      	nop
 800c116:	3708      	adds	r7, #8
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}

0800c11c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b082      	sub	sp, #8
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c12a:	4618      	mov	r0, r3
 800c12c:	f7fe fd09 	bl	800ab42 <USBD_LL_DevConnected>
}
 800c130:	bf00      	nop
 800c132:	3708      	adds	r7, #8
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}

0800c138 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b082      	sub	sp, #8
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c146:	4618      	mov	r0, r3
 800c148:	f7fe fd06 	bl	800ab58 <USBD_LL_DevDisconnected>
}
 800c14c:	bf00      	nop
 800c14e:	3708      	adds	r7, #8
 800c150:	46bd      	mov	sp, r7
 800c152:	bd80      	pop	{r7, pc}

0800c154 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b082      	sub	sp, #8
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	781b      	ldrb	r3, [r3, #0]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d13e      	bne.n	800c1e2 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c164:	4a21      	ldr	r2, [pc, #132]	; (800c1ec <USBD_LL_Init+0x98>)
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	4a1f      	ldr	r2, [pc, #124]	; (800c1ec <USBD_LL_Init+0x98>)
 800c170:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c174:	4b1d      	ldr	r3, [pc, #116]	; (800c1ec <USBD_LL_Init+0x98>)
 800c176:	4a1e      	ldr	r2, [pc, #120]	; (800c1f0 <USBD_LL_Init+0x9c>)
 800c178:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800c17a:	4b1c      	ldr	r3, [pc, #112]	; (800c1ec <USBD_LL_Init+0x98>)
 800c17c:	2209      	movs	r2, #9
 800c17e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c180:	4b1a      	ldr	r3, [pc, #104]	; (800c1ec <USBD_LL_Init+0x98>)
 800c182:	2202      	movs	r2, #2
 800c184:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c186:	4b19      	ldr	r3, [pc, #100]	; (800c1ec <USBD_LL_Init+0x98>)
 800c188:	2200      	movs	r2, #0
 800c18a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c18c:	4b17      	ldr	r3, [pc, #92]	; (800c1ec <USBD_LL_Init+0x98>)
 800c18e:	2202      	movs	r2, #2
 800c190:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c192:	4b16      	ldr	r3, [pc, #88]	; (800c1ec <USBD_LL_Init+0x98>)
 800c194:	2200      	movs	r2, #0
 800c196:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c198:	4b14      	ldr	r3, [pc, #80]	; (800c1ec <USBD_LL_Init+0x98>)
 800c19a:	2200      	movs	r2, #0
 800c19c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c19e:	4b13      	ldr	r3, [pc, #76]	; (800c1ec <USBD_LL_Init+0x98>)
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800c1a4:	4b11      	ldr	r3, [pc, #68]	; (800c1ec <USBD_LL_Init+0x98>)
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c1aa:	4b10      	ldr	r3, [pc, #64]	; (800c1ec <USBD_LL_Init+0x98>)
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c1b0:	4b0e      	ldr	r3, [pc, #56]	; (800c1ec <USBD_LL_Init+0x98>)
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c1b6:	480d      	ldr	r0, [pc, #52]	; (800c1ec <USBD_LL_Init+0x98>)
 800c1b8:	f7f7 f944 	bl	8003444 <HAL_PCD_Init>
 800c1bc:	4603      	mov	r3, r0
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d001      	beq.n	800c1c6 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800c1c2:	f7f5 fa8d 	bl	80016e0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c1c6:	2180      	movs	r1, #128	; 0x80
 800c1c8:	4808      	ldr	r0, [pc, #32]	; (800c1ec <USBD_LL_Init+0x98>)
 800c1ca:	f7f8 fbb4 	bl	8004936 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c1ce:	2240      	movs	r2, #64	; 0x40
 800c1d0:	2100      	movs	r1, #0
 800c1d2:	4806      	ldr	r0, [pc, #24]	; (800c1ec <USBD_LL_Init+0x98>)
 800c1d4:	f7f8 fb68 	bl	80048a8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c1d8:	2280      	movs	r2, #128	; 0x80
 800c1da:	2101      	movs	r1, #1
 800c1dc:	4803      	ldr	r0, [pc, #12]	; (800c1ec <USBD_LL_Init+0x98>)
 800c1de:	f7f8 fb63 	bl	80048a8 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800c1e2:	2300      	movs	r3, #0
}
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	3708      	adds	r7, #8
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bd80      	pop	{r7, pc}
 800c1ec:	24001a98 	.word	0x24001a98
 800c1f0:	40080000 	.word	0x40080000

0800c1f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b084      	sub	sp, #16
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c200:	2300      	movs	r3, #0
 800c202:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c20a:	4618      	mov	r0, r3
 800c20c:	f7f7 fa3e 	bl	800368c <HAL_PCD_Start>
 800c210:	4603      	mov	r3, r0
 800c212:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c214:	7bfb      	ldrb	r3, [r7, #15]
 800c216:	4618      	mov	r0, r3
 800c218:	f000 f942 	bl	800c4a0 <USBD_Get_USB_Status>
 800c21c:	4603      	mov	r3, r0
 800c21e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c220:	7bbb      	ldrb	r3, [r7, #14]
}
 800c222:	4618      	mov	r0, r3
 800c224:	3710      	adds	r7, #16
 800c226:	46bd      	mov	sp, r7
 800c228:	bd80      	pop	{r7, pc}

0800c22a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c22a:	b580      	push	{r7, lr}
 800c22c:	b084      	sub	sp, #16
 800c22e:	af00      	add	r7, sp, #0
 800c230:	6078      	str	r0, [r7, #4]
 800c232:	4608      	mov	r0, r1
 800c234:	4611      	mov	r1, r2
 800c236:	461a      	mov	r2, r3
 800c238:	4603      	mov	r3, r0
 800c23a:	70fb      	strb	r3, [r7, #3]
 800c23c:	460b      	mov	r3, r1
 800c23e:	70bb      	strb	r3, [r7, #2]
 800c240:	4613      	mov	r3, r2
 800c242:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c244:	2300      	movs	r3, #0
 800c246:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c248:	2300      	movs	r3, #0
 800c24a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c252:	78bb      	ldrb	r3, [r7, #2]
 800c254:	883a      	ldrh	r2, [r7, #0]
 800c256:	78f9      	ldrb	r1, [r7, #3]
 800c258:	f7f7 ff3e 	bl	80040d8 <HAL_PCD_EP_Open>
 800c25c:	4603      	mov	r3, r0
 800c25e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c260:	7bfb      	ldrb	r3, [r7, #15]
 800c262:	4618      	mov	r0, r3
 800c264:	f000 f91c 	bl	800c4a0 <USBD_Get_USB_Status>
 800c268:	4603      	mov	r3, r0
 800c26a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c26c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c26e:	4618      	mov	r0, r3
 800c270:	3710      	adds	r7, #16
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}

0800c276 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c276:	b580      	push	{r7, lr}
 800c278:	b084      	sub	sp, #16
 800c27a:	af00      	add	r7, sp, #0
 800c27c:	6078      	str	r0, [r7, #4]
 800c27e:	460b      	mov	r3, r1
 800c280:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c282:	2300      	movs	r3, #0
 800c284:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c286:	2300      	movs	r3, #0
 800c288:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c290:	78fa      	ldrb	r2, [r7, #3]
 800c292:	4611      	mov	r1, r2
 800c294:	4618      	mov	r0, r3
 800c296:	f7f7 ff87 	bl	80041a8 <HAL_PCD_EP_Close>
 800c29a:	4603      	mov	r3, r0
 800c29c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c29e:	7bfb      	ldrb	r3, [r7, #15]
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	f000 f8fd 	bl	800c4a0 <USBD_Get_USB_Status>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	3710      	adds	r7, #16
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}

0800c2b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b084      	sub	sp, #16
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
 800c2bc:	460b      	mov	r3, r1
 800c2be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c2ce:	78fa      	ldrb	r2, [r7, #3]
 800c2d0:	4611      	mov	r1, r2
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f7f8 f841 	bl	800435a <HAL_PCD_EP_SetStall>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2dc:	7bfb      	ldrb	r3, [r7, #15]
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f000 f8de 	bl	800c4a0 <USBD_Get_USB_Status>
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3710      	adds	r7, #16
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}

0800c2f2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c2f2:	b580      	push	{r7, lr}
 800c2f4:	b084      	sub	sp, #16
 800c2f6:	af00      	add	r7, sp, #0
 800c2f8:	6078      	str	r0, [r7, #4]
 800c2fa:	460b      	mov	r3, r1
 800c2fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2fe:	2300      	movs	r3, #0
 800c300:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c302:	2300      	movs	r3, #0
 800c304:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c30c:	78fa      	ldrb	r2, [r7, #3]
 800c30e:	4611      	mov	r1, r2
 800c310:	4618      	mov	r0, r3
 800c312:	f7f8 f886 	bl	8004422 <HAL_PCD_EP_ClrStall>
 800c316:	4603      	mov	r3, r0
 800c318:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c31a:	7bfb      	ldrb	r3, [r7, #15]
 800c31c:	4618      	mov	r0, r3
 800c31e:	f000 f8bf 	bl	800c4a0 <USBD_Get_USB_Status>
 800c322:	4603      	mov	r3, r0
 800c324:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c326:	7bbb      	ldrb	r3, [r7, #14]
}
 800c328:	4618      	mov	r0, r3
 800c32a:	3710      	adds	r7, #16
 800c32c:	46bd      	mov	sp, r7
 800c32e:	bd80      	pop	{r7, pc}

0800c330 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c330:	b480      	push	{r7}
 800c332:	b085      	sub	sp, #20
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
 800c338:	460b      	mov	r3, r1
 800c33a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c342:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c344:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	da0b      	bge.n	800c364 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c34c:	78fb      	ldrb	r3, [r7, #3]
 800c34e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c352:	68f9      	ldr	r1, [r7, #12]
 800c354:	4613      	mov	r3, r2
 800c356:	00db      	lsls	r3, r3, #3
 800c358:	4413      	add	r3, r2
 800c35a:	009b      	lsls	r3, r3, #2
 800c35c:	440b      	add	r3, r1
 800c35e:	333e      	adds	r3, #62	; 0x3e
 800c360:	781b      	ldrb	r3, [r3, #0]
 800c362:	e00b      	b.n	800c37c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c364:	78fb      	ldrb	r3, [r7, #3]
 800c366:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c36a:	68f9      	ldr	r1, [r7, #12]
 800c36c:	4613      	mov	r3, r2
 800c36e:	00db      	lsls	r3, r3, #3
 800c370:	4413      	add	r3, r2
 800c372:	009b      	lsls	r3, r3, #2
 800c374:	440b      	add	r3, r1
 800c376:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c37a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c37c:	4618      	mov	r0, r3
 800c37e:	3714      	adds	r7, #20
 800c380:	46bd      	mov	sp, r7
 800c382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c386:	4770      	bx	lr

0800c388 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b084      	sub	sp, #16
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
 800c390:	460b      	mov	r3, r1
 800c392:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c394:	2300      	movs	r3, #0
 800c396:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c398:	2300      	movs	r3, #0
 800c39a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c3a2:	78fa      	ldrb	r2, [r7, #3]
 800c3a4:	4611      	mov	r1, r2
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f7f7 fe71 	bl	800408e <HAL_PCD_SetAddress>
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3b0:	7bfb      	ldrb	r3, [r7, #15]
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	f000 f874 	bl	800c4a0 <USBD_Get_USB_Status>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3be:	4618      	mov	r0, r3
 800c3c0:	3710      	adds	r7, #16
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd80      	pop	{r7, pc}

0800c3c6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c3c6:	b580      	push	{r7, lr}
 800c3c8:	b086      	sub	sp, #24
 800c3ca:	af00      	add	r7, sp, #0
 800c3cc:	60f8      	str	r0, [r7, #12]
 800c3ce:	607a      	str	r2, [r7, #4]
 800c3d0:	603b      	str	r3, [r7, #0]
 800c3d2:	460b      	mov	r3, r1
 800c3d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c3e4:	7af9      	ldrb	r1, [r7, #11]
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	687a      	ldr	r2, [r7, #4]
 800c3ea:	f7f7 ff7b 	bl	80042e4 <HAL_PCD_EP_Transmit>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3f2:	7dfb      	ldrb	r3, [r7, #23]
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f000 f853 	bl	800c4a0 <USBD_Get_USB_Status>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c3fe:	7dbb      	ldrb	r3, [r7, #22]
}
 800c400:	4618      	mov	r0, r3
 800c402:	3718      	adds	r7, #24
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}

0800c408 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b086      	sub	sp, #24
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	60f8      	str	r0, [r7, #12]
 800c410:	607a      	str	r2, [r7, #4]
 800c412:	603b      	str	r3, [r7, #0]
 800c414:	460b      	mov	r3, r1
 800c416:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c418:	2300      	movs	r3, #0
 800c41a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c41c:	2300      	movs	r3, #0
 800c41e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c426:	7af9      	ldrb	r1, [r7, #11]
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	687a      	ldr	r2, [r7, #4]
 800c42c:	f7f7 ff06 	bl	800423c <HAL_PCD_EP_Receive>
 800c430:	4603      	mov	r3, r0
 800c432:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c434:	7dfb      	ldrb	r3, [r7, #23]
 800c436:	4618      	mov	r0, r3
 800c438:	f000 f832 	bl	800c4a0 <USBD_Get_USB_Status>
 800c43c:	4603      	mov	r3, r0
 800c43e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c440:	7dbb      	ldrb	r3, [r7, #22]
}
 800c442:	4618      	mov	r0, r3
 800c444:	3718      	adds	r7, #24
 800c446:	46bd      	mov	sp, r7
 800c448:	bd80      	pop	{r7, pc}

0800c44a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c44a:	b580      	push	{r7, lr}
 800c44c:	b082      	sub	sp, #8
 800c44e:	af00      	add	r7, sp, #0
 800c450:	6078      	str	r0, [r7, #4]
 800c452:	460b      	mov	r3, r1
 800c454:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c45c:	78fa      	ldrb	r2, [r7, #3]
 800c45e:	4611      	mov	r1, r2
 800c460:	4618      	mov	r0, r3
 800c462:	f7f7 ff27 	bl	80042b4 <HAL_PCD_EP_GetRxCount>
 800c466:	4603      	mov	r3, r0
}
 800c468:	4618      	mov	r0, r3
 800c46a:	3708      	adds	r7, #8
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}

0800c470 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c470:	b480      	push	{r7}
 800c472:	b083      	sub	sp, #12
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c478:	4b03      	ldr	r3, [pc, #12]	; (800c488 <USBD_static_malloc+0x18>)
}
 800c47a:	4618      	mov	r0, r3
 800c47c:	370c      	adds	r7, #12
 800c47e:	46bd      	mov	sp, r7
 800c480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c484:	4770      	bx	lr
 800c486:	bf00      	nop
 800c488:	24001fa4 	.word	0x24001fa4

0800c48c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c48c:	b480      	push	{r7}
 800c48e:	b083      	sub	sp, #12
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800c494:	bf00      	nop
 800c496:	370c      	adds	r7, #12
 800c498:	46bd      	mov	sp, r7
 800c49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49e:	4770      	bx	lr

0800c4a0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c4a0:	b480      	push	{r7}
 800c4a2:	b085      	sub	sp, #20
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c4ae:	79fb      	ldrb	r3, [r7, #7]
 800c4b0:	2b03      	cmp	r3, #3
 800c4b2:	d817      	bhi.n	800c4e4 <USBD_Get_USB_Status+0x44>
 800c4b4:	a201      	add	r2, pc, #4	; (adr r2, 800c4bc <USBD_Get_USB_Status+0x1c>)
 800c4b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4ba:	bf00      	nop
 800c4bc:	0800c4cd 	.word	0x0800c4cd
 800c4c0:	0800c4d3 	.word	0x0800c4d3
 800c4c4:	0800c4d9 	.word	0x0800c4d9
 800c4c8:	0800c4df 	.word	0x0800c4df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	73fb      	strb	r3, [r7, #15]
    break;
 800c4d0:	e00b      	b.n	800c4ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c4d2:	2303      	movs	r3, #3
 800c4d4:	73fb      	strb	r3, [r7, #15]
    break;
 800c4d6:	e008      	b.n	800c4ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c4d8:	2301      	movs	r3, #1
 800c4da:	73fb      	strb	r3, [r7, #15]
    break;
 800c4dc:	e005      	b.n	800c4ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c4de:	2303      	movs	r3, #3
 800c4e0:	73fb      	strb	r3, [r7, #15]
    break;
 800c4e2:	e002      	b.n	800c4ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c4e4:	2303      	movs	r3, #3
 800c4e6:	73fb      	strb	r3, [r7, #15]
    break;
 800c4e8:	bf00      	nop
  }
  return usb_status;
 800c4ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	3714      	adds	r7, #20
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f6:	4770      	bx	lr

0800c4f8 <malloc>:
 800c4f8:	4b02      	ldr	r3, [pc, #8]	; (800c504 <malloc+0xc>)
 800c4fa:	4601      	mov	r1, r0
 800c4fc:	6818      	ldr	r0, [r3, #0]
 800c4fe:	f000 b82b 	b.w	800c558 <_malloc_r>
 800c502:	bf00      	nop
 800c504:	2400019c 	.word	0x2400019c

0800c508 <free>:
 800c508:	4b02      	ldr	r3, [pc, #8]	; (800c514 <free+0xc>)
 800c50a:	4601      	mov	r1, r0
 800c50c:	6818      	ldr	r0, [r3, #0]
 800c50e:	f001 bc9b 	b.w	800de48 <_free_r>
 800c512:	bf00      	nop
 800c514:	2400019c 	.word	0x2400019c

0800c518 <sbrk_aligned>:
 800c518:	b570      	push	{r4, r5, r6, lr}
 800c51a:	4e0e      	ldr	r6, [pc, #56]	; (800c554 <sbrk_aligned+0x3c>)
 800c51c:	460c      	mov	r4, r1
 800c51e:	6831      	ldr	r1, [r6, #0]
 800c520:	4605      	mov	r5, r0
 800c522:	b911      	cbnz	r1, 800c52a <sbrk_aligned+0x12>
 800c524:	f000 fe44 	bl	800d1b0 <_sbrk_r>
 800c528:	6030      	str	r0, [r6, #0]
 800c52a:	4621      	mov	r1, r4
 800c52c:	4628      	mov	r0, r5
 800c52e:	f000 fe3f 	bl	800d1b0 <_sbrk_r>
 800c532:	1c43      	adds	r3, r0, #1
 800c534:	d00a      	beq.n	800c54c <sbrk_aligned+0x34>
 800c536:	1cc4      	adds	r4, r0, #3
 800c538:	f024 0403 	bic.w	r4, r4, #3
 800c53c:	42a0      	cmp	r0, r4
 800c53e:	d007      	beq.n	800c550 <sbrk_aligned+0x38>
 800c540:	1a21      	subs	r1, r4, r0
 800c542:	4628      	mov	r0, r5
 800c544:	f000 fe34 	bl	800d1b0 <_sbrk_r>
 800c548:	3001      	adds	r0, #1
 800c54a:	d101      	bne.n	800c550 <sbrk_aligned+0x38>
 800c54c:	f04f 34ff 	mov.w	r4, #4294967295
 800c550:	4620      	mov	r0, r4
 800c552:	bd70      	pop	{r4, r5, r6, pc}
 800c554:	240021c8 	.word	0x240021c8

0800c558 <_malloc_r>:
 800c558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c55c:	1ccd      	adds	r5, r1, #3
 800c55e:	f025 0503 	bic.w	r5, r5, #3
 800c562:	3508      	adds	r5, #8
 800c564:	2d0c      	cmp	r5, #12
 800c566:	bf38      	it	cc
 800c568:	250c      	movcc	r5, #12
 800c56a:	2d00      	cmp	r5, #0
 800c56c:	4607      	mov	r7, r0
 800c56e:	db01      	blt.n	800c574 <_malloc_r+0x1c>
 800c570:	42a9      	cmp	r1, r5
 800c572:	d905      	bls.n	800c580 <_malloc_r+0x28>
 800c574:	230c      	movs	r3, #12
 800c576:	603b      	str	r3, [r7, #0]
 800c578:	2600      	movs	r6, #0
 800c57a:	4630      	mov	r0, r6
 800c57c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c580:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c654 <_malloc_r+0xfc>
 800c584:	f000 f868 	bl	800c658 <__malloc_lock>
 800c588:	f8d8 3000 	ldr.w	r3, [r8]
 800c58c:	461c      	mov	r4, r3
 800c58e:	bb5c      	cbnz	r4, 800c5e8 <_malloc_r+0x90>
 800c590:	4629      	mov	r1, r5
 800c592:	4638      	mov	r0, r7
 800c594:	f7ff ffc0 	bl	800c518 <sbrk_aligned>
 800c598:	1c43      	adds	r3, r0, #1
 800c59a:	4604      	mov	r4, r0
 800c59c:	d155      	bne.n	800c64a <_malloc_r+0xf2>
 800c59e:	f8d8 4000 	ldr.w	r4, [r8]
 800c5a2:	4626      	mov	r6, r4
 800c5a4:	2e00      	cmp	r6, #0
 800c5a6:	d145      	bne.n	800c634 <_malloc_r+0xdc>
 800c5a8:	2c00      	cmp	r4, #0
 800c5aa:	d048      	beq.n	800c63e <_malloc_r+0xe6>
 800c5ac:	6823      	ldr	r3, [r4, #0]
 800c5ae:	4631      	mov	r1, r6
 800c5b0:	4638      	mov	r0, r7
 800c5b2:	eb04 0903 	add.w	r9, r4, r3
 800c5b6:	f000 fdfb 	bl	800d1b0 <_sbrk_r>
 800c5ba:	4581      	cmp	r9, r0
 800c5bc:	d13f      	bne.n	800c63e <_malloc_r+0xe6>
 800c5be:	6821      	ldr	r1, [r4, #0]
 800c5c0:	1a6d      	subs	r5, r5, r1
 800c5c2:	4629      	mov	r1, r5
 800c5c4:	4638      	mov	r0, r7
 800c5c6:	f7ff ffa7 	bl	800c518 <sbrk_aligned>
 800c5ca:	3001      	adds	r0, #1
 800c5cc:	d037      	beq.n	800c63e <_malloc_r+0xe6>
 800c5ce:	6823      	ldr	r3, [r4, #0]
 800c5d0:	442b      	add	r3, r5
 800c5d2:	6023      	str	r3, [r4, #0]
 800c5d4:	f8d8 3000 	ldr.w	r3, [r8]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d038      	beq.n	800c64e <_malloc_r+0xf6>
 800c5dc:	685a      	ldr	r2, [r3, #4]
 800c5de:	42a2      	cmp	r2, r4
 800c5e0:	d12b      	bne.n	800c63a <_malloc_r+0xe2>
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	605a      	str	r2, [r3, #4]
 800c5e6:	e00f      	b.n	800c608 <_malloc_r+0xb0>
 800c5e8:	6822      	ldr	r2, [r4, #0]
 800c5ea:	1b52      	subs	r2, r2, r5
 800c5ec:	d41f      	bmi.n	800c62e <_malloc_r+0xd6>
 800c5ee:	2a0b      	cmp	r2, #11
 800c5f0:	d917      	bls.n	800c622 <_malloc_r+0xca>
 800c5f2:	1961      	adds	r1, r4, r5
 800c5f4:	42a3      	cmp	r3, r4
 800c5f6:	6025      	str	r5, [r4, #0]
 800c5f8:	bf18      	it	ne
 800c5fa:	6059      	strne	r1, [r3, #4]
 800c5fc:	6863      	ldr	r3, [r4, #4]
 800c5fe:	bf08      	it	eq
 800c600:	f8c8 1000 	streq.w	r1, [r8]
 800c604:	5162      	str	r2, [r4, r5]
 800c606:	604b      	str	r3, [r1, #4]
 800c608:	4638      	mov	r0, r7
 800c60a:	f104 060b 	add.w	r6, r4, #11
 800c60e:	f000 f829 	bl	800c664 <__malloc_unlock>
 800c612:	f026 0607 	bic.w	r6, r6, #7
 800c616:	1d23      	adds	r3, r4, #4
 800c618:	1af2      	subs	r2, r6, r3
 800c61a:	d0ae      	beq.n	800c57a <_malloc_r+0x22>
 800c61c:	1b9b      	subs	r3, r3, r6
 800c61e:	50a3      	str	r3, [r4, r2]
 800c620:	e7ab      	b.n	800c57a <_malloc_r+0x22>
 800c622:	42a3      	cmp	r3, r4
 800c624:	6862      	ldr	r2, [r4, #4]
 800c626:	d1dd      	bne.n	800c5e4 <_malloc_r+0x8c>
 800c628:	f8c8 2000 	str.w	r2, [r8]
 800c62c:	e7ec      	b.n	800c608 <_malloc_r+0xb0>
 800c62e:	4623      	mov	r3, r4
 800c630:	6864      	ldr	r4, [r4, #4]
 800c632:	e7ac      	b.n	800c58e <_malloc_r+0x36>
 800c634:	4634      	mov	r4, r6
 800c636:	6876      	ldr	r6, [r6, #4]
 800c638:	e7b4      	b.n	800c5a4 <_malloc_r+0x4c>
 800c63a:	4613      	mov	r3, r2
 800c63c:	e7cc      	b.n	800c5d8 <_malloc_r+0x80>
 800c63e:	230c      	movs	r3, #12
 800c640:	603b      	str	r3, [r7, #0]
 800c642:	4638      	mov	r0, r7
 800c644:	f000 f80e 	bl	800c664 <__malloc_unlock>
 800c648:	e797      	b.n	800c57a <_malloc_r+0x22>
 800c64a:	6025      	str	r5, [r4, #0]
 800c64c:	e7dc      	b.n	800c608 <_malloc_r+0xb0>
 800c64e:	605b      	str	r3, [r3, #4]
 800c650:	deff      	udf	#255	; 0xff
 800c652:	bf00      	nop
 800c654:	240021c4 	.word	0x240021c4

0800c658 <__malloc_lock>:
 800c658:	4801      	ldr	r0, [pc, #4]	; (800c660 <__malloc_lock+0x8>)
 800c65a:	f000 bdf6 	b.w	800d24a <__retarget_lock_acquire_recursive>
 800c65e:	bf00      	nop
 800c660:	2400230c 	.word	0x2400230c

0800c664 <__malloc_unlock>:
 800c664:	4801      	ldr	r0, [pc, #4]	; (800c66c <__malloc_unlock+0x8>)
 800c666:	f000 bdf1 	b.w	800d24c <__retarget_lock_release_recursive>
 800c66a:	bf00      	nop
 800c66c:	2400230c 	.word	0x2400230c

0800c670 <__cvt>:
 800c670:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c672:	ed2d 8b02 	vpush	{d8}
 800c676:	eeb0 8b40 	vmov.f64	d8, d0
 800c67a:	b085      	sub	sp, #20
 800c67c:	4617      	mov	r7, r2
 800c67e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800c680:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c682:	ee18 2a90 	vmov	r2, s17
 800c686:	f025 0520 	bic.w	r5, r5, #32
 800c68a:	2a00      	cmp	r2, #0
 800c68c:	bfb6      	itet	lt
 800c68e:	222d      	movlt	r2, #45	; 0x2d
 800c690:	2200      	movge	r2, #0
 800c692:	eeb1 8b40 	vneglt.f64	d8, d0
 800c696:	2d46      	cmp	r5, #70	; 0x46
 800c698:	460c      	mov	r4, r1
 800c69a:	701a      	strb	r2, [r3, #0]
 800c69c:	d004      	beq.n	800c6a8 <__cvt+0x38>
 800c69e:	2d45      	cmp	r5, #69	; 0x45
 800c6a0:	d100      	bne.n	800c6a4 <__cvt+0x34>
 800c6a2:	3401      	adds	r4, #1
 800c6a4:	2102      	movs	r1, #2
 800c6a6:	e000      	b.n	800c6aa <__cvt+0x3a>
 800c6a8:	2103      	movs	r1, #3
 800c6aa:	ab03      	add	r3, sp, #12
 800c6ac:	9301      	str	r3, [sp, #4]
 800c6ae:	ab02      	add	r3, sp, #8
 800c6b0:	9300      	str	r3, [sp, #0]
 800c6b2:	4622      	mov	r2, r4
 800c6b4:	4633      	mov	r3, r6
 800c6b6:	eeb0 0b48 	vmov.f64	d0, d8
 800c6ba:	f000 fe59 	bl	800d370 <_dtoa_r>
 800c6be:	2d47      	cmp	r5, #71	; 0x47
 800c6c0:	d101      	bne.n	800c6c6 <__cvt+0x56>
 800c6c2:	07fb      	lsls	r3, r7, #31
 800c6c4:	d51a      	bpl.n	800c6fc <__cvt+0x8c>
 800c6c6:	2d46      	cmp	r5, #70	; 0x46
 800c6c8:	eb00 0204 	add.w	r2, r0, r4
 800c6cc:	d10c      	bne.n	800c6e8 <__cvt+0x78>
 800c6ce:	7803      	ldrb	r3, [r0, #0]
 800c6d0:	2b30      	cmp	r3, #48	; 0x30
 800c6d2:	d107      	bne.n	800c6e4 <__cvt+0x74>
 800c6d4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c6d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6dc:	bf1c      	itt	ne
 800c6de:	f1c4 0401 	rsbne	r4, r4, #1
 800c6e2:	6034      	strne	r4, [r6, #0]
 800c6e4:	6833      	ldr	r3, [r6, #0]
 800c6e6:	441a      	add	r2, r3
 800c6e8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c6ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6f0:	bf08      	it	eq
 800c6f2:	9203      	streq	r2, [sp, #12]
 800c6f4:	2130      	movs	r1, #48	; 0x30
 800c6f6:	9b03      	ldr	r3, [sp, #12]
 800c6f8:	4293      	cmp	r3, r2
 800c6fa:	d307      	bcc.n	800c70c <__cvt+0x9c>
 800c6fc:	9b03      	ldr	r3, [sp, #12]
 800c6fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c700:	1a1b      	subs	r3, r3, r0
 800c702:	6013      	str	r3, [r2, #0]
 800c704:	b005      	add	sp, #20
 800c706:	ecbd 8b02 	vpop	{d8}
 800c70a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c70c:	1c5c      	adds	r4, r3, #1
 800c70e:	9403      	str	r4, [sp, #12]
 800c710:	7019      	strb	r1, [r3, #0]
 800c712:	e7f0      	b.n	800c6f6 <__cvt+0x86>

0800c714 <__exponent>:
 800c714:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c716:	4603      	mov	r3, r0
 800c718:	2900      	cmp	r1, #0
 800c71a:	bfb8      	it	lt
 800c71c:	4249      	neglt	r1, r1
 800c71e:	f803 2b02 	strb.w	r2, [r3], #2
 800c722:	bfb4      	ite	lt
 800c724:	222d      	movlt	r2, #45	; 0x2d
 800c726:	222b      	movge	r2, #43	; 0x2b
 800c728:	2909      	cmp	r1, #9
 800c72a:	7042      	strb	r2, [r0, #1]
 800c72c:	dd2a      	ble.n	800c784 <__exponent+0x70>
 800c72e:	f10d 0207 	add.w	r2, sp, #7
 800c732:	4617      	mov	r7, r2
 800c734:	260a      	movs	r6, #10
 800c736:	4694      	mov	ip, r2
 800c738:	fb91 f5f6 	sdiv	r5, r1, r6
 800c73c:	fb06 1415 	mls	r4, r6, r5, r1
 800c740:	3430      	adds	r4, #48	; 0x30
 800c742:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800c746:	460c      	mov	r4, r1
 800c748:	2c63      	cmp	r4, #99	; 0x63
 800c74a:	f102 32ff 	add.w	r2, r2, #4294967295
 800c74e:	4629      	mov	r1, r5
 800c750:	dcf1      	bgt.n	800c736 <__exponent+0x22>
 800c752:	3130      	adds	r1, #48	; 0x30
 800c754:	f1ac 0402 	sub.w	r4, ip, #2
 800c758:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c75c:	1c41      	adds	r1, r0, #1
 800c75e:	4622      	mov	r2, r4
 800c760:	42ba      	cmp	r2, r7
 800c762:	d30a      	bcc.n	800c77a <__exponent+0x66>
 800c764:	f10d 0209 	add.w	r2, sp, #9
 800c768:	eba2 020c 	sub.w	r2, r2, ip
 800c76c:	42bc      	cmp	r4, r7
 800c76e:	bf88      	it	hi
 800c770:	2200      	movhi	r2, #0
 800c772:	4413      	add	r3, r2
 800c774:	1a18      	subs	r0, r3, r0
 800c776:	b003      	add	sp, #12
 800c778:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c77a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c77e:	f801 5f01 	strb.w	r5, [r1, #1]!
 800c782:	e7ed      	b.n	800c760 <__exponent+0x4c>
 800c784:	2330      	movs	r3, #48	; 0x30
 800c786:	3130      	adds	r1, #48	; 0x30
 800c788:	7083      	strb	r3, [r0, #2]
 800c78a:	70c1      	strb	r1, [r0, #3]
 800c78c:	1d03      	adds	r3, r0, #4
 800c78e:	e7f1      	b.n	800c774 <__exponent+0x60>

0800c790 <_printf_float>:
 800c790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c794:	b08b      	sub	sp, #44	; 0x2c
 800c796:	460c      	mov	r4, r1
 800c798:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800c79c:	4616      	mov	r6, r2
 800c79e:	461f      	mov	r7, r3
 800c7a0:	4605      	mov	r5, r0
 800c7a2:	f000 fccd 	bl	800d140 <_localeconv_r>
 800c7a6:	f8d0 b000 	ldr.w	fp, [r0]
 800c7aa:	4658      	mov	r0, fp
 800c7ac:	f7f3 fde8 	bl	8000380 <strlen>
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	9308      	str	r3, [sp, #32]
 800c7b4:	f8d8 3000 	ldr.w	r3, [r8]
 800c7b8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c7bc:	6822      	ldr	r2, [r4, #0]
 800c7be:	3307      	adds	r3, #7
 800c7c0:	f023 0307 	bic.w	r3, r3, #7
 800c7c4:	f103 0108 	add.w	r1, r3, #8
 800c7c8:	f8c8 1000 	str.w	r1, [r8]
 800c7cc:	ed93 0b00 	vldr	d0, [r3]
 800c7d0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800ca30 <_printf_float+0x2a0>
 800c7d4:	eeb0 7bc0 	vabs.f64	d7, d0
 800c7d8:	eeb4 7b46 	vcmp.f64	d7, d6
 800c7dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7e0:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800c7e4:	4682      	mov	sl, r0
 800c7e6:	dd24      	ble.n	800c832 <_printf_float+0xa2>
 800c7e8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c7ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7f0:	d502      	bpl.n	800c7f8 <_printf_float+0x68>
 800c7f2:	232d      	movs	r3, #45	; 0x2d
 800c7f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7f8:	498f      	ldr	r1, [pc, #572]	; (800ca38 <_printf_float+0x2a8>)
 800c7fa:	4b90      	ldr	r3, [pc, #576]	; (800ca3c <_printf_float+0x2ac>)
 800c7fc:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800c800:	bf94      	ite	ls
 800c802:	4688      	movls	r8, r1
 800c804:	4698      	movhi	r8, r3
 800c806:	2303      	movs	r3, #3
 800c808:	6123      	str	r3, [r4, #16]
 800c80a:	f022 0204 	bic.w	r2, r2, #4
 800c80e:	2300      	movs	r3, #0
 800c810:	6022      	str	r2, [r4, #0]
 800c812:	9304      	str	r3, [sp, #16]
 800c814:	9700      	str	r7, [sp, #0]
 800c816:	4633      	mov	r3, r6
 800c818:	aa09      	add	r2, sp, #36	; 0x24
 800c81a:	4621      	mov	r1, r4
 800c81c:	4628      	mov	r0, r5
 800c81e:	f000 f9d1 	bl	800cbc4 <_printf_common>
 800c822:	3001      	adds	r0, #1
 800c824:	f040 808a 	bne.w	800c93c <_printf_float+0x1ac>
 800c828:	f04f 30ff 	mov.w	r0, #4294967295
 800c82c:	b00b      	add	sp, #44	; 0x2c
 800c82e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c832:	eeb4 0b40 	vcmp.f64	d0, d0
 800c836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c83a:	d709      	bvc.n	800c850 <_printf_float+0xc0>
 800c83c:	ee10 3a90 	vmov	r3, s1
 800c840:	2b00      	cmp	r3, #0
 800c842:	bfbc      	itt	lt
 800c844:	232d      	movlt	r3, #45	; 0x2d
 800c846:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c84a:	497d      	ldr	r1, [pc, #500]	; (800ca40 <_printf_float+0x2b0>)
 800c84c:	4b7d      	ldr	r3, [pc, #500]	; (800ca44 <_printf_float+0x2b4>)
 800c84e:	e7d5      	b.n	800c7fc <_printf_float+0x6c>
 800c850:	6863      	ldr	r3, [r4, #4]
 800c852:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800c856:	9104      	str	r1, [sp, #16]
 800c858:	1c59      	adds	r1, r3, #1
 800c85a:	d13c      	bne.n	800c8d6 <_printf_float+0x146>
 800c85c:	2306      	movs	r3, #6
 800c85e:	6063      	str	r3, [r4, #4]
 800c860:	2300      	movs	r3, #0
 800c862:	9303      	str	r3, [sp, #12]
 800c864:	ab08      	add	r3, sp, #32
 800c866:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800c86a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c86e:	ab07      	add	r3, sp, #28
 800c870:	6861      	ldr	r1, [r4, #4]
 800c872:	9300      	str	r3, [sp, #0]
 800c874:	6022      	str	r2, [r4, #0]
 800c876:	f10d 031b 	add.w	r3, sp, #27
 800c87a:	4628      	mov	r0, r5
 800c87c:	f7ff fef8 	bl	800c670 <__cvt>
 800c880:	9b04      	ldr	r3, [sp, #16]
 800c882:	9907      	ldr	r1, [sp, #28]
 800c884:	2b47      	cmp	r3, #71	; 0x47
 800c886:	4680      	mov	r8, r0
 800c888:	d108      	bne.n	800c89c <_printf_float+0x10c>
 800c88a:	1cc8      	adds	r0, r1, #3
 800c88c:	db02      	blt.n	800c894 <_printf_float+0x104>
 800c88e:	6863      	ldr	r3, [r4, #4]
 800c890:	4299      	cmp	r1, r3
 800c892:	dd41      	ble.n	800c918 <_printf_float+0x188>
 800c894:	f1a9 0902 	sub.w	r9, r9, #2
 800c898:	fa5f f989 	uxtb.w	r9, r9
 800c89c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c8a0:	d820      	bhi.n	800c8e4 <_printf_float+0x154>
 800c8a2:	3901      	subs	r1, #1
 800c8a4:	464a      	mov	r2, r9
 800c8a6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c8aa:	9107      	str	r1, [sp, #28]
 800c8ac:	f7ff ff32 	bl	800c714 <__exponent>
 800c8b0:	9a08      	ldr	r2, [sp, #32]
 800c8b2:	9004      	str	r0, [sp, #16]
 800c8b4:	1813      	adds	r3, r2, r0
 800c8b6:	2a01      	cmp	r2, #1
 800c8b8:	6123      	str	r3, [r4, #16]
 800c8ba:	dc02      	bgt.n	800c8c2 <_printf_float+0x132>
 800c8bc:	6822      	ldr	r2, [r4, #0]
 800c8be:	07d2      	lsls	r2, r2, #31
 800c8c0:	d501      	bpl.n	800c8c6 <_printf_float+0x136>
 800c8c2:	3301      	adds	r3, #1
 800c8c4:	6123      	str	r3, [r4, #16]
 800c8c6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d0a2      	beq.n	800c814 <_printf_float+0x84>
 800c8ce:	232d      	movs	r3, #45	; 0x2d
 800c8d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8d4:	e79e      	b.n	800c814 <_printf_float+0x84>
 800c8d6:	9904      	ldr	r1, [sp, #16]
 800c8d8:	2947      	cmp	r1, #71	; 0x47
 800c8da:	d1c1      	bne.n	800c860 <_printf_float+0xd0>
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d1bf      	bne.n	800c860 <_printf_float+0xd0>
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	e7bc      	b.n	800c85e <_printf_float+0xce>
 800c8e4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800c8e8:	d118      	bne.n	800c91c <_printf_float+0x18c>
 800c8ea:	2900      	cmp	r1, #0
 800c8ec:	6863      	ldr	r3, [r4, #4]
 800c8ee:	dd0b      	ble.n	800c908 <_printf_float+0x178>
 800c8f0:	6121      	str	r1, [r4, #16]
 800c8f2:	b913      	cbnz	r3, 800c8fa <_printf_float+0x16a>
 800c8f4:	6822      	ldr	r2, [r4, #0]
 800c8f6:	07d0      	lsls	r0, r2, #31
 800c8f8:	d502      	bpl.n	800c900 <_printf_float+0x170>
 800c8fa:	3301      	adds	r3, #1
 800c8fc:	440b      	add	r3, r1
 800c8fe:	6123      	str	r3, [r4, #16]
 800c900:	2300      	movs	r3, #0
 800c902:	65a1      	str	r1, [r4, #88]	; 0x58
 800c904:	9304      	str	r3, [sp, #16]
 800c906:	e7de      	b.n	800c8c6 <_printf_float+0x136>
 800c908:	b913      	cbnz	r3, 800c910 <_printf_float+0x180>
 800c90a:	6822      	ldr	r2, [r4, #0]
 800c90c:	07d2      	lsls	r2, r2, #31
 800c90e:	d501      	bpl.n	800c914 <_printf_float+0x184>
 800c910:	3302      	adds	r3, #2
 800c912:	e7f4      	b.n	800c8fe <_printf_float+0x16e>
 800c914:	2301      	movs	r3, #1
 800c916:	e7f2      	b.n	800c8fe <_printf_float+0x16e>
 800c918:	f04f 0967 	mov.w	r9, #103	; 0x67
 800c91c:	9b08      	ldr	r3, [sp, #32]
 800c91e:	4299      	cmp	r1, r3
 800c920:	db05      	blt.n	800c92e <_printf_float+0x19e>
 800c922:	6823      	ldr	r3, [r4, #0]
 800c924:	6121      	str	r1, [r4, #16]
 800c926:	07d8      	lsls	r0, r3, #31
 800c928:	d5ea      	bpl.n	800c900 <_printf_float+0x170>
 800c92a:	1c4b      	adds	r3, r1, #1
 800c92c:	e7e7      	b.n	800c8fe <_printf_float+0x16e>
 800c92e:	2900      	cmp	r1, #0
 800c930:	bfd4      	ite	le
 800c932:	f1c1 0202 	rsble	r2, r1, #2
 800c936:	2201      	movgt	r2, #1
 800c938:	4413      	add	r3, r2
 800c93a:	e7e0      	b.n	800c8fe <_printf_float+0x16e>
 800c93c:	6823      	ldr	r3, [r4, #0]
 800c93e:	055a      	lsls	r2, r3, #21
 800c940:	d407      	bmi.n	800c952 <_printf_float+0x1c2>
 800c942:	6923      	ldr	r3, [r4, #16]
 800c944:	4642      	mov	r2, r8
 800c946:	4631      	mov	r1, r6
 800c948:	4628      	mov	r0, r5
 800c94a:	47b8      	blx	r7
 800c94c:	3001      	adds	r0, #1
 800c94e:	d12a      	bne.n	800c9a6 <_printf_float+0x216>
 800c950:	e76a      	b.n	800c828 <_printf_float+0x98>
 800c952:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c956:	f240 80e0 	bls.w	800cb1a <_printf_float+0x38a>
 800c95a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800c95e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c966:	d133      	bne.n	800c9d0 <_printf_float+0x240>
 800c968:	4a37      	ldr	r2, [pc, #220]	; (800ca48 <_printf_float+0x2b8>)
 800c96a:	2301      	movs	r3, #1
 800c96c:	4631      	mov	r1, r6
 800c96e:	4628      	mov	r0, r5
 800c970:	47b8      	blx	r7
 800c972:	3001      	adds	r0, #1
 800c974:	f43f af58 	beq.w	800c828 <_printf_float+0x98>
 800c978:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c97c:	429a      	cmp	r2, r3
 800c97e:	db02      	blt.n	800c986 <_printf_float+0x1f6>
 800c980:	6823      	ldr	r3, [r4, #0]
 800c982:	07d8      	lsls	r0, r3, #31
 800c984:	d50f      	bpl.n	800c9a6 <_printf_float+0x216>
 800c986:	4653      	mov	r3, sl
 800c988:	465a      	mov	r2, fp
 800c98a:	4631      	mov	r1, r6
 800c98c:	4628      	mov	r0, r5
 800c98e:	47b8      	blx	r7
 800c990:	3001      	adds	r0, #1
 800c992:	f43f af49 	beq.w	800c828 <_printf_float+0x98>
 800c996:	f04f 0800 	mov.w	r8, #0
 800c99a:	f104 091a 	add.w	r9, r4, #26
 800c99e:	9b08      	ldr	r3, [sp, #32]
 800c9a0:	3b01      	subs	r3, #1
 800c9a2:	4543      	cmp	r3, r8
 800c9a4:	dc09      	bgt.n	800c9ba <_printf_float+0x22a>
 800c9a6:	6823      	ldr	r3, [r4, #0]
 800c9a8:	079b      	lsls	r3, r3, #30
 800c9aa:	f100 8106 	bmi.w	800cbba <_printf_float+0x42a>
 800c9ae:	68e0      	ldr	r0, [r4, #12]
 800c9b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9b2:	4298      	cmp	r0, r3
 800c9b4:	bfb8      	it	lt
 800c9b6:	4618      	movlt	r0, r3
 800c9b8:	e738      	b.n	800c82c <_printf_float+0x9c>
 800c9ba:	2301      	movs	r3, #1
 800c9bc:	464a      	mov	r2, r9
 800c9be:	4631      	mov	r1, r6
 800c9c0:	4628      	mov	r0, r5
 800c9c2:	47b8      	blx	r7
 800c9c4:	3001      	adds	r0, #1
 800c9c6:	f43f af2f 	beq.w	800c828 <_printf_float+0x98>
 800c9ca:	f108 0801 	add.w	r8, r8, #1
 800c9ce:	e7e6      	b.n	800c99e <_printf_float+0x20e>
 800c9d0:	9b07      	ldr	r3, [sp, #28]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	dc3a      	bgt.n	800ca4c <_printf_float+0x2bc>
 800c9d6:	4a1c      	ldr	r2, [pc, #112]	; (800ca48 <_printf_float+0x2b8>)
 800c9d8:	2301      	movs	r3, #1
 800c9da:	4631      	mov	r1, r6
 800c9dc:	4628      	mov	r0, r5
 800c9de:	47b8      	blx	r7
 800c9e0:	3001      	adds	r0, #1
 800c9e2:	f43f af21 	beq.w	800c828 <_printf_float+0x98>
 800c9e6:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800c9ea:	4313      	orrs	r3, r2
 800c9ec:	d102      	bne.n	800c9f4 <_printf_float+0x264>
 800c9ee:	6823      	ldr	r3, [r4, #0]
 800c9f0:	07d9      	lsls	r1, r3, #31
 800c9f2:	d5d8      	bpl.n	800c9a6 <_printf_float+0x216>
 800c9f4:	4653      	mov	r3, sl
 800c9f6:	465a      	mov	r2, fp
 800c9f8:	4631      	mov	r1, r6
 800c9fa:	4628      	mov	r0, r5
 800c9fc:	47b8      	blx	r7
 800c9fe:	3001      	adds	r0, #1
 800ca00:	f43f af12 	beq.w	800c828 <_printf_float+0x98>
 800ca04:	f04f 0900 	mov.w	r9, #0
 800ca08:	f104 0a1a 	add.w	sl, r4, #26
 800ca0c:	9b07      	ldr	r3, [sp, #28]
 800ca0e:	425b      	negs	r3, r3
 800ca10:	454b      	cmp	r3, r9
 800ca12:	dc01      	bgt.n	800ca18 <_printf_float+0x288>
 800ca14:	9b08      	ldr	r3, [sp, #32]
 800ca16:	e795      	b.n	800c944 <_printf_float+0x1b4>
 800ca18:	2301      	movs	r3, #1
 800ca1a:	4652      	mov	r2, sl
 800ca1c:	4631      	mov	r1, r6
 800ca1e:	4628      	mov	r0, r5
 800ca20:	47b8      	blx	r7
 800ca22:	3001      	adds	r0, #1
 800ca24:	f43f af00 	beq.w	800c828 <_printf_float+0x98>
 800ca28:	f109 0901 	add.w	r9, r9, #1
 800ca2c:	e7ee      	b.n	800ca0c <_printf_float+0x27c>
 800ca2e:	bf00      	nop
 800ca30:	ffffffff 	.word	0xffffffff
 800ca34:	7fefffff 	.word	0x7fefffff
 800ca38:	0800f188 	.word	0x0800f188
 800ca3c:	0800f18c 	.word	0x0800f18c
 800ca40:	0800f190 	.word	0x0800f190
 800ca44:	0800f194 	.word	0x0800f194
 800ca48:	0800f198 	.word	0x0800f198
 800ca4c:	9a08      	ldr	r2, [sp, #32]
 800ca4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ca50:	429a      	cmp	r2, r3
 800ca52:	bfa8      	it	ge
 800ca54:	461a      	movge	r2, r3
 800ca56:	2a00      	cmp	r2, #0
 800ca58:	4691      	mov	r9, r2
 800ca5a:	dc38      	bgt.n	800cace <_printf_float+0x33e>
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	9305      	str	r3, [sp, #20]
 800ca60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ca64:	f104 021a 	add.w	r2, r4, #26
 800ca68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ca6a:	9905      	ldr	r1, [sp, #20]
 800ca6c:	9304      	str	r3, [sp, #16]
 800ca6e:	eba3 0309 	sub.w	r3, r3, r9
 800ca72:	428b      	cmp	r3, r1
 800ca74:	dc33      	bgt.n	800cade <_printf_float+0x34e>
 800ca76:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ca7a:	429a      	cmp	r2, r3
 800ca7c:	db3c      	blt.n	800caf8 <_printf_float+0x368>
 800ca7e:	6823      	ldr	r3, [r4, #0]
 800ca80:	07da      	lsls	r2, r3, #31
 800ca82:	d439      	bmi.n	800caf8 <_printf_float+0x368>
 800ca84:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800ca88:	eba2 0903 	sub.w	r9, r2, r3
 800ca8c:	9b04      	ldr	r3, [sp, #16]
 800ca8e:	1ad2      	subs	r2, r2, r3
 800ca90:	4591      	cmp	r9, r2
 800ca92:	bfa8      	it	ge
 800ca94:	4691      	movge	r9, r2
 800ca96:	f1b9 0f00 	cmp.w	r9, #0
 800ca9a:	dc35      	bgt.n	800cb08 <_printf_float+0x378>
 800ca9c:	f04f 0800 	mov.w	r8, #0
 800caa0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800caa4:	f104 0a1a 	add.w	sl, r4, #26
 800caa8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800caac:	1a9b      	subs	r3, r3, r2
 800caae:	eba3 0309 	sub.w	r3, r3, r9
 800cab2:	4543      	cmp	r3, r8
 800cab4:	f77f af77 	ble.w	800c9a6 <_printf_float+0x216>
 800cab8:	2301      	movs	r3, #1
 800caba:	4652      	mov	r2, sl
 800cabc:	4631      	mov	r1, r6
 800cabe:	4628      	mov	r0, r5
 800cac0:	47b8      	blx	r7
 800cac2:	3001      	adds	r0, #1
 800cac4:	f43f aeb0 	beq.w	800c828 <_printf_float+0x98>
 800cac8:	f108 0801 	add.w	r8, r8, #1
 800cacc:	e7ec      	b.n	800caa8 <_printf_float+0x318>
 800cace:	4613      	mov	r3, r2
 800cad0:	4631      	mov	r1, r6
 800cad2:	4642      	mov	r2, r8
 800cad4:	4628      	mov	r0, r5
 800cad6:	47b8      	blx	r7
 800cad8:	3001      	adds	r0, #1
 800cada:	d1bf      	bne.n	800ca5c <_printf_float+0x2cc>
 800cadc:	e6a4      	b.n	800c828 <_printf_float+0x98>
 800cade:	2301      	movs	r3, #1
 800cae0:	4631      	mov	r1, r6
 800cae2:	4628      	mov	r0, r5
 800cae4:	9204      	str	r2, [sp, #16]
 800cae6:	47b8      	blx	r7
 800cae8:	3001      	adds	r0, #1
 800caea:	f43f ae9d 	beq.w	800c828 <_printf_float+0x98>
 800caee:	9b05      	ldr	r3, [sp, #20]
 800caf0:	9a04      	ldr	r2, [sp, #16]
 800caf2:	3301      	adds	r3, #1
 800caf4:	9305      	str	r3, [sp, #20]
 800caf6:	e7b7      	b.n	800ca68 <_printf_float+0x2d8>
 800caf8:	4653      	mov	r3, sl
 800cafa:	465a      	mov	r2, fp
 800cafc:	4631      	mov	r1, r6
 800cafe:	4628      	mov	r0, r5
 800cb00:	47b8      	blx	r7
 800cb02:	3001      	adds	r0, #1
 800cb04:	d1be      	bne.n	800ca84 <_printf_float+0x2f4>
 800cb06:	e68f      	b.n	800c828 <_printf_float+0x98>
 800cb08:	9a04      	ldr	r2, [sp, #16]
 800cb0a:	464b      	mov	r3, r9
 800cb0c:	4442      	add	r2, r8
 800cb0e:	4631      	mov	r1, r6
 800cb10:	4628      	mov	r0, r5
 800cb12:	47b8      	blx	r7
 800cb14:	3001      	adds	r0, #1
 800cb16:	d1c1      	bne.n	800ca9c <_printf_float+0x30c>
 800cb18:	e686      	b.n	800c828 <_printf_float+0x98>
 800cb1a:	9a08      	ldr	r2, [sp, #32]
 800cb1c:	2a01      	cmp	r2, #1
 800cb1e:	dc01      	bgt.n	800cb24 <_printf_float+0x394>
 800cb20:	07db      	lsls	r3, r3, #31
 800cb22:	d537      	bpl.n	800cb94 <_printf_float+0x404>
 800cb24:	2301      	movs	r3, #1
 800cb26:	4642      	mov	r2, r8
 800cb28:	4631      	mov	r1, r6
 800cb2a:	4628      	mov	r0, r5
 800cb2c:	47b8      	blx	r7
 800cb2e:	3001      	adds	r0, #1
 800cb30:	f43f ae7a 	beq.w	800c828 <_printf_float+0x98>
 800cb34:	4653      	mov	r3, sl
 800cb36:	465a      	mov	r2, fp
 800cb38:	4631      	mov	r1, r6
 800cb3a:	4628      	mov	r0, r5
 800cb3c:	47b8      	blx	r7
 800cb3e:	3001      	adds	r0, #1
 800cb40:	f43f ae72 	beq.w	800c828 <_printf_float+0x98>
 800cb44:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800cb48:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cb4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb50:	9b08      	ldr	r3, [sp, #32]
 800cb52:	d01a      	beq.n	800cb8a <_printf_float+0x3fa>
 800cb54:	3b01      	subs	r3, #1
 800cb56:	f108 0201 	add.w	r2, r8, #1
 800cb5a:	4631      	mov	r1, r6
 800cb5c:	4628      	mov	r0, r5
 800cb5e:	47b8      	blx	r7
 800cb60:	3001      	adds	r0, #1
 800cb62:	d10e      	bne.n	800cb82 <_printf_float+0x3f2>
 800cb64:	e660      	b.n	800c828 <_printf_float+0x98>
 800cb66:	2301      	movs	r3, #1
 800cb68:	464a      	mov	r2, r9
 800cb6a:	4631      	mov	r1, r6
 800cb6c:	4628      	mov	r0, r5
 800cb6e:	47b8      	blx	r7
 800cb70:	3001      	adds	r0, #1
 800cb72:	f43f ae59 	beq.w	800c828 <_printf_float+0x98>
 800cb76:	f108 0801 	add.w	r8, r8, #1
 800cb7a:	9b08      	ldr	r3, [sp, #32]
 800cb7c:	3b01      	subs	r3, #1
 800cb7e:	4543      	cmp	r3, r8
 800cb80:	dcf1      	bgt.n	800cb66 <_printf_float+0x3d6>
 800cb82:	9b04      	ldr	r3, [sp, #16]
 800cb84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cb88:	e6dd      	b.n	800c946 <_printf_float+0x1b6>
 800cb8a:	f04f 0800 	mov.w	r8, #0
 800cb8e:	f104 091a 	add.w	r9, r4, #26
 800cb92:	e7f2      	b.n	800cb7a <_printf_float+0x3ea>
 800cb94:	2301      	movs	r3, #1
 800cb96:	4642      	mov	r2, r8
 800cb98:	e7df      	b.n	800cb5a <_printf_float+0x3ca>
 800cb9a:	2301      	movs	r3, #1
 800cb9c:	464a      	mov	r2, r9
 800cb9e:	4631      	mov	r1, r6
 800cba0:	4628      	mov	r0, r5
 800cba2:	47b8      	blx	r7
 800cba4:	3001      	adds	r0, #1
 800cba6:	f43f ae3f 	beq.w	800c828 <_printf_float+0x98>
 800cbaa:	f108 0801 	add.w	r8, r8, #1
 800cbae:	68e3      	ldr	r3, [r4, #12]
 800cbb0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cbb2:	1a5b      	subs	r3, r3, r1
 800cbb4:	4543      	cmp	r3, r8
 800cbb6:	dcf0      	bgt.n	800cb9a <_printf_float+0x40a>
 800cbb8:	e6f9      	b.n	800c9ae <_printf_float+0x21e>
 800cbba:	f04f 0800 	mov.w	r8, #0
 800cbbe:	f104 0919 	add.w	r9, r4, #25
 800cbc2:	e7f4      	b.n	800cbae <_printf_float+0x41e>

0800cbc4 <_printf_common>:
 800cbc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbc8:	4616      	mov	r6, r2
 800cbca:	4699      	mov	r9, r3
 800cbcc:	688a      	ldr	r2, [r1, #8]
 800cbce:	690b      	ldr	r3, [r1, #16]
 800cbd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cbd4:	4293      	cmp	r3, r2
 800cbd6:	bfb8      	it	lt
 800cbd8:	4613      	movlt	r3, r2
 800cbda:	6033      	str	r3, [r6, #0]
 800cbdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cbe0:	4607      	mov	r7, r0
 800cbe2:	460c      	mov	r4, r1
 800cbe4:	b10a      	cbz	r2, 800cbea <_printf_common+0x26>
 800cbe6:	3301      	adds	r3, #1
 800cbe8:	6033      	str	r3, [r6, #0]
 800cbea:	6823      	ldr	r3, [r4, #0]
 800cbec:	0699      	lsls	r1, r3, #26
 800cbee:	bf42      	ittt	mi
 800cbf0:	6833      	ldrmi	r3, [r6, #0]
 800cbf2:	3302      	addmi	r3, #2
 800cbf4:	6033      	strmi	r3, [r6, #0]
 800cbf6:	6825      	ldr	r5, [r4, #0]
 800cbf8:	f015 0506 	ands.w	r5, r5, #6
 800cbfc:	d106      	bne.n	800cc0c <_printf_common+0x48>
 800cbfe:	f104 0a19 	add.w	sl, r4, #25
 800cc02:	68e3      	ldr	r3, [r4, #12]
 800cc04:	6832      	ldr	r2, [r6, #0]
 800cc06:	1a9b      	subs	r3, r3, r2
 800cc08:	42ab      	cmp	r3, r5
 800cc0a:	dc26      	bgt.n	800cc5a <_printf_common+0x96>
 800cc0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cc10:	1e13      	subs	r3, r2, #0
 800cc12:	6822      	ldr	r2, [r4, #0]
 800cc14:	bf18      	it	ne
 800cc16:	2301      	movne	r3, #1
 800cc18:	0692      	lsls	r2, r2, #26
 800cc1a:	d42b      	bmi.n	800cc74 <_printf_common+0xb0>
 800cc1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cc20:	4649      	mov	r1, r9
 800cc22:	4638      	mov	r0, r7
 800cc24:	47c0      	blx	r8
 800cc26:	3001      	adds	r0, #1
 800cc28:	d01e      	beq.n	800cc68 <_printf_common+0xa4>
 800cc2a:	6823      	ldr	r3, [r4, #0]
 800cc2c:	6922      	ldr	r2, [r4, #16]
 800cc2e:	f003 0306 	and.w	r3, r3, #6
 800cc32:	2b04      	cmp	r3, #4
 800cc34:	bf02      	ittt	eq
 800cc36:	68e5      	ldreq	r5, [r4, #12]
 800cc38:	6833      	ldreq	r3, [r6, #0]
 800cc3a:	1aed      	subeq	r5, r5, r3
 800cc3c:	68a3      	ldr	r3, [r4, #8]
 800cc3e:	bf0c      	ite	eq
 800cc40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cc44:	2500      	movne	r5, #0
 800cc46:	4293      	cmp	r3, r2
 800cc48:	bfc4      	itt	gt
 800cc4a:	1a9b      	subgt	r3, r3, r2
 800cc4c:	18ed      	addgt	r5, r5, r3
 800cc4e:	2600      	movs	r6, #0
 800cc50:	341a      	adds	r4, #26
 800cc52:	42b5      	cmp	r5, r6
 800cc54:	d11a      	bne.n	800cc8c <_printf_common+0xc8>
 800cc56:	2000      	movs	r0, #0
 800cc58:	e008      	b.n	800cc6c <_printf_common+0xa8>
 800cc5a:	2301      	movs	r3, #1
 800cc5c:	4652      	mov	r2, sl
 800cc5e:	4649      	mov	r1, r9
 800cc60:	4638      	mov	r0, r7
 800cc62:	47c0      	blx	r8
 800cc64:	3001      	adds	r0, #1
 800cc66:	d103      	bne.n	800cc70 <_printf_common+0xac>
 800cc68:	f04f 30ff 	mov.w	r0, #4294967295
 800cc6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc70:	3501      	adds	r5, #1
 800cc72:	e7c6      	b.n	800cc02 <_printf_common+0x3e>
 800cc74:	18e1      	adds	r1, r4, r3
 800cc76:	1c5a      	adds	r2, r3, #1
 800cc78:	2030      	movs	r0, #48	; 0x30
 800cc7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cc7e:	4422      	add	r2, r4
 800cc80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cc84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cc88:	3302      	adds	r3, #2
 800cc8a:	e7c7      	b.n	800cc1c <_printf_common+0x58>
 800cc8c:	2301      	movs	r3, #1
 800cc8e:	4622      	mov	r2, r4
 800cc90:	4649      	mov	r1, r9
 800cc92:	4638      	mov	r0, r7
 800cc94:	47c0      	blx	r8
 800cc96:	3001      	adds	r0, #1
 800cc98:	d0e6      	beq.n	800cc68 <_printf_common+0xa4>
 800cc9a:	3601      	adds	r6, #1
 800cc9c:	e7d9      	b.n	800cc52 <_printf_common+0x8e>
	...

0800cca0 <_printf_i>:
 800cca0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cca4:	7e0f      	ldrb	r7, [r1, #24]
 800cca6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cca8:	2f78      	cmp	r7, #120	; 0x78
 800ccaa:	4691      	mov	r9, r2
 800ccac:	4680      	mov	r8, r0
 800ccae:	460c      	mov	r4, r1
 800ccb0:	469a      	mov	sl, r3
 800ccb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ccb6:	d807      	bhi.n	800ccc8 <_printf_i+0x28>
 800ccb8:	2f62      	cmp	r7, #98	; 0x62
 800ccba:	d80a      	bhi.n	800ccd2 <_printf_i+0x32>
 800ccbc:	2f00      	cmp	r7, #0
 800ccbe:	f000 80d4 	beq.w	800ce6a <_printf_i+0x1ca>
 800ccc2:	2f58      	cmp	r7, #88	; 0x58
 800ccc4:	f000 80c0 	beq.w	800ce48 <_printf_i+0x1a8>
 800ccc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cccc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ccd0:	e03a      	b.n	800cd48 <_printf_i+0xa8>
 800ccd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ccd6:	2b15      	cmp	r3, #21
 800ccd8:	d8f6      	bhi.n	800ccc8 <_printf_i+0x28>
 800ccda:	a101      	add	r1, pc, #4	; (adr r1, 800cce0 <_printf_i+0x40>)
 800ccdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cce0:	0800cd39 	.word	0x0800cd39
 800cce4:	0800cd4d 	.word	0x0800cd4d
 800cce8:	0800ccc9 	.word	0x0800ccc9
 800ccec:	0800ccc9 	.word	0x0800ccc9
 800ccf0:	0800ccc9 	.word	0x0800ccc9
 800ccf4:	0800ccc9 	.word	0x0800ccc9
 800ccf8:	0800cd4d 	.word	0x0800cd4d
 800ccfc:	0800ccc9 	.word	0x0800ccc9
 800cd00:	0800ccc9 	.word	0x0800ccc9
 800cd04:	0800ccc9 	.word	0x0800ccc9
 800cd08:	0800ccc9 	.word	0x0800ccc9
 800cd0c:	0800ce51 	.word	0x0800ce51
 800cd10:	0800cd79 	.word	0x0800cd79
 800cd14:	0800ce0b 	.word	0x0800ce0b
 800cd18:	0800ccc9 	.word	0x0800ccc9
 800cd1c:	0800ccc9 	.word	0x0800ccc9
 800cd20:	0800ce73 	.word	0x0800ce73
 800cd24:	0800ccc9 	.word	0x0800ccc9
 800cd28:	0800cd79 	.word	0x0800cd79
 800cd2c:	0800ccc9 	.word	0x0800ccc9
 800cd30:	0800ccc9 	.word	0x0800ccc9
 800cd34:	0800ce13 	.word	0x0800ce13
 800cd38:	682b      	ldr	r3, [r5, #0]
 800cd3a:	1d1a      	adds	r2, r3, #4
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	602a      	str	r2, [r5, #0]
 800cd40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cd44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cd48:	2301      	movs	r3, #1
 800cd4a:	e09f      	b.n	800ce8c <_printf_i+0x1ec>
 800cd4c:	6820      	ldr	r0, [r4, #0]
 800cd4e:	682b      	ldr	r3, [r5, #0]
 800cd50:	0607      	lsls	r7, r0, #24
 800cd52:	f103 0104 	add.w	r1, r3, #4
 800cd56:	6029      	str	r1, [r5, #0]
 800cd58:	d501      	bpl.n	800cd5e <_printf_i+0xbe>
 800cd5a:	681e      	ldr	r6, [r3, #0]
 800cd5c:	e003      	b.n	800cd66 <_printf_i+0xc6>
 800cd5e:	0646      	lsls	r6, r0, #25
 800cd60:	d5fb      	bpl.n	800cd5a <_printf_i+0xba>
 800cd62:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cd66:	2e00      	cmp	r6, #0
 800cd68:	da03      	bge.n	800cd72 <_printf_i+0xd2>
 800cd6a:	232d      	movs	r3, #45	; 0x2d
 800cd6c:	4276      	negs	r6, r6
 800cd6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd72:	485a      	ldr	r0, [pc, #360]	; (800cedc <_printf_i+0x23c>)
 800cd74:	230a      	movs	r3, #10
 800cd76:	e012      	b.n	800cd9e <_printf_i+0xfe>
 800cd78:	682b      	ldr	r3, [r5, #0]
 800cd7a:	6820      	ldr	r0, [r4, #0]
 800cd7c:	1d19      	adds	r1, r3, #4
 800cd7e:	6029      	str	r1, [r5, #0]
 800cd80:	0605      	lsls	r5, r0, #24
 800cd82:	d501      	bpl.n	800cd88 <_printf_i+0xe8>
 800cd84:	681e      	ldr	r6, [r3, #0]
 800cd86:	e002      	b.n	800cd8e <_printf_i+0xee>
 800cd88:	0641      	lsls	r1, r0, #25
 800cd8a:	d5fb      	bpl.n	800cd84 <_printf_i+0xe4>
 800cd8c:	881e      	ldrh	r6, [r3, #0]
 800cd8e:	4853      	ldr	r0, [pc, #332]	; (800cedc <_printf_i+0x23c>)
 800cd90:	2f6f      	cmp	r7, #111	; 0x6f
 800cd92:	bf0c      	ite	eq
 800cd94:	2308      	moveq	r3, #8
 800cd96:	230a      	movne	r3, #10
 800cd98:	2100      	movs	r1, #0
 800cd9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cd9e:	6865      	ldr	r5, [r4, #4]
 800cda0:	60a5      	str	r5, [r4, #8]
 800cda2:	2d00      	cmp	r5, #0
 800cda4:	bfa2      	ittt	ge
 800cda6:	6821      	ldrge	r1, [r4, #0]
 800cda8:	f021 0104 	bicge.w	r1, r1, #4
 800cdac:	6021      	strge	r1, [r4, #0]
 800cdae:	b90e      	cbnz	r6, 800cdb4 <_printf_i+0x114>
 800cdb0:	2d00      	cmp	r5, #0
 800cdb2:	d04b      	beq.n	800ce4c <_printf_i+0x1ac>
 800cdb4:	4615      	mov	r5, r2
 800cdb6:	fbb6 f1f3 	udiv	r1, r6, r3
 800cdba:	fb03 6711 	mls	r7, r3, r1, r6
 800cdbe:	5dc7      	ldrb	r7, [r0, r7]
 800cdc0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cdc4:	4637      	mov	r7, r6
 800cdc6:	42bb      	cmp	r3, r7
 800cdc8:	460e      	mov	r6, r1
 800cdca:	d9f4      	bls.n	800cdb6 <_printf_i+0x116>
 800cdcc:	2b08      	cmp	r3, #8
 800cdce:	d10b      	bne.n	800cde8 <_printf_i+0x148>
 800cdd0:	6823      	ldr	r3, [r4, #0]
 800cdd2:	07de      	lsls	r6, r3, #31
 800cdd4:	d508      	bpl.n	800cde8 <_printf_i+0x148>
 800cdd6:	6923      	ldr	r3, [r4, #16]
 800cdd8:	6861      	ldr	r1, [r4, #4]
 800cdda:	4299      	cmp	r1, r3
 800cddc:	bfde      	ittt	le
 800cdde:	2330      	movle	r3, #48	; 0x30
 800cde0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cde4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cde8:	1b52      	subs	r2, r2, r5
 800cdea:	6122      	str	r2, [r4, #16]
 800cdec:	f8cd a000 	str.w	sl, [sp]
 800cdf0:	464b      	mov	r3, r9
 800cdf2:	aa03      	add	r2, sp, #12
 800cdf4:	4621      	mov	r1, r4
 800cdf6:	4640      	mov	r0, r8
 800cdf8:	f7ff fee4 	bl	800cbc4 <_printf_common>
 800cdfc:	3001      	adds	r0, #1
 800cdfe:	d14a      	bne.n	800ce96 <_printf_i+0x1f6>
 800ce00:	f04f 30ff 	mov.w	r0, #4294967295
 800ce04:	b004      	add	sp, #16
 800ce06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce0a:	6823      	ldr	r3, [r4, #0]
 800ce0c:	f043 0320 	orr.w	r3, r3, #32
 800ce10:	6023      	str	r3, [r4, #0]
 800ce12:	4833      	ldr	r0, [pc, #204]	; (800cee0 <_printf_i+0x240>)
 800ce14:	2778      	movs	r7, #120	; 0x78
 800ce16:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ce1a:	6823      	ldr	r3, [r4, #0]
 800ce1c:	6829      	ldr	r1, [r5, #0]
 800ce1e:	061f      	lsls	r7, r3, #24
 800ce20:	f851 6b04 	ldr.w	r6, [r1], #4
 800ce24:	d402      	bmi.n	800ce2c <_printf_i+0x18c>
 800ce26:	065f      	lsls	r7, r3, #25
 800ce28:	bf48      	it	mi
 800ce2a:	b2b6      	uxthmi	r6, r6
 800ce2c:	07df      	lsls	r7, r3, #31
 800ce2e:	bf48      	it	mi
 800ce30:	f043 0320 	orrmi.w	r3, r3, #32
 800ce34:	6029      	str	r1, [r5, #0]
 800ce36:	bf48      	it	mi
 800ce38:	6023      	strmi	r3, [r4, #0]
 800ce3a:	b91e      	cbnz	r6, 800ce44 <_printf_i+0x1a4>
 800ce3c:	6823      	ldr	r3, [r4, #0]
 800ce3e:	f023 0320 	bic.w	r3, r3, #32
 800ce42:	6023      	str	r3, [r4, #0]
 800ce44:	2310      	movs	r3, #16
 800ce46:	e7a7      	b.n	800cd98 <_printf_i+0xf8>
 800ce48:	4824      	ldr	r0, [pc, #144]	; (800cedc <_printf_i+0x23c>)
 800ce4a:	e7e4      	b.n	800ce16 <_printf_i+0x176>
 800ce4c:	4615      	mov	r5, r2
 800ce4e:	e7bd      	b.n	800cdcc <_printf_i+0x12c>
 800ce50:	682b      	ldr	r3, [r5, #0]
 800ce52:	6826      	ldr	r6, [r4, #0]
 800ce54:	6961      	ldr	r1, [r4, #20]
 800ce56:	1d18      	adds	r0, r3, #4
 800ce58:	6028      	str	r0, [r5, #0]
 800ce5a:	0635      	lsls	r5, r6, #24
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	d501      	bpl.n	800ce64 <_printf_i+0x1c4>
 800ce60:	6019      	str	r1, [r3, #0]
 800ce62:	e002      	b.n	800ce6a <_printf_i+0x1ca>
 800ce64:	0670      	lsls	r0, r6, #25
 800ce66:	d5fb      	bpl.n	800ce60 <_printf_i+0x1c0>
 800ce68:	8019      	strh	r1, [r3, #0]
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	6123      	str	r3, [r4, #16]
 800ce6e:	4615      	mov	r5, r2
 800ce70:	e7bc      	b.n	800cdec <_printf_i+0x14c>
 800ce72:	682b      	ldr	r3, [r5, #0]
 800ce74:	1d1a      	adds	r2, r3, #4
 800ce76:	602a      	str	r2, [r5, #0]
 800ce78:	681d      	ldr	r5, [r3, #0]
 800ce7a:	6862      	ldr	r2, [r4, #4]
 800ce7c:	2100      	movs	r1, #0
 800ce7e:	4628      	mov	r0, r5
 800ce80:	f7f3 fa2e 	bl	80002e0 <memchr>
 800ce84:	b108      	cbz	r0, 800ce8a <_printf_i+0x1ea>
 800ce86:	1b40      	subs	r0, r0, r5
 800ce88:	6060      	str	r0, [r4, #4]
 800ce8a:	6863      	ldr	r3, [r4, #4]
 800ce8c:	6123      	str	r3, [r4, #16]
 800ce8e:	2300      	movs	r3, #0
 800ce90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce94:	e7aa      	b.n	800cdec <_printf_i+0x14c>
 800ce96:	6923      	ldr	r3, [r4, #16]
 800ce98:	462a      	mov	r2, r5
 800ce9a:	4649      	mov	r1, r9
 800ce9c:	4640      	mov	r0, r8
 800ce9e:	47d0      	blx	sl
 800cea0:	3001      	adds	r0, #1
 800cea2:	d0ad      	beq.n	800ce00 <_printf_i+0x160>
 800cea4:	6823      	ldr	r3, [r4, #0]
 800cea6:	079b      	lsls	r3, r3, #30
 800cea8:	d413      	bmi.n	800ced2 <_printf_i+0x232>
 800ceaa:	68e0      	ldr	r0, [r4, #12]
 800ceac:	9b03      	ldr	r3, [sp, #12]
 800ceae:	4298      	cmp	r0, r3
 800ceb0:	bfb8      	it	lt
 800ceb2:	4618      	movlt	r0, r3
 800ceb4:	e7a6      	b.n	800ce04 <_printf_i+0x164>
 800ceb6:	2301      	movs	r3, #1
 800ceb8:	4632      	mov	r2, r6
 800ceba:	4649      	mov	r1, r9
 800cebc:	4640      	mov	r0, r8
 800cebe:	47d0      	blx	sl
 800cec0:	3001      	adds	r0, #1
 800cec2:	d09d      	beq.n	800ce00 <_printf_i+0x160>
 800cec4:	3501      	adds	r5, #1
 800cec6:	68e3      	ldr	r3, [r4, #12]
 800cec8:	9903      	ldr	r1, [sp, #12]
 800ceca:	1a5b      	subs	r3, r3, r1
 800cecc:	42ab      	cmp	r3, r5
 800cece:	dcf2      	bgt.n	800ceb6 <_printf_i+0x216>
 800ced0:	e7eb      	b.n	800ceaa <_printf_i+0x20a>
 800ced2:	2500      	movs	r5, #0
 800ced4:	f104 0619 	add.w	r6, r4, #25
 800ced8:	e7f5      	b.n	800cec6 <_printf_i+0x226>
 800ceda:	bf00      	nop
 800cedc:	0800f19a 	.word	0x0800f19a
 800cee0:	0800f1ab 	.word	0x0800f1ab

0800cee4 <std>:
 800cee4:	2300      	movs	r3, #0
 800cee6:	b510      	push	{r4, lr}
 800cee8:	4604      	mov	r4, r0
 800ceea:	e9c0 3300 	strd	r3, r3, [r0]
 800ceee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cef2:	6083      	str	r3, [r0, #8]
 800cef4:	8181      	strh	r1, [r0, #12]
 800cef6:	6643      	str	r3, [r0, #100]	; 0x64
 800cef8:	81c2      	strh	r2, [r0, #14]
 800cefa:	6183      	str	r3, [r0, #24]
 800cefc:	4619      	mov	r1, r3
 800cefe:	2208      	movs	r2, #8
 800cf00:	305c      	adds	r0, #92	; 0x5c
 800cf02:	f000 f914 	bl	800d12e <memset>
 800cf06:	4b0d      	ldr	r3, [pc, #52]	; (800cf3c <std+0x58>)
 800cf08:	6263      	str	r3, [r4, #36]	; 0x24
 800cf0a:	4b0d      	ldr	r3, [pc, #52]	; (800cf40 <std+0x5c>)
 800cf0c:	62a3      	str	r3, [r4, #40]	; 0x28
 800cf0e:	4b0d      	ldr	r3, [pc, #52]	; (800cf44 <std+0x60>)
 800cf10:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cf12:	4b0d      	ldr	r3, [pc, #52]	; (800cf48 <std+0x64>)
 800cf14:	6323      	str	r3, [r4, #48]	; 0x30
 800cf16:	4b0d      	ldr	r3, [pc, #52]	; (800cf4c <std+0x68>)
 800cf18:	6224      	str	r4, [r4, #32]
 800cf1a:	429c      	cmp	r4, r3
 800cf1c:	d006      	beq.n	800cf2c <std+0x48>
 800cf1e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800cf22:	4294      	cmp	r4, r2
 800cf24:	d002      	beq.n	800cf2c <std+0x48>
 800cf26:	33d0      	adds	r3, #208	; 0xd0
 800cf28:	429c      	cmp	r4, r3
 800cf2a:	d105      	bne.n	800cf38 <std+0x54>
 800cf2c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cf30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf34:	f000 b988 	b.w	800d248 <__retarget_lock_init_recursive>
 800cf38:	bd10      	pop	{r4, pc}
 800cf3a:	bf00      	nop
 800cf3c:	0800d0a9 	.word	0x0800d0a9
 800cf40:	0800d0cb 	.word	0x0800d0cb
 800cf44:	0800d103 	.word	0x0800d103
 800cf48:	0800d127 	.word	0x0800d127
 800cf4c:	240021cc 	.word	0x240021cc

0800cf50 <stdio_exit_handler>:
 800cf50:	4a02      	ldr	r2, [pc, #8]	; (800cf5c <stdio_exit_handler+0xc>)
 800cf52:	4903      	ldr	r1, [pc, #12]	; (800cf60 <stdio_exit_handler+0x10>)
 800cf54:	4803      	ldr	r0, [pc, #12]	; (800cf64 <stdio_exit_handler+0x14>)
 800cf56:	f000 b869 	b.w	800d02c <_fwalk_sglue>
 800cf5a:	bf00      	nop
 800cf5c:	24000144 	.word	0x24000144
 800cf60:	0800e995 	.word	0x0800e995
 800cf64:	24000150 	.word	0x24000150

0800cf68 <cleanup_stdio>:
 800cf68:	6841      	ldr	r1, [r0, #4]
 800cf6a:	4b0c      	ldr	r3, [pc, #48]	; (800cf9c <cleanup_stdio+0x34>)
 800cf6c:	4299      	cmp	r1, r3
 800cf6e:	b510      	push	{r4, lr}
 800cf70:	4604      	mov	r4, r0
 800cf72:	d001      	beq.n	800cf78 <cleanup_stdio+0x10>
 800cf74:	f001 fd0e 	bl	800e994 <_fflush_r>
 800cf78:	68a1      	ldr	r1, [r4, #8]
 800cf7a:	4b09      	ldr	r3, [pc, #36]	; (800cfa0 <cleanup_stdio+0x38>)
 800cf7c:	4299      	cmp	r1, r3
 800cf7e:	d002      	beq.n	800cf86 <cleanup_stdio+0x1e>
 800cf80:	4620      	mov	r0, r4
 800cf82:	f001 fd07 	bl	800e994 <_fflush_r>
 800cf86:	68e1      	ldr	r1, [r4, #12]
 800cf88:	4b06      	ldr	r3, [pc, #24]	; (800cfa4 <cleanup_stdio+0x3c>)
 800cf8a:	4299      	cmp	r1, r3
 800cf8c:	d004      	beq.n	800cf98 <cleanup_stdio+0x30>
 800cf8e:	4620      	mov	r0, r4
 800cf90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf94:	f001 bcfe 	b.w	800e994 <_fflush_r>
 800cf98:	bd10      	pop	{r4, pc}
 800cf9a:	bf00      	nop
 800cf9c:	240021cc 	.word	0x240021cc
 800cfa0:	24002234 	.word	0x24002234
 800cfa4:	2400229c 	.word	0x2400229c

0800cfa8 <global_stdio_init.part.0>:
 800cfa8:	b510      	push	{r4, lr}
 800cfaa:	4b0b      	ldr	r3, [pc, #44]	; (800cfd8 <global_stdio_init.part.0+0x30>)
 800cfac:	4c0b      	ldr	r4, [pc, #44]	; (800cfdc <global_stdio_init.part.0+0x34>)
 800cfae:	4a0c      	ldr	r2, [pc, #48]	; (800cfe0 <global_stdio_init.part.0+0x38>)
 800cfb0:	601a      	str	r2, [r3, #0]
 800cfb2:	4620      	mov	r0, r4
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	2104      	movs	r1, #4
 800cfb8:	f7ff ff94 	bl	800cee4 <std>
 800cfbc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800cfc0:	2201      	movs	r2, #1
 800cfc2:	2109      	movs	r1, #9
 800cfc4:	f7ff ff8e 	bl	800cee4 <std>
 800cfc8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800cfcc:	2202      	movs	r2, #2
 800cfce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfd2:	2112      	movs	r1, #18
 800cfd4:	f7ff bf86 	b.w	800cee4 <std>
 800cfd8:	24002304 	.word	0x24002304
 800cfdc:	240021cc 	.word	0x240021cc
 800cfe0:	0800cf51 	.word	0x0800cf51

0800cfe4 <__sfp_lock_acquire>:
 800cfe4:	4801      	ldr	r0, [pc, #4]	; (800cfec <__sfp_lock_acquire+0x8>)
 800cfe6:	f000 b930 	b.w	800d24a <__retarget_lock_acquire_recursive>
 800cfea:	bf00      	nop
 800cfec:	2400230d 	.word	0x2400230d

0800cff0 <__sfp_lock_release>:
 800cff0:	4801      	ldr	r0, [pc, #4]	; (800cff8 <__sfp_lock_release+0x8>)
 800cff2:	f000 b92b 	b.w	800d24c <__retarget_lock_release_recursive>
 800cff6:	bf00      	nop
 800cff8:	2400230d 	.word	0x2400230d

0800cffc <__sinit>:
 800cffc:	b510      	push	{r4, lr}
 800cffe:	4604      	mov	r4, r0
 800d000:	f7ff fff0 	bl	800cfe4 <__sfp_lock_acquire>
 800d004:	6a23      	ldr	r3, [r4, #32]
 800d006:	b11b      	cbz	r3, 800d010 <__sinit+0x14>
 800d008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d00c:	f7ff bff0 	b.w	800cff0 <__sfp_lock_release>
 800d010:	4b04      	ldr	r3, [pc, #16]	; (800d024 <__sinit+0x28>)
 800d012:	6223      	str	r3, [r4, #32]
 800d014:	4b04      	ldr	r3, [pc, #16]	; (800d028 <__sinit+0x2c>)
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d1f5      	bne.n	800d008 <__sinit+0xc>
 800d01c:	f7ff ffc4 	bl	800cfa8 <global_stdio_init.part.0>
 800d020:	e7f2      	b.n	800d008 <__sinit+0xc>
 800d022:	bf00      	nop
 800d024:	0800cf69 	.word	0x0800cf69
 800d028:	24002304 	.word	0x24002304

0800d02c <_fwalk_sglue>:
 800d02c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d030:	4607      	mov	r7, r0
 800d032:	4688      	mov	r8, r1
 800d034:	4614      	mov	r4, r2
 800d036:	2600      	movs	r6, #0
 800d038:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d03c:	f1b9 0901 	subs.w	r9, r9, #1
 800d040:	d505      	bpl.n	800d04e <_fwalk_sglue+0x22>
 800d042:	6824      	ldr	r4, [r4, #0]
 800d044:	2c00      	cmp	r4, #0
 800d046:	d1f7      	bne.n	800d038 <_fwalk_sglue+0xc>
 800d048:	4630      	mov	r0, r6
 800d04a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d04e:	89ab      	ldrh	r3, [r5, #12]
 800d050:	2b01      	cmp	r3, #1
 800d052:	d907      	bls.n	800d064 <_fwalk_sglue+0x38>
 800d054:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d058:	3301      	adds	r3, #1
 800d05a:	d003      	beq.n	800d064 <_fwalk_sglue+0x38>
 800d05c:	4629      	mov	r1, r5
 800d05e:	4638      	mov	r0, r7
 800d060:	47c0      	blx	r8
 800d062:	4306      	orrs	r6, r0
 800d064:	3568      	adds	r5, #104	; 0x68
 800d066:	e7e9      	b.n	800d03c <_fwalk_sglue+0x10>

0800d068 <siprintf>:
 800d068:	b40e      	push	{r1, r2, r3}
 800d06a:	b500      	push	{lr}
 800d06c:	b09c      	sub	sp, #112	; 0x70
 800d06e:	ab1d      	add	r3, sp, #116	; 0x74
 800d070:	9002      	str	r0, [sp, #8]
 800d072:	9006      	str	r0, [sp, #24]
 800d074:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d078:	4809      	ldr	r0, [pc, #36]	; (800d0a0 <siprintf+0x38>)
 800d07a:	9107      	str	r1, [sp, #28]
 800d07c:	9104      	str	r1, [sp, #16]
 800d07e:	4909      	ldr	r1, [pc, #36]	; (800d0a4 <siprintf+0x3c>)
 800d080:	f853 2b04 	ldr.w	r2, [r3], #4
 800d084:	9105      	str	r1, [sp, #20]
 800d086:	6800      	ldr	r0, [r0, #0]
 800d088:	9301      	str	r3, [sp, #4]
 800d08a:	a902      	add	r1, sp, #8
 800d08c:	f001 fafe 	bl	800e68c <_svfiprintf_r>
 800d090:	9b02      	ldr	r3, [sp, #8]
 800d092:	2200      	movs	r2, #0
 800d094:	701a      	strb	r2, [r3, #0]
 800d096:	b01c      	add	sp, #112	; 0x70
 800d098:	f85d eb04 	ldr.w	lr, [sp], #4
 800d09c:	b003      	add	sp, #12
 800d09e:	4770      	bx	lr
 800d0a0:	2400019c 	.word	0x2400019c
 800d0a4:	ffff0208 	.word	0xffff0208

0800d0a8 <__sread>:
 800d0a8:	b510      	push	{r4, lr}
 800d0aa:	460c      	mov	r4, r1
 800d0ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0b0:	f000 f86c 	bl	800d18c <_read_r>
 800d0b4:	2800      	cmp	r0, #0
 800d0b6:	bfab      	itete	ge
 800d0b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d0ba:	89a3      	ldrhlt	r3, [r4, #12]
 800d0bc:	181b      	addge	r3, r3, r0
 800d0be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d0c2:	bfac      	ite	ge
 800d0c4:	6563      	strge	r3, [r4, #84]	; 0x54
 800d0c6:	81a3      	strhlt	r3, [r4, #12]
 800d0c8:	bd10      	pop	{r4, pc}

0800d0ca <__swrite>:
 800d0ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0ce:	461f      	mov	r7, r3
 800d0d0:	898b      	ldrh	r3, [r1, #12]
 800d0d2:	05db      	lsls	r3, r3, #23
 800d0d4:	4605      	mov	r5, r0
 800d0d6:	460c      	mov	r4, r1
 800d0d8:	4616      	mov	r6, r2
 800d0da:	d505      	bpl.n	800d0e8 <__swrite+0x1e>
 800d0dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0e0:	2302      	movs	r3, #2
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	f000 f840 	bl	800d168 <_lseek_r>
 800d0e8:	89a3      	ldrh	r3, [r4, #12]
 800d0ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d0ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d0f2:	81a3      	strh	r3, [r4, #12]
 800d0f4:	4632      	mov	r2, r6
 800d0f6:	463b      	mov	r3, r7
 800d0f8:	4628      	mov	r0, r5
 800d0fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0fe:	f000 b867 	b.w	800d1d0 <_write_r>

0800d102 <__sseek>:
 800d102:	b510      	push	{r4, lr}
 800d104:	460c      	mov	r4, r1
 800d106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d10a:	f000 f82d 	bl	800d168 <_lseek_r>
 800d10e:	1c43      	adds	r3, r0, #1
 800d110:	89a3      	ldrh	r3, [r4, #12]
 800d112:	bf15      	itete	ne
 800d114:	6560      	strne	r0, [r4, #84]	; 0x54
 800d116:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d11a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d11e:	81a3      	strheq	r3, [r4, #12]
 800d120:	bf18      	it	ne
 800d122:	81a3      	strhne	r3, [r4, #12]
 800d124:	bd10      	pop	{r4, pc}

0800d126 <__sclose>:
 800d126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d12a:	f000 b80d 	b.w	800d148 <_close_r>

0800d12e <memset>:
 800d12e:	4402      	add	r2, r0
 800d130:	4603      	mov	r3, r0
 800d132:	4293      	cmp	r3, r2
 800d134:	d100      	bne.n	800d138 <memset+0xa>
 800d136:	4770      	bx	lr
 800d138:	f803 1b01 	strb.w	r1, [r3], #1
 800d13c:	e7f9      	b.n	800d132 <memset+0x4>
	...

0800d140 <_localeconv_r>:
 800d140:	4800      	ldr	r0, [pc, #0]	; (800d144 <_localeconv_r+0x4>)
 800d142:	4770      	bx	lr
 800d144:	24000290 	.word	0x24000290

0800d148 <_close_r>:
 800d148:	b538      	push	{r3, r4, r5, lr}
 800d14a:	4d06      	ldr	r5, [pc, #24]	; (800d164 <_close_r+0x1c>)
 800d14c:	2300      	movs	r3, #0
 800d14e:	4604      	mov	r4, r0
 800d150:	4608      	mov	r0, r1
 800d152:	602b      	str	r3, [r5, #0]
 800d154:	f7f4 fc33 	bl	80019be <_close>
 800d158:	1c43      	adds	r3, r0, #1
 800d15a:	d102      	bne.n	800d162 <_close_r+0x1a>
 800d15c:	682b      	ldr	r3, [r5, #0]
 800d15e:	b103      	cbz	r3, 800d162 <_close_r+0x1a>
 800d160:	6023      	str	r3, [r4, #0]
 800d162:	bd38      	pop	{r3, r4, r5, pc}
 800d164:	24002308 	.word	0x24002308

0800d168 <_lseek_r>:
 800d168:	b538      	push	{r3, r4, r5, lr}
 800d16a:	4d07      	ldr	r5, [pc, #28]	; (800d188 <_lseek_r+0x20>)
 800d16c:	4604      	mov	r4, r0
 800d16e:	4608      	mov	r0, r1
 800d170:	4611      	mov	r1, r2
 800d172:	2200      	movs	r2, #0
 800d174:	602a      	str	r2, [r5, #0]
 800d176:	461a      	mov	r2, r3
 800d178:	f7f4 fc48 	bl	8001a0c <_lseek>
 800d17c:	1c43      	adds	r3, r0, #1
 800d17e:	d102      	bne.n	800d186 <_lseek_r+0x1e>
 800d180:	682b      	ldr	r3, [r5, #0]
 800d182:	b103      	cbz	r3, 800d186 <_lseek_r+0x1e>
 800d184:	6023      	str	r3, [r4, #0]
 800d186:	bd38      	pop	{r3, r4, r5, pc}
 800d188:	24002308 	.word	0x24002308

0800d18c <_read_r>:
 800d18c:	b538      	push	{r3, r4, r5, lr}
 800d18e:	4d07      	ldr	r5, [pc, #28]	; (800d1ac <_read_r+0x20>)
 800d190:	4604      	mov	r4, r0
 800d192:	4608      	mov	r0, r1
 800d194:	4611      	mov	r1, r2
 800d196:	2200      	movs	r2, #0
 800d198:	602a      	str	r2, [r5, #0]
 800d19a:	461a      	mov	r2, r3
 800d19c:	f7f4 fbd6 	bl	800194c <_read>
 800d1a0:	1c43      	adds	r3, r0, #1
 800d1a2:	d102      	bne.n	800d1aa <_read_r+0x1e>
 800d1a4:	682b      	ldr	r3, [r5, #0]
 800d1a6:	b103      	cbz	r3, 800d1aa <_read_r+0x1e>
 800d1a8:	6023      	str	r3, [r4, #0]
 800d1aa:	bd38      	pop	{r3, r4, r5, pc}
 800d1ac:	24002308 	.word	0x24002308

0800d1b0 <_sbrk_r>:
 800d1b0:	b538      	push	{r3, r4, r5, lr}
 800d1b2:	4d06      	ldr	r5, [pc, #24]	; (800d1cc <_sbrk_r+0x1c>)
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	4604      	mov	r4, r0
 800d1b8:	4608      	mov	r0, r1
 800d1ba:	602b      	str	r3, [r5, #0]
 800d1bc:	f7f4 fc34 	bl	8001a28 <_sbrk>
 800d1c0:	1c43      	adds	r3, r0, #1
 800d1c2:	d102      	bne.n	800d1ca <_sbrk_r+0x1a>
 800d1c4:	682b      	ldr	r3, [r5, #0]
 800d1c6:	b103      	cbz	r3, 800d1ca <_sbrk_r+0x1a>
 800d1c8:	6023      	str	r3, [r4, #0]
 800d1ca:	bd38      	pop	{r3, r4, r5, pc}
 800d1cc:	24002308 	.word	0x24002308

0800d1d0 <_write_r>:
 800d1d0:	b538      	push	{r3, r4, r5, lr}
 800d1d2:	4d07      	ldr	r5, [pc, #28]	; (800d1f0 <_write_r+0x20>)
 800d1d4:	4604      	mov	r4, r0
 800d1d6:	4608      	mov	r0, r1
 800d1d8:	4611      	mov	r1, r2
 800d1da:	2200      	movs	r2, #0
 800d1dc:	602a      	str	r2, [r5, #0]
 800d1de:	461a      	mov	r2, r3
 800d1e0:	f7f4 fbd1 	bl	8001986 <_write>
 800d1e4:	1c43      	adds	r3, r0, #1
 800d1e6:	d102      	bne.n	800d1ee <_write_r+0x1e>
 800d1e8:	682b      	ldr	r3, [r5, #0]
 800d1ea:	b103      	cbz	r3, 800d1ee <_write_r+0x1e>
 800d1ec:	6023      	str	r3, [r4, #0]
 800d1ee:	bd38      	pop	{r3, r4, r5, pc}
 800d1f0:	24002308 	.word	0x24002308

0800d1f4 <__errno>:
 800d1f4:	4b01      	ldr	r3, [pc, #4]	; (800d1fc <__errno+0x8>)
 800d1f6:	6818      	ldr	r0, [r3, #0]
 800d1f8:	4770      	bx	lr
 800d1fa:	bf00      	nop
 800d1fc:	2400019c 	.word	0x2400019c

0800d200 <__libc_init_array>:
 800d200:	b570      	push	{r4, r5, r6, lr}
 800d202:	4d0d      	ldr	r5, [pc, #52]	; (800d238 <__libc_init_array+0x38>)
 800d204:	4c0d      	ldr	r4, [pc, #52]	; (800d23c <__libc_init_array+0x3c>)
 800d206:	1b64      	subs	r4, r4, r5
 800d208:	10a4      	asrs	r4, r4, #2
 800d20a:	2600      	movs	r6, #0
 800d20c:	42a6      	cmp	r6, r4
 800d20e:	d109      	bne.n	800d224 <__libc_init_array+0x24>
 800d210:	4d0b      	ldr	r5, [pc, #44]	; (800d240 <__libc_init_array+0x40>)
 800d212:	4c0c      	ldr	r4, [pc, #48]	; (800d244 <__libc_init_array+0x44>)
 800d214:	f001 ff52 	bl	800f0bc <_init>
 800d218:	1b64      	subs	r4, r4, r5
 800d21a:	10a4      	asrs	r4, r4, #2
 800d21c:	2600      	movs	r6, #0
 800d21e:	42a6      	cmp	r6, r4
 800d220:	d105      	bne.n	800d22e <__libc_init_array+0x2e>
 800d222:	bd70      	pop	{r4, r5, r6, pc}
 800d224:	f855 3b04 	ldr.w	r3, [r5], #4
 800d228:	4798      	blx	r3
 800d22a:	3601      	adds	r6, #1
 800d22c:	e7ee      	b.n	800d20c <__libc_init_array+0xc>
 800d22e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d232:	4798      	blx	r3
 800d234:	3601      	adds	r6, #1
 800d236:	e7f2      	b.n	800d21e <__libc_init_array+0x1e>
 800d238:	0800f4fc 	.word	0x0800f4fc
 800d23c:	0800f4fc 	.word	0x0800f4fc
 800d240:	0800f4fc 	.word	0x0800f4fc
 800d244:	0800f500 	.word	0x0800f500

0800d248 <__retarget_lock_init_recursive>:
 800d248:	4770      	bx	lr

0800d24a <__retarget_lock_acquire_recursive>:
 800d24a:	4770      	bx	lr

0800d24c <__retarget_lock_release_recursive>:
 800d24c:	4770      	bx	lr

0800d24e <strcpy>:
 800d24e:	4603      	mov	r3, r0
 800d250:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d254:	f803 2b01 	strb.w	r2, [r3], #1
 800d258:	2a00      	cmp	r2, #0
 800d25a:	d1f9      	bne.n	800d250 <strcpy+0x2>
 800d25c:	4770      	bx	lr

0800d25e <quorem>:
 800d25e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d262:	6903      	ldr	r3, [r0, #16]
 800d264:	690c      	ldr	r4, [r1, #16]
 800d266:	42a3      	cmp	r3, r4
 800d268:	4607      	mov	r7, r0
 800d26a:	db7e      	blt.n	800d36a <quorem+0x10c>
 800d26c:	3c01      	subs	r4, #1
 800d26e:	f101 0814 	add.w	r8, r1, #20
 800d272:	f100 0514 	add.w	r5, r0, #20
 800d276:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d27a:	9301      	str	r3, [sp, #4]
 800d27c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d280:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d284:	3301      	adds	r3, #1
 800d286:	429a      	cmp	r2, r3
 800d288:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d28c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d290:	fbb2 f6f3 	udiv	r6, r2, r3
 800d294:	d331      	bcc.n	800d2fa <quorem+0x9c>
 800d296:	f04f 0e00 	mov.w	lr, #0
 800d29a:	4640      	mov	r0, r8
 800d29c:	46ac      	mov	ip, r5
 800d29e:	46f2      	mov	sl, lr
 800d2a0:	f850 2b04 	ldr.w	r2, [r0], #4
 800d2a4:	b293      	uxth	r3, r2
 800d2a6:	fb06 e303 	mla	r3, r6, r3, lr
 800d2aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d2ae:	0c1a      	lsrs	r2, r3, #16
 800d2b0:	b29b      	uxth	r3, r3
 800d2b2:	ebaa 0303 	sub.w	r3, sl, r3
 800d2b6:	f8dc a000 	ldr.w	sl, [ip]
 800d2ba:	fa13 f38a 	uxtah	r3, r3, sl
 800d2be:	fb06 220e 	mla	r2, r6, lr, r2
 800d2c2:	9300      	str	r3, [sp, #0]
 800d2c4:	9b00      	ldr	r3, [sp, #0]
 800d2c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d2ca:	b292      	uxth	r2, r2
 800d2cc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d2d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d2d4:	f8bd 3000 	ldrh.w	r3, [sp]
 800d2d8:	4581      	cmp	r9, r0
 800d2da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d2de:	f84c 3b04 	str.w	r3, [ip], #4
 800d2e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d2e6:	d2db      	bcs.n	800d2a0 <quorem+0x42>
 800d2e8:	f855 300b 	ldr.w	r3, [r5, fp]
 800d2ec:	b92b      	cbnz	r3, 800d2fa <quorem+0x9c>
 800d2ee:	9b01      	ldr	r3, [sp, #4]
 800d2f0:	3b04      	subs	r3, #4
 800d2f2:	429d      	cmp	r5, r3
 800d2f4:	461a      	mov	r2, r3
 800d2f6:	d32c      	bcc.n	800d352 <quorem+0xf4>
 800d2f8:	613c      	str	r4, [r7, #16]
 800d2fa:	4638      	mov	r0, r7
 800d2fc:	f001 f86c 	bl	800e3d8 <__mcmp>
 800d300:	2800      	cmp	r0, #0
 800d302:	db22      	blt.n	800d34a <quorem+0xec>
 800d304:	3601      	adds	r6, #1
 800d306:	4629      	mov	r1, r5
 800d308:	2000      	movs	r0, #0
 800d30a:	f858 2b04 	ldr.w	r2, [r8], #4
 800d30e:	f8d1 c000 	ldr.w	ip, [r1]
 800d312:	b293      	uxth	r3, r2
 800d314:	1ac3      	subs	r3, r0, r3
 800d316:	0c12      	lsrs	r2, r2, #16
 800d318:	fa13 f38c 	uxtah	r3, r3, ip
 800d31c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d320:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d324:	b29b      	uxth	r3, r3
 800d326:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d32a:	45c1      	cmp	r9, r8
 800d32c:	f841 3b04 	str.w	r3, [r1], #4
 800d330:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d334:	d2e9      	bcs.n	800d30a <quorem+0xac>
 800d336:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d33a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d33e:	b922      	cbnz	r2, 800d34a <quorem+0xec>
 800d340:	3b04      	subs	r3, #4
 800d342:	429d      	cmp	r5, r3
 800d344:	461a      	mov	r2, r3
 800d346:	d30a      	bcc.n	800d35e <quorem+0x100>
 800d348:	613c      	str	r4, [r7, #16]
 800d34a:	4630      	mov	r0, r6
 800d34c:	b003      	add	sp, #12
 800d34e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d352:	6812      	ldr	r2, [r2, #0]
 800d354:	3b04      	subs	r3, #4
 800d356:	2a00      	cmp	r2, #0
 800d358:	d1ce      	bne.n	800d2f8 <quorem+0x9a>
 800d35a:	3c01      	subs	r4, #1
 800d35c:	e7c9      	b.n	800d2f2 <quorem+0x94>
 800d35e:	6812      	ldr	r2, [r2, #0]
 800d360:	3b04      	subs	r3, #4
 800d362:	2a00      	cmp	r2, #0
 800d364:	d1f0      	bne.n	800d348 <quorem+0xea>
 800d366:	3c01      	subs	r4, #1
 800d368:	e7eb      	b.n	800d342 <quorem+0xe4>
 800d36a:	2000      	movs	r0, #0
 800d36c:	e7ee      	b.n	800d34c <quorem+0xee>
	...

0800d370 <_dtoa_r>:
 800d370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d374:	ed2d 8b02 	vpush	{d8}
 800d378:	69c5      	ldr	r5, [r0, #28]
 800d37a:	b091      	sub	sp, #68	; 0x44
 800d37c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d380:	ec59 8b10 	vmov	r8, r9, d0
 800d384:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800d386:	9106      	str	r1, [sp, #24]
 800d388:	4606      	mov	r6, r0
 800d38a:	9208      	str	r2, [sp, #32]
 800d38c:	930c      	str	r3, [sp, #48]	; 0x30
 800d38e:	b975      	cbnz	r5, 800d3ae <_dtoa_r+0x3e>
 800d390:	2010      	movs	r0, #16
 800d392:	f7ff f8b1 	bl	800c4f8 <malloc>
 800d396:	4602      	mov	r2, r0
 800d398:	61f0      	str	r0, [r6, #28]
 800d39a:	b920      	cbnz	r0, 800d3a6 <_dtoa_r+0x36>
 800d39c:	4ba6      	ldr	r3, [pc, #664]	; (800d638 <_dtoa_r+0x2c8>)
 800d39e:	21ef      	movs	r1, #239	; 0xef
 800d3a0:	48a6      	ldr	r0, [pc, #664]	; (800d63c <_dtoa_r+0x2cc>)
 800d3a2:	f001 fb47 	bl	800ea34 <__assert_func>
 800d3a6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d3aa:	6005      	str	r5, [r0, #0]
 800d3ac:	60c5      	str	r5, [r0, #12]
 800d3ae:	69f3      	ldr	r3, [r6, #28]
 800d3b0:	6819      	ldr	r1, [r3, #0]
 800d3b2:	b151      	cbz	r1, 800d3ca <_dtoa_r+0x5a>
 800d3b4:	685a      	ldr	r2, [r3, #4]
 800d3b6:	604a      	str	r2, [r1, #4]
 800d3b8:	2301      	movs	r3, #1
 800d3ba:	4093      	lsls	r3, r2
 800d3bc:	608b      	str	r3, [r1, #8]
 800d3be:	4630      	mov	r0, r6
 800d3c0:	f000 fdce 	bl	800df60 <_Bfree>
 800d3c4:	69f3      	ldr	r3, [r6, #28]
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	601a      	str	r2, [r3, #0]
 800d3ca:	f1b9 0300 	subs.w	r3, r9, #0
 800d3ce:	bfbb      	ittet	lt
 800d3d0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d3d4:	9303      	strlt	r3, [sp, #12]
 800d3d6:	2300      	movge	r3, #0
 800d3d8:	2201      	movlt	r2, #1
 800d3da:	bfac      	ite	ge
 800d3dc:	6023      	strge	r3, [r4, #0]
 800d3de:	6022      	strlt	r2, [r4, #0]
 800d3e0:	4b97      	ldr	r3, [pc, #604]	; (800d640 <_dtoa_r+0x2d0>)
 800d3e2:	9c03      	ldr	r4, [sp, #12]
 800d3e4:	43a3      	bics	r3, r4
 800d3e6:	d11c      	bne.n	800d422 <_dtoa_r+0xb2>
 800d3e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d3ea:	f242 730f 	movw	r3, #9999	; 0x270f
 800d3ee:	6013      	str	r3, [r2, #0]
 800d3f0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800d3f4:	ea53 0308 	orrs.w	r3, r3, r8
 800d3f8:	f000 84fb 	beq.w	800ddf2 <_dtoa_r+0xa82>
 800d3fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d3fe:	b963      	cbnz	r3, 800d41a <_dtoa_r+0xaa>
 800d400:	4b90      	ldr	r3, [pc, #576]	; (800d644 <_dtoa_r+0x2d4>)
 800d402:	e020      	b.n	800d446 <_dtoa_r+0xd6>
 800d404:	4b90      	ldr	r3, [pc, #576]	; (800d648 <_dtoa_r+0x2d8>)
 800d406:	9301      	str	r3, [sp, #4]
 800d408:	3308      	adds	r3, #8
 800d40a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d40c:	6013      	str	r3, [r2, #0]
 800d40e:	9801      	ldr	r0, [sp, #4]
 800d410:	b011      	add	sp, #68	; 0x44
 800d412:	ecbd 8b02 	vpop	{d8}
 800d416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d41a:	4b8a      	ldr	r3, [pc, #552]	; (800d644 <_dtoa_r+0x2d4>)
 800d41c:	9301      	str	r3, [sp, #4]
 800d41e:	3303      	adds	r3, #3
 800d420:	e7f3      	b.n	800d40a <_dtoa_r+0x9a>
 800d422:	ed9d 8b02 	vldr	d8, [sp, #8]
 800d426:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d42a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d42e:	d10c      	bne.n	800d44a <_dtoa_r+0xda>
 800d430:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d432:	2301      	movs	r3, #1
 800d434:	6013      	str	r3, [r2, #0]
 800d436:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d438:	2b00      	cmp	r3, #0
 800d43a:	f000 84d7 	beq.w	800ddec <_dtoa_r+0xa7c>
 800d43e:	4b83      	ldr	r3, [pc, #524]	; (800d64c <_dtoa_r+0x2dc>)
 800d440:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d442:	6013      	str	r3, [r2, #0]
 800d444:	3b01      	subs	r3, #1
 800d446:	9301      	str	r3, [sp, #4]
 800d448:	e7e1      	b.n	800d40e <_dtoa_r+0x9e>
 800d44a:	aa0e      	add	r2, sp, #56	; 0x38
 800d44c:	a90f      	add	r1, sp, #60	; 0x3c
 800d44e:	4630      	mov	r0, r6
 800d450:	eeb0 0b48 	vmov.f64	d0, d8
 800d454:	f001 f866 	bl	800e524 <__d2b>
 800d458:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800d45c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d45e:	4605      	mov	r5, r0
 800d460:	2b00      	cmp	r3, #0
 800d462:	d046      	beq.n	800d4f2 <_dtoa_r+0x182>
 800d464:	eeb0 7b48 	vmov.f64	d7, d8
 800d468:	ee18 1a90 	vmov	r1, s17
 800d46c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800d470:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800d474:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800d478:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d47c:	2000      	movs	r0, #0
 800d47e:	ee07 1a90 	vmov	s15, r1
 800d482:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800d486:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800d620 <_dtoa_r+0x2b0>
 800d48a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d48e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800d628 <_dtoa_r+0x2b8>
 800d492:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d496:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800d630 <_dtoa_r+0x2c0>
 800d49a:	ee07 3a90 	vmov	s15, r3
 800d49e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800d4a2:	eeb0 7b46 	vmov.f64	d7, d6
 800d4a6:	eea4 7b05 	vfma.f64	d7, d4, d5
 800d4aa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d4ae:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d4b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4b6:	ee16 ba90 	vmov	fp, s13
 800d4ba:	9009      	str	r0, [sp, #36]	; 0x24
 800d4bc:	d508      	bpl.n	800d4d0 <_dtoa_r+0x160>
 800d4be:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d4c2:	eeb4 6b47 	vcmp.f64	d6, d7
 800d4c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4ca:	bf18      	it	ne
 800d4cc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800d4d0:	f1bb 0f16 	cmp.w	fp, #22
 800d4d4:	d82b      	bhi.n	800d52e <_dtoa_r+0x1be>
 800d4d6:	495e      	ldr	r1, [pc, #376]	; (800d650 <_dtoa_r+0x2e0>)
 800d4d8:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800d4dc:	ed91 7b00 	vldr	d7, [r1]
 800d4e0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d4e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4e8:	d501      	bpl.n	800d4ee <_dtoa_r+0x17e>
 800d4ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d4ee:	2100      	movs	r1, #0
 800d4f0:	e01e      	b.n	800d530 <_dtoa_r+0x1c0>
 800d4f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d4f4:	4413      	add	r3, r2
 800d4f6:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800d4fa:	2920      	cmp	r1, #32
 800d4fc:	bfc1      	itttt	gt
 800d4fe:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800d502:	408c      	lslgt	r4, r1
 800d504:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800d508:	fa28 f101 	lsrgt.w	r1, r8, r1
 800d50c:	bfd6      	itet	le
 800d50e:	f1c1 0120 	rsble	r1, r1, #32
 800d512:	4321      	orrgt	r1, r4
 800d514:	fa08 f101 	lslle.w	r1, r8, r1
 800d518:	ee07 1a90 	vmov	s15, r1
 800d51c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d520:	3b01      	subs	r3, #1
 800d522:	ee17 1a90 	vmov	r1, s15
 800d526:	2001      	movs	r0, #1
 800d528:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800d52c:	e7a7      	b.n	800d47e <_dtoa_r+0x10e>
 800d52e:	2101      	movs	r1, #1
 800d530:	1ad2      	subs	r2, r2, r3
 800d532:	1e53      	subs	r3, r2, #1
 800d534:	9305      	str	r3, [sp, #20]
 800d536:	bf45      	ittet	mi
 800d538:	f1c2 0301 	rsbmi	r3, r2, #1
 800d53c:	9304      	strmi	r3, [sp, #16]
 800d53e:	2300      	movpl	r3, #0
 800d540:	2300      	movmi	r3, #0
 800d542:	bf4c      	ite	mi
 800d544:	9305      	strmi	r3, [sp, #20]
 800d546:	9304      	strpl	r3, [sp, #16]
 800d548:	f1bb 0f00 	cmp.w	fp, #0
 800d54c:	910b      	str	r1, [sp, #44]	; 0x2c
 800d54e:	db18      	blt.n	800d582 <_dtoa_r+0x212>
 800d550:	9b05      	ldr	r3, [sp, #20]
 800d552:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800d556:	445b      	add	r3, fp
 800d558:	9305      	str	r3, [sp, #20]
 800d55a:	2300      	movs	r3, #0
 800d55c:	9a06      	ldr	r2, [sp, #24]
 800d55e:	2a09      	cmp	r2, #9
 800d560:	d848      	bhi.n	800d5f4 <_dtoa_r+0x284>
 800d562:	2a05      	cmp	r2, #5
 800d564:	bfc4      	itt	gt
 800d566:	3a04      	subgt	r2, #4
 800d568:	9206      	strgt	r2, [sp, #24]
 800d56a:	9a06      	ldr	r2, [sp, #24]
 800d56c:	f1a2 0202 	sub.w	r2, r2, #2
 800d570:	bfcc      	ite	gt
 800d572:	2400      	movgt	r4, #0
 800d574:	2401      	movle	r4, #1
 800d576:	2a03      	cmp	r2, #3
 800d578:	d847      	bhi.n	800d60a <_dtoa_r+0x29a>
 800d57a:	e8df f002 	tbb	[pc, r2]
 800d57e:	2d0b      	.short	0x2d0b
 800d580:	392b      	.short	0x392b
 800d582:	9b04      	ldr	r3, [sp, #16]
 800d584:	2200      	movs	r2, #0
 800d586:	eba3 030b 	sub.w	r3, r3, fp
 800d58a:	9304      	str	r3, [sp, #16]
 800d58c:	920a      	str	r2, [sp, #40]	; 0x28
 800d58e:	f1cb 0300 	rsb	r3, fp, #0
 800d592:	e7e3      	b.n	800d55c <_dtoa_r+0x1ec>
 800d594:	2200      	movs	r2, #0
 800d596:	9207      	str	r2, [sp, #28]
 800d598:	9a08      	ldr	r2, [sp, #32]
 800d59a:	2a00      	cmp	r2, #0
 800d59c:	dc38      	bgt.n	800d610 <_dtoa_r+0x2a0>
 800d59e:	f04f 0a01 	mov.w	sl, #1
 800d5a2:	46d1      	mov	r9, sl
 800d5a4:	4652      	mov	r2, sl
 800d5a6:	f8cd a020 	str.w	sl, [sp, #32]
 800d5aa:	69f7      	ldr	r7, [r6, #28]
 800d5ac:	2100      	movs	r1, #0
 800d5ae:	2004      	movs	r0, #4
 800d5b0:	f100 0c14 	add.w	ip, r0, #20
 800d5b4:	4594      	cmp	ip, r2
 800d5b6:	d930      	bls.n	800d61a <_dtoa_r+0x2aa>
 800d5b8:	6079      	str	r1, [r7, #4]
 800d5ba:	4630      	mov	r0, r6
 800d5bc:	930d      	str	r3, [sp, #52]	; 0x34
 800d5be:	f000 fc8f 	bl	800dee0 <_Balloc>
 800d5c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d5c4:	9001      	str	r0, [sp, #4]
 800d5c6:	4602      	mov	r2, r0
 800d5c8:	2800      	cmp	r0, #0
 800d5ca:	d145      	bne.n	800d658 <_dtoa_r+0x2e8>
 800d5cc:	4b21      	ldr	r3, [pc, #132]	; (800d654 <_dtoa_r+0x2e4>)
 800d5ce:	f240 11af 	movw	r1, #431	; 0x1af
 800d5d2:	e6e5      	b.n	800d3a0 <_dtoa_r+0x30>
 800d5d4:	2201      	movs	r2, #1
 800d5d6:	e7de      	b.n	800d596 <_dtoa_r+0x226>
 800d5d8:	2200      	movs	r2, #0
 800d5da:	9207      	str	r2, [sp, #28]
 800d5dc:	9a08      	ldr	r2, [sp, #32]
 800d5de:	eb0b 0a02 	add.w	sl, fp, r2
 800d5e2:	f10a 0901 	add.w	r9, sl, #1
 800d5e6:	464a      	mov	r2, r9
 800d5e8:	2a01      	cmp	r2, #1
 800d5ea:	bfb8      	it	lt
 800d5ec:	2201      	movlt	r2, #1
 800d5ee:	e7dc      	b.n	800d5aa <_dtoa_r+0x23a>
 800d5f0:	2201      	movs	r2, #1
 800d5f2:	e7f2      	b.n	800d5da <_dtoa_r+0x26a>
 800d5f4:	2401      	movs	r4, #1
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800d5fc:	f04f 3aff 	mov.w	sl, #4294967295
 800d600:	2100      	movs	r1, #0
 800d602:	46d1      	mov	r9, sl
 800d604:	2212      	movs	r2, #18
 800d606:	9108      	str	r1, [sp, #32]
 800d608:	e7cf      	b.n	800d5aa <_dtoa_r+0x23a>
 800d60a:	2201      	movs	r2, #1
 800d60c:	9207      	str	r2, [sp, #28]
 800d60e:	e7f5      	b.n	800d5fc <_dtoa_r+0x28c>
 800d610:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d614:	46d1      	mov	r9, sl
 800d616:	4652      	mov	r2, sl
 800d618:	e7c7      	b.n	800d5aa <_dtoa_r+0x23a>
 800d61a:	3101      	adds	r1, #1
 800d61c:	0040      	lsls	r0, r0, #1
 800d61e:	e7c7      	b.n	800d5b0 <_dtoa_r+0x240>
 800d620:	636f4361 	.word	0x636f4361
 800d624:	3fd287a7 	.word	0x3fd287a7
 800d628:	8b60c8b3 	.word	0x8b60c8b3
 800d62c:	3fc68a28 	.word	0x3fc68a28
 800d630:	509f79fb 	.word	0x509f79fb
 800d634:	3fd34413 	.word	0x3fd34413
 800d638:	0800f1c9 	.word	0x0800f1c9
 800d63c:	0800f1e0 	.word	0x0800f1e0
 800d640:	7ff00000 	.word	0x7ff00000
 800d644:	0800f1c5 	.word	0x0800f1c5
 800d648:	0800f1bc 	.word	0x0800f1bc
 800d64c:	0800f199 	.word	0x0800f199
 800d650:	0800f2d0 	.word	0x0800f2d0
 800d654:	0800f238 	.word	0x0800f238
 800d658:	69f2      	ldr	r2, [r6, #28]
 800d65a:	9901      	ldr	r1, [sp, #4]
 800d65c:	6011      	str	r1, [r2, #0]
 800d65e:	f1b9 0f0e 	cmp.w	r9, #14
 800d662:	d86c      	bhi.n	800d73e <_dtoa_r+0x3ce>
 800d664:	2c00      	cmp	r4, #0
 800d666:	d06a      	beq.n	800d73e <_dtoa_r+0x3ce>
 800d668:	f1bb 0f00 	cmp.w	fp, #0
 800d66c:	f340 80a0 	ble.w	800d7b0 <_dtoa_r+0x440>
 800d670:	4ac1      	ldr	r2, [pc, #772]	; (800d978 <_dtoa_r+0x608>)
 800d672:	f00b 010f 	and.w	r1, fp, #15
 800d676:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800d67a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d67e:	ed92 7b00 	vldr	d7, [r2]
 800d682:	ea4f 122b 	mov.w	r2, fp, asr #4
 800d686:	f000 8087 	beq.w	800d798 <_dtoa_r+0x428>
 800d68a:	49bc      	ldr	r1, [pc, #752]	; (800d97c <_dtoa_r+0x60c>)
 800d68c:	ed91 6b08 	vldr	d6, [r1, #32]
 800d690:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800d694:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d698:	f002 020f 	and.w	r2, r2, #15
 800d69c:	2103      	movs	r1, #3
 800d69e:	48b7      	ldr	r0, [pc, #732]	; (800d97c <_dtoa_r+0x60c>)
 800d6a0:	2a00      	cmp	r2, #0
 800d6a2:	d17b      	bne.n	800d79c <_dtoa_r+0x42c>
 800d6a4:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d6a8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d6ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d6b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d6b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d6b6:	2a00      	cmp	r2, #0
 800d6b8:	f000 80a0 	beq.w	800d7fc <_dtoa_r+0x48c>
 800d6bc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800d6c0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d6c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6c8:	f140 8098 	bpl.w	800d7fc <_dtoa_r+0x48c>
 800d6cc:	f1b9 0f00 	cmp.w	r9, #0
 800d6d0:	f000 8094 	beq.w	800d7fc <_dtoa_r+0x48c>
 800d6d4:	f1ba 0f00 	cmp.w	sl, #0
 800d6d8:	dd2f      	ble.n	800d73a <_dtoa_r+0x3ca>
 800d6da:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800d6de:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d6e2:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d6e6:	f10b 32ff 	add.w	r2, fp, #4294967295
 800d6ea:	3101      	adds	r1, #1
 800d6ec:	4654      	mov	r4, sl
 800d6ee:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d6f2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800d6f6:	ee07 1a90 	vmov	s15, r1
 800d6fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d6fe:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d702:	ee15 7a90 	vmov	r7, s11
 800d706:	ec51 0b15 	vmov	r0, r1, d5
 800d70a:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800d70e:	2c00      	cmp	r4, #0
 800d710:	d177      	bne.n	800d802 <_dtoa_r+0x492>
 800d712:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d716:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d71a:	ec41 0b17 	vmov	d7, r0, r1
 800d71e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d726:	f300 826a 	bgt.w	800dbfe <_dtoa_r+0x88e>
 800d72a:	eeb1 7b47 	vneg.f64	d7, d7
 800d72e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d736:	f100 8260 	bmi.w	800dbfa <_dtoa_r+0x88a>
 800d73a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d73e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d740:	2a00      	cmp	r2, #0
 800d742:	f2c0 811d 	blt.w	800d980 <_dtoa_r+0x610>
 800d746:	f1bb 0f0e 	cmp.w	fp, #14
 800d74a:	f300 8119 	bgt.w	800d980 <_dtoa_r+0x610>
 800d74e:	4b8a      	ldr	r3, [pc, #552]	; (800d978 <_dtoa_r+0x608>)
 800d750:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d754:	ed93 6b00 	vldr	d6, [r3]
 800d758:	9b08      	ldr	r3, [sp, #32]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	f280 80b7 	bge.w	800d8ce <_dtoa_r+0x55e>
 800d760:	f1b9 0f00 	cmp.w	r9, #0
 800d764:	f300 80b3 	bgt.w	800d8ce <_dtoa_r+0x55e>
 800d768:	f040 8246 	bne.w	800dbf8 <_dtoa_r+0x888>
 800d76c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d770:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d774:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d778:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d77c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d780:	464c      	mov	r4, r9
 800d782:	464f      	mov	r7, r9
 800d784:	f280 821c 	bge.w	800dbc0 <_dtoa_r+0x850>
 800d788:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d78c:	2331      	movs	r3, #49	; 0x31
 800d78e:	f808 3b01 	strb.w	r3, [r8], #1
 800d792:	f10b 0b01 	add.w	fp, fp, #1
 800d796:	e218      	b.n	800dbca <_dtoa_r+0x85a>
 800d798:	2102      	movs	r1, #2
 800d79a:	e780      	b.n	800d69e <_dtoa_r+0x32e>
 800d79c:	07d4      	lsls	r4, r2, #31
 800d79e:	d504      	bpl.n	800d7aa <_dtoa_r+0x43a>
 800d7a0:	ed90 6b00 	vldr	d6, [r0]
 800d7a4:	3101      	adds	r1, #1
 800d7a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d7aa:	1052      	asrs	r2, r2, #1
 800d7ac:	3008      	adds	r0, #8
 800d7ae:	e777      	b.n	800d6a0 <_dtoa_r+0x330>
 800d7b0:	d022      	beq.n	800d7f8 <_dtoa_r+0x488>
 800d7b2:	f1cb 0200 	rsb	r2, fp, #0
 800d7b6:	4970      	ldr	r1, [pc, #448]	; (800d978 <_dtoa_r+0x608>)
 800d7b8:	f002 000f 	and.w	r0, r2, #15
 800d7bc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800d7c0:	ed91 7b00 	vldr	d7, [r1]
 800d7c4:	ee28 7b07 	vmul.f64	d7, d8, d7
 800d7c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d7cc:	486b      	ldr	r0, [pc, #428]	; (800d97c <_dtoa_r+0x60c>)
 800d7ce:	1112      	asrs	r2, r2, #4
 800d7d0:	2400      	movs	r4, #0
 800d7d2:	2102      	movs	r1, #2
 800d7d4:	b92a      	cbnz	r2, 800d7e2 <_dtoa_r+0x472>
 800d7d6:	2c00      	cmp	r4, #0
 800d7d8:	f43f af6a 	beq.w	800d6b0 <_dtoa_r+0x340>
 800d7dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d7e0:	e766      	b.n	800d6b0 <_dtoa_r+0x340>
 800d7e2:	07d7      	lsls	r7, r2, #31
 800d7e4:	d505      	bpl.n	800d7f2 <_dtoa_r+0x482>
 800d7e6:	ed90 6b00 	vldr	d6, [r0]
 800d7ea:	3101      	adds	r1, #1
 800d7ec:	2401      	movs	r4, #1
 800d7ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d7f2:	1052      	asrs	r2, r2, #1
 800d7f4:	3008      	adds	r0, #8
 800d7f6:	e7ed      	b.n	800d7d4 <_dtoa_r+0x464>
 800d7f8:	2102      	movs	r1, #2
 800d7fa:	e759      	b.n	800d6b0 <_dtoa_r+0x340>
 800d7fc:	465a      	mov	r2, fp
 800d7fe:	464c      	mov	r4, r9
 800d800:	e775      	b.n	800d6ee <_dtoa_r+0x37e>
 800d802:	ec41 0b17 	vmov	d7, r0, r1
 800d806:	495c      	ldr	r1, [pc, #368]	; (800d978 <_dtoa_r+0x608>)
 800d808:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800d80c:	ed11 4b02 	vldr	d4, [r1, #-8]
 800d810:	9901      	ldr	r1, [sp, #4]
 800d812:	440c      	add	r4, r1
 800d814:	9907      	ldr	r1, [sp, #28]
 800d816:	b351      	cbz	r1, 800d86e <_dtoa_r+0x4fe>
 800d818:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800d81c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800d820:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d824:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d828:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d82c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d830:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d834:	ee14 1a90 	vmov	r1, s9
 800d838:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d83c:	3130      	adds	r1, #48	; 0x30
 800d83e:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d842:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d84a:	f808 1b01 	strb.w	r1, [r8], #1
 800d84e:	d439      	bmi.n	800d8c4 <_dtoa_r+0x554>
 800d850:	ee32 5b46 	vsub.f64	d5, d2, d6
 800d854:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800d858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d85c:	d472      	bmi.n	800d944 <_dtoa_r+0x5d4>
 800d85e:	45a0      	cmp	r8, r4
 800d860:	f43f af6b 	beq.w	800d73a <_dtoa_r+0x3ca>
 800d864:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d868:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d86c:	e7e0      	b.n	800d830 <_dtoa_r+0x4c0>
 800d86e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d872:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d876:	4620      	mov	r0, r4
 800d878:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d87c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d880:	ee14 1a90 	vmov	r1, s9
 800d884:	3130      	adds	r1, #48	; 0x30
 800d886:	f808 1b01 	strb.w	r1, [r8], #1
 800d88a:	45a0      	cmp	r8, r4
 800d88c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d890:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d894:	d118      	bne.n	800d8c8 <_dtoa_r+0x558>
 800d896:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d89a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800d89e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800d8a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8a6:	dc4d      	bgt.n	800d944 <_dtoa_r+0x5d4>
 800d8a8:	ee35 5b47 	vsub.f64	d5, d5, d7
 800d8ac:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800d8b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8b4:	f57f af41 	bpl.w	800d73a <_dtoa_r+0x3ca>
 800d8b8:	4680      	mov	r8, r0
 800d8ba:	3801      	subs	r0, #1
 800d8bc:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800d8c0:	2b30      	cmp	r3, #48	; 0x30
 800d8c2:	d0f9      	beq.n	800d8b8 <_dtoa_r+0x548>
 800d8c4:	4693      	mov	fp, r2
 800d8c6:	e02a      	b.n	800d91e <_dtoa_r+0x5ae>
 800d8c8:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d8cc:	e7d6      	b.n	800d87c <_dtoa_r+0x50c>
 800d8ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d8d2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800d8d6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d8da:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800d8de:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800d8e2:	ee15 3a10 	vmov	r3, s10
 800d8e6:	3330      	adds	r3, #48	; 0x30
 800d8e8:	f808 3b01 	strb.w	r3, [r8], #1
 800d8ec:	9b01      	ldr	r3, [sp, #4]
 800d8ee:	eba8 0303 	sub.w	r3, r8, r3
 800d8f2:	4599      	cmp	r9, r3
 800d8f4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800d8f8:	eea3 7b46 	vfms.f64	d7, d3, d6
 800d8fc:	d133      	bne.n	800d966 <_dtoa_r+0x5f6>
 800d8fe:	ee37 7b07 	vadd.f64	d7, d7, d7
 800d902:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d90a:	dc1a      	bgt.n	800d942 <_dtoa_r+0x5d2>
 800d90c:	eeb4 7b46 	vcmp.f64	d7, d6
 800d910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d914:	d103      	bne.n	800d91e <_dtoa_r+0x5ae>
 800d916:	ee15 3a10 	vmov	r3, s10
 800d91a:	07d9      	lsls	r1, r3, #31
 800d91c:	d411      	bmi.n	800d942 <_dtoa_r+0x5d2>
 800d91e:	4629      	mov	r1, r5
 800d920:	4630      	mov	r0, r6
 800d922:	f000 fb1d 	bl	800df60 <_Bfree>
 800d926:	2300      	movs	r3, #0
 800d928:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d92a:	f888 3000 	strb.w	r3, [r8]
 800d92e:	f10b 0301 	add.w	r3, fp, #1
 800d932:	6013      	str	r3, [r2, #0]
 800d934:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d936:	2b00      	cmp	r3, #0
 800d938:	f43f ad69 	beq.w	800d40e <_dtoa_r+0x9e>
 800d93c:	f8c3 8000 	str.w	r8, [r3]
 800d940:	e565      	b.n	800d40e <_dtoa_r+0x9e>
 800d942:	465a      	mov	r2, fp
 800d944:	4643      	mov	r3, r8
 800d946:	4698      	mov	r8, r3
 800d948:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800d94c:	2939      	cmp	r1, #57	; 0x39
 800d94e:	d106      	bne.n	800d95e <_dtoa_r+0x5ee>
 800d950:	9901      	ldr	r1, [sp, #4]
 800d952:	4299      	cmp	r1, r3
 800d954:	d1f7      	bne.n	800d946 <_dtoa_r+0x5d6>
 800d956:	9801      	ldr	r0, [sp, #4]
 800d958:	2130      	movs	r1, #48	; 0x30
 800d95a:	3201      	adds	r2, #1
 800d95c:	7001      	strb	r1, [r0, #0]
 800d95e:	7819      	ldrb	r1, [r3, #0]
 800d960:	3101      	adds	r1, #1
 800d962:	7019      	strb	r1, [r3, #0]
 800d964:	e7ae      	b.n	800d8c4 <_dtoa_r+0x554>
 800d966:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d96a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d96e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d972:	d1b2      	bne.n	800d8da <_dtoa_r+0x56a>
 800d974:	e7d3      	b.n	800d91e <_dtoa_r+0x5ae>
 800d976:	bf00      	nop
 800d978:	0800f2d0 	.word	0x0800f2d0
 800d97c:	0800f2a8 	.word	0x0800f2a8
 800d980:	9907      	ldr	r1, [sp, #28]
 800d982:	2900      	cmp	r1, #0
 800d984:	f000 80d0 	beq.w	800db28 <_dtoa_r+0x7b8>
 800d988:	9906      	ldr	r1, [sp, #24]
 800d98a:	2901      	cmp	r1, #1
 800d98c:	f300 80b4 	bgt.w	800daf8 <_dtoa_r+0x788>
 800d990:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d992:	2900      	cmp	r1, #0
 800d994:	f000 80ac 	beq.w	800daf0 <_dtoa_r+0x780>
 800d998:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d99c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d9a0:	461c      	mov	r4, r3
 800d9a2:	9309      	str	r3, [sp, #36]	; 0x24
 800d9a4:	9b04      	ldr	r3, [sp, #16]
 800d9a6:	4413      	add	r3, r2
 800d9a8:	9304      	str	r3, [sp, #16]
 800d9aa:	9b05      	ldr	r3, [sp, #20]
 800d9ac:	2101      	movs	r1, #1
 800d9ae:	4413      	add	r3, r2
 800d9b0:	4630      	mov	r0, r6
 800d9b2:	9305      	str	r3, [sp, #20]
 800d9b4:	f000 fb8a 	bl	800e0cc <__i2b>
 800d9b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9ba:	4607      	mov	r7, r0
 800d9bc:	f1b8 0f00 	cmp.w	r8, #0
 800d9c0:	d00d      	beq.n	800d9de <_dtoa_r+0x66e>
 800d9c2:	9a05      	ldr	r2, [sp, #20]
 800d9c4:	2a00      	cmp	r2, #0
 800d9c6:	dd0a      	ble.n	800d9de <_dtoa_r+0x66e>
 800d9c8:	4542      	cmp	r2, r8
 800d9ca:	9904      	ldr	r1, [sp, #16]
 800d9cc:	bfa8      	it	ge
 800d9ce:	4642      	movge	r2, r8
 800d9d0:	1a89      	subs	r1, r1, r2
 800d9d2:	9104      	str	r1, [sp, #16]
 800d9d4:	9905      	ldr	r1, [sp, #20]
 800d9d6:	eba8 0802 	sub.w	r8, r8, r2
 800d9da:	1a8a      	subs	r2, r1, r2
 800d9dc:	9205      	str	r2, [sp, #20]
 800d9de:	b303      	cbz	r3, 800da22 <_dtoa_r+0x6b2>
 800d9e0:	9a07      	ldr	r2, [sp, #28]
 800d9e2:	2a00      	cmp	r2, #0
 800d9e4:	f000 80a5 	beq.w	800db32 <_dtoa_r+0x7c2>
 800d9e8:	2c00      	cmp	r4, #0
 800d9ea:	dd13      	ble.n	800da14 <_dtoa_r+0x6a4>
 800d9ec:	4639      	mov	r1, r7
 800d9ee:	4622      	mov	r2, r4
 800d9f0:	4630      	mov	r0, r6
 800d9f2:	930d      	str	r3, [sp, #52]	; 0x34
 800d9f4:	f000 fc2a 	bl	800e24c <__pow5mult>
 800d9f8:	462a      	mov	r2, r5
 800d9fa:	4601      	mov	r1, r0
 800d9fc:	4607      	mov	r7, r0
 800d9fe:	4630      	mov	r0, r6
 800da00:	f000 fb7a 	bl	800e0f8 <__multiply>
 800da04:	4629      	mov	r1, r5
 800da06:	9009      	str	r0, [sp, #36]	; 0x24
 800da08:	4630      	mov	r0, r6
 800da0a:	f000 faa9 	bl	800df60 <_Bfree>
 800da0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800da10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da12:	4615      	mov	r5, r2
 800da14:	1b1a      	subs	r2, r3, r4
 800da16:	d004      	beq.n	800da22 <_dtoa_r+0x6b2>
 800da18:	4629      	mov	r1, r5
 800da1a:	4630      	mov	r0, r6
 800da1c:	f000 fc16 	bl	800e24c <__pow5mult>
 800da20:	4605      	mov	r5, r0
 800da22:	2101      	movs	r1, #1
 800da24:	4630      	mov	r0, r6
 800da26:	f000 fb51 	bl	800e0cc <__i2b>
 800da2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	4604      	mov	r4, r0
 800da30:	f340 8081 	ble.w	800db36 <_dtoa_r+0x7c6>
 800da34:	461a      	mov	r2, r3
 800da36:	4601      	mov	r1, r0
 800da38:	4630      	mov	r0, r6
 800da3a:	f000 fc07 	bl	800e24c <__pow5mult>
 800da3e:	9b06      	ldr	r3, [sp, #24]
 800da40:	2b01      	cmp	r3, #1
 800da42:	4604      	mov	r4, r0
 800da44:	dd7a      	ble.n	800db3c <_dtoa_r+0x7cc>
 800da46:	2300      	movs	r3, #0
 800da48:	9309      	str	r3, [sp, #36]	; 0x24
 800da4a:	6922      	ldr	r2, [r4, #16]
 800da4c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800da50:	6910      	ldr	r0, [r2, #16]
 800da52:	f000 faed 	bl	800e030 <__hi0bits>
 800da56:	f1c0 0020 	rsb	r0, r0, #32
 800da5a:	9b05      	ldr	r3, [sp, #20]
 800da5c:	4418      	add	r0, r3
 800da5e:	f010 001f 	ands.w	r0, r0, #31
 800da62:	f000 8093 	beq.w	800db8c <_dtoa_r+0x81c>
 800da66:	f1c0 0220 	rsb	r2, r0, #32
 800da6a:	2a04      	cmp	r2, #4
 800da6c:	f340 8085 	ble.w	800db7a <_dtoa_r+0x80a>
 800da70:	9b04      	ldr	r3, [sp, #16]
 800da72:	f1c0 001c 	rsb	r0, r0, #28
 800da76:	4403      	add	r3, r0
 800da78:	9304      	str	r3, [sp, #16]
 800da7a:	9b05      	ldr	r3, [sp, #20]
 800da7c:	4480      	add	r8, r0
 800da7e:	4403      	add	r3, r0
 800da80:	9305      	str	r3, [sp, #20]
 800da82:	9b04      	ldr	r3, [sp, #16]
 800da84:	2b00      	cmp	r3, #0
 800da86:	dd05      	ble.n	800da94 <_dtoa_r+0x724>
 800da88:	4629      	mov	r1, r5
 800da8a:	461a      	mov	r2, r3
 800da8c:	4630      	mov	r0, r6
 800da8e:	f000 fc37 	bl	800e300 <__lshift>
 800da92:	4605      	mov	r5, r0
 800da94:	9b05      	ldr	r3, [sp, #20]
 800da96:	2b00      	cmp	r3, #0
 800da98:	dd05      	ble.n	800daa6 <_dtoa_r+0x736>
 800da9a:	4621      	mov	r1, r4
 800da9c:	461a      	mov	r2, r3
 800da9e:	4630      	mov	r0, r6
 800daa0:	f000 fc2e 	bl	800e300 <__lshift>
 800daa4:	4604      	mov	r4, r0
 800daa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d071      	beq.n	800db90 <_dtoa_r+0x820>
 800daac:	4621      	mov	r1, r4
 800daae:	4628      	mov	r0, r5
 800dab0:	f000 fc92 	bl	800e3d8 <__mcmp>
 800dab4:	2800      	cmp	r0, #0
 800dab6:	da6b      	bge.n	800db90 <_dtoa_r+0x820>
 800dab8:	2300      	movs	r3, #0
 800daba:	4629      	mov	r1, r5
 800dabc:	220a      	movs	r2, #10
 800dabe:	4630      	mov	r0, r6
 800dac0:	f000 fa70 	bl	800dfa4 <__multadd>
 800dac4:	9b07      	ldr	r3, [sp, #28]
 800dac6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800daca:	4605      	mov	r5, r0
 800dacc:	2b00      	cmp	r3, #0
 800dace:	f000 8197 	beq.w	800de00 <_dtoa_r+0xa90>
 800dad2:	4639      	mov	r1, r7
 800dad4:	2300      	movs	r3, #0
 800dad6:	220a      	movs	r2, #10
 800dad8:	4630      	mov	r0, r6
 800dada:	f000 fa63 	bl	800dfa4 <__multadd>
 800dade:	f1ba 0f00 	cmp.w	sl, #0
 800dae2:	4607      	mov	r7, r0
 800dae4:	f300 8093 	bgt.w	800dc0e <_dtoa_r+0x89e>
 800dae8:	9b06      	ldr	r3, [sp, #24]
 800daea:	2b02      	cmp	r3, #2
 800daec:	dc57      	bgt.n	800db9e <_dtoa_r+0x82e>
 800daee:	e08e      	b.n	800dc0e <_dtoa_r+0x89e>
 800daf0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800daf2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800daf6:	e751      	b.n	800d99c <_dtoa_r+0x62c>
 800daf8:	f109 34ff 	add.w	r4, r9, #4294967295
 800dafc:	42a3      	cmp	r3, r4
 800dafe:	bfbf      	itttt	lt
 800db00:	1ae2      	sublt	r2, r4, r3
 800db02:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800db04:	189b      	addlt	r3, r3, r2
 800db06:	930a      	strlt	r3, [sp, #40]	; 0x28
 800db08:	bfae      	itee	ge
 800db0a:	1b1c      	subge	r4, r3, r4
 800db0c:	4623      	movlt	r3, r4
 800db0e:	2400      	movlt	r4, #0
 800db10:	f1b9 0f00 	cmp.w	r9, #0
 800db14:	bfb5      	itete	lt
 800db16:	9a04      	ldrlt	r2, [sp, #16]
 800db18:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800db1c:	eba2 0809 	sublt.w	r8, r2, r9
 800db20:	464a      	movge	r2, r9
 800db22:	bfb8      	it	lt
 800db24:	2200      	movlt	r2, #0
 800db26:	e73c      	b.n	800d9a2 <_dtoa_r+0x632>
 800db28:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800db2c:	9f07      	ldr	r7, [sp, #28]
 800db2e:	461c      	mov	r4, r3
 800db30:	e744      	b.n	800d9bc <_dtoa_r+0x64c>
 800db32:	461a      	mov	r2, r3
 800db34:	e770      	b.n	800da18 <_dtoa_r+0x6a8>
 800db36:	9b06      	ldr	r3, [sp, #24]
 800db38:	2b01      	cmp	r3, #1
 800db3a:	dc18      	bgt.n	800db6e <_dtoa_r+0x7fe>
 800db3c:	9b02      	ldr	r3, [sp, #8]
 800db3e:	b9b3      	cbnz	r3, 800db6e <_dtoa_r+0x7fe>
 800db40:	9b03      	ldr	r3, [sp, #12]
 800db42:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800db46:	b9a2      	cbnz	r2, 800db72 <_dtoa_r+0x802>
 800db48:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800db4c:	0d12      	lsrs	r2, r2, #20
 800db4e:	0512      	lsls	r2, r2, #20
 800db50:	b18a      	cbz	r2, 800db76 <_dtoa_r+0x806>
 800db52:	9b04      	ldr	r3, [sp, #16]
 800db54:	3301      	adds	r3, #1
 800db56:	9304      	str	r3, [sp, #16]
 800db58:	9b05      	ldr	r3, [sp, #20]
 800db5a:	3301      	adds	r3, #1
 800db5c:	9305      	str	r3, [sp, #20]
 800db5e:	2301      	movs	r3, #1
 800db60:	9309      	str	r3, [sp, #36]	; 0x24
 800db62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db64:	2b00      	cmp	r3, #0
 800db66:	f47f af70 	bne.w	800da4a <_dtoa_r+0x6da>
 800db6a:	2001      	movs	r0, #1
 800db6c:	e775      	b.n	800da5a <_dtoa_r+0x6ea>
 800db6e:	2300      	movs	r3, #0
 800db70:	e7f6      	b.n	800db60 <_dtoa_r+0x7f0>
 800db72:	9b02      	ldr	r3, [sp, #8]
 800db74:	e7f4      	b.n	800db60 <_dtoa_r+0x7f0>
 800db76:	9209      	str	r2, [sp, #36]	; 0x24
 800db78:	e7f3      	b.n	800db62 <_dtoa_r+0x7f2>
 800db7a:	d082      	beq.n	800da82 <_dtoa_r+0x712>
 800db7c:	9b04      	ldr	r3, [sp, #16]
 800db7e:	321c      	adds	r2, #28
 800db80:	4413      	add	r3, r2
 800db82:	9304      	str	r3, [sp, #16]
 800db84:	9b05      	ldr	r3, [sp, #20]
 800db86:	4490      	add	r8, r2
 800db88:	4413      	add	r3, r2
 800db8a:	e779      	b.n	800da80 <_dtoa_r+0x710>
 800db8c:	4602      	mov	r2, r0
 800db8e:	e7f5      	b.n	800db7c <_dtoa_r+0x80c>
 800db90:	f1b9 0f00 	cmp.w	r9, #0
 800db94:	dc36      	bgt.n	800dc04 <_dtoa_r+0x894>
 800db96:	9b06      	ldr	r3, [sp, #24]
 800db98:	2b02      	cmp	r3, #2
 800db9a:	dd33      	ble.n	800dc04 <_dtoa_r+0x894>
 800db9c:	46ca      	mov	sl, r9
 800db9e:	f1ba 0f00 	cmp.w	sl, #0
 800dba2:	d10d      	bne.n	800dbc0 <_dtoa_r+0x850>
 800dba4:	4621      	mov	r1, r4
 800dba6:	4653      	mov	r3, sl
 800dba8:	2205      	movs	r2, #5
 800dbaa:	4630      	mov	r0, r6
 800dbac:	f000 f9fa 	bl	800dfa4 <__multadd>
 800dbb0:	4601      	mov	r1, r0
 800dbb2:	4604      	mov	r4, r0
 800dbb4:	4628      	mov	r0, r5
 800dbb6:	f000 fc0f 	bl	800e3d8 <__mcmp>
 800dbba:	2800      	cmp	r0, #0
 800dbbc:	f73f ade4 	bgt.w	800d788 <_dtoa_r+0x418>
 800dbc0:	9b08      	ldr	r3, [sp, #32]
 800dbc2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800dbc6:	ea6f 0b03 	mvn.w	fp, r3
 800dbca:	f04f 0900 	mov.w	r9, #0
 800dbce:	4621      	mov	r1, r4
 800dbd0:	4630      	mov	r0, r6
 800dbd2:	f000 f9c5 	bl	800df60 <_Bfree>
 800dbd6:	2f00      	cmp	r7, #0
 800dbd8:	f43f aea1 	beq.w	800d91e <_dtoa_r+0x5ae>
 800dbdc:	f1b9 0f00 	cmp.w	r9, #0
 800dbe0:	d005      	beq.n	800dbee <_dtoa_r+0x87e>
 800dbe2:	45b9      	cmp	r9, r7
 800dbe4:	d003      	beq.n	800dbee <_dtoa_r+0x87e>
 800dbe6:	4649      	mov	r1, r9
 800dbe8:	4630      	mov	r0, r6
 800dbea:	f000 f9b9 	bl	800df60 <_Bfree>
 800dbee:	4639      	mov	r1, r7
 800dbf0:	4630      	mov	r0, r6
 800dbf2:	f000 f9b5 	bl	800df60 <_Bfree>
 800dbf6:	e692      	b.n	800d91e <_dtoa_r+0x5ae>
 800dbf8:	2400      	movs	r4, #0
 800dbfa:	4627      	mov	r7, r4
 800dbfc:	e7e0      	b.n	800dbc0 <_dtoa_r+0x850>
 800dbfe:	4693      	mov	fp, r2
 800dc00:	4627      	mov	r7, r4
 800dc02:	e5c1      	b.n	800d788 <_dtoa_r+0x418>
 800dc04:	9b07      	ldr	r3, [sp, #28]
 800dc06:	46ca      	mov	sl, r9
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	f000 8100 	beq.w	800de0e <_dtoa_r+0xa9e>
 800dc0e:	f1b8 0f00 	cmp.w	r8, #0
 800dc12:	dd05      	ble.n	800dc20 <_dtoa_r+0x8b0>
 800dc14:	4639      	mov	r1, r7
 800dc16:	4642      	mov	r2, r8
 800dc18:	4630      	mov	r0, r6
 800dc1a:	f000 fb71 	bl	800e300 <__lshift>
 800dc1e:	4607      	mov	r7, r0
 800dc20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d05d      	beq.n	800dce2 <_dtoa_r+0x972>
 800dc26:	6879      	ldr	r1, [r7, #4]
 800dc28:	4630      	mov	r0, r6
 800dc2a:	f000 f959 	bl	800dee0 <_Balloc>
 800dc2e:	4680      	mov	r8, r0
 800dc30:	b928      	cbnz	r0, 800dc3e <_dtoa_r+0x8ce>
 800dc32:	4b82      	ldr	r3, [pc, #520]	; (800de3c <_dtoa_r+0xacc>)
 800dc34:	4602      	mov	r2, r0
 800dc36:	f240 21ef 	movw	r1, #751	; 0x2ef
 800dc3a:	f7ff bbb1 	b.w	800d3a0 <_dtoa_r+0x30>
 800dc3e:	693a      	ldr	r2, [r7, #16]
 800dc40:	3202      	adds	r2, #2
 800dc42:	0092      	lsls	r2, r2, #2
 800dc44:	f107 010c 	add.w	r1, r7, #12
 800dc48:	300c      	adds	r0, #12
 800dc4a:	f000 fee5 	bl	800ea18 <memcpy>
 800dc4e:	2201      	movs	r2, #1
 800dc50:	4641      	mov	r1, r8
 800dc52:	4630      	mov	r0, r6
 800dc54:	f000 fb54 	bl	800e300 <__lshift>
 800dc58:	9b01      	ldr	r3, [sp, #4]
 800dc5a:	3301      	adds	r3, #1
 800dc5c:	9304      	str	r3, [sp, #16]
 800dc5e:	9b01      	ldr	r3, [sp, #4]
 800dc60:	4453      	add	r3, sl
 800dc62:	9308      	str	r3, [sp, #32]
 800dc64:	9b02      	ldr	r3, [sp, #8]
 800dc66:	f003 0301 	and.w	r3, r3, #1
 800dc6a:	46b9      	mov	r9, r7
 800dc6c:	9307      	str	r3, [sp, #28]
 800dc6e:	4607      	mov	r7, r0
 800dc70:	9b04      	ldr	r3, [sp, #16]
 800dc72:	4621      	mov	r1, r4
 800dc74:	3b01      	subs	r3, #1
 800dc76:	4628      	mov	r0, r5
 800dc78:	9302      	str	r3, [sp, #8]
 800dc7a:	f7ff faf0 	bl	800d25e <quorem>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	3330      	adds	r3, #48	; 0x30
 800dc82:	9005      	str	r0, [sp, #20]
 800dc84:	4649      	mov	r1, r9
 800dc86:	4628      	mov	r0, r5
 800dc88:	9309      	str	r3, [sp, #36]	; 0x24
 800dc8a:	f000 fba5 	bl	800e3d8 <__mcmp>
 800dc8e:	463a      	mov	r2, r7
 800dc90:	4682      	mov	sl, r0
 800dc92:	4621      	mov	r1, r4
 800dc94:	4630      	mov	r0, r6
 800dc96:	f000 fbbb 	bl	800e410 <__mdiff>
 800dc9a:	68c2      	ldr	r2, [r0, #12]
 800dc9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc9e:	4680      	mov	r8, r0
 800dca0:	bb0a      	cbnz	r2, 800dce6 <_dtoa_r+0x976>
 800dca2:	4601      	mov	r1, r0
 800dca4:	4628      	mov	r0, r5
 800dca6:	f000 fb97 	bl	800e3d8 <__mcmp>
 800dcaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcac:	4602      	mov	r2, r0
 800dcae:	4641      	mov	r1, r8
 800dcb0:	4630      	mov	r0, r6
 800dcb2:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800dcb6:	f000 f953 	bl	800df60 <_Bfree>
 800dcba:	9b06      	ldr	r3, [sp, #24]
 800dcbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dcbe:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800dcc2:	ea43 0102 	orr.w	r1, r3, r2
 800dcc6:	9b07      	ldr	r3, [sp, #28]
 800dcc8:	4319      	orrs	r1, r3
 800dcca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dccc:	d10d      	bne.n	800dcea <_dtoa_r+0x97a>
 800dcce:	2b39      	cmp	r3, #57	; 0x39
 800dcd0:	d029      	beq.n	800dd26 <_dtoa_r+0x9b6>
 800dcd2:	f1ba 0f00 	cmp.w	sl, #0
 800dcd6:	dd01      	ble.n	800dcdc <_dtoa_r+0x96c>
 800dcd8:	9b05      	ldr	r3, [sp, #20]
 800dcda:	3331      	adds	r3, #49	; 0x31
 800dcdc:	9a02      	ldr	r2, [sp, #8]
 800dcde:	7013      	strb	r3, [r2, #0]
 800dce0:	e775      	b.n	800dbce <_dtoa_r+0x85e>
 800dce2:	4638      	mov	r0, r7
 800dce4:	e7b8      	b.n	800dc58 <_dtoa_r+0x8e8>
 800dce6:	2201      	movs	r2, #1
 800dce8:	e7e1      	b.n	800dcae <_dtoa_r+0x93e>
 800dcea:	f1ba 0f00 	cmp.w	sl, #0
 800dcee:	db06      	blt.n	800dcfe <_dtoa_r+0x98e>
 800dcf0:	9906      	ldr	r1, [sp, #24]
 800dcf2:	ea41 0a0a 	orr.w	sl, r1, sl
 800dcf6:	9907      	ldr	r1, [sp, #28]
 800dcf8:	ea5a 0a01 	orrs.w	sl, sl, r1
 800dcfc:	d120      	bne.n	800dd40 <_dtoa_r+0x9d0>
 800dcfe:	2a00      	cmp	r2, #0
 800dd00:	ddec      	ble.n	800dcdc <_dtoa_r+0x96c>
 800dd02:	4629      	mov	r1, r5
 800dd04:	2201      	movs	r2, #1
 800dd06:	4630      	mov	r0, r6
 800dd08:	9304      	str	r3, [sp, #16]
 800dd0a:	f000 faf9 	bl	800e300 <__lshift>
 800dd0e:	4621      	mov	r1, r4
 800dd10:	4605      	mov	r5, r0
 800dd12:	f000 fb61 	bl	800e3d8 <__mcmp>
 800dd16:	2800      	cmp	r0, #0
 800dd18:	9b04      	ldr	r3, [sp, #16]
 800dd1a:	dc02      	bgt.n	800dd22 <_dtoa_r+0x9b2>
 800dd1c:	d1de      	bne.n	800dcdc <_dtoa_r+0x96c>
 800dd1e:	07da      	lsls	r2, r3, #31
 800dd20:	d5dc      	bpl.n	800dcdc <_dtoa_r+0x96c>
 800dd22:	2b39      	cmp	r3, #57	; 0x39
 800dd24:	d1d8      	bne.n	800dcd8 <_dtoa_r+0x968>
 800dd26:	9a02      	ldr	r2, [sp, #8]
 800dd28:	2339      	movs	r3, #57	; 0x39
 800dd2a:	7013      	strb	r3, [r2, #0]
 800dd2c:	4643      	mov	r3, r8
 800dd2e:	4698      	mov	r8, r3
 800dd30:	3b01      	subs	r3, #1
 800dd32:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800dd36:	2a39      	cmp	r2, #57	; 0x39
 800dd38:	d051      	beq.n	800ddde <_dtoa_r+0xa6e>
 800dd3a:	3201      	adds	r2, #1
 800dd3c:	701a      	strb	r2, [r3, #0]
 800dd3e:	e746      	b.n	800dbce <_dtoa_r+0x85e>
 800dd40:	2a00      	cmp	r2, #0
 800dd42:	dd03      	ble.n	800dd4c <_dtoa_r+0x9dc>
 800dd44:	2b39      	cmp	r3, #57	; 0x39
 800dd46:	d0ee      	beq.n	800dd26 <_dtoa_r+0x9b6>
 800dd48:	3301      	adds	r3, #1
 800dd4a:	e7c7      	b.n	800dcdc <_dtoa_r+0x96c>
 800dd4c:	9a04      	ldr	r2, [sp, #16]
 800dd4e:	9908      	ldr	r1, [sp, #32]
 800dd50:	f802 3c01 	strb.w	r3, [r2, #-1]
 800dd54:	428a      	cmp	r2, r1
 800dd56:	d02b      	beq.n	800ddb0 <_dtoa_r+0xa40>
 800dd58:	4629      	mov	r1, r5
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	220a      	movs	r2, #10
 800dd5e:	4630      	mov	r0, r6
 800dd60:	f000 f920 	bl	800dfa4 <__multadd>
 800dd64:	45b9      	cmp	r9, r7
 800dd66:	4605      	mov	r5, r0
 800dd68:	f04f 0300 	mov.w	r3, #0
 800dd6c:	f04f 020a 	mov.w	r2, #10
 800dd70:	4649      	mov	r1, r9
 800dd72:	4630      	mov	r0, r6
 800dd74:	d107      	bne.n	800dd86 <_dtoa_r+0xa16>
 800dd76:	f000 f915 	bl	800dfa4 <__multadd>
 800dd7a:	4681      	mov	r9, r0
 800dd7c:	4607      	mov	r7, r0
 800dd7e:	9b04      	ldr	r3, [sp, #16]
 800dd80:	3301      	adds	r3, #1
 800dd82:	9304      	str	r3, [sp, #16]
 800dd84:	e774      	b.n	800dc70 <_dtoa_r+0x900>
 800dd86:	f000 f90d 	bl	800dfa4 <__multadd>
 800dd8a:	4639      	mov	r1, r7
 800dd8c:	4681      	mov	r9, r0
 800dd8e:	2300      	movs	r3, #0
 800dd90:	220a      	movs	r2, #10
 800dd92:	4630      	mov	r0, r6
 800dd94:	f000 f906 	bl	800dfa4 <__multadd>
 800dd98:	4607      	mov	r7, r0
 800dd9a:	e7f0      	b.n	800dd7e <_dtoa_r+0xa0e>
 800dd9c:	f1ba 0f00 	cmp.w	sl, #0
 800dda0:	9a01      	ldr	r2, [sp, #4]
 800dda2:	bfcc      	ite	gt
 800dda4:	46d0      	movgt	r8, sl
 800dda6:	f04f 0801 	movle.w	r8, #1
 800ddaa:	4490      	add	r8, r2
 800ddac:	f04f 0900 	mov.w	r9, #0
 800ddb0:	4629      	mov	r1, r5
 800ddb2:	2201      	movs	r2, #1
 800ddb4:	4630      	mov	r0, r6
 800ddb6:	9302      	str	r3, [sp, #8]
 800ddb8:	f000 faa2 	bl	800e300 <__lshift>
 800ddbc:	4621      	mov	r1, r4
 800ddbe:	4605      	mov	r5, r0
 800ddc0:	f000 fb0a 	bl	800e3d8 <__mcmp>
 800ddc4:	2800      	cmp	r0, #0
 800ddc6:	dcb1      	bgt.n	800dd2c <_dtoa_r+0x9bc>
 800ddc8:	d102      	bne.n	800ddd0 <_dtoa_r+0xa60>
 800ddca:	9b02      	ldr	r3, [sp, #8]
 800ddcc:	07db      	lsls	r3, r3, #31
 800ddce:	d4ad      	bmi.n	800dd2c <_dtoa_r+0x9bc>
 800ddd0:	4643      	mov	r3, r8
 800ddd2:	4698      	mov	r8, r3
 800ddd4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ddd8:	2a30      	cmp	r2, #48	; 0x30
 800ddda:	d0fa      	beq.n	800ddd2 <_dtoa_r+0xa62>
 800dddc:	e6f7      	b.n	800dbce <_dtoa_r+0x85e>
 800ddde:	9a01      	ldr	r2, [sp, #4]
 800dde0:	429a      	cmp	r2, r3
 800dde2:	d1a4      	bne.n	800dd2e <_dtoa_r+0x9be>
 800dde4:	f10b 0b01 	add.w	fp, fp, #1
 800dde8:	2331      	movs	r3, #49	; 0x31
 800ddea:	e778      	b.n	800dcde <_dtoa_r+0x96e>
 800ddec:	4b14      	ldr	r3, [pc, #80]	; (800de40 <_dtoa_r+0xad0>)
 800ddee:	f7ff bb2a 	b.w	800d446 <_dtoa_r+0xd6>
 800ddf2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	f47f ab05 	bne.w	800d404 <_dtoa_r+0x94>
 800ddfa:	4b12      	ldr	r3, [pc, #72]	; (800de44 <_dtoa_r+0xad4>)
 800ddfc:	f7ff bb23 	b.w	800d446 <_dtoa_r+0xd6>
 800de00:	f1ba 0f00 	cmp.w	sl, #0
 800de04:	dc03      	bgt.n	800de0e <_dtoa_r+0xa9e>
 800de06:	9b06      	ldr	r3, [sp, #24]
 800de08:	2b02      	cmp	r3, #2
 800de0a:	f73f aec8 	bgt.w	800db9e <_dtoa_r+0x82e>
 800de0e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800de12:	4621      	mov	r1, r4
 800de14:	4628      	mov	r0, r5
 800de16:	f7ff fa22 	bl	800d25e <quorem>
 800de1a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800de1e:	f808 3b01 	strb.w	r3, [r8], #1
 800de22:	9a01      	ldr	r2, [sp, #4]
 800de24:	eba8 0202 	sub.w	r2, r8, r2
 800de28:	4592      	cmp	sl, r2
 800de2a:	ddb7      	ble.n	800dd9c <_dtoa_r+0xa2c>
 800de2c:	4629      	mov	r1, r5
 800de2e:	2300      	movs	r3, #0
 800de30:	220a      	movs	r2, #10
 800de32:	4630      	mov	r0, r6
 800de34:	f000 f8b6 	bl	800dfa4 <__multadd>
 800de38:	4605      	mov	r5, r0
 800de3a:	e7ea      	b.n	800de12 <_dtoa_r+0xaa2>
 800de3c:	0800f238 	.word	0x0800f238
 800de40:	0800f198 	.word	0x0800f198
 800de44:	0800f1bc 	.word	0x0800f1bc

0800de48 <_free_r>:
 800de48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800de4a:	2900      	cmp	r1, #0
 800de4c:	d044      	beq.n	800ded8 <_free_r+0x90>
 800de4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de52:	9001      	str	r0, [sp, #4]
 800de54:	2b00      	cmp	r3, #0
 800de56:	f1a1 0404 	sub.w	r4, r1, #4
 800de5a:	bfb8      	it	lt
 800de5c:	18e4      	addlt	r4, r4, r3
 800de5e:	f7fe fbfb 	bl	800c658 <__malloc_lock>
 800de62:	4a1e      	ldr	r2, [pc, #120]	; (800dedc <_free_r+0x94>)
 800de64:	9801      	ldr	r0, [sp, #4]
 800de66:	6813      	ldr	r3, [r2, #0]
 800de68:	b933      	cbnz	r3, 800de78 <_free_r+0x30>
 800de6a:	6063      	str	r3, [r4, #4]
 800de6c:	6014      	str	r4, [r2, #0]
 800de6e:	b003      	add	sp, #12
 800de70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800de74:	f7fe bbf6 	b.w	800c664 <__malloc_unlock>
 800de78:	42a3      	cmp	r3, r4
 800de7a:	d908      	bls.n	800de8e <_free_r+0x46>
 800de7c:	6825      	ldr	r5, [r4, #0]
 800de7e:	1961      	adds	r1, r4, r5
 800de80:	428b      	cmp	r3, r1
 800de82:	bf01      	itttt	eq
 800de84:	6819      	ldreq	r1, [r3, #0]
 800de86:	685b      	ldreq	r3, [r3, #4]
 800de88:	1949      	addeq	r1, r1, r5
 800de8a:	6021      	streq	r1, [r4, #0]
 800de8c:	e7ed      	b.n	800de6a <_free_r+0x22>
 800de8e:	461a      	mov	r2, r3
 800de90:	685b      	ldr	r3, [r3, #4]
 800de92:	b10b      	cbz	r3, 800de98 <_free_r+0x50>
 800de94:	42a3      	cmp	r3, r4
 800de96:	d9fa      	bls.n	800de8e <_free_r+0x46>
 800de98:	6811      	ldr	r1, [r2, #0]
 800de9a:	1855      	adds	r5, r2, r1
 800de9c:	42a5      	cmp	r5, r4
 800de9e:	d10b      	bne.n	800deb8 <_free_r+0x70>
 800dea0:	6824      	ldr	r4, [r4, #0]
 800dea2:	4421      	add	r1, r4
 800dea4:	1854      	adds	r4, r2, r1
 800dea6:	42a3      	cmp	r3, r4
 800dea8:	6011      	str	r1, [r2, #0]
 800deaa:	d1e0      	bne.n	800de6e <_free_r+0x26>
 800deac:	681c      	ldr	r4, [r3, #0]
 800deae:	685b      	ldr	r3, [r3, #4]
 800deb0:	6053      	str	r3, [r2, #4]
 800deb2:	440c      	add	r4, r1
 800deb4:	6014      	str	r4, [r2, #0]
 800deb6:	e7da      	b.n	800de6e <_free_r+0x26>
 800deb8:	d902      	bls.n	800dec0 <_free_r+0x78>
 800deba:	230c      	movs	r3, #12
 800debc:	6003      	str	r3, [r0, #0]
 800debe:	e7d6      	b.n	800de6e <_free_r+0x26>
 800dec0:	6825      	ldr	r5, [r4, #0]
 800dec2:	1961      	adds	r1, r4, r5
 800dec4:	428b      	cmp	r3, r1
 800dec6:	bf04      	itt	eq
 800dec8:	6819      	ldreq	r1, [r3, #0]
 800deca:	685b      	ldreq	r3, [r3, #4]
 800decc:	6063      	str	r3, [r4, #4]
 800dece:	bf04      	itt	eq
 800ded0:	1949      	addeq	r1, r1, r5
 800ded2:	6021      	streq	r1, [r4, #0]
 800ded4:	6054      	str	r4, [r2, #4]
 800ded6:	e7ca      	b.n	800de6e <_free_r+0x26>
 800ded8:	b003      	add	sp, #12
 800deda:	bd30      	pop	{r4, r5, pc}
 800dedc:	240021c4 	.word	0x240021c4

0800dee0 <_Balloc>:
 800dee0:	b570      	push	{r4, r5, r6, lr}
 800dee2:	69c6      	ldr	r6, [r0, #28]
 800dee4:	4604      	mov	r4, r0
 800dee6:	460d      	mov	r5, r1
 800dee8:	b976      	cbnz	r6, 800df08 <_Balloc+0x28>
 800deea:	2010      	movs	r0, #16
 800deec:	f7fe fb04 	bl	800c4f8 <malloc>
 800def0:	4602      	mov	r2, r0
 800def2:	61e0      	str	r0, [r4, #28]
 800def4:	b920      	cbnz	r0, 800df00 <_Balloc+0x20>
 800def6:	4b18      	ldr	r3, [pc, #96]	; (800df58 <_Balloc+0x78>)
 800def8:	4818      	ldr	r0, [pc, #96]	; (800df5c <_Balloc+0x7c>)
 800defa:	216b      	movs	r1, #107	; 0x6b
 800defc:	f000 fd9a 	bl	800ea34 <__assert_func>
 800df00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800df04:	6006      	str	r6, [r0, #0]
 800df06:	60c6      	str	r6, [r0, #12]
 800df08:	69e6      	ldr	r6, [r4, #28]
 800df0a:	68f3      	ldr	r3, [r6, #12]
 800df0c:	b183      	cbz	r3, 800df30 <_Balloc+0x50>
 800df0e:	69e3      	ldr	r3, [r4, #28]
 800df10:	68db      	ldr	r3, [r3, #12]
 800df12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800df16:	b9b8      	cbnz	r0, 800df48 <_Balloc+0x68>
 800df18:	2101      	movs	r1, #1
 800df1a:	fa01 f605 	lsl.w	r6, r1, r5
 800df1e:	1d72      	adds	r2, r6, #5
 800df20:	0092      	lsls	r2, r2, #2
 800df22:	4620      	mov	r0, r4
 800df24:	f000 fda4 	bl	800ea70 <_calloc_r>
 800df28:	b160      	cbz	r0, 800df44 <_Balloc+0x64>
 800df2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800df2e:	e00e      	b.n	800df4e <_Balloc+0x6e>
 800df30:	2221      	movs	r2, #33	; 0x21
 800df32:	2104      	movs	r1, #4
 800df34:	4620      	mov	r0, r4
 800df36:	f000 fd9b 	bl	800ea70 <_calloc_r>
 800df3a:	69e3      	ldr	r3, [r4, #28]
 800df3c:	60f0      	str	r0, [r6, #12]
 800df3e:	68db      	ldr	r3, [r3, #12]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d1e4      	bne.n	800df0e <_Balloc+0x2e>
 800df44:	2000      	movs	r0, #0
 800df46:	bd70      	pop	{r4, r5, r6, pc}
 800df48:	6802      	ldr	r2, [r0, #0]
 800df4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800df4e:	2300      	movs	r3, #0
 800df50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800df54:	e7f7      	b.n	800df46 <_Balloc+0x66>
 800df56:	bf00      	nop
 800df58:	0800f1c9 	.word	0x0800f1c9
 800df5c:	0800f249 	.word	0x0800f249

0800df60 <_Bfree>:
 800df60:	b570      	push	{r4, r5, r6, lr}
 800df62:	69c6      	ldr	r6, [r0, #28]
 800df64:	4605      	mov	r5, r0
 800df66:	460c      	mov	r4, r1
 800df68:	b976      	cbnz	r6, 800df88 <_Bfree+0x28>
 800df6a:	2010      	movs	r0, #16
 800df6c:	f7fe fac4 	bl	800c4f8 <malloc>
 800df70:	4602      	mov	r2, r0
 800df72:	61e8      	str	r0, [r5, #28]
 800df74:	b920      	cbnz	r0, 800df80 <_Bfree+0x20>
 800df76:	4b09      	ldr	r3, [pc, #36]	; (800df9c <_Bfree+0x3c>)
 800df78:	4809      	ldr	r0, [pc, #36]	; (800dfa0 <_Bfree+0x40>)
 800df7a:	218f      	movs	r1, #143	; 0x8f
 800df7c:	f000 fd5a 	bl	800ea34 <__assert_func>
 800df80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800df84:	6006      	str	r6, [r0, #0]
 800df86:	60c6      	str	r6, [r0, #12]
 800df88:	b13c      	cbz	r4, 800df9a <_Bfree+0x3a>
 800df8a:	69eb      	ldr	r3, [r5, #28]
 800df8c:	6862      	ldr	r2, [r4, #4]
 800df8e:	68db      	ldr	r3, [r3, #12]
 800df90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800df94:	6021      	str	r1, [r4, #0]
 800df96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800df9a:	bd70      	pop	{r4, r5, r6, pc}
 800df9c:	0800f1c9 	.word	0x0800f1c9
 800dfa0:	0800f249 	.word	0x0800f249

0800dfa4 <__multadd>:
 800dfa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfa8:	690d      	ldr	r5, [r1, #16]
 800dfaa:	4607      	mov	r7, r0
 800dfac:	460c      	mov	r4, r1
 800dfae:	461e      	mov	r6, r3
 800dfb0:	f101 0c14 	add.w	ip, r1, #20
 800dfb4:	2000      	movs	r0, #0
 800dfb6:	f8dc 3000 	ldr.w	r3, [ip]
 800dfba:	b299      	uxth	r1, r3
 800dfbc:	fb02 6101 	mla	r1, r2, r1, r6
 800dfc0:	0c1e      	lsrs	r6, r3, #16
 800dfc2:	0c0b      	lsrs	r3, r1, #16
 800dfc4:	fb02 3306 	mla	r3, r2, r6, r3
 800dfc8:	b289      	uxth	r1, r1
 800dfca:	3001      	adds	r0, #1
 800dfcc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dfd0:	4285      	cmp	r5, r0
 800dfd2:	f84c 1b04 	str.w	r1, [ip], #4
 800dfd6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dfda:	dcec      	bgt.n	800dfb6 <__multadd+0x12>
 800dfdc:	b30e      	cbz	r6, 800e022 <__multadd+0x7e>
 800dfde:	68a3      	ldr	r3, [r4, #8]
 800dfe0:	42ab      	cmp	r3, r5
 800dfe2:	dc19      	bgt.n	800e018 <__multadd+0x74>
 800dfe4:	6861      	ldr	r1, [r4, #4]
 800dfe6:	4638      	mov	r0, r7
 800dfe8:	3101      	adds	r1, #1
 800dfea:	f7ff ff79 	bl	800dee0 <_Balloc>
 800dfee:	4680      	mov	r8, r0
 800dff0:	b928      	cbnz	r0, 800dffe <__multadd+0x5a>
 800dff2:	4602      	mov	r2, r0
 800dff4:	4b0c      	ldr	r3, [pc, #48]	; (800e028 <__multadd+0x84>)
 800dff6:	480d      	ldr	r0, [pc, #52]	; (800e02c <__multadd+0x88>)
 800dff8:	21ba      	movs	r1, #186	; 0xba
 800dffa:	f000 fd1b 	bl	800ea34 <__assert_func>
 800dffe:	6922      	ldr	r2, [r4, #16]
 800e000:	3202      	adds	r2, #2
 800e002:	f104 010c 	add.w	r1, r4, #12
 800e006:	0092      	lsls	r2, r2, #2
 800e008:	300c      	adds	r0, #12
 800e00a:	f000 fd05 	bl	800ea18 <memcpy>
 800e00e:	4621      	mov	r1, r4
 800e010:	4638      	mov	r0, r7
 800e012:	f7ff ffa5 	bl	800df60 <_Bfree>
 800e016:	4644      	mov	r4, r8
 800e018:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e01c:	3501      	adds	r5, #1
 800e01e:	615e      	str	r6, [r3, #20]
 800e020:	6125      	str	r5, [r4, #16]
 800e022:	4620      	mov	r0, r4
 800e024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e028:	0800f238 	.word	0x0800f238
 800e02c:	0800f249 	.word	0x0800f249

0800e030 <__hi0bits>:
 800e030:	0c03      	lsrs	r3, r0, #16
 800e032:	041b      	lsls	r3, r3, #16
 800e034:	b9d3      	cbnz	r3, 800e06c <__hi0bits+0x3c>
 800e036:	0400      	lsls	r0, r0, #16
 800e038:	2310      	movs	r3, #16
 800e03a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e03e:	bf04      	itt	eq
 800e040:	0200      	lsleq	r0, r0, #8
 800e042:	3308      	addeq	r3, #8
 800e044:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e048:	bf04      	itt	eq
 800e04a:	0100      	lsleq	r0, r0, #4
 800e04c:	3304      	addeq	r3, #4
 800e04e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e052:	bf04      	itt	eq
 800e054:	0080      	lsleq	r0, r0, #2
 800e056:	3302      	addeq	r3, #2
 800e058:	2800      	cmp	r0, #0
 800e05a:	db05      	blt.n	800e068 <__hi0bits+0x38>
 800e05c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e060:	f103 0301 	add.w	r3, r3, #1
 800e064:	bf08      	it	eq
 800e066:	2320      	moveq	r3, #32
 800e068:	4618      	mov	r0, r3
 800e06a:	4770      	bx	lr
 800e06c:	2300      	movs	r3, #0
 800e06e:	e7e4      	b.n	800e03a <__hi0bits+0xa>

0800e070 <__lo0bits>:
 800e070:	6803      	ldr	r3, [r0, #0]
 800e072:	f013 0207 	ands.w	r2, r3, #7
 800e076:	d00c      	beq.n	800e092 <__lo0bits+0x22>
 800e078:	07d9      	lsls	r1, r3, #31
 800e07a:	d422      	bmi.n	800e0c2 <__lo0bits+0x52>
 800e07c:	079a      	lsls	r2, r3, #30
 800e07e:	bf49      	itett	mi
 800e080:	085b      	lsrmi	r3, r3, #1
 800e082:	089b      	lsrpl	r3, r3, #2
 800e084:	6003      	strmi	r3, [r0, #0]
 800e086:	2201      	movmi	r2, #1
 800e088:	bf5c      	itt	pl
 800e08a:	6003      	strpl	r3, [r0, #0]
 800e08c:	2202      	movpl	r2, #2
 800e08e:	4610      	mov	r0, r2
 800e090:	4770      	bx	lr
 800e092:	b299      	uxth	r1, r3
 800e094:	b909      	cbnz	r1, 800e09a <__lo0bits+0x2a>
 800e096:	0c1b      	lsrs	r3, r3, #16
 800e098:	2210      	movs	r2, #16
 800e09a:	b2d9      	uxtb	r1, r3
 800e09c:	b909      	cbnz	r1, 800e0a2 <__lo0bits+0x32>
 800e09e:	3208      	adds	r2, #8
 800e0a0:	0a1b      	lsrs	r3, r3, #8
 800e0a2:	0719      	lsls	r1, r3, #28
 800e0a4:	bf04      	itt	eq
 800e0a6:	091b      	lsreq	r3, r3, #4
 800e0a8:	3204      	addeq	r2, #4
 800e0aa:	0799      	lsls	r1, r3, #30
 800e0ac:	bf04      	itt	eq
 800e0ae:	089b      	lsreq	r3, r3, #2
 800e0b0:	3202      	addeq	r2, #2
 800e0b2:	07d9      	lsls	r1, r3, #31
 800e0b4:	d403      	bmi.n	800e0be <__lo0bits+0x4e>
 800e0b6:	085b      	lsrs	r3, r3, #1
 800e0b8:	f102 0201 	add.w	r2, r2, #1
 800e0bc:	d003      	beq.n	800e0c6 <__lo0bits+0x56>
 800e0be:	6003      	str	r3, [r0, #0]
 800e0c0:	e7e5      	b.n	800e08e <__lo0bits+0x1e>
 800e0c2:	2200      	movs	r2, #0
 800e0c4:	e7e3      	b.n	800e08e <__lo0bits+0x1e>
 800e0c6:	2220      	movs	r2, #32
 800e0c8:	e7e1      	b.n	800e08e <__lo0bits+0x1e>
	...

0800e0cc <__i2b>:
 800e0cc:	b510      	push	{r4, lr}
 800e0ce:	460c      	mov	r4, r1
 800e0d0:	2101      	movs	r1, #1
 800e0d2:	f7ff ff05 	bl	800dee0 <_Balloc>
 800e0d6:	4602      	mov	r2, r0
 800e0d8:	b928      	cbnz	r0, 800e0e6 <__i2b+0x1a>
 800e0da:	4b05      	ldr	r3, [pc, #20]	; (800e0f0 <__i2b+0x24>)
 800e0dc:	4805      	ldr	r0, [pc, #20]	; (800e0f4 <__i2b+0x28>)
 800e0de:	f240 1145 	movw	r1, #325	; 0x145
 800e0e2:	f000 fca7 	bl	800ea34 <__assert_func>
 800e0e6:	2301      	movs	r3, #1
 800e0e8:	6144      	str	r4, [r0, #20]
 800e0ea:	6103      	str	r3, [r0, #16]
 800e0ec:	bd10      	pop	{r4, pc}
 800e0ee:	bf00      	nop
 800e0f0:	0800f238 	.word	0x0800f238
 800e0f4:	0800f249 	.word	0x0800f249

0800e0f8 <__multiply>:
 800e0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0fc:	4691      	mov	r9, r2
 800e0fe:	690a      	ldr	r2, [r1, #16]
 800e100:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e104:	429a      	cmp	r2, r3
 800e106:	bfb8      	it	lt
 800e108:	460b      	movlt	r3, r1
 800e10a:	460c      	mov	r4, r1
 800e10c:	bfbc      	itt	lt
 800e10e:	464c      	movlt	r4, r9
 800e110:	4699      	movlt	r9, r3
 800e112:	6927      	ldr	r7, [r4, #16]
 800e114:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e118:	68a3      	ldr	r3, [r4, #8]
 800e11a:	6861      	ldr	r1, [r4, #4]
 800e11c:	eb07 060a 	add.w	r6, r7, sl
 800e120:	42b3      	cmp	r3, r6
 800e122:	b085      	sub	sp, #20
 800e124:	bfb8      	it	lt
 800e126:	3101      	addlt	r1, #1
 800e128:	f7ff feda 	bl	800dee0 <_Balloc>
 800e12c:	b930      	cbnz	r0, 800e13c <__multiply+0x44>
 800e12e:	4602      	mov	r2, r0
 800e130:	4b44      	ldr	r3, [pc, #272]	; (800e244 <__multiply+0x14c>)
 800e132:	4845      	ldr	r0, [pc, #276]	; (800e248 <__multiply+0x150>)
 800e134:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800e138:	f000 fc7c 	bl	800ea34 <__assert_func>
 800e13c:	f100 0514 	add.w	r5, r0, #20
 800e140:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e144:	462b      	mov	r3, r5
 800e146:	2200      	movs	r2, #0
 800e148:	4543      	cmp	r3, r8
 800e14a:	d321      	bcc.n	800e190 <__multiply+0x98>
 800e14c:	f104 0314 	add.w	r3, r4, #20
 800e150:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e154:	f109 0314 	add.w	r3, r9, #20
 800e158:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e15c:	9202      	str	r2, [sp, #8]
 800e15e:	1b3a      	subs	r2, r7, r4
 800e160:	3a15      	subs	r2, #21
 800e162:	f022 0203 	bic.w	r2, r2, #3
 800e166:	3204      	adds	r2, #4
 800e168:	f104 0115 	add.w	r1, r4, #21
 800e16c:	428f      	cmp	r7, r1
 800e16e:	bf38      	it	cc
 800e170:	2204      	movcc	r2, #4
 800e172:	9201      	str	r2, [sp, #4]
 800e174:	9a02      	ldr	r2, [sp, #8]
 800e176:	9303      	str	r3, [sp, #12]
 800e178:	429a      	cmp	r2, r3
 800e17a:	d80c      	bhi.n	800e196 <__multiply+0x9e>
 800e17c:	2e00      	cmp	r6, #0
 800e17e:	dd03      	ble.n	800e188 <__multiply+0x90>
 800e180:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e184:	2b00      	cmp	r3, #0
 800e186:	d05b      	beq.n	800e240 <__multiply+0x148>
 800e188:	6106      	str	r6, [r0, #16]
 800e18a:	b005      	add	sp, #20
 800e18c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e190:	f843 2b04 	str.w	r2, [r3], #4
 800e194:	e7d8      	b.n	800e148 <__multiply+0x50>
 800e196:	f8b3 a000 	ldrh.w	sl, [r3]
 800e19a:	f1ba 0f00 	cmp.w	sl, #0
 800e19e:	d024      	beq.n	800e1ea <__multiply+0xf2>
 800e1a0:	f104 0e14 	add.w	lr, r4, #20
 800e1a4:	46a9      	mov	r9, r5
 800e1a6:	f04f 0c00 	mov.w	ip, #0
 800e1aa:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e1ae:	f8d9 1000 	ldr.w	r1, [r9]
 800e1b2:	fa1f fb82 	uxth.w	fp, r2
 800e1b6:	b289      	uxth	r1, r1
 800e1b8:	fb0a 110b 	mla	r1, sl, fp, r1
 800e1bc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e1c0:	f8d9 2000 	ldr.w	r2, [r9]
 800e1c4:	4461      	add	r1, ip
 800e1c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e1ca:	fb0a c20b 	mla	r2, sl, fp, ip
 800e1ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e1d2:	b289      	uxth	r1, r1
 800e1d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e1d8:	4577      	cmp	r7, lr
 800e1da:	f849 1b04 	str.w	r1, [r9], #4
 800e1de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e1e2:	d8e2      	bhi.n	800e1aa <__multiply+0xb2>
 800e1e4:	9a01      	ldr	r2, [sp, #4]
 800e1e6:	f845 c002 	str.w	ip, [r5, r2]
 800e1ea:	9a03      	ldr	r2, [sp, #12]
 800e1ec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e1f0:	3304      	adds	r3, #4
 800e1f2:	f1b9 0f00 	cmp.w	r9, #0
 800e1f6:	d021      	beq.n	800e23c <__multiply+0x144>
 800e1f8:	6829      	ldr	r1, [r5, #0]
 800e1fa:	f104 0c14 	add.w	ip, r4, #20
 800e1fe:	46ae      	mov	lr, r5
 800e200:	f04f 0a00 	mov.w	sl, #0
 800e204:	f8bc b000 	ldrh.w	fp, [ip]
 800e208:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e20c:	fb09 220b 	mla	r2, r9, fp, r2
 800e210:	4452      	add	r2, sl
 800e212:	b289      	uxth	r1, r1
 800e214:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e218:	f84e 1b04 	str.w	r1, [lr], #4
 800e21c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e220:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e224:	f8be 1000 	ldrh.w	r1, [lr]
 800e228:	fb09 110a 	mla	r1, r9, sl, r1
 800e22c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800e230:	4567      	cmp	r7, ip
 800e232:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e236:	d8e5      	bhi.n	800e204 <__multiply+0x10c>
 800e238:	9a01      	ldr	r2, [sp, #4]
 800e23a:	50a9      	str	r1, [r5, r2]
 800e23c:	3504      	adds	r5, #4
 800e23e:	e799      	b.n	800e174 <__multiply+0x7c>
 800e240:	3e01      	subs	r6, #1
 800e242:	e79b      	b.n	800e17c <__multiply+0x84>
 800e244:	0800f238 	.word	0x0800f238
 800e248:	0800f249 	.word	0x0800f249

0800e24c <__pow5mult>:
 800e24c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e250:	4615      	mov	r5, r2
 800e252:	f012 0203 	ands.w	r2, r2, #3
 800e256:	4606      	mov	r6, r0
 800e258:	460f      	mov	r7, r1
 800e25a:	d007      	beq.n	800e26c <__pow5mult+0x20>
 800e25c:	4c25      	ldr	r4, [pc, #148]	; (800e2f4 <__pow5mult+0xa8>)
 800e25e:	3a01      	subs	r2, #1
 800e260:	2300      	movs	r3, #0
 800e262:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e266:	f7ff fe9d 	bl	800dfa4 <__multadd>
 800e26a:	4607      	mov	r7, r0
 800e26c:	10ad      	asrs	r5, r5, #2
 800e26e:	d03d      	beq.n	800e2ec <__pow5mult+0xa0>
 800e270:	69f4      	ldr	r4, [r6, #28]
 800e272:	b97c      	cbnz	r4, 800e294 <__pow5mult+0x48>
 800e274:	2010      	movs	r0, #16
 800e276:	f7fe f93f 	bl	800c4f8 <malloc>
 800e27a:	4602      	mov	r2, r0
 800e27c:	61f0      	str	r0, [r6, #28]
 800e27e:	b928      	cbnz	r0, 800e28c <__pow5mult+0x40>
 800e280:	4b1d      	ldr	r3, [pc, #116]	; (800e2f8 <__pow5mult+0xac>)
 800e282:	481e      	ldr	r0, [pc, #120]	; (800e2fc <__pow5mult+0xb0>)
 800e284:	f240 11b3 	movw	r1, #435	; 0x1b3
 800e288:	f000 fbd4 	bl	800ea34 <__assert_func>
 800e28c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e290:	6004      	str	r4, [r0, #0]
 800e292:	60c4      	str	r4, [r0, #12]
 800e294:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800e298:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e29c:	b94c      	cbnz	r4, 800e2b2 <__pow5mult+0x66>
 800e29e:	f240 2171 	movw	r1, #625	; 0x271
 800e2a2:	4630      	mov	r0, r6
 800e2a4:	f7ff ff12 	bl	800e0cc <__i2b>
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	f8c8 0008 	str.w	r0, [r8, #8]
 800e2ae:	4604      	mov	r4, r0
 800e2b0:	6003      	str	r3, [r0, #0]
 800e2b2:	f04f 0900 	mov.w	r9, #0
 800e2b6:	07eb      	lsls	r3, r5, #31
 800e2b8:	d50a      	bpl.n	800e2d0 <__pow5mult+0x84>
 800e2ba:	4639      	mov	r1, r7
 800e2bc:	4622      	mov	r2, r4
 800e2be:	4630      	mov	r0, r6
 800e2c0:	f7ff ff1a 	bl	800e0f8 <__multiply>
 800e2c4:	4639      	mov	r1, r7
 800e2c6:	4680      	mov	r8, r0
 800e2c8:	4630      	mov	r0, r6
 800e2ca:	f7ff fe49 	bl	800df60 <_Bfree>
 800e2ce:	4647      	mov	r7, r8
 800e2d0:	106d      	asrs	r5, r5, #1
 800e2d2:	d00b      	beq.n	800e2ec <__pow5mult+0xa0>
 800e2d4:	6820      	ldr	r0, [r4, #0]
 800e2d6:	b938      	cbnz	r0, 800e2e8 <__pow5mult+0x9c>
 800e2d8:	4622      	mov	r2, r4
 800e2da:	4621      	mov	r1, r4
 800e2dc:	4630      	mov	r0, r6
 800e2de:	f7ff ff0b 	bl	800e0f8 <__multiply>
 800e2e2:	6020      	str	r0, [r4, #0]
 800e2e4:	f8c0 9000 	str.w	r9, [r0]
 800e2e8:	4604      	mov	r4, r0
 800e2ea:	e7e4      	b.n	800e2b6 <__pow5mult+0x6a>
 800e2ec:	4638      	mov	r0, r7
 800e2ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2f2:	bf00      	nop
 800e2f4:	0800f398 	.word	0x0800f398
 800e2f8:	0800f1c9 	.word	0x0800f1c9
 800e2fc:	0800f249 	.word	0x0800f249

0800e300 <__lshift>:
 800e300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e304:	460c      	mov	r4, r1
 800e306:	6849      	ldr	r1, [r1, #4]
 800e308:	6923      	ldr	r3, [r4, #16]
 800e30a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e30e:	68a3      	ldr	r3, [r4, #8]
 800e310:	4607      	mov	r7, r0
 800e312:	4691      	mov	r9, r2
 800e314:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e318:	f108 0601 	add.w	r6, r8, #1
 800e31c:	42b3      	cmp	r3, r6
 800e31e:	db0b      	blt.n	800e338 <__lshift+0x38>
 800e320:	4638      	mov	r0, r7
 800e322:	f7ff fddd 	bl	800dee0 <_Balloc>
 800e326:	4605      	mov	r5, r0
 800e328:	b948      	cbnz	r0, 800e33e <__lshift+0x3e>
 800e32a:	4602      	mov	r2, r0
 800e32c:	4b28      	ldr	r3, [pc, #160]	; (800e3d0 <__lshift+0xd0>)
 800e32e:	4829      	ldr	r0, [pc, #164]	; (800e3d4 <__lshift+0xd4>)
 800e330:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800e334:	f000 fb7e 	bl	800ea34 <__assert_func>
 800e338:	3101      	adds	r1, #1
 800e33a:	005b      	lsls	r3, r3, #1
 800e33c:	e7ee      	b.n	800e31c <__lshift+0x1c>
 800e33e:	2300      	movs	r3, #0
 800e340:	f100 0114 	add.w	r1, r0, #20
 800e344:	f100 0210 	add.w	r2, r0, #16
 800e348:	4618      	mov	r0, r3
 800e34a:	4553      	cmp	r3, sl
 800e34c:	db33      	blt.n	800e3b6 <__lshift+0xb6>
 800e34e:	6920      	ldr	r0, [r4, #16]
 800e350:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e354:	f104 0314 	add.w	r3, r4, #20
 800e358:	f019 091f 	ands.w	r9, r9, #31
 800e35c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e360:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e364:	d02b      	beq.n	800e3be <__lshift+0xbe>
 800e366:	f1c9 0e20 	rsb	lr, r9, #32
 800e36a:	468a      	mov	sl, r1
 800e36c:	2200      	movs	r2, #0
 800e36e:	6818      	ldr	r0, [r3, #0]
 800e370:	fa00 f009 	lsl.w	r0, r0, r9
 800e374:	4310      	orrs	r0, r2
 800e376:	f84a 0b04 	str.w	r0, [sl], #4
 800e37a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e37e:	459c      	cmp	ip, r3
 800e380:	fa22 f20e 	lsr.w	r2, r2, lr
 800e384:	d8f3      	bhi.n	800e36e <__lshift+0x6e>
 800e386:	ebac 0304 	sub.w	r3, ip, r4
 800e38a:	3b15      	subs	r3, #21
 800e38c:	f023 0303 	bic.w	r3, r3, #3
 800e390:	3304      	adds	r3, #4
 800e392:	f104 0015 	add.w	r0, r4, #21
 800e396:	4584      	cmp	ip, r0
 800e398:	bf38      	it	cc
 800e39a:	2304      	movcc	r3, #4
 800e39c:	50ca      	str	r2, [r1, r3]
 800e39e:	b10a      	cbz	r2, 800e3a4 <__lshift+0xa4>
 800e3a0:	f108 0602 	add.w	r6, r8, #2
 800e3a4:	3e01      	subs	r6, #1
 800e3a6:	4638      	mov	r0, r7
 800e3a8:	612e      	str	r6, [r5, #16]
 800e3aa:	4621      	mov	r1, r4
 800e3ac:	f7ff fdd8 	bl	800df60 <_Bfree>
 800e3b0:	4628      	mov	r0, r5
 800e3b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3b6:	f842 0f04 	str.w	r0, [r2, #4]!
 800e3ba:	3301      	adds	r3, #1
 800e3bc:	e7c5      	b.n	800e34a <__lshift+0x4a>
 800e3be:	3904      	subs	r1, #4
 800e3c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3c4:	f841 2f04 	str.w	r2, [r1, #4]!
 800e3c8:	459c      	cmp	ip, r3
 800e3ca:	d8f9      	bhi.n	800e3c0 <__lshift+0xc0>
 800e3cc:	e7ea      	b.n	800e3a4 <__lshift+0xa4>
 800e3ce:	bf00      	nop
 800e3d0:	0800f238 	.word	0x0800f238
 800e3d4:	0800f249 	.word	0x0800f249

0800e3d8 <__mcmp>:
 800e3d8:	b530      	push	{r4, r5, lr}
 800e3da:	6902      	ldr	r2, [r0, #16]
 800e3dc:	690c      	ldr	r4, [r1, #16]
 800e3de:	1b12      	subs	r2, r2, r4
 800e3e0:	d10e      	bne.n	800e400 <__mcmp+0x28>
 800e3e2:	f100 0314 	add.w	r3, r0, #20
 800e3e6:	3114      	adds	r1, #20
 800e3e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e3ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e3f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e3f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e3f8:	42a5      	cmp	r5, r4
 800e3fa:	d003      	beq.n	800e404 <__mcmp+0x2c>
 800e3fc:	d305      	bcc.n	800e40a <__mcmp+0x32>
 800e3fe:	2201      	movs	r2, #1
 800e400:	4610      	mov	r0, r2
 800e402:	bd30      	pop	{r4, r5, pc}
 800e404:	4283      	cmp	r3, r0
 800e406:	d3f3      	bcc.n	800e3f0 <__mcmp+0x18>
 800e408:	e7fa      	b.n	800e400 <__mcmp+0x28>
 800e40a:	f04f 32ff 	mov.w	r2, #4294967295
 800e40e:	e7f7      	b.n	800e400 <__mcmp+0x28>

0800e410 <__mdiff>:
 800e410:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e414:	460c      	mov	r4, r1
 800e416:	4606      	mov	r6, r0
 800e418:	4611      	mov	r1, r2
 800e41a:	4620      	mov	r0, r4
 800e41c:	4690      	mov	r8, r2
 800e41e:	f7ff ffdb 	bl	800e3d8 <__mcmp>
 800e422:	1e05      	subs	r5, r0, #0
 800e424:	d110      	bne.n	800e448 <__mdiff+0x38>
 800e426:	4629      	mov	r1, r5
 800e428:	4630      	mov	r0, r6
 800e42a:	f7ff fd59 	bl	800dee0 <_Balloc>
 800e42e:	b930      	cbnz	r0, 800e43e <__mdiff+0x2e>
 800e430:	4b3a      	ldr	r3, [pc, #232]	; (800e51c <__mdiff+0x10c>)
 800e432:	4602      	mov	r2, r0
 800e434:	f240 2137 	movw	r1, #567	; 0x237
 800e438:	4839      	ldr	r0, [pc, #228]	; (800e520 <__mdiff+0x110>)
 800e43a:	f000 fafb 	bl	800ea34 <__assert_func>
 800e43e:	2301      	movs	r3, #1
 800e440:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e444:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e448:	bfa4      	itt	ge
 800e44a:	4643      	movge	r3, r8
 800e44c:	46a0      	movge	r8, r4
 800e44e:	4630      	mov	r0, r6
 800e450:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e454:	bfa6      	itte	ge
 800e456:	461c      	movge	r4, r3
 800e458:	2500      	movge	r5, #0
 800e45a:	2501      	movlt	r5, #1
 800e45c:	f7ff fd40 	bl	800dee0 <_Balloc>
 800e460:	b920      	cbnz	r0, 800e46c <__mdiff+0x5c>
 800e462:	4b2e      	ldr	r3, [pc, #184]	; (800e51c <__mdiff+0x10c>)
 800e464:	4602      	mov	r2, r0
 800e466:	f240 2145 	movw	r1, #581	; 0x245
 800e46a:	e7e5      	b.n	800e438 <__mdiff+0x28>
 800e46c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e470:	6926      	ldr	r6, [r4, #16]
 800e472:	60c5      	str	r5, [r0, #12]
 800e474:	f104 0914 	add.w	r9, r4, #20
 800e478:	f108 0514 	add.w	r5, r8, #20
 800e47c:	f100 0e14 	add.w	lr, r0, #20
 800e480:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e484:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e488:	f108 0210 	add.w	r2, r8, #16
 800e48c:	46f2      	mov	sl, lr
 800e48e:	2100      	movs	r1, #0
 800e490:	f859 3b04 	ldr.w	r3, [r9], #4
 800e494:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e498:	fa11 f88b 	uxtah	r8, r1, fp
 800e49c:	b299      	uxth	r1, r3
 800e49e:	0c1b      	lsrs	r3, r3, #16
 800e4a0:	eba8 0801 	sub.w	r8, r8, r1
 800e4a4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e4a8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e4ac:	fa1f f888 	uxth.w	r8, r8
 800e4b0:	1419      	asrs	r1, r3, #16
 800e4b2:	454e      	cmp	r6, r9
 800e4b4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e4b8:	f84a 3b04 	str.w	r3, [sl], #4
 800e4bc:	d8e8      	bhi.n	800e490 <__mdiff+0x80>
 800e4be:	1b33      	subs	r3, r6, r4
 800e4c0:	3b15      	subs	r3, #21
 800e4c2:	f023 0303 	bic.w	r3, r3, #3
 800e4c6:	3304      	adds	r3, #4
 800e4c8:	3415      	adds	r4, #21
 800e4ca:	42a6      	cmp	r6, r4
 800e4cc:	bf38      	it	cc
 800e4ce:	2304      	movcc	r3, #4
 800e4d0:	441d      	add	r5, r3
 800e4d2:	4473      	add	r3, lr
 800e4d4:	469e      	mov	lr, r3
 800e4d6:	462e      	mov	r6, r5
 800e4d8:	4566      	cmp	r6, ip
 800e4da:	d30e      	bcc.n	800e4fa <__mdiff+0xea>
 800e4dc:	f10c 0203 	add.w	r2, ip, #3
 800e4e0:	1b52      	subs	r2, r2, r5
 800e4e2:	f022 0203 	bic.w	r2, r2, #3
 800e4e6:	3d03      	subs	r5, #3
 800e4e8:	45ac      	cmp	ip, r5
 800e4ea:	bf38      	it	cc
 800e4ec:	2200      	movcc	r2, #0
 800e4ee:	4413      	add	r3, r2
 800e4f0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e4f4:	b17a      	cbz	r2, 800e516 <__mdiff+0x106>
 800e4f6:	6107      	str	r7, [r0, #16]
 800e4f8:	e7a4      	b.n	800e444 <__mdiff+0x34>
 800e4fa:	f856 8b04 	ldr.w	r8, [r6], #4
 800e4fe:	fa11 f288 	uxtah	r2, r1, r8
 800e502:	1414      	asrs	r4, r2, #16
 800e504:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e508:	b292      	uxth	r2, r2
 800e50a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e50e:	f84e 2b04 	str.w	r2, [lr], #4
 800e512:	1421      	asrs	r1, r4, #16
 800e514:	e7e0      	b.n	800e4d8 <__mdiff+0xc8>
 800e516:	3f01      	subs	r7, #1
 800e518:	e7ea      	b.n	800e4f0 <__mdiff+0xe0>
 800e51a:	bf00      	nop
 800e51c:	0800f238 	.word	0x0800f238
 800e520:	0800f249 	.word	0x0800f249

0800e524 <__d2b>:
 800e524:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e528:	460f      	mov	r7, r1
 800e52a:	2101      	movs	r1, #1
 800e52c:	ec59 8b10 	vmov	r8, r9, d0
 800e530:	4616      	mov	r6, r2
 800e532:	f7ff fcd5 	bl	800dee0 <_Balloc>
 800e536:	4604      	mov	r4, r0
 800e538:	b930      	cbnz	r0, 800e548 <__d2b+0x24>
 800e53a:	4602      	mov	r2, r0
 800e53c:	4b24      	ldr	r3, [pc, #144]	; (800e5d0 <__d2b+0xac>)
 800e53e:	4825      	ldr	r0, [pc, #148]	; (800e5d4 <__d2b+0xb0>)
 800e540:	f240 310f 	movw	r1, #783	; 0x30f
 800e544:	f000 fa76 	bl	800ea34 <__assert_func>
 800e548:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e54c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e550:	bb2d      	cbnz	r5, 800e59e <__d2b+0x7a>
 800e552:	9301      	str	r3, [sp, #4]
 800e554:	f1b8 0300 	subs.w	r3, r8, #0
 800e558:	d026      	beq.n	800e5a8 <__d2b+0x84>
 800e55a:	4668      	mov	r0, sp
 800e55c:	9300      	str	r3, [sp, #0]
 800e55e:	f7ff fd87 	bl	800e070 <__lo0bits>
 800e562:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e566:	b1e8      	cbz	r0, 800e5a4 <__d2b+0x80>
 800e568:	f1c0 0320 	rsb	r3, r0, #32
 800e56c:	fa02 f303 	lsl.w	r3, r2, r3
 800e570:	430b      	orrs	r3, r1
 800e572:	40c2      	lsrs	r2, r0
 800e574:	6163      	str	r3, [r4, #20]
 800e576:	9201      	str	r2, [sp, #4]
 800e578:	9b01      	ldr	r3, [sp, #4]
 800e57a:	61a3      	str	r3, [r4, #24]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	bf14      	ite	ne
 800e580:	2202      	movne	r2, #2
 800e582:	2201      	moveq	r2, #1
 800e584:	6122      	str	r2, [r4, #16]
 800e586:	b1bd      	cbz	r5, 800e5b8 <__d2b+0x94>
 800e588:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e58c:	4405      	add	r5, r0
 800e58e:	603d      	str	r5, [r7, #0]
 800e590:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e594:	6030      	str	r0, [r6, #0]
 800e596:	4620      	mov	r0, r4
 800e598:	b003      	add	sp, #12
 800e59a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e59e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e5a2:	e7d6      	b.n	800e552 <__d2b+0x2e>
 800e5a4:	6161      	str	r1, [r4, #20]
 800e5a6:	e7e7      	b.n	800e578 <__d2b+0x54>
 800e5a8:	a801      	add	r0, sp, #4
 800e5aa:	f7ff fd61 	bl	800e070 <__lo0bits>
 800e5ae:	9b01      	ldr	r3, [sp, #4]
 800e5b0:	6163      	str	r3, [r4, #20]
 800e5b2:	3020      	adds	r0, #32
 800e5b4:	2201      	movs	r2, #1
 800e5b6:	e7e5      	b.n	800e584 <__d2b+0x60>
 800e5b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e5bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e5c0:	6038      	str	r0, [r7, #0]
 800e5c2:	6918      	ldr	r0, [r3, #16]
 800e5c4:	f7ff fd34 	bl	800e030 <__hi0bits>
 800e5c8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e5cc:	e7e2      	b.n	800e594 <__d2b+0x70>
 800e5ce:	bf00      	nop
 800e5d0:	0800f238 	.word	0x0800f238
 800e5d4:	0800f249 	.word	0x0800f249

0800e5d8 <__ssputs_r>:
 800e5d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5dc:	688e      	ldr	r6, [r1, #8]
 800e5de:	461f      	mov	r7, r3
 800e5e0:	42be      	cmp	r6, r7
 800e5e2:	680b      	ldr	r3, [r1, #0]
 800e5e4:	4682      	mov	sl, r0
 800e5e6:	460c      	mov	r4, r1
 800e5e8:	4690      	mov	r8, r2
 800e5ea:	d82c      	bhi.n	800e646 <__ssputs_r+0x6e>
 800e5ec:	898a      	ldrh	r2, [r1, #12]
 800e5ee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e5f2:	d026      	beq.n	800e642 <__ssputs_r+0x6a>
 800e5f4:	6965      	ldr	r5, [r4, #20]
 800e5f6:	6909      	ldr	r1, [r1, #16]
 800e5f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e5fc:	eba3 0901 	sub.w	r9, r3, r1
 800e600:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e604:	1c7b      	adds	r3, r7, #1
 800e606:	444b      	add	r3, r9
 800e608:	106d      	asrs	r5, r5, #1
 800e60a:	429d      	cmp	r5, r3
 800e60c:	bf38      	it	cc
 800e60e:	461d      	movcc	r5, r3
 800e610:	0553      	lsls	r3, r2, #21
 800e612:	d527      	bpl.n	800e664 <__ssputs_r+0x8c>
 800e614:	4629      	mov	r1, r5
 800e616:	f7fd ff9f 	bl	800c558 <_malloc_r>
 800e61a:	4606      	mov	r6, r0
 800e61c:	b360      	cbz	r0, 800e678 <__ssputs_r+0xa0>
 800e61e:	6921      	ldr	r1, [r4, #16]
 800e620:	464a      	mov	r2, r9
 800e622:	f000 f9f9 	bl	800ea18 <memcpy>
 800e626:	89a3      	ldrh	r3, [r4, #12]
 800e628:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e62c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e630:	81a3      	strh	r3, [r4, #12]
 800e632:	6126      	str	r6, [r4, #16]
 800e634:	6165      	str	r5, [r4, #20]
 800e636:	444e      	add	r6, r9
 800e638:	eba5 0509 	sub.w	r5, r5, r9
 800e63c:	6026      	str	r6, [r4, #0]
 800e63e:	60a5      	str	r5, [r4, #8]
 800e640:	463e      	mov	r6, r7
 800e642:	42be      	cmp	r6, r7
 800e644:	d900      	bls.n	800e648 <__ssputs_r+0x70>
 800e646:	463e      	mov	r6, r7
 800e648:	6820      	ldr	r0, [r4, #0]
 800e64a:	4632      	mov	r2, r6
 800e64c:	4641      	mov	r1, r8
 800e64e:	f000 f9c9 	bl	800e9e4 <memmove>
 800e652:	68a3      	ldr	r3, [r4, #8]
 800e654:	1b9b      	subs	r3, r3, r6
 800e656:	60a3      	str	r3, [r4, #8]
 800e658:	6823      	ldr	r3, [r4, #0]
 800e65a:	4433      	add	r3, r6
 800e65c:	6023      	str	r3, [r4, #0]
 800e65e:	2000      	movs	r0, #0
 800e660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e664:	462a      	mov	r2, r5
 800e666:	f000 fa2b 	bl	800eac0 <_realloc_r>
 800e66a:	4606      	mov	r6, r0
 800e66c:	2800      	cmp	r0, #0
 800e66e:	d1e0      	bne.n	800e632 <__ssputs_r+0x5a>
 800e670:	6921      	ldr	r1, [r4, #16]
 800e672:	4650      	mov	r0, sl
 800e674:	f7ff fbe8 	bl	800de48 <_free_r>
 800e678:	230c      	movs	r3, #12
 800e67a:	f8ca 3000 	str.w	r3, [sl]
 800e67e:	89a3      	ldrh	r3, [r4, #12]
 800e680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e684:	81a3      	strh	r3, [r4, #12]
 800e686:	f04f 30ff 	mov.w	r0, #4294967295
 800e68a:	e7e9      	b.n	800e660 <__ssputs_r+0x88>

0800e68c <_svfiprintf_r>:
 800e68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e690:	4698      	mov	r8, r3
 800e692:	898b      	ldrh	r3, [r1, #12]
 800e694:	061b      	lsls	r3, r3, #24
 800e696:	b09d      	sub	sp, #116	; 0x74
 800e698:	4607      	mov	r7, r0
 800e69a:	460d      	mov	r5, r1
 800e69c:	4614      	mov	r4, r2
 800e69e:	d50e      	bpl.n	800e6be <_svfiprintf_r+0x32>
 800e6a0:	690b      	ldr	r3, [r1, #16]
 800e6a2:	b963      	cbnz	r3, 800e6be <_svfiprintf_r+0x32>
 800e6a4:	2140      	movs	r1, #64	; 0x40
 800e6a6:	f7fd ff57 	bl	800c558 <_malloc_r>
 800e6aa:	6028      	str	r0, [r5, #0]
 800e6ac:	6128      	str	r0, [r5, #16]
 800e6ae:	b920      	cbnz	r0, 800e6ba <_svfiprintf_r+0x2e>
 800e6b0:	230c      	movs	r3, #12
 800e6b2:	603b      	str	r3, [r7, #0]
 800e6b4:	f04f 30ff 	mov.w	r0, #4294967295
 800e6b8:	e0d0      	b.n	800e85c <_svfiprintf_r+0x1d0>
 800e6ba:	2340      	movs	r3, #64	; 0x40
 800e6bc:	616b      	str	r3, [r5, #20]
 800e6be:	2300      	movs	r3, #0
 800e6c0:	9309      	str	r3, [sp, #36]	; 0x24
 800e6c2:	2320      	movs	r3, #32
 800e6c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e6c8:	f8cd 800c 	str.w	r8, [sp, #12]
 800e6cc:	2330      	movs	r3, #48	; 0x30
 800e6ce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e874 <_svfiprintf_r+0x1e8>
 800e6d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e6d6:	f04f 0901 	mov.w	r9, #1
 800e6da:	4623      	mov	r3, r4
 800e6dc:	469a      	mov	sl, r3
 800e6de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e6e2:	b10a      	cbz	r2, 800e6e8 <_svfiprintf_r+0x5c>
 800e6e4:	2a25      	cmp	r2, #37	; 0x25
 800e6e6:	d1f9      	bne.n	800e6dc <_svfiprintf_r+0x50>
 800e6e8:	ebba 0b04 	subs.w	fp, sl, r4
 800e6ec:	d00b      	beq.n	800e706 <_svfiprintf_r+0x7a>
 800e6ee:	465b      	mov	r3, fp
 800e6f0:	4622      	mov	r2, r4
 800e6f2:	4629      	mov	r1, r5
 800e6f4:	4638      	mov	r0, r7
 800e6f6:	f7ff ff6f 	bl	800e5d8 <__ssputs_r>
 800e6fa:	3001      	adds	r0, #1
 800e6fc:	f000 80a9 	beq.w	800e852 <_svfiprintf_r+0x1c6>
 800e700:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e702:	445a      	add	r2, fp
 800e704:	9209      	str	r2, [sp, #36]	; 0x24
 800e706:	f89a 3000 	ldrb.w	r3, [sl]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	f000 80a1 	beq.w	800e852 <_svfiprintf_r+0x1c6>
 800e710:	2300      	movs	r3, #0
 800e712:	f04f 32ff 	mov.w	r2, #4294967295
 800e716:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e71a:	f10a 0a01 	add.w	sl, sl, #1
 800e71e:	9304      	str	r3, [sp, #16]
 800e720:	9307      	str	r3, [sp, #28]
 800e722:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e726:	931a      	str	r3, [sp, #104]	; 0x68
 800e728:	4654      	mov	r4, sl
 800e72a:	2205      	movs	r2, #5
 800e72c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e730:	4850      	ldr	r0, [pc, #320]	; (800e874 <_svfiprintf_r+0x1e8>)
 800e732:	f7f1 fdd5 	bl	80002e0 <memchr>
 800e736:	9a04      	ldr	r2, [sp, #16]
 800e738:	b9d8      	cbnz	r0, 800e772 <_svfiprintf_r+0xe6>
 800e73a:	06d0      	lsls	r0, r2, #27
 800e73c:	bf44      	itt	mi
 800e73e:	2320      	movmi	r3, #32
 800e740:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e744:	0711      	lsls	r1, r2, #28
 800e746:	bf44      	itt	mi
 800e748:	232b      	movmi	r3, #43	; 0x2b
 800e74a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e74e:	f89a 3000 	ldrb.w	r3, [sl]
 800e752:	2b2a      	cmp	r3, #42	; 0x2a
 800e754:	d015      	beq.n	800e782 <_svfiprintf_r+0xf6>
 800e756:	9a07      	ldr	r2, [sp, #28]
 800e758:	4654      	mov	r4, sl
 800e75a:	2000      	movs	r0, #0
 800e75c:	f04f 0c0a 	mov.w	ip, #10
 800e760:	4621      	mov	r1, r4
 800e762:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e766:	3b30      	subs	r3, #48	; 0x30
 800e768:	2b09      	cmp	r3, #9
 800e76a:	d94d      	bls.n	800e808 <_svfiprintf_r+0x17c>
 800e76c:	b1b0      	cbz	r0, 800e79c <_svfiprintf_r+0x110>
 800e76e:	9207      	str	r2, [sp, #28]
 800e770:	e014      	b.n	800e79c <_svfiprintf_r+0x110>
 800e772:	eba0 0308 	sub.w	r3, r0, r8
 800e776:	fa09 f303 	lsl.w	r3, r9, r3
 800e77a:	4313      	orrs	r3, r2
 800e77c:	9304      	str	r3, [sp, #16]
 800e77e:	46a2      	mov	sl, r4
 800e780:	e7d2      	b.n	800e728 <_svfiprintf_r+0x9c>
 800e782:	9b03      	ldr	r3, [sp, #12]
 800e784:	1d19      	adds	r1, r3, #4
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	9103      	str	r1, [sp, #12]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	bfbb      	ittet	lt
 800e78e:	425b      	neglt	r3, r3
 800e790:	f042 0202 	orrlt.w	r2, r2, #2
 800e794:	9307      	strge	r3, [sp, #28]
 800e796:	9307      	strlt	r3, [sp, #28]
 800e798:	bfb8      	it	lt
 800e79a:	9204      	strlt	r2, [sp, #16]
 800e79c:	7823      	ldrb	r3, [r4, #0]
 800e79e:	2b2e      	cmp	r3, #46	; 0x2e
 800e7a0:	d10c      	bne.n	800e7bc <_svfiprintf_r+0x130>
 800e7a2:	7863      	ldrb	r3, [r4, #1]
 800e7a4:	2b2a      	cmp	r3, #42	; 0x2a
 800e7a6:	d134      	bne.n	800e812 <_svfiprintf_r+0x186>
 800e7a8:	9b03      	ldr	r3, [sp, #12]
 800e7aa:	1d1a      	adds	r2, r3, #4
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	9203      	str	r2, [sp, #12]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	bfb8      	it	lt
 800e7b4:	f04f 33ff 	movlt.w	r3, #4294967295
 800e7b8:	3402      	adds	r4, #2
 800e7ba:	9305      	str	r3, [sp, #20]
 800e7bc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e884 <_svfiprintf_r+0x1f8>
 800e7c0:	7821      	ldrb	r1, [r4, #0]
 800e7c2:	2203      	movs	r2, #3
 800e7c4:	4650      	mov	r0, sl
 800e7c6:	f7f1 fd8b 	bl	80002e0 <memchr>
 800e7ca:	b138      	cbz	r0, 800e7dc <_svfiprintf_r+0x150>
 800e7cc:	9b04      	ldr	r3, [sp, #16]
 800e7ce:	eba0 000a 	sub.w	r0, r0, sl
 800e7d2:	2240      	movs	r2, #64	; 0x40
 800e7d4:	4082      	lsls	r2, r0
 800e7d6:	4313      	orrs	r3, r2
 800e7d8:	3401      	adds	r4, #1
 800e7da:	9304      	str	r3, [sp, #16]
 800e7dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7e0:	4825      	ldr	r0, [pc, #148]	; (800e878 <_svfiprintf_r+0x1ec>)
 800e7e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e7e6:	2206      	movs	r2, #6
 800e7e8:	f7f1 fd7a 	bl	80002e0 <memchr>
 800e7ec:	2800      	cmp	r0, #0
 800e7ee:	d038      	beq.n	800e862 <_svfiprintf_r+0x1d6>
 800e7f0:	4b22      	ldr	r3, [pc, #136]	; (800e87c <_svfiprintf_r+0x1f0>)
 800e7f2:	bb1b      	cbnz	r3, 800e83c <_svfiprintf_r+0x1b0>
 800e7f4:	9b03      	ldr	r3, [sp, #12]
 800e7f6:	3307      	adds	r3, #7
 800e7f8:	f023 0307 	bic.w	r3, r3, #7
 800e7fc:	3308      	adds	r3, #8
 800e7fe:	9303      	str	r3, [sp, #12]
 800e800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e802:	4433      	add	r3, r6
 800e804:	9309      	str	r3, [sp, #36]	; 0x24
 800e806:	e768      	b.n	800e6da <_svfiprintf_r+0x4e>
 800e808:	fb0c 3202 	mla	r2, ip, r2, r3
 800e80c:	460c      	mov	r4, r1
 800e80e:	2001      	movs	r0, #1
 800e810:	e7a6      	b.n	800e760 <_svfiprintf_r+0xd4>
 800e812:	2300      	movs	r3, #0
 800e814:	3401      	adds	r4, #1
 800e816:	9305      	str	r3, [sp, #20]
 800e818:	4619      	mov	r1, r3
 800e81a:	f04f 0c0a 	mov.w	ip, #10
 800e81e:	4620      	mov	r0, r4
 800e820:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e824:	3a30      	subs	r2, #48	; 0x30
 800e826:	2a09      	cmp	r2, #9
 800e828:	d903      	bls.n	800e832 <_svfiprintf_r+0x1a6>
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d0c6      	beq.n	800e7bc <_svfiprintf_r+0x130>
 800e82e:	9105      	str	r1, [sp, #20]
 800e830:	e7c4      	b.n	800e7bc <_svfiprintf_r+0x130>
 800e832:	fb0c 2101 	mla	r1, ip, r1, r2
 800e836:	4604      	mov	r4, r0
 800e838:	2301      	movs	r3, #1
 800e83a:	e7f0      	b.n	800e81e <_svfiprintf_r+0x192>
 800e83c:	ab03      	add	r3, sp, #12
 800e83e:	9300      	str	r3, [sp, #0]
 800e840:	462a      	mov	r2, r5
 800e842:	4b0f      	ldr	r3, [pc, #60]	; (800e880 <_svfiprintf_r+0x1f4>)
 800e844:	a904      	add	r1, sp, #16
 800e846:	4638      	mov	r0, r7
 800e848:	f7fd ffa2 	bl	800c790 <_printf_float>
 800e84c:	1c42      	adds	r2, r0, #1
 800e84e:	4606      	mov	r6, r0
 800e850:	d1d6      	bne.n	800e800 <_svfiprintf_r+0x174>
 800e852:	89ab      	ldrh	r3, [r5, #12]
 800e854:	065b      	lsls	r3, r3, #25
 800e856:	f53f af2d 	bmi.w	800e6b4 <_svfiprintf_r+0x28>
 800e85a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e85c:	b01d      	add	sp, #116	; 0x74
 800e85e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e862:	ab03      	add	r3, sp, #12
 800e864:	9300      	str	r3, [sp, #0]
 800e866:	462a      	mov	r2, r5
 800e868:	4b05      	ldr	r3, [pc, #20]	; (800e880 <_svfiprintf_r+0x1f4>)
 800e86a:	a904      	add	r1, sp, #16
 800e86c:	4638      	mov	r0, r7
 800e86e:	f7fe fa17 	bl	800cca0 <_printf_i>
 800e872:	e7eb      	b.n	800e84c <_svfiprintf_r+0x1c0>
 800e874:	0800f3a4 	.word	0x0800f3a4
 800e878:	0800f3ae 	.word	0x0800f3ae
 800e87c:	0800c791 	.word	0x0800c791
 800e880:	0800e5d9 	.word	0x0800e5d9
 800e884:	0800f3aa 	.word	0x0800f3aa

0800e888 <__sflush_r>:
 800e888:	898a      	ldrh	r2, [r1, #12]
 800e88a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e88e:	4605      	mov	r5, r0
 800e890:	0710      	lsls	r0, r2, #28
 800e892:	460c      	mov	r4, r1
 800e894:	d458      	bmi.n	800e948 <__sflush_r+0xc0>
 800e896:	684b      	ldr	r3, [r1, #4]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	dc05      	bgt.n	800e8a8 <__sflush_r+0x20>
 800e89c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	dc02      	bgt.n	800e8a8 <__sflush_r+0x20>
 800e8a2:	2000      	movs	r0, #0
 800e8a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e8aa:	2e00      	cmp	r6, #0
 800e8ac:	d0f9      	beq.n	800e8a2 <__sflush_r+0x1a>
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e8b4:	682f      	ldr	r7, [r5, #0]
 800e8b6:	6a21      	ldr	r1, [r4, #32]
 800e8b8:	602b      	str	r3, [r5, #0]
 800e8ba:	d032      	beq.n	800e922 <__sflush_r+0x9a>
 800e8bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e8be:	89a3      	ldrh	r3, [r4, #12]
 800e8c0:	075a      	lsls	r2, r3, #29
 800e8c2:	d505      	bpl.n	800e8d0 <__sflush_r+0x48>
 800e8c4:	6863      	ldr	r3, [r4, #4]
 800e8c6:	1ac0      	subs	r0, r0, r3
 800e8c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e8ca:	b10b      	cbz	r3, 800e8d0 <__sflush_r+0x48>
 800e8cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e8ce:	1ac0      	subs	r0, r0, r3
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	4602      	mov	r2, r0
 800e8d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e8d6:	6a21      	ldr	r1, [r4, #32]
 800e8d8:	4628      	mov	r0, r5
 800e8da:	47b0      	blx	r6
 800e8dc:	1c43      	adds	r3, r0, #1
 800e8de:	89a3      	ldrh	r3, [r4, #12]
 800e8e0:	d106      	bne.n	800e8f0 <__sflush_r+0x68>
 800e8e2:	6829      	ldr	r1, [r5, #0]
 800e8e4:	291d      	cmp	r1, #29
 800e8e6:	d82b      	bhi.n	800e940 <__sflush_r+0xb8>
 800e8e8:	4a29      	ldr	r2, [pc, #164]	; (800e990 <__sflush_r+0x108>)
 800e8ea:	410a      	asrs	r2, r1
 800e8ec:	07d6      	lsls	r6, r2, #31
 800e8ee:	d427      	bmi.n	800e940 <__sflush_r+0xb8>
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	6062      	str	r2, [r4, #4]
 800e8f4:	04d9      	lsls	r1, r3, #19
 800e8f6:	6922      	ldr	r2, [r4, #16]
 800e8f8:	6022      	str	r2, [r4, #0]
 800e8fa:	d504      	bpl.n	800e906 <__sflush_r+0x7e>
 800e8fc:	1c42      	adds	r2, r0, #1
 800e8fe:	d101      	bne.n	800e904 <__sflush_r+0x7c>
 800e900:	682b      	ldr	r3, [r5, #0]
 800e902:	b903      	cbnz	r3, 800e906 <__sflush_r+0x7e>
 800e904:	6560      	str	r0, [r4, #84]	; 0x54
 800e906:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e908:	602f      	str	r7, [r5, #0]
 800e90a:	2900      	cmp	r1, #0
 800e90c:	d0c9      	beq.n	800e8a2 <__sflush_r+0x1a>
 800e90e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e912:	4299      	cmp	r1, r3
 800e914:	d002      	beq.n	800e91c <__sflush_r+0x94>
 800e916:	4628      	mov	r0, r5
 800e918:	f7ff fa96 	bl	800de48 <_free_r>
 800e91c:	2000      	movs	r0, #0
 800e91e:	6360      	str	r0, [r4, #52]	; 0x34
 800e920:	e7c0      	b.n	800e8a4 <__sflush_r+0x1c>
 800e922:	2301      	movs	r3, #1
 800e924:	4628      	mov	r0, r5
 800e926:	47b0      	blx	r6
 800e928:	1c41      	adds	r1, r0, #1
 800e92a:	d1c8      	bne.n	800e8be <__sflush_r+0x36>
 800e92c:	682b      	ldr	r3, [r5, #0]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d0c5      	beq.n	800e8be <__sflush_r+0x36>
 800e932:	2b1d      	cmp	r3, #29
 800e934:	d001      	beq.n	800e93a <__sflush_r+0xb2>
 800e936:	2b16      	cmp	r3, #22
 800e938:	d101      	bne.n	800e93e <__sflush_r+0xb6>
 800e93a:	602f      	str	r7, [r5, #0]
 800e93c:	e7b1      	b.n	800e8a2 <__sflush_r+0x1a>
 800e93e:	89a3      	ldrh	r3, [r4, #12]
 800e940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e944:	81a3      	strh	r3, [r4, #12]
 800e946:	e7ad      	b.n	800e8a4 <__sflush_r+0x1c>
 800e948:	690f      	ldr	r7, [r1, #16]
 800e94a:	2f00      	cmp	r7, #0
 800e94c:	d0a9      	beq.n	800e8a2 <__sflush_r+0x1a>
 800e94e:	0793      	lsls	r3, r2, #30
 800e950:	680e      	ldr	r6, [r1, #0]
 800e952:	bf08      	it	eq
 800e954:	694b      	ldreq	r3, [r1, #20]
 800e956:	600f      	str	r7, [r1, #0]
 800e958:	bf18      	it	ne
 800e95a:	2300      	movne	r3, #0
 800e95c:	eba6 0807 	sub.w	r8, r6, r7
 800e960:	608b      	str	r3, [r1, #8]
 800e962:	f1b8 0f00 	cmp.w	r8, #0
 800e966:	dd9c      	ble.n	800e8a2 <__sflush_r+0x1a>
 800e968:	6a21      	ldr	r1, [r4, #32]
 800e96a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e96c:	4643      	mov	r3, r8
 800e96e:	463a      	mov	r2, r7
 800e970:	4628      	mov	r0, r5
 800e972:	47b0      	blx	r6
 800e974:	2800      	cmp	r0, #0
 800e976:	dc06      	bgt.n	800e986 <__sflush_r+0xfe>
 800e978:	89a3      	ldrh	r3, [r4, #12]
 800e97a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e97e:	81a3      	strh	r3, [r4, #12]
 800e980:	f04f 30ff 	mov.w	r0, #4294967295
 800e984:	e78e      	b.n	800e8a4 <__sflush_r+0x1c>
 800e986:	4407      	add	r7, r0
 800e988:	eba8 0800 	sub.w	r8, r8, r0
 800e98c:	e7e9      	b.n	800e962 <__sflush_r+0xda>
 800e98e:	bf00      	nop
 800e990:	dfbffffe 	.word	0xdfbffffe

0800e994 <_fflush_r>:
 800e994:	b538      	push	{r3, r4, r5, lr}
 800e996:	690b      	ldr	r3, [r1, #16]
 800e998:	4605      	mov	r5, r0
 800e99a:	460c      	mov	r4, r1
 800e99c:	b913      	cbnz	r3, 800e9a4 <_fflush_r+0x10>
 800e99e:	2500      	movs	r5, #0
 800e9a0:	4628      	mov	r0, r5
 800e9a2:	bd38      	pop	{r3, r4, r5, pc}
 800e9a4:	b118      	cbz	r0, 800e9ae <_fflush_r+0x1a>
 800e9a6:	6a03      	ldr	r3, [r0, #32]
 800e9a8:	b90b      	cbnz	r3, 800e9ae <_fflush_r+0x1a>
 800e9aa:	f7fe fb27 	bl	800cffc <__sinit>
 800e9ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d0f3      	beq.n	800e99e <_fflush_r+0xa>
 800e9b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e9b8:	07d0      	lsls	r0, r2, #31
 800e9ba:	d404      	bmi.n	800e9c6 <_fflush_r+0x32>
 800e9bc:	0599      	lsls	r1, r3, #22
 800e9be:	d402      	bmi.n	800e9c6 <_fflush_r+0x32>
 800e9c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e9c2:	f7fe fc42 	bl	800d24a <__retarget_lock_acquire_recursive>
 800e9c6:	4628      	mov	r0, r5
 800e9c8:	4621      	mov	r1, r4
 800e9ca:	f7ff ff5d 	bl	800e888 <__sflush_r>
 800e9ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e9d0:	07da      	lsls	r2, r3, #31
 800e9d2:	4605      	mov	r5, r0
 800e9d4:	d4e4      	bmi.n	800e9a0 <_fflush_r+0xc>
 800e9d6:	89a3      	ldrh	r3, [r4, #12]
 800e9d8:	059b      	lsls	r3, r3, #22
 800e9da:	d4e1      	bmi.n	800e9a0 <_fflush_r+0xc>
 800e9dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e9de:	f7fe fc35 	bl	800d24c <__retarget_lock_release_recursive>
 800e9e2:	e7dd      	b.n	800e9a0 <_fflush_r+0xc>

0800e9e4 <memmove>:
 800e9e4:	4288      	cmp	r0, r1
 800e9e6:	b510      	push	{r4, lr}
 800e9e8:	eb01 0402 	add.w	r4, r1, r2
 800e9ec:	d902      	bls.n	800e9f4 <memmove+0x10>
 800e9ee:	4284      	cmp	r4, r0
 800e9f0:	4623      	mov	r3, r4
 800e9f2:	d807      	bhi.n	800ea04 <memmove+0x20>
 800e9f4:	1e43      	subs	r3, r0, #1
 800e9f6:	42a1      	cmp	r1, r4
 800e9f8:	d008      	beq.n	800ea0c <memmove+0x28>
 800e9fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e9fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ea02:	e7f8      	b.n	800e9f6 <memmove+0x12>
 800ea04:	4402      	add	r2, r0
 800ea06:	4601      	mov	r1, r0
 800ea08:	428a      	cmp	r2, r1
 800ea0a:	d100      	bne.n	800ea0e <memmove+0x2a>
 800ea0c:	bd10      	pop	{r4, pc}
 800ea0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ea12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ea16:	e7f7      	b.n	800ea08 <memmove+0x24>

0800ea18 <memcpy>:
 800ea18:	440a      	add	r2, r1
 800ea1a:	4291      	cmp	r1, r2
 800ea1c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ea20:	d100      	bne.n	800ea24 <memcpy+0xc>
 800ea22:	4770      	bx	lr
 800ea24:	b510      	push	{r4, lr}
 800ea26:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ea2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ea2e:	4291      	cmp	r1, r2
 800ea30:	d1f9      	bne.n	800ea26 <memcpy+0xe>
 800ea32:	bd10      	pop	{r4, pc}

0800ea34 <__assert_func>:
 800ea34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ea36:	4614      	mov	r4, r2
 800ea38:	461a      	mov	r2, r3
 800ea3a:	4b09      	ldr	r3, [pc, #36]	; (800ea60 <__assert_func+0x2c>)
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	4605      	mov	r5, r0
 800ea40:	68d8      	ldr	r0, [r3, #12]
 800ea42:	b14c      	cbz	r4, 800ea58 <__assert_func+0x24>
 800ea44:	4b07      	ldr	r3, [pc, #28]	; (800ea64 <__assert_func+0x30>)
 800ea46:	9100      	str	r1, [sp, #0]
 800ea48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ea4c:	4906      	ldr	r1, [pc, #24]	; (800ea68 <__assert_func+0x34>)
 800ea4e:	462b      	mov	r3, r5
 800ea50:	f000 f872 	bl	800eb38 <fiprintf>
 800ea54:	f000 f882 	bl	800eb5c <abort>
 800ea58:	4b04      	ldr	r3, [pc, #16]	; (800ea6c <__assert_func+0x38>)
 800ea5a:	461c      	mov	r4, r3
 800ea5c:	e7f3      	b.n	800ea46 <__assert_func+0x12>
 800ea5e:	bf00      	nop
 800ea60:	2400019c 	.word	0x2400019c
 800ea64:	0800f3bf 	.word	0x0800f3bf
 800ea68:	0800f3cc 	.word	0x0800f3cc
 800ea6c:	0800f3fa 	.word	0x0800f3fa

0800ea70 <_calloc_r>:
 800ea70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ea72:	fba1 2402 	umull	r2, r4, r1, r2
 800ea76:	b94c      	cbnz	r4, 800ea8c <_calloc_r+0x1c>
 800ea78:	4611      	mov	r1, r2
 800ea7a:	9201      	str	r2, [sp, #4]
 800ea7c:	f7fd fd6c 	bl	800c558 <_malloc_r>
 800ea80:	9a01      	ldr	r2, [sp, #4]
 800ea82:	4605      	mov	r5, r0
 800ea84:	b930      	cbnz	r0, 800ea94 <_calloc_r+0x24>
 800ea86:	4628      	mov	r0, r5
 800ea88:	b003      	add	sp, #12
 800ea8a:	bd30      	pop	{r4, r5, pc}
 800ea8c:	220c      	movs	r2, #12
 800ea8e:	6002      	str	r2, [r0, #0]
 800ea90:	2500      	movs	r5, #0
 800ea92:	e7f8      	b.n	800ea86 <_calloc_r+0x16>
 800ea94:	4621      	mov	r1, r4
 800ea96:	f7fe fb4a 	bl	800d12e <memset>
 800ea9a:	e7f4      	b.n	800ea86 <_calloc_r+0x16>

0800ea9c <__ascii_mbtowc>:
 800ea9c:	b082      	sub	sp, #8
 800ea9e:	b901      	cbnz	r1, 800eaa2 <__ascii_mbtowc+0x6>
 800eaa0:	a901      	add	r1, sp, #4
 800eaa2:	b142      	cbz	r2, 800eab6 <__ascii_mbtowc+0x1a>
 800eaa4:	b14b      	cbz	r3, 800eaba <__ascii_mbtowc+0x1e>
 800eaa6:	7813      	ldrb	r3, [r2, #0]
 800eaa8:	600b      	str	r3, [r1, #0]
 800eaaa:	7812      	ldrb	r2, [r2, #0]
 800eaac:	1e10      	subs	r0, r2, #0
 800eaae:	bf18      	it	ne
 800eab0:	2001      	movne	r0, #1
 800eab2:	b002      	add	sp, #8
 800eab4:	4770      	bx	lr
 800eab6:	4610      	mov	r0, r2
 800eab8:	e7fb      	b.n	800eab2 <__ascii_mbtowc+0x16>
 800eaba:	f06f 0001 	mvn.w	r0, #1
 800eabe:	e7f8      	b.n	800eab2 <__ascii_mbtowc+0x16>

0800eac0 <_realloc_r>:
 800eac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eac4:	4680      	mov	r8, r0
 800eac6:	4614      	mov	r4, r2
 800eac8:	460e      	mov	r6, r1
 800eaca:	b921      	cbnz	r1, 800ead6 <_realloc_r+0x16>
 800eacc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ead0:	4611      	mov	r1, r2
 800ead2:	f7fd bd41 	b.w	800c558 <_malloc_r>
 800ead6:	b92a      	cbnz	r2, 800eae4 <_realloc_r+0x24>
 800ead8:	f7ff f9b6 	bl	800de48 <_free_r>
 800eadc:	4625      	mov	r5, r4
 800eade:	4628      	mov	r0, r5
 800eae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eae4:	f000 f841 	bl	800eb6a <_malloc_usable_size_r>
 800eae8:	4284      	cmp	r4, r0
 800eaea:	4607      	mov	r7, r0
 800eaec:	d802      	bhi.n	800eaf4 <_realloc_r+0x34>
 800eaee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800eaf2:	d812      	bhi.n	800eb1a <_realloc_r+0x5a>
 800eaf4:	4621      	mov	r1, r4
 800eaf6:	4640      	mov	r0, r8
 800eaf8:	f7fd fd2e 	bl	800c558 <_malloc_r>
 800eafc:	4605      	mov	r5, r0
 800eafe:	2800      	cmp	r0, #0
 800eb00:	d0ed      	beq.n	800eade <_realloc_r+0x1e>
 800eb02:	42bc      	cmp	r4, r7
 800eb04:	4622      	mov	r2, r4
 800eb06:	4631      	mov	r1, r6
 800eb08:	bf28      	it	cs
 800eb0a:	463a      	movcs	r2, r7
 800eb0c:	f7ff ff84 	bl	800ea18 <memcpy>
 800eb10:	4631      	mov	r1, r6
 800eb12:	4640      	mov	r0, r8
 800eb14:	f7ff f998 	bl	800de48 <_free_r>
 800eb18:	e7e1      	b.n	800eade <_realloc_r+0x1e>
 800eb1a:	4635      	mov	r5, r6
 800eb1c:	e7df      	b.n	800eade <_realloc_r+0x1e>

0800eb1e <__ascii_wctomb>:
 800eb1e:	b149      	cbz	r1, 800eb34 <__ascii_wctomb+0x16>
 800eb20:	2aff      	cmp	r2, #255	; 0xff
 800eb22:	bf85      	ittet	hi
 800eb24:	238a      	movhi	r3, #138	; 0x8a
 800eb26:	6003      	strhi	r3, [r0, #0]
 800eb28:	700a      	strbls	r2, [r1, #0]
 800eb2a:	f04f 30ff 	movhi.w	r0, #4294967295
 800eb2e:	bf98      	it	ls
 800eb30:	2001      	movls	r0, #1
 800eb32:	4770      	bx	lr
 800eb34:	4608      	mov	r0, r1
 800eb36:	4770      	bx	lr

0800eb38 <fiprintf>:
 800eb38:	b40e      	push	{r1, r2, r3}
 800eb3a:	b503      	push	{r0, r1, lr}
 800eb3c:	4601      	mov	r1, r0
 800eb3e:	ab03      	add	r3, sp, #12
 800eb40:	4805      	ldr	r0, [pc, #20]	; (800eb58 <fiprintf+0x20>)
 800eb42:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb46:	6800      	ldr	r0, [r0, #0]
 800eb48:	9301      	str	r3, [sp, #4]
 800eb4a:	f000 f83f 	bl	800ebcc <_vfiprintf_r>
 800eb4e:	b002      	add	sp, #8
 800eb50:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb54:	b003      	add	sp, #12
 800eb56:	4770      	bx	lr
 800eb58:	2400019c 	.word	0x2400019c

0800eb5c <abort>:
 800eb5c:	b508      	push	{r3, lr}
 800eb5e:	2006      	movs	r0, #6
 800eb60:	f000 fa0c 	bl	800ef7c <raise>
 800eb64:	2001      	movs	r0, #1
 800eb66:	f7f2 fee7 	bl	8001938 <_exit>

0800eb6a <_malloc_usable_size_r>:
 800eb6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb6e:	1f18      	subs	r0, r3, #4
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	bfbc      	itt	lt
 800eb74:	580b      	ldrlt	r3, [r1, r0]
 800eb76:	18c0      	addlt	r0, r0, r3
 800eb78:	4770      	bx	lr

0800eb7a <__sfputc_r>:
 800eb7a:	6893      	ldr	r3, [r2, #8]
 800eb7c:	3b01      	subs	r3, #1
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	b410      	push	{r4}
 800eb82:	6093      	str	r3, [r2, #8]
 800eb84:	da08      	bge.n	800eb98 <__sfputc_r+0x1e>
 800eb86:	6994      	ldr	r4, [r2, #24]
 800eb88:	42a3      	cmp	r3, r4
 800eb8a:	db01      	blt.n	800eb90 <__sfputc_r+0x16>
 800eb8c:	290a      	cmp	r1, #10
 800eb8e:	d103      	bne.n	800eb98 <__sfputc_r+0x1e>
 800eb90:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb94:	f000 b934 	b.w	800ee00 <__swbuf_r>
 800eb98:	6813      	ldr	r3, [r2, #0]
 800eb9a:	1c58      	adds	r0, r3, #1
 800eb9c:	6010      	str	r0, [r2, #0]
 800eb9e:	7019      	strb	r1, [r3, #0]
 800eba0:	4608      	mov	r0, r1
 800eba2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eba6:	4770      	bx	lr

0800eba8 <__sfputs_r>:
 800eba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebaa:	4606      	mov	r6, r0
 800ebac:	460f      	mov	r7, r1
 800ebae:	4614      	mov	r4, r2
 800ebb0:	18d5      	adds	r5, r2, r3
 800ebb2:	42ac      	cmp	r4, r5
 800ebb4:	d101      	bne.n	800ebba <__sfputs_r+0x12>
 800ebb6:	2000      	movs	r0, #0
 800ebb8:	e007      	b.n	800ebca <__sfputs_r+0x22>
 800ebba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebbe:	463a      	mov	r2, r7
 800ebc0:	4630      	mov	r0, r6
 800ebc2:	f7ff ffda 	bl	800eb7a <__sfputc_r>
 800ebc6:	1c43      	adds	r3, r0, #1
 800ebc8:	d1f3      	bne.n	800ebb2 <__sfputs_r+0xa>
 800ebca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ebcc <_vfiprintf_r>:
 800ebcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebd0:	460d      	mov	r5, r1
 800ebd2:	b09d      	sub	sp, #116	; 0x74
 800ebd4:	4614      	mov	r4, r2
 800ebd6:	4698      	mov	r8, r3
 800ebd8:	4606      	mov	r6, r0
 800ebda:	b118      	cbz	r0, 800ebe4 <_vfiprintf_r+0x18>
 800ebdc:	6a03      	ldr	r3, [r0, #32]
 800ebde:	b90b      	cbnz	r3, 800ebe4 <_vfiprintf_r+0x18>
 800ebe0:	f7fe fa0c 	bl	800cffc <__sinit>
 800ebe4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ebe6:	07d9      	lsls	r1, r3, #31
 800ebe8:	d405      	bmi.n	800ebf6 <_vfiprintf_r+0x2a>
 800ebea:	89ab      	ldrh	r3, [r5, #12]
 800ebec:	059a      	lsls	r2, r3, #22
 800ebee:	d402      	bmi.n	800ebf6 <_vfiprintf_r+0x2a>
 800ebf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ebf2:	f7fe fb2a 	bl	800d24a <__retarget_lock_acquire_recursive>
 800ebf6:	89ab      	ldrh	r3, [r5, #12]
 800ebf8:	071b      	lsls	r3, r3, #28
 800ebfa:	d501      	bpl.n	800ec00 <_vfiprintf_r+0x34>
 800ebfc:	692b      	ldr	r3, [r5, #16]
 800ebfe:	b99b      	cbnz	r3, 800ec28 <_vfiprintf_r+0x5c>
 800ec00:	4629      	mov	r1, r5
 800ec02:	4630      	mov	r0, r6
 800ec04:	f000 f93a 	bl	800ee7c <__swsetup_r>
 800ec08:	b170      	cbz	r0, 800ec28 <_vfiprintf_r+0x5c>
 800ec0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ec0c:	07dc      	lsls	r4, r3, #31
 800ec0e:	d504      	bpl.n	800ec1a <_vfiprintf_r+0x4e>
 800ec10:	f04f 30ff 	mov.w	r0, #4294967295
 800ec14:	b01d      	add	sp, #116	; 0x74
 800ec16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec1a:	89ab      	ldrh	r3, [r5, #12]
 800ec1c:	0598      	lsls	r0, r3, #22
 800ec1e:	d4f7      	bmi.n	800ec10 <_vfiprintf_r+0x44>
 800ec20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ec22:	f7fe fb13 	bl	800d24c <__retarget_lock_release_recursive>
 800ec26:	e7f3      	b.n	800ec10 <_vfiprintf_r+0x44>
 800ec28:	2300      	movs	r3, #0
 800ec2a:	9309      	str	r3, [sp, #36]	; 0x24
 800ec2c:	2320      	movs	r3, #32
 800ec2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ec32:	f8cd 800c 	str.w	r8, [sp, #12]
 800ec36:	2330      	movs	r3, #48	; 0x30
 800ec38:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800edec <_vfiprintf_r+0x220>
 800ec3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ec40:	f04f 0901 	mov.w	r9, #1
 800ec44:	4623      	mov	r3, r4
 800ec46:	469a      	mov	sl, r3
 800ec48:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec4c:	b10a      	cbz	r2, 800ec52 <_vfiprintf_r+0x86>
 800ec4e:	2a25      	cmp	r2, #37	; 0x25
 800ec50:	d1f9      	bne.n	800ec46 <_vfiprintf_r+0x7a>
 800ec52:	ebba 0b04 	subs.w	fp, sl, r4
 800ec56:	d00b      	beq.n	800ec70 <_vfiprintf_r+0xa4>
 800ec58:	465b      	mov	r3, fp
 800ec5a:	4622      	mov	r2, r4
 800ec5c:	4629      	mov	r1, r5
 800ec5e:	4630      	mov	r0, r6
 800ec60:	f7ff ffa2 	bl	800eba8 <__sfputs_r>
 800ec64:	3001      	adds	r0, #1
 800ec66:	f000 80a9 	beq.w	800edbc <_vfiprintf_r+0x1f0>
 800ec6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ec6c:	445a      	add	r2, fp
 800ec6e:	9209      	str	r2, [sp, #36]	; 0x24
 800ec70:	f89a 3000 	ldrb.w	r3, [sl]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	f000 80a1 	beq.w	800edbc <_vfiprintf_r+0x1f0>
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	f04f 32ff 	mov.w	r2, #4294967295
 800ec80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ec84:	f10a 0a01 	add.w	sl, sl, #1
 800ec88:	9304      	str	r3, [sp, #16]
 800ec8a:	9307      	str	r3, [sp, #28]
 800ec8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ec90:	931a      	str	r3, [sp, #104]	; 0x68
 800ec92:	4654      	mov	r4, sl
 800ec94:	2205      	movs	r2, #5
 800ec96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec9a:	4854      	ldr	r0, [pc, #336]	; (800edec <_vfiprintf_r+0x220>)
 800ec9c:	f7f1 fb20 	bl	80002e0 <memchr>
 800eca0:	9a04      	ldr	r2, [sp, #16]
 800eca2:	b9d8      	cbnz	r0, 800ecdc <_vfiprintf_r+0x110>
 800eca4:	06d1      	lsls	r1, r2, #27
 800eca6:	bf44      	itt	mi
 800eca8:	2320      	movmi	r3, #32
 800ecaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ecae:	0713      	lsls	r3, r2, #28
 800ecb0:	bf44      	itt	mi
 800ecb2:	232b      	movmi	r3, #43	; 0x2b
 800ecb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ecb8:	f89a 3000 	ldrb.w	r3, [sl]
 800ecbc:	2b2a      	cmp	r3, #42	; 0x2a
 800ecbe:	d015      	beq.n	800ecec <_vfiprintf_r+0x120>
 800ecc0:	9a07      	ldr	r2, [sp, #28]
 800ecc2:	4654      	mov	r4, sl
 800ecc4:	2000      	movs	r0, #0
 800ecc6:	f04f 0c0a 	mov.w	ip, #10
 800ecca:	4621      	mov	r1, r4
 800eccc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ecd0:	3b30      	subs	r3, #48	; 0x30
 800ecd2:	2b09      	cmp	r3, #9
 800ecd4:	d94d      	bls.n	800ed72 <_vfiprintf_r+0x1a6>
 800ecd6:	b1b0      	cbz	r0, 800ed06 <_vfiprintf_r+0x13a>
 800ecd8:	9207      	str	r2, [sp, #28]
 800ecda:	e014      	b.n	800ed06 <_vfiprintf_r+0x13a>
 800ecdc:	eba0 0308 	sub.w	r3, r0, r8
 800ece0:	fa09 f303 	lsl.w	r3, r9, r3
 800ece4:	4313      	orrs	r3, r2
 800ece6:	9304      	str	r3, [sp, #16]
 800ece8:	46a2      	mov	sl, r4
 800ecea:	e7d2      	b.n	800ec92 <_vfiprintf_r+0xc6>
 800ecec:	9b03      	ldr	r3, [sp, #12]
 800ecee:	1d19      	adds	r1, r3, #4
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	9103      	str	r1, [sp, #12]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	bfbb      	ittet	lt
 800ecf8:	425b      	neglt	r3, r3
 800ecfa:	f042 0202 	orrlt.w	r2, r2, #2
 800ecfe:	9307      	strge	r3, [sp, #28]
 800ed00:	9307      	strlt	r3, [sp, #28]
 800ed02:	bfb8      	it	lt
 800ed04:	9204      	strlt	r2, [sp, #16]
 800ed06:	7823      	ldrb	r3, [r4, #0]
 800ed08:	2b2e      	cmp	r3, #46	; 0x2e
 800ed0a:	d10c      	bne.n	800ed26 <_vfiprintf_r+0x15a>
 800ed0c:	7863      	ldrb	r3, [r4, #1]
 800ed0e:	2b2a      	cmp	r3, #42	; 0x2a
 800ed10:	d134      	bne.n	800ed7c <_vfiprintf_r+0x1b0>
 800ed12:	9b03      	ldr	r3, [sp, #12]
 800ed14:	1d1a      	adds	r2, r3, #4
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	9203      	str	r2, [sp, #12]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	bfb8      	it	lt
 800ed1e:	f04f 33ff 	movlt.w	r3, #4294967295
 800ed22:	3402      	adds	r4, #2
 800ed24:	9305      	str	r3, [sp, #20]
 800ed26:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800edfc <_vfiprintf_r+0x230>
 800ed2a:	7821      	ldrb	r1, [r4, #0]
 800ed2c:	2203      	movs	r2, #3
 800ed2e:	4650      	mov	r0, sl
 800ed30:	f7f1 fad6 	bl	80002e0 <memchr>
 800ed34:	b138      	cbz	r0, 800ed46 <_vfiprintf_r+0x17a>
 800ed36:	9b04      	ldr	r3, [sp, #16]
 800ed38:	eba0 000a 	sub.w	r0, r0, sl
 800ed3c:	2240      	movs	r2, #64	; 0x40
 800ed3e:	4082      	lsls	r2, r0
 800ed40:	4313      	orrs	r3, r2
 800ed42:	3401      	adds	r4, #1
 800ed44:	9304      	str	r3, [sp, #16]
 800ed46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed4a:	4829      	ldr	r0, [pc, #164]	; (800edf0 <_vfiprintf_r+0x224>)
 800ed4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ed50:	2206      	movs	r2, #6
 800ed52:	f7f1 fac5 	bl	80002e0 <memchr>
 800ed56:	2800      	cmp	r0, #0
 800ed58:	d03f      	beq.n	800edda <_vfiprintf_r+0x20e>
 800ed5a:	4b26      	ldr	r3, [pc, #152]	; (800edf4 <_vfiprintf_r+0x228>)
 800ed5c:	bb1b      	cbnz	r3, 800eda6 <_vfiprintf_r+0x1da>
 800ed5e:	9b03      	ldr	r3, [sp, #12]
 800ed60:	3307      	adds	r3, #7
 800ed62:	f023 0307 	bic.w	r3, r3, #7
 800ed66:	3308      	adds	r3, #8
 800ed68:	9303      	str	r3, [sp, #12]
 800ed6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed6c:	443b      	add	r3, r7
 800ed6e:	9309      	str	r3, [sp, #36]	; 0x24
 800ed70:	e768      	b.n	800ec44 <_vfiprintf_r+0x78>
 800ed72:	fb0c 3202 	mla	r2, ip, r2, r3
 800ed76:	460c      	mov	r4, r1
 800ed78:	2001      	movs	r0, #1
 800ed7a:	e7a6      	b.n	800ecca <_vfiprintf_r+0xfe>
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	3401      	adds	r4, #1
 800ed80:	9305      	str	r3, [sp, #20]
 800ed82:	4619      	mov	r1, r3
 800ed84:	f04f 0c0a 	mov.w	ip, #10
 800ed88:	4620      	mov	r0, r4
 800ed8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed8e:	3a30      	subs	r2, #48	; 0x30
 800ed90:	2a09      	cmp	r2, #9
 800ed92:	d903      	bls.n	800ed9c <_vfiprintf_r+0x1d0>
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d0c6      	beq.n	800ed26 <_vfiprintf_r+0x15a>
 800ed98:	9105      	str	r1, [sp, #20]
 800ed9a:	e7c4      	b.n	800ed26 <_vfiprintf_r+0x15a>
 800ed9c:	fb0c 2101 	mla	r1, ip, r1, r2
 800eda0:	4604      	mov	r4, r0
 800eda2:	2301      	movs	r3, #1
 800eda4:	e7f0      	b.n	800ed88 <_vfiprintf_r+0x1bc>
 800eda6:	ab03      	add	r3, sp, #12
 800eda8:	9300      	str	r3, [sp, #0]
 800edaa:	462a      	mov	r2, r5
 800edac:	4b12      	ldr	r3, [pc, #72]	; (800edf8 <_vfiprintf_r+0x22c>)
 800edae:	a904      	add	r1, sp, #16
 800edb0:	4630      	mov	r0, r6
 800edb2:	f7fd fced 	bl	800c790 <_printf_float>
 800edb6:	4607      	mov	r7, r0
 800edb8:	1c78      	adds	r0, r7, #1
 800edba:	d1d6      	bne.n	800ed6a <_vfiprintf_r+0x19e>
 800edbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800edbe:	07d9      	lsls	r1, r3, #31
 800edc0:	d405      	bmi.n	800edce <_vfiprintf_r+0x202>
 800edc2:	89ab      	ldrh	r3, [r5, #12]
 800edc4:	059a      	lsls	r2, r3, #22
 800edc6:	d402      	bmi.n	800edce <_vfiprintf_r+0x202>
 800edc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800edca:	f7fe fa3f 	bl	800d24c <__retarget_lock_release_recursive>
 800edce:	89ab      	ldrh	r3, [r5, #12]
 800edd0:	065b      	lsls	r3, r3, #25
 800edd2:	f53f af1d 	bmi.w	800ec10 <_vfiprintf_r+0x44>
 800edd6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800edd8:	e71c      	b.n	800ec14 <_vfiprintf_r+0x48>
 800edda:	ab03      	add	r3, sp, #12
 800eddc:	9300      	str	r3, [sp, #0]
 800edde:	462a      	mov	r2, r5
 800ede0:	4b05      	ldr	r3, [pc, #20]	; (800edf8 <_vfiprintf_r+0x22c>)
 800ede2:	a904      	add	r1, sp, #16
 800ede4:	4630      	mov	r0, r6
 800ede6:	f7fd ff5b 	bl	800cca0 <_printf_i>
 800edea:	e7e4      	b.n	800edb6 <_vfiprintf_r+0x1ea>
 800edec:	0800f3a4 	.word	0x0800f3a4
 800edf0:	0800f3ae 	.word	0x0800f3ae
 800edf4:	0800c791 	.word	0x0800c791
 800edf8:	0800eba9 	.word	0x0800eba9
 800edfc:	0800f3aa 	.word	0x0800f3aa

0800ee00 <__swbuf_r>:
 800ee00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee02:	460e      	mov	r6, r1
 800ee04:	4614      	mov	r4, r2
 800ee06:	4605      	mov	r5, r0
 800ee08:	b118      	cbz	r0, 800ee12 <__swbuf_r+0x12>
 800ee0a:	6a03      	ldr	r3, [r0, #32]
 800ee0c:	b90b      	cbnz	r3, 800ee12 <__swbuf_r+0x12>
 800ee0e:	f7fe f8f5 	bl	800cffc <__sinit>
 800ee12:	69a3      	ldr	r3, [r4, #24]
 800ee14:	60a3      	str	r3, [r4, #8]
 800ee16:	89a3      	ldrh	r3, [r4, #12]
 800ee18:	071a      	lsls	r2, r3, #28
 800ee1a:	d525      	bpl.n	800ee68 <__swbuf_r+0x68>
 800ee1c:	6923      	ldr	r3, [r4, #16]
 800ee1e:	b31b      	cbz	r3, 800ee68 <__swbuf_r+0x68>
 800ee20:	6823      	ldr	r3, [r4, #0]
 800ee22:	6922      	ldr	r2, [r4, #16]
 800ee24:	1a98      	subs	r0, r3, r2
 800ee26:	6963      	ldr	r3, [r4, #20]
 800ee28:	b2f6      	uxtb	r6, r6
 800ee2a:	4283      	cmp	r3, r0
 800ee2c:	4637      	mov	r7, r6
 800ee2e:	dc04      	bgt.n	800ee3a <__swbuf_r+0x3a>
 800ee30:	4621      	mov	r1, r4
 800ee32:	4628      	mov	r0, r5
 800ee34:	f7ff fdae 	bl	800e994 <_fflush_r>
 800ee38:	b9e0      	cbnz	r0, 800ee74 <__swbuf_r+0x74>
 800ee3a:	68a3      	ldr	r3, [r4, #8]
 800ee3c:	3b01      	subs	r3, #1
 800ee3e:	60a3      	str	r3, [r4, #8]
 800ee40:	6823      	ldr	r3, [r4, #0]
 800ee42:	1c5a      	adds	r2, r3, #1
 800ee44:	6022      	str	r2, [r4, #0]
 800ee46:	701e      	strb	r6, [r3, #0]
 800ee48:	6962      	ldr	r2, [r4, #20]
 800ee4a:	1c43      	adds	r3, r0, #1
 800ee4c:	429a      	cmp	r2, r3
 800ee4e:	d004      	beq.n	800ee5a <__swbuf_r+0x5a>
 800ee50:	89a3      	ldrh	r3, [r4, #12]
 800ee52:	07db      	lsls	r3, r3, #31
 800ee54:	d506      	bpl.n	800ee64 <__swbuf_r+0x64>
 800ee56:	2e0a      	cmp	r6, #10
 800ee58:	d104      	bne.n	800ee64 <__swbuf_r+0x64>
 800ee5a:	4621      	mov	r1, r4
 800ee5c:	4628      	mov	r0, r5
 800ee5e:	f7ff fd99 	bl	800e994 <_fflush_r>
 800ee62:	b938      	cbnz	r0, 800ee74 <__swbuf_r+0x74>
 800ee64:	4638      	mov	r0, r7
 800ee66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee68:	4621      	mov	r1, r4
 800ee6a:	4628      	mov	r0, r5
 800ee6c:	f000 f806 	bl	800ee7c <__swsetup_r>
 800ee70:	2800      	cmp	r0, #0
 800ee72:	d0d5      	beq.n	800ee20 <__swbuf_r+0x20>
 800ee74:	f04f 37ff 	mov.w	r7, #4294967295
 800ee78:	e7f4      	b.n	800ee64 <__swbuf_r+0x64>
	...

0800ee7c <__swsetup_r>:
 800ee7c:	b538      	push	{r3, r4, r5, lr}
 800ee7e:	4b2a      	ldr	r3, [pc, #168]	; (800ef28 <__swsetup_r+0xac>)
 800ee80:	4605      	mov	r5, r0
 800ee82:	6818      	ldr	r0, [r3, #0]
 800ee84:	460c      	mov	r4, r1
 800ee86:	b118      	cbz	r0, 800ee90 <__swsetup_r+0x14>
 800ee88:	6a03      	ldr	r3, [r0, #32]
 800ee8a:	b90b      	cbnz	r3, 800ee90 <__swsetup_r+0x14>
 800ee8c:	f7fe f8b6 	bl	800cffc <__sinit>
 800ee90:	89a3      	ldrh	r3, [r4, #12]
 800ee92:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ee96:	0718      	lsls	r0, r3, #28
 800ee98:	d422      	bmi.n	800eee0 <__swsetup_r+0x64>
 800ee9a:	06d9      	lsls	r1, r3, #27
 800ee9c:	d407      	bmi.n	800eeae <__swsetup_r+0x32>
 800ee9e:	2309      	movs	r3, #9
 800eea0:	602b      	str	r3, [r5, #0]
 800eea2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800eea6:	81a3      	strh	r3, [r4, #12]
 800eea8:	f04f 30ff 	mov.w	r0, #4294967295
 800eeac:	e034      	b.n	800ef18 <__swsetup_r+0x9c>
 800eeae:	0758      	lsls	r0, r3, #29
 800eeb0:	d512      	bpl.n	800eed8 <__swsetup_r+0x5c>
 800eeb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eeb4:	b141      	cbz	r1, 800eec8 <__swsetup_r+0x4c>
 800eeb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eeba:	4299      	cmp	r1, r3
 800eebc:	d002      	beq.n	800eec4 <__swsetup_r+0x48>
 800eebe:	4628      	mov	r0, r5
 800eec0:	f7fe ffc2 	bl	800de48 <_free_r>
 800eec4:	2300      	movs	r3, #0
 800eec6:	6363      	str	r3, [r4, #52]	; 0x34
 800eec8:	89a3      	ldrh	r3, [r4, #12]
 800eeca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800eece:	81a3      	strh	r3, [r4, #12]
 800eed0:	2300      	movs	r3, #0
 800eed2:	6063      	str	r3, [r4, #4]
 800eed4:	6923      	ldr	r3, [r4, #16]
 800eed6:	6023      	str	r3, [r4, #0]
 800eed8:	89a3      	ldrh	r3, [r4, #12]
 800eeda:	f043 0308 	orr.w	r3, r3, #8
 800eede:	81a3      	strh	r3, [r4, #12]
 800eee0:	6923      	ldr	r3, [r4, #16]
 800eee2:	b94b      	cbnz	r3, 800eef8 <__swsetup_r+0x7c>
 800eee4:	89a3      	ldrh	r3, [r4, #12]
 800eee6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800eeea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eeee:	d003      	beq.n	800eef8 <__swsetup_r+0x7c>
 800eef0:	4621      	mov	r1, r4
 800eef2:	4628      	mov	r0, r5
 800eef4:	f000 f884 	bl	800f000 <__smakebuf_r>
 800eef8:	89a0      	ldrh	r0, [r4, #12]
 800eefa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eefe:	f010 0301 	ands.w	r3, r0, #1
 800ef02:	d00a      	beq.n	800ef1a <__swsetup_r+0x9e>
 800ef04:	2300      	movs	r3, #0
 800ef06:	60a3      	str	r3, [r4, #8]
 800ef08:	6963      	ldr	r3, [r4, #20]
 800ef0a:	425b      	negs	r3, r3
 800ef0c:	61a3      	str	r3, [r4, #24]
 800ef0e:	6923      	ldr	r3, [r4, #16]
 800ef10:	b943      	cbnz	r3, 800ef24 <__swsetup_r+0xa8>
 800ef12:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ef16:	d1c4      	bne.n	800eea2 <__swsetup_r+0x26>
 800ef18:	bd38      	pop	{r3, r4, r5, pc}
 800ef1a:	0781      	lsls	r1, r0, #30
 800ef1c:	bf58      	it	pl
 800ef1e:	6963      	ldrpl	r3, [r4, #20]
 800ef20:	60a3      	str	r3, [r4, #8]
 800ef22:	e7f4      	b.n	800ef0e <__swsetup_r+0x92>
 800ef24:	2000      	movs	r0, #0
 800ef26:	e7f7      	b.n	800ef18 <__swsetup_r+0x9c>
 800ef28:	2400019c 	.word	0x2400019c

0800ef2c <_raise_r>:
 800ef2c:	291f      	cmp	r1, #31
 800ef2e:	b538      	push	{r3, r4, r5, lr}
 800ef30:	4604      	mov	r4, r0
 800ef32:	460d      	mov	r5, r1
 800ef34:	d904      	bls.n	800ef40 <_raise_r+0x14>
 800ef36:	2316      	movs	r3, #22
 800ef38:	6003      	str	r3, [r0, #0]
 800ef3a:	f04f 30ff 	mov.w	r0, #4294967295
 800ef3e:	bd38      	pop	{r3, r4, r5, pc}
 800ef40:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ef42:	b112      	cbz	r2, 800ef4a <_raise_r+0x1e>
 800ef44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ef48:	b94b      	cbnz	r3, 800ef5e <_raise_r+0x32>
 800ef4a:	4620      	mov	r0, r4
 800ef4c:	f000 f830 	bl	800efb0 <_getpid_r>
 800ef50:	462a      	mov	r2, r5
 800ef52:	4601      	mov	r1, r0
 800ef54:	4620      	mov	r0, r4
 800ef56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ef5a:	f000 b817 	b.w	800ef8c <_kill_r>
 800ef5e:	2b01      	cmp	r3, #1
 800ef60:	d00a      	beq.n	800ef78 <_raise_r+0x4c>
 800ef62:	1c59      	adds	r1, r3, #1
 800ef64:	d103      	bne.n	800ef6e <_raise_r+0x42>
 800ef66:	2316      	movs	r3, #22
 800ef68:	6003      	str	r3, [r0, #0]
 800ef6a:	2001      	movs	r0, #1
 800ef6c:	e7e7      	b.n	800ef3e <_raise_r+0x12>
 800ef6e:	2400      	movs	r4, #0
 800ef70:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ef74:	4628      	mov	r0, r5
 800ef76:	4798      	blx	r3
 800ef78:	2000      	movs	r0, #0
 800ef7a:	e7e0      	b.n	800ef3e <_raise_r+0x12>

0800ef7c <raise>:
 800ef7c:	4b02      	ldr	r3, [pc, #8]	; (800ef88 <raise+0xc>)
 800ef7e:	4601      	mov	r1, r0
 800ef80:	6818      	ldr	r0, [r3, #0]
 800ef82:	f7ff bfd3 	b.w	800ef2c <_raise_r>
 800ef86:	bf00      	nop
 800ef88:	2400019c 	.word	0x2400019c

0800ef8c <_kill_r>:
 800ef8c:	b538      	push	{r3, r4, r5, lr}
 800ef8e:	4d07      	ldr	r5, [pc, #28]	; (800efac <_kill_r+0x20>)
 800ef90:	2300      	movs	r3, #0
 800ef92:	4604      	mov	r4, r0
 800ef94:	4608      	mov	r0, r1
 800ef96:	4611      	mov	r1, r2
 800ef98:	602b      	str	r3, [r5, #0]
 800ef9a:	f7f2 fcbd 	bl	8001918 <_kill>
 800ef9e:	1c43      	adds	r3, r0, #1
 800efa0:	d102      	bne.n	800efa8 <_kill_r+0x1c>
 800efa2:	682b      	ldr	r3, [r5, #0]
 800efa4:	b103      	cbz	r3, 800efa8 <_kill_r+0x1c>
 800efa6:	6023      	str	r3, [r4, #0]
 800efa8:	bd38      	pop	{r3, r4, r5, pc}
 800efaa:	bf00      	nop
 800efac:	24002308 	.word	0x24002308

0800efb0 <_getpid_r>:
 800efb0:	f7f2 bcaa 	b.w	8001908 <_getpid>

0800efb4 <__swhatbuf_r>:
 800efb4:	b570      	push	{r4, r5, r6, lr}
 800efb6:	460c      	mov	r4, r1
 800efb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efbc:	2900      	cmp	r1, #0
 800efbe:	b096      	sub	sp, #88	; 0x58
 800efc0:	4615      	mov	r5, r2
 800efc2:	461e      	mov	r6, r3
 800efc4:	da0d      	bge.n	800efe2 <__swhatbuf_r+0x2e>
 800efc6:	89a3      	ldrh	r3, [r4, #12]
 800efc8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800efcc:	f04f 0100 	mov.w	r1, #0
 800efd0:	bf0c      	ite	eq
 800efd2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800efd6:	2340      	movne	r3, #64	; 0x40
 800efd8:	2000      	movs	r0, #0
 800efda:	6031      	str	r1, [r6, #0]
 800efdc:	602b      	str	r3, [r5, #0]
 800efde:	b016      	add	sp, #88	; 0x58
 800efe0:	bd70      	pop	{r4, r5, r6, pc}
 800efe2:	466a      	mov	r2, sp
 800efe4:	f000 f848 	bl	800f078 <_fstat_r>
 800efe8:	2800      	cmp	r0, #0
 800efea:	dbec      	blt.n	800efc6 <__swhatbuf_r+0x12>
 800efec:	9901      	ldr	r1, [sp, #4]
 800efee:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800eff2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800eff6:	4259      	negs	r1, r3
 800eff8:	4159      	adcs	r1, r3
 800effa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800effe:	e7eb      	b.n	800efd8 <__swhatbuf_r+0x24>

0800f000 <__smakebuf_r>:
 800f000:	898b      	ldrh	r3, [r1, #12]
 800f002:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f004:	079d      	lsls	r5, r3, #30
 800f006:	4606      	mov	r6, r0
 800f008:	460c      	mov	r4, r1
 800f00a:	d507      	bpl.n	800f01c <__smakebuf_r+0x1c>
 800f00c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f010:	6023      	str	r3, [r4, #0]
 800f012:	6123      	str	r3, [r4, #16]
 800f014:	2301      	movs	r3, #1
 800f016:	6163      	str	r3, [r4, #20]
 800f018:	b002      	add	sp, #8
 800f01a:	bd70      	pop	{r4, r5, r6, pc}
 800f01c:	ab01      	add	r3, sp, #4
 800f01e:	466a      	mov	r2, sp
 800f020:	f7ff ffc8 	bl	800efb4 <__swhatbuf_r>
 800f024:	9900      	ldr	r1, [sp, #0]
 800f026:	4605      	mov	r5, r0
 800f028:	4630      	mov	r0, r6
 800f02a:	f7fd fa95 	bl	800c558 <_malloc_r>
 800f02e:	b948      	cbnz	r0, 800f044 <__smakebuf_r+0x44>
 800f030:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f034:	059a      	lsls	r2, r3, #22
 800f036:	d4ef      	bmi.n	800f018 <__smakebuf_r+0x18>
 800f038:	f023 0303 	bic.w	r3, r3, #3
 800f03c:	f043 0302 	orr.w	r3, r3, #2
 800f040:	81a3      	strh	r3, [r4, #12]
 800f042:	e7e3      	b.n	800f00c <__smakebuf_r+0xc>
 800f044:	89a3      	ldrh	r3, [r4, #12]
 800f046:	6020      	str	r0, [r4, #0]
 800f048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f04c:	81a3      	strh	r3, [r4, #12]
 800f04e:	9b00      	ldr	r3, [sp, #0]
 800f050:	6163      	str	r3, [r4, #20]
 800f052:	9b01      	ldr	r3, [sp, #4]
 800f054:	6120      	str	r0, [r4, #16]
 800f056:	b15b      	cbz	r3, 800f070 <__smakebuf_r+0x70>
 800f058:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f05c:	4630      	mov	r0, r6
 800f05e:	f000 f81d 	bl	800f09c <_isatty_r>
 800f062:	b128      	cbz	r0, 800f070 <__smakebuf_r+0x70>
 800f064:	89a3      	ldrh	r3, [r4, #12]
 800f066:	f023 0303 	bic.w	r3, r3, #3
 800f06a:	f043 0301 	orr.w	r3, r3, #1
 800f06e:	81a3      	strh	r3, [r4, #12]
 800f070:	89a3      	ldrh	r3, [r4, #12]
 800f072:	431d      	orrs	r5, r3
 800f074:	81a5      	strh	r5, [r4, #12]
 800f076:	e7cf      	b.n	800f018 <__smakebuf_r+0x18>

0800f078 <_fstat_r>:
 800f078:	b538      	push	{r3, r4, r5, lr}
 800f07a:	4d07      	ldr	r5, [pc, #28]	; (800f098 <_fstat_r+0x20>)
 800f07c:	2300      	movs	r3, #0
 800f07e:	4604      	mov	r4, r0
 800f080:	4608      	mov	r0, r1
 800f082:	4611      	mov	r1, r2
 800f084:	602b      	str	r3, [r5, #0]
 800f086:	f7f2 fca6 	bl	80019d6 <_fstat>
 800f08a:	1c43      	adds	r3, r0, #1
 800f08c:	d102      	bne.n	800f094 <_fstat_r+0x1c>
 800f08e:	682b      	ldr	r3, [r5, #0]
 800f090:	b103      	cbz	r3, 800f094 <_fstat_r+0x1c>
 800f092:	6023      	str	r3, [r4, #0]
 800f094:	bd38      	pop	{r3, r4, r5, pc}
 800f096:	bf00      	nop
 800f098:	24002308 	.word	0x24002308

0800f09c <_isatty_r>:
 800f09c:	b538      	push	{r3, r4, r5, lr}
 800f09e:	4d06      	ldr	r5, [pc, #24]	; (800f0b8 <_isatty_r+0x1c>)
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	4604      	mov	r4, r0
 800f0a4:	4608      	mov	r0, r1
 800f0a6:	602b      	str	r3, [r5, #0]
 800f0a8:	f7f2 fca5 	bl	80019f6 <_isatty>
 800f0ac:	1c43      	adds	r3, r0, #1
 800f0ae:	d102      	bne.n	800f0b6 <_isatty_r+0x1a>
 800f0b0:	682b      	ldr	r3, [r5, #0]
 800f0b2:	b103      	cbz	r3, 800f0b6 <_isatty_r+0x1a>
 800f0b4:	6023      	str	r3, [r4, #0]
 800f0b6:	bd38      	pop	{r3, r4, r5, pc}
 800f0b8:	24002308 	.word	0x24002308

0800f0bc <_init>:
 800f0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0be:	bf00      	nop
 800f0c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0c2:	bc08      	pop	{r3}
 800f0c4:	469e      	mov	lr, r3
 800f0c6:	4770      	bx	lr

0800f0c8 <_fini>:
 800f0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0ca:	bf00      	nop
 800f0cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0ce:	bc08      	pop	{r3}
 800f0d0:	469e      	mov	lr, r3
 800f0d2:	4770      	bx	lr
